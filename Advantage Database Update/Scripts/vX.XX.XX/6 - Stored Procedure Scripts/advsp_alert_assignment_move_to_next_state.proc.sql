IF EXISTS ( SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[advsp_alert_assignment_move_to_next_state]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE [dbo].[advsp_alert_assignment_move_to_next_state];
END
GO
CREATE PROCEDURE [dbo].[advsp_alert_assignment_move_to_next_state] 
@USER_CODE VARCHAR(100) = NULL,
@ALERT_ID INT = NULL,
@NEXT_STATE_ID INT = NULL,
@TIME_STAMP SMALLDATETIME = NULL,
@DOCUMENT_ID INT = NULL
AS
/*=========== QUERY ===========*/
IF NOT @NEXT_STATE_ID IS NULL AND @NEXT_STATE_ID > 0
BEGIN
	DECLARE @NEXT_EMPS TABLE (ID INT IDENTITY, EMP_CODE VARCHAR(6))
	DECLARE
		@CURR_TEMPLATE_NAME VARCHAR(500),
		@NEXT_STATE_NAME VARCHAR(500),
		@CURR_ALRT_NOTIFY_HDR_ID INT,
		@CURR_ALERT_STATE_ID INT,
		@JOB_NUMBER INT,
		@JOB_COMPONENT_NBR SMALLINT,
		@NEXT_STATE_DEFAULT_ASSIGNEE_COUNT INT,
		@MAX_RCPT_ID INT,
		@MOVED_TO_NEXT_STATE BIT,
		@ALERT_HOURS DECIMAL (7, 2),
		@IS_PROOF BIT
	;
	SELECT
		@CURR_ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID,
		@CURR_ALERT_STATE_ID = A.ALERT_STATE_ID,
		@CURR_TEMPLATE_NAME = T.ALERT_NOTIFY_NAME,
		@JOB_NUMBER = A.JOB_NUMBER,
		@JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR,
		@IS_PROOF =
			CASE
				WHEN A.ALERT_CAT_ID = 79 THEN 1
				ELSE 0
			END
	FROM
		ALERT A WITH(NOLOCK)
		INNER JOIN ALERT_NOTIFY_HDR T WITH(NOLOCK) ON A.ALRT_NOTIFY_HDR_ID = T.ALRT_NOTIFY_HDR_ID
		INNER JOIN ALERT_STATES S WITH(NOLOCK) ON A.ALERT_STATE_ID = S.ALERT_STATE_ID
	WHERE
		A.ALERT_ID = @ALERT_ID
	;
	IF @DOCUMENT_ID IS NULL OR @DOCUMENT_ID = 0 
	BEGIN
		SELECT 
			@DOCUMENT_ID = MAX(DOCUMENT_ID)
		FROM
			ALERT_ATTACHMENT AA WITH(NOLOCK)
		WHERE
			AA.ALERT_ID = @ALERT_ID
		;
	END
	SELECT 
		@NEXT_STATE_NAME = ALERT_STATE_NAME 
	FROM 
		ALERT_STATES A WITH(NOLOCK) 
	WHERE 
		ALERT_STATE_ID = @NEXT_STATE_ID;
	--	AUTO SUBJECT
	BEGIN
		DECLARE
			@UPDATE_SUBJECT BIT,
			@DFLT_SUBJECT_TYPE VARCHAR(100),
			@DFLT_SUBJECT VARCHAR(4000);
		SELECT @UPDATE_SUBJECT = 0;
		SELECT 
			@DFLT_SUBJECT_TYPE = CAST(ISNULL(AGY_SETTINGS_VALUE, '') AS VARCHAR) 
		FROM 
			AGY_SETTINGS WITH(NOLOCK) 
		WHERE 
			AGY_SETTINGS_CODE = 'ALRT_ASSGN_DFLT_SUB';
		IF @DFLT_SUBJECT_TYPE IS NOT NULL AND @DFLT_SUBJECT_TYPE <> '' AND DATALENGTH(@DFLT_SUBJECT_TYPE) > 0
		BEGIN
			IF @DFLT_SUBJECT_TYPE = 'state'
			BEGIN
				SELECT @DFLT_SUBJECT = @NEXT_STATE_NAME;
				SELECT @UPDATE_SUBJECT = 1;
			END
			IF @DFLT_SUBJECT_TYPE = 'template'
			BEGIN
				SELECT @DFLT_SUBJECT = @CURR_TEMPLATE_NAME;
				SELECT @UPDATE_SUBJECT = 1;
			END
			IF @DFLT_SUBJECT_TYPE = 'templateandstate'
			BEGIN
				SELECT @DFLT_SUBJECT = @CURR_TEMPLATE_NAME + ' | ' + @NEXT_STATE_NAME;
				SELECT @UPDATE_SUBJECT = 1;
			END
			IF @DFLT_SUBJECT_TYPE = 'jjcts'
			BEGIN
				SELECT @DFLT_SUBJECT = '[' + RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), JC.JOB_NUMBER), 6) + '/' + RIGHT(REPLICATE('0', 3) + CONVERT(VARCHAR(20), JC.JOB_COMPONENT_NBR), 3) + ' - ' + JC.JOB_COMP_DESC
				FROM
					JOB_COMPONENT JC WITH(NOLOCK)
				WHERE
					JC.JOB_NUMBER = @JOB_NUMBER
					AND JC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
				SELECT @DFLT_SUBJECT = @DFLT_SUBJECT +  @CURR_TEMPLATE_NAME + ' | ' + @NEXT_STATE_NAME + ']'
				SELECT @UPDATE_SUBJECT = 1;
			END
		END
	END
	SELECT @MAX_RCPT_ID = MAX(ALERT_RCPT_ID) FROM ALERT_RCPT WHERE ALERT_ID = @ALERT_ID;
	SELECT @MAX_RCPT_ID = ISNULL(@MAX_RCPT_ID, 0);
	--  UPDATE THE MAIN ALERT
	IF @UPDATE_SUBJECT = 1 AND DATALENGTH(@DFLT_SUBJECT) > 0
	BEGIN
		UPDATE ALERT WITH(ROWLOCK)
		SET 
			ALERT_STATE_ID = @NEXT_STATE_ID ,
			[SUBJECT] = @DFLT_SUBJECT
		WHERE 
			ALERT_ID = @ALERT_ID
		;
	END
	ELSE
	BEGIN
		UPDATE ALERT WITH(ROWLOCK)
		SET 
			ALERT_STATE_ID = @NEXT_STATE_ID 
		WHERE 
			ALERT_ID = @ALERT_ID
		;
	END
	SET @MOVED_TO_NEXT_STATE = 1;
	--	GET DEFAULT EMPLOYEES FOR THAT STATE
	BEGIN
		-- MAKE SURE USING NEW TEMPLATE TABLE
		EXEC [dbo].[advsp_alert_assignment_check_for_template] @ALERT_ID, NULL;
		-- FROM TEMPLATE TABLE
		INSERT INTO @NEXT_EMPS (EMP_CODE)
		SELECT ANEA.EMP_CODE
		FROM 
			ALERT_NOTIFY_EMPS_ASSIGNMENT ANEA WITH(NOLOCK) 
			INNER JOIN EMPLOYEE_CLOAK E WITH(NOLOCK) ON ANEA.EMP_CODE = E.EMP_CODE
		WHERE 
			ANEA.ALERT_ID = @ALERT_ID 
			AND ANEA.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
			AND ANEA.ALERT_STATE_ID = @NEXT_STATE_ID
			AND ANEA.IS_SELECTED = 1
			AND E.EMP_TERM_DATE IS NULL
		;
		SELECT
			@NEXT_STATE_DEFAULT_ASSIGNEE_COUNT = COUNT(1)
		FROM
			@NEXT_EMPS
		;
	END
	--  PROCESS DEFAULT ASSIGNEES
	IF @NEXT_STATE_DEFAULT_ASSIGNEE_COUNT > 0
	BEGIN
		DECLARE 
			@CTR INT, 
			@NEXT_CMNT VARCHAR(MAX),
			@EMP_STRING VARCHAR(MAX),
			@CURR_EMP_CODE VARCHAR(6),
			@CURR_HOURS DECIMAL (7,2),
			@NEXT_ID INT
		SET @NEXT_CMNT = '';
		SET @EMP_STRING = '';
		SELECT 
			@NEXT_CMNT = UPPER(ALERT_STATE_NAME) + ' | '
		FROM 
			ALERT_STATES 
		WHERE 
			ALERT_STATE_ID = @NEXT_STATE_ID;
		SET @CTR = 0;
		-- ADD DEFAULT ASSIGNEES
		BEGIN
			WHILE @CTR < @NEXT_STATE_DEFAULT_ASSIGNEE_COUNT
			BEGIN
				SET @CTR = @CTR + 1;
				SET @CURR_EMP_CODE = NULL;
				SET @CURR_HOURS = NULL;
				SELECT @CURR_EMP_CODE = N.EMP_CODE FROM @NEXT_EMPS N WHERE N.ID = @CTR;
				IF NOT @CURR_EMP_CODE IS NULL
				BEGIN
					-- DELETE DISMISSED RECORD (RE-OPEN) IF COMPLETED ON A DIFFERENT STATE; PRESERVE HOURS
					IF EXISTS (SELECT ALERT_ID FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @CURR_EMP_CODE AND CURRENT_NOTIFY = 1)
					BEGIN
						SELECT @CURR_HOURS = (SELECT TOP 1 A.HOURS_ALLOWED FROM ALERT_RCPT_DISMISSED A WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @CURR_EMP_CODE AND CURRENT_NOTIFY = 1);
						DELETE FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @CURR_EMP_CODE AND CURRENT_NOTIFY = 1;
					END
					ELSE
					BEGIN
						SELECT @CURR_HOURS = @ALERT_HOURS;
					END
					-- MAKE SURE ASSIGNEE ADDED OR UPDATED TO CORRECT STATE
					IF EXISTS (SELECT ALERT_ID FROM ALERT_RCPT WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @CURR_EMP_CODE AND CURRENT_NOTIFY = 1)
					BEGIN
						UPDATE ALERT_RCPT SET ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID = @NEXT_STATE_ID, PROOFING_STATUS_ID = NULL
						WHERE
							ALERT_ID = @ALERT_ID AND EMP_CODE = @CURR_EMP_CODE AND CURRENT_NOTIFY = 1;
					END
					ELSE
					BEGIN
						SELECT @MAX_RCPT_ID = MAX(ALERT_RCPT_ID) FROM ALERT_RCPT WHERE ALERT_ID = @ALERT_ID;
						SELECT @MAX_RCPT_ID = ISNULL(@MAX_RCPT_ID, 0);
						INSERT INTO ALERT_RCPT(ALERT_ID, ALERT_RCPT_ID, EMP_CODE, EMAIL_ADDRESS, CURRENT_RCPT, CURRENT_NOTIFY, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, HOURS_ALLOWED)
						SELECT
							@ALERT_ID, N.ID + ISNULL(@MAX_RCPT_ID, 0), N.EMP_CODE, E.EMP_EMAIL, 0, 1, @CURR_ALRT_NOTIFY_HDR_ID, @NEXT_STATE_ID, COALESCE(@CURR_HOURS, @ALERT_HOURS)
						FROM
							@NEXT_EMPS N
							INNER JOIN EMPLOYEE E ON N.EMP_CODE = E.EMP_CODE
						WHERE
							N.EMP_CODE = @CURR_EMP_CODE;
					END
					--  ADD COMMENT THAT AUTO CHANGED
					INSERT INTO ALERT_COMMENT (ALERT_ID, USER_CODE, GENERATED_DATE, COMMENT, EMAILSENT, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, CUSTODY_START, ASSIGNED_EMP_CODE, DOCUMENT_ID, IS_SYSTEM)
					SELECT 
						@ALERT_ID,
						@USER_CODE,
						@TIME_STAMP,
						UPPER(@NEXT_STATE_NAME) + ' | ' + ISNULL(E.EMP_FNAME + ' ', '') + ISNULL(E.EMP_MI + '. ', '') + E.EMP_LNAME,
						0,
						@CURR_ALRT_NOTIFY_HDR_ID,
						@NEXT_STATE_ID,
						@TIME_STAMP,
						E.EMP_CODE,
						@DOCUMENT_ID,
						1
					FROM 
						@NEXT_EMPS N
						INNER JOIN EMPLOYEE E ON N.EMP_CODE = E.EMP_CODE 
					WHERE 
						N.EMP_CODE = @CURR_EMP_CODE;		
					BEGIN TRY
						DECLARE
							@DISMISSED_CC_COUNT INT,
							@DISMISSED_EMP_CODE VARCHAR(6),
							@DISMISSED_CURR_ID INT
						DECLARE 
							@DISMISSED_CC TABLE (ID INT IDENTITY, EMP_CODE VARCHAR(6));
						INSERT INTO @DISMISSED_CC
						SELECT
							EMP_CODE
						FROM
							ALERT_RCPT_DISMISSED ARD WITH(NOLOCK)
						WHERE
							ARD.ALERT_ID = @ALERT_ID
							AND (ARD.CURRENT_NOTIFY IS NULL OR ARD.CURRENT_NOTIFY = 0);
						SELECT @DISMISSED_CC_COUNT = COUNT(1) FROM @DISMISSED_CC;
						IF @DISMISSED_CC_COUNT > 0
						BEGIN
							SET @DISMISSED_CURR_ID = 0;
							WHILE @DISMISSED_CURR_ID < @DISMISSED_CC_COUNT
							BEGIN
								SELECT @DISMISSED_EMP_CODE = NULL;
								SELECT @DISMISSED_CURR_ID = @DISMISSED_CURR_ID + 1;
								SELECT @DISMISSED_EMP_CODE = EMP_CODE FROM @DISMISSED_CC WHERE ID = @DISMISSED_CURR_ID;
								IF @DISMISSED_EMP_CODE IS NOT NULL
								BEGIN
									EXEC [dbo].[usp_wv_ALERT_UNDISMISS] @ALERT_ID, @USER_CODE, @DISMISSED_EMP_CODE, 0, 0, 0;
								END
							END
						END
					END TRY
					BEGIN CATCH
						PRINT 'ERR'
					END CATCH
				END
			END
		END
	END
	SELECT
		[MovedToNextState] = @MOVED_TO_NEXT_STATE,
		[NextStateName] = @NEXT_STATE_NAME,
		[AssigneesProcessed] = @NEXT_STATE_DEFAULT_ASSIGNEE_COUNT
	;		
		
END
/*=========== QUERY ===========*/