if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[advsp_employee_timesheet_approval_report]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[advsp_employee_timesheet_approval_report]
GO

CREATE PROCEDURE [dbo].[advsp_employee_timesheet_approval_report]	
	@START_DATE SMALLDATETIME,
	@END_DATE SMALLDATETIME,
	@UserID varchar(100)
AS BEGIN

	DECLARE @DAY_COUNT INT ,
			@TIME_APPROVAL_ACTIVE SMALLINT,
			@REPORT_MISSING_TIME SMALLINT

	CREATE TABLE #DATES_TABLE (
								THE_DATE SMALLDATETIME
							   )

	CREATE TABLE #TIME_TABLE (
								EMP_CODE VARCHAR(6) COLLATE database_default,
								EMP_START_DATE SMALLDATETIME,
								EMP_TERM_DATE SMALLDATETIME,
								EMP_DATE SMALLDATETIME,
								DTL_HOURS DECIMAL(15,2) NULL,
								NP_HOURS DECIMAL(15,2) NULL,
								NT_HOURS DECIMAL(15,2) NULL,
								TOTAL_HOURS DECIMAL(15,2) NULL,
								WEEK_START SMALLDATETIME,
								WEEK_TOTAL_HOURS DECIMAL(15,2) NULL,
								DAY_REQUIRED BIT NULL,
								DAY_REQUIRED_HOURS DECIMAL(15,2) NULL,
								POST_PERIOD_CLOSED BIT,
								APPROVAL_TYPE SMALLINT,
								TS_APPROVAL_ACTIVE SMALLINT,
								REPORT_MISSING_TIME SMALLINT,
								IS_HOLIDAY SMALLINT
							 )

	DELETE FROM W_EMP_STD_HOURS WHERE UPPER(USERID) = UPPER(@UserID)

	INSERT INTO W_EMP_STD_HOURS (USERID, START_DATE, END_DATE)
	VALUES(@UserID, @START_DATE, @END_DATE)	

	SET @DAY_COUNT = DATEDIFF(d, @START_DATE, @END_DATE);
		
	WHILE @DAY_COUNT >= 0
	BEGIN

		INSERT INTO #DATES_TABLE VALUES (DATEADD(d, @DAY_COUNT, @START_DATE))	

		SET @DAY_COUNT = @DAY_COUNT - 1;

	END

	--SELECT * FROM #DATES_TABLE

	SELECT 
		@TIME_APPROVAL_ACTIVE = ISNULL(AGENCY.TIME_APPR_ACTIVE, 0),
		@REPORT_MISSING_TIME = AGENCY.WEEKLY_TIME 
	FROM 
		dbo.AGENCY

	INSERT INTO #TIME_TABLE (EMP_CODE, EMP_START_DATE, EMP_TERM_DATE, EMP_DATE, DTL_HOURS, NP_HOURS, TOTAL_HOURS, WEEK_START, TS_APPROVAL_ACTIVE, REPORT_MISSING_TIME, DAY_REQUIRED, DAY_REQUIRED_HOURS)
		SELECT
			ET.EMP_CODE,
			ET.EMP_START_DATE,
			ET.EMP_TERM_DATE,
			ET.EMP_DATE,
			ET_DTL.DTL_HRS,
			ET_NP.NP_HRS,
			(ISNULL(ET_DTL.DTL_HRS, 0) + ISNULL(ET_NP.NP_HRS, 0)),
			ET.WEEK_START,
			ET.TS_APPROVAL_ACTIVE,
			ET.REPORT_MISSING_TIME,
			ET.DAY_REQ,
			[DAY_REQUIRED_HOURS] = CASE	
										WHEN ET.DAY_REQ = 1 THEN ET.REQ_HOURS
										ELSE 0
									END
		FROM
			(SELECT 
				EMPLOYEE.EMP_CODE,
				[EMP_START_DATE] = EMPLOYEE.EMP_DATE,
				EMPLOYEE.EMP_TERM_DATE,
				[EMP_DATE] = DT.THE_DATE,
				[WEEK_START] = DATEADD(dw, (DATEPART(dw, DT.THE_DATE) * -1) + 1, DT.THE_DATE),
				[TS_APPROVAL_ACTIVE] = CASE
										WHEN @TIME_APPROVAL_ACTIVE = 0 THEN 0
										WHEN EMPLOYEE.TS_APPR_FLAG = 0 THEN 1
										ELSE 0
									END,
				[REPORT_MISSING_TIME] = CASE 
										WHEN EMPLOYEE.WEEKLY_TIME IS NULL THEN @REPORT_MISSING_TIME
										ELSE EMPLOYEE.WEEKLY_TIME
									  END,
				[DAY_REQ] = CASE 
								WHEN CHARINDEX(UPPER(SUBSTRING(DATENAME(dw, DT.THE_DATE), 0, 4)), UPPER(EMPLOYEE.EMP_WORK_DAYS), 0) > 0 THEN 1 
								ELSE 0 
							END,
				[REQ_HOURS] = CASE
							WHEN DATEPART(dw, DT.THE_DATE) = 1 THEN ISNULL(EMPLOYEE.SUN_HRS, 0)
							WHEN DATEPART(dw, DT.THE_DATE) = 2 THEN ISNULL(EMPLOYEE.MON_HRS, 0) 
							WHEN DATEPART(dw, DT.THE_DATE) = 3 THEN ISNULL(EMPLOYEE.TUE_HRS, 0) 
							WHEN DATEPART(dw, DT.THE_DATE) = 4 THEN ISNULL(EMPLOYEE.WED_HRS, 0) 
							WHEN DATEPART(dw, DT.THE_DATE) = 5 THEN ISNULL(EMPLOYEE.THU_HRS, 0) 
							WHEN DATEPART(dw, DT.THE_DATE) = 6 THEN ISNULL(EMPLOYEE.FRI_HRS, 0) 
							WHEN DATEPART(dw, DT.THE_DATE) = 7 THEN ISNULL(EMPLOYEE.SAT_HRS, 0)
							ELSE 0 
						  END
			 FROM 
				dbo.EMPLOYEE JOIN
				#DATES_TABLE DT ON 1 = 1
			 WHERE (EMPLOYEE.EMP_TERM_DATE IS NULL OR EMPLOYEE.EMP_TERM_DATE >= @START_DATE) AND
				   (EMPLOYEE.EMP_DATE IS NULL OR EMPLOYEE.EMP_DATE <= @END_DATE)) ET LEFT OUTER JOIN
			(SELECT 
				EMP_TIME.EMP_DATE,
				EMP_TIME.EMP_CODE,
				[DTL_HRS] = SUM(ISNULL(EMP_TIME_DTL.EMP_HOURS, 0))
			 FROM
				dbo.EMP_TIME JOIN
				dbo.EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
			 GROUP BY
				EMP_TIME.EMP_CODE,
				EMP_TIME.EMP_DATE) ET_DTL ON ET.EMP_CODE = ET_DTL.EMP_CODE AND
											 ET.EMP_DATE = ET_DTL.EMP_DATE LEFT OUTER JOIN
			(SELECT
				EMP_TIME.EMP_DATE,
				EMP_TIME.EMP_CODE,
				[NP_HRS] = SUM(ISNULL(EMP_TIME_NP.EMP_HOURS, 0))
			 FROM
				dbo.EMP_TIME JOIN
				dbo.EMP_TIME_NP ON EMP_TIME.ET_ID = EMP_TIME_NP.ET_ID
			 GROUP BY
				EMP_TIME.EMP_CODE,
				EMP_TIME.EMP_DATE) ET_NP ON ET.EMP_CODE = ET_NP.EMP_CODE AND
											ET.EMP_DATE = ET_NP.EMP_DATE														

	--SELECT * FROM #TIME_TABLE
											 
	-- REMOVE DAYS AFTER TERMINATION 
	DELETE FROM 
		#TIME_TABLE
	WHERE 
		EMP_TERM_DATE IS NOT NULL AND
		EMP_TERM_DATE < EMP_DATE

	-- REMOVE DAYS PRIOR TO EMPLOYEE BEING EMPLOYEED
	DELETE FROM 
		#TIME_TABLE
	WHERE 
		EMP_START_DATE IS NOT NULL AND
		EMP_START_DATE > EMP_DATE

	-- REMOVE DAYS EMPLOYEE IS NOT SCHEDULED TO WORK & TIME HAS NOT BEEN ENTERED
	DELETE FROM 
		#TIME_TABLE 
	WHERE 
		DAY_REQUIRED = 0 AND 
		TOTAL_HOURS = 0

	UPDATE 
		#TIME_TABLE
	SET
		NT_HOURS = [HOURS],
		TOTAL_HOURS = TOTAL_HOURS + [HOURS],
		IS_HOLIDAY = CASE WHEN ALL_DAY = 1 THEN 1 
						  WHEN ALL_DAY = 0 THEN 2 ELSE 0 END
	FROM EMP_NON_TASKS INNER JOIN #TIME_TABLE ON EMP_DATE >= [START_DATE] AND EMP_DATE <= [END_DATE]
	WHERE [TYPE] = 'H' 
	--SELECT * FROM #TIME_TABLE
	UPDATE 
		#TIME_TABLE 
	SET 
		WEEK_TOTAL_HOURS = WHOURS.WEEK_HRS
	FROM
		(SELECT 
			EMP_CODE,
			WEEK_START,
			[WEEK_HRS] = SUM(ISNULL(DTL_HOURS,0) + ISNULL(NP_HOURS,0) + ISNULL(NT_HOURS,0))
		 FROM 
			#TIME_TABLE
		 GROUP BY
			EMP_CODE,
			WEEK_START) WHOURS INNER JOIN 
		#TIME_TABLE TT ON WHOURS.EMP_CODE = TT.EMP_CODE AND 
						  WHOURS.WEEK_START = TT.WEEK_START

	IF (SELECT ISNULL(TS_PPERIOD_CHK, 0) FROM AGENCY) = 1
	BEGIN

		DECLARE DATE_CURSOR CURSOR 
			FOR SELECT DISTINCT(EMP_DATE) FROM #TIME_TABLE

		DECLARE @CUR_DATE SMALLDATETIME
		DECLARE @PPCLOSED SMALLINT

		OPEN DATE_CURSOR
		FETCH NEXT FROM DATE_CURSOR INTO @CUR_DATE

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SELECT 
				@PPCLOSED = COUNT(*) 
			FROM 
				dbo.POSTPERIOD
			WHERE
				POSTPERIOD.PPSRTDATE <= @CUR_DATE AND
				POSTPERIOD.PPENDDATE >= @CUR_DATE AND
				(POSTPERIOD.PPTECURMTH = 'C' OR PPTECURMTH IS NULL)

			UPDATE 
				#TIME_TABLE 
			SET 
				POST_PERIOD_CLOSED = CASE WHEN @PPCLOSED = 0 THEN 1 ELSE 0 END
			WHERE EMP_DATE = @CUR_DATE
					
			FETCH NEXT FROM DATE_CURSOR INTO @CUR_DATE

		END

		CLOSE DATE_CURSOR
		DEALLOCATE DATE_CURSOR

	END

	UPDATE 
		#TIME_TABLE
	SET
		APPROVAL_TYPE = CASE
							WHEN (ISNULL(EMP_TIME.APPR_FLAG, 0) = 0 AND ISNULL(EMP_TIME.APPR_PENDING, 0) = 1) THEN 1 -- PENDING
							WHEN (ISNULL(EMP_TIME.APPR_FLAG, 0) = 1 AND (ISNULL(EMP_TIME.APPR_PENDING, 0) = 0 OR ISNULL(EMP_TIME.APPR_PENDING, 0) = 1)) THEN 2 -- APPROVED
							WHEN (ISNULL(EMP_TIME.APPR_FLAG, 0) = 0 AND ISNULL(EMP_TIME.APPR_PENDING, 0) = 2) THEN 3 -- DENIED							
							WHEN (TT.TOTAL_HOURS <> 0) AND (ISNULL(EMP_TIME.APPR_FLAG, 0) = 0 AND ISNULL(EMP_TIME.APPR_PENDING, 0) = 0) THEN 4 -- NOT SUBMITTED
							WHEN TT.TOTAL_HOURS = 0 THEN 5 -- MISSING
							ELSE 0 -- OPEN AND EXISTS
						END 
	FROM
		dbo.EMP_TIME INNER JOIN #TIME_TABLE TT ON EMP_TIME.EMP_CODE = TT.EMP_CODE AND
												  EMP_TIME.EMP_DATE = TT.EMP_DATE
	
	UPDATE 
		#TIME_TABLE 
	SET 
		APPROVAL_TYPE = 5 
	WHERE 
		APPROVAL_TYPE IS NULL

	UPDATE 
		#TIME_TABLE 
	SET 
		APPROVAL_TYPE = 6 
	WHERE 
		APPROVAL_TYPE = 4 AND 
		TS_APPROVAL_ACTIVE = 0
--SELECT * FROM #TIME_TABLE
	/*

	STATUS LIST
	----------------------
	0 = Ready To Submit
	1 = Pending
	2 = Approved
	3 = Denied
	4 = Not Submitted
	5 = Missing
	6 = Entered
	7 = Post Period Closed*

	*/

	SELECT
		[ID] = NEWID(), 
		[EmployeeCode] = TT.EMP_CODE,
		[Employee] = CASE 
						WHEN EMPLOYEE.EMP_MI IS NULL OR EMPLOYEE.EMP_MI = '' THEN EMPLOYEE.EMP_FNAME + ' ' + EMPLOYEE.EMP_LNAME 
						ELSE EMPLOYEE.EMP_FNAME + ' ' + EMPLOYEE.EMP_MI + '. ' + EMPLOYEE.EMP_LNAME 
					 END,
		[EmployeeAccountNumber] = EMPLOYEE.EMP_ACCOUNT_NBR,
		[EmployeeStatus] = CASE WHEN EMPLOYEE.[STATUS] = 0 THEN 'N/A'
			            WHEN EMPLOYEE.[STATUS] = 1 THEN 'Exempt'
						WHEN EMPLOYEE.[STATUS] = 2 THEN 'Non-Exempt'
						ELSE 'N/A' END,
		[IsEmployeeFreelance] = CASE WHEN ISNULL(EMPLOYEE.FREELANCE, 0) = 1 THEN 'Yes' ELSE 'No' END,
		[OfficeCode] = EMPLOYEE.OFFICE_CODE,
		[OfficeName] = OFFICE.OFFICE_NAME,
		[DepartmentTeamCode] = EMPLOYEE.DP_TM_CODE,
		[DepartmentTeamName] = DEPT_TEAM.DP_TM_DESC,
		[SupervisorCode] = EMPLOYEE.SUPERVISOR_CODE,
		[Supervisor] = CASE 
							WHEN EMPLOYEE.SUPERVISOR_CODE IS NULL THEN NULL 
							WHEN SUP.EMP_MI IS NULL OR SUP.EMP_MI = '' THEN SUP.EMP_FNAME + ' ' + SUP.EMP_LNAME 
							ELSE SUP.EMP_FNAME + ' ' + SUP.EMP_MI + '. ' + SUP.EMP_LNAME 
						END,
		[TimesheetDate] = TT.EMP_DATE,
		[TimesheetStartedDate] = TSDATA.TS_STARTED,
		[TimesheetEndedDate] = TSDATA.TS_ENDED,
		[IndirectHours] = ISNULL(TT.NP_HOURS,0) + ISNULL(TT.NT_HOURS,0),
		[DirectHours] = TT.DTL_HOURS,
		[TotalHours] = TT.TOTAL_HOURS,
		[TotalHoursForWeek] = TT.WEEK_TOTAL_HOURS,
		[StandardHours] = ISNULL((SELECT SUM(STD_HRS) FROM W_EMP_STD_HOURS_DTL WS
							WHERE UPPER(USERID) = UPPER(@UserID) AND WS.EMP_CODE = TT.EMP_CODE AND WS.WORK_DATE >= TT.EMP_DATE AND WS.WORK_DATE <= TT.EMP_DATE),0),
		[Status] = CASE	
						WHEN TT.IS_HOLIDAY = 1 AND TT.TOTAL_HOURS = 0 THEN 'Holiday'
						WHEN TT.POST_PERIOD_CLOSED = 1 THEN 'Post Period Closed'
						WHEN TT.APPROVAL_TYPE = 0 THEN 'Ready to Submit'
						WHEN TT.APPROVAL_TYPE = 1 THEN 'Pending'
						WHEN TT.APPROVAL_TYPE = 2 THEN 'Approved'
						WHEN TT.APPROVAL_TYPE = 3 THEN 'Denied'
						WHEN TT.APPROVAL_TYPE = 4 THEN 'Not Submitted'
						WHEN TT.APPROVAL_TYPE = 5 THEN 'Missing'
						WHEN TT.APPROVAL_TYPE = 6 THEN 'Entered' 
						ELSE ''
					END,
		[Missing] = CASE 
						WHEN TT.IS_HOLIDAY = 1 AND TT.TOTAL_HOURS = 0 THEN 'Holiday'
						WHEN TT.TOTAL_HOURS = 0 THEN 'Full Day'
						WHEN TT.DAY_REQUIRED_HOURS > TT.TOTAL_HOURS THEN 'Hours'
						WHEN TT.DAY_REQUIRED_HOURS <= TT.TOTAL_HOURS THEN 'No'
						ELSE NULL -- UNKNOWN MISSING TIME SETTING
					END,
		[ApprovalDate] = EMP_TIME.APPR_DATE, 
		[ApprovalNote] = EMP_TIME.APPR_NOTES,
		[ApprovedBy] = EMP_TIME.APPR_USER,
		[IsHoliday] = CASE WHEN TT.IS_HOLIDAY = 1 THEN 'Yes' 
					       WHEN TT.IS_HOLIDAY = 2 THEN 'Partial' ELSE 'No' END
	FROM
		#TIME_TABLE TT JOIN
		dbo.EMPLOYEE ON TT.EMP_CODE = EMPLOYEE.EMP_CODE LEFT OUTER JOIN
		dbo.OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE LEFT OUTER JOIN
		dbo.DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
		dbo.EMPLOYEE SUP ON EMPLOYEE.SUPERVISOR_CODE = SUP.EMP_CODE LEFT OUTER JOIN
		(SELECT
			TT2.EMP_CODE, 
			TT2.WEEK_START,
			[TS_STARTED] = MIN(TT2.EMP_DATE),
			[TS_ENDED] = MAX(TT2.EMP_DATE)
		 FROM
			#TIME_TABLE TT2
		 WHERE TOTAL_HOURS > 0
		 GROUP BY
			TT2.EMP_CODE,
			TT2.WEEK_START) TSDATA ON TT.EMP_CODE = TSDATA.EMP_CODE AND
									  TT.WEEK_START = TSDATA.WEEK_START LEFT OUTER JOIN
		dbo.EMP_TIME ON TT.EMP_CODE = EMP_TIME.EMP_CODE AND
						TT.EMP_DATE = EMP_TIME.EMP_DATE
	ORDER BY 
		TT.EMP_CODE,
		TT.EMP_DATE
		
	DROP TABLE #TIME_TABLE
	DROP TABLE #DATES_TABLE

END
