if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_RESOURCES_EMP_ACTUALIZATION]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_RESOURCES_EMP_ACTUALIZATION]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE [dbo].[usp_wv_RESOURCES_EMP_ACTUALIZATION] 
@EMP_CODE       VARCHAR(6),
@ROLES		    VARCHAR(4000),
@START_DATE     SMALLDATETIME,
@END_DATE       SMALLDATETIME,
-- 0 = NONE, 1 = DAY, 2 = WEEK, 3 = MONTH, 4 = YEAR, 5 = SPECIAL MODE FOR CHILD GRID ON EMP FINDER
-- 6 = VIEW FOR TASK ASSIGNMENTS
@SUMMARY_LEVEL  SMALLINT, 
@DEPTS	        VARCHAR(4000),
@EMP_LIST	    VARCHAR(8000),
@UserID			VARCHAR(100),
@OfficeCode	varchar(4),
@ClientCode Varchar(6),
@DivisionCode Varchar(6),
@ProductCode Varchar(6),
@JobNum Varchar(6),
@JobComp Varchar(6),
@TaskStatus Varchar(1),
@ExcludeTempComplete Char(1),
@Manager varchar(6),
@QUERY_TYPE VARCHAR(10),
@PSWL_JOB_NUMBER INT,
@PSWL_JOB_COMPONENT_NBR SMALLINT,
@JC_LIST VARCHAR(8000),
@OVERRIDE_EMP_SEC AS SMALLINT,
@OMIT_BEGINNING_BALANCE SMALLINT

AS
/*============== QUERY ==============*/

    SET ANSI_NULLS ON;
    SET ANSI_WARNINGS OFF;
    SET ARITHABORT OFF;
    SET ARITHIGNORE ON;

	IF @OfficeCode IS NULL SET @OfficeCode = '';
	IF @ClientCode IS NULL SET @ClientCode = ''	;
	IF @DivisionCode IS NULL SET @DivisionCode = '';	
	IF @ProductCode  IS NULL SET @ProductCode = '';
	IF @JobNum  IS NULL SET @JobNum = '';
	IF @JobComp  IS NULL SET @JobComp = '';
	IF @ROLES  IS NULL SET @ROLES = '';
	IF @TaskStatus  IS NULL SET @TaskStatus = '';
	IF @ExcludeTempComplete  IS NULL SET @ExcludeTempComplete = '';
	IF @Manager  IS NULL SET @Manager = '';
    IF @DEPTS IS NULL SET @DEPTS = '';
    IF @EMP_CODE = '%' OR (@EMP_CODE IS NULL) 
    BEGIN
        SET @EMP_CODE = '';
    END
    IF @ROLES IS NULL
    BEGIN
        SET @ROLES = '';
    END
    IF @DEPTS IS NULL
    BEGIN
        SET @DEPTS = '';
    END
    IF @EMP_LIST IS NULL
    BEGIN
        SET @EMP_LIST = '';
    END

	DECLARE 
		@RestrictionsEmp    INT,
		@sql 				VARCHAR(8000),
		@sql2 				VARCHAR(8000),
		@sql_from 			VARCHAR(8000),
		@sql_where 			VARCHAR(8000), 
		@totaljobsdue 	Int, 
		@START_DATE_MIN SMALLDATETIME, 
		@END_DATE_MAX SMALLDATETIME, 
		@START_DATE_MIN_ASS_NR SMALLDATETIME, 
		@END_DATE_MAX_ASS_NR SMALLDATETIME, 
		@START_DATE_MIN_ASS_R SMALLDATETIME, 
		@END_DATE_MAX_ASS_R SMALLDATETIME

	/*
	* The column HRS_ASSIGNED_TASK now also includes the event hours!!!!
	* need to fix: if it is a holiday with hours on it, it is getting removed...
	* so does the HRS_BALANCE_AVAIL column!!!!
	* BOTH COLUMNS ALSO FACTOR IN EMP_NON_TASK WHERE TIME_CATEGORY.VAC_SICK_FLAG IS NULL OR NOT 1,2,3...
	*/
                

	IF @QUERY_TYPE = 'PSWL'
	BEGIN
        -- TESTING
		--GENERATE LIST OF DISTINCT EMPS:
		SET @EMP_LIST = NULL;
		SELECT @EMP_LIST = COALESCE(@EMP_LIST + ''',', '') + A.EMP_CODE
		FROM   (
					SELECT     
						DISTINCT  '''' + JOB_TRAFFIC_DET_EMPS.EMP_CODE AS EMP_CODE
					FROM         
						JOB_TRAFFIC_DET_EMPS WITH (NOLOCK) INNER JOIN
						JOB_COMPONENT ON JOB_TRAFFIC_DET_EMPS.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE     
						JOB_TRAFFIC_DET_EMPS.JOB_NUMBER = @PSWL_JOB_NUMBER AND JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR = @PSWL_JOB_COMPONENT_NBR
						AND JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
				) AS A;

        SET @EMP_LIST = @EMP_LIST + '''';

	END    
    ELSE IF  @QUERY_TYPE = 'PSWL2'
	BEGIN

	    SET @EMP_LIST = @EMP_LIST;
	    	    
	    IF @JC_LIST <> ''
	    BEGIN

			CREATE TABLE #TASK_RANGE 
			(
				[START_DATE]	SMALLDATETIME,
				[END_DATE]	SMALLDATETIME
			)
			SET @sql = ''
				SELECT @sql = @sql + '
							INSERT INTO #TASK_RANGE
							SELECT     MIN(JOB_TRAFFIC_DET.TASK_START_DATE), MAX(JOB_TRAFFIC_DET.JOB_REVISED_DATE) 
							FROM         
							JOB_TRAFFIC_DET INNER JOIN
							JOB_TRAFFIC_DET_EMPS ON JOB_TRAFFIC_DET.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND 
							JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND 
							JOB_TRAFFIC_DET.SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR INNER JOIN
							JOB_COMPONENT ON JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
							JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
							JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
							JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
							WHERE (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)';

				SELECT @sql = @sql + @JC_LIST;

			EXEC(@sql)
			--SELECT * FROM #TASK_RANGE

			IF EXISTS (SELECT COUNT(1) FROM #TASK_RANGE WHERE NOT START_DATE IS NULL AND NOT END_DATE IS NULL)
			BEGIN

				SELECT @START_DATE = START_DATE, @END_DATE = END_DATE, @START_DATE_MIN = START_DATE, @END_DATE_MAX = END_DATE FROM #TASK_RANGE;

			END		
						
			DROP TABLE #TASK_RANGE;		

	    END    
	END
	ELSE	
    BEGIN

	    SET @EMP_LIST = @EMP_LIST;

	    IF @EMP_LIST IS NULL
	    BEGIN

	    	SET @EMP_LIST = '';

	    END

    END	


	SET @START_DATE = CONVERT(
				    DATETIME,
				    CONVERT(CHAR(10), DATEPART(yyyy, @START_DATE), 101) 
				    +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(mm, @START_DATE), 101) +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(dd, @START_DATE), 101) +
				    ' 00:00:00' 
				    );
				       
 	SET @END_DATE = CONVERT(
				    DATETIME,
				    CONVERT(CHAR(10), DATEPART(yyyy, @END_DATE), 101) 
				    +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(mm, @END_DATE), 101) +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(dd, @END_DATE), 101) +
				    ' 23:59:00' 
				    );
        
	CREATE TABLE #EMP_AVAILABILITY --MASTER TABLE TO RETURN
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[EMP_START_TIME]     SMALLDATETIME,
		[EMP_END_TIME]     SMALLDATETIME,
		[EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
		[DATE]               SMALLDATETIME,
		[DAY_OF_WEEK]			 INT,
		[DAY_OF_YEAR]          INT,
		[WEEK_OF_YEAR]         SMALLDATETIME,
		[MONTH_OF_YEAR]        INT,
		[YEAR]               INT,
		[STD_HRS_AVAIL]      DECIMAL(18,6),
		[HRS_USED_NON_TASK]  DECIMAL(18,6),
		[HRS_AVAIL]          DECIMAL(18,6),
		[HRS_ASSIGNED_TASK]  DECIMAL(18,6),
		[HRS_ASSIGNED_EVENT]  DECIMAL(18,6),
		[HRS_ASSIGNED_ASSIGN]  DECIMAL(18,6),
		[HRS_BALANCE_AVAIL]  DECIMAL(18,6),
		[NOTE]               VARCHAR(100),
		[IS_FULL_DAY_OFF]    SMALLINT,
		[HRS_APPTS]			 DECIMAL(18,6),
		[IS_WORK_DAY]    SMALLINT
	);

	CREATE TABLE #JOBS 
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[OFFICE_CODE]		VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[CL_CODE]			VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[DIV_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[PRD_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_NUMBER] INT,
		[JOB_COMPONENT_NBR] INT,
		[SEQ_NBR] INT,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[TASK_START_DATE]    SMALLDATETIME,
		[JOB_REVISED_DATE]   SMALLDATETIME,
		[FNC_CODE]			 VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_HRS]          DECIMAL(18,6),
		[WORKDAY_COUNT]         INT,
		[HRS_PER_DAY]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE] INT,	        
		[TRF_DESCRIPTION]		VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_DESC]		VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_COMP_DESC]	VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_FIRST_USE_DATE]	SMALLDATETIME,
		[HRS_PER_DAY_WITH_ASSN]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE_WITH_ASSN] INT,
		[HRS_POSTED]   DECIMAL(18,6),
		[WEEK_OF_YEAR] SMALLDATETIME,
		[WEEKLY] bit,
        [HRS_PER_DAY_NO_WD] DECIMAL(18,6)

	);

	CREATE TABLE #JOBS_TIME_POSTED 
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[JOB_NUMBER] INT,
		[JOB_COMPONENT_NBR] INT,
		[SEQ_NBR] INT,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[FNC_CODE]			 VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[HRS_POSTED]   DECIMAL(18,6),
		[WEEK_OF_YEAR] SMALLDATETIME,
		[MONTH_OF_YEAR]        INT,
		[DAY_OF_YEAR]          INT,
        [ALERT_ID]             INT

	);

	CREATE TABLE #ASSIGNMENTS
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[ALERT_ID] INT,
		[OFFICE_CODE]		VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[CL_CODE]			VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[DIV_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[PRD_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_NUMBER] INT,
		[JOB_COMPONENT_NBR] INT,
		[SEQ_NBR] INT,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[START_DATE]    SMALLDATETIME,
		[DUE_DATE]   SMALLDATETIME,
		[HRS_ALLOWED]          DECIMAL(18,6),
		[WEEK_START]	SMALLDATETIME,
		[WEEK_END]	SMALLDATETIME,
		[WEEK_OF_YEAR] SMALLDATETIME,
		[HOURS]		 DECIMAL(18,6),
		[HRS_POSTED]   DECIMAL(18,6),
		[WORKDAY_COUNT]         INT,
		[HRS_PER_DAY]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE] INT,	        
		[TRF_DESCRIPTION]		VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_DESC]		VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_COMP_DESC]	VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_FIRST_USE_DATE]	SMALLDATETIME,
		[HRS_PER_DAY_WITH_ASSN]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE_WITH_ASSN] INT,
		[WEEKLY] bit,
        [HRS_PER_DAY_NO_WD] DECIMAL(18,6)
	);
        
	CREATE TABLE #MY_DATA 
	(
		ROW_ID						INT IDENTITY(1,1) NOT NULL,
		JOB_NUMBER					INT NULL,
		JOB_COMPONENT_NBR			SMALLINT NULL,
		FNC_CODE					VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		TASK_DESCRIPTION			VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		JOB_COMP_DESC				VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		TASK_START_DATE				SMALLDATETIME NULL,
		JOB_REVISED_DATE			SMALLDATETIME NULL,
		JOB_FIRST_USE_DATE			SMALLDATETIME NULL,
		EMP_CODE					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		JOB_DESC					VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		OFFICE_CODE					VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		CL_CODE						VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		CL_NAME						VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DIV_CODE					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		PRD_CODE					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		SORT						SMALLDATETIME NULL,
		JOB_HRS						DECIMAL(18,6) NULL,
		SEQ_NBR						SMALLINT NULL,
		EMP_FML_NAME				VARCHAR(2000) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		REC_TYPE					VARCHAR(5),
		NON_TASK_ID					SMALLINT NULL,
		TRF_DESCRIPTION		        VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DP_TM_CODE					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DEF_TRF_CODE				VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		ADJ_JOB_HRS					DECIMAL(18,6) NULL,
		IS_EVENT_TASK				SMALLINT NULL,
		TASK_TOTAL_WORKING_DAYS				INT NULL,
		HOURS_PER_DAY				DECIMAL(18,6) NULL,
		WORKING_DAYS_IN_TASK_RANGE	INT NULL,
		HRS_USED_NON_TASK			DECIMAL(18,6) NULL,
		HRS_AVAIL					DECIMAL(18,6) NULL,
		HRS_ASSIGNED_TASK			DECIMAL(18,6) NULL,
		HRS_ASSIGNED_EVENT			DECIMAL(18,6) NULL,
		HRS_BALANCE_AVAIL			DECIMAL(18,6) NULL,
		STD_HRS_AVAIL				DECIMAL(18,6) NULL,
		RED_FLAG					INT,
		HRS_PER_DAY_WITH_ASSN		DECIMAL(18,6),
		ADJ_JOB_HRS_WITH_ASSN		DECIMAL(18,6) NULL,
		ALERT_ID					INT,
		HRS_BEGIN		DECIMAL(18,6) NULL,
		HRS_POSTED		DECIMAL(18,6) NULL,
		HRS_LEFT		DECIMAL(18,6) NULL,
		SPRINT_ID					INT,
		TASK_BB_WORKING_DAYS				INT NULL,
		BB_HOURS_PER_DAY				DECIMAL(18,6) NULL,
		ADJ_JOB_HRS_NO_WD		DECIMAL(18,6) NULL
	);
        
	CREATE TABLE #WORK_DAY --Table of employee workdays
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[WORK_DATE]               SMALLDATETIME,
		[STD_HRS]  DECIMAL(18,6),
		[NON_TASK_DAY] INT
	);

	CREATE TABLE #NON_TASKS --Table of employee Non Task days
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[START_DATE] SMALLDATETIME,
		[END_DATE] SMALLDATETIME,
		[HOURS] DECIMAL(18,6),
		[VAC_SICK_FLAG] int,
		[NUM_DAYS] int
	);
        
	CREATE TABLE #DAY_RANGE --RANGE OF DAYS
	(
		[DATE] SMALLDATETIME,
	);

	CREATE TABLE #EMP_LIST --LIST OF EMPS
	(
		[EMP_CODE] VARCHAR(6),
		[EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
		[EMP_START_TIME]     SMALLDATETIME,
		[EMP_END_TIME]     SMALLDATETIME
	);

    --1. GET DAYS (LOOP)
    --=================================================================================================
    DECLARE @DAY_COUNT      AS INTEGER,
            @DAY_INCREMENT  AS INTEGER, @Restrictions INT, @RestrictionsOffice INT, @EMP_CDE AS VARCHAR(6)
	         
		
	SELECT @Restrictions = COUNT(*) FROM SEC_CLIENT WITH(NOLOCK) WHERE UPPER(USER_ID) = UPPER(@UserID);

	SELECT @RestrictionsEmp = COUNT(*) FROM SEC_EMP WITH(NOLOCK) WHERE UPPER(USER_ID) = UPPER(@UserID);

	SELECT @EMP_CDE = EMP_CODE FROM SEC_USER WHERE UPPER(USER_CODE) = UPPER(@UserID)
	SELECT @RestrictionsOffice = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CDE
		        
    SET @DAY_INCREMENT = -1;
    SELECT @DAY_COUNT = DATEDIFF(dd, @START_DATE, @END_DATE) + 1;
       
    WHILE @DAY_COUNT > 0
    BEGIN
        INSERT INTO #DAY_RANGE
            (
            [DATE]
            )
        VALUES
            (
            DATEADD(dd, @DAY_INCREMENT + 1, @START_DATE)
            );
        SET @DAY_INCREMENT = @DAY_INCREMENT + 1;
        SET @DAY_COUNT = @DAY_COUNT - 1;
    END
	 --SELECT * FROM #DAY_RANGE;
	--UPDATE #DAY_RANGE SET [DATE] = @END_DATE WHERE [DATE] = (SELECT MAX([DATE]) FROM #DAY_RANGE);

--        --TEST:
       --SELECT * FROM #DAY_RANGE;


    --2. GET EMPS (SELECT)
    --=================================================================================================
    DECLARE @DYNA_SQL AS NVARCHAR(4000);
    SET @DYNA_SQL = '';

    SET @DYNA_SQL = 'INSERT INTO #EMP_LIST(EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,EMP_START_TIME,EMP_END_TIME)'

    SET @DYNA_SQL = @DYNA_SQL + 'SELECT DISTINCT EMPLOYEE.EMP_CODE, EMPLOYEE.DIRECT_HRS_PER, EMPLOYEE.EMP_START_TIME, EMPLOYEE.EMP_END_TIME
            FROM EMPLOYEE WITH (NOLOCK) '

	IF (@ROLES <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + ' INNER JOIN EMP_TRAFFIC_ROLE WITH (NOLOCK) ON EMPLOYEE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE'
	END
	IF @RestrictionsEmp > 0
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL  + ' INNER JOIN SEC_EMP ON EMPLOYEE.EMP_CODE = SEC_EMP.EMP_CODE '
	END
	IF @RestrictionsOffice > 0
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL  + ' INNER JOIN EMP_OFFICE ON EMPLOYEE.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
	END
				
  
	--- START THE WHERE CLAUSE
	SET @DYNA_SQL = @DYNA_SQL + ' WHERE (EMPLOYEE.EMP_TERM_DATE IS NULL) AND 1 = 1 '

	--FILTER BY EMP CODE       
	IF (@EMP_CODE <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND EMPLOYEE.EMP_CODE = ''' + @EMP_CODE + ''''
	END

	--FILTER BY EMP CODE LIST:	
	IF (@EMP_LIST <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMPLOYEE.EMP_CODE IN ('+ @EMP_LIST +'))'
	END

	--FILTER BY ROLE                            
	IF (@ROLES <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMP_TRAFFIC_ROLE.ROLE_CODE IN ('+ @ROLES +')) '
	END

	--FILTER BY DEPT                            
	IF (@DEPTS <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMPLOYEE.DP_TM_CODE IN ('+ @DEPTS +')) '
	END

	IF @RestrictionsEmp > 0
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL  + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''') '
	END

	--END THE DYNAMIC SQL:                            
	SET @DYNA_SQL = @DYNA_SQL + ' ORDER BY EMPLOYEE.EMP_CODE;'
        
	--PRINT @DYNA_SQL;
	EXEC sp_executesql @DYNA_SQL;
      
    --3. PUT BOTH INTO LIST
    DECLARE 
	@CURR_EMP_CODE AS VARCHAR(6),
	    @CURR_EMP_DIRECT_HRS_GOAL_PERC DECIMAL(18,6),
		@CURR_EMP_START_TIME     SMALLDATETIME,
	    @CURR_EMP_END_TIME     SMALLDATETIME,
	    @EMPS VARCHAR(4000);

	SET @EMPS = ''    

    DECLARE MY_ROWS                         CURSOR  
    FOR
	    SELECT EMP_CODE
	    FROM   #EMP_LIST
    ;
    OPEN MY_ROWS;
    FETCH NEXT FROM MY_ROWS INTO @CURR_EMP_CODE;
    WHILE @@FETCH_STATUS = 0
    BEGIN

	    SELECT @CURR_EMP_DIRECT_HRS_GOAL_PERC = ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.00), @CURR_EMP_START_TIME = EMP_START_TIME, @CURR_EMP_END_TIME = EMP_END_TIME FROM #EMP_LIST WHERE EMP_CODE = @CURR_EMP_CODE;
	    INSERT INTO #EMP_AVAILABILITY(EMP_CODE,[DATE],EMP_DIRECT_HRS_GOAL_PERC,EMP_START_TIME,EMP_END_TIME)
	    SELECT @CURR_EMP_CODE,[DATE],@CURR_EMP_DIRECT_HRS_GOAL_PERC,@CURR_EMP_START_TIME,@CURR_EMP_END_TIME FROM #DAY_RANGE;      
	        
	    IF @EMP_CODE <> '' OR @DEPTS <> '' OR @ROLES <> ''
	    BEGIN
			SELECT @EMPS = @EMPS + @CURR_EMP_CODE + ','
	    END	        
	        
	    --GO TO NEXT EVENT
	    FETCH NEXT FROM MY_ROWS INTO @CURR_EMP_CODE;
    END
    CLOSE MY_ROWS;
    DEALLOCATE MY_ROWS;

	--SELECT * FROM #EMP_AVAILABILITY
	CREATE TABLE #emp_work_days ( emp_code varchar(4000) COLLATE SQL_Latin1_General_CP1_CS_AS, workday smalldatetime, std_hours decimal(9,3) )
	CREATE TABLE #emp (listpos int,value varchar(20) COLLATE SQL_Latin1_General_CP1_CS_AS)
	CREATE TABLE #emp_year ( emp_code varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS, emp_year integer, daily_avg decimal(9,2) )
	CREATE TABLE #work_days ( workyear integer, workdate smalldatetime, holiday bit, weekend bit, dayoff bit )

	if @EMPS <> ''
	BEGIN
		INSERT INTO #emp 
		SELECT * FROM [dbo].[charlist_to_table] (@EMPS,',')		
	END	
	
    --SET DATE COUNTERS:
    UPDATE #EMP_AVAILABILITY SET
		DAY_OF_WEEK = DATEPART(weekday,[DATE]),
		DAY_OF_YEAR= DATEPART(dayofyear,[DATE]) ,
		WEEK_OF_YEAR= DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,[DATE])) , 104 ) ) + (DATEPART(wk,[DATE])-1), 6),--DATEPART(wk,[DATE]) ,
		MONTH_OF_YEAR= DATEPART(mm,[DATE]),
		[YEAR] = DATEPART(yy,[DATE]) 
	              
	IF @OMIT_BEGINNING_BALANCE = 1
		BEGIN
			SELECT 
				@START_DATE_MIN = MIN(TASK_START_DATE), 
				@END_DATE_MAX = MAX(JOB_REVISED_DATE)
			FROM         
				dbo.V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
				dbo.JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												  V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				dbo.JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN
				dbo.JOB_TRAFFIC_DET_EMPS ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND
											V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND
											V_JOB_TRAFFIC_DET.SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR LEFT OUTER JOIN
				#emp e ON V_JOB_TRAFFIC_DET.EMP_CODE = e.value
			WHERE 
				1 = CASE WHEN @EMPS = '' OR e.value IS NOT NULL THEN 1 ELSE 0 END AND
				(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
				AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
				AND ((TASK_START_DATE >= @START_DATE) AND (TASK_START_DATE <= @END_DATE) OR
				(JOB_REVISED_DATE >= @START_DATE) AND (JOB_REVISED_DATE <= @END_DATE) OR
				(@START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE));
		END
	ELSE
		BEGIN
			SELECT 
				@START_DATE_MIN = MIN(TASK_START_DATE), 
				@END_DATE_MAX = MAX(JOB_REVISED_DATE)
			FROM         
				dbo.V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
				dbo.JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												  V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				dbo.JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN
				dbo.JOB_TRAFFIC_DET_EMPS ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND
											V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND
											V_JOB_TRAFFIC_DET.SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR LEFT OUTER JOIN
				#emp e ON V_JOB_TRAFFIC_DET.EMP_CODE = e.value
			WHERE 
				1 = CASE WHEN @EMPS = '' OR e.value IS NOT NULL THEN 1 ELSE 0 END AND
				(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
				AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
				AND ((TASK_START_DATE >= @START_DATE) AND (TASK_START_DATE <= @END_DATE) OR
				(JOB_REVISED_DATE >= @START_DATE) AND (JOB_REVISED_DATE <= @END_DATE) OR
				(@START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE));
		END

	--Assignment max and min dates
	SELECT @START_DATE_MIN_ASS_NR = MIN(A.ST), @END_DATE_MAX_ASS_NR = MAX(ED) FROM (
	SELECT ALERT.ALERT_ID, CASE WHEN MIN(SPRINT_EMPLOYEE.WEEK_START) IS NOT NULL THEN MIN(SPRINT_EMPLOYEE.WEEK_START) ELSE CASE WHEN MIN(ALERT.[START_DATE]) is NULL THEN MIN(ALERT.DUE_DATE) ELSE MIN(ALERT.[START_DATE]) END END AS ST,
		   CASE WHEN MAX(SPRINT_EMPLOYEE.WEEK_END) IS NOT NULL THEN MAX(SPRINT_EMPLOYEE.WEEK_END) ELSE CASE WHEN MAX(ALERT.DUE_DATE) is NULL THEN MAX(ALERT.[START_DATE]) ELSE MAX(ALERT.DUE_DATE) END END AS ED
	FROM ALERT INNER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) --AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
						AND (HRS_ALLOWED <> 0 OR [HOURS] <> 0) AND ALERT.ALRT_NOTIFY_HDR_ID IS NULL AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) AND (CURRENT_NOTIFY = 1) GROUP BY ALERT.ALERT_ID) AS A
	
	SELECT @START_DATE_MIN_ASS_R = MIN(A.ST), @END_DATE_MAX_ASS_R = MAX(ED) FROM (
	SELECT ALERT.ALERT_ID, CASE WHEN MIN(SPRINT_EMPLOYEE.WEEK_START) IS NOT NULL THEN MIN(SPRINT_EMPLOYEE.WEEK_START) ELSE CASE WHEN MIN(ALERT.[START_DATE]) is NULL THEN MIN(ALERT.DUE_DATE) ELSE MIN(ALERT.[START_DATE]) END END AS ST,
		    CASE WHEN MAX(SPRINT_EMPLOYEE.WEEK_END) IS NOT NULL THEN MAX(SPRINT_EMPLOYEE.WEEK_END) ELSE CASE WHEN MAX(ALERT.DUE_DATE) is NULL THEN MAX(ALERT.[START_DATE]) ELSE MAX(ALERT.DUE_DATE) END END AS ED
	FROM ALERT LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT.ASSIGNED_EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) --AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
                AND (HRS_ALLOWED <> 0 OR [HOURS] <> 0) AND ALERT.ALRT_NOTIFY_HDR_ID IS NOT NULL AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) GROUP BY ALERT.ALERT_ID) AS A

	
	IF (@START_DATE_MIN IS NULL) OR (@START_DATE < @START_DATE_MIN)
	BEGIN
		SET @START_DATE_MIN = @START_DATE;
	END	
	IF (@END_DATE_MAX IS NULL) OR (@END_DATE > @END_DATE_MAX)
	BEGIN
		SET @END_DATE_MAX = @END_DATE
	END	

	IF (@START_DATE_MIN_ASS_NR IS NOT NULL)
	BEGIN
		IF @START_DATE_MIN_ASS_NR < @START_DATE_MIN
		BEGIN
			SET @START_DATE_MIN = @START_DATE_MIN_ASS_NR
		END
	END

	IF (@START_DATE_MIN_ASS_R IS NOT NULL)
	BEGIN
		IF @START_DATE_MIN_ASS_R < @START_DATE_MIN
		BEGIN
			SET @START_DATE_MIN = @START_DATE_MIN_ASS_R
		END
	END

	IF (@END_DATE_MAX_ASS_NR IS NOT NULL)
	BEGIN
		IF @END_DATE_MAX_ASS_NR > @END_DATE_MAX
		BEGIN
			SET @END_DATE_MAX = @END_DATE_MAX_ASS_NR
		END
	END

	IF (@END_DATE_MAX_ASS_R IS NOT NULL)
	BEGIN
		IF @END_DATE_MAX_ASS_R > @END_DATE_MAX
		BEGIN
			SET @END_DATE_MAX = @END_DATE_MAX_ASS_R
		END
	END

--SELECT @START_DATE_MIN,@END_DATE_MAX
	--SELECT @EMPS
	--Get Standard Hours
	--INSERT INTO #WORK_DAY (EMP_CODE, WORK_DATE, STD_HRS)
	--SELECT fn.emp_code, fn.workday, fn.std_hours
	--FROM [dbo].[udf_get_std_hrs_wl] ( @START_DATE_MIN, @END_DATE_MAX, @EMPS) fn
	--WHERE (fn.std_hours <> 0.00 );	

	


	DECLARE @cur_date smalldatetime, @emp_start_date smalldatetime, @day_count2 integer, @start_year integer, @end_year integer, @cur_year integer
	DECLARE @year_start_date smalldatetime, @year_end_date smalldatetime, @holiday bit, @weekend bit, @dayoff bit 
	IF ( @START_DATE_MIN IS NOT NULL ) AND ( @END_DATE_MAX IS NOT NULL ) AND ( @START_DATE_MIN <= @END_DATE_MAX )
	BEGIN
		-- Create a table holding the average workday by year for each employee		
		DECLARE @std_hours decimal(9,3)
		
		SET @start_year = DATEPART(yyyy, @START_DATE_MIN)		
		SET @end_year = DATEPART(yyyy, @END_DATE_MAX)		
		SET @cur_year = @start_year
		WHILE ( @cur_year <= @end_year )
		BEGIN
			SET @day_count2 = 0
			SET @year_start_date = CONVERT( smalldatetime, '01/01/' + CAST( @cur_year AS varchar(4)) )
			SET @year_end_date = CONVERT( smalldatetime, '12/31/' + CAST( @cur_year AS varchar(4)) )
			SET @cur_date = @year_start_date
			
			WHILE ( @cur_date <= @year_end_date )
			BEGIN
				SET @weekend = 0
				IF (( DATEPART( dw, @cur_date )) IN ( 1, 7 ))
					SET @weekend = 1
				ELSE
					SET @day_count2 = @day_count2 + 1
									 
				SET @holiday = 0					
				IF ( SELECT COUNT( * ) 
				       FROM dbo.EMP_NON_TASKS ent 
				      WHERE ent.[TYPE] = 'H' 
				        AND ent.ALL_DAY = 1 
						AND ( @cur_date BETWEEN ent.[START_DATE] AND ent.[END_DATE] )) > 0
					SELECT @holiday = 1			
				
				INSERT INTO #work_days( workyear, workdate, holiday, weekend ) VALUES ( @cur_year, @cur_date, @holiday, @weekend )
				
				SET @cur_date = DATEADD( day, 1, @cur_date )
			END
			
			IF ( @day_count2 > 0 )
				INSERT INTO #emp_year ( emp_code, emp_year, daily_avg ) 
					 SELECT e.EMP_CODE, @cur_year, 
							ROUND( CAST( e.STD_ANNUAL_HRS AS decimal(9,2)) / CAST( @day_count2 AS decimal(9,2)), 2 )
					   FROM dbo.EMPLOYEE e 

			SET @cur_year = @cur_year + 1
		END	
	END	

	INSERT INTO #WORK_DAY (EMP_CODE, WORK_DATE, STD_HRS)
	SELECT
		[EmployeeCode],
		[WorkDate],
		[StandardHours]
	FROM
		(SELECT 
			[EmployeeCode] = e.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS, 
			[WorkDate] = wd.workdate,
			[StandardHours] = CASE DATEPART( dw, wd.workdate ) 
									WHEN 1 THEN e.SUN_HRS
									WHEN 2 THEN e.MON_HRS
									WHEN 3 THEN e.TUE_HRS
									WHEN 4 THEN e.WED_HRS
									WHEN 5 THEN e.THU_HRS
									WHEN 6 THEN e.FRI_HRS
									WHEN 7 THEN e.SAT_HRS
								END
		FROM 
			#work_days wd
		CROSS JOIN
			(SELECT
				EMP.EMP_CODE,
				EMP.EMP_DATE,
				EMP.EMP_TERM_DATE,
				EMP.SUN_HRS,
				EMP.MON_HRS,
				EMP.TUE_HRS,
				EMP.WED_HRS,
				EMP.THU_HRS,
				EMP.FRI_HRS,
				EMP.SAT_HRS,
				[TASK_START_DATE] = CASE WHEN e.[TASK_START_DATE] > @START_DATE_MIN OR e.[TASK_START_DATE] IS NULL THEN @START_DATE_MIN ELSE e.[TASK_START_DATE] END,
				[JOB_REVISED_DATE] = CASE WHEN e.[JOB_REVISED_DATE] < @END_DATE_MAX OR e.[JOB_REVISED_DATE] IS NULL THEN @END_DATE_MAX ELSE e.[JOB_REVISED_DATE] END
			FROM
				dbo.EMPLOYEE EMP
			LEFT OUTER JOIN
				#emp e2 ON EMP.EMP_CODE = e2.value
			LEFT OUTER JOIN
				(SELECT 
	 				[TASK_START_DATE] = MIN(TASK_START_DATE), 
	 				[JOB_REVISED_DATE] = MAX(JOB_REVISED_DATE),
	 				JTDE.EMP_CODE
				 FROM         
	 				dbo.V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
	 				dbo.JOB_TRAFFIC_DET_EMPS JTDE ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JTDE.JOB_NUMBER AND
	 													V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JTDE.JOB_COMPONENT_NBR AND
	 													V_JOB_TRAFFIC_DET.SEQ_NBR = JTDE.SEQ_NBR INNER JOIN
	 				dbo.JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
	 				dbo.V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
	 				dbo.JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
	 				dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
				 WHERE 
	 				(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
	 				AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
	 				AND ((TASK_START_DATE >= @START_DATE) AND (TASK_START_DATE <= @END_DATE) OR
	 				(JOB_REVISED_DATE >= @START_DATE) AND (JOB_REVISED_DATE <= @END_DATE) OR
	 				(@START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE))
				 GROUP BY
	 				JTDE.EMP_CODE) e ON EMP.EMP_CODE = e.EMP_CODE
			WHERE
				1 = CASE WHEN @EMPS = '' OR e2.value IS NOT NULL THEN 1 ELSE 0 END) e
		WHERE 
			(wd.workdate >= e.TASK_START_DATE AND wd.workdate <= e.JOB_REVISED_DATE) AND
			( e.EMP_TERM_DATE >= wd.workdate OR e.EMP_TERM_DATE IS NULL )
			AND ( e.EMP_DATE <= wd.workdate OR e.EMP_DATE IS NULL )
			AND ( wd.holiday = 0 )
			AND ( wd.workdate BETWEEN @START_DATE_MIN AND @END_DATE_MAX )) EmpHours
	WHERE
		StandardHours <> 0
		
	DROP TABLE #emp_work_days
	DROP TABLE #work_days
	DROP TABLE #emp_year
	DROP TABLE #emp
	
	UPDATE #WORK_DAY
	SET NON_TASK_DAY = CASE WHEN (SELECT COUNT(*)
	FROM dbo.EMP_NON_TASKS ent INNER JOIN
			TIME_CATEGORY ON ent.CATEGORY = TIME_CATEGORY.CATEGORY
			INNER JOIN dbo.EMP_NON_TASKS_EMPS ente ON ent.NON_TASK_ID = ente.NON_TASK_ID
	WHERE ent.[TYPE] = 'A' AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) 
			AND ent.ALL_DAY = 1 
			AND (WORK_DATE BETWEEN ent.[START_DATE] AND ent.[END_DATE] )
			AND (ente.EMP_CODE = #WORK_DAY.EMP_CODE)) > 0 THEN 1 ELSE 0 END		
            
    

		--SELECT * FROM #WORK_DAY --WHERE WORK_DATE BETWEEN @START_DATE AND @END_DATE
		IF @QUERY_TYPE = 'PSWL'
		    BEGIN
			    INSERT INTO #JOBS
				SELECT JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE,V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR,
				 V_JOB_TRAFFIC_DET.SEQ_NBR,
					 V_JOB_TRAFFIC_DET.EMP_CODE, CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE),
					 CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, JOB_REVISED_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, JOB_REVISED_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, JOB_REVISED_DATE), 101) +
				       ' 23:59:00' 
				       ) AS JOB_REVISED_DATE,
					 V_JOB_TRAFFIC_DET.FNC_CODE, V_JOB_TRAFFIC_DET.JOB_HRS, (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1),
					 CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (V_JOB_TRAFFIC_DET.JOB_HRS/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)) ELSE 0 END,
					CASE WHEN @START_DATE >= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE)  
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE)  
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1) ELSE 0 END,NULL,NULL,NULL,NULL,
					 CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 ) <> 0
						 THEN (V_JOB_TRAFFIC_DET.JOB_HRS/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 )) ELSE 0 END,
					CASE WHEN @START_DATE >= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 )
						 WHEN @START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= @END_DATE
															)
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE)  
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 )
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE)  
															 AND WORK_DATE <= @END_DATE
															 ) ELSE 0 END,0,NULL						
					FROM         
						V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
						JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						INNER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
						INNER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE						
					--WHERE V_JOB_TRAFFIC_DET.JOB_NUMBER = @PSWL_JOB_NUMBER AND V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = @PSWL_JOB_COMPONENT_NBR 				  		
			END    
        ELSE IF  @QUERY_TYPE = 'PSWL2'
		    BEGIN
	    	   SET @sql = ''
					   SELECT @sql = @sql + 'INSERT INTO #JOBS
				SELECT JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE,V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR,
				 V_JOB_TRAFFIC_DET.SEQ_NBR,
					 V_JOB_TRAFFIC_DET.EMP_CODE, CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE), CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE),
					 V_JOB_TRAFFIC_DET.FNC_CODE, V_JOB_TRAFFIC_DET.JOB_HRS, (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1),
					 CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (V_JOB_TRAFFIC_DET.JOB_HRS/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)) ELSE 0 END,
					CASE WHEN @START_DATE >= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE)  
															 AND WORK_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE)  
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1) ELSE 0 END,NULL,NULL,NULL,NULL,0,NULL
					FROM         
						V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
						JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						INNER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
						INNER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
						WHERE 1 = 1'
				IF @JC_LIST <> ''
				BEGIN
					SET @JC_LIST = REPLACE(@JC_LIST,'JOB_TRAFFIC_DET_EMPS','V_JOB_TRAFFIC_DET')
					SELECT @sql = @sql + @JC_LIST
				END			
				
				EXEC(@sql)						
					

				--INSERT INTO #JOBS_TIME_POSTED
				--SELECT #JOBS.JOB_NUMBER, #JOBS.JOB_COMPONENT_NBR, #JOBS.SEQ_NBR, #JOBS.EMP_CODE, #JOBS.FNC_CODE, EMP_HOURS, DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,DATE_ENTERED)) , 104 ) ) + (DATEPART(wk,DATE_ENTERED)-1), 6),DATEPART(mm,DATE_ENTERED),DAY_OF_YEAR= DATEPART(dayofyear,DATE_ENTERED)
				--FROM EMP_TIME_DTL AS ETD  INNER JOIN 
				--	 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
				--			ALERT A ON A.ALERT_ID = ETD.ALERT_ID INNER JOIN #JOBS ON A.JOB_NUMBER = #JOBS.JOB_NUMBER AND A.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND A.TASK_SEQ_NBR = #JOBS.SEQ_NBR
				--WHERE ETD.ALERT_ID IS NOT NULL AND ALERT_LEVEL = 'BRD' AND ET.EMP_CODE = #JOBS.EMP_CODE		
							
        					 
				----SELECT * FROM #JOBS ORDER BY JOB_NUMBER, JOB_COMPONENT_NBR
				----SELECT * FROM #JOBS_TIME_POSTED ORDER BY JOB_NUMBER, JOB_COMPONENT_NBR

				--INSERT INTO #ASSIGNMENTS
				--SELECT ALERT.ALERT_ID, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
				--	   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT_RCPT.EMP_CODE, 
				--	   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
				--	   ISNULL(ALERT.HRS_ALLOWED,0), SPRINT_EMPLOYEE.WEEK_START, SPRINT_EMPLOYEE.WEEK_END, 
				--	   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
				--		CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
				--		 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
				--	   CASE WHEN SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT.HRS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
				--	   0,
				--	   (SELECT COUNT(*) FROM #WORK_DAY
				--		WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
				--		 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END) 
				--		 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--		 AND NON_TASK_DAY <> 1
				--		),
				--	   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
				--													 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
				--													 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--													 AND NON_TASK_DAY <> 1) <> 0
				--				 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT.HRS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
				--													 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
				--													 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--													 AND NON_TASK_DAY <> 1)) ELSE 0 END,

				--	   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
				--													 AND WORK_DATE >= @START_DATE 
				--													 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--													 AND NON_TASK_DAY <> 1)
				--				 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
				--													 AND WORK_DATE >= @START_DATE 
				--													 AND WORK_DATE <= @END_DATE
				--													 AND NON_TASK_DAY <> 1)
				--				 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
				--													 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
				--													 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--													 AND NON_TASK_DAY <> 1)
				--				 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
				--													 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
				--													 AND WORK_DATE <= @END_DATE
				--													 AND NON_TASK_DAY <> 1) ELSE 0 END,
				--	   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0
				--FROM ALERT INNER JOIN
				--	 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
				--	 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
				--	 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
				--	 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
				--	 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
				--	 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
				--	 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
				--	 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE
				--	 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				--WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  AND (HRS_ALLOWED <> 0 OR [HOURS] <> 0) AND ALERT.ALRT_NOTIFY_HDR_ID IS NULL--AND (IWI.ALERT_ID IS NULL)
				--		--((ALERT.[START_DATE] >= @START_DATE AND ALERT.[START_DATE] <= @END_DATE) OR
				--		--(DUE_DATE >= @START_DATE AND DUE_DATE <= @END_DATE) OR (ALERT.[START_DATE] IS NULL AND [DUE_DATE] IS NULL) OR
				--		--(WEEK_START BETWEEN @START_DATE AND @END_DATE))

				--INSERT INTO #ASSIGNMENTS
				--SELECT ALERT.ALERT_ID, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
				--	   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT.ASSIGNED_EMP_CODE, 
				--	   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
				--	   ISNULL(ALERT.HRS_ALLOWED,0), SPRINT_EMPLOYEE.WEEK_START, SPRINT_EMPLOYEE.WEEK_END, 
				--	   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
				--		CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
				--		 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
				--	   CASE WHEN SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT.HRS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
				--	   0,
				--	   (SELECT COUNT(*) FROM #WORK_DAY
				--		WHERE EMP_CODE = ALERT.ASSIGNED_EMP_CODE
				--		 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END) 
				--		 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--		 AND NON_TASK_DAY <> 1
				--		),
				--	   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT.ASSIGNED_EMP_CODE
				--													 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
				--													 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--													 AND NON_TASK_DAY <> 1) <> 0
				--				 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT.HRS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT.ASSIGNED_EMP_CODE
				--													 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
				--													 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--													 AND NON_TASK_DAY <> 1)) ELSE 0 END,

				--	   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT.ASSIGNED_EMP_CODE
				--													 AND WORK_DATE >= @START_DATE 
				--													 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--													 AND NON_TASK_DAY <> 1)
				--				 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT.ASSIGNED_EMP_CODE
				--													 AND WORK_DATE >= @START_DATE 
				--													 AND WORK_DATE <= @END_DATE
				--													 AND NON_TASK_DAY <> 1)
				--				 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT.ASSIGNED_EMP_CODE
				--													 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
				--													 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
				--													 AND NON_TASK_DAY <> 1)
				--				 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
				--													WHERE EMP_CODE = ALERT.ASSIGNED_EMP_CODE
				--													 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
				--													 AND WORK_DATE <= @END_DATE
				--													 AND NON_TASK_DAY <> 1) ELSE 0 END,
				--	   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0
				--FROM ALERT LEFT OUTER JOIN
				--	 --ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
				--	 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
				--	 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
				--	 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
				--	 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
				--	 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
				--	 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
				--	 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT.ASSIGNED_EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE
				--	 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				--WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  AND (HRS_ALLOWED <> 0 OR [HOURS] <> 0) AND ALERT.ALRT_NOTIFY_HDR_ID IS NOT NULL--AND (IWI.ALERT_ID IS NULL)
					
		    END
	    ELSE	
    	    BEGIN		
													
				--SELECT * FROM #WORK_DAY											

	    	    INSERT INTO #JOBS
				SELECT JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE,V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR,
				 V_JOB_TRAFFIC_DET.SEQ_NBR,
					 V_JOB_TRAFFIC_DET.EMP_CODE, CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END,
					CASE WHEN WEEK_END IS NULL THEN CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, JOB_REVISED_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, JOB_REVISED_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, JOB_REVISED_DATE), 101) +
				       ' 23:59:00' 
				       ) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, JOB_REVISED_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, JOB_REVISED_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, JOB_REVISED_DATE), 101) +
				       ' 23:59:00' 
				       ) ELSE WEEK_END END AS JOB_REVISED_DATE,
					 V_JOB_TRAFFIC_DET.FNC_CODE, CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END AS JOB_HRS,				 
					 (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1
															),--WORKDAY_COUNT
					 CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)) ELSE 0 END, --HRS_PER_DAY
					CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1) ELSE 0 END,--WORKDAY_COUNT_IN_RANGE
                                                             TRAFFIC.TRF_DESCRIPTION, JOB_LOG.JOB_DESC,
															 JOB_COMPONENT.JOB_COMP_DESC, JOB_COMPONENT.JOB_FIRST_USE_DATE,
					 CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)) ELSE 0 END, --HRS_PER_DAY_WITH_ASSN
					CASE WHEN @START_DATE >= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= @END_DATE
															AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1) ELSE 0 END,--WORKDAY_COUNT_IN_RANGE_WITH_ASSN
                                                             0,NULL, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END,
                        CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY = 1) <> 0
						 THEN (CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY = 1)) ELSE 0 END--HRS_PER_DAY_NO_WD
                                                             
					FROM         
						V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
						JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						INNER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
						INNER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
						LEFT OUTER JOIN ALERT ON ALERT.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND ALERT.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR AND ALERT.TASK_SEQ_NBR = V_JOB_TRAFFIC_DET.SEQ_NBR
						LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND V_JOB_TRAFFIC_DET.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
						WHERE ALERT.ALERT_LEVEL <> 'PST' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
								AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
								AND ((CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END >= @START_DATE AND CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END <= @END_DATE) OR
									(CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) END >= @START_DATE AND CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) END <= @END_DATE) OR
									(@START_DATE >= CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END AND @END_DATE <= CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) END))		

				INSERT INTO #JOBS_TIME_POSTED
				SELECT #JOBS.JOB_NUMBER, #JOBS.JOB_COMPONENT_NBR, #JOBS.SEQ_NBR, #JOBS.EMP_CODE, #JOBS.FNC_CODE, EMP_HOURS, DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,DATE_ENTERED)) , 104 ) ) + (DATEPART(wk,DATE_ENTERED)-1), 6),DATEPART(mm,DATE_ENTERED),DAY_OF_YEAR= DATEPART(dayofyear,DATE_ENTERED), ETD.ALERT_ID
				FROM EMP_TIME_DTL AS ETD  INNER JOIN 
					 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
							ALERT A ON A.ALERT_ID = ETD.ALERT_ID INNER JOIN #JOBS ON A.JOB_NUMBER = #JOBS.JOB_NUMBER AND A.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND A.TASK_SEQ_NBR = #JOBS.SEQ_NBR
				WHERE ETD.ALERT_ID IS NOT NULL AND ALERT_LEVEL = 'BRD' AND ET.EMP_CODE = #JOBS.EMP_CODE AND EMP_DATE < @START_DATE	
                
               

                IF @OMIT_BEGINNING_BALANCE = 0
				BEGIN

                     UPDATE #JOBS
                    SET HRS_POSTED = (SELECT SUM(HRS_POSTED) FROM #JOBS_TIME_POSTED JTP WHERE JTP.JOB_NUMBER = #JOBS.JOB_NUMBER AND JTP.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND JTP.SEQ_NBR = #JOBS.SEQ_NBR)

					 UPDATE #JOBS
                    SET HRS_PER_DAY = 0, HRS_PER_DAY_WITH_ASSN = 0
                    WHERE HRS_POSTED > JOB_HRS

                    UPDATE #JOBS
                    SET HRS_PER_DAY = CASE WHEN WORKDAY_COUNT > 0 THEN (JOB_HRS - HRS_POSTED) / WORKDAY_COUNT END,
                        HRS_PER_DAY_WITH_ASSN = CASE WHEN WORKDAY_COUNT > 0 THEN (JOB_HRS - HRS_POSTED) / WORKDAY_COUNT END
                    WHERE HRS_POSTED > 0 AND HRS_PER_DAY <> 0

				END             
							
        					 
				--SELECT * FROM #JOBS WHERE EMP_CODE = 'ama' --ORDER BY JOB_NUMBER, JOB_COMPONENT_NBR
				--SELECT * FROM #JOBS_TIME_POSTED ORDER BY JOB_NUMBER, JOB_COMPONENT_NBR

				--Non routed
				INSERT INTO #ASSIGNMENTS
				SELECT ALERT.ALERT_ID, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
					   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT_RCPT.EMP_CODE, 
					   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
					   ISNULL(ALERT.HRS_ALLOWED,0),
					   CASE WHEN WEEK_START IS NOT NULL AND ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END,
					   CASE WHEN WEEK_END IS NOT NULL AND ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END, 
					   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
						CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
						 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
					   CASE WHEN SPRINT_EMPLOYEE.[HOURS] IS NULL OR SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
					   0,
					   (SELECT COUNT(*) FROM #WORK_DAY
						WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
						 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END) 
						 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
						 AND NON_TASK_DAY <> 1
						),
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)) ELSE 0 END,

					   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END  )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END  )
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1) ELSE 0 END,
					   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END,
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY = 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY = 1)) ELSE 0 END
				FROM ALERT INNER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
					 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) --AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
						AND (ALERT_RCPT.HOURS_ALLOWED <> 0 OR [HOURS] <> 0) 
						AND ALERT.ALRT_NOTIFY_HDR_ID IS NULL AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) AND (CURRENT_NOTIFY = 1)--AND (IWI.ALERT_ID IS NULL)
						--((ALERT.[START_DATE] >= @START_DATE AND ALERT.[START_DATE] <= @END_DATE) OR
						--(DUE_DATE >= @START_DATE AND DUE_DATE <= @END_DATE) OR (ALERT.[START_DATE] IS NULL AND [DUE_DATE] IS NULL) OR
						--(WEEK_START BETWEEN @START_DATE AND @END_DATE))

				--Routed
				INSERT INTO #ASSIGNMENTS
				SELECT ALERT.ALERT_ID, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
					   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT_RCPT.EMP_CODE, 
					   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
					   ISNULL(ALERT.HRS_ALLOWED,0), 
					   CASE WHEN WEEK_START IS NOT NULL AND ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END,
					   CASE WHEN WEEK_END IS NOT NULL AND ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END, 
					   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
						CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
						 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
					   CASE WHEN SPRINT_EMPLOYEE.[HOURS] IS NULL OR SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
					   0,
					   (SELECT COUNT(*) FROM #WORK_DAY
						WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
						 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END) 
						 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
						 AND NON_TASK_DAY <> 1
						),
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)) ELSE 0 END,

					   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END  )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END  )
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1) ELSE 0 END,
					   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END,
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY = 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY = 1)) ELSE 0 END
				FROM ALERT LEFT OUTER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
					 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) --AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  
						AND (ALERT_RCPT.HOURS_ALLOWED <> 0 OR [HOURS] <> 0) 
						AND ALERT.ALRT_NOTIFY_HDR_ID IS NOT NULL AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) AND (CURRENT_NOTIFY = 1)
									  		
    	    END	    

		

		--UPDATE #ASSIGNMENTS
		--SET [HOURS] = CASE WHEN [HOURS] IS NULL AND HRS_ALLOWED IS NOT NULL THEN HRS_ALLOWED ELSE 0 END
		--WHERE [HOURS] IS NULL

		UPDATE #ASSIGNMENTS
		SET [HRS_POSTED] = ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
								   WHERE ET.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND ETD.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND EMP_DATE < @START_DATE
								   GROUP BY ET.EMP_CODE),0)

		WHERE WEEKLY = 1

		UPDATE #ASSIGNMENTS
		SET [HRS_POSTED] = ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
								   WHERE ET.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND ETD.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND EMP_DATE < @START_DATE--AND EMP_DATE BETWEEN WEEK_START AND WEEK_END
								   GROUP BY ET.EMP_CODE),0)

		WHERE WEEKLY = 0
			  
		--SELECT EMP_HOURS, ETD.ALERT_ID, ET.EMP_CODE , EMP_DATE 
		--		FROM EMP_TIME_DTL AS ETD INNER JOIN 
		--		     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
		--			 #ASSIGNMENTS A ON A.ALERT_ID = ETD.ALERT_ID 

		--SELECT EMP_HOURS, ETD.ALERT_ID, ET.EMP_CODE, EMP_DATE 
		--							FROM EMP_TIME_DTL AS ETD INNER JOIN 
		--							     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
		--								 #JOBS J ON J.JOB_NUMBER = ETD.JOB_NUMBER AND J.JOB_COMPONENT_NBR = ETD.JOB_COMPONENT_NBR
		--							WHERE EMP_DATE BETWEEN @START_DATE AND @END_DATE
								   
				
		--SELECT * FROM #WORK_DAY WHERE EMP_CODE = 'kcard'
		--SELECT * FROM #JOBS WHERE EMP_CODE = 'ama' --WHERE EMP_CODE = 'NASSER'
		--SELECT * FROM #ASSIGNMENTS WHERE EMP_CODE = 'ama'

		 
 --GET JOBS LIST FOR DRILL DOWN	
SELECT @sql = ' INSERT INTO #MY_DATA
        SELECT *, 
        00.000000, 0 ,0,0,0,00.000000,00.000000,00.000000,00.000000,00.000000,00.000000,0,00.000000,00.000000,NULL,0,0,0,NULL,0,0,0 FROM
        (SELECT V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, V_JOB_TRAFFIC_DET.FNC_CODE, V_JOB_TRAFFIC_DET.TASK_DESCRIPTION, JOB_COMPONENT.JOB_COMP_DESC,
	        CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END) AS TASK_START_DATE, CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND V_JOB_TRAFFIC_DET.JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END) AS JOB_REVISED_DATE, JOB_COMPONENT.JOB_FIRST_USE_DATE, V_JOB_TRAFFIC_DET.EMP_CODE,
	        JOB_LOG.JOB_DESC, JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE,'''' AS CL_NAME, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE, CASE WHEN V_JOB_TRAFFIC_DET.TASK_START_DATE IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END AS SORT,
	        CASE WHEN SUM(SE.[HOURS]) > 0 THEN SUM(SE.[HOURS]) ELSE SUM(V_JOB_TRAFFIC_DET.JOB_HRS) END AS JOB_HRS, V_JOB_TRAFFIC_DET.SEQ_NBR, ISNULL(EMPLOYEE.EMP_FNAME+'' '','''')+ISNULL(EMPLOYEE.EMP_MI+''. '','''')+ISNULL(EMPLOYEE.EMP_LNAME,'''') AS EMP_FML_NAME, ''T'' AS REC_TYPE, -1 AS NON_TASK_ID, TRAFFIC.TRF_DESCRIPTION, EMPLOYEE.DP_TM_CODE, EMPLOYEE.DEF_TRF_ROLE'

        SELECT @sql_from = ' FROM JOB_COMPONENT 
        INNER JOIN JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
        INNER JOIN V_JOB_TRAFFIC_DET ON JOB_COMPONENT.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND JOB_COMPONENT.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR 
        INNER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN EMPLOYEE ON V_JOB_TRAFFIC_DET.EMP_CODE = EMPLOYEE.EMP_CODE INNER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
		LEFT OUTER JOIN ALERT ON ALERT.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND ALERT.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR AND ALERT.TASK_SEQ_NBR = V_JOB_TRAFFIC_DET.SEQ_NBR AND IS_WORK_ITEM = 1 AND ALERT.ALERT_LEVEL <> ''PST''
		LEFT OUTER JOIN SPRINT_EMPLOYEE SE ON ALERT.ALERT_ID = SE.ALERT_ID AND V_JOB_TRAFFIC_DET.EMP_CODE = SE.EMP_CODE AND SE.[HOURS] > 0'

        SELECT @sql_where = ' WHERE 1 = 1 AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)'

        IF @Restrictions > 0	
	        BEGIN
	          SELECT @sql_from = @sql_from + ' INNER JOIN SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE '

	          SELECT @sql_where = @sql_where + ' AND UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''') AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
	        END

        IF @RestrictionsEmp > 0 
	        BEGIN
	          SELECT @sql_from = @sql_from + ' INNER JOIN SEC_EMP ON V_JOB_TRAFFIC_DET.EMP_CODE = SEC_EMP.EMP_CODE '
	          SELECT @sql_where = @sql_where + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''')'
	        END
					
		IF @RestrictionsOffice > 0
		BEGIN
			SET @sql_from = @sql_from  + ' INNER JOIN EMP_OFFICE ON JOB_LOG.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
		END

        IF @ROLES <> ''
	        BEGIN
			  SELECT @sql_from = @sql_from + '
				   LEFT OUTER JOIN EMP_TRAFFIC_ROLE  ON V_JOB_TRAFFIC_DET.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE '
			  SELECT @sql_where = @sql_where + ' AND (EMP_TRAFFIC_ROLE.ROLE_CODE IN ('+ @ROLES +')) ' 	
	        END
       
        IF @EMP_CODE  <> '' AND @EMP_CODE <> '%'
	        SELECT @sql_where = @sql_where + ' AND V_JOB_TRAFFIC_DET.EMP_CODE = '''+ @EMP_CODE + ''''
        IF @EMP_LIST  <> '' AND (@EMP_CODE = '%' OR @EMP_CODE = '')
		    BEGIN
			    SELECT @sql_where = @sql_where + ' AND V_JOB_TRAFFIC_DET.EMP_CODE IN ('+ @EMP_LIST + ') '
		    END
		IF @DEPTS <> ''
		BEGIN
			SELECT @sql_where = @sql_where + ' AND (EMPLOYEE.DP_TM_CODE IN('+ @DEPTS +')) '
		END
	    IF @QUERY_TYPE = 'PSWL2' AND @JC_LIST <> ''
	    BEGIN
		    SET @JC_LIST = REPLACE(@JC_LIST,'JOB_TRAFFIC_DET_EMPS','JOB_COMPONENT')
		    SELECT @sql_where = @sql_where + @JC_LIST
	    END

        SELECT @sql = @sql + @sql_from + @sql_where
        SELECT @sql = @sql + ' GROUP BY V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, V_JOB_TRAFFIC_DET.SEQ_NBR, V_JOB_TRAFFIC_DET.FNC_CODE, V_JOB_TRAFFIC_DET.TASK_DESCRIPTION, JOB_COMPONENT.JOB_COMP_DESC,
        V_JOB_TRAFFIC_DET.TASK_START_DATE,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE,CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END, CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND V_JOB_TRAFFIC_DET.JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END, JOB_COMPONENT.JOB_FIRST_USE_DATE, V_JOB_TRAFFIC_DET.EMP_CODE,
        JOB_LOG.JOB_DESC, JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, TRAFFIC.TRF_DESCRIPTION, EMPLOYEE.DP_TM_CODE, EMPLOYEE.DEF_TRF_ROLE '
	-- HOLIDAYS:
        SELECT @sql2 = ' UNION ALL
	        SELECT JOB_NUMBER, JOB_COMPONENT_NBR,  FNC_CODE, NON_TASK_DESC AS TASK_DESCRIPTION, '''' AS JOB_COMP_DESC, CASE WHEN ALL_DAY = 1 THEN START_DATE ELSE (STR(DATEPART(month, START_DATE)) + ''/'' + STR(DATEPART(day, START_DATE)) + ''/'' + STR(DATEPART(year, START_DATE)) + '' '' + STR(DATEPART(hour, START_TIME)) + '':'' + STR(DATEPART(minute, START_TIME)) + '':'' + STR(DATEPART(second, START_TIME))) END AS TASK_START_DATE,
		        CASE WHEN ALL_DAY = 1 THEN END_DATE ELSE (STR(DATEPART(month, END_DATE)) + ''/'' + STR(DATEPART(day, END_DATE)) + ''/'' + STR(DATEPART(year, END_DATE)) + '' '' + STR(DATEPART(hour, END_TIME)) + '':'' + STR(DATEPART(minute, END_TIME)) + '':'' + STR(DATEPART(second, END_TIME))) END AS JOB_REVISED_DATE, NULL, 
		        EMP_NON_TASKS.EMP_CODE, '''' AS JOB_DESC, '''' AS OFFICE_CODE, '''' AS CL_CODE,'''' AS CL_NAME, '''' AS DIV_CODE, '''' AS PRD_CODE, CASE WHEN ALL_DAY = 1 THEN START_DATE ELSE (STR(DATEPART(month, START_DATE)) + ''/'' + STR(DATEPART(day, START_DATE)) + ''/'' + STR(DATEPART(year, START_DATE)) + '' '' + STR(DATEPART(hour, START_TIME)) + '':'' + STR(DATEPART(minute, START_TIME)) + '':'' + STR(DATEPART(second, START_TIME))) END AS SORT,
		        HOURS AS JOB_HRS, -1 AS SEQ_NBR, ISNULL(EMPLOYEE.EMP_FNAME+'' '','''')+ISNULL(EMPLOYEE.EMP_MI+''. '','''')+ISNULL(EMPLOYEE.EMP_LNAME,'''') AS EMP_FML_NAME, ''H'' AS REC_TYPE, NON_TASK_ID,NULL, NULL,NULL
	        FROM EMP_NON_TASKS LEFT OUTER JOIN EMPLOYEE ON EMP_NON_TASKS.EMP_CODE = EMPLOYEE.EMP_CODE '
       SELECT @sql2 = @sql2 + ' WHERE (START_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + '''' 
        SELECT @sql2 = @sql2 + ' OR END_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + ''')' 
	    SELECT @sql2 = @sql2 + '    AND TYPE = ''H''			
        UNION ALL
        SELECT EMP_NON_TASKS.JOB_NUMBER, EMP_NON_TASKS.JOB_COMPONENT_NBR, EMP_NON_TASKS.FNC_CODE, EMP_NON_TASKS.NON_TASK_DESC AS TASK_DESCRIPTION, ISNULL(JC.JOB_COMP_DESC,'''') AS JOB_COMP_DESC, 
	        CASE WHEN EMP_NON_TASKS.ALL_DAY = 1 THEN EMP_NON_TASKS.START_DATE ELSE (STR(DATEPART(month, EMP_NON_TASKS.START_DATE)) + ''/'' + STR(DATEPART(day, EMP_NON_TASKS.START_DATE)) + ''/'' + STR(DATEPART(year, EMP_NON_TASKS.START_DATE)) + '' '' + STR(DATEPART(hour, EMP_NON_TASKS.START_TIME)) + '':'' + STR(DATEPART(minute, EMP_NON_TASKS.START_TIME)) + '':'' + STR(DATEPART(second, EMP_NON_TASKS.START_TIME))) END AS TASK_START_DATE,
	        CASE WHEN EMP_NON_TASKS.ALL_DAY = 1 THEN EMP_NON_TASKS.END_DATE ELSE (STR(DATEPART(month, EMP_NON_TASKS.END_DATE)) + ''/'' + STR(DATEPART(day, EMP_NON_TASKS.END_DATE)) + ''/'' + STR(DATEPART(year, EMP_NON_TASKS.END_DATE)) + '' '' + STR(DATEPART(hour, EMP_NON_TASKS.END_TIME)) + '':'' + STR(DATEPART(minute, EMP_NON_TASKS.END_TIME)) + '':'' + STR(DATEPART(second, EMP_NON_TASKS.END_TIME))) END AS JOB_REVISED_DATE, NULL,
	        EMP_NON_TASKS_EMPS.EMP_CODE, '''' AS JOB_DESC, ISNULL(JL.OFFICE_CODE,'''') AS OFFICE_CODE, ISNULL(JL.CL_CODE,'''') AS CL_CODE,'''' AS CL_NAME, ISNULL(JL.DIV_CODE,'''') AS DIV_CODE, ISNULL(JL.PRD_CODE,'''') AS PRD_CODE,
	        CASE WHEN EMP_NON_TASKS.ALL_DAY = 1 THEN EMP_NON_TASKS.START_DATE ELSE (STR(DATEPART(month, EMP_NON_TASKS.START_DATE)) + ''/'' + STR(DATEPART(day, EMP_NON_TASKS.START_DATE)) + ''/'' + STR(DATEPART(year, EMP_NON_TASKS.START_DATE)) + '' '' + STR(DATEPART(hour, EMP_NON_TASKS.START_TIME)) + '':'' + STR(DATEPART(minute, EMP_NON_TASKS.START_TIME)) + '':'' + STR(DATEPART(second, EMP_NON_TASKS.START_TIME))) END AS SORT,
	        EMP_NON_TASKS.HOURS AS JOB_HRS, -1 AS SEQ_NBR, ISNULL(EMPLOYEE.EMP_FNAME+'' '','''')+ISNULL(EMPLOYEE.EMP_MI+''. '','''')+ISNULL(EMPLOYEE.EMP_LNAME,'''') AS EMP_FML_NAME, CASE WHEN EMP_NON_TASKS.ALL_DAY = 1 AND ISNULL(TIME_CATEGORY.VAC_SICK_FLAG,0) = 0 THEN ''ADA'' WHEN EMP_NON_TASKS.ALL_DAY = 1 AND ISNULL(TIME_CATEGORY.VAC_SICK_FLAG,0) > 0 THEN ''ADHO'' 
				 WHEN ISNULL(TIME_CATEGORY.VAC_SICK_FLAG,0) > 0 THEN ''AHO'' ELSE ''A'' END AS REC_TYPE, EMP_NON_TASKS.NON_TASK_ID,NULL, ISNULL(JC.DP_TM_CODE,'''') AS DP_TM_CODE,NULL
        FROM  EMP_NON_TASKS LEFT OUTER JOIN EMP_NON_TASKS_EMPS ON EMP_NON_TASKS.NON_TASK_ID = EMP_NON_TASKS_EMPS.NON_TASK_ID INNER JOIN EMPLOYEE ON EMP_NON_TASKS_EMPS.EMP_CODE = EMPLOYEE.EMP_CODE LEFT OUTER JOIN TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY LEFT OUTER JOIN 
			  JOB_COMPONENT JC ON JC.JOB_NUMBER = EMP_NON_TASKS.JOB_NUMBER AND JC.JOB_COMPONENT_NBR = EMP_NON_TASKS.JOB_COMPONENT_NBR LEFT OUTER JOIN JOB_LOG JL ON JL.JOB_NUMBER = EMP_NON_TASKS.JOB_NUMBER' 
        IF @RestrictionsEmp > 0 
              SELECT @sql2 = @sql2 + ' INNER JOIN SEC_EMP ON EMP_NON_TASKS_EMPS.EMP_CODE = SEC_EMP.EMP_CODE '
		IF @RestrictionsOffice > 0
		BEGIN
			SET @sql2 = @sql2  + ' LEFT OUTER JOIN EMP_OFFICE ON JL.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
		END
        SELECT @sql2 = @sql2 + ' WHERE '
        SELECT @sql2 = @sql2 + ' (EMP_NON_TASKS.START_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + '''' 
        SELECT @sql2 = @sql2 + ' OR EMP_NON_TASKS.END_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + ''')' 
        SELECT @sql2 = @sql2 + ' AND (EMP_NON_TASKS.TYPE = ''A'' OR EMP_NON_TASKS.TYPE = ''M'' OR EMP_NON_TASKS.TYPE = ''C'' OR EMP_NON_TASKS.TYPE = ''TD'' OR EMP_NON_TASKS.TYPE = ''EL'') AND EMPLOYEE.EMP_TERM_DATE IS NULL' 
        IF @EMP_CODE  <> '' AND @EMP_CODE <> '%'
	        SELECT @sql2 = @sql2 + ' AND EMP_NON_TASKS_EMPS.EMP_CODE = ''' + @EMP_CODE + '''' 

        IF @EMP_LIST  <> '' AND (@EMP_CODE = '%' OR @EMP_CODE = '')
		    BEGIN
			    SELECT @sql2 = @sql2 + ' AND EMP_NON_TASKS_EMPS.EMP_CODE IN ('+ @EMP_LIST + ') '
		    END
		IF @DEPTS <> ''
		BEGIN
			SELECT @sql2 = @sql2 + ' AND (EMPLOYEE.DP_TM_CODE IN('+ @DEPTS +')) '
		END
        IF @RestrictionsEmp > 0 
          SELECT @sql2 = @sql2 + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''')'
        SELECT @sql2 = @sql2 + ' ) AS A'	

        --SELECT @sql = @sql + ' ORDER BY SORT '	

        PRINT (@sql + @sql2)
        EXEC(@sql + @sql2)
        
        --SELECT * FROM #MY_DATA;
        --ADD IN EVENT TASKS:
        SET @sql = ''

        SET @sql = '
        INSERT INTO #MY_DATA
        SELECT     
	        EVENT.JOB_NUMBER, EVENT.JOB_COMPONENT_NBR, TRAFFIC_FNC.TRF_CODE AS FNC_CODE, TRAFFIC_FNC.TRF_DESC AS TASK_DESCRIPTION, 
	        JOB_COMPONENT.JOB_COMP_DESC, EVENT_TASK.START_TIME, EVENT_TASK.END_TIME, NULL, EVENT_TASK.EMP_CODE, JOB_LOG.JOB_DESC, 
	        JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE,'''' AS CL_NAME, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE, EVENT_TASK.START_TIME AS SORT, 
	        EVENT_TASK.HOURS_ALLOWED AS JOB_HRS, - 1 AS SEQ_NBR, 
	        ISNULL(ISNULL(EMPLOYEE.EMP_FNAME+'' '','''')+ISNULL(EMPLOYEE.EMP_MI+''. '','''')+ISNULL(EMPLOYEE.EMP_LNAME,''''),'''') AS EMP_FML_NAME, ''ET'' AS REC_TYPE, EVENT_TASK_ID AS NON_TASK_ID,NULL,NULL,NULL,
	        00.000000 AS ADJ_JOB_HRS, 1 AS IS_EVENT_TASK, 0,0,0,00.000000,00.000000,00.000000,00.000000,00.000000,00.000000,0,00.000000,00.000000,NULL,0,0,0,NULL,0,0,0
				FROM         EVENT_TASK WITH (NOLOCK) INNER JOIN
                      EVENT WITH (NOLOCK) ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
                      JOB_COMPONENT WITH (NOLOCK) ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
                      EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
                      JOB_LOG WITH (NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
                      TRAFFIC_FNC WITH (NOLOCK) ON EVENT_TASK.TASK_CODE = TRAFFIC_FNC.TRF_CODE LEFT OUTER JOIN
                      JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
                      JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN
                      EMPLOYEE WITH (NOLOCK) ON EVENT_TASK.EMP_CODE = EMPLOYEE.EMP_CODE'
        IF @Restrictions > 0
        BEGIN
	        SET @sql = @sql +  ' INNER JOIN SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE '
        END	
        IF @RestrictionsEmp > 0 
        BEGIN
	        SET @sql = @sql + ' INNER JOIN SEC_EMP ON EVENT_TASK.EMP_CODE = SEC_EMP.EMP_CODE '
        END					
		IF @RestrictionsOffice > 0
		BEGIN
			SET @sql = @sql  + ' INNER JOIN EMP_OFFICE ON JOB_LOG.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
		END
        IF @ROLES <> ''
        BEGIN
	        SET @sql = @sql + ' 
	        LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON EVENT_TASK.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
		        '
        END	
        --BEGIN THE WHERE CLAUSE
        SET @sql = @sql+'	
        WHERE (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND EVENT_TASK.END_TIME BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + '''' 
        IF @Restrictions > 0
        BEGIN
	        SET @sql = @sql + ' AND UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''') AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
        END	
        IF @RestrictionsEmp > 0 
        BEGIN
	        SET @sql = @sql + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''')'
        END
        IF @ROLES <> ''
        BEGIN
	        SET @sql = @sql +  ' AND ((EMP_TRAFFIC_ROLE.ROLE_CODE IN ('+ @ROLES +'))) ' 	
        END
        
        SET @sql = @sql + ' AND (NOT (EVENT_TASK.EMP_CODE IS NULL)) '
	        
        IF @EMP_CODE  <> '' AND @EMP_CODE <> '%'
        BEGIN
	        SET @sql = @sql + ' AND EVENT_TASK.EMP_CODE = '''+ @EMP_CODE + ''''
        END
        IF @EMP_LIST  <> '' AND (@EMP_CODE = '%' OR @EMP_CODE = '')
        BEGIN
		    SET @sql = @sql + ' AND EVENT_TASK.EMP_CODE IN ('+ @EMP_LIST + ') '
        END
		IF @DEPTS <> ''
		BEGIN
			SELECT @sql = @sql + ' AND (EMPLOYEE.DP_TM_CODE IN('+ @DEPTS +')) '
		END
        EXEC(@sql)
        
        --SELECT * FROM #MY_DATA WHERE JOB_NUMBER = 324
        UPDATE #MY_DATA SET TASK_TOTAL_WORKING_DAYS = 
			CASE WHEN (SELECT COUNT(WORKDAY_COUNT) FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) > 1 
		THEN (SELECT DISTINCT TOP 1 WORKDAY_COUNT FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) 
		ELSE (SELECT DISTINCT WORKDAY_COUNT FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) END
        
        UPDATE #MY_DATA SET HOURS_PER_DAY = 
			CASE WHEN (SELECT COUNT(HRS_PER_DAY) FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) > 1
		THEN (SELECT DISTINCT TOP 1 HRS_PER_DAY FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) 
		ELSE (SELECT DISTINCT HRS_PER_DAY FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) END

		UPDATE #MY_DATA SET HRS_PER_DAY_WITH_ASSN =  
			CASE WHEN (SELECT COUNT(HRS_PER_DAY_WITH_ASSN) FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) > 1
		 THEN (SELECT DISTINCT TOP 1 HRS_PER_DAY_WITH_ASSN FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) 
		 ELSE (SELECT DISTINCT HRS_PER_DAY_WITH_ASSN FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) END
        
        UPDATE #MY_DATA SET ADJ_JOB_HRS =  
			CASE WHEN (SELECT COUNT((HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE))
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND #JOBS.TASK_START_DATE = #MY_DATA.TASK_START_DATE AND #JOBS.JOB_REVISED_DATE = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) > 1 
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND #JOBS.TASK_START_DATE = #MY_DATA.TASK_START_DATE AND #JOBS.JOB_REVISED_DATE = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND #JOBS.TASK_START_DATE = #MY_DATA.TASK_START_DATE AND #JOBS.JOB_REVISED_DATE = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) END
        
        UPDATE #MY_DATA SET ADJ_JOB_HRS =  
			CASE WHEN (SELECT COUNT((HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE))
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) > 1 
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) END
		WHERE ADJ_JOB_HRS IS NULL

		UPDATE #MY_DATA SET ADJ_JOB_HRS_WITH_ASSN =  
			CASE WHEN (SELECT DISTINCT COUNT((HRS_PER_DAY_WITH_ASSN * WORKDAY_COUNT_IN_RANGE_WITH_ASSN))
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) > 1
		 THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY_WITH_ASSN * WORKDAY_COUNT_IN_RANGE_WITH_ASSN)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE)
		  ELSE (SELECT DISTINCT (HRS_PER_DAY_WITH_ASSN * WORKDAY_COUNT_IN_RANGE_WITH_ASSN)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) END

         UPDATE #MY_DATA SET ADJ_JOB_HRS_NO_WD =  
			CASE WHEN (SELECT COUNT((JOB_NUMBER))
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND WORKDAY_COUNT = 0	) > 1 
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY_NO_WD)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND WORKDAY_COUNT = 0	) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY_NO_WD)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND WORKDAY_COUNT = 0	) END
		WHERE REC_TYPE = 'T' AND ([TASK_START_DATE] BETWEEN @START_DATE AND @END_DATE OR [JOB_REVISED_DATE] BETWEEN @START_DATE AND @END_DATE) 

		UPDATE #MY_DATA SET STD_HRS_AVAIL = (SELECT SUM(STD_HRS)
        FROM #WORK_DAY WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
		AND WORK_DATE >= CONVERT(Date,#MY_DATA.TASK_START_DATE  )
		AND WORK_DATE <= CONVERT(Date,#MY_DATA.JOB_REVISED_DATE))

		--SELECT * FROM #MY_DATA --ORDER BY TASK_START_DATE

		UPDATE #MY_DATA
		SET STD_HRS_AVAIL = ISNULL(STD_HRS_AVAIL,0.00) - ISNULL((SELECT SUM(ISNULL(EMP_NON_TASKS.HOURS,0.00))
		FROM EMP_NON_TASKS 
		WHERE EMP_NON_TASKS.[START_DATE] >= CONVERT(Date,#MY_DATA.TASK_START_DATE)
		  AND EMP_NON_TASKS.[START_DATE] <= CONVERT(Date,#MY_DATA.JOB_REVISED_DATE) AND
		TYPE = 'H' AND ALL_DAY = 0),0)

		UPDATE #MY_DATA SET RED_FLAG = 1
		WHERE REC_TYPE = 'T' AND @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE 
		AND HOURS_PER_DAY = 0 AND STD_HRS_AVAIL > 0 AND HRS_PER_DAY_WITH_ASSN > 0           
		
        UPDATE #EMP_AVAILABILITY SET IS_WORK_DAY = (SELECT COUNT(1) FROM #WORK_DAY WHERE #WORK_DAY.WORK_DATE = #EMP_AVAILABILITY.DATE AND #WORK_DAY.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)  

		UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = (SELECT SUM(HRS_PER_DAY_WITH_ASSN) FROM #MY_DATA
		WHERE #EMP_AVAILABILITY.[DATE] BETWEEN #MY_DATA.TASK_START_DATE AND  CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, #MY_DATA.JOB_REVISED_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, #MY_DATA.JOB_REVISED_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, #MY_DATA.JOB_REVISED_DATE), 101) +
				       ' 23:59:00' 
				       ) AND #MY_DATA.RED_FLAG = 1 AND #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)
        
        UPDATE #MY_DATA SET JOB_HRS = (SELECT CASE WHEN @START_DATE >= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN
										 (SELECT SUM(STD_HRS) FROM #WORK_DAY
													WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
													 AND WORK_DATE >= @START_DATE 
													 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
													 )
				 WHEN @START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT SUM(STD_HRS) FROM #WORK_DAY
													WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
													 AND WORK_DATE >= @START_DATE 
													 AND WORK_DATE <= @END_DATE
													 )
				 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT SUM(STD_HRS) FROM #WORK_DAY
													WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
													 AND WORK_DATE >= #MY_DATA.TASK_START_DATE  
													 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
													 )
				 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT SUM(STD_HRS) FROM #WORK_DAY
													WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
													 AND WORK_DATE >= #MY_DATA.TASK_START_DATE  
													 AND WORK_DATE <= @END_DATE
													 ) ELSE JOB_HRS END)
			WHERE REC_TYPE = 'ADHO' OR REC_TYPE = 'ADA'



	UPDATE #MY_DATA SET TASK_BB_WORKING_DAYS = 
			(SELECT COUNT(*) FROM #WORK_DAY
			 WHERE EMP_CODE = #MY_DATA.EMP_CODE
			 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
			 AND WORK_DATE <= CASE WHEN @START_DATE < JOB_REVISED_DATE THEN @START_DATE ELSE JOB_REVISED_DATE END
			 AND NON_TASK_DAY <> 1)
	WHERE REC_TYPE = 'T' AND TASK_START_DATE < @START_DATE AND JOB_REVISED_DATE < @START_DATE

	UPDATE #MY_DATA SET TASK_BB_WORKING_DAYS = 
			(SELECT COUNT(*) FROM #WORK_DAY
			 WHERE EMP_CODE = #MY_DATA.EMP_CODE
			 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
			 AND WORK_DATE < CASE WHEN @START_DATE < JOB_REVISED_DATE THEN @START_DATE ELSE JOB_REVISED_DATE END
			 AND NON_TASK_DAY <> 1)
	WHERE REC_TYPE = 'T' AND TASK_START_DATE < @START_DATE AND JOB_REVISED_DATE >= @START_DATE

	 UPDATE #MY_DATA SET BB_HOURS_PER_DAY = 
			CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (JOB_HRS/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)) ELSE 0 END
	WHERE REC_TYPE = 'T'
			
			
	SET @sql = ''
        
	SET @sql = 'INSERT INTO #MY_DATA
	SELECT A.JOB_NUMBER, A.JOB_COMPONENT_NBR,'''',SUBJECT,A.JOB_COMP_DESC,
	CASE WHEN WEEK_START IS NULL THEN A.[START_DATE] 
	     WHEN WEEKLY = 1 AND WEEK_START IS NOT NULL AND A.[START_DATE] > WEEK_START THEN A.[START_DATE] ELSE WEEK_START END,
	CASE WHEN WEEK_END IS NULL THEN A.DUE_DATE 
	     WHEN WEEKLY = 1 AND WEEK_END IS NOT NULL AND A.DUE_DATE < WEEK_END THEN A.DUE_DATE ELSE WEEK_END END,NULL,A.EMP_CODE,JOB_DESC,A.OFFICE_CODE,A.CL_CODE,'''' AS CL_NAME,A.DIV_CODE,A.PRD_CODE,NULL,[HOURS],
	SEQ_NBR, NULL,''AS'',NULL,TRF_DESCRIPTION,NULL,NULL,0,0,0,0,0,0,0,0,0,0,0,0,0,0,A.ALERT_ID,0,A.HRS_POSTED,0,NULL,0,0,0
	FROM #ASSIGNMENTS A LEFT OUTER JOIN ALERT ON ALERT.ALERT_ID = A.ALERT_ID WHERE 1=1'

	IF @EMP_CODE  <> '' AND @EMP_CODE <> '%'
	    SELECT @sql = @sql + ' AND A.EMP_CODE = ''' + @EMP_CODE + '''' 

    IF @EMP_LIST  <> '' AND (@EMP_CODE = '%' OR @EMP_CODE = '')
		BEGIN
		    SELECT @sql = @sql + ' AND A.EMP_CODE IN ('+ @EMP_LIST + ') '
		END
        
	EXEC(@sql)

	UPDATE #MY_DATA
	SET DP_TM_CODE = (SELECT DP_TM_CODE FROM EMPLOYEE WHERE EMPLOYEE.EMP_CODE = #MY_DATA.EMP_CODE)
	WHERE DP_TM_CODE IS NULL

	UPDATE #MY_DATA
	SET DEF_TRF_CODE = (SELECT DEF_TRF_ROLE FROM EMPLOYEE WHERE EMPLOYEE.EMP_CODE = #MY_DATA.EMP_CODE)
	WHERE DEF_TRF_CODE IS NULL

	UPDATE #MY_DATA
	SET REC_TYPE = 'ASO'
	WHERE REC_TYPE = 'AS' AND ALERT_ID IN (SELECT ALERT_ID FROM ALERT WHERE ALERT_LEVEL = 'OF')

	--SELECT * FROM #MY_DATA

	UPDATE #MY_DATA SET TASK_TOTAL_WORKING_DAYS = 
			CASE WHEN (SELECT COUNT(WORKDAY_COUNT) FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) > 1 
		THEN (SELECT DISTINCT TOP 1 WORKDAY_COUNT FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) 
		ELSE (SELECT DISTINCT WORKDAY_COUNT FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) END
	WHERE REC_TYPE = 'AS'

	UPDATE #MY_DATA SET TASK_TOTAL_WORKING_DAYS = 
			CASE WHEN (SELECT COUNT(WORKDAY_COUNT) FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) > 1 
		THEN (SELECT DISTINCT TOP 1 WORKDAY_COUNT FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) 
		ELSE (SELECT DISTINCT WORKDAY_COUNT FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) END
	WHERE REC_TYPE = 'AS'

	UPDATE #MY_DATA SET HOURS_PER_DAY = 
			CASE WHEN (SELECT COUNT(HRS_PER_DAY) FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) > 1
		THEN (SELECT DISTINCT TOP 1 HRS_PER_DAY FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) 
		ELSE (SELECT DISTINCT HRS_PER_DAY FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) END
	WHERE REC_TYPE = 'AS'	

	UPDATE #MY_DATA SET HOURS_PER_DAY = 
			CASE WHEN (SELECT COUNT(HRS_PER_DAY) FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) > 1
		THEN (SELECT DISTINCT TOP 1 HRS_PER_DAY FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) 
		ELSE (SELECT DISTINCT HRS_PER_DAY FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) END
	WHERE REC_TYPE = 'AS'		

	UPDATE #MY_DATA SET ADJ_JOB_HRS =  
			CASE WHEN (SELECT COUNT((HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE))
       FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) > 1
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) END
	WHERE REC_TYPE = 'AS'

	UPDATE #MY_DATA SET ADJ_JOB_HRS =  
			CASE WHEN (SELECT COUNT((HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE))
       FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) > 1
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) END
	WHERE REC_TYPE = 'AS' AND ADJ_JOB_HRS IS NULL

     UPDATE #MY_DATA SET ADJ_JOB_HRS_NO_WD = ISNULL(ADJ_JOB_HRS_NO_WD,0) +
			CASE WHEN (SELECT COUNT((ALERT_ID))
       FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0 AND WORKDAY_COUNT = 0) > 1
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY_NO_WD)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0 AND WORKDAY_COUNT = 0) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY_NO_WD)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0 AND WORKDAY_COUNT = 0) END
	WHERE REC_TYPE = 'AS' AND ([TASK_START_DATE] BETWEEN @START_DATE AND @END_DATE OR [JOB_REVISED_DATE] BETWEEN @START_DATE AND @END_DATE)

	--SELECT * FROM #WORK_DAY WHERE EMP_CODE = 'sam'
    --SELECT * FROM #ASSIGNMENTS

	UPDATE #MY_DATA SET TASK_BB_WORKING_DAYS = 
			(SELECT COUNT(*) FROM #WORK_DAY
			 WHERE EMP_CODE = #MY_DATA.EMP_CODE
			 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
			 AND WORK_DATE <= CASE WHEN @START_DATE < JOB_REVISED_DATE THEN @START_DATE ELSE JOB_REVISED_DATE END
			 AND NON_TASK_DAY <> 1)
	WHERE REC_TYPE = 'AS'  AND TASK_START_DATE < @START_DATE AND JOB_REVISED_DATE < @START_DATE
	
	UPDATE #MY_DATA SET TASK_BB_WORKING_DAYS = 
			(SELECT COUNT(*) FROM #WORK_DAY
			 WHERE EMP_CODE = #MY_DATA.EMP_CODE
			 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
			 AND WORK_DATE < CASE WHEN @START_DATE < JOB_REVISED_DATE THEN @START_DATE ELSE JOB_REVISED_DATE END
			 AND NON_TASK_DAY <> 1)
	WHERE REC_TYPE = 'AS'  AND TASK_START_DATE < @START_DATE AND JOB_REVISED_DATE >= @START_DATE 

	 UPDATE #MY_DATA SET BB_HOURS_PER_DAY = 
			CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (JOB_HRS/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)) ELSE 0 END
	WHERE REC_TYPE = 'AS'
	

	  UPDATE #MY_DATA
	  SET ALERT_ID = (SELECT ALERT_ID FROM ALERT A WHERE #MY_DATA.JOB_NUMBER = A.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = A.TASK_SEQ_NBR AND REC_TYPE = 'T' AND A.ALERT_LEVEL = 'BRD')
	  WHERE ALERT_ID IS NULL

      --SELECT SUM(EMP_HOURS),ET.EMP_CODE, ETD.ALERT_ID 
						--				FROM EMP_TIME_DTL AS ETD INNER JOIN 
						--					 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
						--					 ALERT AS A ON A.ALERT_ID = ETD.ALERT_ID LEFT OUTER JOIN
      --                                       #MY_DATA ON #MY_DATA.JOB_NUMBER = A.JOB_COMPONENT_NBR AND #MY_DATA.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = A.TASK_SEQ_NBR
						--			   WHERE ET.EMP_CODE = 'ama' AND ETD.ALERT_ID IS NOT NULL AND EMP_DATE < @START_DATE --AND 303 = A.JOB_NUMBER AND 1 = A.JOB_COMPONENT_NBR AND 1 = A.TASK_SEQ_NBR
						--			   GROUP BY ET.EMP_CODE, ETD.ALERT_ID
        
	  UPDATE #MY_DATA
	  SET HRS_POSTED = (ISNULL((SELECT SUM(EMP_HOURS) 
										FROM EMP_TIME_DTL AS ETD INNER JOIN 
											 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
											 ALERT AS A ON A.ALERT_ID = ETD.ALERT_ID
									   WHERE ET.EMP_CODE = #MY_DATA.EMP_CODE AND ETD.ALERT_ID IS NOT NULL AND EMP_DATE < @START_DATE AND #MY_DATA.JOB_NUMBER = A.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = A.TASK_SEQ_NBR
									   GROUP BY ET.EMP_CODE, A.JOB_NUMBER,A.JOB_COMPONENT_NBR),0)) 
	  WHERE #MY_DATA.REC_TYPE = 'T'
  
        
	  --UPDATE #MY_DATA
	  --SET HRS_POSTED = (ISNULL((SELECT SUM(EMP_HOURS) 
			--							FROM EMP_TIME_DTL AS ETD INNER JOIN 
			--							     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
			--						   WHERE ET.EMP_CODE = #MY_DATA.EMP_CODE AND ETD.ALERT_ID = #MY_DATA.ALERT_ID AND #MY_DATA.JOB_NUMBER = ETD.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = ETD.JOB_COMPONENT_NBR --AND #MY_DATA.FNC_CODE = ETD.FNC_CODE
			--						   GROUP BY ET.EMP_CODE, ETD.JOB_NUMBER,ETD.JOB_COMPONENT_NBR),0)) 
	  --WHERE #MY_DATA.ALERT_ID IS NOT NULL

	  --SELECT @START_DATE_MIN,@END_DATE_MAX

	  UPDATE #MY_DATA
	  SET HRS_BEGIN = TASK_BB_WORKING_DAYS * BB_HOURS_PER_DAY
	  WHERE TASK_BB_WORKING_DAYS > 0 AND BB_HOURS_PER_DAY > 0

	  UPDATE #MY_DATA
	  SET HRS_BEGIN = TASK_BB_WORKING_DAYS * BB_HOURS_PER_DAY
	  WHERE ((TASK_START_DATE >= @START_DATE_MIN AND JOB_REVISED_DATE <= @END_DATE_MAX) OR (TASK_START_DATE >= @START_DATE_MIN) AND (TASK_START_DATE <= @END_DATE_MAX) OR
				(JOB_REVISED_DATE >= @START_DATE_MIN) AND (JOB_REVISED_DATE <= @END_DATE_MAX))			
			AND TASK_BB_WORKING_DAYS > 0 AND BB_HOURS_PER_DAY > 0

	  UPDATE #MY_DATA
	  SET HRS_BEGIN = #MY_DATA.JOB_HRS
	  WHERE JOB_REVISED_DATE < @START_DATE_MIN

	  UPDATE #MY_DATA
	  SET HRS_BEGIN = #MY_DATA.JOB_HRS
	  WHERE TASK_START_DATE IS NULL AND JOB_REVISED_DATE IS NULL

	  --SELECT * FROM #MY_DATA ORDER BY TASK_START_DATE
        
	  UPDATE #MY_DATA
	  SET HRS_LEFT = CASE WHEN (HRS_BEGIN - HRS_POSTED) < 0 THEN 0 ELSE (HRS_BEGIN - HRS_POSTED) END --CASE WHEN ((CASE WHEN ISNULL(ADJ_JOB_HRS,0.00) > 0 THEN JOB_HRS - ISNULL(ADJ_JOB_HRS,0.00) ELSE JOB_HRS END) - HRS_POSTED) < 0 THEN 0 ELSE ((CASE WHEN ISNULL(ADJ_JOB_HRS,0.00) > 0 THEN JOB_HRS - ISNULL(ADJ_JOB_HRS,0.00) ELSE JOB_HRS END) - HRS_POSTED) END

	  UPDATE #MY_DATA
	  SET CL_NAME = (SELECT CL_NAME FROM CLIENT WHERE CLIENT.CL_CODE = #MY_DATA.CL_CODE)

	UPDATE #MY_DATA 
	SET SPRINT_ID = (SELECT MAX(SD.SPRINT_HDR_ID) FROM SPRINT_DTL SD WHERE #MY_DATA.ALERT_ID = SD.ALERT_ID)

	UPDATE #MY_DATA
	SET TASK_TOTAL_WORKING_DAYS = (SELECT COUNT(*) FROM #WORK_DAY
									WHERE EMP_CODE = #MY_DATA.EMP_CODE
									 AND WORK_DATE >= #MY_DATA.TASK_START_DATE
									 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
									 AND NON_TASK_DAY <> 1
									)
	WHERE TASK_TOTAL_WORKING_DAYS IS NULL

	UPDATE #MY_DATA
	SET HOURS_PER_DAY = (CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= #MY_DATA.TASK_START_DATE
															 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (JOB_HRS/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= #MY_DATA.TASK_START_DATE
															 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
															 AND NON_TASK_DAY <> 1)) ELSE 0 END)
	WHERE HOURS_PER_DAY IS NULL

	  UPDATE #MY_DATA
	  SET TASK_TOTAL_WORKING_DAYS = 0, HOURS_PER_DAY = 0
	  WHERE JOB_REVISED_DATE < @START_DATE

    --DELETE FROM #MY_DATA
    --WHERE REC_TYPE = 'T' AND ((JOB_REVISED_DATE NOT BETWEEN @START_DATE AND @END_DATE) AND (TASK_START_DATE NOT BETWEEN @START_DATE AND @END_DATE)
				-- AND (@START_DATE NOT BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) AND (@END_DATE NOT BETWEEN TASK_START_DATE AND JOB_REVISED_DATE))

	
	--SELECT * FROM #MY_DATA --WHERE EMP_CODE = 'westc'
	--SELECT * FROM #WORK_DAY WHERE EMP_CODE = 'NASSER'
	--SELECT * FROM #ASSIGNMENTS
	--SELECT * FROM #MY_DATA
    --SELECT * FROM #JOBS WHERE EMP_CODE = 'ali'
	--POPULATE NON_TASKS
	INSERT INTO #NON_TASKS
	SELECT ente.EMP_CODE, ent.[START_DATE], ent.[END_DATE], ISNULL(SUM(ent.HOURS),0) AS SUM_HRS, TIME_CATEGORY.VAC_SICK_FLAG,0
	FROM EMP_NON_TASKS ent WITH(NOLOCK) LEFT OUTER JOIN
			TIME_CATEGORY WITH(NOLOCK) ON ent.CATEGORY = TIME_CATEGORY.CATEGORY 
			INNER JOIN dbo.EMP_NON_TASKS_EMPS ente ON ent.NON_TASK_ID = ente.NON_TASK_ID
	WHERE ((ALL_DAY IS NULL) OR ALL_DAY = 0) AND 
		  ((ent.[START_DATE] BETWEEN @START_DATE AND @END_DATE) OR (ent.[END_DATE] BETWEEN @START_DATE AND @END_DATE))
	GROUP BY ente.EMP_CODE, ent.[START_DATE], ent.[END_DATE], TIME_CATEGORY.VAC_SICK_FLAG

	UPDATE #NON_TASKS
	SET [NUM_DAYS] = (SELECT COUNT(*) FROM #WORK_DAY WHERE WORK_DATE BETWEEN #NON_TASKS.[START_DATE] AND #NON_TASKS.END_DATE AND #WORK_DAY.EMP_CODE = #NON_TASKS.EMP_CODE)
	   
	  -- SELECT * FROM #NON_TASKS WHERE EMP_CODE = 'NASSER'
	--SELECT * FROM #EMP_AVAILABILITY 
		
		--Update #EMP_AVAILABILITY table 
		UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 
		(SELECT STD_HRS FROM #WORK_DAY
		WHERE CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) = #WORK_DAY.WORK_DATE 
		AND #EMP_AVAILABILITY.EMP_CODE = #WORK_DAY.EMP_CODE AND NON_TASK_DAY <> 1) --AND UPPER(USERID) = UPPER(@UserID))
		
		--Holidays
		 UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 0, 
					#EMP_AVAILABILITY.NOTE = EMP_NON_TASKS.NON_TASK_DESC, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 1
		FROM #EMP_AVAILABILITY INNER JOIN EMP_NON_TASKS WITH(NOLOCK) 
			ON CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) = EMP_NON_TASKS.START_DATE
		WHERE TYPE = 'H'
		AND ALL_DAY = 1
		AND 
		(
			[START_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
			OR [END_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
		)

		UPDATE #EMP_AVAILABILITY 
		SET #EMP_AVAILABILITY.STD_HRS_AVAIL = CASE WHEN (ISNULL(#EMP_AVAILABILITY.STD_HRS_AVAIL,0.00) - ISNULL(EMP_NON_TASKS.HOURS,0.00)) > 0 THEN (ISNULL(#EMP_AVAILABILITY.STD_HRS_AVAIL,0.00) - ISNULL(EMP_NON_TASKS.HOURS,0.00)) ELSE 0 END,
		#EMP_AVAILABILITY.NOTE = EMP_NON_TASKS.NON_TASK_DESC
		FROM #EMP_AVAILABILITY INNER JOIN EMP_NON_TASKS WITH(NOLOCK) ON 
		CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) = EMP_NON_TASKS.START_DATE
		WHERE TYPE = 'H' AND ALL_DAY = 0

		--Appointments
		UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = 		
		( SELECT
		CASE WHEN SUM(NUM_DAYS) > 0 THEN ISNULL(SUM(HOURS)/SUM(NUM_DAYS),0.000000) ELSE ISNULL(SUM(HOURS),0.000000) END AS SUM_HRS
		FROM         #NON_TASKS
		WHERE     (#NON_TASKS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) AND (#NON_TASKS.VAC_SICK_FLAG IN (1, 2, 3))
		AND
		(
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) <= DATEPART(dayofyear,[END_DATE])
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) <= DATEPART(yy,[END_DATE])
			) 
			AND 
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) >= DATEPART(dayofyear,[START_DATE])
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) >= DATEPART(yy,[START_DATE])
			)

		)), #EMP_AVAILABILITY.NOTE = 'Appointment'
		
		--ZERO OUT ALL-DAY (AND ALL DAY MULTI-DAY) APPOINTMENTS:
		UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = STD_HRS_AVAIL, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 2
		FROM EMP_NON_TASKS WITH(NOLOCK) INNER JOIN
								TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY 
									INNER JOIN dbo.EMP_NON_TASKS_EMPS ente ON EMP_NON_TASKS.NON_TASK_ID = ente.NON_TASK_ID
							INNER JOIN
								#EMP_AVAILABILITY WITH(NOLOCK) ON ente.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
		WHERE (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) AND EMP_NON_TASKS.ALL_DAY = 1
		AND 
		(
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) <= DATEPART(dayofyear,END_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) <= DATEPART(yy,END_TIME)
			) 
			AND 
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) >= DATEPART(dayofyear,START_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) >= DATEPART(yy,START_TIME)
			)

		)
		;
		
		UPDATE #EMP_AVAILABILITY SET HRS_APPTS =
		
			(SELECT SUM(HRS_PER_DAY)
			 FROM #ASSIGNMENTS A
				WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND 
				#EMP_AVAILABILITY.DATE BETWEEN CASE WHEN WEEK_START IS NULL THEN CASE WHEN A.[START_DATE] is NULL THEN A.[DUE_DATE] ELSE A.[START_DATE] END ELSE WEEK_START END AND CASE WHEN WEEK_END IS NULL THEN CASE WHEN A.DUE_DATE is NULL THEN A.[START_DATE] ELSE A.DUE_DATE END ELSE WEEK_END END
				AND A.ALERT_ID IN (SELECT ALERT_ID FROM ALERT WHERE ALERT_LEVEL = 'OF')
			)
		WHERE STD_HRS_AVAIL IS NOT NULL AND #EMP_AVAILABILITY.IS_FULL_DAY_OFF IS NULL 
		

		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = 		
		( 
			SELECT     ISNULL(SUM(HOURS),0.000000) AS SUM_HRS
			FROM       #NON_TASKS
			WHERE     (#NON_TASKS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) 
			AND 
			(
				[START_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
				OR [END_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
			)
			AND ((#NON_TASKS.VAC_SICK_FLAG NOT IN (1, 2, 3) OR #NON_TASKS.VAC_SICK_FLAG IS NULL ))
		)
		WHERE HRS_APPTS IS NULL

		--ZERO OUT ALL-DAY (AND ALL DAY MULTI-DAY) APPOINTMENTS:
		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = STD_HRS_AVAIL, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 2
		FROM EMP_NON_TASKS WITH(NOLOCK) 
		INNER JOIN EMP_NON_TASKS_EMPS ON EMP_NON_TASKS.NON_TASK_ID = EMP_NON_TASKS_EMPS.NON_TASK_ID
		     LEFT OUTER JOIN
								TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY INNER JOIN
								#EMP_AVAILABILITY WITH(NOLOCK) ON EMP_NON_TASKS_EMPS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
		WHERE (TIME_CATEGORY.VAC_SICK_FLAG NOT IN (1, 2, 3)) AND EMP_NON_TASKS.ALL_DAY = 1
		AND 
		(
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) <= DATEPART(dayofyear,END_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) <= DATEPART(yy,END_TIME)
			) 
			AND 
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) >= DATEPART(dayofyear,START_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) >= DATEPART(yy,START_TIME)
			)
		)
		AND HRS_APPTS IS NULL
		;  

		--Events
		UPDATE #EMP_AVAILABILITY
		SET #EMP_AVAILABILITY.HRS_ASSIGNED_EVENT = 
		(
			SELECT     
				ISNULL(SUM(EVENT_TASK.HOURS_ALLOWED),0.000000) --AS SUM_EVENT_HOURS_ALLOWED, EVENT_TASK.EMP_CODE, 
				--CONVERT(SMALLDATETIME,CONVERT(VARCHAR(10),EVENT_TASK.START_TIME,101)) AS EVENT_DATE
			FROM         
				EVENT_TASK WITH (NOLOCK) INNER JOIN
				EMPLOYEE WITH (NOLOCK) ON EVENT_TASK.EMP_CODE  COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  INNER JOIN
				EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
				JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
				EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
				JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
			WHERE
				(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
				AND DATEPART(dayofyear,EVENT_TASK.START_TIME) = DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) 
				AND DATEPART(yy,EVENT_TASK.START_TIME) = DATEPART(yy,#EMP_AVAILABILITY.DATE)
				AND #EMP_AVAILABILITY.EMP_CODE = EVENT_TASK.EMP_CODE
			GROUP BY 
				EVENT_TASK.EMP_CODE, CONVERT(SMALLDATETIME,CONVERT(VARCHAR(10),EVENT_TASK.START_TIME,101))
		)
		;
		--SELECT * FROM #JOBS WHERE EMP_CODE = 'ama'
		--Update Assigned Task Hours
		UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = ISNULL(HRS_ASSIGNED_TASK,0.000000)
		         + (SELECT SUM(HRS_PER_DAY) FROM #JOBS 
					WHERE #EMP_AVAILABILITY.EMP_CODE = #JOBS.EMP_CODE AND 
					#EMP_AVAILABILITY.DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE					
						)
		WHERE (STD_HRS_AVAIL IS NOT NULL AND STD_HRS_AVAIL <> 0) AND #EMP_AVAILABILITY.IS_FULL_DAY_OFF IS NULL 
		

		--Update Assigment Hours
		UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_ASSIGN = (SELECT SUM(HRS_PER_DAY)
															FROM #ASSIGNMENTS A
															WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND 
															#EMP_AVAILABILITY.DATE BETWEEN CASE WHEN WEEK_START IS NULL THEN CASE WHEN A.[START_DATE] is NULL THEN A.[DUE_DATE] ELSE A.[START_DATE] END ELSE WEEK_START END AND CASE WHEN WEEK_END IS NULL THEN CASE WHEN A.DUE_DATE is NULL THEN A.[START_DATE] ELSE A.DUE_DATE END ELSE WEEK_END END
															AND A.ALERT_ID NOT IN (SELECT ALERT_ID FROM ALERT WHERE ALERT_LEVEL = 'OF')
															)
		WHERE STD_HRS_AVAIL IS NOT NULL AND #EMP_AVAILABILITY.IS_FULL_DAY_OFF IS NULL 
        

        --SELECT * FROM #EMP_AVAILABILITY
		
		
       		
		--SELECT * FROM #JOBS --WHERE EMP_CODE = 'chon'
		--ORDER BY EMP_CODE
		
		--SELECT * FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'ama'
		--SELECT * FROM #WORK_DAY --WHERE EMP_CODE = 'BIVONS'
		
		--CLEAN UP:
        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 0.000000 WHERE STD_HRS_AVAIL IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = 0.000000 WHERE HRS_USED_NON_TASK IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_AVAIL = ISNULL(STD_HRS_AVAIL,0.000000) - ISNULL(HRS_USED_NON_TASK,0.000000) - ISNULL(HRS_APPTS,0.000000);
        UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = 0.000000 WHERE HRS_ASSIGNED_TASK IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_BALANCE_AVAIL = ISNULL(HRS_AVAIL,0.000000) - ISNULL(HRS_ASSIGNED_TASK,0.000000);
		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = 0.000000 WHERE HRS_APPTS IS NULL;

        UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = ISNULL(HRS_ASSIGNED_TASK,0.000000)
		         + (SELECT SUM(HRS_PER_DAY_NO_WD) FROM #JOBS 
					WHERE #EMP_AVAILABILITY.EMP_CODE = #JOBS.EMP_CODE AND 
					#EMP_AVAILABILITY.DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE	AND WORKDAY_COUNT = 0				
						)
		WHERE (STD_HRS_AVAIL = 0) AND #EMP_AVAILABILITY.IS_FULL_DAY_OFF IS NOT NULL 

        UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_ASSIGN = ISNULL(HRS_ASSIGNED_ASSIGN,0.000000)
		         + (SELECT SUM(HRS_PER_DAY_NO_WD) FROM #ASSIGNMENTS 
					WHERE #EMP_AVAILABILITY.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND 
					#EMP_AVAILABILITY.DATE BETWEEN [START_DATE] AND DUE_DATE AND WORKDAY_COUNT = 0					
						)
		WHERE (STD_HRS_AVAIL = 0) AND #EMP_AVAILABILITY.IS_FULL_DAY_OFF IS NOT NULL 

--        --TEST:
        --SELECT * FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'ama';

        --UPDATE #EMP_AVAILABILITY
        --SET HRS_ASSIGNED_TASK = (SELECT 

				
        DECLARE
	        @NUM_DAYS INT,
	        @NUM_WEEKS INT,
	        @NUM_MONTHS INT,
	        @NUM_YEARS INT,
	        @NUM_EMPS INT,
	        @CALCULATED_START_DATE SMALLDATETIME, --SINCE WE FILTER OUT DAYS EMPS DON'T WORK, THE START/END PASSED IN ISN'T NECESSARILY THE START/END THAT GETS OUTPUT
	        @CALCULATED_END_DATE SMALLDATETIME
	        
--		--TEST:
		--SELECT * FROM #EMP_AVAILABILITY

	    IF @SUMMARY_LEVEL BETWEEN 1 AND 5
	    BEGIN
			SELECT  
				@CALCULATED_START_DATE = MIN([DATE]),
				@CALCULATED_END_DATE = MAX([DATE]),
				@NUM_DAYS = COUNT(DISTINCT DAY_OF_YEAR),
				@NUM_WEEKS = COUNT(DISTINCT WEEK_OF_YEAR), 
				@NUM_MONTHS = COUNT(DISTINCT MONTH_OF_YEAR),
				@NUM_YEARS = COUNT(DISTINCT [YEAR]),
				@NUM_EMPS = COUNT(DISTINCT EMP_CODE)
			FROM 
				#EMP_AVAILABILITY;
	    	
			SELECT 
				@START_DATE  AS ENTERED_START_DATE, 
				@END_DATE AS ENTERED_END_DATE, 
				@CALCULATED_START_DATE  AS CALCULATED_START_DATE, 
				@CALCULATED_END_DATE AS CALCULATED_END_DATE, 
				ISNULL(@NUM_DAYS,0) AS NUM_DAYS, 
				ISNULL(@NUM_WEEKS,0) AS NUM_WEEKS, 
				ISNULL(@NUM_MONTHS,0) AS NUM_MONTHS, 
				ISNULL(@NUM_YEARS,0) AS NUM_YEARS, 
				ISNULL(@NUM_EMPS,0) AS NUM_EMPS;
	    END    
     
     
--		--TEST:
		--SELECT * FROM #ASSIGNMENTS
		--SELECT * FROM #EMP_AVAILABILITY
        --SELECT * FROM #MY_DATA
		--FINAL CLEANUP:
		-- recalc available time and subtract event task time from final balance
		-- add event task time to hrs_assigned_task too
		UPDATE #EMP_AVAILABILITY
		SET 
		#EMP_AVAILABILITY.HRS_BALANCE_AVAIL = ISNULL(#EMP_AVAILABILITY.HRS_BALANCE_AVAIL,0.000000) - ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_EVENT,0.000000),
		#EMP_AVAILABILITY.HRS_ASSIGNED_TASK = ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_TASK,0.000000) + ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_EVENT,0.000000);

		--? REMOVE WHAT SHOULD BE ALL DAY HOLIDAYS....
		DELETE FROM #EMP_AVAILABILITY WHERE HRS_USED_NON_TASK = 0.000000 AND HRS_AVAIL = 0.000000 AND HRS_ASSIGNED_TASK = 0.000000 AND HRS_ASSIGNED_EVENT = 0.000000 AND HRS_BALANCE_AVAIL = 0.000000 AND IS_FULL_DAY_OFF = 1;

		--TEST:
		--SELECT * FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'cburr'

		CREATE TABLE #EMP_ACTUALIZATION --MASTER TABLE TO RETURN
		(
			[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
			[STD_HRS_AVAIL]      DECIMAL(18,6),
			[EMP_DIRECT_HRS_GOAL_HOURS] DECIMAL(18,6),
			[HRS_ASSIGNED_TASK]  DECIMAL(18,6),
			[HRS_ASSIGNED_ASSIGN]  DECIMAL(18,6),
			--[HRS_ASSIGNED]  DECIMAL(18,6),
			[HRS_APPTS]			 DECIMAL(18,6),
			[HRS_USED_NON_TASK]  DECIMAL(18,6),
			[HRS_AVAIL]          DECIMAL(18,6),
			[HRS_BALANCE_AVAIL]  DECIMAL(18,6),
			[BEGINNING_BALANCE]  DECIMAL(18,6),
			[HRS_POSTED]		DECIMAL(18,6),
			[HRS_LEFT]			DECIMAL(18,6),
			[HRS_POSTED_TASK]		DECIMAL(18,6),
			[HRS_NO_DATE]			DECIMAL(18,6),
			[HRS_TO_DISTRIBUTE]			DECIMAL(18,6),
			[PERC_WORKED]			DECIMAL(18,6),
			OFFICE_CODE			VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			OFFICE_NAME			VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_FNAME			VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_MI			VARCHAR(1) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_LNAME			VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			DP_TM_CODE		VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			DP_TM_DESC		VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_FML_NAME		VARCHAR(2000) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_START_TIME		SMALLDATETIME,
			EMP_END_TIME		SMALLDATETIME,
			IS_FIRST_CHOICE  INT,
			EMP_SENIORITY    SMALLINT,
			DEF_TRF_ROLE	VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL
		);
     
        -- @SUMMARY_LEVEL SMALLINT ==> 0 = NONE, 1 = DAY, 2 = WEEK, 3 = MONTH, 4 = YEAR
        IF @SUMMARY_LEVEL IS NULL OR @SUMMARY_LEVEL = 0 --NO SUMMARY
        BEGIN
	        SELECT 
		        ROW_ID,
		        EMP_CODE,
		        CASE DATEPART(dw,[DATE])
					WHEN 1 THEN 'Sun'
					WHEN 2 THEN 'Mon'
					WHEN 3 THEN 'Tue'
					WHEN 4 THEN 'Wed'
					WHEN 5 THEN 'Thu'
					WHEN 6 THEN 'Fri'
					WHEN 7 THEN 'Sat'
				END AS S_DAY_OF_WEEK,       
		        EMP_START_TIME,
		        EMP_END_TIME,
		        --EMP_START_TIME_SUN,
		        --EMP_END_TIME_SUN,
		        --EMP_START_TIME_MON,
		        --EMP_END_TIME_MON,
		        --EMP_START_TIME_TUE,
		        --EMP_END_TIME_TUE,
		        --EMP_START_TIME_WED,
		        --EMP_END_TIME_WED,
		        --EMP_START_TIME_THU,
		        --EMP_END_TIME_THU,
		        --EMP_START_TIME_FRI,
		        --EMP_END_TIME_FRI,
		        --EMP_START_TIME_SAT,
		        --EMP_END_TIME_SAT,
		        EMP_DIRECT_HRS_GOAL_PERC,
		        [DATE],
		        DAY_OF_WEEK,
		        DAY_OF_YEAR,
		        WEEK_OF_YEAR,
		        MONTH_OF_YEAR,
		        [YEAR],
		        STD_HRS_AVAIL,
		        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * ISNULL(HRS_AVAIL,0.000000) AS EMP_DIRECT_HRS_GOAL_HOURS,
		        HRS_USED_NON_TASK,
		        HRS_AVAIL,
		        HRS_ASSIGNED_TASK,
				HRS_APPTS,
		        HRS_ASSIGNED_EVENT,
		        HRS_BALANCE_AVAIL,
		        NOTE,
		        IS_FULL_DAY_OFF,
		        0 AS IS_FIRST_CHOICE
	        FROM #EMP_AVAILABILITY;
        END	
        IF @SUMMARY_LEVEL = 1 --SUM BY DAY
        BEGIN
      
			INSERT INTO #EMP_ACTUALIZATION
        	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0)  AS HRS_ASSIGNED_TASK,
				CAST(ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6)) AS HRS_ASSIGNED_ASSIGN,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
				0 as BEGINNING_BALANCE,
				0 AS HRS_POSTED,
				0 AS HRS_LEFT,
				0 AS HRS_POSTED_TASK,
				0 AS HRS_NO_DATE,
				0 AS HRS_TO_DISTRIBUTE,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0.000000 THEN CAST(ISNULL(SUM(A.HRS_ASSIGNED_TASK),0.000000)/ISNULL(SUM(A.STD_HRS_AVAIL),0.000000) AS DECIMAL(18,6)) 
        			ELSE 0.000000
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,
                      EMPLOYEE.EMP_START_TIME,EMPLOYEE.EMP_END_TIME,
		        0 AS IS_FIRST_CHOICE,
		        ISNULL(EMPLOYEE.SENIORITY,9999) AS EMP_SENIORITY,EMPLOYEE.DEF_TRF_ROLE
        	FROM	
        	    (
		        SELECT 
			        EMP_CODE,
			        EMP_DIRECT_HRS_GOAL_PERC,
			        DAY_OF_YEAR,
			        ISNULL(SUM(STD_HRS_AVAIL),0.000000) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        ISNULL(SUM(HRS_USED_NON_TASK),0.000000) AS HRS_USED_NON_TASK, 
			        ISNULL(SUM(HRS_AVAIL),0.000000) AS HRS_AVAIL,
					ISNULL(SUM(HRS_ASSIGNED_TASK),0.000000) AS HRS_ASSIGNED_TASK, 
			        ISNULL(SUM(HRS_APPTS),0.000000) AS HRS_APPTS, 
			        ISNULL(SUM(HRS_BALANCE_AVAIL),0.000000) AS HRS_BALANCE_AVAIL,
					--(SELECT SUM([HOURS]) - SUM(HRS_POSTED)
					--		FROM #ASSIGNMENTS A
					--		WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
					--		GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR) AS HRS_ASSIGNED_ASSIGN,
					SUM(HRS_ASSIGNED_ASSIGN) AS HRS_ASSIGNED_ASSIGN
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,DAY_OF_YEAR
		        ) AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
        		GROUP BY 
        			A.EMP_CODE, A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
					  DEPT_TEAM.DP_TM_DESC,EMPLOYEE.EMP_START_TIME,EMPLOYEE.EMP_END_TIME, EMPLOYEE.SENIORITY,EMPLOYEE.DEF_TRF_ROLE;

      

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
												AND ET.EMP_DATE < @START_DATE  AND ((ETD.ALERT_ID IN (SELECT ALERT_ID FROM #ASSIGNMENTS WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)) OR (ETD.ALERT_ID IN (SELECT ALERT_ID FROM #MY_DATA WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)))
								   GROUP BY ET.EMP_CODE),0)) 
								 --  -
								 --  (ISNULL((SELECT SUM(B.EMP_HOURS) FROM (SELECT ET.EMP_CODE, CASE WHEN ASSIGNED_EMP_CODE IS NULL AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT WHERE ALERT_ID = A.ALERT_ID) = 0 AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = A.ALERT_ID) = 0 THEN EMP_HOURS ELSE 0 END AS EMP_HOURS
									--FROM EMP_TIME_DTL AS ETD INNER JOIN 
									--     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
									--			ALERT A ON A.ALERT_ID = ETD.ALERT_ID 
								 --  WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ET.EMP_DATE < @START_DATE AND ETD.ALERT_ID IS NOT NULL) AS B 
								 --  GROUP BY EMP_CODE),0)) 

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED_TASK = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN 
												ALERT A ON A.ALERT_ID = ETD.ALERT_ID
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND ALERT_LEVEL = 'BRD' AND EMP_DATE < @START_DATE
								   GROUP BY ET.EMP_CODE),0)) 
				
				UPDATE #EMP_ACTUALIZATION
				SET [BEGINNING_BALANCE] = (ISNULL((SELECT SUM(HRS_BEGIN) 
											FROM #MY_DATA
											--FROM V_JOB_TRAFFIC_DET INNER JOIN
											--	JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
											--	V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
											--	JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
											--	JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
										 --  WHERE V_JOB_TRAFFIC_DET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
											--	 AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL) AND TASK_START_DATE < @START_DATE						
										   WHERE #MY_DATA.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND
											   ((REC_TYPE <> 'H' AND REC_TYPE <> 'ADA' AND REC_TYPE <> 'ADHO' AND REC_TYPE <> 'AHO') AND 
											   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
												 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
												   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END) 
										   GROUP BY EMP_CODE),0)) --+
										 --  (ISNULL((SELECT SUM(CASE WHEN WORKDAY_COUNT > 1 AND WORKDAY_COUNT <> WORKDAY_COUNT_IN_RANGE THEN ((WORKDAY_COUNT - WORKDAY_COUNT_IN_RANGE) * HRS_PER_DAY) ELSE [HOURS] END)
										 --  --(ISNULL((SELECT SUM([HOURS]) 
											--FROM #ASSIGNMENTS A 
										 --  WHERE A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ((CASE WHEN [WEEK_START] IS NOT NULL THEN [WEEK_START] ELSE [START_DATE] END < @START_DATE) OR (WEEK_OF_YEAR IS NULL))
										 --  GROUP BY A.EMP_CODE),0))

                UPDATE #EMP_ACTUALIZATION
				SET HRS_LEFT = (ISNULL((SELECT SUM(HRS_LEFT) 
											FROM #MY_DATA			
										   WHERE #MY_DATA.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND
											   ((REC_TYPE <> 'H' AND REC_TYPE <> 'ADA' AND REC_TYPE <> 'ADHO' AND REC_TYPE <> 'AHO') AND 
											   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
												 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
												   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END) 
										   GROUP BY EMP_CODE),0))

				IF @OMIT_BEGINNING_BALANCE = 1
				BEGIN
					UPDATE #EMP_ACTUALIZATION SET [BEGINNING_BALANCE] = 0
					UPDATE #EMP_ACTUALIZATION SET HRS_POSTED = 0
					UPDATE #EMP_ACTUALIZATION SET HRS_LEFT = 0
				END

                --SELECT * FROM #EMP_AVAILABILITY
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_NO_DATE = ISNULL((SELECT SUM([HOURS]) FROM #ASSIGNMENTS A WHERE [START_DATE] IS NULL AND [DUE_DATE] IS NULL AND WEEK_START IS NULL AND WEEK_END IS NULL AND A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE GROUP BY A.EMP_CODE),0)
				
				--UPDATE #EMP_ACTUALIZATION
				--SET HRS_LEFT = CASE WHEN (BEGINNING_BALANCE - HRS_POSTED) < 0 THEN 0 ELSE BEGINNING_BALANCE - HRS_POSTED END

				--UPDATE #EMP_ACTUALIZATION
				--SET HRS_ASSIGNED_TASK = CASE WHEN (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) < 0 THEN 0 ELSE (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_TO_DISTRIBUTE = CASE WHEN HRS_LEFT < 0 THEN 0 ELSE HRS_LEFT END

    --            UPDATE #EMP_ACTUALIZATION
				--SET HRS_LEFT = CASE WHEN (BEGINNING_BALANCE - HRS_POSTED) < 0 THEN 0 ELSE BEGINNING_BALANCE - HRS_POSTED END

				SELECT * FROM #EMP_ACTUALIZATION
					  
        	SELECT DISTINCT DAY_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], DAY_OF_YEAR;
        	
	        SELECT 
		        EMP_CODE,
		        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
		        DAY_OF_YEAR,
		        CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
		        CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.01) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
		        CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
		        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
		        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))
							--+ ISNULL((SELECT SUM([HOURS]) - SUM(HRS_POSTED)
							--			FROM #ASSIGNMENTS A
							--			WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
							--			GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR),0) 
                            --+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT DAY_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL = 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) = 0),0)
							+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT DAY_OF_YEAR) FROM #EMP_AVAILABILITY WHERE (HRS_AVAIL > 0) AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0) AS HRS_ASSIGNED_TASK,
							--- (CASE WHEN (SELECT HRS_TO_DISTRIBUTE FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) = 0 THEN 
							--ISNULL((SELECT SUM(HRS_POSTED) FROM #JOBS_TIME_POSTED JTP WHERE JTP.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND JTP.DAY_OF_YEAR = #EMP_AVAILABILITY.DAY_OF_YEAR GROUP BY JTP.EMP_CODE,JTP.DAY_OF_YEAR),0) ELSE 0 END)  AS HRS_ASSIGNED_TASK,
					CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS,	
        		CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
		        CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		        0 AS IS_FIRST_CHOICE,
				ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
				 AND #EMP_AVAILABILITY.DAY_OF_YEAR BETWEEN DATEPART(dayofyear,#MY_DATA.TASK_START_DATE) AND DATEPART(dayofyear,#MY_DATA.JOB_REVISED_DATE)
				 AND RED_FLAG = 1 AND REC_TYPE = 'T'
					GROUP BY EMP_CODE),0) AS OVER_BOOKED,
					((CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))  
							+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT DAY_OF_YEAR) FROM #EMP_AVAILABILITY WHERE (HRS_AVAIL > 0) AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0)) / CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))) * 100 AS PERCENT_UTIL
	        FROM #EMP_AVAILABILITY			
			--WHERE 1 = CASE WHEN @OMIT_BEGINNING_BALANCE = 1 AND DAY_OF_YEAR >= @START_DATE THEN 1
			--			   WHEN @OMIT_BEGINNING_BALANCE = 0 THEN 1 END
	        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,DAY_OF_YEAR
           -- SELECT COUNT(DISTINCT DAY_OF_YEAR) FROM #EMP_AVAILABILITY WHERE (HRS_AVAIL > 0 OR IS_FULL_DAY_OFF IS NOT NULL) AND #EMP_AVAILABILITY.EMP_CODE = 'ama'
            --SELECT * FROM #EMP_AVAILABILITY
            --SELECT * FROM #EMP_ACTUALIZATION
        	
        END
        IF @SUMMARY_LEVEL = 2 --SUM BY WEEK
        BEGIN
			INSERT INTO #EMP_ACTUALIZATION
          	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0)  AS HRS_ASSIGNED_TASK,
				CAST(ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6)) AS HRS_ASSIGNED_ASSIGN,
				--CAST(SUM(A.ASSIGNED) AS DECIMAL(18,6))  AS ASSIGNED,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6)) - ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0) AS HRS_BALANCE_AVAIL,
				0 as BEGINNING_BALANCE,
				0 AS HRS_POSTED,
				0 AS HRS_LEFT,
				0 AS HRS_POSTED_TASK,
				0 AS HRS_NO_DATE,
				0 AS HRS_TO_DISTRIBUTE,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0 THEN CAST(SUM(A.HRS_ASSIGNED_TASK)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0.000000
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,NULL,NULL,
		        0 AS IS_FIRST_CHOICE,NULL,EMPLOYEE.DEF_TRF_ROLE
        	FROM	
        	    (		
		        SELECT 
			        EMP_CODE,
			        EMP_DIRECT_HRS_GOAL_PERC,
			        WEEK_OF_YEAR,
			        SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
			        SUM(HRS_AVAIL) AS HRS_AVAIL,
			        SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK,
			        SUM(HRS_APPTS) AS HRS_APPTS,  
			        SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL,
					--(SELECT SUM([HOURS]) - SUM(HRS_POSTED)
					--		FROM #ASSIGNMENTS A
					--		WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
					--		GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR) AS HRS_ASSIGNED_ASSIGN,
					SUM(HRS_ASSIGNED_ASSIGN) AS HRS_ASSIGNED_ASSIGN
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,WEEK_OF_YEAR
        	    ) AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
				GROUP BY A.EMP_CODE,   A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC,EMPLOYEE.DEF_TRF_ROLE;

				UPDATE #EMP_ACTUALIZATION				
				SET HRS_POSTED = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN ALERT ON ALERT.ALERT_ID = ETD.ALERT_ID
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
												AND ET.EMP_DATE < @START_DATE AND ((ETD.ALERT_ID IN (SELECT ALERT_ID FROM #ASSIGNMENTS WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)) OR (ETD.ALERT_ID IN (SELECT ALERT_ID FROM #MY_DATA WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)))
								   GROUP BY ET.EMP_CODE),0)) 
								 --  -
								 --  (ISNULL((SELECT SUM(B.EMP_HOURS) FROM (SELECT ET.EMP_CODE, CASE WHEN ASSIGNED_EMP_CODE IS NULL AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT WHERE ALERT_ID = A.ALERT_ID) = 0 AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = A.ALERT_ID) = 0 THEN EMP_HOURS ELSE 0 END AS EMP_HOURS
									--FROM EMP_TIME_DTL AS ETD INNER JOIN 
									--     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
									--			ALERT A ON A.ALERT_ID = ETD.ALERT_ID 
								 --  WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ET.EMP_DATE < @START_DATE AND ETD.ALERT_ID IS NOT NULL) AS B 
								 --  GROUP BY EMP_CODE),0)) 

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED_TASK = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN 
												ALERT A ON A.ALERT_ID = ETD.ALERT_ID
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND ALERT_LEVEL = 'BRD' AND EMP_DATE < @START_DATE
								   GROUP BY ET.EMP_CODE),0)) 
								   
	
				UPDATE #EMP_ACTUALIZATION
				SET [BEGINNING_BALANCE] = (ISNULL((SELECT SUM(HRS_BEGIN) 
											FROM #MY_DATA
											--FROM V_JOB_TRAFFIC_DET INNER JOIN
											--	JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
											--	V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
											--	JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
											--	JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
										 --  WHERE V_JOB_TRAFFIC_DET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
											--	 AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL) AND TASK_START_DATE < @START_DATE			
											WHERE #MY_DATA.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND
											   ((REC_TYPE <> 'H' AND REC_TYPE <> 'ADA' AND REC_TYPE <> 'ADHO' AND REC_TYPE <> 'AHO') AND 
											   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
												 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
												   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END) 
										   GROUP BY #MY_DATA.EMP_CODE),0)) --+
										 --  (ISNULL((SELECT SUM(CASE WHEN WORKDAY_COUNT > 1 AND WORKDAY_COUNT <> WORKDAY_COUNT_IN_RANGE THEN ((WORKDAY_COUNT - WORKDAY_COUNT_IN_RANGE) * HRS_PER_DAY) ELSE [HOURS] END) 
										 --  --(ISNULL((SELECT SUM([HOURS])
											--FROM #ASSIGNMENTS A 
										 --  WHERE A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ((CASE WHEN [WEEK_START] IS NOT NULL THEN [WEEK_START] ELSE [START_DATE] END < @START_DATE) OR (WEEK_OF_YEAR IS NULL))
										 --  GROUP BY A.EMP_CODE),0))

                UPDATE #EMP_ACTUALIZATION
				SET [HRS_LEFT] = (ISNULL((SELECT SUM(HRS_LEFT) 
											FROM #MY_DATA		
											WHERE #MY_DATA.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND
											   ((REC_TYPE <> 'H' AND REC_TYPE <> 'ADA' AND REC_TYPE <> 'ADHO' AND REC_TYPE <> 'AHO') AND 
											   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
												 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
												   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END) 
										   GROUP BY #MY_DATA.EMP_CODE),0)) 

				IF @OMIT_BEGINNING_BALANCE = 1
				BEGIN
					UPDATE #EMP_ACTUALIZATION SET [BEGINNING_BALANCE] = 0
					UPDATE #EMP_ACTUALIZATION SET HRS_POSTED = 0
					UPDATE #EMP_ACTUALIZATION SET HRS_LEFT = 0
				END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_NO_DATE = ISNULL((SELECT SUM([HOURS]) FROM #ASSIGNMENTS A WHERE [START_DATE] IS NULL AND [DUE_DATE] IS NULL AND WEEK_START IS NULL AND WEEK_END IS NULL AND A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE GROUP BY A.EMP_CODE),0)
				
				--UPDATE #EMP_ACTUALIZATION
				--SET HRS_LEFT = BEGINNING_BALANCE - HRS_POSTED  --CASE WHEN (BEGINNING_BALANCE - HRS_POSTED) < 0 THEN 0 ELSE BEGINNING_BALANCE - HRS_POSTED END

				--UPDATE #EMP_ACTUALIZATION
				--SET HRS_ASSIGNED_TASK = CASE WHEN (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) < 0 THEN 0 ELSE (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_TO_DISTRIBUTE = CASE WHEN HRS_LEFT < 0 THEN 0 ELSE HRS_LEFT END

    --            UPDATE #EMP_ACTUALIZATION
				--SET HRS_LEFT = CASE WHEN (BEGINNING_BALANCE - HRS_POSTED) < 0 THEN 0 ELSE BEGINNING_BALANCE - HRS_POSTED END

				SELECT * FROM #EMP_ACTUALIZATION
        	
	        	--SELECT DISTINCT WEEK_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], WEEK_OF_YEAR;
        		DECLARE @WEEK_VIEW_MIN_YEAR AS INT, @WEEK_VIEW_MAX_YEAR AS INT, @WEEK_VIEW_YEAR_COUNT AS INT, @LAST_WEEK_OF_YEAR AS INT
        		
        		SELECT @WEEK_VIEW_MIN_YEAR = MIN([YEAR]), @WEEK_VIEW_MAX_YEAR = MAX([YEAR]) FROM #EMP_AVAILABILITY;
        		--SELECT @LAST_WEEK_OF_YEAR = MAX(WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE [YEAR] = @WEEK_VIEW_MIN_YEAR;
        		
        		SET @WEEK_VIEW_YEAR_COUNT = ISNULL(@WEEK_VIEW_MAX_YEAR,0) - ISNULL(@WEEK_VIEW_MIN_YEAR,0)
         		--SELECT @WEEK_VIEW_MIN_YEAR AS WVMINYEAR, @WEEK_VIEW_MAX_YEAR AS WVMAXYEAR, @WEEK_VIEW_YEAR_COUNT AS WVYEAR_COUNT, @LAST_WEEK_OF_YEAR AS LWOY
       		
        		--HANDLE WHEN RESULTS SPAN MORE THAN A YEAR (GOING FROM DECEMBER OF ONE YEAR TO JANUARY OF NEXT)
        		IF @WEEK_VIEW_YEAR_COUNT = 0 
        			BEGIN
	        			SELECT DISTINCT WEEK_OF_YEAR AS CTR, [YEAR], WEEK_OF_YEAR FROM #EMP_AVAILABILITY ORDER BY [YEAR], WEEK_OF_YEAR;
        			END
        		ELSE
        			BEGIN
	        			--SELECT DISTINCT WEEK_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], WEEK_OF_YEAR;
	        			SELECT DISTINCT A.CTR, A.[YEAR], A.WEEK_OF_YEAR
	        			FROM
	        			(
	        			SELECT 
	        				0 AS CTR, 
	        			@WEEK_VIEW_MIN_YEAR AS [YEAR], WEEK_OF_YEAR
	        			FROM #EMP_AVAILABILITY	
	        			)AS A ORDER BY A.WEEK_OF_YEAR
        			END


				--SELECT  CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)),(SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE),CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))							
				--			+ (SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) 
				--			- (CASE WHEN (SELECT HRS_TO_DISTRIBUTE FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) = 0 THEN
				--			ISNULL((SELECT SUM(HRS_POSTED) FROM #JOBS_TIME_POSTED JTP WHERE JTP.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND JTP.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR GROUP BY JTP.EMP_CODE,JTP.WEEK_OF_YEAR),0) ELSE 0 END)  AS HRS_ASSIGNED_TASK,
				--	CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'walla'
				--	GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,WEEK_OF_YEAR

        		--SELECT * FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'walla'
        		SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        WEEK_OF_YEAR,
			        CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			        CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			        CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
			        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))--   AS HRS_ASSIGNED_TASK,
							+ --CASE WHEN (SELECT HRS_TO_DISTRIBUTE FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) >= 0) < 0 THEN (SELECT HRS_TO_DISTRIBUTE FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) >= 0) ELSE
                            ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE (HRS_AVAIL > 0) AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0) AS HRS_ASSIGNED_TASK,
					CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS,	
        			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
			        CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		            0 AS IS_FIRST_CHOICE,
					ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
				 AND #EMP_AVAILABILITY.WEEK_OF_YEAR BETWEEN #MY_DATA.TASK_START_DATE AND #MY_DATA.JOB_REVISED_DATE
				 AND RED_FLAG = 1 AND REC_TYPE = 'T'
					GROUP BY EMP_CODE),0) AS OVER_BOOKED,
					((CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))  
							+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE (HRS_AVAIL > 0 ) AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0 ),0)) / CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))) * 100 AS PERCENT_UTIL
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,WEEK_OF_YEAR

                --SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE (HRS_AVAIL > 0 OR IS_FULL_DAY_OFF IS NOT NULL) AND IS_WORK_DAY = 1 AND #EMP_AVAILABILITY.EMP_CODE = 'ama'

                --SELECT * FROM #EMP_AVAILABILITY
                --SELECT * FROM #EMP_ACTUALIZATION
        END
        IF @SUMMARY_LEVEL = 3 --SUM BY MONTH
        BEGIN
        	
			INSERT INTO #EMP_ACTUALIZATION
          	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0)  AS HRS_ASSIGNED_TASK,
				CAST(ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6)) AS HRS_ASSIGNED_ASSIGN,
				--CAST(SUM(A.ASSIGNED) AS DECIMAL(18,6))  AS ASSIGNED,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
				0 as BEGINNING_BALANCE,
				0 AS HRS_POSTED,
				0 AS HRS_LEFT,
				0 AS HRS_POSTED_TASK,
				0 AS HRS_NO_DATE,
				0 AS HRS_TO_DISTRIBUTE,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0 THEN CAST(SUM(A.HRS_ASSIGNED_TASK)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,NULL,NULL,
		        0 AS IS_FIRST_CHOICE,NULL,EMPLOYEE.DEF_TRF_ROLE
        	FROM	
        	    (		
		        SELECT 
			        EMP_CODE,
			        EMP_DIRECT_HRS_GOAL_PERC,
			        MONTH_OF_YEAR,
			        SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.01) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
			        SUM(HRS_AVAIL) AS HRS_AVAIL,
			        SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK, 
			        SUM(HRS_APPTS) AS HRS_APPTS,  
			        SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL,
					--(SELECT SUM([HOURS]) - SUM(HRS_POSTED)
					--		FROM #ASSIGNMENTS A
					--		WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
					--		GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR) AS HRS_ASSIGNED_ASSIGN,
					SUM(HRS_ASSIGNED_ASSIGN) AS HRS_ASSIGNED_ASSIGN
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,MONTH_OF_YEAR
        	    ) AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
           	GROUP BY A.EMP_CODE,   A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC,EMPLOYEE.DEF_TRF_ROLE;

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
												AND ET.EMP_DATE < @START_DATE AND ((ETD.ALERT_ID IN (SELECT ALERT_ID FROM #ASSIGNMENTS WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)) OR (ETD.ALERT_ID IN (SELECT ALERT_ID FROM #MY_DATA WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE))) 
								   GROUP BY ET.EMP_CODE),0)) 
								 --  -
								 --  (ISNULL((SELECT SUM(B.EMP_HOURS) FROM (SELECT ET.EMP_CODE, CASE WHEN ASSIGNED_EMP_CODE IS NULL AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT WHERE ALERT_ID = A.ALERT_ID) = 0 AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = A.ALERT_ID) = 0 THEN EMP_HOURS ELSE 0 END AS EMP_HOURS
									--FROM EMP_TIME_DTL AS ETD INNER JOIN 
									--     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
									--			ALERT A ON A.ALERT_ID = ETD.ALERT_ID 
								 --  WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ET.EMP_DATE < @START_DATE AND ETD.ALERT_ID IS NOT NULL) AS B 
								 --  GROUP BY EMP_CODE),0)) 

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED_TASK = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN 
												ALERT A ON A.ALERT_ID = ETD.ALERT_ID
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND ALERT_LEVEL = 'BRD' AND EMP_DATE < @START_DATE
								   GROUP BY ET.EMP_CODE),0)) 				

				UPDATE #EMP_ACTUALIZATION
				SET [BEGINNING_BALANCE] = (ISNULL((SELECT SUM(HRS_BEGIN) 
											FROM #MY_DATA
											--FROM V_JOB_TRAFFIC_DET INNER JOIN
											--	JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
											--	V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
											--	JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
											--	JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
										 --  WHERE V_JOB_TRAFFIC_DET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
											--	 AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL) AND TASK_START_DATE < @START_DATE			
											WHERE #MY_DATA.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND
											  ((REC_TYPE <> 'H' AND REC_TYPE <> 'ADA' AND REC_TYPE <> 'ADHO' AND REC_TYPE <> 'AHO') AND 
											   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
												 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
												   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END) 
										   GROUP BY EMP_CODE),0)) --+
										 --  (ISNULL((SELECT SUM(CASE WHEN WORKDAY_COUNT > 1 AND WORKDAY_COUNT <> WORKDAY_COUNT_IN_RANGE THEN ((WORKDAY_COUNT - WORKDAY_COUNT_IN_RANGE) * HRS_PER_DAY) ELSE [HOURS] END) 
										 --  --(ISNULL((SELECT SUM([HOURS])
											--FROM #ASSIGNMENTS A 
										 --  WHERE A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ((CASE WHEN [WEEK_START] IS NOT NULL THEN [WEEK_START] ELSE [START_DATE] END < @START_DATE) OR (WEEK_OF_YEAR IS NULL))
										 --  GROUP BY A.EMP_CODE),0))

                UPDATE #EMP_ACTUALIZATION
				SET [HRS_LEFT] = (ISNULL((SELECT SUM(HRS_LEFT) 
											FROM #MY_DATA		
											WHERE #MY_DATA.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND
											  ((REC_TYPE <> 'H' AND REC_TYPE <> 'ADA' AND REC_TYPE <> 'ADHO' AND REC_TYPE <> 'AHO') AND 
											   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
												 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
												   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END) 
										   GROUP BY EMP_CODE),0)) 

				IF @OMIT_BEGINNING_BALANCE = 1
				BEGIN
					UPDATE #EMP_ACTUALIZATION SET [BEGINNING_BALANCE] = 0
					UPDATE #EMP_ACTUALIZATION SET HRS_POSTED = 0
					UPDATE #EMP_ACTUALIZATION SET HRS_LEFT = 0
				END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_NO_DATE = ISNULL((SELECT SUM([HOURS]) FROM #ASSIGNMENTS A WHERE [START_DATE] IS NULL AND [DUE_DATE] IS NULL AND WEEK_START IS NULL AND WEEK_END IS NULL AND A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE GROUP BY A.EMP_CODE),0)
				
				--UPDATE #EMP_ACTUALIZATION
				--SET HRS_LEFT = BEGINNING_BALANCE - HRS_POSTED-- CASE WHEN (BEGINNING_BALANCE - HRS_POSTED) < 0 THEN 0 ELSE BEGINNING_BALANCE - HRS_POSTED END

				--UPDATE #EMP_ACTUALIZATION
				--SET HRS_ASSIGNED_TASK = CASE WHEN (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) < 0 THEN 0 ELSE (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_TO_DISTRIBUTE = HRS_LEFT --CASE WHEN HRS_LEFT < 0 THEN 0 ELSE HRS_LEFT END

    --            UPDATE #EMP_ACTUALIZATION
				--SET HRS_LEFT = CASE WHEN (BEGINNING_BALANCE - HRS_POSTED) < 0 THEN 0 ELSE BEGINNING_BALANCE - HRS_POSTED END

				SELECT * FROM #EMP_ACTUALIZATION
						  
						  
	        	SELECT DISTINCT MONTH_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], MONTH_OF_YEAR;
		  
		        SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        MONTH_OF_YEAR,
			        CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			        CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			        CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,			        
			        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))
							--+ ISNULL((SELECT SUM([HOURS]) - SUM(HRS_POSTED)
							--			FROM #ASSIGNMENTS A
							--			WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
							--			GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR),0) 
							+ (SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT MONTH_OF_YEAR) FROM #EMP_AVAILABILITY)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) AS HRS_ASSIGNED_TASK,
							--- (CASE WHEN (SELECT HRS_TO_DISTRIBUTE FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) = 0 THEN 
							--ISNULL((SELECT SUM(HRS_POSTED) FROM #JOBS_TIME_POSTED JTP WHERE JTP.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND JTP.MONTH_OF_YEAR = #EMP_AVAILABILITY.MONTH_OF_YEAR GROUP BY JTP.EMP_CODE,JTP.MONTH_OF_YEAR),0) ELSE 0 END)  AS HRS_ASSIGNED_TASK,
					CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS,	
        			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,  
			        CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		            0 AS IS_FIRST_CHOICE,
					ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
				 AND #EMP_AVAILABILITY.MONTH_OF_YEAR BETWEEN DATEPART(mm,#MY_DATA.TASK_START_DATE) AND DATEPART(mm,#MY_DATA.JOB_REVISED_DATE)
				 AND RED_FLAG = 1 AND REC_TYPE = 'T'
					GROUP BY EMP_CODE),0) AS OVER_BOOKED,
					((CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))  
							+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT MONTH_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0)) / CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))) * 100 AS PERCENT_UTIL
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,MONTH_OF_YEAR
		        ORDER BY MONTH_OF_YEAR;
		        
        END
        IF @SUMMARY_LEVEL = 4 --SUM BY YEAR
        BEGIN
        	
          	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0 THEN CAST(SUM(A.HRS_ASSIGNED_TASK)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,
		        0 AS IS_FIRST_CHOICE,EMPLOYEE.DEF_TRF_ROLE
        	FROM	
        	    (		
		        SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        [YEAR],
			        SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
			        SUM(HRS_AVAIL) AS HRS_AVAIL,
			        SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK, 
			        SUM(HRS_APPTS) AS HRS_APPTS,  
			        SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,[YEAR]
        	    )AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
        	    
               	GROUP BY A.EMP_CODE,   A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC,EMPLOYEE.DEF_TRF_ROLE;

        	
	        	SELECT DISTINCT [YEAR] AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR];
        	
		        SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        [YEAR],
			        CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			        CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.00) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			        CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
			        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK, 
        			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
			        CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		        0 AS IS_FIRST_CHOICE,
				ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
				 AND #EMP_AVAILABILITY.[YEAR] BETWEEN DATEPART(yy,#MY_DATA.TASK_START_DATE) AND DATEPART(yy,#MY_DATA.JOB_REVISED_DATE)
				 AND RED_FLAG = 1 AND REC_TYPE = 'T'
					GROUP BY EMP_CODE),0) AS OVER_BOOKED
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,[YEAR]
		        ORDER BY [YEAR];
        END
        
                
        IF @SUMMARY_LEVEL = 6 --SPECIAL MODE FOR JOINING TO TASK ASSIGNMENTS
        BEGIN
	        SELECT 
		        EMP_CODE,
		        SUM(ISNULL(HRS_USED_NON_TASK,0.000000)) AS HRS_USED_NON_TASK,
		        SUM(ISNULL(HRS_AVAIL,0.000000)) AS HRS_AVAIL,
		        SUM(ISNULL(HRS_ASSIGNED_TASK,0.000000)) AS HRS_ASSIGNED_TASK,
			    SUM(ISNULL(HRS_APPTS,0.000000)) AS HRS_APPTS,  
		        SUM(ISNULL(HRS_ASSIGNED_EVENT,0.000000)) AS HRS_ASSIGNED_EVENT,
		        SUM(ISNULL(HRS_BALANCE_AVAIL,0.000000)) AS HRS_BALANCE_AVAIL
	        FROM #EMP_AVAILABILITY
	        GROUP BY EMP_CODE
        END	



  --SELECT @START_DATE, @END_DATE, @START_DATE_MIN, @END_DATE_MAX
    --SELECT * FROM #MY_DATA --ORDER BY EMP_CODE,SORT
													 
 IF @SUMMARY_LEVEL <> 0     
 BEGIN
	        --SELECT * FROM #JOBS WHERE EMP_CODE = 'BIVONS'			

		IF @OMIT_BEGINNING_BALANCE = 1
		BEGIN
			SELECT
				ROW_ID,
				JOB_NUMBER,
				JOB_COMPONENT_NBR,
				FNC_CODE,
				TASK_DESCRIPTION,
				JOB_COMP_DESC,
				TASK_START_DATE,
				JOB_REVISED_DATE,
				EMP_CODE,
				JOB_DESC,
				OFFICE_CODE,
				DP_TM_CODE,
				DEF_TRF_CODE,
				CL_CODE,
				CL_NAME,
				DIV_CODE,
				PRD_CODE,
				SORT,
				0 AS JOB_HRS,
				JOB_HRS AS JB,
				SEQ_NBR,
				EMP_FML_NAME,
				IS_EVENT_TASK,
				CASE WHEN TASK_TOTAL_WORKING_DAYS = 0 THEN NULL ELSE TASK_TOTAL_WORKING_DAYS END AS TASK_TOTAL_WORKING_DAYS,
				ISNULL(HOURS_PER_DAY,0.00) AS HOURS_PER_DAY,
				ISNULL(ADJ_JOB_HRS,0.00) AS ADJ_JOB_HRS,
				REC_TYPE,
				NON_TASK_ID,
				ISNULL(HRS_USED_NON_TASK,0.00) AS HRS_USED_NON_TASK,
				ISNULL(HRS_AVAIL,0.00) AS HRS_AVAIL,
				ISNULL(HRS_ASSIGNED_TASK,0.00) AS HRS_ASSIGNED_TASK,
				ISNULL(HRS_ASSIGNED_EVENT,0.00) AS HRS_ASSIGNED_EVENT,
				ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00) AS TOTAL_HRS_ASSIGNED,
				ISNULL(HRS_BALANCE_AVAIL,0.00) AS HRS_BALANCE_AVAIL,
				ISNULL(HRS_AVAIL,0.00) - ISNULL(HRS_USED_NON_TASK,0.00) - (ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00)) AS VARIANCE,
				STD_HRS_AVAIL, RED_FLAG, HRS_PER_DAY_WITH_ASSN,	ADJ_JOB_HRS_WITH_ASSN, ALERT_ID,
				0 AS HRS_BEGIN,
				0 AS HRS_POSTED,
				0 AS HRS_LEFT,
				SPRINT_ID,
				ISNULL((SELECT ISNULL(ALERT_CAT_ID,0) FROM ALERT A WHERE A.ALERT_ID = #MY_DATA.ALERT_ID),0) AS ALERT_CAT_ID,
				0 - 0 + ISNULL(ADJ_JOB_HRS,0.00) + ISNULL(ADJ_JOB_HRS_NO_WD,0) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END AS DISTRIBUTED_HRS,
                ADJ_JOB_HRS_NO_WD
			 FROM #MY_DATA
			 WHERE
			   ((REC_TYPE <> 'H') AND 
			   ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
				 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE)))
				 OR REC_TYPE = 'ADA' OR REC_TYPE = 'ADHO'
			ORDER BY 
				EMP_CODE,SORT;		
		END
		ELSE 
		BEGIN
			SELECT
				ROW_ID,
				JOB_NUMBER,
				JOB_COMPONENT_NBR,
				FNC_CODE,
				TASK_DESCRIPTION,
				JOB_COMP_DESC,
				TASK_START_DATE,
				JOB_REVISED_DATE,
				EMP_CODE,
				JOB_DESC,
				OFFICE_CODE,
				DP_TM_CODE,
				DEF_TRF_CODE,
				CL_CODE,
				CL_NAME,
				DIV_CODE,
				PRD_CODE,
				SORT,
				HRS_BEGIN AS JOB_HRS,
				JOB_HRS AS JB,
				SEQ_NBR,
				EMP_FML_NAME,
				IS_EVENT_TASK,
				CASE WHEN TASK_TOTAL_WORKING_DAYS = 0 THEN NULL ELSE TASK_TOTAL_WORKING_DAYS END AS TASK_TOTAL_WORKING_DAYS,
				ISNULL(HOURS_PER_DAY,0.00) AS HOURS_PER_DAY,
				ISNULL(ADJ_JOB_HRS,0.00) AS ADJ_JOB_HRS,
				REC_TYPE,
				NON_TASK_ID,
				ISNULL(HRS_USED_NON_TASK,0.00) AS HRS_USED_NON_TASK,
				ISNULL(HRS_AVAIL,0.00) AS HRS_AVAIL,
				ISNULL(HRS_ASSIGNED_TASK,0.00) AS HRS_ASSIGNED_TASK,
				ISNULL(HRS_ASSIGNED_EVENT,0.00) AS HRS_ASSIGNED_EVENT,
				ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00) AS TOTAL_HRS_ASSIGNED,
				ISNULL(HRS_BALANCE_AVAIL,0.00) AS HRS_BALANCE_AVAIL,
				ISNULL(HRS_AVAIL,0.00) - ISNULL(HRS_USED_NON_TASK,0.00) - (ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00)) AS VARIANCE,
				STD_HRS_AVAIL, RED_FLAG, HRS_PER_DAY_WITH_ASSN,	ADJ_JOB_HRS_WITH_ASSN, ALERT_ID,
				HRS_BEGIN,
				HRS_POSTED,
				HRS_LEFT,
				SPRINT_ID,
				ISNULL((SELECT ISNULL(ALERT_CAT_ID,0) FROM ALERT A WHERE A.ALERT_ID = #MY_DATA.ALERT_ID),0) AS ALERT_CAT_ID,
                --CASE WHEN HRS_BEGIN > 0 THEN HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END ELSE ISNULL(ADJ_JOB_HRS,0.00) END AS DISTRIBUTED_HRS
                CASE WHEN (HRS_BEGIN - HRS_POSTED) < 0 AND HRS_BEGIN <> 0 THEN ISNULL(ADJ_JOB_HRS,0.00) + ISNULL(ADJ_JOB_HRS_NO_WD,0) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END 
                WHEN JOB_HRS < HRS_POSTED AND HRS_BEGIN = 0 THEN 0
                WHEN ADJ_JOB_HRS < HRS_POSTED AND HRS_BEGIN = 0 THEN ISNULL(ADJ_JOB_HRS,0.00)
                WHEN HRS_BEGIN > 0 THEN HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + ISNULL(ADJ_JOB_HRS_NO_WD,0) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END 
                ELSE ISNULL(ADJ_JOB_HRS,0.00) + ISNULL(ADJ_JOB_HRS_NO_WD,0) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END END AS DISTRIBUTED_HRS,
                --HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + ISNULL(ADJ_JOB_HRS_NO_WD,0) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END AS DISTRIBUTED_HRS,
                ADJ_JOB_HRS_NO_WD
                --CASE WHEN (HRS_BEGIN - HRS_POSTED) < 0 THEN ISNULL(ADJ_JOB_HRS,0.00) - HRS_BEGIN + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END ELSE HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END END  AS DISTRIBUTED_HRS
                --0 - 0 + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END AS DISTRIBUTED_HRS
				--CASE WHEN HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END < 0 THEN 0 ELSE HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END END AS DISTRIBUTED_HRS
			 FROM #MY_DATA
			 WHERE
			   ((REC_TYPE <> 'H') AND 
			   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
				 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
				   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END)
				 OR REC_TYPE = 'ADA' OR REC_TYPE = 'ADHO' OR HRS_POSTED > 0
			ORDER BY 
				EMP_CODE,SORT;
		END
        
		    
--Total Jobs Due (0)--
CREATE TABLE #TMP( CT decimal(15,2) NULL)
SET @sql = '' 
SELECT @sql = 'INSERT INTO #TMP '
SELECT @sql = @sql + ' SELECT COUNT(JOB_COMPONENT.JOB_COMPONENT_NBR) '

SELECT @sql_from = ' FROM JOB_COMPONENT 
		INNER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
		LEFT OUTER JOIN JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER
		                      AND JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR '

SELECT @sql_where = ' WHERE (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
			AND  JOB_COMPONENT.JOB_FIRST_USE_DATE between ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND ''' + CAST(@END_DATE AS VARCHAR(12)) + '''
			AND JOB_TRAFFIC.TRF_CODE IS NOT NULL '

if @Restrictions > 0	
	BEGIN
	  SELECT @sql_from = @sql_from + ' INNER JOIN SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE 
	  		AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE 
	  		AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE '

	  SELECT @sql_where = @sql_where + ' AND UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''') AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL) '
	END

if @RestrictionsEmp > 0	
	BEGIN
	  SELECT @sql_from = @sql_from + ' INNER JOIN SEC_EMP ON JOB_COMPONENT.EMP_CODE = SEC_EMP.EMP_CODE '

	  SELECT @sql_where = @sql_where + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''')'
	END
					
IF @RestrictionsOffice > 0
BEGIN
	SET @sql_from = @sql_from  + ' INNER JOIN EMP_OFFICE ON JOB_LOG.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
END

IF @OfficeCode  <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.OFFICE_CODE = ''' + @OfficeCode + ''''

IF @ClientCode  <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.CL_CODE = ''' + @ClientCode + ''''

IF @DivisionCode <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.DIV_CODE = ''' + @DivisionCode + ''''

IF @ProductCode  <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.PRD_CODE = ''' + @ProductCode + ''''

IF @JobNum <> '' 
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.JOB_NUMBER = ''' + @JobNum + ''''

IF @JobComp  <> '' 
	SELECT @sql_where = @sql_where + ' AND JOB_COMPONENT.JOB_COMPONENT_NBR = ''' + @JobComp + ''''
	
IF @Manager <> ''
	  SELECT @sql_where = @sql_where + ' AND JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''' '

	
--IF @EmpCode <> ''  DO NOT apply employee filter in summary
--	SELECT @sql_where = @sql_where + ' AND JOB_COMPONENT.EMP_CODE = ''' + @EmpCode + ''''

 
SELECT @sql = @sql + @sql_from + @sql_where

EXEC(@sql)

SELECT @totaljobsdue = CT FROM #TMP


--Addtional sql
DECLARE @TOTAL_WORKING_HOURS AS DECIMAL(18,6), @EMP_COUNT AS INTEGER
    SET @TOTAL_WORKING_HOURS = 0.00
CREATE TABLE #ONE_VAR 
(
VAL						DECIMAL(18,6) NULL
)

	SET @sql = ''
	SELECT @sql = @sql + '
        INSERT INTO #ONE_VAR
         SELECT SUM(HOURS)        FROM  EMP_NON_TASKS WITH(NOLOCK)  INNER JOIN
                              EMPLOYEE WITH(NOLOCK) ON EMP_NON_TASKS.EMP_CODE = EMPLOYEE.EMP_CODE 
							  INNER JOIN EMP_NON_TASKS_EMPS ON EMP_NON_TASKS.NON_TASK_ID = EMP_NON_TASKS_EMPS.NON_TASK_ID
							  INNER JOIN
												  TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY' 
        IF @RestrictionsEmp > 0 
              SELECT @sql = @sql + ' INNER JOIN SEC_EMP ON EMP_NON_TASKS.EMP_CODE = SEC_EMP.EMP_CODE '
        SELECT @sql = @sql + ' WHERE '
        SELECT @sql = @sql + ' (EMP_NON_TASKS.START_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + '''' 
        SELECT @sql = @sql + ' OR EMP_NON_TASKS.END_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + ''')' 
		SELECT @sql = @sql + ' AND ((TIME_CATEGORY.VAC_SICK_FLAG NOT IN (1, 2, 3) OR TIME_CATEGORY.VAC_SICK_FLAG IS NULL ))'
        SELECT @sql = @sql + ' AND EMP_NON_TASKS.ALL_DAY = 1 AND EMP_NON_TASKS.TYPE = ''A'''  


        IF @EMP_CODE  <> '' AND @EMP_CODE <> '%'
	        SELECT @sql = @sql + ' AND EMP_NON_TASKS.EMP_CODE = ''' + @EMP_CODE + '''' 

        IF @EMP_LIST  <> '' AND (@EMP_CODE = '%' OR @EMP_CODE = '')
		    BEGIN
			    SELECT @sql = @sql + ' AND EMP_NON_TASKS.EMP_CODE IN ('+ @EMP_LIST + ') '
		    END
		IF @DEPTS <> ''
		BEGIN
			SELECT @sql = @sql + ' AND (EMPLOYEE.DP_TM_CODE IN('+ @DEPTS +')) '
		END
    		

        IF @RestrictionsEmp > 0 
          SELECT @sql = @sql + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''')'

        EXEC(@sql)
SELECT @TOTAL_WORKING_HOURS = @TOTAL_WORKING_HOURS + ISNULL(VAL,0.000000) FROM #ONE_VAR;


DELETE FROM #ONE_VAR;
SET @sql = '';
IF @EMP_CODE  <> '' AND @EMP_CODE <> '%'
BEGIN
	SET @EMP_COUNT = 1;
END
IF @EMP_LIST  <> '' AND (@EMP_CODE = '%' OR @EMP_CODE = '')
BEGIN
	SET @sql = 'INSERT INTO #ONE_VAR SELECT COUNT(1) FROM EMPLOYEE WHERE EMP_CODE IN (' + @EMP_LIST + ');'
	EXEC(@sql)
	SELECT @EMP_COUNT = ISNULL(VAL,0.000000) FROM #ONE_VAR;
END
IF @DEPTS <> ''
BEGIN
	SET @sql = 'INSERT INTO #ONE_VAR SELECT COUNT(1) FROM EMPLOYEE WHERE EMPLOYEE.DP_TM_CODE IN (' + @DEPTS + ');'
	EXEC(@sql)
	SELECT @EMP_COUNT = ISNULL(VAL,0.000000) FROM #ONE_VAR;
	
END

DELETE FROM #ONE_VAR;
SET @sql = '';
SELECT @sql = @sql + '
    INSERT INTO #ONE_VAR
     SELECT SUM(HOURS) FROM EMP_NON_TASKS WITH(NOLOCK)' 
    SELECT @sql = @sql + ' WHERE '
    SELECT @sql = @sql + ' (EMP_NON_TASKS.START_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + '''' 
    SELECT @sql = @sql + ' OR EMP_NON_TASKS.END_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + ''')' 
    SELECT @sql = @sql + ' AND EMP_NON_TASKS.ALL_DAY = 0 AND EMP_NON_TASKS.TYPE = ''H'''  
EXEC(@sql)
--multiply part day holidays by number of emps for search:
IF ISNULL(@EMP_COUNT,0) > 0
	BEGIN
		SELECT @TOTAL_WORKING_HOURS = @TOTAL_WORKING_HOURS - (ISNULL(VAL,0.000000) * @EMP_COUNT) FROM #ONE_VAR;
	END
ELSE
	BEGIN
		SELECT @TOTAL_WORKING_HOURS = @TOTAL_WORKING_HOURS - ISNULL(VAL,0.000000) FROM #ONE_VAR;
	END



DROP TABLE #ONE_VAR;    

DECLARE @SHOW_UNASSIGNED SMALLINT
		IF @EMP_CODE <> ''
			SET @SHOW_UNASSIGNED = 0
		ELSE
			SET @SHOW_UNASSIGNED = 1
		    
		
		SELECT @totaljobsdue AS TOTAL_JOB_DUE, SUM(STD_HRS_AVAIL) + @TOTAL_WORKING_HOURS AS STD_HRS_AVAIL,
		 (SELECT SUM(JOB_HRS) FROM #MY_DATA WHERE REC_TYPE = 'A' OR REC_TYPE = 'ADA') AS APPT_HRS,
		 (SELECT SUM(JOB_HRS) FROM #MY_DATA WHERE REC_TYPE = 'ADHO' OR REC_TYPE = 'AHO') AS HRS_OFF,
		 (SELECT SUM(ADJ_JOB_HRS) FROM #MY_DATA) AS HRS_ASSIGNED_TASK, @SHOW_UNASSIGNED AS SHOW_UNASSIGNED FROM #EMP_AVAILABILITY    
		    
		SELECT 
			#EMP_AVAILABILITY.EMP_CODE, 
			ISNULL(EMPLOYEE.EMP_FNAME+' ','')+ISNULL(EMPLOYEE.EMP_MI+'. ','')+ISNULL(EMPLOYEE.EMP_LNAME,'') AS EMP_FML_NAME,
			NULL AS MIN_DATE, 
			NULL AS MAX_DATE,
			ISNULL(SUM(STD_HRS_AVAIL),00.000000) AS STD_HRS_AVAIL,
			ISNULL((SELECT SUM(JOB_HRS) FROM #MY_DATA WHERE (REC_TYPE = 'ADHO' OR REC_TYPE = 'AHO') AND #EMP_AVAILABILITY.EMP_CODE = #MY_DATA.EMP_CODE),00.000000) AS HRS_OFF,
			ISNULL((SELECT SUM(JOB_HRS) FROM #MY_DATA WHERE (REC_TYPE = 'A' OR REC_TYPE = 'ADA') AND #EMP_AVAILABILITY.EMP_CODE = #MY_DATA.EMP_CODE),00.000000) AS APPT_HRS,
			ISNULL((SELECT CASE WHEN COUNT(#MY_DATA.RED_FLAG) > 0 THEN SUM(ADJ_JOB_HRS_WITH_ASSN) ELSE SUM(ADJ_JOB_HRS) END FROM #MY_DATA WHERE #EMP_AVAILABILITY.EMP_CODE = #MY_DATA.EMP_CODE AND #MY_DATA.JOB_NUMBER = @PSWL_JOB_NUMBER AND
								#MY_DATA.JOB_COMPONENT_NBR = @PSWL_JOB_COMPONENT_NBR),00.000000) AS ADJ_HRS_ASSIGNED_TASK,
			ISNULL((SELECT SUM(ADJ_JOB_HRS) FROM #MY_DATA WHERE #EMP_AVAILABILITY.EMP_CODE = #MY_DATA.EMP_CODE AND (#MY_DATA.JOB_NUMBER <> @PSWL_JOB_NUMBER)),00.000000) AS ADJ_HRS_ASSIGNED_TASK_OTHER,
			((ISNULL(SUM(STD_HRS_AVAIL),00.000000) + ISNULL((SELECT SUM(JOB_HRS) FROM #MY_DATA WHERE (REC_TYPE = 'ADHO' OR REC_TYPE = 'AHO') AND #EMP_AVAILABILITY.EMP_CODE = #MY_DATA.EMP_CODE),00.000000)  + 
					ISNULL((SELECT SUM(JOB_HRS) FROM #MY_DATA WHERE (REC_TYPE = 'A' OR REC_TYPE = 'ADA') AND #EMP_AVAILABILITY.EMP_CODE = #MY_DATA.EMP_CODE),00.000000))  - 
					ISNULL((SELECT CASE WHEN COUNT(#MY_DATA.RED_FLAG) > 0 THEN SUM(ADJ_JOB_HRS_WITH_ASSN) ELSE SUM(ADJ_JOB_HRS) END FROM #MY_DATA WHERE #EMP_AVAILABILITY.EMP_CODE = #MY_DATA.EMP_CODE),00.000000)) AS VARIANCE
	    FROM #EMP_AVAILABILITY INNER JOIN EMPLOYEE ON #EMP_AVAILABILITY.EMP_CODE = EMPLOYEE.EMP_CODE
		GROUP BY #EMP_AVAILABILITY.EMP_CODE,ISNULL(EMPLOYEE.EMP_FNAME+' ','')+ISNULL(EMPLOYEE.EMP_MI+'. ','')+ISNULL(EMPLOYEE.EMP_LNAME,'')
		ORDER BY #EMP_AVAILABILITY.EMP_CODE	

		SELECT EMP_CODE, COUNT(RED_FLAG) AS OVER_BOOKED FROM #MY_DATA
		WHERE RED_FLAG = 1 AND REC_TYPE = 'T'
		GROUP BY EMP_CODE
		
        DROP TABLE #TMP

 END  

		
        DROP TABLE #EMP_AVAILABILITY;
		DROP TABLE #EMP_ACTUALIZATION;
        DROP TABLE #DAY_RANGE;
        DROP TABLE #EMP_LIST;
        DROP TABLE #WORK_DAY;
        DROP TABLE #JOBS;
        DROP TABLE #JOBS_TIME_POSTED;
		DROP TABLE #ASSIGNMENTS;
        DROP TABLE #MY_DATA;
/*============== QUERY ==============*/
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
