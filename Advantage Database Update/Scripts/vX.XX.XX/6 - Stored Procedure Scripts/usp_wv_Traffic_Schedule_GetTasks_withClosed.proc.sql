CREATE PROCEDURE [dbo].[usp_wv_Traffic_Schedule_GetTasks_withClosed]
        @JobNum AS INT,
        @JobCompNum AS INT,
        @Sort VARCHAR(10) = '',
        @USER_ID VARCHAR(100),
        @EMP_CODE AS VARCHAR(6) = '',
        @TASK_CODE AS VARCHAR(10) = '',
        @ROLE_CODE AS VARCHAR(6) = '',
        @IncludeCompletedTasks AS CHAR(1),
        @IncludeOnlyPendingTasks AS CHAR(1),
        @ExcludeProjectedTasks AS CHAR(1),
		@CUT_OFF_DATE AS VARCHAR(15)  = ''

AS
DECLARE
        @RESTRICTIONS SMALLINT,
        @USE_VIEW SMALLINT,
        @SQL NVARCHAR(4000),
        @paramlist NVARCHAR(4000),
		@SCHEDULE_CALC BIT,
		@VAR_SQL VARCHAR(8000)
		
		SELECT @SCHEDULE_CALC = CONVERT(BIT, ISNULL(SCHEDULE_CALC, 0)) FROM dbo.JOB_TRAFFIC WHERE JOB_NUMBER = @JobNum AND JOB_COMPONENT_NBR = @JobCompNum

        SELECT @RESTRICTIONS = ISNULL(COUNT(1),0) FROM SEC_CLIENT WHERE UPPER(USER_ID) = UPPER(@USER_ID)

        IF DATALENGTH(@EMP_CODE) > 0-- OR DATALENGTH(@TASK_CODE) > 0 OR DATALENGTH(@ROLE_CODE) > 0 
            BEGIN
                SET @USE_VIEW = 1
            END
        ELSE
            BEGIN           
	            SET @USE_VIEW = 0
            END

        DECLARE 
        @SEQ_TABLE  TABLE (SEQ_NBR SMALLINT)

        IF @USE_VIEW = 1
        BEGIN
            INSERT INTO @SEQ_TABLE(SEQ_NBR)
            SELECT DISTINCT SEQ_NBR AS SEQ_NBR
            FROM         JOB_TRAFFIC_DET_EMPS WITH(NOLOCK)
            WHERE     (JOB_NUMBER = @JobNum) AND (JOB_COMPONENT_NBR = @JobCompNum) AND (EMP_CODE = @EMP_CODE)
        END
        --SELECT * FROM @SEQ_TABLE




SET @SQL = '
SELECT JOB_TRAFFIC_DET.ROWID, JOB_TRAFFIC_DET.JOB_NUMBER, JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, JOB_TRAFFIC_DET.SEQ_NBR, 
JOB_TRAFFIC_DET.FNC_CODE AS TASK_CODE, JOB_TRAFFIC_DET.TASK_DESCRIPTION, JOB_TRAFFIC_DET.TASK_STATUS, 
JOB_TRAFFIC_DET.EMP_CODE, JOB_TRAFFIC_DET.FNC_EST, JOB_TRAFFIC_DET.TASK_START_DATE, JOB_TRAFFIC_DET.JOB_REVISED_DATE, 
JOB_TRAFFIC_DET.JOB_COMPLETED_DATE, 
JOB_TRAFFIC_DET.JOB_DUE_DATE, JOB_TRAFFIC_DET.REVISED_DUE_TIME, 
JOB_TRAFFIC_DET.TEMP_COMP_DATE AS TEMP_COMP_DATE, 
ISNULL(JOB_TRAFFIC_DET.TRAFFIC_PHASE_ID, 0) AS TRAFFIC_PHASE_ID, TRAFFIC_PHASE.PHASE_ORDER, TRAFFIC_PHASE.PHASE_DESC, 
JOB_TRAFFIC_DET.JOB_ORDER, JOB_TRAFFIC_DET.JOB_DAYS, JOB_TRAFFIC_DET.JOB_HRS, JOB_TRAFFIC_DET.DUE_TIME, 
JOB_TRAFFIC_DET.MILESTONE, ''1'' AS PREDECESSOR, ISNULL(JOB_TRAFFIC_DET.DUE_DATE_LOCK, 0) AS DUE_DATE_LOCK, 
CAST(JOB_TRAFFIC_DET.FNC_COMMENTS AS VARCHAR(4000)) AS FNC_COMMENTS, 
CAST(JOB_TRAFFIC_DET.DUE_DATE_COMMENTS AS VARCHAR(4000)) AS DUE_DATE_COMMENTS, 
CAST(JOB_TRAFFIC_DET.REV_DATE_COMMENTS AS VARCHAR(4000)) AS REV_DATE_COMMENTS, 
ISNULL(SUM(JOB_TRAFFIC_DET_EMPS.HOURS_ALLOWED), 0) AS DISPERSED_HOURS, JOB_TRAFFIC_DET.TRF_ROLE,
JOB_TRAFFIC_DET.PARENT_TASK_SEQ, JOB_TRAFFIC_DET.GRID_ORDER, HT.[LEVEL]
FROM JOB_COMPONENT WITH(NOLOCK) INNER JOIN 
JOB_TRAFFIC_DET WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC_DET.JOB_NUMBER AND 
JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET.JOB_COMPONENT_NBR INNER JOIN 
JOB_LOG WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER LEFT OUTER JOIN 
JOB_TRAFFIC_DET_EMPS WITH(NOLOCK) ON JOB_TRAFFIC_DET.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND 
JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND 
JOB_TRAFFIC_DET.SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR LEFT OUTER JOIN 
TRAFFIC_PHASE WITH(NOLOCK) ON JOB_TRAFFIC_DET.TRAFFIC_PHASE_ID = TRAFFIC_PHASE.TRAFFIC_PHASE_ID 
INNER JOIN
	dbo.advtf_traffic_schedule_GetHierarchyDates(' + CAST(@JobNum AS VARCHAR) + ', ' + CAST(@JobCompNum AS VARCHAR)+') HT ON HT.JOB_NUMBER = JOB_TRAFFIC_DET.JOB_NUMBER AND
																															 HT.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET.JOB_COMPONENT_NBR AND
																															 HT.SEQ_NBR = JOB_TRAFFIC_DET.SEQ_NBR'
IF DATALENGTH(@ROLE_CODE) > 0 
	BEGIN
		SET @SQL = @SQL + ' LEFT OUTER JOIN TASK_TRAFFIC_ROLE  WITH(NOLOCK)ON JOB_TRAFFIC_DET.FNC_CODE = TASK_TRAFFIC_ROLE.TRF_CODE  '
	END
IF @RESTRICTIONS > 0
BEGIN
	SET @SQL = @SQL + ' INNER JOIN SEC_CLIENT WITH(NOLOCK) ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND 
	JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE '
END
SET @SQL = @SQL + ' 
WHERE (JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = @JobCompNum) AND 
(JOB_TRAFFIC_DET.JOB_NUMBER = @JobNum) AND 1=1 '
IF @RESTRICTIONS > 0
BEGIN
	SET @SQL = @SQL +  'AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(@USER_ID)) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL) '
END
IF DATALENGTH(@TASK_CODE) > 0 
	BEGIN
		SET @SQL = @SQL + ' AND JOB_TRAFFIC_DET.FNC_CODE = @TASK_CODE '
	END	
IF DATALENGTH(@ROLE_CODE) > 0 
	BEGIN
		SET @SQL = @SQL + ' AND TASK_TRAFFIC_ROLE.ROLE_CODE  = @ROLE_CODE '
	END   
IF DATALENGTH(@EMP_CODE) > 0 
	BEGIN
		SET @SQL = @SQL + ' AND JOB_TRAFFIC_DET_EMPS.EMP_CODE = @EMP_CODE '
	END   
IF @IncludeOnlyPendingTasks = 'Y'
	BEGIN
		SELECT @SQL = @SQL + ' AND JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NOT NULL '
		--OVERRIDE COMPLETED ISSUE 499
		SET @IncludeCompletedTasks = 'N'
	END								

IF @IncludeCompletedTasks = 'N'
	BEGIN
		SELECT @SQL = @SQL + ' AND JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL '
	END	
IF @ExcludeProjectedTasks = 'Y'
	BEGIN
		SELECT @SQL = @SQL + ' AND (JOB_TRAFFIC_DET.TASK_STATUS <> ''P'' OR JOB_TRAFFIC_DET.TASK_STATUS IS NULL) '
	END	  
IF DATALENGTH(@CUT_OFF_DATE) > 0
BEGIN
	SET @SQL = @SQL + ' AND (NOT (JOB_TRAFFIC_DET.JOB_REVISED_DATE IS NULL)) AND (JOB_TRAFFIC_DET.JOB_REVISED_DATE <= CONVERT(DATETIME, ''' + @CUT_OFF_DATE +   ' 23:59:00'', 102)) '
END  
SET @SQL = @SQL + ' 
GROUP BY JOB_TRAFFIC_DET.ROWID, JOB_TRAFFIC_DET.JOB_NUMBER, JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, JOB_TRAFFIC_DET.SEQ_NBR, 
JOB_TRAFFIC_DET.FNC_CODE, JOB_TRAFFIC_DET.TASK_DESCRIPTION, JOB_TRAFFIC_DET.TASK_STATUS, JOB_TRAFFIC_DET.FNC_EST, 
JOB_TRAFFIC_DET.TASK_START_DATE, JOB_TRAFFIC_DET.JOB_REVISED_DATE, JOB_TRAFFIC_DET.REVISED_DUE_TIME, 
JOB_TRAFFIC_DET.EMP_CODE, JOB_TRAFFIC_DET.JOB_COMPLETED_DATE, JOB_TRAFFIC_DET.TEMP_COMP_DATE, 
CAST(JOB_TRAFFIC_DET.FNC_COMMENTS AS VARCHAR(4000)), JOB_TRAFFIC_DET.TRAFFIC_PHASE_ID, TRAFFIC_PHASE.PHASE_ORDER, 
TRAFFIC_PHASE.PHASE_DESC, JOB_TRAFFIC_DET.JOB_ORDER, JOB_TRAFFIC_DET.JOB_DAYS, JOB_TRAFFIC_DET.DUE_DATE_LOCK, 
CAST(JOB_TRAFFIC_DET.DUE_DATE_COMMENTS AS VARCHAR(4000)), CAST(JOB_TRAFFIC_DET.REV_DATE_COMMENTS AS VARCHAR(4000)), 
JOB_TRAFFIC_DET.JOB_HRS, JOB_TRAFFIC_DET.DUE_TIME, JOB_TRAFFIC_DET.MILESTONE, JOB_TRAFFIC_DET.JOB_DUE_DATE, JOB_TRAFFIC_DET.PARENT_TASK_SEQ, JOB_TRAFFIC_DET.GRID_ORDER, HT.[LEVEL],HT.ROW_ORDER, '

IF @RESTRICTIONS > 0
BEGIN
	SET @SQL = @SQL + ' SEC_CLIENT.USER_ID, '
END
SET @SQL = @SQL + ' 
JOB_TRAFFIC_DET.TRF_ROLE '
IF DATALENGTH(@ROLE_CODE) > 0 
	BEGIN
		SET @SQL = @SQL + ' , TASK_TRAFFIC_ROLE.ROLE_CODE '
	END
	
--IF @Sort = 'startdue'
--	BEGIN
--		SET @SQL = @SQL + '
--		ORDER BY JOB_TRAFFIC_DET.TASK_START_DATE,  JOB_TRAFFIC_DET.JOB_DUE_DATE
--		'
--	END
--ELSE
--	BEGIN	--DEFAULT SORT
--		SET @SQL = @SQL + '
--		ORDER BY JOB_TRAFFIC_DET.JOB_ORDER ASC, JOB_TRAFFIC_DET.JOB_REVISED_DATE ASC, JOB_TRAFFIC_DET.SEQ_NBR ASC
--		'
--	END

	
--SORT

IF @SCHEDULE_CALC = 1 
BEGIN
	SET @SQL = @SQL + '
	ORDER BY
		ISNULL(HT.ROW_ORDER, JOB_TRAFFIC_DET.JOB_ORDER) ASC,
		ISNULL(JOB_TRAFFIC_DET.GRID_ORDER, JOB_TRAFFIC_DET.JOB_ORDER) ASC,
		ISNULL(JOB_TRAFFIC_DET.GRID_ORDER, JOB_TRAFFIC_DET.SEQ_NBR) ASC
	'
END
ELSE
BEGIN
	SET @SQL = @SQL + '
	ORDER BY
		JOB_TRAFFIC_DET.JOB_ORDER ASC,
		ISNULL(JOB_TRAFFIC_DET.GRID_ORDER, JOB_TRAFFIC_DET.SEQ_NBR) ASC
	'

END

--IF @Sort = 'startdue'
--	BEGIN
--		SET @SQL = @SQL + '
--		ORDER BY JOB_TRAFFIC_DET.TASK_START_DATE,  JOB_TRAFFIC_DET.JOB_DUE_DATE
--		'
--	END
--IF @Sort = 'phase'
--	BEGIN
--		SET @SQL = @SQL + '
--		ORDER BY TRAFFIC_PHASE.PHASE_ORDER ASC, JOB_TRAFFIC_DET.JOB_ORDER ASC, JOB_TRAFFIC_DET.JOB_REVISED_DATE ASC, JOB_TRAFFIC_DET.SEQ_NBR ASC
--		'
--	END
--IF @Sort = 'order'
--	BEGIN
--		SET @SQL = @SQL + '
--		ORDER BY JOB_TRAFFIC_DET.JOB_ORDER ASC, JOB_TRAFFIC_DET.JOB_REVISED_DATE ASC, JOB_TRAFFIC_DET.SEQ_NBR ASC
--		'
--	END
--IF @Sort = ''
--	BEGIN
--		SET @SQL = @SQL + '
--		ORDER BY JOB_TRAFFIC_DET.JOB_ORDER ASC, JOB_TRAFFIC_DET.JOB_REVISED_DATE ASC, JOB_TRAFFIC_DET.SEQ_NBR ASC
--		'
--	END
	
	
	
	
--CASE
--WHEN @Sort = 'startdue' THEN
--WHEN @Sort = 'phase' THEN
--WHEN @Sort = 'order' THEN
--ELSE
--END



--PRINT @SQL
SELECT @paramlist = '@JobNum int, @JobCompNum int, @Sort VARCHAR(10), @USER_ID VARCHAR(100),@EMP_CODE VARCHAR(6), @TASK_CODE VARCHAR(10), @ROLE_CODE VARCHAR(6)'
EXEC sp_executesql @SQL, @paramlist, @JobNum, @JobCompNum, @Sort, @USER_ID,@EMP_CODE, @TASK_CODE, @ROLE_CODE
