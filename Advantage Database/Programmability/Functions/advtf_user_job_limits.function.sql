IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[advtf_user_job_limits]') AND xtype IN (N'FN', N'IF', N'TF'))
	DROP FUNCTION [dbo].[advtf_user_job_limits]
GO

CREATE FUNCTION [dbo].[advtf_user_job_limits] (
	@UserCode VARCHAR(100)
) RETURNS TABLE
RETURN (
	SELECT
		JOB_LOG.CL_CODE,
		JOB_LOG.DIV_CODE,
		JOB_LOG.PRD_CODE,
		SEC_CLIENT.TIME_ENTRY,
		JOB_LOG.JOB_NUMBER
	FROM
		dbo.JOB_LOG INNER JOIN
		dbo.advtf_employee_office_limits((SELECT EMP_CODE FROM dbo.SEC_USER WHERE UPPER(USER_CODE) = UPPER(@UserCode))) EO ON JOB_LOG.OFFICE_CODE = EO.OFFICE_CODE LEFT OUTER JOIN
		(SELECT	
			CL_CODE,
			DIV_CODE,
			PRD_CODE,
			TIME_ENTRY
		 FROM
			dbo.SEC_CLIENT
		 WHERE
			UPPER([USER_ID]) = UPPER(@UserCode)) SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND
															   JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND
															   JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE LEFT OUTER JOIN
		(SELECT
			IS_LIMITED = CONVERT(BIT, COUNT(1))
		 FROM
			dbo.SEC_CLIENT
		 WHERE 
			UPPER([USER_ID]) = UPPER(@UserCode)) CDP_LIMITS ON 1 = 1
	WHERE
		(CDP_LIMITS.IS_LIMITED = 0 OR 
		 SEC_CLIENT.CL_CODE IS NOT NULL)
)

GO


