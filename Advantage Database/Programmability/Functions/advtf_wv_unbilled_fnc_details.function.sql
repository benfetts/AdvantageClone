if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[advtf_wv_unbilled_fnc_details]') and xtype in (N'FN', N'IF', N'TF'))
drop function [dbo].[advtf_wv_unbilled_fnc_details]
GO
CREATE FUNCTION [dbo].[advtf_wv_unbilled_fnc_details]
(
	@BA_BATCH_ID AS INTEGER,	
	@BA_ID AS INTEGER,
	@BA_DTL_ID AS INTEGER,
	@JOB_NUMBER AS INTEGER,
	@JOB_COMPONENT_NBR AS INTEGER,
	@FNC_CODE AS VARCHAR(6),
	@TEMP_DATE_CUTOFF SMALLDATETIME
)

RETURNS @TBL_ITEM_LEVEL TABLE
(
	[BA_ITEM_ID] [int]  NOT NULL ,
	[BA_DTL_ID] [int] NOT NULL ,
	[REC_TYPE] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CS_AS NOT NULL ,
	[REC_ID] [int] NULL ,
	[NAME]			varchar(100) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
	[ITEM_DATE]	smalldatetime NULL,
	[QTY_HRS]			decimal(14,2) NULL,
	[VERSION_ID]	smallint NULL, --THIS IS NOW PULLING FROM BEN'S VERSION_SEQ FIELD
	[INV_NBR]			varchar(60) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
	[SOURCE]			varchar(10) COLLATE SQL_Latin1_General_CP1_CS_AS NOT NULL,
	[APPROVED_AMT] [decimal](15, 2) NULL ,
	[ITEM_COMMENTS] [text] COLLATE SQL_Latin1_General_CP1_CS_AS NULL ,
	[INSTR] [tinyint] NOT NULL ,
	[APPROVAL_COMMENTS] [text] COLLATE SQL_Latin1_General_CP1_CS_AS NULL ,
	[CLIENT_COMMENTS] [text] COLLATE SQL_Latin1_General_CP1_CS_AS NULL ,
	[NET] [decimal](15, 2) NULL ,
	[MARKUP] [decimal](15, 2) NULL ,
	[RESALE_TAX] [decimal](16, 2) NULL ,
	[TOTAL] [decimal](16, 2) NULL,
	--NEW FIELDS FROM BENS SCRIPT ON 20081027
	SEQ_NBR			int NULL,
	BA_ID			integer NULL,
	UNBILLED_NET	decimal(15,2) NULL, 
	UNBILLED_MU		decimal(15,2) NULL, 	
	UNBILLED_TAX	decimal(15,2) NULL, 
	UNBILLED_NR	decimal(15,2) NULL,  --VENDOR TAX?
	UNBILLED_TOT	decimal(15,2) NULL, 
	PO				decimal(15,2) NULL,
	IS_PREVIOUSLY_APPROVED bit,
	GRP_TEXT VARCHAR(75),
	GROUPING_SEQ INTEGER,
	JOB_VER_DESC VARCHAR(50),
	HAS_AP_DOCUMENT BIT NULL DEFAULT 0,
	AP_DOCUMENT_ID INT NULL DEFAULT -1,
	VAL_TYPE		varchar(20) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
	REC_DTL_ID		integer NULL
)
AS
BEGIN--FUNCTION START
/*=========== QUERY ===========*/
DECLARE
	@DATE_CUTOFF AS SMALLDATETIME,
	@POST_PERIOD AS VARCHAR(6),
	@EXCL_NOBILL AS BIT,
	@EXCL_FEE AS BIT
	
SELECT 
	@DATE_CUTOFF = DATE_CUTOFF,
	@POST_PERIOD = PERIOD_CUTOFF,
	@EXCL_NOBILL = INCL_NB,
	@EXCL_FEE = INCL_FEE
FROM
    BILL_APPR_BATCH	WITH(NOLOCK)
WHERE 
	BA_BATCH_ID = @BA_BATCH_ID;

IF NOT @TEMP_DATE_CUTOFF IS NULL 
BEGIN
	SET @DATE_CUTOFF = @TEMP_DATE_CUTOFF
END
	
IF @EXCL_NOBILL = 1
    BEGIN
        SET @EXCL_NOBILL = 0
    END
ELSE
    BEGIN
        SET @EXCL_NOBILL = 1
    END

	
IF @EXCL_FEE = 1
    BEGIN
        SET @EXCL_FEE = 0
    END
ELSE
    BEGIN
        SET @EXCL_FEE = 1
    END

--INSERT DYNAMIC DATA FROM BEN'S FUNCTION:	
INSERT INTO @TBL_ITEM_LEVEL (
	BA_ITEM_ID,
	BA_DTL_ID,
	REC_TYPE,
	REC_ID,
	[NAME],
	ITEM_DATE,
	QTY_HRS,
	VERSION_ID,
	INV_NBR,
	SOURCE,
	APPROVED_AMT,
	ITEM_COMMENTS,
	INSTR,
	APPROVAL_COMMENTS,
	CLIENT_COMMENTS,
	NET,
	MARKUP,
	RESALE_TAX,
	TOTAL,
	SEQ_NBR,
	BA_ID,
	UNBILLED_NET, 
	UNBILLED_MU, 	
	UNBILLED_TAX, 
	UNBILLED_NR,
	UNBILLED_TOT, 
	PO,
	VAL_TYPE,
	REC_DTL_ID
) 
SELECT 
	-1,
	@BA_DTL_ID,
	FNC_TYPE,
	ITEM_ID,
	[NAME],
	ITEM_DATE,
	QTY_HRS,
	VERSION_SEQ,
	INV_NBR,
	SOURCE,
	0,
	COMMENTS,
	0,
	NULL,
	NULL,
	0,
	0,
	0,
	SUM(ISNULL(UNBILLED_TOT,0)+ISNULL(PO,0)), --total
	SEQ_NBR,
	BA_ID,
	UNBILLED_NET, 
	UNBILLED_MU, 	
	UNBILLED_TAX, 
	UNBILLED_NR,
	UNBILLED_TOT, 
	PO,
	VAL_TYPE,
	REC_DTL_ID
FROM 
	dbo.advtf_prod_unbilled_amts_by_item (@JOB_NUMBER,@JOB_COMPONENT_NBR,@DATE_CUTOFF,@POST_PERIOD, @EXCL_NOBILL, @EXCL_FEE)
WHERE 
	FNC_CODE = @FNC_CODE
GROUP BY
	FNC_TYPE,ITEM_ID,NAME,ITEM_DATE,QTY_HRS,VERSION_SEQ,COMMENTS,INV_NBR,SOURCE,
	SEQ_NBR,
	BA_ID,
	UNBILLED_NET, 
	UNBILLED_MU, 	
	UNBILLED_TAX, UNBILLED_NR,
	UNBILLED_TOT, 
	PO,
	VAL_TYPE,
	REC_DTL_ID;
	
DELETE FROM @TBL_ITEM_LEVEL WHERE TOTAL = 0;	


--UPDATE WITH REAL DATA:
UPDATE @TBL_ITEM_LEVEL
SET 
	BA_ITEM_ID = BILL_APPR_ITEM.BA_ITEM_ID,
	BA_DTL_ID = BILL_APPR_ITEM.BA_DTL_ID,
	APPROVED_AMT = BILL_APPR_ITEM.APPROVED_AMT,
	APPROVAL_COMMENTS = BILL_APPR_ITEM.ITEM_COMMENTS,
	CLIENT_COMMENTS = BILL_APPR_ITEM.CLIENT_COMMENTS,
	INSTR = BILL_APPR_ITEM.INSTR
FROM
	@TBL_ITEM_LEVEL TIL INNER JOIN
	BILL_APPR_ITEM ON TIL.REC_TYPE = BILL_APPR_ITEM.REC_TYPE
	AND TIL.REC_ID = BILL_APPR_ITEM.REC_ID
	AND TIL.BA_DTL_ID = BILL_APPR_ITEM.BA_DTL_ID
	AND TIL.REC_DTL_ID = BILL_APPR_ITEM.REC_DTL_ID;
	
--SELECT 
--*
--FROM 
--	dbo.advtf_prod_unbilled_amts_by_item (@JOB_NUMBER,@JOB_COMPONENT_NBR,@DATE_CUTOFF,@POST_PERIOD)
--WHERE 
--	FNC_CODE = @FNC_CODE;

UPDATE @TBL_ITEM_LEVEL
SET IS_PREVIOUSLY_APPROVED = 0, GRP_TEXT = 'Unapproved', GROUPING_SEQ = -1
WHERE ((BA_ID IS NULL));


UPDATE @TBL_ITEM_LEVEL
SET IS_PREVIOUSLY_APPROVED = 0, GRP_TEXT = 'Current Approval Record', GROUPING_SEQ = 0
WHERE ((BA_ID = @BA_ID));

UPDATE @TBL_ITEM_LEVEL
SET IS_PREVIOUSLY_APPROVED = 1, GRP_TEXT = 'Previously Approved on Approval ID: ' + RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), BA_ID), 6) ,
GROUPING_SEQ = BA_ID
WHERE (BA_ID <> @BA_ID);

UPDATE @TBL_ITEM_LEVEL
SET BA_ID = -1
WHERE (BA_ID IS NULL);
	
--update the instruction and amount of previously approved recs:
--UPDATE @TBL_ITEM_LEVEL
--SET @TBL_ITEM_LEVEL.BA_ITEM_ID = BILL_APPR_ITEM.BA_ITEM_ID
--FROM
--	@TBL_ITEM_LEVEL INNER JOIN
--	BILL_APPR_ITEM ON @TBL_ITEM_LEVEL.REC_TYPE = BILL_APPR_ITEM.REC_TYPE
--	AND @TBL_ITEM_LEVEL.BA_DTL_ID = BILL_APPR_ITEM.BA_DTL_ID
--WHERE @TBL_ITEM_LEVEL.BA_ITEM_ID = -1;

UPDATE @TBL_ITEM_LEVEL
SET APPROVED_AMT = BILL_APPR_ITEM.APPROVED_AMT, INSTR= BILL_APPR_ITEM.INSTR, BA_DTL_ID = BILL_APPR_ITEM.BA_DTL_ID
FROM
	@TBL_ITEM_LEVEL TIL INNER JOIN
	BILL_APPR_ITEM ON TIL.REC_TYPE = BILL_APPR_ITEM.REC_TYPE
	AND TIL.BA_DTL_ID = BILL_APPR_ITEM.BA_DTL_ID
	AND TIL.REC_ID = BILL_APPR_ITEM.REC_ID
	AND TIL.REC_DTL_ID = BILL_APPR_ITEM.REC_DTL_ID
WHERE TIL.BA_ID <> @BA_ID;

UPDATE @TBL_ITEM_LEVEL
SET  JOB_VER_DESC = JOB_VER_HDR.JOB_VER_DESC 
FROM
	@TBL_ITEM_LEVEL TIL INNER JOIN
	JOB_VER_HDR ON TIL.VERSION_ID = JOB_VER_HDR.JOB_VER_SEQ_NBR
WHERE
	 JOB_VER_HDR.JOB_NUMBER = @JOB_NUMBER
	AND JOB_VER_HDR.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR
AND (NOT (TIL.VERSION_ID IS NULL));

--ADD AP DOCUMENT STUFF:
UPDATE 
	@TBL_ITEM_LEVEL
SET 
	HAS_AP_DOCUMENT = 1, 
	AP_DOCUMENT_ID = AP_DOCUMENTS.DOCUMENT_ID
FROM
	@TBL_ITEM_LEVEL TIL INNER JOIN
	AP_DOCUMENTS ON TIL.REC_ID = AP_DOCUMENTS.AP_ID
WHERE
 TIL.REC_TYPE = 'V' AND TIL.SOURCE = 'Actual';

UPDATE @TBL_ITEM_LEVEL SET QTY_HRS  = 0.0 WHERE QTY_HRS IS NULL;
UPDATE @TBL_ITEM_LEVEL SET NET  = 0.0 WHERE NET IS NULL;
UPDATE @TBL_ITEM_LEVEL SET MARKUP  = 0.0 WHERE MARKUP IS NULL;
UPDATE @TBL_ITEM_LEVEL SET RESALE_TAX  = 0.0 WHERE RESALE_TAX IS NULL;
UPDATE @TBL_ITEM_LEVEL SET APPROVED_AMT  = 0.0 WHERE APPROVED_AMT IS NULL;
UPDATE @TBL_ITEM_LEVEL SET ITEM_COMMENTS  = '' WHERE ITEM_COMMENTS IS NULL;
UPDATE @TBL_ITEM_LEVEL SET UNBILLED_NET  = 0.0 WHERE UNBILLED_NET IS NULL;
UPDATE @TBL_ITEM_LEVEL SET UNBILLED_MU  = 0.0 WHERE UNBILLED_MU IS NULL;
UPDATE @TBL_ITEM_LEVEL SET UNBILLED_TAX  = 0.0 WHERE UNBILLED_TAX IS NULL;
UPDATE @TBL_ITEM_LEVEL SET UNBILLED_NR  = 0.0 WHERE UNBILLED_NR IS NULL;
UPDATE @TBL_ITEM_LEVEL SET UNBILLED_TOT  = 0.0 WHERE UNBILLED_TOT IS NULL;
UPDATE @TBL_ITEM_LEVEL SET PO  = 0.0 WHERE PO IS NULL;
UPDATE @TBL_ITEM_LEVEL SET TOTAL  = 0.0 WHERE TOTAL IS NULL;
UPDATE @TBL_ITEM_LEVEL SET GRP_TEXT  = '' WHERE GRP_TEXT IS NULL;
UPDATE @TBL_ITEM_LEVEL SET GROUPING_SEQ  = -2 WHERE GROUPING_SEQ IS NULL;

RETURN
/*=========== QUERY ===========*/

END --FUNCTION END
