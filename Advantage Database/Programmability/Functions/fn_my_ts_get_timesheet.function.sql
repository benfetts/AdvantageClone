IF EXISTS ( SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID( N'[dbo].[fn_my_ts_get_timesheet]' ) AND xtype IN ( N'FN', N'IF', N'TF' ))
BEGIN
	DROP FUNCTION [dbo].[fn_my_ts_get_timesheet]
END
GO
CREATE FUNCTION [dbo].[fn_my_ts_get_timesheet] (
												@EmployeeCode VARCHAR(6), 
												@StartDate SMALLDATETIME,
												@EndDate SMALLDATETIME,
												@SortColumn VARCHAR(35),
												@UserCode VARCHAR(100),
												@EmployeeTimeID INT,
												@EmployeeTimeDetailID INT
												)

RETURNS @TIME_ROWS TABLE 
		(
			ET_ID              INT NOT NULL,
			ET_DTL_ID          INT NOT NULL,
			FNC_CAT            VARCHAR(10) NULL,
			FNC_CAT_DESC VARCHAR(100),
			EMP_HOURS          DECIMAL(9, 3) NOT NULL,
			CL_CODE            VARCHAR(6) NULL,
			DIV_CODE           VARCHAR(6) NULL,
			PRD_CODE           VARCHAR(6) NULL,
			JOB_NUMBER         INT NULL,
			CLIENT_REF         VARCHAR(30) NULL,
			JOB_COMPONENT_NBR  SMALLINT NULL,
			DP_TM_CODE         VARCHAR(4) NULL,
			TIME_TYPE          CHAR(1) NOT NULL,
			EDIT_FLAG          SMALLINT NOT NULL,
			MAX_SEQ            SMALLINT NULL,
			START_TIME         CHAR(4) NULL,
			END_TIME           CHAR(4) NULL,
			EMP_DATE           SMALLDATETIME,
			COMMENTS           TEXT NULL,
			JOB_DESC			VARCHAR(100),
			JOB_COMP_DESC			VARCHAR(100),
			PROD_CAT_CODE      VARCHAR(10) NULL,
			CL_NAME VARCHAR(100),
			DIV_NAME VARCHAR(100),
			PRD_DESCRIPTION VARCHAR(100),
			JOB_PROCESS_CONTRL INT,
			NON_EDIT_MESSAGE VARCHAR(100),
			CANNOT_EDIT_DUE_TO_PROCESS_CONTROL SMALLINT,
			HAS_STOPWATCH INT,
			STOPWATCH_ET_ID INT,
			STOPWATCH_ET_DTL_ID INT,
			COMMENTS_REQ INT,
			DAY_IS_DENIED BIT,
			DAY_IS_APPROVED BIT,
			DAY_IS_PENDING_APPROVAL BIT,
			DAY_POST_PERIOD_CLOSED BIT		,
			CREATE_DATE SMALLDATETIME,
			CLIENT_COMMENT_REQUIRED BIT,
			TS_MISSING_COMMENTS BIT,
			QUOTED				DECIMAL (14,2) NULL,
			ACTUAL				DECIMAL (14,2) NULL,
			QUOTED_HRS			DECIMAL(15,2) NULL,
			ACTUAL_HRS			DECIMAL(15,2) NULL,
			IS_OVER_THRESHOLD	BIT,
			TRF_CODE			VARCHAR(10) NULL,
			ALERT_ID            INT NULL,
			ALERT_SUBJECT			VARCHAR(300) NULL
		)
AS
BEGIN
/*=========== QUERY ===========*/
	DECLARE 
		@RESTRICTED                   INT,
        @RESTRICTED_TO_OWN_TIMESHEET  VARCHAR(1);

	SET @EmployeeTimeID = ISNULL(@EmployeeTimeID, 0);
	SET @EmployeeTimeDetailID = ISNULL(@EmployeeTimeDetailID, 0);

	DECLARE @SEC_USER_ID INT;

	SELECT @RESTRICTED = COUNT(1) FROM SEC_EMP WITH(NOLOCK) WHERE  UPPER(SEC_EMP.[USER_ID]) = UPPER(@UserCode);
	SET @RESTRICTED = ISNULL(@RESTRICTED, 0);

	SELECT  @SEC_USER_ID = SEC_USER_ID FROM  [dbo].[SEC_USER] WITH(NOLOCK) WHERE  UPPER(USER_CODE) = UPPER(@UserCode);

	IF EXISTS(SELECT * FROM [dbo].[SEC_USER_SETTING] WITH(NOLOCK) WHERE SEC_USER_ID = @SEC_USER_ID AND SETTING_CODE = 'SI_DO_OWN_TS' AND STRING_VALUE = 'Y') 
	BEGIN
		SET @RESTRICTED_TO_OWN_TIMESHEET = 'Y';
	END	
	ELSE 
	BEGIN
		SET @RESTRICTED_TO_OWN_TIMESHEET = 'N';
	END

	IF @EmployeeTimeID = 0 AND @EmployeeTimeDetailID = 0
	BEGIN
		IF @RESTRICTED = 0
		BEGIN

			INSERT INTO @TIME_ROWS
			SELECT EMP_TIME_DTL.ET_ID,
				   EMP_TIME_DTL.ET_DTL_ID,
				   NULL,
				   NULL,
				   SUM(EMP_HOURS),
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   'D',
				   0,
				   MAX(SEQ_NBR),
				   NULL,
				   NULL,
				   EMP_DATE,
				   NULL,
				   NULL,
				   NULL,
				   ISNULL(EMP_TIME_DTL.PROD_CAT_CODE, ''),
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   '',
				   0,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   0,
				   0,
				   0,
				   NULL	,
				   EMP_TIME_DTL.DATE_ENTERED,
				   NULL,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,
				   NULL,
				   EMP_TIME_DTL.ALERT_ID,
				   SUBSTRING(A.SUBJECT, 1, 150)
			FROM   EMP_TIME WITH (NOLOCK)
				   INNER JOIN EMP_TIME_DTL WITH (NOLOCK)
						ON  EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
				  LEFT OUTER JOIN ALERT A ON EMP_TIME_DTL.ALERT_ID = A.ALERT_ID
			WHERE  EMP_TIME.EMP_CODE = @EmployeeCode
				   AND EMP_TIME.EMP_DATE >= @StartDate
				   AND EMP_TIME.EMP_DATE <= @EndDate
				   AND (EMP_TIME_DTL.EDIT_FLAG = 0 OR EMP_TIME_DTL.EDIT_FLAG IS NULL)
			GROUP BY
				   EMP_TIME_DTL.ET_ID,
				   EMP_TIME_DTL.ET_DTL_ID,
				   EMP_DATE,
				   EMP_TIME_DTL.PROD_CAT_CODE,
				   DATE_ENTERED,
				   EMP_TIME_DTL.ALERT_ID,
				   SUBSTRING(A.SUBJECT, 1, 150);

		END
		ELSE
		BEGIN

			INSERT INTO @TIME_ROWS
			SELECT EMP_TIME_DTL.ET_ID,
				   EMP_TIME_DTL.ET_DTL_ID,
				   NULL,
				   NULL,
				   SUM(EMP_HOURS),
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   'D',
				   0,
				   MAX(SEQ_NBR),
				   NULL,
				   NULL,
				   EMP_DATE,
				   NULL,
				   NULL,
				   NULL,
	     		   ISNULL(EMP_TIME_DTL.PROD_CAT_CODE, ''),
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   '',
				   0,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   0,
				   0,
				   0,
				   NULL,
				   EMP_TIME_DTL.DATE_ENTERED,
				   NULL,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,  	
				   NULL,
				   EMP_TIME_DTL.ALERT_ID,
				   SUBSTRING(A.SUBJECT, 1, 150)				   		   
			FROM   EMP_TIME WITH (NOLOCK)
				   INNER JOIN EMP_TIME_DTL WITH (NOLOCK)
						ON  EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
				   INNER JOIN [dbo].[advtf_sec_emp] (@UserCode) AS SEC_EMP 
						ON  EMP_TIME.EMP_CODE = SEC_EMP.EMP_CODE
				  LEFT OUTER JOIN ALERT A ON EMP_TIME_DTL.ALERT_ID = A.ALERT_ID
			WHERE  (EMP_TIME.EMP_CODE = @EmployeeCode)
				   AND (EMP_TIME.EMP_DATE >= @StartDate)
				   AND (EMP_TIME.EMP_DATE <= @EndDate)
				   AND (
						   SEC_EMP.EMP_CODE = @EmployeeCode
					   )
				   AND (EMP_TIME_DTL.EDIT_FLAG = 0 OR EMP_TIME_DTL.EDIT_FLAG IS NULL)
			GROUP BY
				   EMP_TIME_DTL.ET_ID,
				   EMP_TIME_DTL.ET_DTL_ID,
				   EMP_TIME.EMP_DATE,
				   EMP_TIME_DTL.PROD_CAT_CODE,
				   DATE_ENTERED,
				   EMP_TIME_DTL.ALERT_ID,
				   SUBSTRING(A.SUBJECT, 1, 150);

		END
	END
	ELSE
	BEGIN
		INSERT INTO @TIME_ROWS
		SELECT EMP_TIME_DTL.ET_ID,
				EMP_TIME_DTL.ET_DTL_ID,
				NULL,
				NULL,
				SUM(EMP_HOURS),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				'D',
				0,
				MAX(SEQ_NBR),
				NULL,
				NULL,
				EMP_DATE,
				NULL,
				NULL,
				NULL,
				ISNULL(EMP_TIME_DTL.PROD_CAT_CODE, ''),
				NULL,
				NULL,
				NULL,
				NULL,
				'',
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				0,
				0,
				0,
				NULL	,
				EMP_TIME_DTL.DATE_ENTERED,
				NULL,
				0,
				0,
				0,
				0,
				0,
				0,  	
				NULL,
				EMP_TIME_DTL.ALERT_ID,
				   SUBSTRING(A.SUBJECT, 1, 150)	 
		FROM   EMP_TIME WITH (NOLOCK)
				INNER JOIN EMP_TIME_DTL WITH (NOLOCK)
					ON  EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
				  LEFT OUTER JOIN ALERT A ON EMP_TIME_DTL.ALERT_ID = A.ALERT_ID
		WHERE  EMP_TIME_DTL.ET_ID = @EmployeeTimeID
			   AND EMP_TIME_DTL.ET_DTL_ID = @EmployeeTimeDetailID
		GROUP BY
				EMP_TIME_DTL.ET_ID,
				EMP_TIME_DTL.ET_DTL_ID,
				EMP_DATE,
				EMP_TIME_DTL.PROD_CAT_CODE,
				DATE_ENTERED,
				EMP_TIME_DTL.ALERT_ID,
				SUBSTRING(A.SUBJECT, 1, 150);
	END

	UPDATE @TIME_ROWS
	SET    FNC_CAT = etd.FNC_CODE,
		   CL_CODE = jl.CL_CODE,
		   DIV_CODE = jl.DIV_CODE,
		   PRD_CODE = jl.PRD_CODE,
		   CLIENT_REF = jl.JOB_CLI_REF,
		   JOB_NUMBER = etd.JOB_NUMBER,
		   JOB_COMPONENT_NBR = etd.JOB_COMPONENT_NBR,
		   DP_TM_CODE = etd.DP_TM_CODE,
		   CL_NAME = CLIENT.CL_NAME,
		   JOB_DESC = jl.JOB_DESC,
		   DIV_NAME = DIVISION.DIV_NAME,
		   PRD_DESCRIPTION = PRODUCT.PRD_DESCRIPTION,
		   JOB_COMP_DESC = JOB_COMPONENT.JOB_COMP_DESC,
		   JOB_PROCESS_CONTRL = JOB_COMPONENT.JOB_PROCESS_CONTRL,
		   CLIENT_COMMENT_REQUIRED = CLIENT.REQ_TIME_COMMENT,
		   TRF_CODE = etd.TRF_CODE
	FROM   EMP_TIME_DTL etd WITH (NOLOCK),
		   JOB_LOG jl WITH (NOLOCK),
		   @TIME_ROWS tr,
		   CLIENT WITH(NOLOCK),
		   DIVISION WITH(NOLOCK),
		   PRODUCT WITH(NOLOCK),
		   JOB_COMPONENT WITH(NOLOCK)
	WHERE  tr.ET_ID = etd.ET_ID
		   AND tr.ET_DTL_ID = etd.ET_DTL_ID
		   AND tr.MAX_SEQ = etd.SEQ_NBR
		   AND etd.JOB_NUMBER = jl.JOB_NUMBER
		   AND jl.CL_CODE = CLIENT.CL_CODE
		   AND jl.CL_CODE = DIVISION.CL_CODE AND jl.DIV_CODE = DIVISION.DIV_CODE
		   AND jl.CL_CODE = PRODUCT.CL_CODE AND jl.DIV_CODE = PRODUCT.DIV_CODE AND jl.PRD_CODE = PRODUCT.PRD_CODE
		   AND etd.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND etd.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR;

	DECLARE @AGENCY_TIME_COMMENTS_REQ SMALLINT
	SELECT @AGENCY_TIME_COMMENTS_REQ = ISNULL(AGENCY.TIME_COMMENTS_REQ, 0) FROM AGENCY;
	IF @AGENCY_TIME_COMMENTS_REQ = 1
	BEGIN
		UPDATE @TIME_ROWS SET CLIENT_COMMENT_REQUIRED = 1;
	END		   

	UPDATE @TIME_ROWS SET CANNOT_EDIT_DUE_TO_PROCESS_CONTROL = 1, NON_EDIT_MESSAGE = 'Process Control does not allow editing'
	WHERE JOB_PROCESS_CONTRL IN (12, 10, 9, 6, 5, 3, 2);	 
	
	-- INDIRECT TIME
	IF @EmployeeTimeID = 0 AND @EmployeeTimeDetailID = 0
	BEGIN
		IF @RESTRICTED = 0
		BEGIN
			INSERT INTO @TIME_ROWS
			SELECT EMP_TIME_NP.ET_ID,
				   EMP_TIME_NP.ET_DTL_ID,
				   CATEGORY,
				   NULL,
				   SUM(EMP_HOURS),
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   DP_TM_CODE,
				   'N',
				   0,
				   NULL,
				   NULL,
				   NULL,
				   EMP_DATE,
				   NULL,
				   NULL,
				   NULL,
				   '',
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   '',
				   0,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   0,
				   0,
				   0,
				   NULL	,
				   EMP_TIME_NP.DATE_ENTERED,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,  	
				   NULL	 ,
				   NULL,
				   NULL
			FROM   EMP_TIME WITH (NOLOCK)
				   INNER JOIN EMP_TIME_NP WITH (NOLOCK)
						ON  EMP_TIME.ET_ID = EMP_TIME_NP.ET_ID
			WHERE  EMP_TIME.ET_ID = EMP_TIME_NP.ET_ID
				   AND EMP_TIME.EMP_CODE = @EmployeeCode
				   AND EMP_TIME.EMP_DATE >= @StartDate
				   AND EMP_TIME.EMP_DATE <= @EndDate
				   AND (EMP_TIME_NP.EDIT_FLAG = 0 OR EMP_TIME_NP.EDIT_FLAG IS NULL)
			GROUP BY
				   EMP_TIME_NP.ET_ID,
				   EMP_TIME_NP.ET_DTL_ID,
				   CATEGORY,
				   DP_TM_CODE,
				   EMP_DATE,
				   DATE_ENTERED;
		END
		ELSE
		BEGIN
			INSERT INTO @TIME_ROWS
			SELECT EMP_TIME_NP.ET_ID,
				   EMP_TIME_NP.ET_DTL_ID,
				   CATEGORY,
				   NULL,
				   SUM(EMP_HOURS),
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   DP_TM_CODE,
				   'N',
				   0,
				   NULL,
				   NULL,
				   NULL,
				   EMP_DATE,
				   NULL,
				   NULL,
				   NULL,
				   '',
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   '',
				   0,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   0,
				   0,
				   0,
				   NULL	,
				   EMP_TIME_NP.DATE_ENTERED,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,
				   0,  	
				   NULL	 ,
				   NULL,
				   NULL
			FROM   EMP_TIME WITH (NOLOCK)
				   INNER JOIN EMP_TIME_NP WITH (NOLOCK)
						ON  EMP_TIME.ET_ID = EMP_TIME_NP.ET_ID
				   INNER JOIN [dbo].[advtf_sec_emp] (@UserCode) AS SEC_EMP
						ON  EMP_TIME.EMP_CODE = SEC_EMP.EMP_CODE
			WHERE  EMP_TIME.ET_ID = EMP_TIME_NP.ET_ID
				   AND EMP_TIME.EMP_CODE = @EmployeeCode
				   AND EMP_TIME.EMP_DATE >= @StartDate
				   AND EMP_TIME.EMP_DATE <= @EndDate
				   AND (EMP_TIME_NP.EDIT_FLAG = 0 OR EMP_TIME_NP.EDIT_FLAG IS NULL)
			GROUP BY
				   EMP_TIME_NP.ET_ID,
				   EMP_TIME_NP.ET_DTL_ID,
				   CATEGORY,
				   DP_TM_CODE,
				   EMP_DATE,
				   DATE_ENTERED;
		END
	END
	ELSE
	BEGIN
		INSERT INTO @TIME_ROWS
		SELECT EMP_TIME_NP.ET_ID,
				EMP_TIME_NP.ET_DTL_ID,
				CATEGORY,
				NULL,
				SUM(EMP_HOURS),
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				DP_TM_CODE,
				'N',
				0,
				NULL,
				NULL,
				NULL,
				EMP_DATE,
				NULL,
				NULL,
				NULL,
				'',
				NULL,
				NULL,
				NULL,
				NULL,
				'',
				0,
				NULL,
				NULL,
				NULL,
				NULL,
				0,
				0,
				0,
				NULL	,
				EMP_TIME_NP.DATE_ENTERED,
				0,
				0,
				0,
				0,
				0,
				0,
				0,  	
				NULL	  ,
				NULL,
				NULL
		FROM   EMP_TIME WITH (NOLOCK)
				INNER JOIN EMP_TIME_NP WITH (NOLOCK)
					ON  EMP_TIME.ET_ID = EMP_TIME_NP.ET_ID
		WHERE  EMP_TIME_NP.ET_ID = @EmployeeTimeID
			   AND EMP_TIME_NP.ET_DTL_ID = @EmployeeTimeDetailID
		GROUP BY
				EMP_TIME_NP.ET_ID,
				EMP_TIME_NP.ET_DTL_ID,
				CATEGORY,
				DP_TM_CODE,
				EMP_DATE,
				DATE_ENTERED;
	END;

	--Get Comments
	UPDATE @TIME_ROWS
	SET    COMMENTS = ct.EMP_COMMENT
	FROM   EMP_TIME_DTL_CMTS ct WITH (NOLOCK),
		   @TIME_ROWS tr
	WHERE  tr.ET_ID = ct.ET_ID
		   AND tr.ET_DTL_ID = ct.ET_DTL_ID;
	UPDATE @TIME_ROWS SET COMMENTS = '' WHERE COMMENTS IS NULL;	   

	UPDATE @TIME_ROWS
	SET    START_TIME = etd.START_TIME,
		   END_TIME = etd.END_TIME
	FROM   EMP_TIME_DTL AS etd WITH (NOLOCK),
		   @TIME_ROWS tr
	WHERE  tr.ET_ID = etd.ET_ID
		   AND tr.ET_DTL_ID = etd.ET_DTL_ID;
	
	-- Check agency and employee approval req flag	   
	DECLARE 
		@TIME_APPR_ACTIVE SMALLINT;
	
	SELECT @TIME_APPR_ACTIVE = ISNULL(TIME_APPR_ACTIVE,0) 
	FROM AGENCY WITH(NOLOCK);
	
	SET @TIME_APPR_ACTIVE = ISNULL(@TIME_APPR_ACTIVE,0);
	IF @EmployeeCode = ''
	BEGIN
		SET @EmployeeCode = NULL;
	END
	IF @TIME_APPR_ACTIVE = 1 AND (NOT @EmployeeCode IS NULL)
	BEGIN
		SELECT @TIME_APPR_ACTIVE = ISNULL(TS_APPR_FLAG, 0)
		FROM EMPLOYEE WITH(NOLOCK) 
		WHERE EMP_CODE = @EmployeeCode;

		--THE EMP TABLE FLAG ACTS AS AN EXEMPTION; NOT INCLUSION
		IF @TIME_APPR_ACTIVE = 1
		BEGIN
			SET @TIME_APPR_ACTIVE = 0
		END
		ELSE
		BEGIN
			SET @TIME_APPR_ACTIVE = 1
		END
				
	END
	
	SET @TIME_APPR_ACTIVE = ISNULL(@TIME_APPR_ACTIVE,0);
		   
	-- Determine if rows have been billed
	UPDATE @TIME_ROWS
	SET    EDIT_FLAG = 1
	FROM @TIME_ROWS AS TR
	WHERE  EXISTS (
			   SELECT etd.AR_INV_NBR
			   FROM   EMP_TIME_DTL AS etd WITH (NOLOCK)
			   WHERE  etd.ET_ID = TR.ET_ID
					  AND etd.ET_DTL_ID = TR.ET_DTL_ID
					  AND etd.AR_INV_NBR IS NOT NULL
					  AND (etd.EDIT_FLAG = 0 OR etd.EDIT_FLAG IS NULL)
		   );

	-- Determine if item is summarized
	UPDATE @TIME_ROWS
	SET    EDIT_FLAG = 2
	FROM @TIME_ROWS AS TR
	WHERE  EDIT_FLAG = 1
		   AND (
				   SELECT COUNT(1)
				   FROM   EMP_TIME_DTL AS etd WITH (NOLOCK)
				   WHERE  etd.ET_ID = TR.ET_ID
						  AND etd.ET_DTL_ID = TR.ET_DTL_ID
			   ) > 1;
	
	-- Determine if item is a restricted AB flag
	UPDATE @TIME_ROWS
	SET    EDIT_FLAG = 3
	FROM @TIME_ROWS AS TR
	WHERE  EDIT_FLAG = 0
		   AND EXISTS (
				   SELECT AB_FLAG
				   FROM   EMP_TIME_DTL AS etd WITH (NOLOCK)
				   WHERE  etd.ET_ID = TR.ET_ID
						  AND etd.ET_DTL_ID = TR.ET_DTL_ID
						  AND etd.AB_FLAG IN (1, 3)
			   );

	-- Determine if item is selected for billing
	UPDATE @TIME_ROWS
	SET    EDIT_FLAG = 4
	FROM @TIME_ROWS AS TR
	WHERE  EDIT_FLAG = 0
		   AND EXISTS (
				   SELECT BILLING_USER
				   FROM   EMP_TIME_DTL AS etd WITH (NOLOCK)
				   WHERE  etd.ET_ID = TR.ET_ID
						  AND etd.ET_DTL_ID = TR.ET_DTL_ID
						  AND BILLING_USER IS NOT NULL
			   );
	IF @TIME_APPR_ACTIVE = 1
	BEGIN
		-- Check if row has been approved
		UPDATE @TIME_ROWS
		SET    EDIT_FLAG = 6, DAY_IS_APPROVED = 1
		FROM @TIME_ROWS AS TR INNER JOIN EMP_TIME WITH(NOLOCK) ON TR.ET_ID = EMP_TIME.ET_ID AND EMP_TIME.APPR_FLAG = 1
		WHERE  EDIT_FLAG = 0;

		-- Check if row is pending approval
		UPDATE @TIME_ROWS
		SET    EDIT_FLAG = 5, DAY_IS_PENDING_APPROVAL = 1
		FROM @TIME_ROWS AS TR INNER JOIN EMP_TIME WITH(NOLOCK) ON TR.ET_ID = EMP_TIME.ET_ID AND EMP_TIME.APPR_PENDING = 1
		WHERE  EDIT_FLAG = 0;

		-- Check if row is denied approval
		UPDATE @TIME_ROWS
		SET    EDIT_FLAG = 7, DAY_IS_DENIED = 1
		FROM @TIME_ROWS AS TR INNER JOIN EMP_TIME WITH(NOLOCK) ON TR.ET_ID = EMP_TIME.ET_ID AND EMP_TIME.APPR_PENDING = 2
		WHERE  EDIT_FLAG = 0;

		UPDATE @TIME_ROWS
		SET    DAY_IS_APPROVED = 1
		FROM @TIME_ROWS AS TR INNER JOIN EMP_TIME WITH(NOLOCK) ON TR.ET_ID = EMP_TIME.ET_ID AND EMP_TIME.APPR_FLAG = 1;

		UPDATE @TIME_ROWS
		SET    DAY_IS_PENDING_APPROVAL = 1
		FROM @TIME_ROWS AS TR INNER JOIN EMP_TIME WITH(NOLOCK) ON TR.ET_ID = EMP_TIME.ET_ID AND EMP_TIME.APPR_PENDING = 1;

		UPDATE @TIME_ROWS
		SET    DAY_IS_DENIED = 1
		FROM @TIME_ROWS AS TR INNER JOIN EMP_TIME WITH(NOLOCK) ON TR.ET_ID = EMP_TIME.ET_ID AND EMP_TIME.APPR_PENDING = 2;

	END

	-- Lock if estimate approval required but not found
	DECLARE
		@APPROVED_ESTIMATE_REQUIRED SMALLINT,
		@ALLOW_WITHOUT_APPROVED_ESTIMATE SMALLINT, -- 1 = YES, 0 = NO
		@EXCEED_OPTION SMALLINT, -- 0 = YES, 1 = WARN, 2 = NO
		@HAS_APPROVED_ESTIMATE BIT;

	SET @APPROVED_ESTIMATE_REQUIRED = 0;
	SET @HAS_APPROVED_ESTIMATE = 0;

	-- IS APPROVAL REQUIRED?
	BEGIN 
		SELECT 
			@APPROVED_ESTIMATE_REQUIRED = ISNULL(APPR_EST_REQ, 0)
		FROM 
			AGENCY WITH(NOLOCK);
		SELECT 
			@ALLOW_WITHOUT_APPROVED_ESTIMATE = ISNULL(ALLOW_PROCESSING, 1),
			@EXCEED_OPTION = ISNULL(EXCEED_OPTION, 0) 
		FROM 
			EST_REQ_OPT WITH(NOLOCK) 
		WHERE 
			EST_REQ_OPT_ID = 2;
	END;

	IF NOT @ALLOW_WITHOUT_APPROVED_ESTIMATE IS NULL
	BEGIN
		IF (@APPROVED_ESTIMATE_REQUIRED = 1 OR @ALLOW_WITHOUT_APPROVED_ESTIMATE = 0) AND @EXCEED_OPTION = 2
		BEGIN
			UPDATE @TIME_ROWS
			SET 
				CANNOT_EDIT_DUE_TO_PROCESS_CONTROL = 1, 
				NON_EDIT_MESSAGE = 'Approved estimate required but does not exist'
			FROM @TIME_ROWS AS TR
				LEFT OUTER JOIN ESTIMATE_APPROVAL AS EA ON TR.JOB_NUMBER = EA.JOB_NUMBER AND TR.JOB_COMPONENT_NBR = EA.JOB_COMPONENT_NBR
				LEFT OUTER JOIN ESTIMATE_INT_APPR AS EIA ON TR.JOB_NUMBER = EIA.JOB_NUMBER AND TR.JOB_COMPONENT_NBR = EIA.JOB_COMPONENT_NBR
				INNER JOIN JOB_LOG AS JL ON TR.JOB_NUMBER = JL.JOB_NUMBER
			WHERE 
				(TR.JOB_NUMBER > 0 AND TR.JOB_COMPONENT_NBR > 0) 
				AND (EA.JOB_NUMBER IS NULL AND EA.JOB_COMPONENT_NBR IS NULL) 
				AND (EIA.JOB_NUMBER IS NULL AND EIA.JOB_COMPONENT_NBR IS NULL) 
				AND JL.JOB_ESTIMATE_REQ = 1;
		END
	END

end_tran:

	DECLARE @PP_CHECK AS INT;
	SELECT @PP_CHECK = ISNULL(TS_PPERIOD_CHK, 0) FROM AGENCY WITH(NOLOCK);
	
	IF @PP_CHECK = 1
	BEGIN
		DECLARE @PP_COUNT INT, 
			@DAY_COUNT INT;
		
		SET @DAY_COUNT = 0;
		
		WHILE @DAY_COUNT <= 6
		BEGIN
			SET @PP_COUNT = 0;
			
			SELECT @PP_COUNT = COUNT(*) 
			FROM POSTPERIOD WITH (NOLOCK)
			WHERE	PPSRTDATE <= DATEADD(DAY, @DAY_COUNT, @StartDate) 
			AND	PPENDDATE >= DATEADD(DAY, @DAY_COUNT, @StartDate) 
			AND (PPTECURMTH = 'C' OR PPTECURMTH IS NULL);
			
			IF @PP_COUNT = 0
			BEGIN
				UPDATE @TIME_ROWS SET DAY_POST_PERIOD_CLOSED = 1 
				FROM @TIME_ROWS AS TR
				WHERE TR.EMP_DATE = DATEADD(DAY, @DAY_COUNT, @StartDate)
			END
			SET @DAY_COUNT = @DAY_COUNT + 1;
		END;
	END
	ELSE
	BEGIN
	    UPDATE @TIME_ROWS SET DAY_POST_PERIOD_CLOSED = 0;
	END
	
	UPDATE @TIME_ROWS SET DAY_POST_PERIOD_CLOSED = 0 WHERE DAY_POST_PERIOD_CLOSED IS NULL;

	--STOPWATCH CHECK
	DECLARE 
		@HAS_STOPWATCH INT, 
		@STOPWATCH_ET_ID INT, 
		@STOPWATCH_ET_DTL_ID SMALLINT;
	
	SELECT 
		@HAS_STOPWATCH = HAS_STOPWATCH, 
		@STOPWATCH_ET_ID = STOPWATCH_ET_ID, 
		@STOPWATCH_ET_DTL_ID = STOPWATCH_ET_DTL_ID
	FROM 
		[dbo].[fn_ts_has_stopwatch](@EmployeeCode, @StartDate, @EndDate);
	
	IF @HAS_STOPWATCH = 1
	BEGIN
		UPDATE @TIME_ROWS
		SET HAS_STOPWATCH = @HAS_STOPWATCH, STOPWATCH_ET_ID = @STOPWATCH_ET_ID, STOPWATCH_ET_DTL_ID = @STOPWATCH_ET_DTL_ID
		WHERE ET_ID = @STOPWATCH_ET_ID AND ET_DTL_ID = @STOPWATCH_ET_DTL_ID;
	END
	
	UPDATE @TIME_ROWS
	SET HAS_STOPWATCH = 0, STOPWATCH_ET_ID = 0, STOPWATCH_ET_DTL_ID = 0
	WHERE HAS_STOPWATCH IS NULL;
	
	DECLARE @COMMENTS_REQ SMALLINT;
	SELECT @COMMENTS_REQ = ISNULL(AGENCY.TIME_COMMENTS_REQ, 0) FROM AGENCY WITH(NOLOCK);

	UPDATE @TIME_ROWS SET COMMENTS_REQ = @COMMENTS_REQ WHERE TIME_TYPE = 'D';

	UPDATE @TIME_ROWS SET FNC_CAT_DESC = FUNCTIONS.FNC_DESCRIPTION
	FROM @TIME_ROWS AS TR INNER JOIN FUNCTIONS ON TR.FNC_CAT COLLATE SQL_Latin1_General_CP1_CS_AS  = FUNCTIONS.FNC_CODE COLLATE SQL_Latin1_General_CP1_CS_AS 
	WHERE TR.TIME_TYPE = 'D';
	
	UPDATE @TIME_ROWS SET FNC_CAT_DESC = TIME_CATEGORY.DESCRIPTION
	FROM @TIME_ROWS AS TR INNER JOIN TIME_CATEGORY ON TR.FNC_CAT  COLLATE SQL_Latin1_General_CP1_CS_AS = TIME_CATEGORY.CATEGORY COLLATE SQL_Latin1_General_CP1_CS_AS 
	WHERE TR.TIME_TYPE = 'N';
	
	UPDATE @TIME_ROWS SET CLIENT_COMMENT_REQUIRED = 0 WHERE CLIENT_COMMENT_REQUIRED IS NULL OR TIME_TYPE = 'N';

	SET @COMMENTS_REQ = ISNULL(@COMMENTS_REQ, 0);

	IF @COMMENTS_REQ = 1
	BEGIN
		UPDATE @TIME_ROWS SET CLIENT_COMMENT_REQUIRED = 1 WHERE TIME_TYPE = 'D';
	END
	ELSE
	BEGIN
		UPDATE @TIME_ROWS SET COMMENTS_REQ = 1 WHERE TIME_TYPE = 'D' AND CLIENT_COMMENT_REQUIRED = 1;
	END
	
	IF EXISTS(
		SELECT ET_ID FROM @TIME_ROWS
		WHERE (COMMENTS_REQ = 1 OR CLIENT_COMMENT_REQUIRED = 1) AND (CONVERT(VARCHAR, COMMENTS) = '' OR COMMENTS IS NULL) AND EMP_HOURS > 0
	)
	BEGIN
		UPDATE @TIME_ROWS SET TS_MISSING_COMMENTS = 1;
	END;

/*=========== QUERY ===========*/

RETURN

END;