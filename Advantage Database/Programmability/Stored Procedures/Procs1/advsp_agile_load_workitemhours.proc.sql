IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[advsp_agile_load_workitemhours]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE [dbo].[advsp_agile_load_workitemhours]
GO
-- exec advsp_agile_load_workitemhours null, 1937, null, null, null
CREATE PROCEDURE [dbo].[advsp_agile_load_workitemhours] 
@SPRINT_ID INT,
@ALERT_ID INT,
@EMP_CODE VARCHAR(6),
@START_DATE SMALLDATETIME,
@END_DATE SMALLDATETIME,
@USER_CODE VARCHAR(100),
@SHOW_AVAILABILITY bit
AS
/*=========== QUERY ===========*/
BEGIN
	SET @SPRINT_ID = 0;
	--	TABLES
	BEGIN
		DECLARE @WEEKLY_HRS TABLE (	
									ID INT IDENTITY(1,1) NOT NULL, 
									AlertID INT,
									SprintDetailID INT,
									SprintEmployeeID INT,
									Title VARCHAR(254),
									EmployeeCode VARCHAR(6),
									FullName VARCHAR(50),
									WeekNumber INT,
									WeekStart SMALLDATETIME,
									WeekEnd SMALLDATETIME,
									HoursAssigned DECIMAL (7,3),
									HoursAvailableForWeek DECIMAL (7,3),
									HoursAssignedForWeek DECIMAL (7,3),
									HoursBalance DECIMAL (7,3),
									HoursPostedTotal DECIMAL (7,3),
									HoursPostedPrior DECIMAL (7,3),
									HoursPostedThis DECIMAL (7,3),
									HoursLeft DECIMAL (7,3),
									Complete SmallInt
								  );
		CREATE TABLE #EMPLOYEES  (	
									EMP_CODE VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS, 
									TOTAL_WEEK_HRS DECIMAL( 18, 2), 
									TOTAL_NON_TASK_HOURS DECIMAL( 18, 2)
								 );
		CREATE TABLE #NON_TASK_TIME (
										[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
										EMP_CODE VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS, 
										WeekNumber INT,
										WorkDay SMALLDATETIME,
										Holiday INT,
										TOTAL_HOURS DECIMAL(18,2)
									);
		DECLARE @ALERT_HOURS_BY_WEEK TABLE (
										EMP_CODE VARCHAR(6),
										EMP_HOURS DECIMAL (7, 3),
										WEEK_OF SMALLDATETIME
										);
		
		CREATE TABLE #MY_DATA_WEEKLY 
		(
			ROW_ID						INT IDENTITY(1,1) NOT NULL,
			EMP_CODE					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			--EMP_DIRECT_HRS_GOAL_PERC    DECIMAL(18,6),
			WEEK_OF_YEAR				SMALLDATETIME,
			--STD_HRS_AVAIL				DECIMAL(18,6) NULL,
			--EMP_DIRECT_HRS_GOAL_HOURS   DECIMAL(18,6),
			--HRS_USED_NON_TASK			DECIMAL(18,6) NULL,
			HRS_AVAIL					DECIMAL(18,6) NULL,
			HRS_ASSIGNED_TASK			DECIMAL(18,6) NULL--,
			--HRS_ASS						DECIMAL(18,6) NULL,
			--HRS_APPTS					DECIMAL(18,6) NULL,
			--HRS_BALANCE_AVAIL			DECIMAL(18,6) NULL,
			--IS_FIRST_CHOICE				int,
			--OVER_BOOKED					int,
			--PERCENT_UTIL				DECIMAL(18,6) NULL
		
		);

		CREATE TABLE #EMP_WORK_DAY --Table of employee workdays
			(
				[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
				[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
				[WORK_DATE]               SMALLDATETIME,
				[STD_HRS]  DECIMAL(18,6),
				[NON_TASK_DAY] INT,
				[WEEK] SMALLDATETIME
			);

	END
	--	VARIABLES
	BEGIN
		DECLARE
			@FIRST_DAY_OF_THIS_WEEK SMALLDATETIME, @START_DATE_ALERT SMALLDATETIME, @DUE_DATE_ALERT SMALLDATETIME,
			@START_WEEK_ON TINYINT,
			@HOURS_ALLOWED DECIMAL(7,2),
			@IS_TASK BIT;
	END
	--	INIT
	BEGIN
		SET @SPRINT_ID = ISNULL(@SPRINT_ID, 0);
		--SET @START_WEEK_ON = (SELECT [dbo].[advfn_StartWeekOnDay](@USER_CODE)); // FACTOR IN START OF WEEK NOT SUNDAY??
		SET @START_WEEK_ON = 1;
		SELECT @FIRST_DAY_OF_THIS_WEEK = (SELECT DATEADD(DAY, @START_WEEK_ON - DATEPART(WEEKDAY, GETDATE()), GETDATE()));
		SELECT 
			@HOURS_ALLOWED = A.HRS_ALLOWED,
			@IS_TASK =
				CASE
					WHEN A.ALERT_LEVEL = 'BRD' THEN CAST(1 AS BIT)
					ELSE CAST(0 AS BIT)
				END
		FROM 
			ALERT A 
		WHERE 
			ALERT_ID = @ALERT_ID;
		IF @IS_TASK = 1
		BEGIN
			SELECT 
				@HOURS_ALLOWED = JTD.HOURS_ASSIGNED, @START_DATE_ALERT = TASK_START_DATE, @DUE_DATE_ALERT = JOB_REVISED_DATE
			FROM
				JOB_TRAFFIC_DET JTD
				INNER JOIN ALERT A ON JTD.JOB_NUMBER = A.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = A.TASK_SEQ_NBR 
			WHERE
				A.ALERT_ID = @ALERT_ID AND A.ALERT_LEVEL = 'BRD';
		END
		SET @HOURS_ALLOWED = ISNULL(@HOURS_ALLOWED, 0.00);
	END
	--	WEEKLY HOURS
	BEGIN
		IF @SPRINT_ID > 0
		BEGIN
			INSERT INTO @WEEKLY_HRS (SprintEmployeeID, EmployeeCode, FullName, WeekNumber, WeekStart, WeekEnd, HoursAssigned, SprintDetailID, AlertID, Title,Complete)
			SELECT 
			   SE.ID, SE.EMP_CODE, ISNULL(E.EMP_FNAME+' ', '')+ISNULL(E.EMP_MI+'. ', '')+ISNULL(E.EMP_LNAME, ''), SE.WEEK_NUM, SE.WEEK_START, SE.WEEK_END, SE.HOURS, SD.ID, SD.ALERT_ID, A.SUBJECT, 
			   CASE WHEN AR.EMP_CODE is not null THEN 0
				WHEN ARD.EMP_CODE is not null then 1
				WHEN JOB_TRAFFIC_DET_EMPS.TEMP_COMP_DATE is not null THEN 1
				ELSE 0
				END   Complete
			FROM
			   SPRINT_EMPLOYEE SE
			   INNER JOIN SPRINT_DTL SD ON SE.SPRINT_DTL_ID = SD.ID
			   INNER JOIN ALERT A ON SD.ALERT_ID = A.ALERT_ID
			   INNER JOIN EMPLOYEE E ON SE.EMP_CODE = E.EMP_CODE
			   LEFT OUTER JOIN EMPLOYEE_PICTURE EP ON E.EMP_CODE = EP.EMP_CODE
			   left join ALERT_RCPT AR on AR.EMP_CODE = E.EMP_CODE AND AR.ALERT_ID = SE.ALERT_ID
			   left join ALERT_RCPT_DISMISSED ARD on ARD.EMP_CODE = E.EMP_CODE AND ARD.ALERT_ID = SE.ALERT_ID
			   left join JOB_TRAFFIC_DET_EMPS on A.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND
							A.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND
							A.TASK_SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR AND 
							JOB_TRAFFIC_DET_EMPS.EMP_CODE = E.EMP_CODE
			WHERE
			   SD.SPRINT_HDR_ID = @SPRINT_ID
			   AND SE.ALERT_ID = @ALERT_ID
			   AND 1 = CASE WHEN @EMP_CODE IS NULL OR @EMP_CODE = '' THEN 1 WHEN SE.EMP_CODE = @EMP_CODE THEN 1 ELSE 0 END
			   AND 1 = CASE WHEN @START_DATE IS NULL THEN 1 WHEN SE.WEEK_START >= @START_DATE THEN 1 ELSE 0 END
			   AND 1 = CASE WHEN @END_DATE IS NULL THEN 1 WHEN SE.WEEK_END <= @END_DATE THEN 1 ELSE 0 END;
		END
		ELSE
		BEGIN
			INSERT INTO @WEEKLY_HRS (SprintEmployeeID, EmployeeCode, FullName, WeekNumber, WeekStart, WeekEnd, HoursAssigned, SprintDetailID, AlertID, Title,Complete)
			SELECT
			   SE.ID, SE.EMP_CODE, ISNULL(E.EMP_FNAME+' ', '')+ISNULL(E.EMP_MI+'. ', '')+ISNULL(E.EMP_LNAME, ''), SE.WEEK_NUM, SE.WEEK_START, SE.WEEK_END, SE.HOURS, 0, A.ALERT_ID, A.SUBJECT,
			   CASE WHEN AR.EMP_CODE is not null THEN 0
				WHEN ARD.EMP_CODE is not null then 1
				WHEN JOB_TRAFFIC_DET_EMPS.TEMP_COMP_DATE is not null THEN 1
				ELSE 0
				END   Complete
			FROM
			   SPRINT_EMPLOYEE SE
			   INNER JOIN ALERT A ON SE.ALERT_ID = A.ALERT_ID
			   INNER JOIN EMPLOYEE E ON SE.EMP_CODE = E.EMP_CODE
			   LEFT OUTER JOIN EMPLOYEE_PICTURE EP ON E.EMP_CODE = EP.EMP_CODE
			   left join ALERT_RCPT AR on AR.EMP_CODE = E.EMP_CODE AND AR.ALERT_ID = SE.ALERT_ID
			   left join ALERT_RCPT_DISMISSED ARD on ARD.EMP_CODE = E.EMP_CODE AND ARD.ALERT_ID = SE.ALERT_ID
			   left join JOB_TRAFFIC_DET_EMPS on A.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND
							A.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND
							A.TASK_SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR AND 
							JOB_TRAFFIC_DET_EMPS.EMP_CODE = E.EMP_CODE
			WHERE
			   SE.ALERT_ID = @ALERT_ID
			   AND (SE.SPRINT_DTL_ID IS NULL OR SE.SPRINT_DTL_ID = 0)
			   AND 1 = CASE WHEN @EMP_CODE IS NULL OR @EMP_CODE = '' THEN 1 WHEN SE.EMP_CODE = @EMP_CODE THEN 1 ELSE 0 END
			   AND 1 = CASE WHEN @START_DATE IS NULL THEN 1 WHEN SE.WEEK_START >= @START_DATE THEN 1 ELSE 0 END
			   AND 1 = CASE WHEN @END_DATE IS NULL THEN 1 WHEN SE.WEEK_END <= @END_DATE THEN 1 ELSE 0 END;
		END
	END
	
	--	HOURS BY WEEK
	BEGIN
		INSERT INTO @ALERT_HOURS_BY_WEEK (EMP_CODE, EMP_HOURS, WEEK_OF)
		SELECT A.EMP_CODE, SUM(A.EMP_HOURS) AS SUM_HOURS, A.WEEK_OF
		FROM
				(
					SELECT ET.EMP_CODE, ETD.EMP_HOURS, DATEADD(DAY, @START_WEEK_ON - DATEPART(WEEKDAY,  ET.EMP_DATE),  ET.EMP_DATE) AS WEEK_OF
					FROM
						EMP_TIME ET
						INNER JOIN EMP_TIME_DTL ETD ON ET.ET_ID = ETD.ET_ID
						INNER JOIN @WEEKLY_HRS WH ON ET.EMP_CODE = WH.EmployeeCode
					WHERE
						ET.EMP_CODE = WH.EmployeeCode
						AND WH.AlertID = ETD.ALERT_ID
				) AS A
		GROUP BY
			A.EMP_CODE, A.WEEK_OF;
	END
	--	STANDARD HOURS
	BEGIN
		INSERT INTO #EMPLOYEES (EMP_CODE)
		SELECT DISTINCT EmployeeCode FROM @WEEKLY_HRS;		
		--UPDATE #EMPLOYEES
		--SET TOTAL_WEEK_HRS = ISNULL(MON_HRS, 0.00) + ISNULL(TUE_HRS, 0.00) + ISNULL(WED_HRS, 0.00) + ISNULL(THU_HRS, 0.00) + ISNULL(FRI_HRS, 0.00) + ISNULL(SAT_HRS, 0.00) + ISNULL(SUN_HRS, 0.00) 
		--FROM
		--   EMPLOYEE E
		--   INNER JOIN #EMPLOYEES EE ON E.EMP_CODE = EE.EMP_CODE;
	END
	--	NON TASK
	BEGIN
		DECLARE @START_DATE_MIN SMALLDATETIME,
				@END_DATE_MAX SMALLDATETIME		

		IF @IS_TASK = 0
		BEGIN
			SELECT @START_DATE_ALERT = [START_DATE], @DUE_DATE_ALERT = DUE_DATE FROM ALERT WHERE ALERT_ID = @ALERT_ID
		END

		IF @START_DATE IS NULL
		BEGIN
		   SELECT @START_DATE_MIN = MIN(WeekStart) FROM @WEEKLY_HRS;
		END
		ELSE
		BEGIN
		   SET @START_DATE_MIN = @START_DATE;
		END
		IF @END_DATE IS NULL
		BEGIN
			SELECT @END_DATE_MAX = MAX(WeekEnd) FROM @WEEKLY_HRS;
		END
		ELSE
		BEGIN
		   SET @END_DATE_MAX = @END_DATE;
		END

		if @START_DATE_ALERT IS NOT NULL AND @START_DATE_ALERT > @START_DATE_MIN
		BEGIN
			SET @START_DATE_MIN = @START_DATE_ALERT
		END

		if @DUE_DATE_ALERT IS NOT NULL AND @DUE_DATE_ALERT < @END_DATE_MAX
		BEGIN
			SET @END_DATE_MAX = @DUE_DATE_ALERT
		END
	END

	--SELECT @START_DATE_MIN,@END_DATE_MAX

	--	WORK DAYS
	--BEGIN
	--	CREATE TABLE #WORK_DAYS ( workyear INT, workdate SMALLDATETIME, holiday BIT, weekend BIT, dayoff BIT )
	--	DECLARE @cur_date SMALLDATETIME, @emp_start_date SMALLDATETIME, @day_count2 INT, @start_year INT, @end_year INT, @cur_year INT
	--	DECLARE @year_start_date SMALLDATETIME, @year_end_date SMALLDATETIME, @holiday BIT, @weekend BIT, @dayoff BIT 
	--	IF ( @START_DATE_MIN IS NOT NULL ) AND ( @END_DATE_MAX IS NOT NULL ) AND ( @START_DATE_MIN <= @END_DATE_MAX )
	--	BEGIN
	--		-- Create a table holding the average workday by year for each employee		
	--		DECLARE 
	--			@std_hours decimal(9,3);
	--		SET @start_year = DATEPART(yyyy, @START_DATE_MIN);		
	--		SET @end_year = DATEPART(yyyy, @END_DATE_MAX);		
	--		SET @cur_year = @start_year;
	--		WHILE ( @cur_year <= @end_year )
	--		BEGIN
	--			SET @day_count2 = 0;
	--			SET @year_start_date = @START_DATE_MIN;
	--			SET @year_end_date = @END_DATE_MAX;
	--			SET @cur_date = @year_start_date;			
	--			WHILE ( @cur_date <= @year_end_date )
	--			BEGIN
	--				SET @weekend = 0;
	--				IF (( DATEPART( dw, @cur_date )) IN ( 1, 7 ))
	--				BEGIN
	--					SET @weekend = 1;
	--				END
	--				ELSE
	--				BEGIN
	--					SET @day_count2 = @day_count2 + 1;
	--				END									 
	--				SET @holiday = 0;					
	--				IF ( SELECT COUNT(1) 
	--					   FROM dbo.EMP_NON_TASKS ent 
	--					  WHERE ent.[TYPE] = 'H' 
	--						AND ent.ALL_DAY = 1 
	--						AND ( @cur_date BETWEEN ent.[START_DATE] AND ent.[END_DATE] )) > 0
	--				BEGIN
	--					SELECT @holiday = 1;			
	--				END				
	--				INSERT INTO #WORK_DAYS( workyear, workdate, holiday, weekend ) VALUES ( @cur_year, @cur_date, @holiday, @weekend );				
	--				SET @cur_date = DATEADD(day, 1, @cur_date);
	--			END			
	--			SET @cur_year = @cur_year + 1;
	--		END	
	--	END
	--	--SELECT * FROM #WORK_DAYS
	--END

	--INSERT INTO #EMP_WORK_DAY (EMP_CODE,WORK_DATE,[WEEK])
	--SELECT DISTINCT EmployeeCode, wd.workdate,DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,wd.workdate)) , 104 ) ) + (DATEPART(wk,wd.workdate)-1), 6) FROM @WEEKLY_HRS CROSS JOIN #WORK_DAYS wd

	--UPDATE #EMP_WORK_DAY
	--SET STD_HRS = ( SELECT CASE DATEPART( dw, WORK_DATE ) 
	--								WHEN 1 THEN e.SUN_HRS
	--								WHEN 2 THEN e.MON_HRS
	--								WHEN 3 THEN e.TUE_HRS
	--								WHEN 4 THEN e.WED_HRS
	--								WHEN 5 THEN e.THU_HRS
	--								WHEN 6 THEN e.FRI_HRS
	--								WHEN 7 THEN e.SAT_HRS
	--							END FROM EMPLOYEE e WHERE e.EMP_CODE = #EMP_WORK_DAY.EMP_CODE)

	--UPDATE #EMPLOYEES 
	--SET TOTAL_WEEK_HRS = (SELECT SUM(ISNULL(STD_HRS,0)) FROM #EMP_WORK_DAY WHERE #EMPLOYEES.EMP_CODE = #EMP_WORK_DAY.EMP_CODE AND #EMP_WORK_DAY.WORK_DATE >= @START_DATE_MIN AND #EMP_WORK_DAY.WORK_DATE <= @END_DATE_MAX )

	--SELECT * FROM #EMP_WORK_DAY
	--SELECT * FROM #EMPLOYEES
	DECLARE @EMP_LIST AS VARCHAR(MAX), @JOB INT, @JC SMALLINT, @SEQ_NBR SMALLINT
	SET @EMP_LIST = NULL;
	SELECT @EMP_LIST = COALESCE(@EMP_LIST + ''',', '') + A.EMP_CODE
	FROM   (
			    SELECT DISTINCT  '''' + EMP_CODE AS EMP_CODE
			    FROM ALERT_RCPT WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1
				UNION
				SELECT DISTINCT '''' + EMP_CODE AS EMP_CODE
			    FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1
	       ) AS A;
    SET @EMP_LIST = @EMP_LIST + ''''

	IF @EMP_LIST IS NULL AND @IS_TASK = 1
	BEGIN
		SELECT @JOB = JOB_NUMBER, @JC = JOB_COMPONENT_NBR, @SEQ_NBR = TASK_SEQ_NBR
		FROM ALERT
		WHERE ALERT_ID = @ALERT_ID
		SELECT @EMP_LIST = COALESCE(@EMP_LIST + ''',', '') + A.EMP_CODE
		FROM   (
					SELECT DISTINCT  '''' + EMP_CODE AS EMP_CODE
					FROM JOB_TRAFFIC_DET_EMPS WHERE JOB_NUMBER = @JOB AND JOB_COMPONENT_NBR = @JC AND SEQ_NBR = @SEQ_NBR
			   ) AS A;
		SET @EMP_LIST = @EMP_LIST + ''''
	END

	--SELECT @EMP_LIST

	--	NON TASK TIME
	--BEGIN
	--	INSERT INTO #NON_TASK_TIME
	--	SELECT 
	--			[EmployeeCode] = e.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS, 
	--			[WeekNumber] = DATEPART( w, wd.workdate ),
	--			[WorkDate] = wd.workdate,
	--			wd.holiday,
	--			CASE WHEN holiday = 1 THEN CASE DATEPART(dw,wd.workdate)
	--										WHEN 1 THEN (SELECT SUN_HRS FROM EMPLOYEE WHERE EMP_CODE = e.EMP_CODE)
	--										WHEN 2 THEN (SELECT MON_HRS FROM EMPLOYEE WHERE EMP_CODE = e.EMP_CODE)
	--										WHEN 3 THEN (SELECT TUE_HRS FROM EMPLOYEE WHERE EMP_CODE = e.EMP_CODE)
	--										WHEN 4 THEN (SELECT WED_HRS FROM EMPLOYEE WHERE EMP_CODE = e.EMP_CODE)
	--										WHEN 5 THEN (SELECT THU_HRS FROM EMPLOYEE WHERE EMP_CODE = e.EMP_CODE)
	--										WHEN 6 THEN (SELECT FRI_HRS FROM EMPLOYEE WHERE EMP_CODE = e.EMP_CODE)
	--										WHEN 7 THEN (SELECT SAT_HRS FROM EMPLOYEE WHERE EMP_CODE = e.EMP_CODE)
	--										END 
	--								  ELSE 0 END
	--		FROM 
	--			#EMPLOYEES e CROSS JOIN #WORK_DAYS wd;	
	--	UPDATE #NON_TASK_TIME
	--	SET TOTAL_HOURS = ISNULL((SELECT TOP 1 CASE WHEN ALL_DAY = 1 THEN CASE DATEPART(dw,WorkDay)
	--										WHEN 1 THEN (SELECT SUN_HRS FROM EMPLOYEE WHERE EMP_CODE = #NON_TASK_TIME.EMP_CODE)
	--										WHEN 2 THEN (SELECT MON_HRS FROM EMPLOYEE WHERE EMP_CODE = #NON_TASK_TIME.EMP_CODE)
	--										WHEN 3 THEN (SELECT TUE_HRS FROM EMPLOYEE WHERE EMP_CODE = #NON_TASK_TIME.EMP_CODE)
	--										WHEN 4 THEN (SELECT WED_HRS FROM EMPLOYEE WHERE EMP_CODE = #NON_TASK_TIME.EMP_CODE)
	--										WHEN 5 THEN (SELECT THU_HRS FROM EMPLOYEE WHERE EMP_CODE = #NON_TASK_TIME.EMP_CODE)
	--										WHEN 6 THEN (SELECT FRI_HRS FROM EMPLOYEE WHERE EMP_CODE = #NON_TASK_TIME.EMP_CODE)
	--										WHEN 7 THEN (SELECT SAT_HRS FROM EMPLOYEE WHERE EMP_CODE = #NON_TASK_TIME.EMP_CODE)
	--										END   
	--								ELSE [HOURS] END
	--					  FROM EMP_NON_TASKS LEFT OUTER JOIN 
	--						   EMP_NON_TASKS_EMPS ON EMP_NON_TASKS.NON_TASK_ID = EMP_NON_TASKS_EMPS.NON_TASK_ID 
	--					  WHERE EMP_NON_TASKS_EMPS.EMP_CODE = #NON_TASK_TIME.EMP_CODE
	--						AND WorkDay BETWEEN [START_DATE] AND [END_DATE] AND EMP_NON_TASKS_EMPS.EMP_CODE IN (@EMP_LIST)),0)
	--	WHERE Holiday = 0;
	--END
	--	HOURS POSTED (TO DATE PRIOR TO WEEK OF DATE)
	BEGIN
		UPDATE @WEEKLY_HRS SET HoursPostedPrior = (SELECT SUM(AH.EMP_HOURS) FROM @ALERT_HOURS_BY_WEEK AH WHERE AH.EMP_CODE = EmployeeCode AND AH.WEEK_OF < WeekStart)
	END
	--	HOURS LEFT
	BEGIN
		UPDATE @WEEKLY_HRS SET HoursLeft = ISNULL(@HOURS_ALLOWED, 0.00) - ISNULL(HoursPostedPrior, 0.00);
	END

	if @SHOW_AVAILABILITY = 1
	BEGIN
		--	HOURS AVAILABLE
		--BEGIN
		--	UPDATE @WEEKLY_HRS
		--	SET HoursAvailableForWeek = (SELECT SUM(ISNULL(STD_HRS,0)) FROM #EMP_WORK_DAY WHERE EmployeeCode = EMP_CODE AND #EMP_WORK_DAY.WORK_DATE BETWEEN WeekStart AND WeekEnd ) - (SELECT SUM(TOTAL_HOURS) FROM #NON_TASK_TIME WHERE WorkDay BETWEEN WeekStart AND WeekEnd AND EmployeeCode = EMP_CODE)
		--	FROM
		--	   #EMPLOYEES E
		--	   INNER JOIN @WEEKLY_HRS WH ON E.EMP_CODE = WH.EmployeeCode;  
		--END
		--	HOURS ASSIGNED (ALL ALLOCATED HOURS THIS WEEK)
		--BEGIN
		   --UPDATE @WEEKLY_HRS SET HoursAssignedForWeek = A.HRS 
		   --FROM
			  --(	 
				 --SELECT 
					--SUM(SE.HOURS) AS HRS, SE.EMP_CODE, SE.WEEK_START, SE.WEEK_NUM
				 --FROM
					--SPRINT_EMPLOYEE SE
					--INNER JOIN #EMPLOYEES E ON SE.EMP_CODE = E.EMP_CODE
				 --GROUP BY
					--SE.EMP_CODE, WEEK_START, WEEK_NUM
			  --) AS A  
		   --INNER JOIN @WEEKLY_HRS WH
			  --ON WH.EmployeeCode = A.EMP_CODE AND WH.WeekStart = A.WEEK_START AND WH.WeekNumber = A.WEEK_NUM;
			--SELECT @START_DATE_MIN,@END_DATE_MAX
			--SET @EMP_LIST = '''''' + @EMP_LIST + ''''''
			--SELECT @EMP_LIST
			INSERT INTO #MY_DATA_WEEKLY  
			EXEC usp_wv_RESOURCES_EMP_ASSIGNED_WEEKLY @EMP_CODE = '', @ROLES = '', @START_DATE = @START_DATE_MIN, @END_DATE = @END_DATE_MAX, @SUMMARY_LEVEL = 2, @DEPTS = '', @EMP_LIST = @EMP_LIST, @UserID = @USER_CODE, @OfficeCode = NULL, @ClientCode = NULL, @DivisionCode = NULL, @ProductCode = NULL, @JobNum = NULL, @JobComp = NULL,  @TaskStatus = NULL, @ExcludeTempComplete ='N', @Manager = NULL, @QUERY_TYPE = NULL, @PSWL_JOB_NUMBER = NULL, @PSWL_JOB_COMPONENT_NBR = NULL, @JC_LIST = NULL, @OVERRIDE_EMP_SEC = 0, @OMIT_BEGINNING_BALANCE = 1;
			--SELECT * FROM #MY_DATA_WEEKLY	
			UPDATE @WEEKLY_HRS SET HoursAssignedForWeek = (SELECT SUM(HRS_ASSIGNED_TASK) FROM #MY_DATA_WEEKLY  WHERE EmployeeCode = #MY_DATA_WEEKLY .EMP_CODE AND WeekStart = #MY_DATA_WEEKLY.WEEK_OF_YEAR)
			UPDATE @WEEKLY_HRS SET HoursAvailableForWeek = (SELECT SUM(HRS_AVAIL) FROM #MY_DATA_WEEKLY  WHERE EmployeeCode = #MY_DATA_WEEKLY .EMP_CODE AND WeekStart = #MY_DATA_WEEKLY.WEEK_OF_YEAR)
			--SELECT * FROM @WEEKLY_HRS
		--END
		--	AVAILABLE BALANCE
		BEGIN
		   UPDATE @WEEKLY_HRS 
		   SET HoursBalance = ISNULL(HoursAvailableForWeek, 0.00) - ISNULL(HoursAssignedForWeek, 0.00);
		END
	END

	
	--	HOURS POSTED THIS WEEK
	BEGIN
		UPDATE @WEEKLY_HRS
		SET HoursPostedThis = ISNULL(HW.EMP_HOURS, 0.00)
		FROM
			@WEEKLY_HRS WH 
			INNER JOIN @ALERT_HOURS_BY_WEEK HW ON WH.EmployeeCode = HW.EMP_CODE AND WH.WeekStart = HW.WEEK_OF;
	END
	--	CLEAN UP
	BEGIN
		DROP TABLE #NON_TASK_TIME;
		--DROP TABLE #WORK_DAYS;
		DROP TABLE #MY_DATA_WEEKLY
	END
	--	RETURN
	BEGIN
		SELECT 
		   WH.ID,
		   WH.AlertID,
		   WH.SprintDetailID,
		   WH.SprintEmployeeID,
		   WH.EmployeeCode,
		   WH.FullName,
		   WH.WeekNumber,
		   WH.WeekStart,
		   WH.WeekEnd,
		   WH.Complete,
		   ISNULL(WH.HoursAssigned, 0.00) AS HoursAssigned,
		   ISNULL(WH.HoursAvailableForWeek, 0.00) AS HoursAvailableForWeek,
		   ISNULL(WH.HoursAssignedForWeek, 0.00) AS HoursAssignedForWeek,
		   ISNULL(WH.HoursBalance, 0.00) AS HoursBalance,
		   ISNULL(WH.HoursPostedTotal, 0.00) AS HoursPostedTotal,
		   ISNULL(WH.HoursPostedPrior, 0.00) AS HoursPostedPrior,
		   ISNULL(WH.HoursPostedThis, 0.00) AS HoursPostedThis,
		   ISNULL(WH.HoursLeft, 0.00) AS HoursLeft
		FROM
		   @WEEKLY_HRS WH WHERE WH.WeekStart is not null
		ORDER BY
		   WH.WeekStart, WH.FullName;
	END
END
/*=========== QUERY ===========*/


GO


