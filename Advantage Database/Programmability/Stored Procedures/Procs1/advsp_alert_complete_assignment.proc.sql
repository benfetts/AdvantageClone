IF EXISTS ( SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[advsp_alert_complete_assignment]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE [dbo].[advsp_alert_complete_assignment];
END
GO
CREATE PROCEDURE [dbo].[advsp_alert_complete_assignment] 
@ALERT_ID  INT,
@USER_CODE VARCHAR(100),
@EMP_CODE  VARCHAR(6),
@PROOFING_STATUS_ID INT = NULL,
@DOCUMENT_ID INT = NULL
AS
/*=========== QUERY ===========*/
BEGIN
	-- VARIABLES
	BEGIN
		DECLARE 
			@EMP_FML VARCHAR(100), 
			@CURR_PROCESSED SMALLDATETIME, 
			@STARTING_ALRT_NOTIFY_HDR_ID INT, 
			@STARTING_ALERT_STATE_ID INT, 
			@CURR_ALRT_NOTIFY_HDR_ID INT, 
			@CURR_ALERT_STATE_ID INT, 
			@CURR_ALERT_STATE_NAME VARCHAR(100), 
			@CURR_PROOFING_STATUS_ID INT,
			@CURR_DFLT_ALERT_STATE_ID INT, 
			@CURR_DFLT_ALERT_STATE_NAME VARCHAR(100), 
			@ALERT_LEVEL VARCHAR(50), 
			@JOB_NUMBER INT, 
			@JOB_COMPONENT_NBR SMALLINT, 
			@TASK_SEQ_NBR SMALLINT, 
			@UNCOMPLETE SMALLINT, 
			@ALERT_RCPT_ID INT, 
			@EMAIL_ADDRESS VARCHAR(100), 
			@COMMENT VARCHAR(MAX), 
			@LAST_COMMENT_ID INT, 
			@COMMENT_ADDED BIT, 
			@CUSTODY_DATE SMALLDATETIME,
			@IS_ROUTED BIT,
			@ALERT_ASSIGNEE_EMP_CODE VARCHAR(6),
			@AUTO_NXT_STATE BIT,
			@ACTIVE_ASSIGNEE_COUNT INT,
			@IS_LAST_EMPLOYEE BIT,
			@MOVE_TO_NEXT_STATE BIT,
			@MOVED_TO_NEXT_STATE BIT,
			@LAST_STATE_ID INT,
			@NEXT_STATE_ID INT,
			@CURR_STATE_SORT_ORDER INT,
			@MAX_RCPT_ID INT,
			@MAX_RCPT_ID_DISMISSED INT,
			@NEXT_STATE_NAME VARCHAR(100),
			@HAS_MORE_ASSIGNEES BIT,
			@COMPLETE_ASSIGNMENT BIT,
			@ERROR_MESSAGE VARCHAR(MAX),
			@IS_COMPLETED_STATE BIT,
			@COMPLETED_STATE_ID INT,
			@COMPLETED_STATE_NAME VARCHAR(100),
			@ASSIGNMENT_START_DATE SMALLDATETIME,
			@ASSIGNMENT_COMPLETED_DATE SMALLDATETIME,
			@COMMENT_ID INT,
			@ALERT_HOURS DECIMAL(7, 2),
			@ASSIGNMENT_STARTED_ON_LAST_STATE BIT,
			@ASSIGNMENT_MOVING_TO_LAST_STATE BIT,
			@NEXT_STATE_DEFAULT_ASSIGNEE_COUNT INT,
			@THIS_RCPT_ID INT,
			@IS_CS_REVIEW BIT,
			@IS_PROOF BIT,
			@IS_ASSIGNEE BIT,  --  FALSE MEANS PERSON CLICKED BUTTON HAS **NEVER** BEEN ASSIGNEE
			@ASSIGNEE_REC_ADDED BIT,
			@ASSIGNMENT_COMPLETED BIT,
			@PROOFING_APPROVE_STATUS_ID INT,
			@PROOFING_REJECT_STATUS_ID INT,
			@PROOFING_DEFER_STATUS_ID INT,
			@APPROVE_COUNT INT,
			@DEFER_COUNT INT,
			@REJECT_COUNT INT,
			@TOTAL_APPROVERS INT,
			@TOTAL_REJECTED INT,
			@PROOFING_TEXT VARCHAR(256),
			@ADD_PROOFING_STATUS_COMMENT BIT,			
			@ERROR INT,
			@CTR INT,
			@CURR_EMP_CODE VARCHAR(6),
			@PROOFING_COMMENT_ID INT,
			@REOPEN_TEXT VARCHAR(100)
		;
		DECLARE @NEXT_EMPS TABLE (ID INT IDENTITY, EMP_CODE VARCHAR(6))
		DECLARE @RESULTS TABLE (ALERT_ID INT,
						        IS_COMPLETING BIT,
							    IS_ROUTED BIT,
								IS_TASK BIT,
								IS_AUTO_ROUTE BIT,
								ASSIGN_FULLY_COMPLETED BIT,
								INITIAL_ALRT_NOTIFY_HDR_ID INT,
								INITIAL_ALERT_STATE_ID INT,
								FINAL_ALRT_NOTIFY_HDR_ID INT,
								FINAL_ALERT_STATE_ID INT,
								AUTO_ROUTE_CHANGED_STATE BIT,
								CURRENT_ASSIGNESS_STRING VARCHAR(MAX),
								IS_PROOF BIT);
	END
	-- INIT
	BEGIN
		SELECT 
			@ASSIGNMENT_STARTED_ON_LAST_STATE = 0,
			@ASSIGNMENT_MOVING_TO_LAST_STATE = 0,
			@STARTING_ALRT_NOTIFY_HDR_ID = 0,
			@STARTING_ALERT_STATE_ID = 0,
			@CURR_ALRT_NOTIFY_HDR_ID = 0,
			@CURR_ALERT_STATE_ID = 0,
			@CURR_DFLT_ALERT_STATE_ID = 0,
			@CURR_DFLT_ALERT_STATE_NAME = '',
			@ALERT_LEVEL = '',
			@JOB_NUMBER = 0,
			@JOB_COMPONENT_NBR = 0,
			@TASK_SEQ_NBR = -1,
			@UNCOMPLETE = 0,
			@COMMENT = NULL,
			@LAST_COMMENT_ID = NULL,
			@COMMENT_ADDED = 0,
			@IS_ROUTED = 0,
			@AUTO_NXT_STATE = 0,
			@MOVE_TO_NEXT_STATE = 0,
			@MOVED_TO_NEXT_STATE = 0,
			@COMPLETE_ASSIGNMENT = 0,
			@CUSTODY_DATE = GETDATE(),
			@THIS_RCPT_ID = NULL,
			@ASSIGNEE_REC_ADDED = 0,
			@IS_CS_REVIEW = 0,
			@IS_PROOF = 0,
			@APPROVE_COUNT = 0,
			@DEFER_COUNT = 0,
			@REJECT_COUNT = 0,
			@ADD_PROOFING_STATUS_COMMENT = 0,
			@TOTAL_APPROVERS = 0
		;
		SELECT
			@PROOFING_APPROVE_STATUS_ID = 1,
			@PROOFING_REJECT_STATUS_ID = 2,
			@PROOFING_DEFER_STATUS_ID = 3
		; 
		SELECT 
			@EMP_FML = ISNULL([EMPLOYEE].EMP_FNAME+' ', '') + ISNULL([EMPLOYEE].EMP_MI+'. ', '') + ISNULL([EMPLOYEE].EMP_LNAME, ''),
			@EMAIL_ADDRESS = EMP_EMAIL
		FROM 
			[EMPLOYEE] WITH (NOLOCK)
		WHERE 
			EMP_CODE = @EMP_CODE;
		SELECT 
			@STARTING_ALRT_NOTIFY_HDR_ID = ISNULL(ALRT_NOTIFY_HDR_ID, 0),
			@STARTING_ALERT_STATE_ID = ISNULL(ALERT_STATE_ID, 0),
			@ALERT_LEVEL = ALERT_LEVEL,
			@JOB_NUMBER = ISNULL(JOB_NUMBER, 0),
			@JOB_COMPONENT_NBR = ISNULL(JOB_COMPONENT_NBR, 0),
			@TASK_SEQ_NBR = ISNULL(TASK_SEQ_NBR, -1),
			@ALERT_ASSIGNEE_EMP_CODE = ASSIGNED_EMP_CODE,
			@ASSIGNMENT_START_DATE = GENERATED,
			@ALERT_HOURS = HRS_ALLOWED,
			@IS_ROUTED =		CASE
									WHEN (A.ALRT_NOTIFY_HDR_ID IS NULL OR A.ALRT_NOTIFY_HDR_ID = 0) AND (A.ALERT_STATE_ID IS NULL OR A.ALERT_STATE_ID = 0) THEN 0
									ELSE CAST(1 AS BIT)
								END,
			@IS_CS_REVIEW =		CASE
									WHEN CS_REVIEW_ID IS NULL THEN CAST(0 AS BIT)
									ELSE CAST(1 AS BIT)
								END,
			@IS_PROOF =		CASE
								WHEN ALERT_CAT_ID = 79 THEN CAST(1 AS BIT)
								ELSE CAST(0 AS BIT)
							END
		FROM 
			ALERT A WITH (NOLOCK)
		WHERE 
			ALERT_ID = @ALERT_ID;
		SELECT 
			@CURR_ALRT_NOTIFY_HDR_ID = @STARTING_ALRT_NOTIFY_HDR_ID, 
			@CURR_ALERT_STATE_ID = @STARTING_ALERT_STATE_ID;
		SELECT
			@CURR_ALERT_STATE_NAME = S.ALERT_STATE_NAME
		FROM
			ALERT_STATES S WITH(NOLOCK)
		WHERE
			S.ALERT_STATE_ID = @CURR_ALERT_STATE_ID
		;
		--  RE-OPEN COMMENT
		IF @IS_PROOF IS NULL OR @IS_PROOF = 0
		BEGIN
			SELECT 
				@REOPEN_TEXT = 'RE-OPENED | '
			;
		END
		ELSE
		BEGIN
			SELECT 
				@REOPEN_TEXT = 'PROOF RE-OPENED | '
			;
		END
	END
	-- RESULT (INIT)
	BEGIN
		INSERT INTO @RESULTS (ALERT_ID, IS_ROUTED, INITIAL_ALRT_NOTIFY_HDR_ID, INITIAL_ALERT_STATE_ID, IS_TASK, AUTO_ROUTE_CHANGED_STATE, ASSIGN_FULLY_COMPLETED, IS_PROOF)
		SELECT
			A.ALERT_ID,
			@IS_ROUTED,
			A.ALRT_NOTIFY_HDR_ID,
			A.ALERT_STATE_ID,
			CASE
				WHEN A.ALERT_LEVEL = 'BRD' OR A.ALERT_CAT_ID = 71 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT)
			END,
			0,
			0,
			@IS_PROOF
		FROM
			ALERT A WITH(NOLOCK)
		WHERE
			A.ALERT_ID = @ALERT_ID;
	END
	-- IS ASSIGNEE
	BEGIN
		IF @IS_ROUTED = 1
		BEGIN
			IF EXISTS (SELECT 1 
					   FROM ALERT_RCPT AR WITH(NOLOCK) 
							INNER JOIN ALERT A WITH(NOLOCK) ON AR.ALERT_ID = A.ALERT_ID AND AR.ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID AND AR.ALERT_STATE_ID = A.ALERT_STATE_ID
					   WHERE 
							AR.ALERT_ID = @ALERT_ID AND AR.CURRENT_NOTIFY = 1
							AND NOT A.ALRT_NOTIFY_HDR_ID IS NULL AND NOT A.ALERT_STATE_ID IS NULL
							AND AR.EMP_CODE = @EMP_CODE
					   UNION
					   SELECT 1 
					   FROM ALERT_RCPT_DISMISSED ARD WITH(NOLOCK) 
							INNER JOIN ALERT A WITH(NOLOCK) ON ARD.ALERT_ID = A.ALERT_ID AND ARD.ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID AND ARD.ALERT_STATE_ID = A.ALERT_STATE_ID
					   WHERE 
							ARD.ALERT_ID = @ALERT_ID AND ARD.CURRENT_NOTIFY = 1
							AND NOT A.ALRT_NOTIFY_HDR_ID IS NULL AND NOT A.ALERT_STATE_ID IS NULL
							AND ARD.EMP_CODE = @EMP_CODE
					   	)
			BEGIN
				SELECT @IS_ASSIGNEE = 1;
			END
			ELSE
			BEGIN
				SELECT @IS_ASSIGNEE = 0;
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT 1 
					   FROM ALERT_RCPT AR WITH(NOLOCK) 
							INNER JOIN ALERT A WITH(NOLOCK) ON AR.ALERT_ID = A.ALERT_ID 
					   WHERE 
							AR.ALERT_ID = @ALERT_ID AND AR.CURRENT_NOTIFY = 1
							AND A.ALRT_NOTIFY_HDR_ID IS NULL AND A.ALERT_STATE_ID IS NULL
							AND AR.ALRT_NOTIFY_HDR_ID IS NULL AND AR.ALERT_STATE_ID IS NULL
							AND AR.EMP_CODE = @EMP_CODE
					   UNION
					   SELECT 1 
					   FROM ALERT_RCPT_DISMISSED ARD WITH(NOLOCK) 
							INNER JOIN ALERT A WITH(NOLOCK) ON ARD.ALERT_ID = A.ALERT_ID 
					   WHERE 
							ARD.ALERT_ID = @ALERT_ID AND ARD.CURRENT_NOTIFY = 1
							AND A.ALRT_NOTIFY_HDR_ID IS NULL AND A.ALERT_STATE_ID IS NULL
							AND ARD.ALRT_NOTIFY_HDR_ID IS NULL AND ARD.ALERT_STATE_ID IS NULL
							AND ARD.EMP_CODE = @EMP_CODE
					   	)
			BEGIN
				SELECT @IS_ASSIGNEE = 1;
			END
			ELSE
			BEGIN
				SELECT @IS_ASSIGNEE = 0;
			END
		END
	END
	-- COMPLETING OR UN-COMPLETING
	BEGIN
		IF @IS_ASSIGNEE = 1
		BEGIN
			IF @IS_ROUTED = 1
			BEGIN
				SELECT 
					@UNCOMPLETE = COUNT(1)
				FROM 
					ALERT_RCPT_DISMISSED D WITH (NOLOCK)
				WHERE 
					D.ALERT_ID = @ALERT_ID
					AND D.EMP_CODE = @EMP_CODE
					AND D.CURRENT_NOTIFY = 1
					AND D.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
					AND D.ALERT_STATE_ID = @CURR_ALERT_STATE_ID;
			END
			ELSE
			BEGIN
				SELECT 
					@UNCOMPLETE = COUNT(1)
				FROM 
					ALERT_RCPT_DISMISSED WITH (NOLOCK)
				WHERE 
					ALERT_ID = @ALERT_ID
					AND EMP_CODE = @EMP_CODE
					AND CURRENT_NOTIFY = 1;
			END
		END
		ELSE
		BEGIN
			-- NON ASSIGNEE IS TRYING TO RE-OPEN FOR ALL
			SELECT @UNCOMPLETE = 1;
		END
	END
	-- RESULT
	BEGIN
		IF @IS_PROOF = 1
		BEGIN
			IF @IS_ROUTED = 0
			BEGIN
				--  TOTAL APPROVED
				BEGIN
					SELECT @APPROVE_COUNT = COUNT(1) 
					FROM 
						ALERT_RCPT_DISMISSED D WITH(NOLOCK)
					WHERE 
						D.ALERT_ID = @ALERT_ID 
						AND D.CURRENT_NOTIFY = 1 
						AND D.PROOFING_STATUS_ID = @PROOFING_APPROVE_STATUS_ID
					;
					IF @PROOFING_STATUS_ID = @PROOFING_APPROVE_STATUS_ID
					BEGIN
						SELECT @APPROVE_COUNT = ISNULL(@APPROVE_COUNT, 0) + 1;
					END		
				END
				--  TOTAL DEFERRED
				BEGIN
					SELECT @DEFER_COUNT = COUNT(1) 
					FROM 
						ALERT_RCPT_DISMISSED WITH(NOLOCK)
					WHERE 
						ALERT_ID = @ALERT_ID 
						AND CURRENT_NOTIFY = 1 
						AND PROOFING_STATUS_ID = @PROOFING_DEFER_STATUS_ID
					;
					IF @PROOFING_STATUS_ID = @PROOFING_DEFER_STATUS_ID
					BEGIN
						SELECT @DEFER_COUNT = ISNULL(@DEFER_COUNT, 0) + 1;
					END		
				END
				--  TOTAL REJECTED
				BEGIN
					SELECT @REJECT_COUNT = COUNT(1) 
					FROM 
						ALERT_RCPT_DISMISSED WITH(NOLOCK)
					WHERE 
						ALERT_ID = @ALERT_ID 
						AND CURRENT_NOTIFY = 1 
						AND PROOFING_STATUS_ID = @PROOFING_REJECT_STATUS_ID
					;
					IF @PROOFING_STATUS_ID = @PROOFING_REJECT_STATUS_ID
					BEGIN
						SELECT @REJECT_COUNT = ISNULL(@REJECT_COUNT, 0) + 1;
					END		
				END
				--  TOTAL APPROVERS (ASSIGNEES)
				BEGIN
					SELECT @TOTAL_APPROVERS = (
						(SELECT COUNT(1) FROM ALERT_RCPT WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1)
						+ (SELECT COUNT(1) FROM ALERT_RCPT_DISMISSED WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1)
					)
				END
			END
			ELSE
			BEGIN
				--  TOTAL APPROVED
				BEGIN
					SELECT @APPROVE_COUNT = COUNT(1) 
					FROM 
						ALERT_RCPT_DISMISSED WITH(NOLOCK)
					WHERE 
						ALERT_ID = @ALERT_ID 
						AND CURRENT_NOTIFY = 1 
						AND PROOFING_STATUS_ID = @PROOFING_APPROVE_STATUS_ID
						AND ALRT_NOTIFY_HDR_ID = @STARTING_ALRT_NOTIFY_HDR_ID 
						AND ALERT_STATE_ID = @STARTING_ALERT_STATE_ID
					;
					IF @PROOFING_STATUS_ID = @PROOFING_APPROVE_STATUS_ID
					BEGIN
						SELECT @APPROVE_COUNT = ISNULL(@APPROVE_COUNT, 0) + 1;
					END		
				END
				--  TOTAL DEFERRED
				BEGIN
					SELECT @DEFER_COUNT = COUNT(1) 
					FROM 
						ALERT_RCPT_DISMISSED WITH(NOLOCK)
					WHERE 
						ALERT_ID = @ALERT_ID 
						AND CURRENT_NOTIFY = 1 
						AND PROOFING_STATUS_ID = @PROOFING_DEFER_STATUS_ID
						AND ALRT_NOTIFY_HDR_ID = @STARTING_ALRT_NOTIFY_HDR_ID 
						AND ALERT_STATE_ID = @STARTING_ALERT_STATE_ID
					;
					IF @PROOFING_STATUS_ID = @PROOFING_DEFER_STATUS_ID
					BEGIN
						SELECT @DEFER_COUNT = ISNULL(@DEFER_COUNT, 0) + 1;
					END		
				END
				--  TOTAL REJECTED
				BEGIN
					SELECT @REJECT_COUNT = COUNT(1) 
					FROM 
						ALERT_RCPT_DISMISSED WITH(NOLOCK)
					WHERE 
						ALERT_ID = @ALERT_ID 
						AND CURRENT_NOTIFY = 1 
						AND PROOFING_STATUS_ID = @PROOFING_REJECT_STATUS_ID
						AND ALRT_NOTIFY_HDR_ID = @STARTING_ALRT_NOTIFY_HDR_ID 
						AND ALERT_STATE_ID = @STARTING_ALERT_STATE_ID
					;
					IF @PROOFING_STATUS_ID = @PROOFING_REJECT_STATUS_ID
					BEGIN
						SELECT @REJECT_COUNT = ISNULL(@REJECT_COUNT, 0) + 1;
					END		
				END
				--  TOTAL APPROVERS (ASSIGNEES)
				BEGIN
					SELECT @TOTAL_APPROVERS = (
						(SELECT COUNT(1) FROM ALERT_RCPT WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1 AND ALRT_NOTIFY_HDR_ID = @STARTING_ALRT_NOTIFY_HDR_ID AND ALERT_STATE_ID = @STARTING_ALERT_STATE_ID)
						+ (SELECT COUNT(1) FROM ALERT_RCPT_DISMISSED WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1 AND ALRT_NOTIFY_HDR_ID = @STARTING_ALRT_NOTIFY_HDR_ID AND ALERT_STATE_ID = @STARTING_ALERT_STATE_ID)
					)
				END
			END
		END
		--  PROOF CAN ONLY UNCOMPLETE WHEN MOVING TO NEXT STATE
		IF @UNCOMPLETE = 0 OR @UNCOMPLETE IS NULL OR @IS_PROOF = 1 
		BEGIN
			UPDATE @RESULTS SET IS_COMPLETING = 1;
		END
		ELSE
		BEGIN
			UPDATE @RESULTS SET IS_COMPLETING = 0;
		END
	END
	--  STATE INFO FOR ROUTED
	IF @IS_ROUTED = 1
	BEGIN
		--  GET LAST STATE
		BEGIN
			SELECT TOP 1 @LAST_STATE_ID = ANS.ALERT_STATE_ID 
			FROM 
				ALERT_NOTIFY_STATES ANS WITH(NOLOCK) 
				INNER JOIN ALERT_STATES A WITH(NOLOCK) ON ANS.ALERT_STATE_ID = A.ALERT_STATE_ID
			WHERE 
				ANS.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
				AND A.ACTIVE_FLAG = 1
			ORDER BY 
				ANS.SORT_ORDER DESC;
		END
		-- GET COMPLETED STATE
		BEGIN
			SELECT 
				@COMPLETED_STATE_ID = ISNULL(ALERT_NOTIFY_STATES.ALERT_STATE_ID , 0) , 
				@COMPLETED_STATE_NAME = ISNULL(ALERT_STATES.ALERT_STATE_NAME , '')
			FROM 
				ALERT_NOTIFY_STATES WITH (NOLOCK) 
				INNER JOIN ALERT_STATES WITH (NOLOCK) ON ALERT_NOTIFY_STATES.ALERT_STATE_ID = ALERT_STATES.ALERT_STATE_ID
			WHERE 
				ALERT_NOTIFY_STATES.IS_COMPLETED = 1
				AND ALERT_NOTIFY_STATES.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID;
		END
		--	CHECK AUTO-ROUTE
		BEGIN
			IF @CURR_ALRT_NOTIFY_HDR_ID > 0 AND @CURR_ALERT_STATE_ID > 0 
			BEGIN
				SELECT 
					@AUTO_NXT_STATE = ISNULL(AUTO_NXT_STATE, 0)
				FROM
					ALERT_NOTIFY_HDR A WITH (NOLOCK)
				WHERE
					A.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID;						
			END
			IF @IS_PROOF = 1
			BEGIN -- PROOFING ALWAYS AUTO
				SELECT
					@AUTO_NXT_STATE = 1;
			END
			IF @AUTO_NXT_STATE = 1
			BEGIN
				--  If Proof, move to next state when everyone has marked approve or defer
				--  If everyone has weighed in and there is one (or more) reject then???
				SET @ACTIVE_ASSIGNEE_COUNT = 0;
				IF @IS_PROOF IS NULL OR @IS_PROOF = 0 -- NON-PROOF (DEFAULT) PATH
				BEGIN
					-- SEE IF THERE IS ONLY ONE ASSIGNEE LEFT AT CURRENT STATE
					SELECT 
						@ACTIVE_ASSIGNEE_COUNT = COUNT(1) 
					FROM 
						ALERT_RCPT WITH (NOLOCK)
					WHERE 
						ALERT_ID = @ALERT_ID 
						AND CURRENT_NOTIFY = 1 
						AND ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
						AND ALERT_STATE_ID = @CURR_ALERT_STATE_ID;
					--  SEE IF THAT LAST ASSIGNEE IS THIS ASSIGNEE THAT CLICKED DISMISSED
					IF @ACTIVE_ASSIGNEE_COUNT = 1
					BEGIN
						SET @ACTIVE_ASSIGNEE_COUNT = 0;
						SELECT 
							@ACTIVE_ASSIGNEE_COUNT = COUNT(1) 
						FROM 
							ALERT_RCPT WITH (NOLOCK) 
						WHERE 
							ALERT_ID = @ALERT_ID 
							AND CURRENT_NOTIFY = 1 
							AND EMP_CODE = @EMP_CODE 
							AND ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
							AND ALERT_STATE_ID = @CURR_ALERT_STATE_ID;
						IF @ACTIVE_ASSIGNEE_COUNT = 1
						BEGIN
							SELECT @MOVE_TO_NEXT_STATE = 1;
						END
					END
				END
				ELSE
				BEGIN  
					-- SEE IF THERE IS ONLY ONE ASSIGNEE LEFT AT CURRENT STATE
					SELECT 
						@ACTIVE_ASSIGNEE_COUNT = COUNT(1) 
					FROM 
						ALERT_RCPT AR WITH (NOLOCK)
					WHERE 
						AR.ALERT_ID = @ALERT_ID 
						AND AR.CURRENT_NOTIFY = 1 
						AND AR.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
						AND AR.ALERT_STATE_ID = @CURR_ALERT_STATE_ID
					;
					--  SEE IF THAT LAST ASSIGNEE IS THIS ASSIGNEE THAT CLICKED TO SET STATUS
					IF @ACTIVE_ASSIGNEE_COUNT = 1
					BEGIN
						SET @ACTIVE_ASSIGNEE_COUNT = 0;
						SELECT 
							@ACTIVE_ASSIGNEE_COUNT = COUNT(1) 
						FROM 
							ALERT_RCPT AR WITH (NOLOCK) 
						WHERE 
							AR.ALERT_ID = @ALERT_ID 
							AND AR.CURRENT_NOTIFY = 1 
							AND AR.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
							AND AR.ALERT_STATE_ID = @CURR_ALERT_STATE_ID
							AND AR.EMP_CODE = @EMP_CODE 
						;
						IF @ACTIVE_ASSIGNEE_COUNT = 1 AND @PROOFING_STATUS_ID <> @PROOFING_REJECT_STATUS_ID
						BEGIN
							SELECT @MOVE_TO_NEXT_STATE = 1;
						END
						IF @PROOFING_STATUS_ID = @PROOFING_REJECT_STATUS_ID
						BEGIN
							SELECT @MOVE_TO_NEXT_STATE = 0;
						END
						--  RE-CHECK TOTAL REJECTED
						IF @MOVE_TO_NEXT_STATE = 1
						BEGIN
							SELECT @REJECT_COUNT = COUNT(1) 
							FROM 
								ALERT_RCPT_DISMISSED WITH(NOLOCK)
							WHERE 
								ALERT_ID = @ALERT_ID 
								AND CURRENT_NOTIFY = 1 
								AND PROOFING_STATUS_ID = @PROOFING_REJECT_STATUS_ID
								AND ALRT_NOTIFY_HDR_ID = @STARTING_ALRT_NOTIFY_HDR_ID 
								AND ALERT_STATE_ID = @STARTING_ALERT_STATE_ID
							;
							IF @PROOFING_STATUS_ID = @PROOFING_REJECT_STATUS_ID
							BEGIN
								SELECT @REJECT_COUNT = ISNULL(@REJECT_COUNT, 0) + 1;
							END		
							IF @REJECT_COUNT > 0
							BEGIN
								SELECT @MOVE_TO_NEXT_STATE = 0;
							END
						END
					END
				END
			END
		END
		-- RESULT
		BEGIN
			IF @AUTO_NXT_STATE IS NULL OR @AUTO_NXT_STATE = 0
			BEGIN	
				UPDATE @RESULTS SET IS_AUTO_ROUTE = 0;
			END
			ELSE
			BEGIN
				UPDATE @RESULTS SET IS_AUTO_ROUTE = 1;
			END
		END
	END
	--	COMPLETE OR RE-OPEN (If Proof, setting status always "complete/dismisses" record)
	IF @UNCOMPLETE = 0 OR @UNCOMPLETE IS NULL	--	COMPLETE
	BEGIN
		IF @IS_ROUTED = 1
		BEGIN
			-- SEE IF THIS EMP ALREADY HAS A DISMISSED RECORD
			SELECT @THIS_RCPT_ID = ALERT_RCPT_ID FROM ALERT_RCPT_DISMISSED WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @EMP_CODE AND CURRENT_NOTIFY = 1;
			-- ASSIGNEE ALREADY ASSIGNED, DID NOT COMPLETE, AND STILL ASSIGNED AT NEW STATE
			IF NOT @THIS_RCPT_ID IS NULL AND @THIS_RCPT_ID > 0
			BEGIN
				IF @IS_PROOF IS NULL OR @IS_PROOF = 0
				BEGIN
					UPDATE ALERT_RCPT_DISMISSED WITH(ROWLOCK)
					SET
						ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID,
						ALERT_STATE_ID = @CURR_ALERT_STATE_ID
					WHERE
						ALERT_ID = @ALERT_ID
						AND CURRENT_NOTIFY = 1
						AND EMP_CODE = @EMP_CODE
						AND ALERT_RCPT_ID = @THIS_RCPT_ID;
				END
				ELSE
				BEGIN
					UPDATE ALERT_RCPT_DISMISSED WITH(ROWLOCK)
					SET
						ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID,
						ALERT_STATE_ID = @CURR_ALERT_STATE_ID,
						PROOFING_STATUS_ID = @PROOFING_STATUS_ID
					WHERE
						ALERT_ID = @ALERT_ID
						AND CURRENT_NOTIFY = 1
						AND EMP_CODE = @EMP_CODE
						AND ALERT_RCPT_ID = @THIS_RCPT_ID;
				END
			END
			ELSE
			BEGIN
				SELECT @THIS_RCPT_ID = NULL;
				SELECT @MAX_RCPT_ID = MAX(ALERT_RCPT_ID) FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = @ALERT_ID;
				SELECT @MAX_RCPT_ID = ISNULL(@MAX_RCPT_ID, 0) + 1;
				IF @IS_PROOF IS NULL OR @IS_PROOF = 0
				BEGIN
					INSERT INTO ALERT_RCPT_DISMISSED WITH(ROWLOCK) (
						ALERT_ID,
						ALERT_RCPT_ID,
						EMP_CODE,
						EMAIL_ADDRESS,
						PROCESSED,
						NEW_ALERT,
						READ_ALERT,
						CURRENT_RCPT,
						CURRENT_NOTIFY,
						ALRT_NOTIFY_HDR_ID,
						ALERT_STATE_ID,
						HOURS_ALLOWED
					)
					SELECT 
						@ALERT_ID,
						@MAX_RCPT_ID,
						AR.EMP_CODE,
						AR.EMAIL_ADDRESS,
						@CUSTODY_DATE,
						AR.NEW_ALERT,
						AR.READ_ALERT,
						AR.CURRENT_RCPT,
						AR.CURRENT_NOTIFY,
						AR.ALRT_NOTIFY_HDR_ID,
						AR.ALERT_STATE_ID,
						HOURS_ALLOWED
					FROM ALERT_RCPT AR
					WHERE 
						AR.ALERT_ID = @ALERT_ID
						AND AR.CURRENT_NOTIFY = 1
						AND AR.EMP_CODE = @EMP_CODE;
				END
				ELSE
				BEGIN
					INSERT INTO ALERT_RCPT_DISMISSED WITH(ROWLOCK) (
						ALERT_ID,
						ALERT_RCPT_ID,
						EMP_CODE,
						EMAIL_ADDRESS,
						PROCESSED,
						NEW_ALERT,
						READ_ALERT,
						CURRENT_RCPT,
						CURRENT_NOTIFY,
						ALRT_NOTIFY_HDR_ID,
						ALERT_STATE_ID,
						HOURS_ALLOWED,
						PROOFING_STATUS_ID
					)
					SELECT 
						@ALERT_ID,
						@MAX_RCPT_ID,
						AR.EMP_CODE,
						AR.EMAIL_ADDRESS,
						@CUSTODY_DATE,
						AR.NEW_ALERT,
						AR.READ_ALERT,
						AR.CURRENT_RCPT,
						AR.CURRENT_NOTIFY,
						AR.ALRT_NOTIFY_HDR_ID,
						AR.ALERT_STATE_ID,
						HOURS_ALLOWED,
						@PROOFING_STATUS_ID
					FROM ALERT_RCPT AR
					WHERE 
						AR.ALERT_ID = @ALERT_ID
						AND AR.CURRENT_NOTIFY = 1
						AND AR.EMP_CODE = @EMP_CODE
					;
					SELECT @ADD_PROOFING_STATUS_COMMENT = 1;
					-- PROOFING COMMENT
					BEGIN
						IF @PROOFING_STATUS_ID = @PROOFING_APPROVE_STATUS_ID
						BEGIN
							SELECT @PROOFING_TEXT = 'APPROVED';
						END
						IF @PROOFING_STATUS_ID = @PROOFING_REJECT_STATUS_ID
						BEGIN
							SELECT @PROOFING_TEXT = 'REJECTED';
						END
						IF @PROOFING_STATUS_ID = @PROOFING_DEFER_STATUS_ID
						BEGIN
							SELECT @PROOFING_TEXT = 'DEFERRED';
						END
						INSERT INTO ALERT_COMMENT (ALERT_ID, USER_CODE, GENERATED_DATE, COMMENT, EMAILSENT, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, CUSTODY_START, 
												   ASSIGNED_EMP_CODE, PROOFING_STATUS_ID, DOCUMENT_ID, IS_SYSTEM)
						SELECT 
							@ALERT_ID,
							@USER_CODE,
							@CUSTODY_DATE,
							UPPER(@CURR_ALERT_STATE_NAME) + ' | ' + UPPER(@PROOFING_TEXT) + ' | ' + ISNULL(E.EMP_FNAME + ' ', '') + ISNULL(E.EMP_MI + '. ', '') + E.EMP_LNAME,
							0,
							@CURR_ALRT_NOTIFY_HDR_ID,
							@CURR_ALERT_STATE_ID,
							NULL,
							NULL,
							@PROOFING_STATUS_ID,
							@DOCUMENT_ID, 
							0
						FROM 
							EMPLOYEE_CLOAK E WITH(NOLOCK)
						WHERE 
							E.EMP_CODE = @EMP_CODE;		
						--SELECT @PROOFING_COMMENT_ID = @@IDENTITY;
					END
				END
			END
			--	DELETE COMPLETE FROM MAIN TABLE
			BEGIN
				DELETE FROM ALERT_RCPT WITH(ROWLOCK)
				WHERE 
					ALERT_ID = @ALERT_ID
					AND CURRENT_NOTIFY = 1
					AND EMP_CODE = @EMP_CODE;
			END
			--  BE SURE WE GET MOST CURRENT
			BEGIN
				SELECT 
					@CURR_ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID,
					@CURR_ALERT_STATE_ID = A.ALERT_STATE_ID,
					@CURR_ALERT_STATE_NAME = S.ALERT_STATE_NAME
				FROM 
					ALERT A WITH(NOLOCK)
					LEFT OUTER JOIN ALERT_STATES S WITH(NOLOCK) ON A.ALERT_STATE_ID = S.ALERT_STATE_ID
				WHERE 
					A.ALERT_ID = @ALERT_ID;
			END
			-- UPDATE CUSTODY
			BEGIN
				--IF @PROOFING_COMMENT_ID IS NULL
				BEGIN
					UPDATE ALERT_COMMENT
					SET CUSTODY_END = @CUSTODY_DATE
					WHERE
						ALERT_ID = @ALERT_ID
						AND ASSIGNED_EMP_CODE = @EMP_CODE
						AND CUSTODY_START IS NOT NULL
						AND CUSTODY_END IS NULL
						AND COMMENT NOT LIKE 'COMPLETED%'
					;
				END
				BEGIN
					IF @IS_PROOF = 1
					BEGIN
						-- CLEAN UP PROOFING COMPLETED COMMENT(S)
						UPDATE ALERT_COMMENT
						SET CUSTODY_START = NULL, CUSTODY_END = NULL
						WHERE
							ALERT_ID = @ALERT_ID
							--AND CUSTODY_START IS NOT NULL
							--AND CUSTODY_END IS NULL
							AND COMMENT LIKE 'COMPLETED%'
					END

				END
				--ELSE
				--BEGIN
				--	UPDATE ALERT_COMMENT
				--	SET CUSTODY_END = @CUSTODY_DATE
				--	WHERE
				--		ALERT_ID = @ALERT_ID
				--		AND ASSIGNED_EMP_CODE = @EMP_CODE
				--		AND CUSTODY_START IS NOT NULL
				--		AND CUSTODY_END IS NULL
				--		AND COMMENT NOT LIKE 'COMPLETED%'
				--		AND COMMENT_ID <> @PROOFING_COMMENT_ID
				--	;
				--END
			END				
		END
		ELSE
		BEGIN
			--	NON ROUTED
			IF EXISTS (SELECT ALERT_ID FROM ALERT_RCPT WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @EMP_CODE AND CURRENT_NOTIFY = 1 AND ALRT_NOTIFY_HDR_ID IS NULL AND ALERT_STATE_ID IS NULL)
			BEGIN
				IF NOT EXISTS (SELECT ALERT_ID FROM ALERT_RCPT_DISMISSED WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @EMP_CODE AND CURRENT_NOTIFY = 1 AND ALRT_NOTIFY_HDR_ID IS NULL AND ALERT_STATE_ID IS NULL)
				BEGIN
					SELECT @THIS_RCPT_ID = NULL;
					SELECT @MAX_RCPT_ID = MAX(ALERT_RCPT_ID) FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = @ALERT_ID;
					SELECT @MAX_RCPT_ID = ISNULL(@MAX_RCPT_ID, 0) + 1;
					IF @IS_PROOF IS NULL OR @IS_PROOF = 0
					BEGIN
						INSERT INTO ALERT_RCPT_DISMISSED WITH(ROWLOCK) (
							ALERT_ID,
							ALERT_RCPT_ID,
							EMP_CODE,
							EMAIL_ADDRESS,
							PROCESSED,
							NEW_ALERT,
							READ_ALERT,
							CURRENT_RCPT,
							CURRENT_NOTIFY,
							ALRT_NOTIFY_HDR_ID,
							ALERT_STATE_ID,
							COMPLETED_DATE,
							HOURS_ALLOWED
						)
						SELECT 
							@ALERT_ID,
							@MAX_RCPT_ID,
							AR.EMP_CODE,
							AR.EMAIL_ADDRESS,
							@CUSTODY_DATE,
							AR.NEW_ALERT,
							AR.READ_ALERT,
							AR.CURRENT_RCPT,
							AR.CURRENT_NOTIFY,
							AR.ALRT_NOTIFY_HDR_ID,
							AR.ALERT_STATE_ID,
							@CUSTODY_DATE,
							AR.HOURS_ALLOWED
						FROM 
							ALERT_RCPT AR
						WHERE 
							AR.ALERT_ID = @ALERT_ID
							AND AR.CURRENT_NOTIFY = 1
							AND AR.EMP_CODE = @EMP_CODE;
					END
					ELSE
					BEGIN
						INSERT INTO ALERT_RCPT_DISMISSED WITH(ROWLOCK) (
							ALERT_ID,
							ALERT_RCPT_ID,
							EMP_CODE,
							EMAIL_ADDRESS,
							PROCESSED,
							NEW_ALERT,
							READ_ALERT,
							CURRENT_RCPT,
							CURRENT_NOTIFY,
							ALRT_NOTIFY_HDR_ID,
							ALERT_STATE_ID,
							COMPLETED_DATE,
							HOURS_ALLOWED,
							PROOFING_STATUS_ID
						)
						SELECT 
							@ALERT_ID,
							@MAX_RCPT_ID,
							AR.EMP_CODE,
							AR.EMAIL_ADDRESS,
							@CUSTODY_DATE,
							AR.NEW_ALERT,
							AR.READ_ALERT,
							AR.CURRENT_RCPT,
							AR.CURRENT_NOTIFY,
							AR.ALRT_NOTIFY_HDR_ID,
							AR.ALERT_STATE_ID,
							@CUSTODY_DATE,
							AR.HOURS_ALLOWED,
							@PROOFING_STATUS_ID
						FROM 
							ALERT_RCPT AR
						WHERE 
							AR.ALERT_ID = @ALERT_ID
							AND AR.CURRENT_NOTIFY = 1
							AND AR.EMP_CODE = @EMP_CODE;
						SELECT @ADD_PROOFING_STATUS_COMMENT = 1;
						-- PROOFING COMMENT
						BEGIN
							IF @PROOFING_STATUS_ID = @PROOFING_APPROVE_STATUS_ID
							BEGIN
								SELECT @PROOFING_TEXT = 'APPROVED';
							END
							IF @PROOFING_STATUS_ID = @PROOFING_REJECT_STATUS_ID
							BEGIN
								SELECT @PROOFING_TEXT = 'REJECTED';
							END
							IF @PROOFING_STATUS_ID = @PROOFING_DEFER_STATUS_ID
							BEGIN
								SELECT @PROOFING_TEXT = 'DEFERRED';
							END
							INSERT INTO ALERT_COMMENT (ALERT_ID, USER_CODE, GENERATED_DATE, COMMENT, EMAILSENT, 
													   ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, CUSTODY_START, ASSIGNED_EMP_CODE, DOCUMENT_ID, IS_SYSTEM, PROOFING_STATUS_ID)
							SELECT 
								@ALERT_ID,
								@USER_CODE,
								@CUSTODY_DATE,
								UPPER(@PROOFING_TEXT) + ' | ' + ISNULL(E.EMP_FNAME + ' ', '') + ISNULL(E.EMP_MI + '. ', '') + E.EMP_LNAME,
								0,
								@CURR_ALRT_NOTIFY_HDR_ID,
								@CURR_ALERT_STATE_ID,
								NULL,
								NULL,
								@DOCUMENT_ID,
								0,
								@PROOFING_STATUS_ID
							FROM 
								EMPLOYEE_CLOAK E WITH(NOLOCK)
							WHERE 
								E.EMP_CODE = @EMP_CODE;		
							--SELECT @PROOFING_COMMENT_ID = @@IDENTITY;
						END
					END
					--	DELETE COMPLETE FROM MAIN TABLE
					DELETE FROM ALERT_RCPT WITH(ROWLOCK)
					WHERE 
						ALERT_ID = @ALERT_ID
						AND CURRENT_NOTIFY = 1
						AND EMP_CODE = @EMP_CODE;
					--  UPDATE CUSTODY END FOR EMPLOYEE'S LAST
					BEGIN
						--IF @PROOFING_COMMENT_ID IS NULL
						--BEGIN
						UPDATE ALERT_COMMENT
						SET CUSTODY_END = @CUSTODY_DATE
						WHERE
							ALERT_ID = @ALERT_ID
							AND ASSIGNED_EMP_CODE = @EMP_CODE
							AND CUSTODY_START IS NOT NULL
							AND CUSTODY_END IS NULL
							AND COMMENT NOT LIKE 'COMPLETED%'
							;
						--END
						--ELSE
						--BEGIN
						--	UPDATE ALERT_COMMENT
						--	SET CUSTODY_END = @CUSTODY_DATE
						--	WHERE
						--		ALERT_ID = @ALERT_ID
						--		AND ASSIGNED_EMP_CODE = @EMP_CODE
						--		AND CUSTODY_START IS NOT NULL
						--		AND CUSTODY_END IS NULL
						--		AND COMMENT NOT LIKE 'COMPLETED%'
						--		AND COMMENT_ID <> @PROOFING_COMMENT_ID
						--	;
						--END
					END				
				END
			END
		END
		--	SEE IF SHOULD FULL COMPLETE OR MOVE NEXT
		IF @IS_ROUTED = 1
		BEGIN
			IF EXISTS ( SELECT 1 
						FROM ALERT_RCPT AR WITH(NOLOCK) 
							INNER JOIN ALERT A WITH(NOLOCK) ON AR.ALERT_ID = A.ALERT_ID 
								AND AR.ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID 
								AND AR.ALERT_STATE_ID = A.ALERT_STATE_ID 
						WHERE 
							AR.ALERT_ID = @ALERT_ID 
							AND AR.CURRENT_NOTIFY = 1) 
			BEGIN 
				SELECT @HAS_MORE_ASSIGNEES = CAST(1 AS BIT); 
			END 
			ELSE 
			BEGIN 
				SELECT @HAS_MORE_ASSIGNEES = CAST(0 AS BIT); 
			END
		END
		ELSE
		BEGIN
			IF EXISTS ( SELECT 1 
						FROM ALERT_RCPT AR WITH(NOLOCK) 
							INNER JOIN ALERT A WITH(NOLOCK) ON AR.ALERT_ID = A.ALERT_ID 
						WHERE 
							AR.ALERT_ID = @ALERT_ID 
							AND AR.CURRENT_NOTIFY = 1) 
			BEGIN 
				SELECT @HAS_MORE_ASSIGNEES = CAST(1 AS BIT); 
			END 
			ELSE 
			BEGIN 
				SELECT @HAS_MORE_ASSIGNEES = CAST(0 AS BIT); 
			END
		END
		--  IF NOT ROUTED, SEE IF SHOULD FULLY COMPLETE
		IF @IS_ROUTED = 0
		BEGIN
			IF @IS_PROOF IS NULL OR @IS_PROOF = 0
			BEGIN
				IF @HAS_MORE_ASSIGNEES = 0
				BEGIN
					SET @COMPLETE_ASSIGNMENT = 1;
				END
				ELSE
				BEGIN
					SET @COMPLETE_ASSIGNMENT = 0;
				END
			END
			ELSE
			BEGIN
				--	NEVER AUTOMATICALLY COMPLETE WHEN IT'S A PROOF
				SELECT @COMPLETE_ASSIGNMENT = 0;
			END
		END
		ELSE --  ROUTED
		BEGIN
			IF @IS_PROOF = 1
			BEGIN
				--	NEVER AUTOMATICALLY COMPLETE WHEN IT'S A PROOF
				SELECT @COMPLETE_ASSIGNMENT = 0;
			END
			IF @MOVE_TO_NEXT_STATE = 1 
			BEGIN
				--GET NEXT STATE
				SELECT 
					@CURR_STATE_SORT_ORDER = SORT_ORDER 
				FROM 
					ALERT_NOTIFY_STATES WITH(NOLOCK)
				WHERE 
					ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
					AND ALERT_STATE_ID = @CURR_ALERT_STATE_ID;
				SELECT @NEXT_STATE_ID = (
										SELECT 
											TOP 1 ANS.ALERT_STATE_ID
										FROM 
											ALERT_NOTIFY_STATES ANS WITH(NOLOCK)
											INNER JOIN ALERT_STATES A WITH(NOLOCK) ON ANS.ALERT_STATE_ID = A.ALERT_STATE_ID
										WHERE 
											ANS.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
											AND ANS.SORT_ORDER > @CURR_STATE_SORT_ORDER
											AND A.ACTIVE_FLAG = 1
										ORDER BY 
											ANS.SORT_ORDER);
				IF NOT @NEXT_STATE_ID IS NULL AND @NEXT_STATE_ID > 0
				BEGIN
					DECLARE	@MOVE_RESULT TABLE (MOVED_TO_NEXT_STATE BIT, NEXT_STATE_NAME VARCHAR(200), ASSIGNEES_PROCESSED INT)
					INSERT INTO @MOVE_RESULT
					EXEC [dbo].[advsp_alert_assignment_move_to_next_state] @USER_CODE, @ALERT_ID, @NEXT_STATE_ID, @CUSTODY_DATE, @DOCUMENT_ID;
					SELECT
						@MOVED_TO_NEXT_STATE = M.MOVED_TO_NEXT_STATE,
						@NEXT_STATE_NAME = M.NEXT_STATE_NAME
					FROM
						@MOVE_RESULT M
					;
				END
			END
			IF @MOVED_TO_NEXT_STATE = 0
			BEGIN
				IF @IS_PROOF IS NULL OR @IS_PROOF = 0
				BEGIN
					IF @HAS_MORE_ASSIGNEES = 0 
					BEGIN
						SET @COMPLETE_ASSIGNMENT = 1;
					END
				END
				ELSE
				BEGIN
					SET @COMPLETE_ASSIGNMENT = 0;
				END
			END
		END
		-- RESULT
		BEGIN
			UPDATE @RESULTS SET AUTO_ROUTE_CHANGED_STATE = ISNULL(@MOVED_TO_NEXT_STATE, 0);
		END
		--	FULLY COMPLETE
		IF @IS_PROOF = 1
		BEGIN
			SELECT @COMPLETE_ASSIGNMENT = 0;
		END
		IF @COMPLETE_ASSIGNMENT = 1
		BEGIN
			-- COMPLETE THE ASSIGNMENT REC
			BEGIN
				UPDATE ALERT WITH(ROWLOCK)
				SET
					ASSIGN_COMPLETED = 1,
					LAST_UPDATED = @CUSTODY_DATE,
					LAST_UPDATED_USER_CODE = @USER_CODE,
					LAST_UPDATED_FML = @EMP_FML
				WHERE 
					ALERT_ID = @ALERT_ID;
				SET @ASSIGNMENT_COMPLETED = 1;
			END
			--	UPDATE RESULT
			BEGIN
				UPDATE @RESULTS SET ASSIGN_FULLY_COMPLETED = 1
			END
			--  CLEAN UP ANY ASSIGNEES
			BEGIN TRY
				DECLARE @CLEAN_UP TABLE (ID INT IDENTITY, ALERT_ID INT, ALERT_RCPT_ID INT, EMP_CODE VARCHAR(6));
				DECLARE
					@CLEAN_UP_COUNT INT,
					@CLEAN_UP_EMP_CODE VARCHAR(6)
				INSERT INTO @CLEAN_UP (ALERT_ID, ALERT_RCPT_ID, EMP_CODE)
				SELECT 
					@ALERT_ID,
					AR.ALERT_RCPT_ID,
					AR.EMP_CODE
				FROM
					ALERT_RCPT AR
				WHERE
					ALERT_ID = @ALERT_ID
					AND CURRENT_NOTIFY = 1;
				SELECT @CLEAN_UP_COUNT = COUNT(1) FROM @CLEAN_UP;
				IF NOT @CLEAN_UP_COUNT IS NULL AND @CLEAN_UP_COUNT > 0
				BEGIN
					SELECT @MAX_RCPT_ID = MAX(ALERT_RCPT_ID) FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = @ALERT_ID;
					SELECT @MAX_RCPT_ID = ISNULL(@MAX_RCPT_ID, 0) + 1;
					SET @CTR = 0;
					WHILE @CTR < @CLEAN_UP_COUNT
					BEGIN
						SET @CTR = @CTR + 1;
						SELECT @CLEAN_UP_EMP_CODE = EMP_CODE FROM @CLEAN_UP WHERE ID = @CTR;
						INSERT INTO ALERT_RCPT_DISMISSED WITH(ROWLOCK) (
							ALERT_ID,
							ALERT_RCPT_ID,
							EMP_CODE,
							EMAIL_ADDRESS,
							PROCESSED,
							NEW_ALERT,
							READ_ALERT,
							CURRENT_RCPT,
							CURRENT_NOTIFY,
							ALRT_NOTIFY_HDR_ID,
							ALERT_STATE_ID,
							COMPLETED_DATE
						)
						SELECT 
							@ALERT_ID,
							@MAX_RCPT_ID + @CTR,
							AR.EMP_CODE,
							AR.EMAIL_ADDRESS,
							@CUSTODY_DATE,
							AR.NEW_ALERT,
							AR.READ_ALERT,
							AR.CURRENT_RCPT,
							AR.CURRENT_NOTIFY,
							AR.ALRT_NOTIFY_HDR_ID,
							AR.ALERT_STATE_ID,
							@CUSTODY_DATE
						FROM
							ALERT_RCPT AR
						WHERE
							ALERT_ID = @ALERT_ID
							AND CURRENT_NOTIFY = 1
							AND EMP_CODE = @CLEAN_UP_EMP_CODE;
						DELETE FROM ALERT_RCPT
						WHERE
							ALERT_ID = @ALERT_ID
							AND CURRENT_NOTIFY = 1
							AND EMP_CODE = @CLEAN_UP_EMP_CODE;
					END
				END
			END TRY
			BEGIN CATCH  
				SELECT @ERROR_MESSAGE = ERROR_MESSAGE();
			END CATCH
		END
		ELSE
		BEGIN
			IF @MOVED_TO_NEXT_STATE = 1
			BEGIN
				IF EXISTS ( SELECT 1 
							FROM ALERT_RCPT AR WITH(NOLOCK) 
								INNER JOIN ALERT A WITH(NOLOCK) ON AR.ALERT_ID = A.ALERT_ID AND AR.ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID AND AR.ALERT_STATE_ID = A.ALERT_STATE_ID 
							WHERE 
								AR.ALERT_ID = @ALERT_ID 
								AND AR.CURRENT_NOTIFY = 1) 
				BEGIN 
					SELECT @HAS_MORE_ASSIGNEES = CAST(1 AS BIT); 
				END 
				ELSE 
				BEGIN 
					SELECT @HAS_MORE_ASSIGNEES = CAST(0 AS BIT); 
				END
				--  AUTOROUTE MOVED TO STATE WITH NO DEFAULT ASSIGNEES (AUTO UN-ASSIGN)
				IF @HAS_MORE_ASSIGNEES = 0
				BEGIN
					--  ADD COMMENT!
					INSERT INTO ALERT_COMMENT (ALERT_ID, USER_CODE, GENERATED_DATE, COMMENT, EMAILSENT, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, CUSTODY_START, ASSIGNED_EMP_CODE, DOCUMENT_ID, IS_SYSTEM)
					SELECT 
						@ALERT_ID,
						@USER_CODE,
						@CUSTODY_DATE,
						UPPER(@NEXT_STATE_NAME) + ' | UNASSIGNED | ',
						0,
						@CURR_ALRT_NOTIFY_HDR_ID,
						@NEXT_STATE_ID,
						NULL,
						NULL,
						@DOCUMENT_ID,
						1
				END
			END
		END
		--  COMPLETED STATE
		IF @COMPLETE_ASSIGNMENT = 1 AND (@ASSIGNMENT_COMPLETED IS NOT NULL AND @ASSIGNMENT_COMPLETED = 1) AND (@COMPLETED_STATE_ID IS NOT NULL AND @COMPLETED_STATE_ID > 0)
		BEGIN
			IF EXISTS ( SELECT 1 
						FROM ALERT_RCPT AR WITH(NOLOCK) 
							INNER JOIN ALERT A WITH(NOLOCK) ON AR.ALERT_ID = A.ALERT_ID 
						WHERE 
							AR.ALERT_ID = @ALERT_ID 
							AND AR.CURRENT_NOTIFY = 1) 
			BEGIN 
				SELECT @HAS_MORE_ASSIGNEES = CAST(1 AS BIT); 
			END 
			ELSE 
			BEGIN 
				SELECT @HAS_MORE_ASSIGNEES = CAST(0 AS BIT); 
			END
			IF @HAS_MORE_ASSIGNEES = 0
			BEGIN
				UPDATE ALERT WITH(ROWLOCK) SET ALERT_STATE_ID = @COMPLETED_STATE_ID
				WHERE
					ALERT_ID = @ALERT_ID;
				-- UPDATE THIS ASSIGNEE(S) WITH THE COMPLETED STATE ID SO THAT IF THIS ASSIGNEE RE-OPENS, HE/SHE IS ASSIGNED TO THE RE-OPENED ASSIGNMENT (?)
				BEGIN
					UPDATE ALERT_RCPT_DISMISSED SET ALERT_STATE_ID = @COMPLETED_STATE_ID
					WHERE
						ALERT_ID = @ALERT_ID
						AND CURRENT_NOTIFY = 1
						AND ALRT_NOTIFY_HDR_ID = @STARTING_ALRT_NOTIFY_HDR_ID
						AND (ALERT_STATE_ID = @STARTING_ALERT_STATE_ID OR EMP_CODE = @EMP_CODE);
				END
			END
		END
	END
    ELSE --	UN-COMPLETE (aka REOPEN, UNDISMISS)
    BEGIN
		UPDATE @RESULTS SET IS_COMPLETING = 0;
		SET @ASSIGNEE_REC_ADDED = 0;
        --	UPDATE STATUS IN ALERT TABLE
		BEGIN
			UPDATE ALERT WITH(ROWLOCK)
			SET
				ASSIGN_COMPLETED = NULL,
				BOARD_STATE_ID = NULL
			WHERE 
				ALERT_ID = @ALERT_ID;
		END
		-- CLEAR EXISTING SPRINT RECORDS 
		BEGIN
			DELETE FROM SPRINT_EMPLOYEE WITH(ROWLOCK)
			WHERE
				SPRINT_EMPLOYEE.ALERT_ID = @ALERT_ID;
			DELETE FROM SPRINT_DTL WITH(ROWLOCK)
			WHERE
				SPRINT_DTL.ALERT_ID = @ALERT_ID;
		END
		IF @IS_ASSIGNEE = 1
		BEGIN
			IF @IS_ROUTED = 0
			BEGIN
				SELECT @THIS_RCPT_ID = NULL;
				SELECT @THIS_RCPT_ID = ALERT_RCPT_ID FROM ALERT_RCPT WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @EMP_CODE AND CURRENT_NOTIFY = 1;
				IF NOT @THIS_RCPT_ID IS NULL AND @THIS_RCPT_ID > 0
				BEGIN
					-- OPEN RECORD ALREADY EXISTS; UPDATE IT
					BEGIN
						IF @IS_PROOF IS NULL OR @IS_PROOF = 0
						BEGIN
							UPDATE ALERT_RCPT WITH(ROWLOCK)
							SET
								COMPLETED_DATE = NULL,
								PROCESSED = NULL,
								READ_ALERT = NULL,
								NEW_ALERT = 1
							WHERE
								ALERT_ID = @ALERT_ID
								AND EMP_CODE = @EMP_CODE
								AND CURRENT_NOTIFY = 1
								AND ALERT_RCPT_ID = @THIS_RCPT_ID;
						END
						ELSE
						BEGIN
							UPDATE ALERT_RCPT WITH(ROWLOCK)
							SET
								COMPLETED_DATE = NULL,
								PROCESSED = NULL,
								READ_ALERT = NULL,
								NEW_ALERT = 1,
								PROOFING_STATUS_ID = NULL
							WHERE
								ALERT_ID = @ALERT_ID
								AND EMP_CODE = @EMP_CODE
								AND CURRENT_NOTIFY = 1
								AND ALERT_RCPT_ID = @THIS_RCPT_ID;
						END
						SET @ASSIGNEE_REC_ADDED = 1;
					END
				END
				ELSE
				BEGIN
					SELECT @MAX_RCPT_ID = MAX(ALERT_RCPT_ID) FROM ALERT_RCPT WHERE ALERT_ID = @ALERT_ID;
					SELECT @MAX_RCPT_ID = ISNULL(@MAX_RCPT_ID, 0) + 1;
					SELECT @THIS_RCPT_ID = NULL;
					SELECT @THIS_RCPT_ID = ALERT_RCPT_ID FROM ALERT_RCPT_DISMISSED WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @EMP_CODE AND CURRENT_NOTIFY = 1;
					IF NOT @THIS_RCPT_ID IS NULL AND @THIS_RCPT_ID > 0
					BEGIN
						BEGIN TRY
							IF @IS_PROOF IS NULL OR @IS_PROOF = 0
							BEGIN
								INSERT INTO ALERT_RCPT WITH(ROWLOCK) (ALERT_ID,
									ALERT_RCPT_ID,
									EMP_CODE,
									EMAIL_ADDRESS,
									PROCESSED,
									NEW_ALERT,
									READ_ALERT,
									CURRENT_RCPT,
									CURRENT_NOTIFY,
									COMPLETED_DATE,
									HOURS_ALLOWED
								)
								SELECT 
									ARD.ALERT_ID,
									@MAX_RCPT_ID,
									ARD.EMP_CODE,
									ARD.EMAIL_ADDRESS,
									NULL,
									1,
									NULL,
									ARD.CURRENT_RCPT,
									ARD.CURRENT_NOTIFY,
									NULL,
									COALESCE(ARD.HOURS_ALLOWED, A.HRS_ALLOWED, @ALERT_HOURS)
								FROM 
									ALERT_RCPT_DISMISSED ARD
									INNER JOIN ALERT A ON ARD.ALERT_ID = A.ALERT_ID
								WHERE 
									ARD.ALERT_ID = @ALERT_ID
									AND ARD.EMP_CODE = @EMP_CODE
									AND ARD.CURRENT_NOTIFY = 1;
							END
							ELSE
							BEGIN
								INSERT INTO ALERT_RCPT WITH(ROWLOCK) (ALERT_ID,
									ALERT_RCPT_ID,
									EMP_CODE,
									EMAIL_ADDRESS,
									PROCESSED,
									NEW_ALERT,
									READ_ALERT,
									CURRENT_RCPT,
									CURRENT_NOTIFY,
									COMPLETED_DATE,
									HOURS_ALLOWED,
									PROOFING_STATUS_ID
								)
								SELECT 
									ARD.ALERT_ID,
									ARD.ALERT_RCPT_ID,
									ARD.EMP_CODE,
									ARD.EMAIL_ADDRESS,
									NULL,
									1,
									NULL,
									ARD.CURRENT_RCPT,
									ARD.CURRENT_NOTIFY,
									NULL,
									COALESCE(ARD.HOURS_ALLOWED, A.HRS_ALLOWED, @ALERT_HOURS),
									NULL
								FROM 
									ALERT_RCPT_DISMISSED ARD
									INNER JOIN ALERT A ON ARD.ALERT_ID = A.ALERT_ID
								WHERE 
									ARD.ALERT_ID = @ALERT_ID									
									AND ARD.CURRENT_NOTIFY = 1
									AND PROOFING_STATUS_ID IS NULL
								;
							END
							SET @ASSIGNEE_REC_ADDED = 1;
							SET @ERROR = 0;
							SET @ERROR_MESSAGE = NULL;
						END TRY
						BEGIN CATCH		
							SET @ASSIGNEE_REC_ADDED = 0;
							SELECT @ERROR = @@ERROR;
							SELECT @ERROR_MESSAGE = ERROR_MESSAGE();
						END CATCH
						--  DELETE THE DISMISSED RECORD
						IF @IS_PROOF IS NULL OR @IS_PROOF = 0
						BEGIN
							IF @ASSIGNEE_REC_ADDED = 1 AND (@ERROR IS NULL OR @ERROR = 0)
							BEGIN
								DELETE FROM ALERT_RCPT_DISMISSED WITH(ROWLOCK)
								WHERE
									ALERT_ID = @ALERT_ID
									AND EMP_CODE = @EMP_CODE
									AND CURRENT_NOTIFY = 1;
							END
						END
						IF @IS_PROOF = 1
						BEGIN
							IF @ASSIGNEE_REC_ADDED = 1 AND (@ERROR IS NULL OR @ERROR = 0)
							BEGIN
								DELETE FROM ALERT_RCPT_DISMISSED WITH(ROWLOCK)
								WHERE
									ALERT_ID = @ALERT_ID
									AND CURRENT_NOTIFY = 1
									AND PROOFING_STATUS_ID IS NULL
								;
							END
						END
					END	
					ELSE
					BEGIN
						BEGIN TRY
							IF @IS_PROOF IS NULL OR @IS_PROOF = 0
							BEGIN
								INSERT INTO ALERT_RCPT WITH(ROWLOCK) (
									ALERT_ID,
									ALERT_RCPT_ID,
									EMP_CODE,
									EMAIL_ADDRESS,
									PROCESSED,
									NEW_ALERT,
									READ_ALERT,
									CURRENT_RCPT,
									CURRENT_NOTIFY,
									HOURS_ALLOWED
								)
								SELECT 
									@ALERT_ID,
									@MAX_RCPT_ID,
									@EMP_CODE,
									E.EMP_EMAIL,
									NULL,
									1,
									NULL,
									NULL,
									1,
									@ALERT_HOURS
								FROM	
									EMPLOYEE E
								WHERE
									E.EMP_CODE = @EMP_CODE;
							END
							ELSE
							BEGIN
								INSERT INTO ALERT_RCPT WITH(ROWLOCK) (
									ALERT_ID,
									ALERT_RCPT_ID,
									EMP_CODE,
									EMAIL_ADDRESS,
									PROCESSED,
									NEW_ALERT,
									READ_ALERT,
									CURRENT_RCPT,
									CURRENT_NOTIFY,
									HOURS_ALLOWED,
									PROOFING_STATUS_ID
								)
								SELECT 
									@ALERT_ID,
									@MAX_RCPT_ID,
									@EMP_CODE,
									E.EMP_EMAIL,
									NULL,
									1,
									NULL,
									NULL,
									1,
									@ALERT_HOURS,
									@PROOFING_STATUS_ID
								FROM	
									EMPLOYEE E
								WHERE
									E.EMP_CODE = @EMP_CODE;
							END
							SET @ASSIGNEE_REC_ADDED = 1;
							SET @ERROR = 0;
							SET @ERROR_MESSAGE = NULL;
						END TRY
						BEGIN CATCH								
							SET @ASSIGNEE_REC_ADDED = 0;
							SELECT @ERROR = @@ERROR;
							SELECT @ERROR_MESSAGE = ERROR_MESSAGE();
						END CATCH
					END
				END
			END
			IF @IS_ROUTED = 1
			BEGIN
				IF EXISTS (SELECT 1 FROM ALERT_RCPT WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @EMP_CODE AND CURRENT_NOTIFY = 1 AND ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID AND ALERT_STATE_ID = @CURR_ALERT_STATE_ID)
				BEGIN
				-- OPEN RECORD ALREADY EXISTS; UPDATE IT
					IF @IS_PROOF IS NULL OR @IS_PROOF = 0
					BEGIN
						UPDATE ALERT_RCPT WITH(ROWLOCK)
						SET
							ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID,
							ALERT_STATE_ID = @CURR_ALERT_STATE_ID,
							COMPLETED_DATE = NULL,
							PROCESSED = NULL,
							NEW_ALERT = 1,
							READ_ALERT = NULL
						WHERE
							ALERT_ID = @ALERT_ID
							AND EMP_CODE = @EMP_CODE
							AND CURRENT_NOTIFY = 1
							AND ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
							AND ALERT_STATE_ID = @CURR_ALERT_STATE_ID;
					END
					--ELSE
					--BEGIN
					--	UPDATE ALERT_RCPT WITH(ROWLOCK)
					--	SET
					--		ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID,
					--		ALERT_STATE_ID = @CURR_ALERT_STATE_ID,
					--		COMPLETED_DATE = NULL,
					--		PROCESSED = NULL,
					--		NEW_ALERT = 1,
					--		READ_ALERT = NULL,
					--		PROOFING_STATUS_ID = @PROOFING_STATUS_ID
					--	WHERE
					--		ALERT_ID = @ALERT_ID
					--		AND EMP_CODE = @EMP_CODE
					--		AND CURRENT_NOTIFY = 1
					--		AND ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
					--		AND ALERT_STATE_ID = @CURR_ALERT_STATE_ID;
					--END
					SET @ASSIGNEE_REC_ADDED = 1;
				END
				ELSE
				BEGIN
					SELECT @MAX_RCPT_ID = MAX(ALERT_RCPT_ID) FROM (SELECT ALERT_RCPT_ID FROM ALERT_RCPT WHERE ALERT_ID = @ALERT_ID UNION SELECT ALERT_RCPT_ID FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = @ALERT_ID) AS X
					SELECT @MAX_RCPT_ID = ISNULL(@MAX_RCPT_ID, 0) + 1;
					IF EXISTS (SELECT 1 FROM ALERT_RCPT_DISMISSED WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND EMP_CODE = @EMP_CODE AND CURRENT_NOTIFY = 1 AND ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID AND ALERT_STATE_ID = @CURR_ALERT_STATE_ID)
					BEGIN
						BEGIN TRY
							IF @IS_PROOF IS NULL OR @IS_PROOF = 0
							BEGIN
								INSERT INTO ALERT_RCPT WITH(ROWLOCK) (ALERT_ID,
									ALERT_RCPT_ID,
									EMP_CODE,
									EMAIL_ADDRESS,
									PROCESSED,
									NEW_ALERT,
									READ_ALERT,
									CURRENT_RCPT,
									CURRENT_NOTIFY,
									ALRT_NOTIFY_HDR_ID,
									ALERT_STATE_ID,
									COMPLETED_DATE,
									HOURS_ALLOWED
								)
								SELECT 
									ARD.ALERT_ID,
									@MAX_RCPT_ID,
									ARD.EMP_CODE,
									ARD.EMAIL_ADDRESS,
									NULL,
									1,
									NULL,
									ARD.CURRENT_RCPT,
									1,
									ARD.ALRT_NOTIFY_HDR_ID,
									ARD.ALERT_STATE_ID,
									NULL,
									COALESCE(ARD.HOURS_ALLOWED, A.HRS_ALLOWED, @ALERT_HOURS)
								FROM 
									ALERT_RCPT_DISMISSED ARD
									INNER JOIN ALERT A ON ARD.ALERT_ID = A.ALERT_ID
								WHERE 
									ARD.ALERT_ID = @ALERT_ID
									AND ARD.EMP_CODE = @EMP_CODE
									AND ARD.CURRENT_NOTIFY = 1
									AND ARD.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
									AND ARD.ALERT_STATE_ID = @CURR_ALERT_STATE_ID;
							END
							ELSE
							BEGIN
								INSERT INTO ALERT_RCPT WITH(ROWLOCK) (ALERT_ID,
									ALERT_RCPT_ID,
									EMP_CODE,
									EMAIL_ADDRESS,
									PROCESSED,
									NEW_ALERT,
									READ_ALERT,
									CURRENT_RCPT,
									CURRENT_NOTIFY,
									ALRT_NOTIFY_HDR_ID,
									ALERT_STATE_ID,
									COMPLETED_DATE,
									HOURS_ALLOWED,
									PROOFING_STATUS_ID
								)
								SELECT 
									ARD.ALERT_ID,
									@MAX_RCPT_ID,
									ARD.EMP_CODE,
									ARD.EMAIL_ADDRESS,
									NULL,
									1,
									NULL,
									ARD.CURRENT_RCPT,
									1,
									ARD.ALRT_NOTIFY_HDR_ID,
									ARD.ALERT_STATE_ID,
									NULL,
									COALESCE(ARD.HOURS_ALLOWED, A.HRS_ALLOWED, @ALERT_HOURS),
									@PROOFING_STATUS_ID
								FROM 
									ALERT_RCPT_DISMISSED ARD
									INNER JOIN ALERT A ON ARD.ALERT_ID = A.ALERT_ID
								WHERE 
									ARD.ALERT_ID = @ALERT_ID
									AND ARD.EMP_CODE = @EMP_CODE
									AND ARD.CURRENT_NOTIFY = 1
									AND ARD.ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
									AND ARD.ALERT_STATE_ID = @CURR_ALERT_STATE_ID
									AND (ARD.PROOFING_STATUS_ID IS NULL OR ARD.PROOFING_STATUS_ID = 0)
								;
							END
							SET @ASSIGNEE_REC_ADDED = 1;
							SET @ERROR = 0;
							SET @ERROR_MESSAGE = NULL;
						END TRY
						BEGIN CATCH								
							SET @ASSIGNEE_REC_ADDED = 0;
							SELECT @ERROR = @@ERROR;
							SELECT @ERROR_MESSAGE = ERROR_MESSAGE();
						END CATCH
					--  DELETE THE DISMISSED RECORD
						IF @IS_PROOF IS NULL OR @IS_PROOF = 0
						BEGIN
							IF @ASSIGNEE_REC_ADDED = 1 AND (@ERROR IS NULL OR @ERROR = 0)
							BEGIN
								DELETE FROM ALERT_RCPT_DISMISSED WITH(ROWLOCK)
								WHERE
									ALERT_ID = @ALERT_ID
									AND EMP_CODE = @EMP_CODE
									AND CURRENT_NOTIFY = 1
									AND ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
									AND ALERT_STATE_ID = @CURR_ALERT_STATE_ID;
							END
						END
						ELSE
						BEGIN
							IF @ASSIGNEE_REC_ADDED = 1 AND (@ERROR IS NULL OR @ERROR = 0)
							BEGIN
								DELETE FROM ALERT_RCPT_DISMISSED WITH(ROWLOCK)
								WHERE
									ALERT_ID = @ALERT_ID
									AND EMP_CODE = @EMP_CODE
									AND CURRENT_NOTIFY = 1
									AND ALRT_NOTIFY_HDR_ID = @CURR_ALRT_NOTIFY_HDR_ID 
									AND ALERT_STATE_ID = @CURR_ALERT_STATE_ID
									AND (PROOFING_STATUS_ID IS NULL OR PROOFING_STATUS_ID = 0)
							END
						END
					END	
					ELSE
					BEGIN
						BEGIN TRY
							IF @IS_PROOF IS NULL OR @IS_PROOF = 0
							BEGIN
								INSERT INTO ALERT_RCPT WITH(ROWLOCK) (
									ALERT_ID,
									ALERT_RCPT_ID,
									EMP_CODE,
									EMAIL_ADDRESS,
									PROCESSED,
									NEW_ALERT,
									READ_ALERT,
									CURRENT_RCPT,
									CURRENT_NOTIFY,
									ALRT_NOTIFY_HDR_ID,
									ALERT_STATE_ID,
									HOURS_ALLOWED
								)
								SELECT 
									@ALERT_ID,
									@MAX_RCPT_ID,
									@EMP_CODE,
									E.EMP_EMAIL,
									NULL,
									1,
									NULL,
									NULL,
									1,
									@CURR_ALRT_NOTIFY_HDR_ID,
									@CURR_ALERT_STATE_ID,
									@ALERT_HOURS
								FROM	
									EMPLOYEE E
								WHERE
									E.EMP_CODE = @EMP_CODE;
							END
							--ELSE
							--BEGIN
							--	INSERT INTO ALERT_RCPT WITH(ROWLOCK) (
							--		ALERT_ID,
							--		ALERT_RCPT_ID,
							--		EMP_CODE,
							--		EMAIL_ADDRESS,
							--		PROCESSED,
							--		NEW_ALERT,
							--		READ_ALERT,
							--		CURRENT_RCPT,
							--		CURRENT_NOTIFY,
							--		ALRT_NOTIFY_HDR_ID,
							--		ALERT_STATE_ID,
							--		HOURS_ALLOWED,
							--		PROOFING_STATUS_ID
							--	)
							--	SELECT 
							--		@ALERT_ID,
							--		@MAX_RCPT_ID,
							--		@EMP_CODE,
							--		E.EMP_EMAIL,
							--		NULL,
							--		1,
							--		NULL,
							--		NULL,
							--		1,
							--		@CURR_ALRT_NOTIFY_HDR_ID,
							--		@CURR_ALERT_STATE_ID,
							--		@ALERT_HOURS,
							--		@PROOFING_STATUS_ID
							--	FROM	
							--		EMPLOYEE E
							--	WHERE
							--		E.EMP_CODE = @EMP_CODE;
							--END
							SET @ASSIGNEE_REC_ADDED = 1;
							SET @ERROR = 0;
							SET @ERROR_MESSAGE = NULL;
						END TRY
						BEGIN CATCH								
							SET @ASSIGNEE_REC_ADDED = 0;
							SELECT @ERROR = @@ERROR;
							SELECT @ERROR_MESSAGE = ERROR_MESSAGE();
						END CATCH
					END
				END
			END
			IF @ASSIGNEE_REC_ADDED = 1
			BEGIN
				IF @IS_ROUTED = 0
				BEGIN
					INSERT INTO ALERT_COMMENT (ALERT_ID, USER_CODE, GENERATED_DATE, COMMENT, EMAILSENT, CUSTODY_START, ASSIGNED_EMP_CODE, DOCUMENT_ID, IS_SYSTEM)
					SELECT 
						@ALERT_ID,
						@USER_CODE,
						@CUSTODY_DATE,
						@REOPEN_TEXT + ISNULL(E.EMP_FNAME + ' ', '') + ISNULL(E.EMP_MI + '. ', '') + E.EMP_LNAME,
						0,
						@CUSTODY_DATE,
						@EMP_CODE,
						@DOCUMENT_ID,
						1
					FROM 
						EMPLOYEE E
					WHERE 
						E.EMP_CODE = @EMP_CODE;										
				END
				ELSE
				BEGIN
					--  BE SURE WE GET MOST CURRENT
					BEGIN
						SELECT 
							@CURR_ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID,
							@CURR_ALERT_STATE_ID = A.ALERT_STATE_ID,
							@CURR_ALERT_STATE_NAME = S.ALERT_STATE_NAME
						FROM 
							ALERT A WITH(NOLOCK)
							LEFT OUTER JOIN ALERT_STATES S WITH(NOLOCK) ON A.ALERT_STATE_ID = S.ALERT_STATE_ID
						WHERE 
							A.ALERT_ID = @ALERT_ID;
					END
					--  ADD THE COMMENT
					BEGIN
						INSERT INTO ALERT_COMMENT (ALERT_ID, USER_CODE, GENERATED_DATE, COMMENT, EMAILSENT, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, CUSTODY_START, ASSIGNED_EMP_CODE, DOCUMENT_ID, IS_SYSTEM)
						SELECT 
							@ALERT_ID,
							@USER_CODE,
							@CUSTODY_DATE,
							@REOPEN_TEXT + UPPER(@CURR_ALERT_STATE_NAME) + ' | ' + ISNULL(E.EMP_FNAME + ' ', '') + ISNULL(E.EMP_MI + '. ', '') + E.EMP_LNAME,
							0,
							@CURR_ALRT_NOTIFY_HDR_ID,
							@CURR_ALERT_STATE_ID,
							@CUSTODY_DATE,
							@EMP_CODE,
							@DOCUMENT_ID,
							1
						FROM 
							EMPLOYEE E
						WHERE 
							E.EMP_CODE = @EMP_CODE;										
					END
				END
			END
		END
		ELSE
		BEGIN
			SET @ASSIGNEE_REC_ADDED = 0;
			-- UNCOMPLETE FOR ALL
			DECLARE
				@UNCOMPLETE_ALL TABLE (ID INT IDENTITY, EMP_CODE VARCHAR(6));
			DECLARE
				@UNCOMPLETE_EMP_CODE VARCHAR(6),
				@UNCOMPLETE_CTR INT,
				@UNCOMPLETE_COUNT INT,
				@THIS_EMPLOYEE_NAME VARCHAR(500)
			--  THIS EMPLOYEE INFO
			BEGIN
				SELECT
					@THIS_EMPLOYEE_NAME = ISNULL(E.EMP_FNAME + ' ', '') + ISNULL(E.EMP_MI + '. ', '') + E.EMP_LNAME
				FROM
					EMPLOYEE E
				WHERE
					E.EMP_CODE = @EMP_CODE;
			END
			--  GET EMPS TO RE-OPEN
			IF @IS_PROOF IS NULL OR @IS_PROOF = 0
			BEGIN
				IF @IS_ROUTED = 0
				BEGIN
					INSERT INTO @UNCOMPLETE_ALL(EMP_CODE)
					SELECT 
						X.EMP_CODE
					FROM
						ALERT_RCPT_DISMISSED X
					WHERE
						X.ALERT_ID = @ALERT_ID
						AND X.CURRENT_NOTIFY = 1
						AND X.ALRT_NOTIFY_HDR_ID IS NULL
						AND X.ALERT_STATE_ID IS NULL;
				END
				IF @IS_ROUTED = 1
				BEGIN
					INSERT INTO @UNCOMPLETE_ALL(EMP_CODE)
					SELECT 
						X.EMP_CODE
					FROM
						ALERT_RCPT_DISMISSED X
						INNER JOIN ALERT A ON X.ALERT_ID = A.ALERT_ID AND X.ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID AND X.ALERT_STATE_ID = A.ALERT_STATE_ID
					WHERE
						X.ALERT_ID = @ALERT_ID
						AND X.CURRENT_NOTIFY = 1;
				END
			END
			SELECT @UNCOMPLETE_COUNT = COUNT(1) FROM @UNCOMPLETE_ALL;
			--  UNCOMPLETE THE EMPS 
			IF NOT @UNCOMPLETE_COUNT IS NULL AND @UNCOMPLETE_COUNT > 0
			BEGIN	
				SET @UNCOMPLETE_CTR = 0;
				WHILE @UNCOMPLETE_CTR < @UNCOMPLETE_COUNT
				BEGIN
					SET @UNCOMPLETE_CTR = @UNCOMPLETE_CTR + 1;
					SET @ASSIGNEE_REC_ADDED = 0;
					SET @ERROR = 0;
					SET @ERROR_MESSAGE = NULL;
					SELECT @UNCOMPLETE_EMP_CODE = EMP_CODE FROM @UNCOMPLETE_ALL WHERE ID = @UNCOMPLETE_CTR;
					IF NOT @UNCOMPLETE_EMP_CODE IS NULL
					BEGIN
						IF NOT EXISTS (SELECT 1 
									   FROM ALERT_RCPT AR 
									   WHERE AR.ALERT_ID = @ALERT_ID AND AR.EMP_CODE = @UNCOMPLETE_EMP_CODE AND AR.CURRENT_NOTIFY = 1)
						BEGIN
							SELECT @MAX_RCPT_ID = MAX(ALERT_RCPT_ID) FROM ALERT_RCPT WHERE ALERT_ID = @ALERT_ID;
							SELECT @MAX_RCPT_ID = ISNULL(@MAX_RCPT_ID, 0) + 1;
							--  INSERT
							BEGIN TRY
								INSERT INTO ALERT_RCPT (ALERT_ID, ALERT_RCPT_ID, EMP_CODE, EMAIL_ADDRESS, PROCESSED, NEW_ALERT, READ_ALERT, CURRENT_NOTIFY, HOURS_ALLOWED, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, PROOFING_STATUS_ID)
								SELECT
									@ALERT_ID,
									@MAX_RCPT_ID,
									@UNCOMPLETE_EMP_CODE,
									E.EMP_CODE,
									NULL,
									1,
									NULL,
									1,
									COALESCE(X.HOURS_ALLOWED, A.HRS_ALLOWED),
									CASE 
										WHEN @IS_ROUTED = 1 THEN A.ALRT_NOTIFY_HDR_ID
										ELSE NULL
									END,
									CASE 
										WHEN @IS_ROUTED = 1 THEN A.ALERT_STATE_ID
										ELSE NULL
									END,
									X.PROOFING_STATUS_ID
								FROM
									ALERT_RCPT_DISMISSED X
									INNER JOIN ALERT A ON X.ALERT_ID = A.ALERT_ID 
									INNER JOIN EMPLOYEE E ON X.EMP_CODE = E.EMP_CODE
								WHERE
									X.ALERT_ID = @ALERT_ID 
									AND X.EMP_CODE = @UNCOMPLETE_EMP_CODE 
									AND CURRENT_NOTIFY = 1;
								SET @ASSIGNEE_REC_ADDED = 1;
								SET @ERROR = 0;
								SET @ERROR_MESSAGE = NULL;
							END TRY
							BEGIN CATCH								
								SET @ASSIGNEE_REC_ADDED = 0;
								SELECT @ERROR = @@ERROR;
								SELECT @ERROR_MESSAGE = ERROR_MESSAGE();
							END CATCH
							--  RE-OPEN COMMENT
							IF @ASSIGNEE_REC_ADDED = 1 AND (@ERROR IS NULL OR @ERROR = 0)
							BEGIN
								IF @IS_ROUTED = 0
								BEGIN
									INSERT INTO ALERT_COMMENT (ALERT_ID, USER_CODE, GENERATED_DATE, COMMENT, EMAILSENT, CUSTODY_START, ASSIGNED_EMP_CODE, DOCUMENT_ID, IS_SYSTEM)
									SELECT 
										@ALERT_ID,
										@USER_CODE,
										@CUSTODY_DATE,
										@REOPEN_TEXT + ISNULL(E.EMP_FNAME + ' ', '') + ISNULL(E.EMP_MI + '. ', '') + E.EMP_LNAME + ' | Re-opened by ' + @THIS_EMPLOYEE_NAME,
										0,
										@CUSTODY_DATE,
										@UNCOMPLETE_EMP_CODE,
										@DOCUMENT_ID,
										1
									FROM 
										EMPLOYEE E
									WHERE 
										E.EMP_CODE = @UNCOMPLETE_EMP_CODE;										
								END
								ELSE
								BEGIN
									--  BE SURE WE GET MOST CURRENT
									BEGIN
										SELECT 
											@CURR_ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID,
											@CURR_ALERT_STATE_ID = A.ALERT_STATE_ID,
											@CURR_ALERT_STATE_NAME = S.ALERT_STATE_NAME
										FROM 
											ALERT A WITH(NOLOCK)
											LEFT OUTER JOIN ALERT_STATES S WITH(NOLOCK) ON A.ALERT_STATE_ID = S.ALERT_STATE_ID
										WHERE 
											A.ALERT_ID = @ALERT_ID;
									END
									--  ADD THE COMMENT
									BEGIN
										INSERT INTO ALERT_COMMENT (ALERT_ID, USER_CODE, GENERATED_DATE, COMMENT, EMAILSENT, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, CUSTODY_START, ASSIGNED_EMP_CODE, DOCUMENT_ID, IS_SYSTEM)
										SELECT 
											@ALERT_ID,
											@USER_CODE,
											@CUSTODY_DATE,
											@REOPEN_TEXT + UPPER(@CURR_ALERT_STATE_NAME) + ' | ' + ISNULL(E.EMP_FNAME + ' ', '') + ISNULL(E.EMP_MI + '. ', '') + E.EMP_LNAME + ' | Re-opened by ' + @THIS_EMPLOYEE_NAME,
											0,
											@CURR_ALRT_NOTIFY_HDR_ID,
											@CURR_ALERT_STATE_ID,
											@CUSTODY_DATE,
											@UNCOMPLETE_EMP_CODE,
											@DOCUMENT_ID,
											1
										FROM 
											EMPLOYEE E
										WHERE 
											E.EMP_CODE = @UNCOMPLETE_EMP_CODE;										
									END
								END
							END
							--  DELETE
							IF @ASSIGNEE_REC_ADDED = 1 AND (@ERROR IS NULL OR @ERROR = 0)
							BEGIN
								DELETE ALERT_RCPT_DISMISSED
								FROM
									ALERT_RCPT_DISMISSED X
									INNER JOIN ALERT A ON X.ALERT_ID = A.ALERT_ID
									INNER JOIN EMPLOYEE E ON X.EMP_CODE = E.EMP_CODE
								WHERE
									X.ALERT_ID = @ALERT_ID 
									AND X.EMP_CODE = @UNCOMPLETE_EMP_CODE 
									AND CURRENT_NOTIFY = 1;
							END
						END
					END
				END
			END
		END
    END
	-- RESULT
	BEGIN
		UPDATE @RESULTS SET FINAL_ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID, FINAL_ALERT_STATE_ID = A.ALERT_STATE_ID
		FROM
			@RESULTS R
			INNER JOIN ALERT A WITH(NOLOCK) ON R.ALERT_ID = A.ALERT_ID
		WHERE
			A.ALERT_ID = @ALERT_ID;
		DECLARE
			@ASSIGNEE_CTR INT,
			@ASSIGNEE_COUNT INT,
			@ASSIGNEE_STRING VARCHAR(MAX);
		SET @ASSIGNEE_STRING = '';
		SET @CURR_EMP_CODE = '';
		DECLARE
			@CURRENT_ASSIGNEES TABLE (ID INT IDENTITY, EMP_CODE VARCHAR(6));
		IF EXISTS (SELECT 1 FROM @RESULTS WHERE IS_TASK = 1)
		BEGIN
			INSERT INTO @CURRENT_ASSIGNEES
			SELECT DISTINCT
				J.EMP_CODE
			FROM
				JOB_TRAFFIC_DET_EMPS J WITH(NOLOCK)
				INNER JOIN ALERT A WITH(NOLOCK) ON J.JOB_NUMBER = A.JOB_NUMBER AND J.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND J.SEQ_NBR = A.TASK_SEQ_NBR
			WHERE
				A.ALERT_ID = @ALERT_ID
				AND J.TEMP_COMP_DATE IS NULL;
		END
		ELSE
		BEGIN
			INSERT INTO @CURRENT_ASSIGNEES
			SELECT DISTINCT
				EMP_CODE
			FROM
				ALERT_RCPT AR WITH(NOLOCK)
			WHERE
				AR.ALERT_ID = @ALERT_ID
				AND AR.CURRENT_NOTIFY = 1;
		END
		SELECT 
			@ASSIGNEE_CTR = 0, 
			@ASSIGNEE_COUNT = 0
		SELECT
			@ASSIGNEE_COUNT = COUNT(1)
		FROM
			@CURRENT_ASSIGNEES;
		BEGIN
			WHILE @ASSIGNEE_CTR < @ASSIGNEE_COUNT
			BEGIN
				SET @CURR_EMP_CODE = NULL;
				SET @ASSIGNEE_CTR = @ASSIGNEE_CTR + 1;
				SELECT @CURR_EMP_CODE = EMP_CODE FROM @CURRENT_ASSIGNEES C WHERE C.ID = @ASSIGNEE_CTR;
				IF NOT @CURR_EMP_CODE IS NULL
				BEGIN
					SELECT @ASSIGNEE_STRING = @ASSIGNEE_STRING + @CURR_EMP_CODE
					IF @ASSIGNEE_CTR < @ASSIGNEE_COUNT
					BEGIN
						SELECT @ASSIGNEE_STRING = @ASSIGNEE_STRING + ',';
					END
				END
			END
			UPDATE @RESULTS SET CURRENT_ASSIGNESS_STRING = @ASSIGNEE_STRING;
		END
		SELECT 
			[AlertID] = R.ALERT_ID,
			[IsCompleting] = R.IS_COMPLETING,
			[IsRouted] = R.IS_ROUTED,
			[IsTask] = R.IS_TASK,
			[IsAutoRoute] = R.IS_AUTO_ROUTE,
			[InitialAlertTemplateID] = R.INITIAL_ALRT_NOTIFY_HDR_ID,
			[InitialAlertStateID] = R.INITIAL_ALERT_STATE_ID,
			[FinalAlertTemplateID] = R.FINAL_ALRT_NOTIFY_HDR_ID,
			[FinalAlertStateID] = R.FINAL_ALERT_STATE_ID,
			[AutoRouteChangedState] = R.AUTO_ROUTE_CHANGED_STATE,
			[CurrentAssigneesString] = R.CURRENT_ASSIGNESS_STRING,
			[AssignmentFullyCompleted] = R.ASSIGN_FULLY_COMPLETED,
			[Success] = CASE
							WHEN @ERROR IS NULL OR @ERROR = 0 THEN CAST(1 AS BIT)
							ELSE CAST(0 AS BIT)
						END,
			[Message] = @ERROR_MESSAGE,
			[IsProof] = ISNULL(R.IS_PROOF, 0)
		FROM
			@RESULTS R;
	END
END
/*=========== QUERY ===========*/ 