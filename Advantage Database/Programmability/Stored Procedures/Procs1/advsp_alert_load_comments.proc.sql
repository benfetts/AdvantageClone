IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[advsp_alert_load_comments]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[advsp_alert_load_comments]
GO
CREATE PROCEDURE [dbo].[advsp_alert_load_comments]
@ALERT_ID INT,
@DOCUMENT_ID INT,
@EMP_CODE VARCHAR(6),
@OFFSET [DECIMAL](9,3),
@HIDE_SYSTEM_COMMENTS BIT
AS
/*=========== QUERY ===========*/
BEGIN
	-- VARIABLES
	BEGIN
		DECLARE @COMMENTS TABLE (
			ID INT IDENTITY,
			[COMMENT_ID] INT,
			[COMMENT] TEXT,
			[SHORT_COMMENT] VARCHAR(200),
			[IS_TRUNCATED] INT,
			[USER_NAME] VARCHAR(100),
			[EMP_CODE] VARCHAR(6),
			[GENERATED_DATE] SMALLDATETIME,
			[EMP_FML] VARCHAR(500),
			[USER_CODE] VARCHAR(100),
			[DOCUMENT_LIST] VARCHAR(MAX),
			[EMP_IMAGE] IMAGE,
			[EMP_NICKNAME] VARCHAR(10),
			ASSIGNED_EMP_CODE VARCHAR(6),
			ASSIGNMENT_CHANGED BIT,
			[ASSIGNED_EMP_IMAGE] IMAGE,
			[ASSIGNED_EMP_NICKNAME] VARCHAR(10),
			ALRT_NOTIFY_HDR_ID INT,
			ALERT_STATE_ID INT,
			IS_UNASSIGNED BIT,
 			[ASSIGNED_EMP_FML] VARCHAR(500),
			IS_CLIENT_PORTAL_COMMENT BIT,
			VR_CODE VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS,
			ALERT_ID INT,
			CUSTODY_START_DATE SMALLDATETIME,
			CUSTODY_END_DATE SMALLDATETIME,
			ALRT_NOTIFY_HDR_NAME VARCHAR(100),
			ALERT_STATE_NAME VARCHAR(100),
			REPLY_LEVEL INT,
			PARENT_ID INT,
			MARKUP_ID INT,
			MARKUP_XML XML,
			MARKUP VARCHAR(MAX),
			MARKUP_DOCUMENT_ID INT,
			MARKUP_GENERATED_DATE SMALLDATETIME,
			MARKUP_TYPE_ID INT,
			MARKUP_THUMBNAIL IMAGE,
			DOCUMENT_ID INT,
			PROOFING_X_REVIEWER_ID INT,
			HAS_IMAGE BIT,
			INITIALS VARCHAR(5),
			PROOFING_STATUS_ID INT)
		;
		DECLARE @REPLIES TABLE (ID INT IDENTITY, 
								COMMENT_ID INT, 
								REPLY_LEVEL INT)
		;
		DECLARE
			@IS_ROUTED BIT,
			@IS_PROOF BIT,
			@DOCUMENT_COMMENTS_EXIST BIT,
			@FIRST_NEW_FILE_COMMENT_ID INT
		;
		DECLARE @FILE_COMMENTS TABLE (ID INT IDENTITY, COMMENT_ID INT)
	END
	--	INIT
	BEGIN

		DECLARE @userTable TABLE (ROW INT, USER_CODE VARCHAR(100));

		INSERT INTO @userTable(ROW,USER_CODE) 
			SELECT ROW_NUMBER() OVER(ORDER BY SU.USER_CODE DESC) AS ROW,SU.USER_CODE FROM SEC_USER SU WITH(NOLOCK) WHERE SU.EMP_CODE = @EMP_CODE;

		SELECT
			@IS_ROUTED =
				CASE
					WHEN A.ALRT_NOTIFY_HDR_ID IS NOT NULL AND A.ALRT_NOTIFY_HDR_ID > 0 AND A.ALERT_STATE_ID IS NOT NULL AND A.ALERT_STATE_ID > 0 THEN CAST(1 AS BIT)
					ELSE CAST(0 AS BIT)
				END,
			@IS_PROOF =
				CASE
					WHEN A.ALERT_CAT_ID = 79 THEN CAST(1 AS BIT)
					ELSE CAST(0 AS BIT)
				END
		FROM
			ALERT A WITH(NOLOCK)
		WHERE
			A.ALERT_ID = @ALERT_ID
		;
		IF @IS_PROOF = 1 AND (@DOCUMENT_ID IS NULL OR @DOCUMENT_ID = 0)
		BEGIN
			SELECT
				@DOCUMENT_ID = MAX(AA.DOCUMENT_ID)
			FROM
				ALERT_ATTACHMENT AA WITH(NOLOCK)
			WHERE
				AA.ALERT_ID = @ALERT_ID
			;
		END
		IF @IS_PROOF = 0
		BEGIN
			SELECT @DOCUMENT_ID = NULL;
		END
	END
	--	IF THIS IS A PROOF ALERT DETERMINE IF DOCUMENT COMMENT(S) EXIST	
	BEGIN
		IF @IS_PROOF = 1
			SELECT 
				@DOCUMENT_COMMENTS_EXIST = 1
			FROM 
				ALERT_COMMENT WITH(NOLOCK) 
			WHERE 
				ALERT_ID = @ALERT_ID 
				AND DOCUMENT_ID = @DOCUMENT_ID;
		WITH MyCTE AS
			(SELECT 
				ALERT_ID, 
				COMMENT_ID, 
				COMMENT, 
				PARENT_ID,
				0 AS REPLY_LEVEL
			FROM 
				ALERT_COMMENT WITH(NOLOCK)
			WHERE 
				PARENT_ID IS NULL 
				AND ALERT_ID = @ALERT_ID
			UNION ALL
			SELECT 
				ALERT_COMMENT.ALERT_ID, 
				ALERT_COMMENT.COMMENT_ID, 
				ALERT_COMMENT.COMMENT, 
				ALERT_COMMENT.PARENT_ID,
				MyCTE.REPLY_LEVEL + 1
			FROM 
				ALERT_COMMENT WITH(NOLOCK)
				INNER JOIN MyCTE ON ALERT_COMMENT.PARENT_ID = MyCTE.COMMENT_ID
			WHERE 
				ALERT_COMMENT.PARENT_ID IS NOT NULL 
				AND ALERT_COMMENT.ALERT_ID = @ALERT_ID)
			INSERT INTO @REPLIES (COMMENT_ID, REPLY_LEVEL)
			SELECT COMMENT_ID, REPLY_LEVEL
			FROM MyCTE;
	END
	--	GET DATA
	BEGIN
		INSERT INTO @COMMENTS (
							   COMMENT_ID,
							   COMMENT,
							   SHORT_COMMENT,
							   IS_TRUNCATED,
							   [USER_NAME],
							   EMP_CODE,
							   GENERATED_DATE,
							   EMP_FML,
							   USER_CODE,
							   DOCUMENT_LIST,
							   EMP_IMAGE,
							   ASSIGNED_EMP_CODE,
							   ALRT_NOTIFY_HDR_ID,
							   ALERT_STATE_ID,
							   IS_CLIENT_PORTAL_COMMENT,
							   VR_CODE,
							   ALERT_ID,
							   CUSTODY_START_DATE,
							   CUSTODY_END_DATE,
							   PARENT_ID,
							   DOCUMENT_ID,
							   PROOFING_X_REVIEWER_ID,
							   PROOFING_STATUS_ID
							   )	
		SELECT 
			A.COMMENT_ID,
			A.COMMENT,
			A.SHORT_COMMENT,
			A.IS_TRUNCATED,
			A.[USER_NAME],
			A.EMP_CODE,
			A.GENERATED_DATE,
			A.EMP_FML,
			A.USER_CODE,
			A.DOCUMENT_LIST,
			NULL,
			A.ASSIGNED_EMP_CODE,
			A.ALRT_NOTIFY_HDR_ID,
			A.ALERT_STATE_ID,
			A.IS_CLIENT_PORTAL_COMMENT,
			A.VR_CODE,
			A.ALERT_ID,
			A.CUSTODY_START,
			A.CUSTODY_END,
			A.PARENT_ID,
			A.DOCUMENT_ID,
			A.PROOFING_X_REVIEWER_ID,
			A.PROOFING_STATUS_ID
		FROM (
			SELECT 
				AC.COMMENT_ID, 
				CAST(AC.COMMENT AS VARCHAR(MAX)) AS COMMENT, 
				CAST(AC.COMMENT AS VARCHAR(200)) AS SHORT_COMMENT, 
				CASE
					WHEN LEN(CAST(AC.COMMENT AS VARCHAR(210))) > 200 THEN 1
					ELSE 0
				END AS IS_TRUNCATED,
				SEC_USER.[USER_NAME], 
				SEC_USER.EMP_CODE, 
				AC.GENERATED_DATE, 
				ISNULL(EMPLOYEE.EMP_FNAME+' ','') + ISNULL(EMPLOYEE.EMP_MI +'. ','') +  ISNULL(EMPLOYEE.EMP_LNAME,'') AS EMP_FML, 
				AC.USER_CODE,
				AC.DOCUMENT_LIST,
				AC.ASSIGNED_EMP_CODE,
				AC.ALRT_NOTIFY_HDR_ID,
				AC.ALERT_STATE_ID,
				0 AS IS_CLIENT_PORTAL_COMMENT,
				AC.VR_CODE,
				AC.ALERT_ID,
				AC.GENERATED_DATE AS CUSTODY_START,
				AC.CUSTODY_END,
				AC.PARENT_ID,
				AC.DOCUMENT_ID,
				AC.PROOFING_X_REVIEWER_ID,
				AC.PROOFING_STATUS_ID
			FROM         
				EMPLOYEE WITH (NOLOCK) 
				INNER JOIN SEC_USER WITH (NOLOCK) ON EMPLOYEE.EMP_CODE = SEC_USER.EMP_CODE 
				RIGHT OUTER JOIN ALERT_COMMENT AC WITH (NOLOCK) ON UPPER(SEC_USER.USER_CODE) = UPPER(AC.USER_CODE)	
				INNER JOIN @REPLIES R ON AC.COMMENT_ID = R.COMMENT_ID
			WHERE 
				(AC.ALERT_ID = @ALERT_ID) 
				AND (AC.USER_CODE_CP IS NULL OR AC.USER_CODE_CP = 0) 
				AND (AC.PROOFING_X_REVIEWER_ID IS NULL OR AC.PROOFING_X_REVIEWER_ID = 0)
				AND 1 = CASE 
							WHEN @HIDE_SYSTEM_COMMENTS IS NULL OR @HIDE_SYSTEM_COMMENTS = 0 THEN 1 
							WHEN @HIDE_SYSTEM_COMMENTS = 1 AND AC.IS_SYSTEM = 1 THEN 0
							ELSE 1 
						END
				OR CAST(AC.COMMENT AS VARCHAR(MAX)) LIKE 'NEW FILE |%'
				OR CAST(AC.COMMENT AS VARCHAR(MAX)) LIKE 'NEW VERSION |%'
			--GET CLIENT PORTAL COMMENTS
			UNION	
			SELECT 
				AC.COMMENT_ID, 
				CAST(AC.COMMENT AS VARCHAR(MAX)) AS COMMENT, 
				CAST(AC.COMMENT AS VARCHAR(200)) AS SHORT_COMMENT, 
				CASE
					WHEN LEN(CAST(AC.COMMENT AS VARCHAR(210))) > 200 THEN 1
					ELSE 0
				END AS IS_TRUNCATED,
				CP_USER.[USER_NAME], 
				CAST(CDP_CONTACT_HDR.CDP_CONTACT_ID AS VARCHAR), 
				AC.GENERATED_DATE, 
				CDP_CONTACT_HDR.CONT_FML AS EMP_FML,
				'', 
				AC.DOCUMENT_LIST,
				AC.ASSIGNED_EMP_CODE,
				AC.ALRT_NOTIFY_HDR_ID,
				AC.ALERT_STATE_ID,
				1 AS IS_CLIENT_PORTAL_COMMENT,
				NULL,
				NULL,
				COALESCE(AC.CUSTODY_START, AC.GENERATED_DATE) AS CUSTODY_START,
				AC.CUSTODY_END,
				AC.PARENT_ID,
				AC.DOCUMENT_ID,
				AC.PROOFING_X_REVIEWER_ID,
				AC.PROOFING_STATUS_ID
			FROM 
				ALERT_COMMENT AC WITH (NOLOCK) 
				INNER JOIN CDP_CONTACT_HDR WITH (NOLOCK) ON AC.USER_CODE_CP = CDP_CONTACT_HDR.CDP_CONTACT_ID 
				LEFT OUTER JOIN CP_USER WITH (NOLOCK) ON CP_USER.CDP_CONTACT_ID = CDP_CONTACT_HDR.CDP_CONTACT_ID
				INNER JOIN @REPLIES R ON AC.COMMENT_ID = R.COMMENT_ID
			WHERE  
				(AC.ALERT_ID = @ALERT_ID) 
				AND (AC.USER_CODE_CP IS NOT NULL AND AC.USER_CODE_CP > 0)
				AND (AC.PROOFING_X_REVIEWER_ID IS NULL OR AC.PROOFING_X_REVIEWER_ID = 0)
				AND 1 = CASE 
							WHEN @HIDE_SYSTEM_COMMENTS IS NULL OR @HIDE_SYSTEM_COMMENTS = 0 THEN 1 
							WHEN @HIDE_SYSTEM_COMMENTS = 1 AND AC.IS_SYSTEM = 1 THEN 0
							ELSE 1 
						END
			--GET EXTERNAL REVIEWER COMMENTS
			UNION	
			SELECT 
				AC.COMMENT_ID, 
				CAST(AC.COMMENT AS VARCHAR(MAX)) AS COMMENT, 
				CAST(AC.COMMENT AS VARCHAR(200)) AS SHORT_COMMENT, 
				CASE
					WHEN LEN(CAST(AC.COMMENT AS VARCHAR(210))) > 200 THEN 1
					ELSE 0
				END AS IS_TRUNCATED,
				X.[NAME], 
				CAST(X.ID AS VARCHAR), 
				AC.GENERATED_DATE, 
				X.[NAME] AS EMP_FML,
				'', 
				AC.DOCUMENT_LIST,
				AC.ASSIGNED_EMP_CODE,
				AC.ALRT_NOTIFY_HDR_ID,
				AC.ALERT_STATE_ID,
				0 AS IS_CLIENT_PORTAL_COMMENT,
				NULL,
				NULL,
				COALESCE(AC.CUSTODY_START, AC.GENERATED_DATE) AS CUSTODY_START,
				AC.CUSTODY_END,
				AC.PARENT_ID,
				AC.DOCUMENT_ID,
				AC.PROOFING_X_REVIEWER_ID,
				AC.PROOFING_STATUS_ID
			FROM 
				ALERT_COMMENT AC WITH (NOLOCK) 
				INNER JOIN PROOFING_X_REVIEWER X WITH(NOLOCK) ON AC.PROOFING_X_REVIEWER_ID = X.ID
				INNER JOIN @REPLIES R ON AC.COMMENT_ID = R.COMMENT_ID
			WHERE  
				(AC.ALERT_ID = @ALERT_ID) 
				AND (AC.USER_CODE_CP IS NULL OR AC.USER_CODE_CP = 0) 
				AND (AC.PROOFING_X_REVIEWER_ID IS NOT NULL AND AC.PROOFING_X_REVIEWER_ID > 0)
				AND 1 = CASE 
							WHEN @HIDE_SYSTEM_COMMENTS IS NULL OR @HIDE_SYSTEM_COMMENTS = 0 THEN 1 
							WHEN @HIDE_SYSTEM_COMMENTS = 1 AND AC.IS_SYSTEM = 1 THEN 0
							ELSE 1 
						END
		) AS A
		ORDER BY
			A.GENERATED_DATE ASC,
			A.CUSTODY_START ASC,
			A.CUSTODY_END ASC,
			A.COMMENT_ID ASC;
		-- PROOFING SPECIFIC
		IF @IS_PROOF = 1
		BEGIN
			--	REMOVE NON-DOC COMMENTS
			BEGIN
				IF @DOCUMENT_ID IS NOT NULL AND @DOCUMENT_ID > 0
				BEGIN
					DELETE
					FROM
						@COMMENTS
					WHERE
						DOCUMENT_ID IS NOT NULL
						AND DOCUMENT_ID <> 0
						AND DOCUMENT_ID <> @DOCUMENT_ID
						AND PROOFING_STATUS_ID IS NULL
					;
				END
			END
			-- ADD BACK IN MISSING APPROVAL COMMENTS AND NEW FILE COMMENTS
			BEGIN
				INSERT INTO @COMMENTS (
									   COMMENT_ID,
									   COMMENT,
									   SHORT_COMMENT,
									   IS_TRUNCATED,
									   USER_CODE,
									   GENERATED_DATE,
									   DOCUMENT_LIST,
									   ASSIGNED_EMP_CODE,
									   ALRT_NOTIFY_HDR_ID,
									   ALERT_STATE_ID,
									   IS_CLIENT_PORTAL_COMMENT,
									   ALERT_ID,
									   CUSTODY_START_DATE,
									   CUSTODY_END_DATE,
									   PARENT_ID,
									   DOCUMENT_ID,
									   PROOFING_X_REVIEWER_ID,
									   PROOFING_STATUS_ID
									   )	
				SELECT
					AC.COMMENT_ID,
					CAST(AC.COMMENT AS VARCHAR(MAX)) AS COMMENT, 
					CAST(AC.COMMENT AS VARCHAR(200)) AS SHORT_COMMENT, 
					CASE
						WHEN LEN(CAST(AC.COMMENT AS VARCHAR(210))) > 200 THEN 1
						ELSE 0
					END AS IS_TRUNCATED,
					AC.USER_CODE,
					AC.GENERATED_DATE,
					AC.DOCUMENT_LIST,
					AC.ASSIGNED_EMP_CODE,
					AC.ALRT_NOTIFY_HDR_ID,
					AC.ALERT_STATE_ID,
					0,
					AC.ALERT_ID,
					AC.CUSTODY_START,
					AC.CUSTODY_END,
					AC.PARENT_ID,
					AC.DOCUMENT_ID,
					AC.PROOFING_X_REVIEWER_ID,
					AC.PROOFING_STATUS_ID,
					CASE
						WHEN AC.USER_CODE IN (SELECT USER_CODE FROM @userTable) AND (AC.IS_SYSTEM = 0 OR AC.IS_SYSTEM IS NULL) THEN 1
						ELSE 0
					END
				FROM
					ALERT_COMMENT AC WITH(NOLOCK)
				WHERE
					AC.ALERT_ID = @ALERT_ID
					AND (	AC.PROOFING_STATUS_ID IS NOT NULL
							OR CAST(AC.COMMENT AS VARCHAR(MAX)) LIKE 'NEW FILE |%'                        				
                            OR CAST(AC.COMMENT AS VARCHAR(MAX)) LIKE 'NEW VERSION |%'
                        )
					AND AC.COMMENT_ID NOT IN (SELECT COMMENT_ID FROM @COMMENTS)
			END
		END
	END
	--	CLEANUP 
	BEGIN
		--	ASSIGNMENT_CHANGED FLAG
		BEGIN
			UPDATE @COMMENTS SET ASSIGNMENT_CHANGED = CASE WHEN EMP_CODE <> ASSIGNED_EMP_CODE AND NOT ASSIGNED_EMP_CODE IS NULL THEN 1 ELSE 0 END;
		END
		--	IS_UNASSIGNED FLAG
		BEGIN
			UPDATE @COMMENTS SET IS_UNASSIGNED = CASE WHEN NOT ALRT_NOTIFY_HDR_ID IS NULL AND NOT ALERT_STATE_ID IS NULL AND ASSIGNED_EMP_CODE IS NULL THEN 1 ELSE 0 END;
		END
		--	HAS IMAGE AND NICKNAME
		BEGIN
			UPDATE @COMMENTS SET 
				HAS_IMAGE =	CASE	
								WHEN EP.EMP_IMAGE IS NULL THEN 0 
								ELSE 1
							END,
				EMP_NICKNAME = EP.EMP_NICKNAME
			FROM
				@COMMENTS C
				INNER JOIN EMPLOYEE_PICTURE EP WITH(NOLOCK) ON C.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EP.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS
		END
		--	ASSIGNEE INFO
		BEGIN
			UPDATE @COMMENTS SET 
				ASSIGNED_EMP_FML = ISNULL(E.EMP_FNAME+' ','') + ISNULL(E.EMP_MI +'. ','') +  ISNULL(E.EMP_LNAME,''),
				ASSIGNED_EMP_IMAGE = NULL, 
				ASSIGNED_EMP_NICKNAME = EP.EMP_NICKNAME
			FROM
				@COMMENTS 
				INNER JOIN EMPLOYEE E WITH(NOLOCK) ON ASSIGNED_EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = E.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS
				INNER JOIN EMPLOYEE_PICTURE EP WITH(NOLOCK) ON ASSIGNED_EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EP.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS
			WHERE
				NOT ASSIGNED_EMP_CODE IS NULL;
		END
		--	VENDOR FML
		BEGIN
			UPDATE @COMMENTS SET EMP_FML = ISNULL(VEN_REP.VR_FNAME+' ','') + CASE WHEN NULLIF(VEN_REP.VR_MI,'') IS NULL THEN '' ELSE VEN_REP.VR_MI + '. ' END +  ISNULL(VEN_REP.VR_LNAME,'')
			FROM @COMMENTS	C
				INNER JOIN ALERT WITH(NOLOCK) ON ALERT.ALERT_ID = C.ALERT_ID 
				INNER JOIN VEN_REP WITH(NOLOCK) ON C.VR_CODE = VEN_REP.VR_CODE AND ALERT.VN_CODE = VEN_REP.VN_CODE
			WHERE USER_CODE IS NULL
		END
		--	TEMPLATE NAME
		BEGIN
			UPDATE @COMMENTS SET ALRT_NOTIFY_HDR_NAME = A.ALERT_NOTIFY_NAME
			FROM
				@COMMENTS C
				INNER JOIN ALERT_NOTIFY_HDR A WITH(NOLOCK) ON C.ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID;
		END
		--	STATE NAME
		BEGIN
			UPDATE @COMMENTS SET ALERT_STATE_NAME = A.ALERT_STATE_NAME
			FROM
				@COMMENTS C
				INNER JOIN ALERT_STATES A WITH(NOLOCK) ON C.ALERT_STATE_ID = A.ALERT_STATE_ID;
		END
		--	REPLY LEVEL
		BEGIN
			UPDATE @COMMENTS SET REPLY_LEVEL = R.REPLY_LEVEL
			FROM
				@COMMENTS C
				INNER JOIN @REPLIES R ON C.COMMENT_ID = R.COMMENT_ID;
		END
		--	PROOFING RELATED
		BEGIN
			IF @IS_PROOF = 1
			BEGIN
				--	MARKUP INFO
				BEGIN
					UPDATE @COMMENTS SET
						MARKUP_ID = PM.ID,
						MARKUP_XML = PM.MARKUP_XML,
						MARKUP = PM.MARKUP,
						MARKUP_DOCUMENT_ID = PM.DOCUMENT_ID,
						MARKUP_GENERATED_DATE = PM.GENERATED_DATE,
						MARKUP_TYPE_ID = PM.MARKUP_TYPE_ID,
						MARKUP_THUMBNAIL = PM.THUMBNAIL
					FROM
						@COMMENTS C
						INNER JOIN PROOFING_MARKUP PM WITH(NOLOCK) ON C.COMMENT_ID = PM.COMMENT_ID
					;
				END
				-- MISSING EMPLOYEE CODE FOR NEW FILE AND NEW VERSION COMMENTS
				BEGIN
					UPDATE @COMMENTS
					SET
						EMP_CODE = S.EMP_CODE
					FROM
						SEC_USER S WITH(NOLOCK)
						INNER JOIN @COMMENTS C ON S.USER_CODE = C.USER_CODE
					WHERE
						C.EMP_CODE IS NULL
						AND C.USER_CODE IS NOT NULL
					;
					UPDATE @COMMENTS
					SET
						EMP_FML = ISNULL(E.EMP_FNAME+' ','') + ISNULL(E.EMP_MI +'. ','') +  ISNULL(E.EMP_LNAME,''),
						EMP_NICKNAME = EP.EMP_NICKNAME,
						HAS_IMAGE =	CASE
										WHEN EP.EMP_IMAGE IS NOT NULL THEN CAST(1 AS BIT)
										ELSE CAST(0 AS BIT)
									END
					FROM
						@COMMENTS C
						INNER JOIN EMPLOYEE_PICTURE EP WITH(NOLOCK) ON C.EMP_CODE = EP.EMP_CODE
						INNER JOIN EMPLOYEE_CLOAK E WITH(NOLOCK) ON C.EMP_CODE = E.EMP_CODE
					WHERE
						(C.HAS_IMAGE IS NULL OR C.HAS_IMAGE = 0)
						AND C.EMP_CODE IS NOT NULL
				END
				--	CLEANUP EMPLOYEE INFO ON EXTERNAL REVIEWER RECS
				BEGIN
					UPDATE @COMMENTS
					SET
						USER_CODE = NULL,
						[USER_NAME] = NULL,
						EMP_CODE = NULL,
						EMP_FML = X.[NAME]
					FROM
						ALERT_COMMENT AC WITH(NOLOCK)
						INNER JOIN @COMMENTS C ON AC.COMMENT_ID = C.COMMENT_ID
						INNER JOIN PROOFING_X_REVIEWER X WITH(NOLOCK) ON AC.PROOFING_X_REVIEWER_ID = X.ID
					WHERE
						AC.ALERT_ID = @ALERT_ID
					;
				END
				--	EXTERNAL REVIEWER HAS_IMAGE FLAG
				BEGIN
					UPDATE @COMMENTS SET HAS_IMAGE = 0
					WHERE
						PROOFING_X_REVIEWER_ID IS NOT NULL
					;
				END
				--	EXTERNAL REVIEWER INITIALS
				BEGIN
					DECLARE
						@X_NAMES TABLE (ID INT IDENTITY, PROOFING_X_REVIEWER_ID INT, FULL_NAME VARCHAR(300), INITIALS VARCHAR(10))
					DECLARE
						@ROW_COUNTER INT = 0,
						@ROW_COUNT INT = 0
					;
					INSERT INTO @X_NAMES (PROOFING_X_REVIEWER_ID, FULL_NAME)	
					SELECT DISTINCT C.PROOFING_X_REVIEWER_ID, X.[NAME]
					FROM
						@COMMENTS C
						INNER JOIN PROOFING_X_REVIEWER X WITH(NOLOCK) ON C.PROOFING_X_REVIEWER_ID = X.ID
					WHERE
						C.PROOFING_X_REVIEWER_ID IS NOT NULL
					;
					SELECT @ROW_COUNT = COUNT(1) FROM @X_NAMES X;
					IF @ROW_COUNT IS NOT NULL AND @ROW_COUNT > 0
					BEGIN
						DECLARE
							@CURRENT_X_ID INT,
							@CURRENT_FULL VARCHAR(500),
							@CURRENT_INITS VARCHAR(10)
						WHILE @ROW_COUNT > @ROW_COUNTER
						BEGIN
							BEGIN TRY
								SELECT 
									@ROW_COUNTER = @ROW_COUNTER + 1,
									@CURRENT_X_ID = NULL,
									@CURRENT_FULL = NULL,
									@CURRENT_INITS = NULL
								;
								SELECT 
									@CURRENT_X_ID = PROOFING_X_REVIEWER_ID ,
									@CURRENT_FULL = FULL_NAME
								FROM 
									@X_NAMES 
								WHERE 
									ID = @ROW_COUNTER;
								IF @CURRENT_X_ID IS NOT NULL
								BEGIN
									SELECT
										@CURRENT_FULL = RTRIM(LTRIM(@CURRENT_FULL))
									SELECT
										@CURRENT_INITS =	SUBSTRING(@CURRENT_FULL, 1, 1) +
															LTRIM(RIGHT(@CURRENT_FULL, LEN(@CURRENT_FULL) - CHARINDEX(' ', @CURRENT_FULL ,1)));
									SELECT
										@CURRENT_INITS = UPPER(SUBSTRING(@CURRENT_INITS, 1, 2))
									UPDATE @X_NAMES SET INITIALS = @CURRENT_INITS
									WHERE
										PROOFING_X_REVIEWER_ID = @CURRENT_X_ID;
								END
							END TRY
							BEGIN CATCH
							END CATCH
						END
					END
					UPDATE @COMMENTS SET INITIALS = X.INITIALS
					FROM
						@X_NAMES X
						INNER JOIN @COMMENTS C ON X.PROOFING_X_REVIEWER_ID = C.PROOFING_X_REVIEWER_ID
				END
				--  ID EXTERNALS (?)
				BEGIN
					UPDATE @COMMENTS SET EMP_FML = EMP_FML + ' (XR)'
					WHERE
						PROOFING_X_REVIEWER_ID IS NOT NULL AND PROOFING_X_REVIEWER_ID > 0
					;
				END
				--	CLEAN UP NEW FILE COMMENTS
				BEGIN
					IF EXISTS (SELECT 1 FROM @COMMENTS C WHERE C.COMMENT LIKE 'NEW FILE |%')
					BEGIN
						INSERT INTO @FILE_COMMENTS (COMMENT_ID)
						SELECT
							C.COMMENT_ID
						FROM
							@COMMENTS C
						WHERE
							(C.COMMENT LIKE 'NEW FILE |%')
						ORDER BY
							C.COMMENT_ID
						;
						SELECT 
							@FIRST_NEW_FILE_COMMENT_ID = MIN(FC.COMMENT_ID)
						FROM
							@FILE_COMMENTS FC
						;
						IF @FIRST_NEW_FILE_COMMENT_ID IS NOT NULL
						BEGIN
							UPDATE @COMMENTS
							SET	COMMENT = CAST(C.COMMENT AS VARCHAR(MAX)) + '<br/>Approval reset.',
								SHORT_COMMENT = CAST(C.SHORT_COMMENT AS VARCHAR(MAX)) + '<br/>Approval reset.'
							FROM
								@COMMENTS C
								INNER JOIN @FILE_COMMENTS FC ON C.COMMENT_ID = FC.COMMENT_ID
							WHERE
								FC.COMMENT_ID <> @FIRST_NEW_FILE_COMMENT_ID
							;
						END
					END
				END
				--	CLEAN UP NEW REVISION COMMENTS
				BEGIN
					IF EXISTS (SELECT 1 FROM @COMMENTS C WHERE C.COMMENT LIKE 'NEW VERSION |%')
					BEGIN
						DELETE FROM @FILE_COMMENTS;
						INSERT INTO @FILE_COMMENTS (COMMENT_ID)
						SELECT
							C.COMMENT_ID
						FROM
							@COMMENTS C
						WHERE
							(C.COMMENT LIKE 'NEW VERSION |%')
						ORDER BY
							C.COMMENT_ID
						;
						BEGIN
							UPDATE @COMMENTS
							SET	COMMENT = CAST(C.COMMENT AS VARCHAR(MAX)) + '<br/>Approval reset.',
								SHORT_COMMENT = CAST(C.SHORT_COMMENT AS VARCHAR(MAX)) + '<br/>Approval reset.'
							FROM
								@COMMENTS C
								INNER JOIN @FILE_COMMENTS FC ON C.COMMENT_ID = FC.COMMENT_ID
							;
						END
					END
				END
			END
		END
		--	EMPLOYEE INITIALS
		BEGIN
			BEGIN TRY
				UPDATE @COMMENTS SET INITIALS = SUBSTRING(E.EMP_FNAME, 1, 1) + SUBSTRING(E.EMP_LNAME, 1, 1)
				FROM	
					@COMMENTS C
					INNER JOIN EMPLOYEE_CLOAK E WITH(NOLOCK) ON C.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = E.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS
				WHERE
					C.EMP_CODE IS NOT NULL
				;
			END TRY
			BEGIN CATCH
			END CATCH
		END
		--  CLIENT CONTACT INITIALS
		BEGIN
			BEGIN TRY
				UPDATE @COMMENTS SET INITIALS = SUBSTRING(CCH.CONT_FNAME, 1, 1) + SUBSTRING(CCH.CONT_LNAME, 1, 1)
				FROM	
					@COMMENTS C
					INNER JOIN CDP_CONTACT_HDR CCH WITH(NOLOCK) ON CAST(C.EMP_CODE AS INT) = CCH.CDP_CONTACT_ID
				WHERE
					C.IS_CLIENT_PORTAL_COMMENT = 1
				;
			END TRY
			BEGIN CATCH
			END CATCH
		END
		-- EXCLUDE SYSTEM COMMENTS FROM "MY"
		BEGIN
			UPDATE @COMMENTS SET IS_MY_COMMENT = 0
			WHERE
				IS_MY_COMMENT = 1
				AND (
				CAST(COMMENT AS VARCHAR(MAX)) LIKE 'NEW FILE |%' 
				OR CAST(COMMENT AS VARCHAR(MAX)) LIKE 'NEW VERSION |%'
				OR CAST(COMMENT AS VARCHAR(MAX)) LIKE '%| APPROVED |%'
				OR CAST(COMMENT AS VARCHAR(MAX)) LIKE '%| DEFERRED |%' 
				OR CAST(COMMENT AS VARCHAR(MAX)) LIKE '%| REJECTED |%'		)
		END
	END
	--	RETURN
	BEGIN
		SELECT
			[AlertID] = @ALERT_ID,
			[RowID] = C.ID,
			[CommentID] = C.COMMENT_ID,
			[GeneratedDate] = CASE @OFFSET
								WHEN 0 THEN GENERATED_DATE
								ELSE ISNULL(DATEADD(mi, (CONVERT(INT, @OFFSET) * 60) + (@OFFSET - CONVERT(INT, @OFFSET)), GENERATED_DATE), GENERATED_DATE)
							  END,
			ISNULL(C.IS_MY_COMMENT, 0),
			[Comment] = C.COMMENT,
			[ShortComment] = C.SHORT_COMMENT,
			[IsTruncated] = C.IS_TRUNCATED,
			[IsClientPortalComment] = C.IS_CLIENT_PORTAL_COMMENT,
			[UserName] = C.[USER_NAME],
			[UserCode] = C.USER_CODE,
			[EmployeeCode] = C.EMP_CODE,
			[AssignedEmployeeCode] = C.ASSIGNED_EMP_CODE,
			[AlertTemplateID] = C.ALRT_NOTIFY_HDR_ID,
			[AlertTemplateName] = C.ALRT_NOTIFY_HDR_NAME,
			[AlertStateID] = C.ALERT_STATE_ID,
			[AlertStateName] = C.ALERT_STATE_NAME,
			[AssignmentChanged] = C.ASSIGNMENT_CHANGED,
			[IsUnassigned] = C.IS_UNASSIGNED,
			[DocumentList] = C.DOCUMENT_LIST,
			[EmployeeFullName] = C.EMP_FML,
			[EmployeeNickname] = C.EMP_NICKNAME,
			[EmployeeImage] = NULL, --C.EMP_IMAGE,
			[AssignedFullName] = C.ASSIGNED_EMP_FML,
			[AssignedEmployeeNickname] = C.ASSIGNED_EMP_NICKNAME,
			[AssignedEmployeeImage] = NULL, --C.ASSIGNED_EMP_IMAGE,
			[CustodyStartDate] = CASE @OFFSET
								WHEN 0 THEN GENERATED_DATE
								ELSE ISNULL(DATEADD(mi, (CONVERT(INT, @OFFSET) * 60) + (@OFFSET - CONVERT(INT, @OFFSET)), GENERATED_DATE), GENERATED_DATE)
							  END,
			[CustodyEndDate] =	CASE @OFFSET
									WHEN 0 THEN C.CUSTODY_END_DATE
									ELSE ISNULL(DATEADD(mi, (CONVERT(INT, @OFFSET) * 60) + (@OFFSET - CONVERT(INT, @OFFSET)), C.CUSTODY_END_DATE), C.CUSTODY_END_DATE)
								END,
			[ReplyLevel] = C.REPLY_LEVEL,
			[ParentID] = ISNULL(C.PARENT_ID, 0),
			[MarkupID] = MARKUP_ID,
			[MarkupXML] = MARKUP_XML,
			[Markup] = MARKUP,
			[MarkupDocumentID] = MARKUP_DOCUMENT_ID,
			[MarkupGeneratedDate] = MARKUP_GENERATED_DATE,
			[MarkupTypeID] = MARKUP_TYPE_ID,
			[MarkupThumbnail] = MARKUP_THUMBNAIL,
			[DocumentID] = C.DOCUMENT_ID,
			[PROOFING_X_REVIEWER_ID] = C.PROOFING_X_REVIEWER_ID,
			[ProofingExternalReviewerID] = C.PROOFING_X_REVIEWER_ID,
			[HasImage] = ISNULL(C.HAS_IMAGE, 0),
			[Initials] = C.INITIALS,
			[ProofingStatusID] = C.PROOFING_STATUS_ID
		FROM 
			@COMMENTS C
		ORDER BY 
			[GENERATED_DATE] DESC,
			[CommentID] DESC;
	END
END
/*=========== QUERY ===========*/
