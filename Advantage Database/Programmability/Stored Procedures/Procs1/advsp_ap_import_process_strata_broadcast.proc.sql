CREATE PROC advsp_ap_import_process_strata_broadcast @batch_name varchar(50)

AS

-- 04/05/2016 MJC - MEDIA_NET was getting zeroed out by mistake when no legacy orders existed

DECLARE @BROADCASTWEEKS TABLE (
	[Year] smallint NOT NULL,
	[Week] smallint NOT NULL,
	[Month] smallint NOT NULL,
	WeekDate smalldatetime NOT NULL
)

INSERT @BROADCASTWEEKS 
exec advsp_broadcast_calendar_load

DECLARE @ORDERS_TO_PROCESS TABLE (
	ORDER_NBR int NOT NULL,
	LINE_NBR smallint NOT NULL,
	MONTH_NBR smallint NOT NULL,
	YEAR_NBR smallint NOT NULL,
	EXT_NET_AMT decimal(15,2) NULL,
	IMPORT_ID int NOT NULL,
	LINE_DATE smalldatetime NULL,
	MEDIA_TYPE varchar(2) NULL,
	ORDER_ID int NULL,
	TOTAL_SPOTS int NULL,
	NON_RESALE_AMT decimal(14,2) NULL,
	NETCHARGE decimal(14,2) NULL
)

DECLARE @ORDER_NBR int,
		@LINE_NBR smallint,
		@MONTH_NBR smallint,
		@YEAR_NBR smallint,
		@EXT_NET_AMT decimal(15,2),
		@IMPORT_ID int,
		@LINE_DATE smalldatetime,
		@MEDIA_TYPE varchar(2),
		@ORDER_ID int,
		@TOTAL_SPOTS int,
		@NON_RESALE_AMT decimal(14,2),
		@NETCHARGE decimal(14,2)

--only update the amount to 0 if its a new order (not legacy)
UPDATE dbo.IMP_AP_MEDIA SET MEDIA_NET = 0
FROM dbo.IMP_AP_MEDIA M
	INNER JOIN dbo.IMP_AP_HEADER H ON M.IMPORT_ID = H.IMPORT_ID AND H.BATCH_NAME = @batch_name
WHERE
	M.ORDER_LINE_ID IS NULL
AND ORDER_LINE_NBR IS NULL
AND M.MEDIA_TYPE IN ('R', 'T')
AND ORDER_NUMBER NOT IN (SELECT ORDER_NBR FROM dbo.RADIO_HEADER
						 UNION
						 SELECT ORDER_NBR FROM dbo.TV_HEADER)
AND ORDER_NUMBER IS NOT NULL  -- added 04/05/2016 MJC - MEDIA_NET was getting zeroed out by mistake when no legacy orders existed

--insert RADIO Orders
INSERT @ORDERS_TO_PROCESS
SELECT RD.ORDER_NBR, RD.LINE_NBR, RD.MONTH_NBR, RD.YEAR_NBR, RD.EXT_NET_AMT, OMY.IMPORT_ID, OMY.LINE_DATE, OMY.MEDIA_TYPE, OMY.ORDER_ID, RD.TOTAL_SPOTS, RD.NON_RESALE_AMT, RD.NETCHARGE
FROM dbo.RADIO_DETAIL RD
	INNER JOIN (SELECT DISTINCT M.ORDER_NUMBER, M.IMPORT_ID, M.LINE_DATE, M.MEDIA_TYPE, M.ORDER_ID,
					MONTH_NBR = CASE WHEN OH.UNITS = 'CM' AND M.LINE_DATE IS NOT NULL THEN MONTH(M.LINE_DATE) 
								ELSE (SELECT TOP 1 Month FROM @BROADCASTWEEKS
									  WHERE WeekDate <= M.LINE_DATE
									  ORDER BY WeekDate DESC) END,
					YEAR_NBR = CASE WHEN OH.UNITS = 'CM' AND M.LINE_DATE IS NOT NULL THEN YEAR(M.LINE_DATE)
								ELSE (SELECT TOP 1 Year FROM @BROADCASTWEEKS
									  WHERE WeekDate <= M.LINE_DATE
									  ORDER BY WeekDate DESC) END
				FROM dbo.IMP_AP_MEDIA M
					INNER JOIN dbo.IMP_AP_HEADER H ON M.IMPORT_ID = H.IMPORT_ID AND H.BATCH_NAME = @batch_name
					INNER JOIN (SELECT ORDER_NBR,UNITS
								FROM dbo.RADIO_HDR) OH ON M.ORDER_NUMBER = OH.ORDER_NBR 
				WHERE M.ORDER_LINE_ID IS NULL AND ORDER_LINE_NBR IS NULL AND M.MEDIA_TYPE = 'R'
				) OMY ON RD.ORDER_NBR = OMY.ORDER_NUMBER AND RD.MONTH_NBR = OMY.MONTH_NBR AND RD.YEAR_NBR = OMY.YEAR_NBR 
WHERE ACTIVE_REV = 1
AND (LINE_CANCELLED IS NULL OR LINE_CANCELLED = 0)

--insert TV Orders
INSERT @ORDERS_TO_PROCESS
SELECT TD.ORDER_NBR, TD.LINE_NBR, TD.MONTH_NBR, TD.YEAR_NBR, TD.EXT_NET_AMT, OMY.IMPORT_ID, OMY.LINE_DATE, OMY.MEDIA_TYPE, OMY.ORDER_ID, TD.TOTAL_SPOTS, TD.NON_RESALE_AMT, TD.NETCHARGE
FROM dbo.TV_DETAIL TD
	INNER JOIN (SELECT DISTINCT M.ORDER_NUMBER, M.IMPORT_ID, M.LINE_DATE, M.MEDIA_TYPE, M.ORDER_ID,
					MONTH_NBR = CASE WHEN OH.UNITS = 'CM' AND M.LINE_DATE IS NOT NULL THEN MONTH(M.LINE_DATE) 
								ELSE (SELECT TOP 1 Month FROM @BROADCASTWEEKS
									  WHERE WeekDate <= M.LINE_DATE
									  ORDER BY WeekDate DESC) END,
					YEAR_NBR = CASE WHEN OH.UNITS = 'CM' AND M.LINE_DATE IS NOT NULL THEN YEAR(M.LINE_DATE)
								ELSE (SELECT TOP 1 Year FROM @BROADCASTWEEKS
									  WHERE WeekDate <= M.LINE_DATE
									  ORDER BY WeekDate DESC) END
				FROM dbo.IMP_AP_MEDIA M
					INNER JOIN dbo.IMP_AP_HEADER H ON M.IMPORT_ID = H.IMPORT_ID AND H.BATCH_NAME = @batch_name
					INNER JOIN (SELECT ORDER_NBR,UNITS
								FROM dbo.TV_HDR) OH ON M.ORDER_NUMBER = OH.ORDER_NBR 
				WHERE M.ORDER_LINE_ID IS NULL AND ORDER_LINE_NBR IS NULL AND M.MEDIA_TYPE = 'T'
				) OMY ON TD.ORDER_NBR = OMY.ORDER_NUMBER AND TD.MONTH_NBR = OMY.MONTH_NBR AND TD.YEAR_NBR = OMY.YEAR_NBR 
WHERE ACTIVE_REV = 1
AND (LINE_CANCELLED IS NULL OR LINE_CANCELLED = 0)

DECLARE InsertOrders CURSOR FOR SELECT * FROM @ORDERS_TO_PROCESS
OPEN InsertOrders 

FETCH NEXT FROM InsertOrders INTO @ORDER_NBR, @LINE_NBR, @MONTH_NBR, @YEAR_NBR, @EXT_NET_AMT, @IMPORT_ID, @LINE_DATE, @MEDIA_TYPE, @ORDER_ID, @TOTAL_SPOTS, @NON_RESALE_AMT, @NETCHARGE
WHILE (@@FETCH_STATUS = 0)
BEGIN
	--create IMP_AP_MEDIA rows for Radio orders
	WHILE	(SELECT COUNT(1)
			FROM dbo.IMP_AP_MEDIA
			WHERE ORDER_NUMBER = @ORDER_NBR
			AND IMPORT_ID = @IMPORT_ID 
			AND ORDER_LINE_NBR IS NULL
			AND MEDIA_TYPE = 'R'
			AND LINE_DATE = @LINE_DATE) < 
			(SELECT COUNT(1)
			FROM dbo.RADIO_DETAIL
			WHERE ORDER_NBR = @ORDER_NBR AND MONTH_NBR = @MONTH_NBR AND YEAR_NBR = @YEAR_NBR
			AND ACTIVE_REV = 1 AND (LINE_CANCELLED IS NULL OR LINE_CANCELLED = 0))
	BEGIN	
		INSERT dbo.IMP_AP_MEDIA (IMPORT_ID, MEDIA_TYPE, ORDER_ID, ORDER_NUMBER, LINE_DATE)
		VALUES (@IMPORT_ID, @MEDIA_TYPE, @ORDER_ID, @ORDER_NBR, @LINE_DATE)
	END

	--create IMP_AP_MEDIA rows for TV orders
	WHILE	(SELECT  COUNT(1)
		FROM dbo.IMP_AP_MEDIA
		WHERE ORDER_NUMBER = @ORDER_NBR
		AND IMPORT_ID = @IMPORT_ID 
		AND ORDER_LINE_NBR IS NULL
		AND MEDIA_TYPE = 'T'
		AND LINE_DATE = @LINE_DATE) < (SELECT COUNT(1)
		FROM dbo.TV_DETAIL
		WHERE ORDER_NBR = @ORDER_NBR AND MONTH_NBR = @MONTH_NBR AND YEAR_NBR = @YEAR_NBR
		AND ACTIVE_REV = 1 AND (LINE_CANCELLED IS NULL OR LINE_CANCELLED = 0))
	BEGIN	
		INSERT dbo.IMP_AP_MEDIA (IMPORT_ID, MEDIA_TYPE, ORDER_ID, ORDER_NUMBER, LINE_DATE)
		VALUES (@IMPORT_ID, @MEDIA_TYPE, @ORDER_ID, @ORDER_NBR, @LINE_DATE)
	END
	
	FETCH NEXT FROM InsertOrders INTO @ORDER_NBR, @LINE_NBR, @MONTH_NBR, @YEAR_NBR, @EXT_NET_AMT, @IMPORT_ID, @LINE_DATE, @MEDIA_TYPE, @ORDER_ID, @TOTAL_SPOTS, @NON_RESALE_AMT, @NETCHARGE
END

CLOSE InsertOrders 
DEALLOCATE InsertOrders 

DECLARE UpdateOrders CURSOR FOR SELECT * FROM @ORDERS_TO_PROCESS
OPEN UpdateOrders 

FETCH NEXT FROM UpdateOrders INTO @ORDER_NBR, @LINE_NBR, @MONTH_NBR, @YEAR_NBR, @EXT_NET_AMT, @IMPORT_ID, @LINE_DATE, @MEDIA_TYPE, @ORDER_ID, @TOTAL_SPOTS, @NON_RESALE_AMT, @NETCHARGE
WHILE (@@FETCH_STATUS = 0)
BEGIN
	UPDATE dbo.IMP_AP_MEDIA SET ORDER_LINE_NBR = @LINE_NBR,
								[MONTH] = CASE @MONTH_NBR 
											WHEN 1 THEN 'JAN'
											WHEN 2 THEN 'FEB'
											WHEN 3 THEN 'MAR'
											WHEN 4 THEN 'APR'
											WHEN 5 THEN 'MAY'
											WHEN 6 THEN 'JUN'
											WHEN 7 THEN 'JUL'
											WHEN 8 THEN 'AUG'
											WHEN 9 THEN 'SEP'
											WHEN 10 THEN 'OCT'
											WHEN 11 THEN 'NOV'
											WHEN 12 THEN 'DEC' END,
								[YEAR] = @YEAR_NBR,
								MEDIA_NET = @EXT_NET_AMT,
								MEDIA_QTY = @TOTAL_SPOTS,
								MEDIA_VN_TAX = @NON_RESALE_AMT,
								MEDIA_NET_CHARGE = @NETCHARGE
	WHERE	IMPORT_ID = @IMPORT_ID 
	AND		ID = (SELECT MIN(ID) FROM dbo.IMP_AP_MEDIA WHERE IMPORT_ID = @IMPORT_ID AND ORDER_LINE_NBR IS NULL)
	
	FETCH NEXT FROM UpdateOrders INTO @ORDER_NBR, @LINE_NBR, @MONTH_NBR, @YEAR_NBR, @EXT_NET_AMT, @IMPORT_ID, @LINE_DATE, @MEDIA_TYPE, @ORDER_ID, @TOTAL_SPOTS, @NON_RESALE_AMT, @NETCHARGE
END

CLOSE UpdateOrders 
DEALLOCATE UpdateOrders 

DECLARE @Diff decimal(18,2)

DECLARE BalanceOrders CURSOR FOR SELECT DISTINCT IMPORT_ID FROM @ORDERS_TO_PROCESS 
OPEN BalanceOrders

FETCH NEXT FROM BalanceOrders INTO @IMPORT_ID

WHILE (@@FETCH_STATUS = 0)
BEGIN
	SELECT @Diff = 
	(SELECT COALESCE(INV_TOTAL_NET, 0) + COALESCE(INV_TOTAL_TAX, 0)
	FROM dbo.IMP_AP_HEADER
	WHERE IMPORT_ID = @IMPORT_ID) -

	(SELECT SUM(COALESCE(MEDIA_NET, 0) + COALESCE(MEDIA_VN_TAX, 0) + COALESCE(MEDIA_NET_CHARGE, 0))
	FROM dbo.IMP_AP_MEDIA
	WHERE IMPORT_ID = @IMPORT_ID) -

	(SELECT COALESCE(SUM(COALESCE(GL_NET, 0)), 0)
	FROM dbo.IMP_AP_GL
	WHERE IMPORT_ID = @IMPORT_ID) -
	
	(SELECT COALESCE(SUM(COALESCE(JOB_NET, 0)  + COALESCE(JOB_VN_TAX, 0)), 0)
	FROM dbo.IMP_AP_JOB
	WHERE IMPORT_ID = @IMPORT_ID)

	IF @Diff <> 0 
		UPDATE dbo.IMP_AP_MEDIA SET MEDIA_NET = MEDIA_NET + @Diff
		WHERE IMPORT_ID = @IMPORT_ID
		AND ID = (SELECT MAX(ID) FROM dbo.IMP_AP_MEDIA WHERE IMPORT_ID = @IMPORT_ID)
	
	FETCH NEXT FROM BalanceOrders INTO @IMPORT_ID
END

CLOSE BalanceOrders
DEALLOCATE BalanceOrders
