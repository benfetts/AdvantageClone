IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[advsp_card_user_sort_tasks]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[advsp_card_user_sort_tasks]
GO
CREATE PROCEDURE [dbo].[advsp_card_user_sort_tasks] 
@USER_CODE VARCHAR(100),
@EMP_CODE VARCHAR(6),
@JOB_NUMBER INT,
@JOB_COMPONENT_NBR SMALLINT,
@TASK_SEQ_NBR SMALLINT,
@EVENT_TASK_ID INT,
@NEW_POSITION INT,
@IS_ALL_TASK_LIST BIT
AS
/*=========== QUERY ===========*/
--	TABLE VARIABLES
BEGIN
	DECLARE @TASK_LIST TABLE (CDP VARCHAR(50) NULL,
							  JUST_JOB_DATA VARCHAR(100) NULL,
							  JOB_DATA VARCHAR(100) NULL,
							  FNC_CODE VARCHAR(100) NULL,
							  TASK_DESC VARCHAR(50) NULL,
							  FNC_CMMTS TEXT NULL,
							  [START_DATE] SMALLDATETIME NULL,
							  [END_DATE] SMALLDATETIME NULL,
							  DUE_TIME VARCHAR(100) NULL,
							  DUE_DATE_TIME VARCHAR(100) NULL,
							  JOB_NUMBER INT NULL,
							  JOB_COMPONENT_NBR SMALLINT NULL,
							  HOURS_ALLOWED DECIMAL(9,3) NULL,
							  TASK_SEQ_NBR SMALLINT NULL,
							  TEMP_COMPLETE_DATE SMALLDATETIME NULL,
							  EMP_CODE VARCHAR(6) NULL,
							  IS_EVENT BIT NULL,
							  EVENT_TASK_ID INT NULL,
							  TASK_STATUS VARCHAR(10) NULL,
							  TASK_STATUS_TEXT VARCHAR (200) NULL,
							  CARD_GROUPING_PRIORITY VARCHAR (200) NULL,
							  ACTIVE_PENDING_TEXT VARCHAR (200) NULL,
							  JOB_DESC VARCHAR(500) NULL,
							  JOB_COMP_DESC VARCHAR(500) NULL,
							  JOB_AND_COMP_TEXT VARCHAR(500) NULL,
							  HAS_DOCUMENTS BIT NULL,
							  CARD_SEQ_NBR INT NULL,
							  PERCENT_COMPLETE DECIMAL (9,3),
							  [STARTED] VARCHAR(30) NULL,
							  CL_NAME VARCHAR(100) NULL,
							  IS_BOARD_TASK BIT NULL,
							  ALERT_ID INT,
							  SPRINT_ID INT,
							  [PRIOITY] INT,
							  END_SELECT_CLAUSE VARCHAR(10) NULL);
	DECLARE @TASK_LIST_ALL TABLE (CDP VARCHAR(50) NULL,
							  JobData VARCHAR(100) NULL,
							  Task VARCHAR(100) NULL,
							  TaskComment VARCHAR(100) NULL,
							  StartDate SMALLDATETIME NULL,
							  DueDate SMALLDATETIME NULL,
							  DueTime VARCHAR(100) NULL,
							  JobNo INT NULL,
							  JobComp SMALLINT NULL,
							  HoursAllowed DECIMAL(9,3) NULL,
							  SeqNo SMALLINT NULL,
							  TempCompleteDate SMALLDATETIME NULL,
							  Employee VARCHAR(1000) NULL,
							  EmpCode VARCHAR(6) NULL,
							  OFFICE_CODE VARCHAR(100) NULL,
							  IS_EVENT BIT NULL,
							  EVENT_TASK_ID INT NULL,
							  TASK_STATUS VARCHAR(10) NULL,
							  JOB_DESC VARCHAR(500) NULL,
							  JOB_COMP_DESC VARCHAR(500) NULL,
							  JOB_COMP VARCHAR(500) NULL,
							  HAS_DOCUMENTS BIT NULL,
							  HAS_CHILDREN BIT NULL,
							  ALERT_ID INT,
							  SPRINT_ID INT,
							  [PRIOITY] INT);
	DECLARE @SORTING_TABLE TABLE (ID INT IDENTITY(1,1) NOT NULL,
	                              JOB_NUMBER INT NULL,
								  JOB_COMPONENT_NBR SMALLINT NULL,
								  TASK_SEQ_NBR SMALLINT NULL,
								  EVENT_TASK_ID INT NULL,
								  OLD_POSITION INT NULL,
								  NEW_POSITION INT NULL);
	DECLARE @SORTED_TABLE TABLE (ID INT IDENTITY(1,1) NOT NULL,
	                              JOB_NUMBER INT NULL,
								  JOB_COMPONENT_NBR SMALLINT NULL,
								  TASK_SEQ_NBR SMALLINT NULL,
								  EVENT_TASK_ID INT NULL,
								  OLD_POSITION INT NULL,
								  NEW_POSITION INT NULL,
								  PRE_SORT_ID INT NULL);
END
--	VARIABLES
BEGIN
	DECLARE
		@START_DATE SMALLDATETIME,
		@ID_OF_MOVED_ROW INT,
		@CURRENT_ID INT, 
		@OLD_POSITION INT,
		@LAST_POSITION INT,
		@POSITION_DIFF INT, 
		@ROW_COUNT INT,
		@APPLICATION VARCHAR(100)
END
--	INITIALIZE
BEGIN
	SELECT 
		@START_DATE = GETDATE(),
		@CURRENT_ID = 1,
		@NEW_POSITION = ISNULL(@NEW_POSITION, 0) + 1,
		@APPLICATION =	CASE
							WHEN @IS_ALL_TASK_LIST IS NOT NULL AND @IS_ALL_TASK_LIST = 1 THEN 'TaskList'
							ELSE 'MyTasks'
						END

END
--	GET TASKS FROM QUERY TO MAKE SURE CURRENT SORT CORRECT
BEGIN

	DECLARE
		@TASK_STATUS VARCHAR(1),
		@TASK_SHOW VARCHAR(256),
		@SEARCH_VAL VARCHAR(500),
		@ROLE VARCHAR(100),
		@DUE_DATE SMALLDATETIME,
		@MANAGER_CODE VARCHAR(10),
		@OFFICE_CODE VARCHAR(10),
		@AE VARCHAR(10);

	SET @TASK_STATUS = '';
	SET @TASK_SHOW = 'All';
	SET @SEARCH_VAL = '';

	SELECT 
		@TASK_STATUS =
			CASE 
				WHEN UPPER(VARIABLE_VALUE ) = 'PROJECTED' THEN 'P'
				WHEN UPPER(VARIABLE_VALUE ) = 'ACTIVE' THEN 'A'
				WHEN UPPER(VARIABLE_VALUE ) = 'H' THEN 'H'
				WHEN UPPER(VARIABLE_VALUE ) = 'L' THEN 'L'
				WHEN UPPER(VARIABLE_VALUE ) = 'EVENT_TASKS' THEN 'E'
				ELSE ''
			END
	FROM 
		APP_VARS WITH(NOLOCK) 
	WHERE 
		[APPLICATION] = @APPLICATION 
		AND VARIABLE_NAME = 'ddType' 
		AND [USERID] = @USER_CODE;
	SELECT 
		@TASK_SHOW =
			CASE 
				WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN 'All'
				ELSE VARIABLE_VALUE
			END
	FROM 
		APP_VARS WITH(NOLOCK) 
	WHERE 
		[APPLICATION] = @APPLICATION 
		AND VARIABLE_NAME = 'ddTaskShow' 
		AND [USERID] = @USER_CODE;
	SELECT 
		@SEARCH_VAL =
			CASE 
				WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN ''
				ELSE VARIABLE_VALUE
			END
	FROM 
		APP_VARS WITH(NOLOCK)
	WHERE 
		[APPLICATION] = @APPLICATION 
		AND VARIABLE_NAME = 'sSearch' 
		AND [USERID] = @USER_CODE;

	IF @IS_ALL_TASK_LIST IS NOT NULL AND @IS_ALL_TASK_LIST = 1
	BEGIN
		SELECT 
			@ROLE =
				CASE 
					WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN ''
					ELSE VARIABLE_VALUE
				END
		FROM 
			APP_VARS WITH(NOLOCK)
		WHERE 
			[APPLICATION] = @APPLICATION 
			AND VARIABLE_NAME = 'sRole' 
			AND [USERID] = @USER_CODE;
		SELECT 
			@START_DATE =
				CASE 
					WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN ''
					ELSE VARIABLE_VALUE
				END
		FROM 
			APP_VARS WITH(NOLOCK)
		WHERE 
			[APPLICATION] = @APPLICATION 
			AND VARIABLE_NAME = 'dDateStart' 
			AND [USERID] = @USER_CODE;
		SELECT 
			@DUE_DATE =
				CASE 
					WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN ''
					ELSE VARIABLE_VALUE
				END
		FROM 
			APP_VARS WITH(NOLOCK)
		WHERE 
			[APPLICATION] = @APPLICATION 
			AND VARIABLE_NAME = 'dDateDue' 
			AND [USERID] = @USER_CODE;
		SELECT 
			@MANAGER_CODE =
				CASE 
					WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN ''
					ELSE VARIABLE_VALUE
				END
		FROM 
			APP_VARS WITH(NOLOCK)
		WHERE 
			[APPLICATION] = @APPLICATION 
			AND VARIABLE_NAME = 'sManager' 
			AND [USERID] = @USER_CODE;
		SELECT 
			@OFFICE_CODE =
				CASE 
					WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN ''
					ELSE VARIABLE_VALUE
				END
		FROM 
			APP_VARS WITH(NOLOCK)
		WHERE 
			[APPLICATION] = @APPLICATION 
			AND VARIABLE_NAME = 'sOffice' 
			AND [USERID] = @USER_CODE;
		SELECT 
			@AE =
				CASE 
					WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN ''
					ELSE VARIABLE_VALUE
				END
		FROM 
			APP_VARS WITH(NOLOCK)
		WHERE 
			[APPLICATION] = @APPLICATION 
			AND VARIABLE_NAME = 'sAcctExec' 
			AND [USERID] = @USER_CODE;

		INSERT INTO @TASK_LIST_ALL
		EXEC usp_wv_dto_tasks_new
				@UserID = @USER_CODE,
				@EmpCode = @EMP_CODE,
				@Role = @ROLE,
				@StartDate = @START_DATE,
				@DueDate = @DUE_DATE,
				@ManagerCode = @MANAGER_CODE,
				@Office = @OFFICE_CODE,
				@TaskStatus = @TASK_STATUS,
				@Search = @SEARCH_VAL,
				@AcctExec = @AE;
	END
	ELSE
	BEGIN
		INSERT INTO @TASK_LIST
		EXEC advsp_tasks_get_by_employee 
				@UserID = @USER_CODE, 
				@EmpCode = @EMP_CODE, 
				@StartDate = @START_DATE, 
				@TaskStatus = @TASK_STATUS, 
				@TaskShow = @TASK_SHOW, 
				@Search = @SEARCH_VAL, 
				@CP = 0, 
				@CPID = 0, 
				@SORT = '';
	END

END
--	GET JUST DATA WE NEED
BEGIN

	IF @IS_ALL_TASK_LIST IS NOT NULL AND @IS_ALL_TASK_LIST = 1
	BEGIN
		INSERT INTO @SORTING_TABLE (JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION)
		SELECT T.JobNo, T.JobComp, T.SeqNo, -1, E.CARD_SEQ_NBR
		FROM 
			@TASK_LIST_ALL T
			INNER JOIN JOB_TRAFFIC_DET_EMPS E ON T.JobNo = E.JOB_NUMBER AND T.JobComp = E.JOB_COMPONENT_NBR AND T.SeqNo = E.SEQ_NBR
		WHERE
			E.EMP_CODE = @EMP_CODE
	END
	ELSE
	BEGIN
		INSERT INTO @SORTING_TABLE (JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION)
		SELECT 
			JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, CARD_SEQ_NBR 
		FROM 
			@TASK_LIST;
	END
	SELECT @ROW_COUNT = COUNT(1) FROM @SORTING_TABLE;
	IF @NEW_POSITION > @ROW_COUNT
	BEGIN
		SELECT @NEW_POSITION = @ROW_COUNT;
	END
	UPDATE @SORTING_TABLE SET OLD_POSITION = ID WHERE OLD_POSITION IS NULL;
END
--	SET POSITION OF TASK THAT WAS MOVED
BEGIN
	SELECT @ID_OF_MOVED_ROW = ID, @OLD_POSITION = ISNULL(OLD_POSITION, 0) FROM @SORTING_TABLE WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR AND TASK_SEQ_NBR = @TASK_SEQ_NBR;
	UPDATE @SORTING_TABLE SET NEW_POSITION = @NEW_POSITION WHERE ID = @ID_OF_MOVED_ROW;
		SET @POSITION_DIFF = @NEW_POSITION - @OLD_POSITION;
END
IF @POSITION_DIFF <> 0
BEGIN
	----	RE-SORT
	IF @POSITION_DIFF < 0
	BEGIN
		INSERT INTO @SORTED_TABLE (JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, PRE_SORT_ID)
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, ID FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND OLD_POSITION < @NEW_POSITION ORDER BY OLD_POSITION;

		INSERT INTO @SORTED_TABLE (JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, PRE_SORT_ID)
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, ID FROM @SORTING_TABLE WHERE NEW_POSITION = @NEW_POSITION;

		INSERT INTO @SORTED_TABLE (JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, PRE_SORT_ID)
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, ID FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND ID NOT IN (SELECT PRE_SORT_ID FROM @SORTED_TABLE) ORDER BY OLD_POSITION;

		UPDATE @SORTED_TABLE SET NEW_POSITION = ID WHERE NEW_POSITION IS NULL;
	END
	IF @POSITION_DIFF > 0
	BEGIN
		INSERT INTO @SORTED_TABLE (JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, PRE_SORT_ID)
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, ID FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND OLD_POSITION <= @NEW_POSITION ORDER BY OLD_POSITION;

		INSERT INTO @SORTED_TABLE (JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, PRE_SORT_ID)
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, ID FROM @SORTING_TABLE WHERE NEW_POSITION = @NEW_POSITION;

		INSERT INTO @SORTED_TABLE (JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, PRE_SORT_ID)
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, EVENT_TASK_ID, OLD_POSITION, NEW_POSITION, ID FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND ID NOT IN (SELECT PRE_SORT_ID FROM @SORTED_TABLE) ORDER BY OLD_POSITION;

		UPDATE @SORTED_TABLE SET NEW_POSITION = ID WHERE NEW_POSITION IS NULL;
	END
	--SELECT * FROM @SORTING_TABLE ORDER BY NEW_POSITION;
	--	UPDATE THE RECORDS
	BEGIN
		UPDATE JOB_TRAFFIC_DET_EMPS SET CARD_SEQ_NBR = ST.NEW_POSITION
		FROM JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN @SORTED_TABLE ST ON JTDE.JOB_NUMBER = ST.JOB_NUMBER AND JTDE.JOB_COMPONENT_NBR = ST.JOB_COMPONENT_NBR AND JTDE.SEQ_NBR = ST.TASK_SEQ_NBR 
		WHERE JTDE.EMP_CODE = @EMP_CODE;
		UPDATE EVENT_TASK SET CARD_SEQ_NBR = ST.NEW_POSITION
		FROM EVENT_TASK ET INNER JOIN @SORTED_TABLE ST ON ET.EVENT_TASK_ID = ST.EVENT_TASK_ID
		WHERE ET.EMP_CODE = @EMP_CODE;
	END

END
/*=========== QUERY ===========*/