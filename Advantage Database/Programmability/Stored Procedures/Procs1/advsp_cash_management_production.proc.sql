--CASH MANAGEMENT - PRODUCTION
--1) 6/10/2021, 000735/02-4559 Add Sales Class, Job Type, AR Gross Unpaid Amount and Accrued Liability

SET ANSI_NULLS ON

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
IF EXISTS (Select * from dbo.sysobjects where id = object_id(N'[dbo].[advsp_cash_management_production]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[advsp_cash_management_production]

GO

CREATE PROCEDURE [dbo].[advsp_cash_management_production] (
	@DATE_TYPE smallint = 1,
	@START_DATE datetime = '1/1/1900',
	@END_DATE datetime = '12/31/2900',
	@OPEN_JOB_ONLY AS bit = 1,
	@OFFICE_LIST AS varchar(Max) = NULL,
	@CLIENT_LIST AS varchar(Max) = NULL,
	@DIVISION_LIST AS varchar(Max) = NULL,
	@PRODUCT_LIST AS varchar(Max) = NULL,
	@ACCT_EXEC_LIST AS varchar(Max) = NULL,
	@USER_CODE AS varchar(100),
	@INCLUDE_NONBILLABLE AS bit = 0)

--DATE_TYPE 1 = None, 2 = Job Opened Date, 3 = Job Start Date, 4 = Job Due Date

AS
BEGIN
SET NOCOUNT ON;

--CASH MANAGEMENT DATA
CREATE TABLE #CashManagementData (
	ID							[int] IDENTITY(1,1) NOT NULL,
	ClientCode					varchar(6)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	ClientName					varchar(40)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	DivisionCode				varchar(6)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	DivisionName				varchar(40)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	ProductCode					varchar(6)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	ProductDescription			varchar(40)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	JobNumber					int NOT NULL,
	JobDescription				varchar(60)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	JobComponentNumber			smallint NOT NULL,
	JobComponentDescription		varchar(60)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	SalesClassCode				varchar(6)	COLLATE SQL_Latin1_General_CP1_CS_AS,--1
	SalesClassDescription		varchar(30)	COLLATE	SQL_Latin1_General_CP1_CS_AS,--1
	JobTypeCode					varchar(10)	COLLATE SQL_Latin1_General_CP1_CS_AS,--1
	JobTypeDescription			varchar(30)	COLLATE SQL_Latin1_General_CP1_CS_AS,--1
	TypeCode					varchar(2)	COLLATE SQL_Latin1_General_CP1_CS_AS,--BL or AP
	ARInvoiceNumber				int,
	ARInvoiceDate				smalldatetime,
	ARCostAmount				decimal(18,2),
	ARTotalBillAmount			decimal(18,2),
	ARNetPaidAmount				decimal(18,2),
	ARGrossPaidAmount			decimal(18,2),
	ARPartialAmount				decimal(18,2),
	ARPaymentDescription		varchar(12)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	AROutstandingAmount			decimal(18,2),--1
	ARAccruedLiabilityAmount	decimal(18,2),--1
	VendorCode					varchar(6)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	VendorName					varchar(40)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	APInvoiceNumber				varchar(20)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	APInvoiceDate				smalldatetime,
	APBillableCostAmount		decimal(14,2),
	APNonbillableCostAmount		decimal(14,2),
	APTotalCostAmount			decimal(14,2),
	APUnpaidAmount				decimal(14,2),
	APPaidAmount				decimal(14,2),
	APPaymentDescription		varchar(12)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	EstimatedNetCashAvailable	decimal(18,2),
	EstimatedGrossCashAvailable	decimal(18,2)
	)

	DECLARE @EMP_CODE AS VARCHAR(6)
	DECLARE @RestrictionsOffice AS INTEGER
	DECLARE @RestrictionCDP INT

	SELECT @EMP_CODE = EMP_CODE FROM SEC_USER WHERE UPPER(USER_CODE) = UPPER(@USER_CODE)

	SELECT @RestrictionsOffice = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CODE
	
	SELECT @RestrictionCDP = COUNT(*) FROM dbo.SEC_CLIENT WHERE SEC_CLIENT.[USER_ID] = @USER_CODE


--GET JOB/COMPONENTS FOR SELECTED CRITERIA
CREATE TABLE #JobList (
	JOB_NUMBER				int NOT NULL,
	JOB_COMPONENT_NBR		smallint NOT NULL
	)

IF @RestrictionsOffice > 0 AND @RestrictionCDP > 0
BEGIN
	INSERT INTO #JobList
	SELECT JC.JOB_NUMBER, JC.JOB_COMPONENT_NBR
	FROM dbo.JOB_COMPONENT JC
	INNER JOIN dbo.JOB_LOG JL ON JC.JOB_NUMBER = JL.JOB_NUMBER
	INNER JOIN SEC_CLIENT ON JL.CL_CODE = SEC_CLIENT.CL_CODE AND JL.DIV_CODE = SEC_CLIENT.DIV_CODE AND JL.PRD_CODE = SEC_CLIENT.PRD_CODE
	INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JL.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
	WHERE (
		1 = CASE WHEN @RestrictionCDP = 0 THEN 1 WHEN UPPER(SEC_CLIENT.[USER_ID]) = UPPER(@USER_CODE) AND (SEC_CLIENT.TIME_ENTRY IS NULL OR SEC_CLIENT.TIME_ENTRY = 0) THEN 1 ELSE 0 END AND
		1 = CASE WHEN @OPEN_JOB_ONLY = 1 AND (JC.JOB_PROCESS_CONTRL = 6 OR JC.JOB_PROCESS_CONTRL = 12) THEN 0 ELSE 1 END AND
		(JL.OFFICE_CODE IN (SELECT * FROM dbo.udf_split_list(@OFFICE_LIST, ',')) OR @OFFICE_LIST IS NULL) AND
		(JL.CL_CODE IN (SELECT * FROM dbo.udf_split_list(@CLIENT_LIST, ',')) OR @CLIENT_LIST IS NULL) AND
		1 = CASE WHEN @DIVISION_LIST IS NULL THEN 1 WHEN (JL.CL_CODE + '|' + JL.DIV_CODE) IN (SELECT * FROM dbo.udf_split_list(@DIVISION_LIST, ',')) THEN 1 ELSE 0 END AND
		1 = CASE WHEN @PRODUCT_LIST IS NULL THEN 1 WHEN (JL.CL_CODE + '|' + JL.DIV_CODE + '|' + JL.PRD_CODE) IN (SELECT * FROM dbo.udf_split_list(@PRODUCT_LIST, ',')) THEN 1 ELSE 0 END AND
		(JC.EMP_CODE IN (SELECT * FROM dbo.udf_split_list(@ACCT_EXEC_LIST, ',')) OR @ACCT_EXEC_LIST IS NULL)
		)
END
ELSE IF @RestrictionsOffice > 0 AND @RestrictionCDP = 0
BEGIN
	INSERT INTO #JobList
	SELECT JC.JOB_NUMBER, JC.JOB_COMPONENT_NBR
	FROM dbo.JOB_COMPONENT JC
	JOIN dbo.JOB_LOG JL ON JC.JOB_NUMBER = JL.JOB_NUMBER
	INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JL.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
	WHERE (
		1 = CASE WHEN @OPEN_JOB_ONLY = 1 AND (JC.JOB_PROCESS_CONTRL = 6 OR JC.JOB_PROCESS_CONTRL = 12) THEN 0 ELSE 1 END AND
		(JL.OFFICE_CODE IN (SELECT * FROM dbo.udf_split_list(@OFFICE_LIST, ',')) OR @OFFICE_LIST IS NULL) AND
		(JL.CL_CODE IN (SELECT * FROM dbo.udf_split_list(@CLIENT_LIST, ',')) OR @CLIENT_LIST IS NULL) AND
		1 = CASE WHEN @DIVISION_LIST IS NULL THEN 1 WHEN (JL.CL_CODE + '|' + JL.DIV_CODE) IN (SELECT * FROM dbo.udf_split_list(@DIVISION_LIST, ',')) THEN 1 ELSE 0 END AND
		1 = CASE WHEN @PRODUCT_LIST IS NULL THEN 1 WHEN (JL.CL_CODE + '|' + JL.DIV_CODE + '|' + JL.PRD_CODE) IN (SELECT * FROM dbo.udf_split_list(@PRODUCT_LIST, ',')) THEN 1 ELSE 0 END AND
		(JC.EMP_CODE IN (SELECT * FROM dbo.udf_split_list(@ACCT_EXEC_LIST, ',')) OR @ACCT_EXEC_LIST IS NULL)
		)
END
ELSE IF @RestrictionsOffice = 0 AND @RestrictionCDP > 0
BEGIN
	INSERT INTO #JobList
	SELECT JC.JOB_NUMBER, JC.JOB_COMPONENT_NBR
	FROM dbo.JOB_COMPONENT JC
	JOIN dbo.JOB_LOG JL ON JC.JOB_NUMBER = JL.JOB_NUMBER
	INNER JOIN SEC_CLIENT ON JL.CL_CODE = SEC_CLIENT.CL_CODE AND JL.DIV_CODE = SEC_CLIENT.DIV_CODE AND JL.PRD_CODE = SEC_CLIENT.PRD_CODE
	WHERE (
		1 = CASE WHEN @RestrictionCDP = 0 THEN 1 WHEN SEC_CLIENT.[USER_ID] = @USER_CODE AND (SEC_CLIENT.TIME_ENTRY IS NULL OR SEC_CLIENT.TIME_ENTRY = 0) THEN 1 ELSE 0 END AND
		1 = CASE WHEN @OPEN_JOB_ONLY = 1 AND (JC.JOB_PROCESS_CONTRL = 6 OR JC.JOB_PROCESS_CONTRL = 12) THEN 0 ELSE 1 END AND
		(JL.OFFICE_CODE IN (SELECT * FROM dbo.udf_split_list(@OFFICE_LIST, ',')) OR @OFFICE_LIST IS NULL) AND
		(JL.CL_CODE IN (SELECT * FROM dbo.udf_split_list(@CLIENT_LIST, ',')) OR @CLIENT_LIST IS NULL) AND
		1 = CASE WHEN @DIVISION_LIST IS NULL THEN 1 WHEN (JL.CL_CODE + '|' + JL.DIV_CODE) IN (SELECT * FROM dbo.udf_split_list(@DIVISION_LIST, ',')) THEN 1 ELSE 0 END AND
		1 = CASE WHEN @PRODUCT_LIST IS NULL THEN 1 WHEN (JL.CL_CODE + '|' + JL.DIV_CODE + '|' + JL.PRD_CODE) IN (SELECT * FROM dbo.udf_split_list(@PRODUCT_LIST, ',')) THEN 1 ELSE 0 END AND
		(JC.EMP_CODE IN (SELECT * FROM dbo.udf_split_list(@ACCT_EXEC_LIST, ',')) OR @ACCT_EXEC_LIST IS NULL)
		)
END
ELSE
BEGIN
	INSERT INTO #JobList
	SELECT JC.JOB_NUMBER, JC.JOB_COMPONENT_NBR
	FROM dbo.JOB_COMPONENT JC
	JOIN dbo.JOB_LOG JL ON JC.JOB_NUMBER = JL.JOB_NUMBER
	WHERE (
		1 = CASE WHEN @OPEN_JOB_ONLY = 1 AND (JC.JOB_PROCESS_CONTRL = 6 OR JC.JOB_PROCESS_CONTRL = 12) THEN 0 ELSE 1 END AND
		(JL.OFFICE_CODE IN (SELECT * FROM dbo.udf_split_list(@OFFICE_LIST, ',')) OR @OFFICE_LIST IS NULL) AND
		(JL.CL_CODE IN (SELECT * FROM dbo.udf_split_list(@CLIENT_LIST, ',')) OR @CLIENT_LIST IS NULL) AND
		1 = CASE WHEN @DIVISION_LIST IS NULL THEN 1 WHEN (JL.CL_CODE + '|' + JL.DIV_CODE) IN (SELECT * FROM dbo.udf_split_list(@DIVISION_LIST, ',')) THEN 1 ELSE 0 END AND
		1 = CASE WHEN @PRODUCT_LIST IS NULL THEN 1 WHEN (JL.CL_CODE + '|' + JL.DIV_CODE + '|' + JL.PRD_CODE) IN (SELECT * FROM dbo.udf_split_list(@PRODUCT_LIST, ',')) THEN 1 ELSE 0 END AND
		(JC.EMP_CODE IN (SELECT * FROM dbo.udf_split_list(@ACCT_EXEC_LIST, ',')) OR @ACCT_EXEC_LIST IS NULL)
		)
END



--===================================
--BEGIN GET BILLING AND RECEIPTS DATA
--===================================
--GET BILLING
CREATE TABLE #Billing (
	CL_CODE				varchar(6)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	CL_NAME				varchar(40)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	DIV_CODE			varchar(6)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	DIV_NAME			varchar(40)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	PRD_CODE			varchar(6)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	PRD_DESCRIPTION		varchar(40)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	JOB_NUMBER			int NOT NULL,
	JOB_DESC			varchar(60)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	JOB_COMPONENT_NBR	smallint NOT NULL,
	JOB_COMP_DESC		varchar(60)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	AR_INV_NBR			int NOT NULL,
	AR_INV_DATE			smalldatetime,
	TOTAL_COST_BILLED	Decimal(18,2),
	TOTAL_BILLED		Decimal(18,2),
	AB_COST_BILLED		Decimal(18,2)--1 AccruedLiability
	)
INSERT INTO #Billing
SELECT AR.CL_CODE, C.CL_NAME, AR.DIV_CODE, D.DIV_NAME, AR.PRD_CODE, P.PRD_DESCRIPTION, AR.JOB_NUMBER, JL.JOB_DESC, AR.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, AR.AR_INV_NBR, A.AR_INV_DATE, SUM(ISNULL(AR.COST_AMT,0)+ISNULL(AR.NON_RESALE_AMT,0)+ISNULL(AR.AB_COST_AMT,0)+ISNULL(AB_NONRESALE_AMT,0)), SUM(ISNULL(AR.TOTAL_BILL,0)), SUM(ISNULL(AB_COST_AMT,0)+ISNULL(AB_NONRESALE_AMT,0))--1
FROM dbo.AR_SUMMARY AR
JOIN #JobList J ON J.JOB_NUMBER = AR.JOB_NUMBER AND J.JOB_COMPONENT_NBR = AR.JOB_COMPONENT_NBR
JOIN dbo.JOB_COMPONENT JC ON JC.JOB_NUMBER = AR.JOB_NUMBER AND JC.JOB_COMPONENT_NBR = AR.JOB_COMPONENT_NBR
JOIN dbo.JOB_LOG JL ON JL.JOB_NUMBER = AR.JOB_NUMBER
JOIN dbo.CLIENT C ON C.CL_CODE = AR.CL_CODE
JOIN dbo.DIVISION D ON D.CL_CODE = AR.CL_CODE AND D.DIV_CODE = AR.DIV_CODE
JOIN dbo.PRODUCT P ON P.CL_CODE = AR.CL_CODE AND P.DIV_CODE = AR.DIV_CODE AND P.PRD_CODE = AR.PRD_CODE
JOIN dbo.ACCT_REC A ON A.AR_INV_NBR = AR.AR_INV_NBR AND A.AR_INV_SEQ = AR.AR_INV_SEQ AND A.AR_TYPE = AR.AR_TYPE
GROUP BY AR.CL_CODE, C.CL_NAME, AR.DIV_CODE, D.DIV_NAME, AR.PRD_CODE, P.PRD_DESCRIPTION, AR.JOB_NUMBER, JL.JOB_DESC, AR.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, AR.AR_INV_NBR, A.AR_INV_DATE, AR.AR_INV_SEQ
HAVING (SUM(ISNULL(AR.COST_AMT,0)+ISNULL(AR.NON_RESALE_AMT,0)+ISNULL(AR.AB_COST_AMT,0)+ISNULL(AB_NONRESALE_AMT,0)) <> 0 OR SUM(ISNULL(AR.TOTAL_BILL,0)) <> 0) AND AR.AR_INV_SEQ IN (0,99) --Original condition, includes Accrued Liability for original rows only, excludes AR where total cost / bill both = 0.
--HAVING (AR.AR_INV_SEQ IN (0,99) AND (ABS(SUM(ISNULL(AR.COST_AMT,0)+ISNULL(AR.NON_RESALE_AMT,0)))>=0.01 OR ABS(SUM(ISNULL(AR.AB_COST_AMT,0)+ISNULL(AR.AB_NONRESALE_AMT,0)))>=0.01 OR ABS(SUM(ISNULL(AR.TOTAL_BILL,0)))>=0.01)) --1 Modified to include AccruedLiability where total cost / bill = 0, but will add rows above the original result, use? tbd.

--GET AR INVOICE NUMBERS FOR CASH RECEIPTS
CREATE TABLE #ARInvoiceList (
	AR_INV_NBR	int NOT NULL
	)
INSERT INTO #ARInvoiceList
SELECT AR.AR_INV_NBR
FROM #Billing AR
GROUP BY AR.AR_INV_NBR

--GET CASH RECEIPTS
--GET CR_CLIENT_DTL
CREATE TABLE #CRAmount (
	AR_INV_NBR		int NOT NULL,
	CR_AMOUNT		Decimal(14,2)
	)
INSERT INTO #CRAmount
SELECT CR.AR_INV_NBR, SUM(ISNULL(CR.CR_PAY_AMT,0)+ISNULL(CR.CR_ADJ_AMT,0))
FROM dbo.CR_CLIENT_DTL CR
JOIN #ARInvoiceList AR ON CR.AR_INV_NBR = AR.AR_INV_NBR
GROUP BY CR.AR_INV_NBR

CREATE TABLE #CRPayFlag (
	AR_INV_NBR		int NOT NULL,
	PAY_FLAG		smallint NOT NULL,
	PAY_DESC		varchar(12)	COLLATE SQL_Latin1_General_CP1_CS_AS
	)
INSERT INTO #CRPayFlag
SELECT AR.AR_INV_NBR,
CASE
	WHEN ISNULL(AR.AR_INV_AMOUNT,0) = 0 THEN 1
	WHEN ISNULL(CR.CR_AMOUNT,0) = 0 THEN 2
	WHEN ISNULL(AR.AR_INV_AMOUNT,0)-ISNULL(CR.CR_AMOUNT,0) = 0 THEN 3
	ELSE 4
END AS PAY_FLAG,
CASE
	WHEN ISNULL(AR.AR_INV_AMOUNT,0) = 0 THEN 'No Bill'
	WHEN ISNULL(CR.CR_AMOUNT,0) = 0 THEN 'Unpaid'
	WHEN ISNULL(AR.AR_INV_AMOUNT,0)-ISNULL(CR.CR_AMOUNT,0) = 0 THEN 'Paid In Full'
	ELSE 'Partial Paid'
END AS PAY_DESC
FROM dbo.ACCT_REC AR
JOIN #ARInvoiceList ARL ON AR.AR_INV_NBR = ARL.AR_INV_NBR
LEFT JOIN #CRAmount CR ON CR.AR_INV_NBR = AR.AR_INV_NBR
WHERE AR.AR_INV_SEQ IN (0,99) AND ISNULL(AR.VOID_FLAG,0) = 0 

--GET CR_CLIENT_DTL_PAYMENT
CREATE TABLE #PartialReceipts (
	AR_INV_NBR			int NOT NULL,
	JOB_NUMBER			int NOT NULL,
	JOB_COMPONENT_NBR	smallint NOT NULL,
	CR_AMOUNT_JOB		decimal(14,2)
	)
INSERT INTO #PartialReceipts
SELECT CRD.AR_INV_NBR, CRP.JOB_NUMBER, CRP.JOB_COMPONENT_NBR, SUM(ISNULL(CRP.PAYMENT_AMOUNT,0))
FROM dbo.CR_CLIENT_DTL CRD
JOIN dbo.CR_CLIENT_DTL_PAYMENT CRP ON CRP.REC_ID = CRD.REC_ID AND CRP.SEQ_NBR = CRD.SEQ_NBR AND CRP.REC_ITEM_ID = CRD.REC_ITEM_ID
JOIN #CRPayFlag CR ON CRD.AR_INV_NBR = CR.AR_INV_NBR
WHERE CR.PAY_FLAG = 4
GROUP BY CRD.AR_INV_NBR, CRP.JOB_NUMBER, CRP.JOB_COMPONENT_NBR

--=======================================
--BEGIN GET AP VOUCHERS AND PAYMENTS DATA
--=======================================
--GET AP_PRODUCTION
CREATE TABLE #APProduction (
	CL_CODE				varchar(6)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	CL_NAME				varchar(40)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	DIV_CODE			varchar(6)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	DIV_NAME			varchar(40)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	PRD_CODE			varchar(6)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	PRD_DESCRIPTION		varchar(40)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	JOB_NUMBER			int NOT NULL,
	JOB_DESC			varchar(60)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	JOB_COMPONENT_NBR	smallint NOT NULL,
	JOB_COMP_DESC		varchar(60)		COLLATE SQL_Latin1_General_CP1_CS_AS,
	AP_ID				int NOT NULL,
	BILLABLE_COST		Decimal(14,2),
	NONBILLABLE_COST	Decimal(14,2),
	TOTAL_COST			Decimal(14,2)
	)

if @INCLUDE_NONBILLABLE = 1
BEGIN
	INSERT INTO #APProduction
	SELECT JL.CL_CODE, C.CL_NAME, JL.DIV_CODE, D.DIV_NAME, JL.PRD_CODE, P.PRD_DESCRIPTION, AP.JOB_NUMBER, JL.JOB_DESC, AP.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, AP.AP_ID,
			SUM(CASE WHEN ISNULL(AP.AP_PROD_NOBILL_FLG,0)=0 THEN ISNULL(AP.AP_PROD_EXT_AMT,0)+ISNULL(AP.EXT_NONRESALE_TAX,0) ELSE 0 END),
			SUM(CASE WHEN ISNULL(AP.AP_PROD_NOBILL_FLG,0)=1 THEN ISNULL(AP.AP_PROD_EXT_AMT,0)+ISNULL(AP.EXT_NONRESALE_TAX,0) ELSE 0 END), 
			SUM(ISNULL(AP.AP_PROD_EXT_AMT,0)+ISNULL(AP.EXT_NONRESALE_TAX,0))
	FROM dbo.AP_PRODUCTION AP
	JOIN #JobList J ON AP.JOB_NUMBER = J.JOB_NUMBER AND AP.JOB_COMPONENT_NBR = J.JOB_COMPONENT_NBR
	JOIN dbo.JOB_COMPONENT JC ON JC.JOB_NUMBER = AP.JOB_NUMBER AND JC.JOB_COMPONENT_NBR = AP.JOB_COMPONENT_NBR
	JOIN dbo.JOB_LOG JL ON JL.JOB_NUMBER = JC.JOB_NUMBER
	JOIN dbo.CLIENT C ON C.CL_CODE = JL.CL_CODE
	JOIN dbo.DIVISION D ON D.CL_CODE = JL.CL_CODE AND D.DIV_CODE = JL.DIV_CODE
	JOIN dbo.PRODUCT P ON P.CL_CODE = JL.CL_CODE AND P.DIV_CODE = JL.DIV_CODE AND P.PRD_CODE = JL.PRD_CODE
	GROUP BY JL.CL_CODE, C.CL_NAME, JL.DIV_CODE, D.DIV_NAME, JL.PRD_CODE, P.PRD_DESCRIPTION, AP.JOB_NUMBER, JL.JOB_DESC, AP.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, AP.AP_ID
END
ELSE
BEGIN
	INSERT INTO #APProduction
	SELECT JL.CL_CODE, C.CL_NAME, JL.DIV_CODE, D.DIV_NAME, JL.PRD_CODE, P.PRD_DESCRIPTION, AP.JOB_NUMBER, JL.JOB_DESC, AP.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, AP.AP_ID,
			SUM(CASE WHEN ISNULL(AP.AP_PROD_NOBILL_FLG,0)=0 THEN ISNULL(AP.AP_PROD_EXT_AMT,0)+ISNULL(AP.EXT_NONRESALE_TAX,0) ELSE 0 END),
			0, 
			SUM(CASE WHEN ISNULL(AP.AP_PROD_NOBILL_FLG,0)=0 THEN ISNULL(AP.AP_PROD_EXT_AMT,0)+ISNULL(AP.EXT_NONRESALE_TAX,0) ELSE 0 END)
	FROM dbo.AP_PRODUCTION AP
	JOIN #JobList J ON AP.JOB_NUMBER = J.JOB_NUMBER AND AP.JOB_COMPONENT_NBR = J.JOB_COMPONENT_NBR
	JOIN dbo.JOB_COMPONENT JC ON JC.JOB_NUMBER = AP.JOB_NUMBER AND JC.JOB_COMPONENT_NBR = AP.JOB_COMPONENT_NBR
	JOIN dbo.JOB_LOG JL ON JL.JOB_NUMBER = JC.JOB_NUMBER
	JOIN dbo.CLIENT C ON C.CL_CODE = JL.CL_CODE
	JOIN dbo.DIVISION D ON D.CL_CODE = JL.CL_CODE AND D.DIV_CODE = JL.DIV_CODE
	JOIN dbo.PRODUCT P ON P.CL_CODE = JL.CL_CODE AND P.DIV_CODE = JL.DIV_CODE AND P.PRD_CODE = JL.PRD_CODE
	GROUP BY JL.CL_CODE, C.CL_NAME, JL.DIV_CODE, D.DIV_NAME, JL.PRD_CODE, P.PRD_DESCRIPTION, AP.JOB_NUMBER, JL.JOB_DESC, AP.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, AP.AP_ID
END


--GET AP_IDs FOR AP HEADER INFO AND CASH DISBURSEMENTS
CREATE TABLE #APIDList (
	AP_ID	int NOT NULL
	)
INSERT INTO #APIDList
SELECT AP.AP_ID
FROM #APProduction AP
GROUP BY AP.AP_ID

--GET CASH DISBURSEMENTS
CREATE TABLE #CDAmount (
	AP_ID		int NOT NULL,
	CD_AMOUNT	Decimal(14,2)
	)
INSERT INTO #CDAmount
SELECT CD.AP_ID, SUM(ISNULL(CD.AP_CHK_AMT,0)+ISNULL(CD.AP_DISC_AMT,0))
FROM dbo.AP_PMT_HIST CD
JOIN #APIDList AP on CD.AP_ID = AP.AP_ID
GROUP BY CD.AP_ID

--GET AP HEADER INFO AND PAY STATUS
CREATE TABLE #APHeader (
	AP_ID			int NOT NULL,
	VN_CODE			varchar(6)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	VN_NAME			varchar(40)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	AP_INV_NBR		varchar(20)	COLLATE SQL_Latin1_General_CP1_CS_AS,
	AP_INV_DATE		smalldatetime,
	PAY_FLAG		smallint,
	PAY_DESC		varchar(12)	COLLATE SQL_Latin1_General_CP1_CS_AS
	)
INSERT INTO #APHeader
SELECT AP.AP_ID, AP.VN_FRL_EMP_CODE, V.VN_NAME, AP.AP_INV_VCHR, AP.AP_INV_DATE,
CASE
	WHEN (ISNULL(AP.AP_INV_AMT,0)+ISNULL(AP.AP_SHIPPING,0)+ISNULL(AP.AP_SALES_TAX,0)) = 0 THEN 1
	WHEN ISNULL(CD.CD_AMOUNT,0)=0 THEN 2
	WHEN ((ISNULL(AP.AP_INV_AMT,0)+ISNULL(AP.AP_SHIPPING,0)+ISNULL(AP.AP_SALES_TAX,0))-ISNULL(CD.CD_AMOUNT,0)) = 0 THEN 3
	ELSE 4
END AS PAY_FLAG,
CASE
	WHEN (ISNULL(AP.AP_INV_AMT,0)+ISNULL(AP.AP_SHIPPING,0)+ISNULL(AP.AP_SALES_TAX,0)) = 0 THEN 'No Bill'
	WHEN ISNULL(CD.CD_AMOUNT,0)=0 THEN 'Unpaid'
	WHEN ((ISNULL(AP.AP_INV_AMT,0)+ISNULL(AP.AP_SHIPPING,0)+ISNULL(AP.AP_SALES_TAX,0))-ISNULL(CD.CD_AMOUNT,0)) = 0 THEN 'Paid In Full'
	ELSE 'Partial Paid'
END AS PAY_DESC
FROM dbo.AP_HEADER AP
JOIN #APIDList ID ON ID.AP_ID = AP.AP_ID
JOIN (SELECT DISTINCT AP_ID, MAX(AP_SEQ) AS AP_SEQ FROM dbo.AP_HEADER GROUP BY AP_ID) A ON AP.AP_ID = A.AP_ID AND AP.AP_SEQ = A.AP_SEQ
JOIN dbo.VENDOR V ON V.VN_CODE = AP.VN_FRL_EMP_CODE
LEFT JOIN #CDAmount CD on CD.AP_ID = AP.AP_ID

--=====================================
--BEGIN INSERT INTO #CashManagementData
--=====================================
--BILLING
--1 Add SC_CODE, SC_DESCRIPTION, JT_CODE, JT_DESC, AB_COST_BILLED and calculate ARGrossUnpaidAmount
INSERT INTO #CashManagementData
SELECT B.CL_CODE, B.CL_NAME, B.DIV_CODE, B.DIV_NAME, B.PRD_CODE, B.PRD_DESCRIPTION, B.JOB_NUMBER, B.JOB_DESC, B.JOB_COMPONENT_NBR, B.JOB_COMP_DESC, J.SC_CODE, S.SC_DESCRIPTION, C.JT_CODE, T.JT_DESC, 'BL', B.AR_INV_NBR, B.AR_INV_DATE, ISNULL(B.TOTAL_COST_BILLED,0), ISNULL(B.TOTAL_BILLED,0), CASE WHEN CRF.PAY_FLAG = 3 THEN ISNULL(B.TOTAL_COST_BILLED,0) ELSE 0 END AS BILL_COST, CASE WHEN CRF.PAY_FLAG = 3 THEN ISNULL(B.TOTAL_BILLED,0) ELSE 0 END AS BILL_TOTAL, ISNULL(PR.CR_AMOUNT_JOB,0), CRF.PAY_DESC, CASE WHEN CRF.PAY_FLAG IN(2,4) THEN ISNULL(B.TOTAL_BILLED,0)-ISNULL(PR.CR_AMOUNT_JOB,0) ELSE 0 END AS AR_UNPAID, B.AB_COST_BILLED, NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0, NULL, CASE WHEN CRF.PAY_FLAG = 3 THEN ISNULL(B.TOTAL_COST_BILLED,0) ELSE 0 END, CASE WHEN CRF.PAY_FLAG = 3 THEN ISNULL(B.TOTAL_BILLED,0) ELSE 0 END + ISNULL(PR.CR_AMOUNT_JOB,0)
FROM #Billing B
JOIN dbo.JOB_LOG J ON J.JOB_NUMBER = B.JOB_NUMBER
JOIN dbo.JOB_COMPONENT C ON C.JOB_NUMBER = B.JOB_NUMBER AND C.JOB_COMPONENT_NBR = B.JOB_COMPONENT_NBR
JOIN dbo.SALES_CLASS S ON S.SC_CODE = J.SC_CODE
LEFT JOIN dbo.JOB_TYPE T ON T.JT_CODE = C.JT_CODE
LEFT JOIN #CRPayFlag CRF ON CRF.AR_INV_NBR = B.AR_INV_NBR
LEFT JOIN #PartialReceipts PR ON PR.AR_INV_NBR = B.AR_INV_NBR AND PR.JOB_NUMBER = B.JOB_NUMBER AND PR.JOB_COMPONENT_NBR = B.JOB_COMPONENT_NBR

--ACCOUNTS PAYABLE
--1 Add SC_CODE, SC_DESCRIPTION, JT_CODE, JT_DESC and 0's as ARGrossUnpaidAmount and AccruedLiability
INSERT INTO #CashManagementData
SELECT D.CL_CODE, D.CL_NAME, D.DIV_CODE, D.DIV_NAME, D.PRD_CODE, D.PRD_DESCRIPTION, D.JOB_NUMBER, D.JOB_DESC, D.JOB_COMPONENT_NBR, D.JOB_COMP_DESC, J.SC_CODE, S.SC_DESCRIPTION, C.JT_CODE, T.JT_DESC, 'AP', NULL, NULL, 0, 0, 0, 0, 0, NULL, 0, 0, H.VN_CODE, H.VN_NAME, H.AP_INV_NBR, H.AP_INV_DATE, ISNULL(D.BILLABLE_COST,0), ISNULL(D.NONBILLABLE_COST,0), ISNULL(D.TOTAL_COST,0), CASE WHEN (H.PAY_FLAG = 2 OR H.PAY_FLAG = 4) THEN ISNULL(D.TOTAL_COST,0) ELSE 0 END, CASE WHEN (H.PAY_FLAG = 1 OR H.PAY_FLAG = 3) THEN ISNULL(D.TOTAL_COST,0) ELSE 0 END, H.PAY_DESC, CASE WHEN (H.PAY_FLAG = 1 OR H.PAY_FLAG = 3) THEN ISNULL(D.TOTAL_COST,0) * -1 ELSE 0 END, CASE WHEN (H.PAY_FLAG = 1 OR H.PAY_FLAG = 3) THEN ISNULL(D.TOTAL_COST,0) * -1 ELSE 0 END
FROM #APProduction D
JOIN dbo.JOB_LOG J ON J.JOB_NUMBER = D.JOB_NUMBER
JOIN dbo.JOB_COMPONENT C ON C.JOB_NUMBER = D.JOB_NUMBER AND C.JOB_COMPONENT_NBR = D.JOB_COMPONENT_NBR
JOIN dbo.SALES_CLASS S ON S.SC_CODE = J.SC_CODE
LEFT JOIN dbo.JOB_TYPE T ON T.JT_CODE = C.JT_CODE
JOIN #APHeader H ON H.AP_ID = D.AP_ID

--SELECT * FROM #Billing
SELECT * FROM #CashManagementData
ORDER BY ClientCode, DivisionCode, ProductCode, JobNumber, JobComponentNumber, TypeCode DESC, ARInvoiceNumber, VendorCode, APInvoiceDate, APInvoiceNumber

END
GO

BEGIN

	GRANT ALL ON [advsp_cash_management_production] to PUBLIC AS dbo

END
GO