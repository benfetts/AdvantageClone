if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[advsp_estimate_update_master]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[advsp_estimate_update_master]
GO

CREATE PROCEDURE [dbo].[advsp_estimate_update_master]
	@EstimateNumber int,
	@EstimateComponentNumber smallint,
	@EstimateQuoteNumber smallint,
	@EstimateRevisionNumber smallint,
	@JobNumber int,
	@CompNumber smallint,
	@Action varchar(6)

AS

DECLARE @MaxRevision int, @Spec_Version int, @Spec_Revision int, @JobQty int, @TaxCode varchar(10), @TAX_COMM int,
						@TAX_COMM_ONLY int,	@TAX_RESALE int,@EST_COMM_FLAG int,	@EST_TAX_FLAG int,@EST_NONBILL_FLAG int,@FEE_TIME int,
						@EST_FNC_TYPE varchar(6),@EST_CPM_FLAG int, @TAX_CODE varchar (4), @ROW_STATE_PERCENT DECIMAL(8,4),
						@ROW_COUNTY_PERCENT DECIMAL(8,4),@ROW_CITY_PERCENT DECIMAL(8,4), @MARKUP_AMT DECIMAL(9,3), @STATE_RESALE DECIMAL(14,2),
						@COUNTY_RESALE DECIMAL(14,2), @CITY_RESALE DECIMAL(14,2), @STATE_RESALE_MU DECIMAL(14,2), @CONT_PCT decimal(6, 3),
						@COUNTY_RESALE_MU DECIMAL(14,2), @CITY_RESALE_MU DECIMAL(14,2), @STATE_CONT DECIMAL(14,2),@COUNTY_CONT DECIMAL(14,2), @CITY_CONT DECIMAL(14,2),
						@MU_CONT DECIMAL(14,2), @NONRESALE_TAX DECIMAL(14,2), @NR_CONT DECIMAL(14,2), @CONTINGENCY DECIMAL(14,2), @AMOUNT DECIMAL(15,2), @STATE_NONRESALE DECIMAL(14,2),
						@COUNTY_NONRESALE DECIMAL(14,2), @CITY_NONRESALE DECIMAL(14,2), @LINE_TOTAL decimal(14, 2), @LINE_TOTAL_CONT decimal(14, 2), @SC_CODE varchar(6), @EMP_CODE varchar(6)

BEGIN

	CREATE TABLE #EstimateData(
		RowID int IDENTITY(1, 1), 
		EstimateNumber int,
		EstimateCompNumber int,
		QuoteNunber int,
		RevisionNumber int,
		SeqNumber int,
		ClientCode Varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		DivisionCode Varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		ProductCode Varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		JobNumber int,
		JobComponentNumber smallint,
		FunctionCode varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		Quantity decimal(15,2),
		Amount decimal(15,2),		
		Markup decimal(15,2),
		Approval int
		)

	CREATE TABLE #FunctionData(
		RowID int IDENTITY(1, 1), 
		BILLING_RATE DECIMAL(9,2),
		RATE_LEVEL SMALLINT,
		TAX_CODE VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS,
		TAX_LEVEL SMALLINT,
		NOBILL_FLAG SMALLINT,
		NOBILL_LEVEL SMALLINT,
		COMM DECIMAL(9,3),
		COMM_LEVEL SMALLINT,
		TAX_COMM SMALLINT,
		TAX_COMM_ONLY SMALLINT,
		TAX_COMM_FLAGS_LEVEL SMALLINT,
		FEE_TIME_FLAG SMALLINT,
		FEE_TIME_LEVEL SMALLINT,
		STATE_PERCENT DECIMAL(8,4),
		COUNTY_PERCENT DECIMAL(8,4),
		CITY_PERCENT DECIMAL(8,4),
		TAX_RESALE SMALLINT,
		TAX_RESALE_NUMBER VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CS_AS,
		FNC_DESCRIPTION VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS,
		FNC_TYPE VARCHAR(1) COLLATE SQL_Latin1_General_CP1_CS_AS
		)

	
	SELECT @MaxRevision = ISNULL(MAX(ESTIMATE_REV.EST_REV_NBR),0)
	FROM         ESTIMATE_QUOTE INNER JOIN
						  ESTIMATE_REV ON ESTIMATE_QUOTE.ESTIMATE_NUMBER = ESTIMATE_REV.ESTIMATE_NUMBER AND 
						  ESTIMATE_QUOTE.EST_COMPONENT_NBR = ESTIMATE_REV.EST_COMPONENT_NBR AND 
						  ESTIMATE_QUOTE.EST_QUOTE_NBR = ESTIMATE_REV.EST_QUOTE_NBR INNER JOIN
						  ESTIMATE_COMPONENT ON ESTIMATE_QUOTE.ESTIMATE_NUMBER = ESTIMATE_COMPONENT.ESTIMATE_NUMBER AND 
						  ESTIMATE_QUOTE.EST_COMPONENT_NBR = ESTIMATE_COMPONENT.EST_COMPONENT_NBR INNER JOIN
						  ESTIMATE_LOG ON ESTIMATE_COMPONENT.ESTIMATE_NUMBER = ESTIMATE_LOG.ESTIMATE_NUMBER LEFT OUTER JOIN
						  JOB_COMPONENT ON ESTIMATE_COMPONENT.ESTIMATE_NUMBER = JOB_COMPONENT.ESTIMATE_NUMBER AND 
						  ESTIMATE_COMPONENT.EST_COMPONENT_NBR = JOB_COMPONENT.EST_COMPONENT_NBR
	WHERE     (ESTIMATE_QUOTE.ESTIMATE_NUMBER = @EstimateNumber) AND (ESTIMATE_QUOTE.EST_COMPONENT_NBR = @EstimateComponentNumber) AND (ESTIMATE_QUOTE.EST_QUOTE_NBR = @EstimateQuoteNumber)

	SELECT @Spec_Version = SPEC_VER, @Spec_Revision = SPEC_REV, @JobQty = ESTIMATE_REV.JOB_QTY
	FROM         ESTIMATE_QUOTE INNER JOIN
						  ESTIMATE_REV ON ESTIMATE_QUOTE.ESTIMATE_NUMBER = ESTIMATE_REV.ESTIMATE_NUMBER AND 
						  ESTIMATE_QUOTE.EST_COMPONENT_NBR = ESTIMATE_REV.EST_COMPONENT_NBR AND 
						  ESTIMATE_QUOTE.EST_QUOTE_NBR = ESTIMATE_REV.EST_QUOTE_NBR INNER JOIN
						  ESTIMATE_COMPONENT ON ESTIMATE_QUOTE.ESTIMATE_NUMBER = ESTIMATE_COMPONENT.ESTIMATE_NUMBER AND 
						  ESTIMATE_QUOTE.EST_COMPONENT_NBR = ESTIMATE_COMPONENT.EST_COMPONENT_NBR INNER JOIN
						  ESTIMATE_LOG ON ESTIMATE_COMPONENT.ESTIMATE_NUMBER = ESTIMATE_LOG.ESTIMATE_NUMBER LEFT OUTER JOIN
						  JOB_COMPONENT ON ESTIMATE_COMPONENT.ESTIMATE_NUMBER = JOB_COMPONENT.ESTIMATE_NUMBER AND 
						  ESTIMATE_COMPONENT.EST_COMPONENT_NBR = JOB_COMPONENT.EST_COMPONENT_NBR
	WHERE     (ESTIMATE_QUOTE.ESTIMATE_NUMBER = @EstimateNumber) AND (ESTIMATE_QUOTE.EST_COMPONENT_NBR = @EstimateComponentNumber) 
						AND (ESTIMATE_QUOTE.EST_QUOTE_NBR = @EstimateQuoteNumber) AND (ESTIMATE_REV.EST_REV_NBR = @EstimateRevisionNumber)

	--Create a new revision 
	--INSERT INTO [ESTIMATE_REV]
	--	(
	--		[ESTIMATE_NUMBER],
	--		[EST_COMPONENT_NBR],
	--		[EST_QUOTE_NBR],
	--		[EST_REV_NBR],
	--		[EST_REV_COMMENT],
	--		[SPEC_VER],
	--		[SPEC_REV],
	--		[SPEC_QTY_SEQ_NBR],
	--		[JOB_QTY],
	--		[SPEC_RTF]
	--	)
	--	VALUES
	--	(
	--		@EstimateNumber,
	--		@EstimateComponentNumber,
	--		@EstimateQuoteNumber,
	--		@EstimateRevisionNumber,
	--		NULL,
	--		@Spec_Version,
	--		@Spec_Revision,
	--		0,
	--		@JobQty,
	--		NULL
	--	)	

	INSERT INTO #EstimateData
	SELECT ESTIMATE_REV_DET.ESTIMATE_NUMBER, ESTIMATE_REV_DET.EST_COMPONENT_NBR, ESTIMATE_REV_DET.EST_QUOTE_NBR, 
       ESTIMATE_REV_DET.EST_REV_NBR, ESTIMATE_REV_DET.SEQ_NBR, ESTIMATE_LOG.CL_CODE, ESTIMATE_LOG.DIV_CODE, ESTIMATE_LOG.PRD_CODE, V_ESTIMATEAPPR.JOB_NUMBER, 
       V_ESTIMATEAPPR.JOB_COMPONENT_NBR, ESTIMATE_REV_DET.FNC_CODE, ISNULL(ESTIMATE_REV_DET.EST_REV_QUANTITY,0) AS EST_REV_QUANTITY, 
       ISNULL(ESTIMATE_REV_DET.EST_REV_EXT_AMT,0) AS EST_REV_EXT_AMT, ISNULL(ESTIMATE_REV_DET.EXT_MARKUP_AMT,0) AS EXT_MARKUP_AMT, V_ESTIMATEAPPR.[TYPE]
	FROM ESTIMATE_REV_DET INNER JOIN
		 ESTIMATE_REV ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = ESTIMATE_REV.ESTIMATE_NUMBER AND 
		 ESTIMATE_REV_DET.EST_COMPONENT_NBR = ESTIMATE_REV.EST_COMPONENT_NBR AND 
		 ESTIMATE_REV_DET.EST_QUOTE_NBR = ESTIMATE_REV.EST_QUOTE_NBR AND 
		 ESTIMATE_REV_DET.EST_REV_NBR = ESTIMATE_REV.EST_REV_NBR INNER JOIN
		 ESTIMATE_LOG INNER JOIN
		 ESTIMATE_COMPONENT ON ESTIMATE_LOG.ESTIMATE_NUMBER = ESTIMATE_COMPONENT.ESTIMATE_NUMBER ON 
		 ESTIMATE_REV.ESTIMATE_NUMBER = ESTIMATE_COMPONENT.ESTIMATE_NUMBER AND 
		 ESTIMATE_REV.EST_COMPONENT_NBR = ESTIMATE_COMPONENT.EST_COMPONENT_NBR INNER JOIN
		 V_ESTIMATEAPPR ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = V_ESTIMATEAPPR.ESTIMATE_NUMBER AND 
		 ESTIMATE_REV_DET.EST_COMPONENT_NBR = V_ESTIMATEAPPR.EST_COMPONENT_NBR AND 
		 ESTIMATE_REV_DET.EST_QUOTE_NBR = V_ESTIMATEAPPR.EST_QUOTE_NBR AND 
		 ESTIMATE_REV_DET.EST_REV_NBR = V_ESTIMATEAPPR.EST_REVISION_NBR
	WHERE V_ESTIMATEAPPR.JOB_NUMBER = @JobNumber 
	
	DELETE FROM #EstimateData
	WHERE EstimateNumber = @EstimateNumber AND EstimateCompNumber = @EstimateComponentNumber

	SELECT * FROM #EstimateData

	DECLARE @ROW_ID AS INT,
			@CURR_CODE AS VARCHAR(6),
			@NEXT_SEQ_NBR INT,
			@CURR_QTY DECIMAL(15,2),
			@CURR_AMT DECIMAL(15,2),
			@CURR_MU DECIMAL(15,2),
			@CURR_CLIENT AS VARCHAR(6),
			@CURR_DIVISION AS VARCHAR(6),
			@CURR_PRODUCT AS VARCHAR(6)

	SET @MARKUP_AMT = 0
	SET @TAX_CODE = ''
	SET @CONTINGENCY = 0
	SET @LINE_TOTAL_CONT = 0
	SET @LINE_TOTAL = 0
	SET @STATE_RESALE = 0
	SET @COUNTY_RESALE = 0
	SET @CITY_RESALE = 0
	SET @STATE_RESALE_MU = 0
	SET @COUNTY_RESALE_MU = 0
	SET @CITY_RESALE_MU = 0
	SET @STATE_CONT = 0
	SET @COUNTY_CONT = 0
	SET @CITY_CONT = 0
	SET @NR_CONT = 0
	SET @NONRESALE_TAX = 0
	SET @CONTINGENCY = 0
	SET @CONT_PCT = 0

	If @Action = 'Add'
	Begin

		DECLARE MY_ROWS                       CURSOR  
        FOR
	        SELECT FunctionCode, SUM(Quantity), SUM(Amount), SUM(Markup), ClientCode, DivisionCode, ProductCode
	        FROM   #EstimateData			
			GROUP BY FunctionCode, ClientCode, DivisionCode, ProductCode
        ;
        OPEN MY_ROWS;
        FETCH NEXT FROM MY_ROWS INTO @CURR_CODE,@CURR_QTY,@CURR_AMT,@CURR_MU,@CURR_CLIENT,@CURR_DIVISION,@CURR_PRODUCT;
        WHILE @@FETCH_STATUS = 0
        BEGIN
	       
		   IF EXISTS (SELECT FNC_CODE FROM ESTIMATE_REV_DET ERD WHERE ERD.ESTIMATE_NUMBER = @EstimateNumber AND ERD.EST_COMPONENT_NBR = @EstimateComponentNumber AND ERD.EST_QUOTE_NBR = @EstimateQuoteNumber
						AND ERD.EST_REV_NBR = @EstimateRevisionNumber AND ERD.FNC_CODE = @CURR_CODE)
		   BEGIN
				UPDATE ESTIMATE_REV_DET
				SET EST_REV_QUANTITY = (EST_REV_QUANTITY + (SELECT SUM(Quantity) FROM #EstimateData WHERE #EstimateData.FunctionCode = ESTIMATE_REV_DET.FNC_CODE)),
					EST_REV_EXT_AMT = (EST_REV_EXT_AMT + (SELECT SUM(Amount) FROM #EstimateData WHERE #EstimateData.FunctionCode = ESTIMATE_REV_DET.FNC_CODE)),
					EXT_MARKUP_AMT = (EXT_MARKUP_AMT + (SELECT SUM(Markup) FROM #EstimateData WHERE #EstimateData.FunctionCode = ESTIMATE_REV_DET.FNC_CODE))
				WHERE ESTIMATE_REV_DET.ESTIMATE_NUMBER = @EstimateNumber AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = @EstimateComponentNumber AND ESTIMATE_REV_DET.EST_QUOTE_NBR = @EstimateQuoteNumber
					  AND ESTIMATE_REV_DET.EST_REV_NBR = @EstimateRevisionNumber AND ESTIMATE_REV_DET.FNC_CODE = @CURR_CODE
			  
				UPDATE ESTIMATE_REV_DET
				SET EST_REV_RATE = CASE WHEN EST_REV_QUANTITY > 0 THEN (EST_REV_EXT_AMT / EST_REV_QUANTITY) ELSE 0 END,
					EST_REV_COMM_PCT = CASE WHEN EST_REV_EXT_AMT > 0 THEN (EXT_MARKUP_AMT / EST_REV_EXT_AMT) * 100 ELSE 0 END,
					EXT_CONTINGENCY = CASE WHEN EST_REV_CONT_PCT > 0 THEN EST_REV_EXT_AMT * (EST_REV_CONT_PCT / 100) ELSE 0 END,
					EXT_MU_CONT = CASE WHEN EST_REV_CONT_PCT > 0 THEN EXT_MARKUP_AMT * (EST_REV_CONT_PCT / 100) ELSE 0 END
				WHERE ESTIMATE_REV_DET.ESTIMATE_NUMBER = @EstimateNumber AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = @EstimateComponentNumber AND ESTIMATE_REV_DET.EST_QUOTE_NBR = @EstimateQuoteNumber
					  AND ESTIMATE_REV_DET.EST_REV_NBR = @EstimateRevisionNumber AND ESTIMATE_REV_DET.FNC_CODE = @CURR_CODE
				
				SELECT @TAX_RESALE = TAX_RESALE, @MARKUP_AMT = EXT_MARKUP_AMT, @TAX_COMM = TAX_COMM, @TAX_COMM_ONLY = TAX_COMM_ONLY, @AMOUNT = EST_REV_EXT_AMT, @EST_FNC_TYPE = EST_FNC_TYPE,
						@ROW_STATE_PERCENT = ISNULL(TAX_STATE_PCT,0), @ROW_COUNTY_PERCENT = ISNULL(TAX_COUNTY_PCT,0), @ROW_CITY_PERCENT = ISNULL(TAX_CITY_PCT,0),
						@CONTINGENCY = ISNULL(EXT_CONTINGENCY,0), @MU_CONT = ISNULL(EXT_MU_CONT,0), @CONT_PCT = ISNULL(EST_REV_CONT_PCT,0)
				FROM ESTIMATE_REV_DET
				WHERE ESTIMATE_REV_DET.ESTIMATE_NUMBER = @EstimateNumber AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = @EstimateComponentNumber AND ESTIMATE_REV_DET.EST_QUOTE_NBR = @EstimateQuoteNumber
					  AND ESTIMATE_REV_DET.EST_REV_NBR = @EstimateRevisionNumber AND ESTIMATE_REV_DET.FNC_CODE = @CURR_CODE

				--SELECT @TAX_RESALE, @MARKUP_AMT, @TAX_COMM, @TAX_COMM_ONLY, @AMOUNT, @EST_FNC_TYPE,
				--		@ROW_STATE_PERCENT, @ROW_COUNTY_PERCENT, @ROW_CITY_PERCENT,
				--		@CONTINGENCY, @MU_CONT, @CONT_PCT

				--Recalculate TAX
				IF @TAX_RESALE = 1
				BEGIN
					IF @TAX_COMM_ONLY = 0
					BEGIN
						SET @STATE_RESALE = @AMOUNT * (@ROW_STATE_PERCENT / 100)
						SET @COUNTY_RESALE = @AMOUNT * (@ROW_COUNTY_PERCENT / 100)
						SET @CITY_RESALE = @AMOUNT * (@ROW_CITY_PERCENT / 100)
					END
					IF @TAX_COMM = 1
					BEGIN
						IF @MARKUP_AMT > 0
						BEGIN
							SET @STATE_RESALE_MU = @MARKUP_AMT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE_MU = @MARKUP_AMT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE_MU = @MARKUP_AMT * (@ROW_CITY_PERCENT / 100)
							SET @STATE_RESALE = @STATE_RESALE + @STATE_RESALE_MU
							SET @COUNTY_RESALE = @COUNTY_RESALE + @COUNTY_RESALE_MU
							SET @CITY_RESALE = @CITY_RESALE + @CITY_RESALE_MU
						END						
					END					

					IF @CONTINGENCY > 0
					BEGIN
						IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
						BEGIN
							SET @STATE_CONT = @MU_CONT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = @MU_CONT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = @MU_CONT * (@ROW_CITY_PERCENT / 100)
						END
						ELSE IF @TAX_COMM = 1
						BEGIN
							SET @STATE_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100)
						END
						ELSE
						BEGIN
							SET @STATE_CONT = @CONTINGENCY * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = @CONTINGENCY * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = @CONTINGENCY * (@ROW_CITY_PERCENT / 100)
						END
					END

				END
				ELSE
				BEGIN
					IF @EST_FNC_TYPE = 'V'
					BEGIN
						IF @TAX_COMM_ONLY <> 1
						BEGIN
							SET @STATE_NONRESALE = @AMOUNT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_NONRESALE = @AMOUNT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_NONRESALE = @AMOUNT * (@ROW_CITY_PERCENT / 100)
							SET @NONRESALE_TAX = @STATE_NONRESALE + @COUNTY_NONRESALE + @CITY_NONRESALE
						END
						IF @CONTINGENCY > 0
						BEGIN
							IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
							BEGIN
								SET @NR_CONT = (@MU_CONT * (@ROW_STATE_PERCENT / 100)) + (@MU_CONT * (@ROW_COUNTY_PERCENT / 100)) + (@MU_CONT * (@ROW_CITY_PERCENT / 100))
							END
							ELSE IF @TAX_COMM = 1
							BEGIN
								SET @NR_CONT = ((@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)) + ((@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)) + ((@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100))
							END
						END
					END
					ELSE IF @EST_FNC_TYPE = 'E' OR @EST_FNC_TYPE = 'I'
					BEGIN
						IF @TAX_COMM_ONLY <> 1
						BEGIN
							SET @STATE_RESALE = @AMOUNT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE = @AMOUNT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE = @AMOUNT * (@ROW_CITY_PERCENT / 100)							
						END
						IF @CONTINGENCY > 0
						BEGIN
							IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
							BEGIN
								SET @STATE_CONT = @MU_CONT * (@ROW_STATE_PERCENT / 100)
								SET @COUNTY_CONT = @MU_CONT * (@ROW_COUNTY_PERCENT / 100)
								SET @CITY_CONT = @MU_CONT * (@ROW_CITY_PERCENT / 100)
							END
							ELSE IF @TAX_COMM = 1
							BEGIN
								SET @STATE_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)
								SET @COUNTY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)
								SET @CITY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100)
							END
						END
					END
					IF @TAX_COMM = 1
					BEGIN
						IF @MARKUP_AMT > 0
						BEGIN
							SET @STATE_RESALE_MU = @MARKUP_AMT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE_MU = @MARKUP_AMT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE_MU = @MARKUP_AMT * (@ROW_CITY_PERCENT / 100)
							SET @STATE_RESALE = @STATE_RESALE + @STATE_RESALE_MU
							SET @COUNTY_RESALE = @COUNTY_RESALE + @COUNTY_RESALE_MU
							SET @CITY_RESALE = @CITY_RESALE + @CITY_RESALE_MU
						END	
					END
					
				END

				--Recalculate Totals
				SET @LINE_TOTAL_CONT = (@MARKUP_AMT * (@CONT_PCT / 100)) + @CONTINGENCY + @STATE_CONT + @COUNTY_CONT + @CITY_CONT + @NR_CONT
				SET @LINE_TOTAL = @AMOUNT + @MARKUP_AMT + @STATE_RESALE + @COUNTY_RESALE + @CITY_RESALE


				--SELECT @STATE_RESALE,@COUNTY_RESALE,@CITY_RESALE,@LINE_TOTAL_CONT,@LINE_TOTAL

				UPDATE ESTIMATE_REV_DET
				SET EXT_STATE_RESALE = @STATE_RESALE, EXT_COUNTY_RESALE = @COUNTY_RESALE, EXT_CITY_RESALE = @CITY_RESALE, EXT_NONRESALE_TAX = @NONRESALE_TAX,
					EXT_STATE_CONT = @STATE_CONT, EXT_COUNTY_CONT = @COUNTY_CONT, EXT_CITY_CONT = @CITY_CONT, EXT_NR_CONT = @NR_CONT, LINE_TOTAL_CONT = @LINE_TOTAL_CONT, LINE_TOTAL = @LINE_TOTAL
				WHERE ESTIMATE_REV_DET.ESTIMATE_NUMBER = @EstimateNumber AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = @EstimateComponentNumber AND ESTIMATE_REV_DET.EST_QUOTE_NBR = @EstimateQuoteNumber
					  AND ESTIMATE_REV_DET.EST_REV_NBR = @EstimateRevisionNumber AND ESTIMATE_REV_DET.FNC_CODE = @CURR_CODE

		   END
		   ELSE
		   BEGIN

				SELECT @NEXT_SEQ_NBR = ISNULL(MAX(SEQ_NBR),-1) + 1 FROM ESTIMATE_REV_DET
				WHERE ESTIMATE_NUMBER = @EstimateNumber AND EST_COMPONENT_NBR = @EstimateComponentNumber AND EST_QUOTE_NBR = @EstimateQuoteNumber
						AND EST_REV_NBR = @EstimateRevisionNumber
    
				if @NEXT_SEQ_NBR = 0
				Begin
					SET @NEXT_SEQ_NBR = 1
				End 

				SELECT @SC_CODE = SC_CODE
				FROM JOB_LOG
				WHERE JOB_LOG.JOB_NUMBER = @JobNumber

				INSERT INTO #FunctionData
				EXECUTE usp_wv_Estimating_GetUserFunctionDefault @CURR_CODE, @JobNumber, @CompNumber, @CURR_CLIENT, @CURR_DIVISION, @CURR_PRODUCT, @SC_CODE, @EMP_CODE,NULL

				SELECT @EST_FNC_TYPE = FNC_TYPE, @TAX_COMM = TAX_COMM, @TAX_COMM_ONLY = TAX_COMM_ONLY, @TAX_RESALE = TAX_RESALE, @TAX_CODE = TAX_CODE, @ROW_STATE_PERCENT = STATE_PERCENT,
					   @ROW_CITY_PERCENT = CITY_PERCENT, @ROW_COUNTY_PERCENT = COUNTY_PERCENT, @FEE_TIME = FEE_TIME_FLAG,
					   @EST_COMM_FLAG = CASE WHEN COMM = 0 THEN 0 ELSE 1 END, @EST_TAX_FLAG = CASE WHEN TAX_CODE = '' THEN 0 ELSE 1 END, @EST_NONBILL_FLAG = NOBILL_FLAG
				FROM #FunctionData
				--WHERE FNC_CODE = @CURR_CODE

				SELECT @EST_CPM_FLAG = FNC_CPM_FLAG
				FROM FUNCTIONS
				WHERE FNC_CODE = @CURR_CODE

				--Recalculate TAX
				IF @TAX_RESALE = 1
				BEGIN
					IF @TAX_COMM_ONLY <> 1
					BEGIN
						SET @STATE_RESALE = @CURR_AMT * (@ROW_STATE_PERCENT / 100)
						SET @COUNTY_RESALE = @CURR_AMT * (@ROW_COUNTY_PERCENT / 100)
						SET @CITY_RESALE = @CURR_AMT * (@ROW_CITY_PERCENT / 100)
					END
					IF @TAX_COMM = 1
					BEGIN
						IF @MARKUP_AMT > 0
						BEGIN
							SET @STATE_RESALE_MU = @CURR_MU * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE_MU = @CURR_MU * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE_MU = @CURR_MU * (@ROW_CITY_PERCENT / 100)
							SET @STATE_RESALE = @STATE_RESALE + @STATE_RESALE_MU
							SET @COUNTY_RESALE = @COUNTY_RESALE + @COUNTY_RESALE_MU
							SET @CITY_RESALE = @CITY_RESALE + @CITY_RESALE_MU
						END						
					END
					

					IF @CONTINGENCY > 0
					BEGIN
						IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
						BEGIN
							SET @STATE_CONT = @MU_CONT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = @MU_CONT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = @MU_CONT * (@ROW_CITY_PERCENT / 100)
						END
						ELSE IF @TAX_COMM = 1
						BEGIN
							SET @STATE_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100)
						END
						ELSE
						BEGIN
							SET @STATE_CONT = @CONTINGENCY * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = @CONTINGENCY * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = @CONTINGENCY * (@ROW_CITY_PERCENT / 100)
						END
					END

				END
				ELSE
				BEGIN
					IF @EST_FNC_TYPE = 'V'
					BEGIN
						IF @TAX_COMM_ONLY <> 1
						BEGIN
							SET @STATE_NONRESALE = @CURR_AMT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_NONRESALE = @CURR_AMT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_NONRESALE = @CURR_AMT * (@ROW_CITY_PERCENT / 100)
							SET @NONRESALE_TAX = @STATE_NONRESALE + @COUNTY_NONRESALE + @CITY_NONRESALE
						END
						IF @CONTINGENCY > 0
						BEGIN
							IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
							BEGIN
								SET @NR_CONT = (@MU_CONT * (@ROW_STATE_PERCENT / 100)) + (@MU_CONT * (@ROW_COUNTY_PERCENT / 100)) + (@MU_CONT * (@ROW_CITY_PERCENT / 100))
							END
							ELSE IF @TAX_COMM = 1
							BEGIN
								SET @NR_CONT = ((@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)) + ((@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)) + ((@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100))
							END
						END
					END
					ELSE IF @EST_FNC_TYPE = 'E' OR @EST_FNC_TYPE = 'I'
					BEGIN
						IF @TAX_COMM_ONLY <> 1
						BEGIN
							SET @STATE_RESALE = @CURR_AMT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE = @CURR_AMT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE = @CURR_AMT * (@ROW_CITY_PERCENT / 100)							
						END
						IF @CONTINGENCY > 0
						BEGIN
							IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
							BEGIN
								SET @STATE_CONT = @MU_CONT * (@ROW_STATE_PERCENT / 100)
								SET @COUNTY_CONT = @MU_CONT * (@ROW_COUNTY_PERCENT / 100)
								SET @CITY_CONT = @MU_CONT * (@ROW_CITY_PERCENT / 100)
							END
							ELSE IF @TAX_COMM = 1
							BEGIN
								SET @STATE_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)
								SET @COUNTY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)
								SET @CITY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100)
							END
						END
					END
					IF @TAX_COMM = 1
					BEGIN
						IF @MARKUP_AMT > 0
						BEGIN
							SET @STATE_RESALE_MU = @CURR_MU * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE_MU = @CURR_MU * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE_MU = @CURR_MU * (@ROW_CITY_PERCENT / 100)
							SET @STATE_RESALE = @STATE_RESALE + @STATE_RESALE_MU
							SET @COUNTY_RESALE = @COUNTY_RESALE + @COUNTY_RESALE_MU
							SET @CITY_RESALE = @CITY_RESALE + @CITY_RESALE_MU
						END	
					END					
				END

				--Recalculate Totals
				SET @LINE_TOTAL_CONT = (@CURR_MU * (@CONT_PCT / 100)) + @CONTINGENCY + @STATE_CONT + @COUNTY_CONT + @CITY_CONT + @NR_CONT
				SET @LINE_TOTAL = @CURR_AMT + @CURR_MU + @STATE_RESALE + @COUNTY_RESALE + @CITY_RESALE

				INSERT INTO [ESTIMATE_REV_DET]
					([ESTIMATE_NUMBER],	[EST_COMPONENT_NBR],[EST_QUOTE_NBR],[EST_REV_NBR],[SEQ_NBR],[FNC_CODE],[EST_REV_COMM_PCT],[EST_REV_CONT_PCT],[EST_REV_QUANTITY],[EST_REV_RATE],[EST_REV_SUP_BY_CDE],
						[EST_REV_SUP_BY_NTE],[EST_REV_EXT_AMT],[TAX_CODE],[EST_FNC_COMMENT],[EXT_MARKUP_AMT],[EXT_CONTINGENCY],[LINE_TOTAL],[INCL_CPU],[EST_FNC_TYPE],[EST_CPM_FLAG],[TAX_STATE_PCT],
						[TAX_COUNTY_PCT],[TAX_CITY_PCT],[TAX_COMM],[TAX_COMM_ONLY],[TAX_RESALE],[EST_COMM_FLAG],[EST_TAX_FLAG],[EST_NONBILL_FLAG],[EXT_NONRESALE_TAX],[EXT_STATE_RESALE],[EXT_COUNTY_RESALE],
						[EXT_CITY_RESALE],[EXT_MU_CONT],[EXT_STATE_CONT],[EXT_COUNTY_CONT],[EXT_CITY_CONT],[EXT_NR_CONT],[LINE_TOTAL_CONT],[FEE_TIME])
					VALUES
					(
						@EstimateNumber,
						@EstimateComponentNumber,
						@EstimateQuoteNumber,
						@EstimateRevisionNumber,
						@NEXT_SEQ_NBR,
						@CURR_CODE,
						CASE WHEN @CURR_AMT > 0 THEN (@CURR_MU / @CURR_AMT) * 100 ELSE 0 END,
						@CONT_PCT,
						@CURR_QTY,
						CASE WHEN @CURR_QTY > 0 THEN (@CURR_AMT / @CURR_QTY) ELSE 0 END,
						NULL,
						NULL,
						@CURR_AMT,
						@TAX_CODE,
						NULL,
						@CURR_MU,
						0,
						@LINE_TOTAL,
						1,
						@EST_FNC_TYPE,
						@EST_CPM_FLAG,
						@ROW_STATE_PERCENT,
						@ROW_CITY_PERCENT,
						@ROW_COUNTY_PERCENT,
						@TAX_COMM,
						@TAX_COMM_ONLY,
						@TAX_RESALE,
						@EST_COMM_FLAG,
						@EST_TAX_FLAG,
						@EST_NONBILL_FLAG,
						@NONRESALE_TAX,
						@STATE_RESALE,
						@COUNTY_RESALE,
						@CITY_RESALE,
						0,
						@STATE_CONT,
						@COUNTY_CONT,
						@CITY_CONT,
						@NR_CONT,
						@LINE_TOTAL_CONT,
						@FEE_TIME
					)

				DELETE FROM #FunctionData
				
		   END

		   SET @MARKUP_AMT = 0
		   SET @TAX_CODE = ''
		   SET @CONTINGENCY = 0
		   SET @LINE_TOTAL_CONT = 0
		   SET @LINE_TOTAL = 0
		   SET @CONT_PCT = 0
		   SET @STATE_RESALE = 0
		   SET @COUNTY_RESALE = 0
		   SET @CITY_RESALE = 0
		   SET @STATE_RESALE_MU = 0
		   SET @COUNTY_RESALE_MU = 0
		   SET @CITY_RESALE_MU = 0
		   SET @STATE_CONT = 0
		   SET @COUNTY_CONT = 0
		   SET @CITY_CONT = 0
		   SET @NR_CONT = 0
		   SET @NONRESALE_TAX = 0


	        --GO TO NEXT EVENT
	        FETCH NEXT FROM MY_ROWS INTO @CURR_CODE,@CURR_QTY,@CURR_AMT,@CURR_MU,@CURR_CLIENT,@CURR_DIVISION,@CURR_PRODUCT;
        END
        CLOSE MY_ROWS;
        DEALLOCATE MY_ROWS;		

	End
	Else
	Begin

		DECLARE MY_ROWS                       CURSOR  
        FOR
	        SELECT FunctionCode, SUM(Quantity), SUM(Amount), SUM(Markup), ClientCode, DivisionCode, ProductCode
	        FROM   #EstimateData			
			GROUP BY FunctionCode, ClientCode, DivisionCode, ProductCode
        ;
        OPEN MY_ROWS;
        FETCH NEXT FROM MY_ROWS INTO @CURR_CODE,@CURR_QTY,@CURR_AMT,@CURR_MU,@CURR_CLIENT,@CURR_DIVISION,@CURR_PRODUCT;
        WHILE @@FETCH_STATUS = 0
        BEGIN
	       
		   IF EXISTS (SELECT FNC_CODE FROM ESTIMATE_REV_DET ERD WHERE ERD.ESTIMATE_NUMBER = @EstimateNumber AND ERD.EST_COMPONENT_NBR = @EstimateComponentNumber AND ERD.EST_QUOTE_NBR = @EstimateQuoteNumber
						AND ERD.EST_REV_NBR = @EstimateRevisionNumber AND ERD.FNC_CODE = @CURR_CODE)
		   BEGIN
				UPDATE ESTIMATE_REV_DET
				SET EST_REV_QUANTITY = (EST_REV_QUANTITY - (SELECT SUM(Quantity) FROM #EstimateData WHERE #EstimateData.FunctionCode = ESTIMATE_REV_DET.FNC_CODE)),
					EST_REV_EXT_AMT = (EST_REV_EXT_AMT - (SELECT SUM(Amount) FROM #EstimateData WHERE #EstimateData.FunctionCode = ESTIMATE_REV_DET.FNC_CODE)),
					EXT_MARKUP_AMT = (EXT_MARKUP_AMT - (SELECT SUM(Markup) FROM #EstimateData WHERE #EstimateData.FunctionCode = ESTIMATE_REV_DET.FNC_CODE))
				WHERE ESTIMATE_REV_DET.ESTIMATE_NUMBER = @EstimateNumber AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = @EstimateComponentNumber AND ESTIMATE_REV_DET.EST_QUOTE_NBR = @EstimateQuoteNumber
					  AND ESTIMATE_REV_DET.EST_REV_NBR = @EstimateRevisionNumber AND ESTIMATE_REV_DET.FNC_CODE = @CURR_CODE
			  
				UPDATE ESTIMATE_REV_DET
				SET EST_REV_RATE = CASE WHEN EST_REV_QUANTITY <> 0 THEN (EST_REV_EXT_AMT / EST_REV_QUANTITY) ELSE 0 END,
					EST_REV_COMM_PCT = CASE WHEN EST_REV_EXT_AMT <> 0 THEN (EXT_MARKUP_AMT / EST_REV_EXT_AMT) * 100 ELSE 0 END,
					EXT_CONTINGENCY = CASE WHEN EST_REV_CONT_PCT > 0 THEN EST_REV_EXT_AMT * (EST_REV_CONT_PCT / 100) ELSE 0 END,
					EXT_MU_CONT = CASE WHEN EST_REV_CONT_PCT > 0 THEN EXT_MARKUP_AMT * (EST_REV_CONT_PCT / 100) ELSE 0 END
				WHERE ESTIMATE_REV_DET.ESTIMATE_NUMBER = @EstimateNumber AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = @EstimateComponentNumber AND ESTIMATE_REV_DET.EST_QUOTE_NBR = @EstimateQuoteNumber
					  AND ESTIMATE_REV_DET.EST_REV_NBR = @EstimateRevisionNumber AND ESTIMATE_REV_DET.FNC_CODE = @CURR_CODE
				
				SELECT @TAX_RESALE = TAX_RESALE, @MARKUP_AMT = EXT_MARKUP_AMT, @TAX_COMM = TAX_COMM, @TAX_COMM_ONLY = TAX_COMM_ONLY, @AMOUNT = EST_REV_EXT_AMT, @EST_FNC_TYPE = EST_FNC_TYPE,
						@ROW_STATE_PERCENT = ISNULL(TAX_STATE_PCT,0), @ROW_COUNTY_PERCENT = ISNULL(TAX_COUNTY_PCT,0), @ROW_CITY_PERCENT = ISNULL(TAX_CITY_PCT,0),
						@CONTINGENCY = ISNULL(EXT_CONTINGENCY,0), @MU_CONT = ISNULL(EXT_MU_CONT,0), @CONT_PCT = ISNULL(EST_REV_CONT_PCT,0)
				FROM ESTIMATE_REV_DET
				WHERE ESTIMATE_REV_DET.ESTIMATE_NUMBER = @EstimateNumber AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = @EstimateComponentNumber AND ESTIMATE_REV_DET.EST_QUOTE_NBR = @EstimateQuoteNumber
					  AND ESTIMATE_REV_DET.EST_REV_NBR = @EstimateRevisionNumber AND ESTIMATE_REV_DET.FNC_CODE = @CURR_CODE

				--Recalculate TAX
				IF @TAX_RESALE = 1
				BEGIN
					IF @TAX_COMM_ONLY <> 1
					BEGIN
						SET @STATE_RESALE = @AMOUNT * (@ROW_STATE_PERCENT / 100)
						SET @COUNTY_RESALE = @AMOUNT * (@ROW_COUNTY_PERCENT / 100)
						SET @CITY_RESALE = @AMOUNT * (@ROW_CITY_PERCENT / 100)
					END
					IF @TAX_COMM = 1
					BEGIN
						IF @MARKUP_AMT > 0
						BEGIN
							SET @STATE_RESALE_MU = @MARKUP_AMT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE_MU = @MARKUP_AMT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE_MU = @MARKUP_AMT * (@ROW_CITY_PERCENT / 100)
							SET @STATE_RESALE = @STATE_RESALE + @STATE_RESALE_MU
							SET @COUNTY_RESALE = @COUNTY_RESALE + @COUNTY_RESALE_MU
							SET @CITY_RESALE = @CITY_RESALE + @CITY_RESALE_MU
						END						
					END
					

					IF @CONTINGENCY > 0
					BEGIN
						IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
						BEGIN
							SET @STATE_CONT = @MU_CONT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = @MU_CONT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = @MU_CONT * (@ROW_CITY_PERCENT / 100)
						END
						ELSE IF @TAX_COMM = 1
						BEGIN
							SET @STATE_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100)
						END
						ELSE
						BEGIN
							SET @STATE_CONT = @CONTINGENCY * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = @CONTINGENCY * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = @CONTINGENCY * (@ROW_CITY_PERCENT / 100)
						END
					END

				END
				ELSE
				BEGIN
					IF @EST_FNC_TYPE = 'V'
					BEGIN
						IF @TAX_COMM_ONLY <> 1
						BEGIN
							SET @STATE_NONRESALE = @AMOUNT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_NONRESALE = @AMOUNT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_NONRESALE = @AMOUNT * (@ROW_CITY_PERCENT / 100)
							SET @NONRESALE_TAX = @STATE_NONRESALE + @COUNTY_NONRESALE + @CITY_NONRESALE
						END
						IF @CONTINGENCY > 0
						BEGIN
							IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
							BEGIN
								SET @NR_CONT = (@MU_CONT * (@ROW_STATE_PERCENT / 100)) + (@MU_CONT * (@ROW_COUNTY_PERCENT / 100)) + (@MU_CONT * (@ROW_CITY_PERCENT / 100))
							END
							ELSE IF @TAX_COMM = 1
							BEGIN
								SET @NR_CONT = ((@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)) + ((@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)) + ((@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100))
							END
						END
					END
					ELSE IF @EST_FNC_TYPE = 'E' OR @EST_FNC_TYPE = 'I'
					BEGIN
						IF @TAX_COMM_ONLY <> 1
						BEGIN
							SET @STATE_RESALE = @AMOUNT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE = @AMOUNT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE = @AMOUNT * (@ROW_CITY_PERCENT / 100)							
						END
						IF @CONTINGENCY > 0
						BEGIN
							IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
							BEGIN
								SET @STATE_CONT = @MU_CONT * (@ROW_STATE_PERCENT / 100)
								SET @COUNTY_CONT = @MU_CONT * (@ROW_COUNTY_PERCENT / 100)
								SET @CITY_CONT = @MU_CONT * (@ROW_CITY_PERCENT / 100)
							END
							ELSE IF @TAX_COMM = 1
							BEGIN
								SET @STATE_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)
								SET @COUNTY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)
								SET @CITY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100)
							END
						END
					END
					IF @TAX_COMM = 1
					BEGIN
						IF @MARKUP_AMT > 0
						BEGIN
							SET @STATE_RESALE_MU = @MARKUP_AMT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE_MU = @MARKUP_AMT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE_MU = @MARKUP_AMT * (@ROW_CITY_PERCENT / 100)
							SET @STATE_RESALE = @STATE_RESALE + @STATE_RESALE_MU
							SET @COUNTY_RESALE = @COUNTY_RESALE + @COUNTY_RESALE_MU
							SET @CITY_RESALE = @CITY_RESALE + @CITY_RESALE_MU
						END	
					END
					
				END

				--Recalculate Totals
				SET @LINE_TOTAL_CONT = (@MARKUP_AMT * (@CONT_PCT / 100)) + @CONTINGENCY + @STATE_CONT + @COUNTY_CONT + @CITY_CONT + @NR_CONT
				SET @LINE_TOTAL = @AMOUNT + @MARKUP_AMT + @STATE_RESALE + @COUNTY_RESALE + @CITY_RESALE


				UPDATE ESTIMATE_REV_DET
				SET EXT_STATE_RESALE = @STATE_RESALE, EXT_COUNTY_RESALE = @COUNTY_RESALE, EXT_CITY_RESALE = @CITY_RESALE, EXT_NONRESALE_TAX = @NONRESALE_TAX,
					EXT_STATE_CONT = @STATE_CONT, EXT_COUNTY_CONT = @COUNTY_CONT, EXT_CITY_CONT = @CITY_CONT, EXT_NR_CONT = @NR_CONT, LINE_TOTAL_CONT = @LINE_TOTAL_CONT, LINE_TOTAL = @LINE_TOTAL
				WHERE ESTIMATE_REV_DET.ESTIMATE_NUMBER = @EstimateNumber AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = @EstimateComponentNumber AND ESTIMATE_REV_DET.EST_QUOTE_NBR = @EstimateQuoteNumber
					  AND ESTIMATE_REV_DET.EST_REV_NBR = @EstimateRevisionNumber AND ESTIMATE_REV_DET.FNC_CODE = @CURR_CODE

		   END
		   ELSE
		   BEGIN
				
				SET @CURR_AMT = @CURR_AMT * -1
				SET @CURR_QTY = @CURR_QTY * -1
				SET @CURR_MU = @CURR_MU * -1

				SELECT @NEXT_SEQ_NBR = ISNULL(MAX(SEQ_NBR),-1) + 1 FROM ESTIMATE_REV_DET
				WHERE ESTIMATE_NUMBER = @EstimateNumber AND EST_COMPONENT_NBR = @EstimateComponentNumber AND EST_QUOTE_NBR = @EstimateQuoteNumber
						AND EST_REV_NBR = @EstimateRevisionNumber
    
				if @NEXT_SEQ_NBR = 0
				Begin
					SET @NEXT_SEQ_NBR = 1
				End 

				SELECT @SC_CODE = SC_CODE
				FROM JOB_LOG
				WHERE JOB_LOG.JOB_NUMBER = @JobNumber

				INSERT INTO #FunctionData
				EXECUTE usp_wv_Estimating_GetUserFunctionDefault @CURR_CODE, @JobNumber, @CompNumber, @CURR_CLIENT, @CURR_DIVISION, @CURR_PRODUCT, @SC_CODE, @EMP_CODE,NULL

				SELECT @EST_FNC_TYPE = FNC_TYPE, @TAX_COMM = TAX_COMM, @TAX_COMM_ONLY = TAX_COMM_ONLY, @TAX_RESALE = TAX_RESALE, @TAX_CODE = TAX_CODE, @ROW_STATE_PERCENT = STATE_PERCENT,
					   @ROW_CITY_PERCENT = CITY_PERCENT, @ROW_COUNTY_PERCENT = COUNTY_PERCENT, @FEE_TIME = FEE_TIME_FLAG,
					   @EST_COMM_FLAG = CASE WHEN COMM = 0 THEN 0 ELSE 1 END, @EST_TAX_FLAG = CASE WHEN TAX_CODE = '' THEN 0 ELSE 1 END, @EST_NONBILL_FLAG = NOBILL_FLAG
				FROM #FunctionData
				--WHERE FNC_CODE = @CURR_CODE

				SELECT @EST_CPM_FLAG = FNC_CPM_FLAG
				FROM FUNCTIONS
				WHERE FNC_CODE = @CURR_CODE

				--Recalculate TAX
				IF @TAX_RESALE = 1
				BEGIN
					IF @TAX_COMM_ONLY <> 1
					BEGIN
						SET @STATE_RESALE = @CURR_AMT * (@ROW_STATE_PERCENT / 100)
						SET @COUNTY_RESALE = @CURR_AMT * (@ROW_COUNTY_PERCENT / 100)
						SET @CITY_RESALE = @CURR_AMT * (@ROW_CITY_PERCENT / 100)
					END
					IF @TAX_COMM = 1
					BEGIN
						IF @MARKUP_AMT > 0
						BEGIN
							SET @STATE_RESALE_MU = @CURR_MU * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE_MU = @CURR_MU * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE_MU = @CURR_MU * (@ROW_CITY_PERCENT / 100)
							SET @STATE_RESALE = @STATE_RESALE + @STATE_RESALE_MU
							SET @COUNTY_RESALE = @COUNTY_RESALE + @COUNTY_RESALE_MU
							SET @CITY_RESALE = @CITY_RESALE + @CITY_RESALE_MU
						END						
					END
					

					IF @CONTINGENCY > 0
					BEGIN
						IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
						BEGIN
							SET @STATE_CONT = @MU_CONT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = @MU_CONT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = @MU_CONT * (@ROW_CITY_PERCENT / 100)
						END
						ELSE IF @TAX_COMM = 1
						BEGIN
							SET @STATE_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100)
						END
						ELSE
						BEGIN
							SET @STATE_CONT = @CONTINGENCY * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_CONT = @CONTINGENCY * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_CONT = @CONTINGENCY * (@ROW_CITY_PERCENT / 100)
						END
					END

				END
				ELSE
				BEGIN
					IF @EST_FNC_TYPE = 'V'
					BEGIN
						IF @TAX_COMM_ONLY <> 1
						BEGIN
							SET @STATE_NONRESALE = @CURR_AMT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_NONRESALE = @CURR_AMT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_NONRESALE = @CURR_AMT * (@ROW_CITY_PERCENT / 100)
							SET @NONRESALE_TAX = @STATE_NONRESALE + @COUNTY_NONRESALE + @CITY_NONRESALE
						END
						IF @CONTINGENCY > 0
						BEGIN
							IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
							BEGIN
								SET @NR_CONT = (@MU_CONT * (@ROW_STATE_PERCENT / 100)) + (@MU_CONT * (@ROW_COUNTY_PERCENT / 100)) + (@MU_CONT * (@ROW_CITY_PERCENT / 100))
							END
							ELSE IF @TAX_COMM = 1
							BEGIN
								SET @NR_CONT = ((@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)) + ((@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)) + ((@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100))
							END
						END
					END
					ELSE IF @EST_FNC_TYPE = 'E' OR @EST_FNC_TYPE = 'I'
					BEGIN
						IF @TAX_COMM_ONLY <> 1
						BEGIN
							SET @STATE_RESALE = @CURR_AMT * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE = @CURR_AMT * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE = @CURR_AMT * (@ROW_CITY_PERCENT / 100)							
						END
						IF @CONTINGENCY > 0
						BEGIN
							IF @TAX_COMM = 1 AND @TAX_COMM_ONLY = 1
							BEGIN
								SET @STATE_CONT = @MU_CONT * (@ROW_STATE_PERCENT / 100)
								SET @COUNTY_CONT = @MU_CONT * (@ROW_COUNTY_PERCENT / 100)
								SET @CITY_CONT = @MU_CONT * (@ROW_CITY_PERCENT / 100)
							END
							ELSE IF @TAX_COMM = 1
							BEGIN
								SET @STATE_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_STATE_PERCENT / 100)
								SET @COUNTY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_COUNTY_PERCENT / 100)
								SET @CITY_CONT = (@CONTINGENCY + @MU_CONT) * (@ROW_CITY_PERCENT / 100)
							END
						END
					END
					IF @TAX_COMM = 1
					BEGIN
						IF @MARKUP_AMT > 0
						BEGIN
							SET @STATE_RESALE_MU = @CURR_MU * (@ROW_STATE_PERCENT / 100)
							SET @COUNTY_RESALE_MU = @CURR_MU * (@ROW_COUNTY_PERCENT / 100)
							SET @CITY_RESALE_MU = @CURR_MU * (@ROW_CITY_PERCENT / 100)
							SET @STATE_RESALE = @STATE_RESALE + @STATE_RESALE_MU
							SET @COUNTY_RESALE = @COUNTY_RESALE + @COUNTY_RESALE_MU
							SET @CITY_RESALE = @CITY_RESALE + @CITY_RESALE_MU
						END	
					END
					
				END

				--Recalculate Totals
				SET @LINE_TOTAL_CONT = (@CURR_MU * (@CONT_PCT / 100)) + @CONTINGENCY + @STATE_CONT + @COUNTY_CONT + @CITY_CONT + @NR_CONT
				SET @LINE_TOTAL = @CURR_AMT + @CURR_MU + @STATE_RESALE + @COUNTY_RESALE + @CITY_RESALE

				INSERT INTO [ESTIMATE_REV_DET]
					([ESTIMATE_NUMBER],	[EST_COMPONENT_NBR],[EST_QUOTE_NBR],[EST_REV_NBR],[SEQ_NBR],[FNC_CODE],[EST_REV_COMM_PCT],[EST_REV_CONT_PCT],[EST_REV_QUANTITY],[EST_REV_RATE],[EST_REV_SUP_BY_CDE],
						[EST_REV_SUP_BY_NTE],[EST_REV_EXT_AMT],[TAX_CODE],[EST_FNC_COMMENT],[EXT_MARKUP_AMT],[EXT_CONTINGENCY],[LINE_TOTAL],[INCL_CPU],[EST_FNC_TYPE],[EST_CPM_FLAG],[TAX_STATE_PCT],
						[TAX_COUNTY_PCT],[TAX_CITY_PCT],[TAX_COMM],[TAX_COMM_ONLY],[TAX_RESALE],[EST_COMM_FLAG],[EST_TAX_FLAG],[EST_NONBILL_FLAG],[EXT_NONRESALE_TAX],[EXT_STATE_RESALE],[EXT_COUNTY_RESALE],
						[EXT_CITY_RESALE],[EXT_MU_CONT],[EXT_STATE_CONT],[EXT_COUNTY_CONT],[EXT_CITY_CONT],[EXT_NR_CONT],[LINE_TOTAL_CONT],[FEE_TIME])
					VALUES
					(
						@EstimateNumber,
						@EstimateComponentNumber,
						@EstimateQuoteNumber,
						@EstimateRevisionNumber,
						@NEXT_SEQ_NBR,
						@CURR_CODE,
						CASE WHEN @CURR_AMT <> 0 THEN (@CURR_MU / @CURR_AMT) * 100 ELSE 0 END,
						@CONT_PCT,
						@CURR_QTY,
						CASE WHEN @CURR_QTY <> 0 THEN (@CURR_AMT / @CURR_QTY) ELSE 0 END,
						NULL,
						NULL,
						@CURR_AMT,
						@TAX_CODE,
						NULL,
						@CURR_MU,
						0,
						@LINE_TOTAL,
						1,
						@EST_FNC_TYPE,
						@EST_CPM_FLAG,
						@ROW_STATE_PERCENT,
						@ROW_CITY_PERCENT,
						@ROW_COUNTY_PERCENT,
						@TAX_COMM,
						@TAX_COMM_ONLY,
						@TAX_RESALE,
						@EST_COMM_FLAG,
						@EST_TAX_FLAG,
						@EST_NONBILL_FLAG,
						@NONRESALE_TAX,
						@STATE_RESALE,
						@COUNTY_RESALE,
						@CITY_RESALE,
						0,
						@STATE_CONT,
						@COUNTY_CONT,
						@CITY_CONT,
						@NR_CONT,
						@LINE_TOTAL_CONT,
						@FEE_TIME
					)

				DELETE FROM #FunctionData
				
		   END

		   SET @MARKUP_AMT = 0
		   SET @TAX_CODE = ''
		   SET @CONTINGENCY = 0
		   SET @LINE_TOTAL_CONT = 0
		   SET @LINE_TOTAL = 0
		   SET @CONT_PCT = 0
		   SET @STATE_RESALE = 0
		   SET @COUNTY_RESALE = 0
		   SET @CITY_RESALE = 0
		   SET @STATE_RESALE_MU = 0
		   SET @COUNTY_RESALE_MU = 0
		   SET @CITY_RESALE_MU = 0
		   SET @STATE_CONT = 0
		   SET @COUNTY_CONT = 0
		   SET @CITY_CONT = 0
		   SET @NR_CONT = 0
		   SET @NONRESALE_TAX = 0


	        --GO TO NEXT EVENT
	        FETCH NEXT FROM MY_ROWS INTO @CURR_CODE,@CURR_QTY,@CURR_AMT,@CURR_MU,@CURR_CLIENT,@CURR_DIVISION,@CURR_PRODUCT;
        END
        CLOSE MY_ROWS;
        DEALLOCATE MY_ROWS;		

	End

	SELECT * FROM ESTIMATE_REV_DET
	WHERE ESTIMATE_REV_DET.ESTIMATE_NUMBER = @EstimateNumber AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = @EstimateComponentNumber AND ESTIMATE_REV_DET.EST_QUOTE_NBR = @EstimateQuoteNumber
					  AND ESTIMATE_REV_DET.EST_REV_NBR = @EstimateRevisionNumber

	DROP TABLE #EstimateData
	DROP TABLE #FunctionData
    


END