IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[advsp_gl_detail_by_account_dataset_load]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[advsp_gl_detail_by_account_dataset_load]
GO

CREATE PROCEDURE [dbo].[advsp_gl_detail_by_account_dataset_load]
	@USER_CODE VARCHAR(100),
	@FROM_PPPERIOD varchar(6),
	@TO_PPPERIOD varchar(6),
	@RECORD_SOURCE_ID INT,
	@OFFICES VARCHAR(MAX),
	@DEPARTMENTS VARCHAR(MAX),
	@OTHERS VARCHAR(MAX),
	@BASES VARCHAR(MAX),
	@INCL_CURRENT_ASSESTS BIT = 1,
	@INCL_NON_CURRENT_ASSESTS BIT = 1,
	@INCL_FIXED_ASSESTS BIT = 1,
	@INCL_CURRENT_LIABILITIES BIT = 1,
	@INCL_NON_CURRENT_LIABILITIES BIT = 1,
	@INCL_EQUITY BIT = 1,
	@INCL_INCOME BIT = 1,
	@INCL_INCOME_OTHER BIT = 1,
	@INCL_EXPENSE_COS BIT = 1,
	@INCL_EXPENSE_OPERATING BIT = 1,
	@INCL_EXPENSE_OTHER BIT = 1,
	@INCL_EXPENSE_TAXES BIT = 1
AS
BEGIN

	/*PJH 01/03/2020 - Changed [MappedAccount] to GLACCOUNT_XREF_EXPORT.TARGET_GLACODE Xref with GLACCOUNT_XREF_EXPORT_DETAIL */

	SET NOCOUNT ON
	
	DECLARE @GLTYPES_TBL TABLE (GLATYPE VARCHAR(2) COLLATE SQL_Latin1_General_CP1_CS_AS, 
								TYPE_DESC VARCHAR(25) COLLATE SQL_Latin1_General_CP1_CS_AS)	
	DECLARE @GLOFFICE_TBL TABLE (OFFICE_CODE VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CS_AS)	
	DECLARE @GLDEPT_TBL TABLE (DEPT_CODE VARCHAR(5) COLLATE SQL_Latin1_General_CP1_CS_AS)
	DECLARE @GLOTHER_TBL TABLE (OTHER_CODE VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CS_AS)
	DECLARE @GLBASE_TBL TABLE (BASE_CODE VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CS_AS)

	DECLARE @EMP_CODE VARCHAR(6)
	DECLARE @USE_OFFICE BIT
	DECLARE @USE_DEPT BIT
	DECLARE @USE_OTHER BIT
	DECLARE @USE_BASE BIT
	DECLARE @GL_PP_START VARCHAR(6)
	DECLARE @EMP_OFFICE_LIMITED BIT 

	SELECT 
		@GL_PP_START = MIN( PPPERIOD )
	FROM 
		dbo.POSTPERIOD
	WHERE 
		PPGLYEAR = ( SELECT 
						PPGLYEAR
					 FROM 
						POSTPERIOD
					 WHERE 
						PPPERIOD = @FROM_PPPERIOD )
	
	IF @INCL_CURRENT_ASSESTS = 1
		INSERT INTO @GLTYPES_TBL VALUES ('2', 'Current Asset')
	
	IF @INCL_NON_CURRENT_ASSESTS = 1
		INSERT INTO @GLTYPES_TBL VALUES ('1', 'Non-Current Asset')

	IF @INCL_FIXED_ASSESTS = 1
		INSERT INTO @GLTYPES_TBL VALUES ('3', 'Fixed Asset')

	IF @INCL_CURRENT_LIABILITIES = 1
		INSERT INTO @GLTYPES_TBL VALUES ('5', 'Current Liability')

	IF @INCL_NON_CURRENT_LIABILITIES = 1
		INSERT INTO @GLTYPES_TBL VALUES ('4', 'Non-Current Liability')

	IF @INCL_EQUITY = 1
		INSERT INTO @GLTYPES_TBL VALUES ('20', 'Equity')

	IF @INCL_INCOME = 1
		INSERT INTO @GLTYPES_TBL VALUES ('8', 'Income')

	IF @INCL_INCOME_OTHER = 1
		INSERT INTO @GLTYPES_TBL VALUES ('9', 'Income - Other')
	
	IF @INCL_EXPENSE_COS = 1
		INSERT INTO @GLTYPES_TBL VALUES ('13', 'Expense - COS')

	IF @INCL_EXPENSE_OPERATING = 1
		INSERT INTO @GLTYPES_TBL VALUES ('14', 'Expense - Operating')

	IF @INCL_EXPENSE_OTHER = 1
		INSERT INTO @GLTYPES_TBL VALUES ('15', 'Expense - Other')

	IF @INCL_EXPENSE_TAXES = 1
		INSERT INTO @GLTYPES_TBL VALUES ('16', 'Expense - Taxes')

	SELECT @EMP_CODE = EMP_CODE FROM dbo.SEC_USER WHERE UPPER(USER_CODE) = UPPER(@USER_CODE)

	SELECT 
		@USE_BASE =	CASE 
						WHEN SEGMENT1_FORMAT IS NOT NULL AND SEGMENT1_TYPE = 1 THEN 1
						WHEN SEGMENT2_FORMAT IS NOT NULL AND SEGMENT2_TYPE = 1 THEN 1
						WHEN SEGMENT3_FORMAT IS NOT NULL AND SEGMENT3_TYPE = 1 THEN 1
						WHEN SEGMENT4_FORMAT IS NOT NULL AND SEGMENT4_TYPE = 1 THEN 1
						ELSE 0
					END, 
		@USE_OFFICE = CASE 
						WHEN SEGMENT1_FORMAT IS NOT NULL AND SEGMENT1_TYPE = 2 THEN 1
						WHEN SEGMENT2_FORMAT IS NOT NULL AND SEGMENT2_TYPE = 2 THEN 1
						WHEN SEGMENT3_FORMAT IS NOT NULL AND SEGMENT3_TYPE = 2 THEN 1
						WHEN SEGMENT4_FORMAT IS NOT NULL AND SEGMENT4_TYPE = 2 THEN 1
						ELSE 0
					  END,
		@USE_DEPT =	CASE 
						WHEN SEGMENT1_FORMAT IS NOT NULL AND SEGMENT1_TYPE = 3 THEN 1
						WHEN SEGMENT2_FORMAT IS NOT NULL AND SEGMENT2_TYPE = 3 THEN 1
						WHEN SEGMENT3_FORMAT IS NOT NULL AND SEGMENT3_TYPE = 3 THEN 1
						WHEN SEGMENT4_FORMAT IS NOT NULL AND SEGMENT4_TYPE = 3 THEN 1
						ELSE 0
					END,
		@USE_OTHER = CASE 
						WHEN SEGMENT1_FORMAT IS NOT NULL AND SEGMENT1_TYPE = 4 THEN 1
						WHEN SEGMENT2_FORMAT IS NOT NULL AND SEGMENT2_TYPE = 4 THEN 1
						WHEN SEGMENT3_FORMAT IS NOT NULL AND SEGMENT3_TYPE = 4 THEN 1
						WHEN SEGMENT4_FORMAT IS NOT NULL AND SEGMENT4_TYPE = 4 THEN 1
						ELSE 0
					 END   
	FROM 
		dbo.GLCONFIG
		
	IF @USE_OFFICE = 1
	BEGIN

		IF EXISTS (SELECT * FROM dbo.EMP_OFFICE WHERE EMP_CODE = @EMP_CODE)
			SET @EMP_OFFICE_LIMITED = 1
		ELSE
			SET @EMP_OFFICE_LIMITED = 0

		IF ISNULL(@OFFICES, '') = '' 
		BEGIN
		
			INSERT INTO @GLOFFICE_TBL
				SELECT DISTINCT
					GLACCOUNT.GLAOFFICE
				FROM
					dbo.GLACCOUNT
				LEFT OUTER JOIN
					dbo.GLOXREF ON GLACCOUNT.GLAOFFICE = GLOXREF.GLOXGLOFFICE 
				LEFT OUTER JOIN
					dbo.OFFICE ON GLOXREF.GLOXOFFICE = OFFICE.OFFICE_CODE 
				LEFT OUTER JOIN
					dbo.advtf_employee_office_limits(@EMP_CODE) EO ON OFFICE.OFFICE_CODE = EO.OFFICE_CODE
				WHERE
					1 = CASE WHEN @EMP_OFFICE_LIMITED = 0 THEN 1 WHEN EO.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END

		END
		ELSE 
		BEGIN
		
			INSERT INTO @GLOFFICE_TBL
				SELECT DISTINCT
					GLO.GLOXGLOFFICE
				FROM
					(SELECT
						[GLOXGLOFFICE] = LTRIM(RTRIM(items))
					 FROM
						dbo.udf_split_list(@OFFICES, ',')) GLO
				LEFT OUTER JOIN
					dbo.GLOXREF ON GLO.GLOXGLOFFICE = GLOXREF.GLOXGLOFFICE 
				LEFT OUTER JOIN
					dbo.OFFICE ON GLOXREF.GLOXOFFICE = OFFICE.OFFICE_CODE 
				LEFT OUTER JOIN
					dbo.advtf_employee_office_limits(@EMP_CODE) EO ON OFFICE.OFFICE_CODE = EO.OFFICE_CODE
				WHERE
					1 = CASE WHEN @EMP_OFFICE_LIMITED = 0 THEN 1 WHEN EO.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END
					
		END

	END
	
	IF @USE_DEPT = 1 
	BEGIN

		IF ISNULL(@DEPARTMENTS, '') = '' 
		BEGIN

			INSERT INTO @GLDEPT_TBL
				SELECT DISTINCT
					GLACCOUNT.GLADEPT
				FROM
					dbo.GLACCOUNT

		END
		ELSE 
		BEGIN

			INSERT INTO @GLDEPT_TBL
				SELECT DISTINCT
					LTRIM(RTRIM(items))
				FROM
					dbo.udf_split_list(@DEPARTMENTS, ',')

		END
		
	END

	IF @USE_OTHER = 1 
	BEGIN

		IF ISNULL(@OTHERS, '') = '' 
		BEGIN

			INSERT INTO @GLOTHER_TBL
				SELECT DISTINCT
					GLAOTHER
				FROM
					dbo.GLACCOUNT LEFT OUTER JOIN 
					@GLOFFICE_TBL OT ON GLACCOUNT.GLAOFFICE = OT.OFFICE_CODE
				WHERE 
					1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN OT.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END
				
		END
		ELSE 
		BEGIN

			INSERT INTO @GLOTHER_TBL
				SELECT
					 DISTINCT GLO.OTHER_CODE
				FROM
					(SELECT DISTINCT
						[OTHER_CODE] = LTRIM(RTRIM(items))
					 FROM
						dbo.udf_split_list(@OTHERS, ',')) GLO JOIN
					dbo.GLACCOUNT ON GLO.OTHER_CODE = GLACCOUNT.GLAOTHER LEFT OUTER JOIN 
					@GLOFFICE_TBL OT ON GLACCOUNT.GLAOFFICE = OT.OFFICE_CODE
				WHERE 
					1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN OT.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END

		END

	END          
	
	
	IF @USE_BASE = 1 
	BEGIN

		IF ISNULL(@BASES, '') = '' 
		BEGIN

			INSERT INTO @GLBASE_TBL
				SELECT DISTINCT
					GLABASE
				FROM
					dbo.GLACCOUNT LEFT OUTER JOIN 
					@GLOFFICE_TBL OT ON GLACCOUNT.GLAOFFICE = OT.OFFICE_CODE
				WHERE 
					1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN OT.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END

		END
		ELSE 
		BEGIN

			INSERT INTO @GLBASE_TBL
				SELECT DISTINCT
					GLB.BASE_CODE
				FROM
					(SELECT DISTINCT
						[BASE_CODE] = LTRIM(RTRIM(items))
					 FROM
						dbo.udf_split_list(@BASES, ',')) GLB JOIN
					dbo.GLACCOUNT ON GLB.BASE_CODE = GLACCOUNT.GLABASE LEFT OUTER JOIN 
					@GLOFFICE_TBL OT ON GLACCOUNT.GLAOFFICE = OT.OFFICE_CODE
				WHERE 
					1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN OT.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END

		END

	END

	SELECT
		[ID] = NEWID(),
		[TransactionID],   
		[AccountCode],
		[AccountDescription],   
		[AccountType],
		[TransactionDate],
		[AccountBeginningBalance],
		[DebitAmount], 
		[CreditAmount],   
		[Remark],   
		[PostPeriodCode], 
		[PostPeriodDescription],
		[PostPeriodStartDate], 
		[PostPeriodEndDate], 
		[GLMonth], 
		[GLYear],    
		[PostedToSummary],   
		[ClientCode],   
		[ClientName],
		[DivisionCode], 
		[DivisionName],
		[ProductCode],   
		[ProductName],
		[Source],   
		[OfficeSegment],   
		[BaseAccount],   
		[DepartmentSegment],   
		[OtherSegment],   
		[MappedAccount] = GLX.TARGET_GLACODE,
		[Reversing],
		[UserCode],
		[ProductUserDefinedField1],
		[ProductUserDefinedField2],
		[ProductUserDefinedField3],
		[ProductUserDefinedField4],
        [CDP] = CASE WHEN NULLIF([ClientCode],'') IS NOT NULL THEN [ClientCode] +
                    CASE WHEN NULLIF([DivisionCode],'') IS NOT NULL THEN '-' + [DivisionCode] +
                        CASE WHEN NULLIF([ProductCode],'') IS NOT NULL THEN '-' + [ProductCode]
                        ELSE ''
                        END
                    ELSE ''
                    END
                ELSE NULL
                END
	FROM
		(SELECT 
			[RowOrder] = 2,
			[TransactionID] = GLT.GLEHXACT,   
			[AccountCode] = GLA.GLACODE,   
			[AccountDescription] = GLA.GLADESC,   
			[AccountType] = GLAT.TYPE_DESC,
			[TransactionDate] = GLT.GLEHENTDATE,
			[AccountBeginningBalance] = 0,
			[DebitAmount] = CASE WHEN GLTD.GLETAMT > 0 THEN GLTD.GLETAMT ELSE 0 END, 
			[CreditAmount] = CASE WHEN GLTD.GLETAMT < 0 THEN GLTD.GLETAMT * -1 ELSE 0 END,   
			[Remark] = GLTD.GLETREM,   
			[PostPeriodCode] = PP.PPPERIOD, 
			[PostPeriodStartDate] = PP.PPSRTDATE,
			[PostPeriodEndDate] = PP.PPENDDATE,
			[PostPeriodDescription] = PP.PPDESC,
			[GLMonth] = PP.PPGLMONTH,
			[GLYear] = PP.PPGLYEAR,
			[PostedToSummary] = GLT.GLEHPOSTSUM,   
			[ClientCode] = GLTD.CL_CODE,   
			[ClientName] = C.CL_NAME,
			[DivisionCode] = GLTD.DIV_CODE,   
			[DivisionName] = D.DIV_NAME,   
			[ProductCode] = GLTD.PRD_CODE,   
			[ProductName] = PRD.PRD_DESCRIPTION,  
			[Source] = GLTD.GLETSOURCE,   
			[OfficeSegment] = GLA.GLAOFFICE,   
			[BaseAccount] = GLA.GLABASE,   
			[DepartmentSegment] = GLA.GLADEPT,   
			[OtherSegment] = GLA.GLAOTHER,   
			[MappedAccount] = NULL,
			[Reversing] = GLT.GLEHREVFLG,
			[UserCode] = GLT.GLEHUSER,
			[ProductUserDefinedField1] = PRD.USER_DEFINED1,
			[ProductUserDefinedField2] = PRD.USER_DEFINED2,
			[ProductUserDefinedField3] = PRD.USER_DEFINED3,
			[ProductUserDefinedField4] = PRD.USER_DEFINED4
		FROM 
			[dbo].[GLENTHDR] AS GLT 
		INNER JOIN 
			[dbo].[GLENTTRL] AS GLTD ON GLTD.GLETXACT = GLT.GLEHXACT 
		INNER JOIN  
			[dbo].[GLACCOUNT] AS GLA ON GLA.GLACODE = GLTD.GLETCODE 
		INNER JOIN
			@GLTYPES_TBL AS GLAT ON GLA.GLATYPE = GLAT.GLATYPE 
		LEFT OUTER JOIN
			@GLOFFICE_TBL AS GLAO ON GLA.GLAOFFICE = GLAO.OFFICE_CODE  
		LEFT OUTER JOIN
			@GLDEPT_TBL AS GLAD ON GLA.GLADEPT = GLAD.DEPT_CODE 
		LEFT OUTER JOIN
			@GLBASE_TBL AS GLAB ON GLA.GLABASE = GLAB.BASE_CODE 
		LEFT OUTER JOIN
			@GLOTHER_TBL AS GLAOT ON GLA.GLAOTHER = GLAOT.OTHER_CODE 
		INNER JOIN
			[dbo].[POSTPERIOD] AS PP ON PP.PPPERIOD = GLT.GLEHPP 
		--LEFT OUTER JOIN
		--	(SELECT 
		--		GLACODE,
		--		SOURCE_GLACODE
		--	FROM 
		--		[dbo].[GLACCOUNT_XREF] 
		--	WHERE
		--		GLACCOUNT_XREF_ID IN (SELECT MAX(GLACCOUNT_XREF_ID) FROM [dbo].[GLACCOUNT_XREF] WHERE RECORD_SOURCE_ID = @RECORD_SOURCE_ID GROUP BY GLACODE)) AS GLAX ON GLAX.GLACODE = GLA.GLACODE
		LEFT JOIN [dbo].[PRODUCT] AS PRD ON PRD.CL_CODE = GLTD.CL_CODE AND PRD.DIV_CODE = GLTD.DIV_CODE AND PRD.PRD_CODE = GLTD.PRD_CODE LEFT OUTER JOIN
        [dbo].[DIVISION] AS D ON D.CL_CODE = PRD.CL_CODE AND D.DIV_CODE = PRD.DIV_CODE LEFT OUTER JOIN
		[dbo].[CLIENT] AS C ON C.CL_CODE = D.CL_CODE
		WHERE 
			--PP.PPGLMONTH <> 99 AND  
			PP.PPPERIOD BETWEEN @FROM_PPPERIOD AND @TO_PPPERIOD AND
			GLTD.GLETAMT <> 0 AND
			1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN GLAO.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END AND
			1 = CASE WHEN @USE_BASE = 0 THEN 1 WHEN GLAB.BASE_CODE IS NOT NULL THEN 1 ELSE 0 END AND
			1 = CASE WHEN @USE_DEPT = 0 THEN 1 WHEN GLAD.DEPT_CODE IS NOT NULL THEN 1 ELSE 0 END AND
			1 = CASE WHEN @USE_OTHER = 0 THEN 1 WHEN GLAOT.OTHER_CODE IS NOT NULL THEN 1 ELSE 0 END
		UNION ALL
		SELECT 
			[RowOrder] = 1,
			[TransactionID] = NULL,   
			[AccountCode] = GLA.GLACODE,   
			[AccountDescription] = GLA.GLADESC,  
			[AccountType] = GLAT.TYPE_DESC,  
			[TransactionDate] = NULL,
			[AccountBeginningBalance] = GLASUM.AccountBeginningBalance,
			[DebitAmount] = 0,  
			[CreditAmount] = 0,   
			[Remark] = NULL,   
			[PostPeriodCode] = NULL,
			[PostPeriodStartDate] = NULL,
			[PostPeriodEndDate] = NULL,
			[PostPeriodDescription] = NULL,
			[GLMonth] = NULL,
			[GLYear] = NULL,
			[PostedToSummary] = NULL,   
			[ClientCode] = NULL,    
			[ClientName] = NULL,    
			[DivisionCode] = NULL,   
			[DivisionName] = NULL,   
			[ProductCode] = NULL,   
			[ProductName] = NULL,  
			[Source] = NULL,   
			[OfficeSegment] = GLA.GLAOFFICE,   
			[BaseAccount] = GLA.GLABASE,   
			[DepartmentSegment] = GLA.GLADEPT,   
			[OtherSegment] = GLA.GLAOTHER,   
			[MappedAccount] = NULL,
			[Reversing] = NULL,
			[UserCode] = NULL,
			[ProductUserDefinedField1] = NULL,
			[ProductUserDefinedField2] = NULL,
			[ProductUserDefinedField3] = NULL,
			[ProductUserDefinedField4] = NULL
		FROM  
			[dbo].[GLACCOUNT] AS GLA 
		INNER JOIN
			@GLTYPES_TBL AS GLAT ON GLA.GLATYPE = GLAT.GLATYPE 
		LEFT OUTER JOIN
			@GLOFFICE_TBL AS GLAO ON GLA.GLAOFFICE = GLAO.OFFICE_CODE 
		LEFT OUTER JOIN
			@GLDEPT_TBL AS GLAD ON GLA.GLADEPT = GLAD.DEPT_CODE 
		LEFT OUTER JOIN
			@GLBASE_TBL AS GLAB ON GLA.GLABASE = GLAB.BASE_CODE 
		LEFT OUTER JOIN
			@GLOTHER_TBL AS GLAOT ON GLA.GLAOTHER = GLAOT.OTHER_CODE 
		INNER JOIN
			(SELECT
				GLSUM.GLSCODE,
				GLSUM.AccountBeginningBalance
			FROM
				(SELECT
					GLSUMMARY.GLSCODE,
					GLTRANS.[ACCT_WITH_DATA],
					[AccountBeginningBalance] = CONVERT(FLOAT, SUM(CONVERT(DECIMAL(15,2), CASE WHEN GLACCOUNT.GLATYPE NOT IN ('8', '9', '12', '13', '14', '15', '16') THEN GLSDEBIT WHEN GLSPP >= @GL_PP_START THEN GLSDEBIT ELSE 0 END)) + SUM(CONVERT(DECIMAL(15,2), CASE WHEN GLACCOUNT.GLATYPE NOT IN ('8', '9', '12', '13', '14', '15', '16') THEN GLSCREDIT WHEN GLSPP >= @GL_PP_START THEN GLSCREDIT ELSE 0 END)))
				FROM
					dbo.GLSUMMARY JOIN
					dbo.GLACCOUNT ON GLSUMMARY.GLSCODE = GLACCOUNT.GLACODE LEFT JOIN
					(SELECT
						[ACCT_WITH_DATA] = GLSCODE
					FROM
						dbo.GLSUMMARY
					WHERE 
						GLSPP <= @TO_PPPERIOD AND
						GLSPP >= @FROM_PPPERIOD
					 GROUP BY
						GLSCODE) GLTRANS ON GLSUMMARY.GLSCODE = GLTRANS.[ACCT_WITH_DATA]
				WHERE
					GLSPP < @FROM_PPPERIOD 
				GROUP BY
					GLSCODE,
					GLTRANS.[ACCT_WITH_DATA]) GLSUM
			WHERE
				GLSUM.AccountBeginningBalance <> 0 OR
				GLSUM.ACCT_WITH_DATA IS NOT NULL) GLASUM ON GLA.GLACODE = GLASUM.GLSCODE 
		--LEFT OUTER JOIN
		--	(SELECT 
		-- 		GLACODE,
		-- 		SOURCE_GLACODE
		--	 FROM 
		-- 		[dbo].[GLACCOUNT_XREF] 
		--	 WHERE
		-- 		GLACCOUNT_XREF_ID IN (SELECT MAX(GLACCOUNT_XREF_ID) FROM [dbo].[GLACCOUNT_XREF] WHERE RECORD_SOURCE_ID = @RECORD_SOURCE_ID GROUP BY GLACODE)) AS GLAX ON GLAX.GLACODE = GLA.GLACODE
		WHERE 
			1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN GLAO.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END AND
			1 = CASE WHEN @USE_BASE = 0 THEN 1 WHEN GLAB.BASE_CODE IS NOT NULL THEN 1 ELSE 0 END AND
			1 = CASE WHEN @USE_DEPT = 0 THEN 1 WHEN GLAD.DEPT_CODE IS NOT NULL THEN 1 ELSE 0 END AND
			1 = CASE WHEN @USE_OTHER = 0 THEN 1 WHEN GLAOT.OTHER_CODE IS NOT NULL THEN 1 ELSE 0 END
			) GLDTL 
		LEFT JOIN 
			[dbo].[GLACCOUNT_XREF_EXPORT_DETAIL] GLXD ON GLDTL.AccountCode = GLXD.GLACODE
		LEFT JOIN
			[dbo].[GLACCOUNT_XREF_EXPORT] GLX ON GLX.GLACCOUNT_XREF_EXPORT_ID = GLXD.GLACCOUNT_XREF_EXPORT_ID
	ORDER BY
		GLDTL.AccountCode,
		GLDTL.PostPeriodCode,
		GLDTL.TransactionID,
		GLDTL.RowOrder

END

GO

GRANT EXECUTE ON [advsp_gl_detail_by_account_dataset_load] TO PUBLIC AS dbo
GO