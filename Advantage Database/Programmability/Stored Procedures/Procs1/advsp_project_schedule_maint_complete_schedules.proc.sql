/*****************************************************************************************************
If option "Mark schedule complete when the last task (and all others) is marked completed" is enabled:
This script will check for all open schedules that have all completed tasks and then mark the schedule completed using the last completed task's complete date.
******************************************************************************************************/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[advsp_project_schedule_maint_complete_schedules]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[advsp_project_schedule_maint_complete_schedules]
GO
CREATE PROCEDURE [dbo].[advsp_project_schedule_maint_complete_schedules] 
AS
BEGIN
	DECLARE
		@RUN BIT
	DECLARE
		@UPDATES TABLE (ID INT IDENTITY, JOB_NUMBER INT, JOB_COMPONENT_NBR SMALLINT)
	--	CHECK TO SEE IF FEATURE ENABLED
	BEGIN
		SELECT @RUN = CAST(COALESCE(A.AGY_SETTINGS_VALUE, A.AGY_SETTINGS_DEF, 0) AS BIT) FROM AGY_SETTINGS A WITH(NOLOCK) WHERE A.AGY_SETTINGS_CODE = 'TRF_CMPLT_ON_LAST';
	END
	IF @RUN IS NOT NULL AND @RUN = 1
	BEGIN
		--	VARIABLES
		BEGIN
			DECLARE
				@JOBS TABLE (ID INT IDENTITY, JOB_NUMBER INT, JOB_COMPONENT_NBR SMALLINT);
			DECLARE
				@JOB_CT INT,
				@CTR INT
		END
		--	INIT
		BEGIN
			SELECT
				@JOB_CT = 0,
				@CTR = 0;
		END
		--	GET SCHEDULES THAT ARE OPEN  WHERE THERE ARE NO OPEN TASKS (WHERE COMPLETED TASK COUNT EQUALS TOTAL TASK COUNT)
		BEGIN
			INSERT INTO @JOBS(JOB_NUMBER, JOB_COMPONENT_NBR)
			SELECT DISTINCT
				JT.JOB_NUMBER, JT.JOB_COMPONENT_NBR
			FROM
				(SELECT
					 JTD.JOB_NUMBER, JTD.JOB_COMPONENT_NBR, COUNT(1) AS COMPLETED_TASK_CT
				 FROM
					 JOB_TRAFFIC_DET JTD WITH(NOLOCK)
				 WHERE
					 JTD.JOB_COMPLETED_DATE IS NOT NULL
				 GROUP BY
					 JTD.JOB_NUMBER, JTD.JOB_COMPONENT_NBR
				) AS CMPLT
				INNER JOIN (SELECT
								JTD.JOB_NUMBER, JTD.JOB_COMPONENT_NBR, COUNT(1) AS ALL_TASK_CT
							FROM
								JOB_TRAFFIC_DET JTD WITH(NOLOCK)
							GROUP BY
								JTD.JOB_NUMBER, JTD.JOB_COMPONENT_NBR) AS ALL_TSK 
					ON CMPLT.JOB_NUMBER = ALL_TSK.JOB_NUMBER AND CMPLT.JOB_COMPONENT_NBR = ALL_TSK.JOB_COMPONENT_NBR
				INNER JOIN
					JOB_TRAFFIC JT WITH(NOLOCK)
						ON CMPLT.JOB_NUMBER = JT.JOB_NUMBER AND CMPLT.JOB_COMPONENT_NBR = JT.JOB_COMPONENT_NBR
			WHERE
				CMPLT.COMPLETED_TASK_CT = ALL_TSK.ALL_TASK_CT
				AND JT.COMPLETED_DATE IS NULL;
			SELECT
				@JOB_CT = COUNT(1) 
			FROM
				@JOBS;
		END
		--  IF THERE ARE JOBS THAT NEED FIXING
		IF @JOB_CT > 0
		BEGIN
			-- VARIABLES
			BEGIN
				DECLARE
					@CURR_JOB_NUMBER INT,
					@CURR_JOB_COMPONENT_NBR SMALLINT,
					@CURR_IS_OPEN BIT,
					@CURR_TOTAL_TASK_CT INT,
					@CURR_COMPLETED_TASK_CT INT,
					@MAX_COMPLETED_DATE SMALLDATETIME
			END
			--	FIX THE SCHEDULE
			WHILE @CTR < @JOB_CT
			BEGIN
				SET @CTR = @CTR + 1;
				SET @CURR_JOB_NUMBER = NULL;
				SET @CURR_JOB_COMPONENT_NBR = NULL;
				SET @CURR_IS_OPEN = 0;
				SET @CURR_TOTAL_TASK_CT = 0;
				SET @CURR_COMPLETED_TASK_CT = 0;
				SET @MAX_COMPLETED_DATE = NULL;
				SELECT
					@CURR_JOB_NUMBER = J.JOB_NUMBER,
					@CURR_JOB_COMPONENT_NBR = J.JOB_COMPONENT_NBR
				FROM
					@JOBS J
				WHERE
					J.ID = @CTR;
				IF @CURR_JOB_NUMBER IS NOT NULL AND @CURR_JOB_COMPONENT_NBR IS NOT NULL
				BEGIN
					--	VERFIY AGAIN JUST TO MAKE SURE
					IF EXISTS (SELECT 1 FROM JOB_TRAFFIC JT WITH(NOLOCK) WHERE JT.JOB_NUMBER = @CURR_JOB_NUMBER AND JT.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR AND JT.COMPLETED_DATE IS NULL)
					BEGIN
						SET @CURR_IS_OPEN = 1;
					END
					IF @CURR_IS_OPEN = 1
					BEGIN
						SELECT @CURR_TOTAL_TASK_CT = COUNT(1) FROM JOB_TRAFFIC_DET JTD WITH(NOLOCK) WHERE JTD.JOB_NUMBER = @CURR_JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR;
						SELECT @CURR_COMPLETED_TASK_CT = COUNT(1) FROM JOB_TRAFFIC_DET JTD WITH(NOLOCK) WHERE JTD.JOB_NUMBER = @CURR_JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR AND JTD.JOB_COMPLETED_DATE IS NOT NULL;
						IF @CURR_TOTAL_TASK_CT > 0 AND @CURR_TOTAL_TASK_CT = @CURR_COMPLETED_TASK_CT
						BEGIN -- IF RE-VERIFICATION NOT WANTED, JUST NEED WHAT IS IN THIS BLOCK
							SELECT
								@MAX_COMPLETED_DATE = MAX(JTD.JOB_COMPLETED_DATE)
							FROM 
								JOB_TRAFFIC_DET JTD WITH(NOLOCK) 
							WHERE 
								JTD.JOB_NUMBER = @CURR_JOB_NUMBER 
								AND JTD.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR 
								AND JTD.JOB_COMPLETED_DATE IS NOT NULL;
							IF @MAX_COMPLETED_DATE IS NOT NULL
							BEGIN
								UPDATE JOB_TRAFFIC WITH(ROWLOCK)
								SET COMPLETED_DATE = @MAX_COMPLETED_DATE
								WHERE
									JOB_TRAFFIC.JOB_NUMBER = @CURR_JOB_NUMBER
									AND JOB_TRAFFIC.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR
									AND JOB_TRAFFIC.COMPLETED_DATE IS NULL;
								INSERT INTO @UPDATES (JOB_NUMBER, JOB_COMPONENT_NBR)
								VALUES (@CURR_JOB_NUMBER, @CURR_JOB_COMPONENT_NBR);
							END	
						END
					END
				END
			END
		END	
	END
	--SELECT * FROM @UPDATES;
END