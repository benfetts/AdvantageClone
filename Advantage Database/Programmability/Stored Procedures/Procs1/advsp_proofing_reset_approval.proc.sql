IF EXISTS ( SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[advsp_proofing_reset_approval]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE [dbo].[advsp_proofing_reset_approval];
END
GO

CREATE PROCEDURE [dbo].[advsp_proofing_reset_approval] 
@USER_CODE VARCHAR(100),
@ALERT_ID INT,
@EMP_CODE VARCHAR(6) = NULL
AS
/*=========== QUERY ===========*/
BEGIN
	--	VARIABLES
	BEGIN
		DECLARE
			@IS_ROUTED BIT,
			@CURRENT_ALRT_NOTIFY_HDR INT,
			@CURRENT_ALERT_STATE_ID INT,
			@ROW_COUNT INT,
			@ROW_COUNTER INT,
			@USER_EMP_CODE VARCHAR(6),
			@USER_EMP_NAME VARCHAR(750),
			@MAX_DOCUMENT_ID INT,
			@RIGHT_NOW SMALLDATETIME,
			@COMMENT VARCHAR(MAX),
			@FILENAME VARCHAR(300)
		;
		DECLARE
			@ALERT_RCPT TABLE (ID INT IDENTITY,
							   ALERT_RCPT_ID INT,
							   EMP_CODE VARCHAR(6))
		;
		DECLARE
			@X_REVIEWER TABLE (ID INT IDENTITY,
							   PROOFING_EXTERNAL_REVIEWER_ID INT)
		;
	END
	--	INIT
	BEGIN
		SELECT @RIGHT_NOW = GETDATE();
		SELECT
			@CURRENT_ALRT_NOTIFY_HDR = A.ALRT_NOTIFY_HDR_ID,
			@CURRENT_ALERT_STATE_ID = A.ALERT_STATE_ID,
			@IS_ROUTED =	CASE
								WHEN A.ALRT_NOTIFY_HDR_ID IS NULL AND A.ALERT_STATE_ID IS NULL THEN 0
								ELSE 1
							END
		FROM
			ALERT A WITH(NOLOCK)
		WHERE
			A.ALERT_ID = @ALERT_ID
		;
		SELECT
			@MAX_DOCUMENT_ID = MAX(D.DOCUMENT_ID)
		FROM
			DOCUMENTS D WITH(NOLOCK) 
			INNER JOIN ALERT_ATTACHMENT AA WITH(NOLOCK) ON D.DOCUMENT_ID = AA.DOCUMENT_ID
		WHERE
			AA.ALERT_ID = @ALERT_ID
		;
		IF @MAX_DOCUMENT_ID IS NOT NULL
		BEGIN
			SELECT
				@FILENAME = D.[FILENAME]
			FROM
				DOCUMENTS D WITH(NOLOCK)
			WHERE
				D.DOCUMENT_ID = @MAX_DOCUMENT_ID
			;
		END
		IF @IS_ROUTED = 0
		BEGIN
			INSERT INTO @ALERT_RCPT(ALERT_RCPT_ID, EMP_CODE)
			SELECT
				ARD.ALERT_RCPT_ID, ARD.EMP_CODE
			FROM
				ALERT_RCPT_DISMISSED ARD WITH(NOLOCK)
			WHERE
				ARD.ALERT_ID = @ALERT_ID
				AND ARD.CURRENT_NOTIFY = 1
				AND ARD.PROOFING_STATUS_ID IS NOT NULL
				AND ARD.ALRT_NOTIFY_HDR_ID IS NULL
				AND ARD.ALERT_STATE_ID IS NULL
				AND 1 =	CASE
							WHEN @EMP_CODE IS NOT NULL AND DATALENGTH(@EMP_CODE) > 0 AND ARD.EMP_CODE = @EMP_CODE THEN 1
							WHEN @EMP_CODE IS NULL OR DATALENGTH(@EMP_CODE) = 0 THEN 1
						END
			;
		END
		ELSE
		BEGIN
			INSERT INTO @ALERT_RCPT(ALERT_RCPT_ID, EMP_CODE)
			SELECT
				ARD.ALERT_RCPT_ID, ARD.EMP_CODE
			FROM
				ALERT_RCPT_DISMISSED ARD WITH(NOLOCK)
			WHERE
				ARD.ALERT_ID = @ALERT_ID
				AND ARD.CURRENT_NOTIFY = 1
				AND ARD.PROOFING_STATUS_ID IS NOT NULL
				AND ARD.ALRT_NOTIFY_HDR_ID = @CURRENT_ALRT_NOTIFY_HDR
				AND ARD.ALERT_STATE_ID = @CURRENT_ALERT_STATE_ID
				AND 1 =	CASE
							WHEN @EMP_CODE IS NOT NULL AND DATALENGTH(@EMP_CODE) > 0 AND ARD.EMP_CODE = @EMP_CODE THEN 1
							WHEN @EMP_CODE IS NULL OR DATALENGTH(@EMP_CODE) = 0 THEN 1
						END
			;
		END
		SELECT @USER_EMP_CODE = (
			SELECT 
				TOP 1 SU.EMP_CODE
			FROM
				SEC_USER SU WITH(NOLOCK)
			WHERE
				SU.USER_CODE = @USER_CODE
		);
		SELECT
			@USER_EMP_NAME = ISNULL(E.EMP_FNAME + ' ', '') + ISNULL(E.EMP_MI + '. ', '') + E.EMP_LNAME
		FROM
			EMPLOYEE E WITH(NOLOCK)
		WHERE
			EMP_CODE = @USER_EMP_CODE
		;
	END
	--	RESET APPROVAL
	BEGIN
		SELECT @ROW_COUNT = COUNT(1) FROM @ALERT_RCPT;
		IF @ROW_COUNT > 0
		BEGIN
			DECLARE
				@THIS_EMP_CODE VARCHAR(6),				
				@MAX_RCPT_ID INT,
				@THIS_RCPT_ID INT
			;
			SELECT @ROW_COUNTER = 0;
			WHILE @ROW_COUNT > @ROW_COUNTER
			BEGIN				
				SELECT 
					@ROW_COUNTER = @ROW_COUNTER + 1,
					@THIS_RCPT_ID = NULL,
					@THIS_EMP_CODE = NULL
				;
				SELECT
					@THIS_RCPT_ID = AR.ALERT_RCPT_ID,
					@THIS_EMP_CODE = AR.EMP_CODE
				FROM
					@ALERT_RCPT AR
				WHERE
					AR.ID = @ROW_COUNTER
				;
				IF EXISTS (	SELECT 1 FROM ALERT_RCPT AR WITH(NOLOCK) 
							WHERE 
								AR.ALERT_ID = @ALERT_ID
								AND AR.EMP_CODE = @THIS_EMP_CODE 
								AND AR.CURRENT_NOTIFY = 1 
								AND AR.ALRT_NOTIFY_HDR_ID = @CURRENT_ALRT_NOTIFY_HDR 
								AND AR.ALERT_STATE_ID = @CURRENT_ALERT_STATE_ID)
				BEGIN
					-- IF IT EXISTS (IT SHOULDN'T) BUT JUST IN CASE, UPDATE STATUS JUST TO MAKE SURE!
					UPDATE ALERT_RCPT WITH(ROWLOCK) SET PROOFING_STATUS_ID = NULL
					WHERE 
						ALERT_ID = @ALERT_ID
						AND EMP_CODE = @THIS_EMP_CODE 
						AND CURRENT_NOTIFY = 1 
						AND ALRT_NOTIFY_HDR_ID = @CURRENT_ALRT_NOTIFY_HDR 
						AND ALERT_STATE_ID = @CURRENT_ALERT_STATE_ID
				END
				ELSE
				BEGIN
					SELECT @MAX_RCPT_ID = NULL;
					SELECT @MAX_RCPT_ID = MAX(ALERT_RCPT_ID) FROM ALERT_RCPT WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID;
					SELECT @MAX_RCPT_ID = ISNULL(@MAX_RCPT_ID, 0) + 1;
					INSERT INTO ALERT_RCPT WITH(ROWLOCK) (ALERT_ID,
						ALERT_RCPT_ID,
						EMP_CODE,
						EMAIL_ADDRESS,
						PROCESSED,
						NEW_ALERT,
						READ_ALERT,
						CURRENT_RCPT,
						CURRENT_NOTIFY,
						COMPLETED_DATE,
						HOURS_ALLOWED,
						PROOFING_STATUS_ID,
						ALRT_NOTIFY_HDR_ID,
						ALERT_STATE_ID
					)
					SELECT 
						ARD.ALERT_ID,
						@MAX_RCPT_ID,
						ARD.EMP_CODE,
						ARD.EMAIL_ADDRESS,
						NULL,
						1,
						NULL,
						ARD.CURRENT_RCPT,
						ARD.CURRENT_NOTIFY,
						NULL,
						COALESCE(ARD.HOURS_ALLOWED, A.HRS_ALLOWED),
						NULL,
						@CURRENT_ALRT_NOTIFY_HDR,
						@CURRENT_ALERT_STATE_ID
					FROM 
						ALERT_RCPT_DISMISSED ARD WITH(NOLOCK)
						INNER JOIN ALERT A WITH(NOLOCK) ON ARD.ALERT_ID = A.ALERT_ID
					WHERE 
						ARD.ALERT_ID = @ALERT_ID
						AND ARD.ALERT_RCPT_ID = @THIS_RCPT_ID
						AND ARD.EMP_CODE = @THIS_EMP_CODE
						AND ARD.CURRENT_NOTIFY = 1
					;
				END
				BEGIN
					DELETE FROM ALERT_RCPT_DISMISSED WITH(ROWLOCK)
					WHERE
						ALERT_ID = @ALERT_ID
						AND ALERT_RCPT_ID = @THIS_RCPT_ID
						AND EMP_CODE = @THIS_EMP_CODE
						AND CURRENT_NOTIFY = 1
					;
				END
			END
		END
	END
	--	RESET EXTERNAL REVIEWERS
	BEGIN
		SELECT
			@ROW_COUNT = 0,
			@ROW_COUNTER = 0;
		INSERT INTO @X_REVIEWER (PROOFING_EXTERNAL_REVIEWER_ID)
		SELECT
			X.PROOFING_EXTERNAL_REVIEWER_ID
		FROM
			ALERT_RCPT_X_REVIEWER_DISMISSED X WITH(NOLOCK)
		WHERE
			X.ALERT_ID = @ALERT_ID
		;
		SELECT @ROW_COUNT = COUNT(1) FROM @X_REVIEWER X;
		IF @ROW_COUNT > 0
		BEGIN
			DECLARE
				@THIS_X_REVIEWER_ID INT
			;
			WHILE @ROW_COUNT > @ROW_COUNTER
			BEGIN
				SELECT
					@ROW_COUNTER = @ROW_COUNTER + 1,
					@THIS_X_REVIEWER_ID = NULL
				;
				SELECT
					@THIS_X_REVIEWER_ID = X.PROOFING_EXTERNAL_REVIEWER_ID
				FROM
					@X_REVIEWER X
				WHERE
					X.ID = @ROW_COUNTER
				;
				IF @THIS_X_REVIEWER_ID IS NOT NULL
				BEGIN
					-- JUST IN CASE
					IF EXISTS (SELECT 1 FROM ALERT_RCPT_X_REVIEWER XR WITH(NOLOCK) WHERE XR.ALERT_ID = @ALERT_ID AND XR.PROOFING_EXTERNAL_REVIEWER_ID = @THIS_X_REVIEWER_ID)
					BEGIN
						UPDATE ALERT_RCPT_X_REVIEWER WITH(ROWLOCK) SET PROOFING_STATUS_ID = NULL, IS_READ = NULL
						WHERE
							ALERT_ID = @ALERT_ID
							AND PROOFING_EXTERNAL_REVIEWER_ID = @THIS_X_REVIEWER_ID
						;
					END
					ELSE
					BEGIN
						INSERT INTO ALERT_RCPT_X_REVIEWER WITH(ROWLOCK) (	ALERT_ID, 
																			PROOFING_EXTERNAL_REVIEWER_ID, 
																			PROOFING_STATUS_ID, 
																			IS_READ)
						VALUES  (	@ALERT_ID, 
									@THIS_X_REVIEWER_ID, 
									NULL, 
									NULL);
					END
					BEGIN
						DELETE FROM ALERT_RCPT_X_REVIEWER_DISMISSED WITH(ROWLOCK) 
						WHERE 
							ALERT_ID = @ALERT_ID 
							AND PROOFING_EXTERNAL_REVIEWER_ID = @THIS_X_REVIEWER_ID;
					END
				END
			END
		END
	END
    --  RE-OPEN ASSIGNMENT REC
    BEGIN
        UPDATE ALERT WITH(ROWLOCK) SET ASSIGN_COMPLETED = NULL 
        WHERE 
            ALERT_ID = @ALERT_ID;
		EXEC [dbo].[advsp_proofing_add_upload_comment] @USER_CODE, @ALERT_ID, @MAX_DOCUMENT_ID;
    END
END
/*=========== QUERY ===========*/
