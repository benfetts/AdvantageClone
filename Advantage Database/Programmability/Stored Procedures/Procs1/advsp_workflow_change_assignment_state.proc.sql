--CLEAN UP
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_WORKFLOW_CHANGE_ASSIGNMENT_STATE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[usp_wv_WORKFLOW_CHANGE_ASSIGNMENT_STATE]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[advsp_workflow_change_assignment_state]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[advsp_workflow_change_assignment_state]
GO

CREATE PROCEDURE [dbo].[advsp_workflow_change_assignment_state] /*WITH ENCRYPTION*/
@USER_CODE VARCHAR(100),
@ALLOW_DEMOTION BIT,
@WORKFLOW_EVENT_ID INT,
@JOB_NUMBER INT,
@JOB_COMPONENT_NBR SMALLINT,
@OFFICE_CODE VARCHAR(4),
@CL_CODE VARCHAR(6),
@DIV_CODE VARCHAR(6),
@PRD_CODE VARCHAR(6),
@CMP_CODE VARCHAR(6),
@ESTIMATE_NUMBER INT,
@EST_COMPONENT_NBR SMALLINT,
@EST_QUOTE_NBR SMALLINT,
@ESTIMATE_REV_NBR SMALLINT,
@VN_CODE VARCHAR(6),
@EMP_CODE VARCHAR(6),
@PO_NUMBER INT,
@PO_REVISION SMALLINT,
@ORDER_NBR INT,
@REV_NBR SMALLINT,
@CMP_IDENTIFIER INT,
@BA_BATCH_ID INT,
@TASK_SEQ_NBR SMALLINT,
@ALERT_STATE_ID INT,
@ALRT_NOTIFY_HDR_ID INT,
@VER VARCHAR(10),
@BUILD VARCHAR(10),
@VER2 VARCHAR(10),
@BUILD2 VARCHAR(10),
@NON_TASK_ID INT,
@AP_ID INT,
@AP_SEQ SMALLINT,
@ATB_REV_ID INT,
@ATB_NUMBER INT,
@ATB_REV_NBR INT
AS
/*=========== QUERY ===========*/
	CREATE TABLE #WORKFLOW_TEMPLATES (
		ID INT IDENTITY(1,1) NOT NULL, 
		WORKFLOW_ALERT_STATE_ID INT NOT NULL, 
		CHANGE_ALL_STATES_IN_TEMPLATE BIT NULL
	);

	CREATE TABLE #ALERTS (
		ALERT_ID INT,
		CURR_ALRT_NOTIFY_HDR_ID INT,
		CURR_ALERT_STATE INT,
		NEW_ALERT_STATE INT,
		NEW_DFLT_EMP_CODE VARCHAR(50),
		NEW_STATE_IS_UNASSIGNED BIT,
		CURR_STATE_ORDER INT,
		NEW_STATE_ORDER INT,
		CURRENT_ASSIGNED_EMP VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		CHANGE_ALL_STATES_IN_TEMPLATE BIT
	);

	INSERT INTO #WORKFLOW_TEMPLATES (WORKFLOW_ALERT_STATE_ID, CHANGE_ALL_STATES_IN_TEMPLATE)
	SELECT WORKFLOW_ALERT_STATE_ID, ISNULL(CHANGE_ALL_STATES_IN_TEMPLATE, 0) FROM WORKFLOW_ALERT_STATE WITH(NOLOCK)
	WHERE WORKFLOW_ID = @WORKFLOW_EVENT_ID;

	DECLARE
		@CTR INT,
		@MAX INT

	SELECT @MAX = COUNT(1) FROM #WORKFLOW_TEMPLATES;
	SET @CTR = 1;

	IF (@MAX > 0)
	BEGIN

		DECLARE
		@CURR_WORKFLOW_ALERT_STATE_ID INT,
		@CURR_CHANGE_ALL_STATES_IN_TEMPLATE INT,
		@KEEP_CURRENT_EMPLOYEE BIT,
		@SQL VARCHAR(MAX)

		--	GET SETTING
		SELECT @KEEP_CURRENT_EMPLOYEE = CONVERT(BIT, ISNULL(AGY_SETTINGS.AGY_SETTINGS_VALUE, AGY_SETTINGS.AGY_SETTINGS_DEF)) 
		FROM AGY_SETTINGS WITH(NOLOCK) 
		WHERE AGY_SETTINGS.AGY_SETTINGS_CODE = 'AUTO_ASSGN_KEEP_EMP';

																																																																																																																																																																								WHILE (@CTR <= @MAX)
	BEGIN

		SET @SQL = '';

		SELECT @CURR_WORKFLOW_ALERT_STATE_ID = WT.WORKFLOW_ALERT_STATE_ID,  @CURR_CHANGE_ALL_STATES_IN_TEMPLATE = WT.CHANGE_ALL_STATES_IN_TEMPLATE 
		FROM #WORKFLOW_TEMPLATES AS WT
		WHERE ID = @CTR;

		--SELECT @CURR_WORKFLOW_ALERT_STATE_ID, @CURR_CHANGE_ALL_STATES_IN_TEMPLATE;
		SET @SQL = '
			INSERT INTO #ALERTS (
				ALERT_ID,
				CURR_ALRT_NOTIFY_HDR_ID,
				CURR_ALERT_STATE,
				NEW_ALERT_STATE,
				NEW_DFLT_EMP_CODE,
				NEW_STATE_IS_UNASSIGNED,
				CURR_STATE_ORDER,
				NEW_STATE_ORDER,
				CURRENT_ASSIGNED_EMP,
				CHANGE_ALL_STATES_IN_TEMPLATE
				)
			SELECT DISTINCT 
				ALERT.ALERT_ID, 
				ALERT.ALRT_NOTIFY_HDR_ID, 
				ALERT.ALERT_STATE_ID, 
				WORKFLOW_ALERT_STATE.END_STATE_ID, 
				NULL, 
				NULL, 
				NULL, 
				ISNULL(ALERT_NOTIFY_STATES.SORT_ORDER, 9999), 
				NULL,
				WORKFLOW_ALERT_STATE.CHANGE_ALL_STATES_IN_TEMPLATE
			FROM            
				ALERT WITH (NOLOCK) INNER JOIN
				WORKFLOW_ALERT_STATE WITH (NOLOCK) ON ALERT.ALRT_NOTIFY_HDR_ID = WORKFLOW_ALERT_STATE.ALRT_NOTIFY_HDR_ID '

		IF (@CURR_CHANGE_ALL_STATES_IN_TEMPLATE = 0)
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ALERT_STATE_ID = WORKFLOW_ALERT_STATE.ALERT_STATE_ID '
		END

		SET @SQL = @SQL + '
				INNER JOIN ALERT_NOTIFY_STATES WITH (NOLOCK) ON WORKFLOW_ALERT_STATE.END_ALRT_NOTIFY_HDR_ID = ALERT_NOTIFY_STATES.ALRT_NOTIFY_HDR_ID 
				AND WORKFLOW_ALERT_STATE.END_STATE_ID = ALERT_NOTIFY_STATES.ALERT_STATE_ID
			WHERE     
				(WORKFLOW_ALERT_STATE.WORKFLOW_ALERT_STATE_ID = ' + CAST(@CURR_WORKFLOW_ALERT_STATE_ID AS VARCHAR) + ') '

		IF (NOT @ALRT_NOTIFY_HDR_ID IS NULL) AND @ALRT_NOTIFY_HDR_ID > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ALRT_NOTIFY_HDR_ID = ' + CAST(@ALRT_NOTIFY_HDR_ID AS VARCHAR);
		END
		IF (NOT @ALERT_STATE_ID IS NULL) AND @ALERT_STATE_ID > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ALERT_STATE_ID = ' + CAST(@ALERT_STATE_ID AS VARCHAR);
		END
		IF (NOT @JOB_NUMBER IS NULL) AND @JOB_NUMBER > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.JOB_NUMBER = ' + CAST(@JOB_NUMBER AS VARCHAR);
		END
		IF (NOT @JOB_COMPONENT_NBR IS NULL) AND @JOB_COMPONENT_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.JOB_COMPONENT_NBR = ' + CAST(@JOB_COMPONENT_NBR AS VARCHAR);
		END
		IF (NOT @OFFICE_CODE IS NULL) AND @OFFICE_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.OFFICE_CODE = ''' + @OFFICE_CODE + '''';
		END
		IF (NOT @CL_CODE IS NULL) AND @CL_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.CL_CODE = ''' + @CL_CODE + '''';
		END
		IF (NOT @DIV_CODE IS NULL) AND @DIV_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.DIV_CODE = ''' + @DIV_CODE + '''';
		END
		IF (NOT @PRD_CODE IS NULL) AND @PRD_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.PRD_CODE = ''' + @PRD_CODE + '''';
		END
		IF (NOT @CMP_CODE IS NULL) AND @CMP_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.CMP_CODE = ''' + @CMP_CODE + '''';
		END
		IF (NOT @ESTIMATE_NUMBER IS NULL) AND @ESTIMATE_NUMBER > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ESTIMATE_NUMBER = ' + CAST(@ESTIMATE_NUMBER AS VARCHAR);
		END
		IF (NOT @EST_COMPONENT_NBR IS NULL) AND @EST_COMPONENT_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.EST_COMPONENT_NBR = ' + CAST(@EST_COMPONENT_NBR AS VARCHAR);
		END
		IF (NOT @EST_QUOTE_NBR IS NULL) AND @EST_QUOTE_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.EST_QUOTE_NBR = ' + CAST(@EST_QUOTE_NBR AS VARCHAR);
		END
		IF (NOT @ESTIMATE_REV_NBR IS NULL) AND @ESTIMATE_REV_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ESTIMATE_REV_NBR = ' + CAST(@ESTIMATE_REV_NBR AS VARCHAR);
		END
		IF (NOT @VN_CODE IS NULL) AND @VN_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.VN_CODE = ''' + @VN_CODE + '''';
		END
		IF (NOT @EMP_CODE IS NULL) AND @EMP_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.EMP_CODE = ''' + @EMP_CODE + '''';
		END
		IF (NOT @PO_NUMBER IS NULL) AND @PO_NUMBER > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.PO_NUMBER = ' + CAST(@PO_NUMBER AS VARCHAR);
		END
		IF (NOT @PO_REVISION IS NULL) AND @PO_REVISION > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.PO_REVISION = ' + CAST(@PO_REVISION AS VARCHAR);
		END
		IF (NOT @ORDER_NBR IS NULL) AND @ORDER_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ORDER_NBR = ' + CAST(@ORDER_NBR AS VARCHAR);
		END
		IF (NOT @REV_NBR IS NULL) AND @REV_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.REV_NBR = ' + CAST(@REV_NBR AS VARCHAR);
		END
		IF (NOT @CMP_IDENTIFIER IS NULL) AND @CMP_IDENTIFIER > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.CMP_IDENTIFIER = ' + CAST(@CMP_IDENTIFIER AS VARCHAR);
		END
		IF (NOT @BA_BATCH_ID IS NULL) AND @BA_BATCH_ID > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.BA_BATCH_ID = ' + CAST(@BA_BATCH_ID AS VARCHAR);
		END
		IF (NOT @TASK_SEQ_NBR IS NULL) AND @TASK_SEQ_NBR > -1 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.TASK_SEQ_NBR = ' + CAST(@TASK_SEQ_NBR AS VARCHAR);
		END
		IF (NOT @VER IS NULL) AND @VER <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.VER = ''' + @VER + '''';
		END
		IF (NOT @BUILD IS NULL) AND @BUILD <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.BUILD = ''' + @BUILD + '''';
		END
		IF (NOT @VER2 IS NULL) AND @VER2 <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.VER2 = ''' + @VER2 + '''';
		END
		IF (NOT @BUILD2 IS NULL) AND @BUILD2 <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.BUILD2 = ''' + @BUILD2 + '''';
		END
		IF (NOT @NON_TASK_ID IS NULL) AND @NON_TASK_ID > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.NON_TASK_ID = ' + CAST(@NON_TASK_ID AS VARCHAR);
		END
		IF (NOT @AP_ID IS NULL) AND @AP_ID > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.AP_ID = ' + CAST(@AP_ID AS VARCHAR);
		END
		IF (NOT @AP_SEQ IS NULL) AND @AP_SEQ > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.AP_SEQ = ' + CAST(@AP_SEQ AS VARCHAR);
		END
		IF (NOT @ATB_REV_ID IS NULL) AND @ATB_REV_ID > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ATB_REV_ID = ' + CAST(@ATB_REV_ID AS VARCHAR);
		END

		--PRINT @SQL;
		EXEC (@SQL);

		SET @CTR = @CTR + 1;

	END
	
		-- REMOVE COMPLETED ASSIGNMENTS
		DELETE FROM #ALERTS 
		WHERE #ALERTS.ALERT_ID IN (SELECT ALERT_RCPT_DISMISSED.ALERT_ID 
								   FROM #ALERTS INNER JOIN ALERT_RCPT_DISMISSED ON #ALERTS.ALERT_ID = ALERT_RCPT_DISMISSED.ALERT_ID 
								   WHERE ALERT_RCPT_DISMISSED.CURRENT_NOTIFY = 1);
	

		IF @KEEP_CURRENT_EMPLOYEE = 1
		BEGIN	
			-- GET CURRENT EMPLOYEE (NOT DISMISSED)
			UPDATE 
				#ALERTS SET #ALERTS.CURRENT_ASSIGNED_EMP = ALERT_RCPT.EMP_CODE
			FROM
				#ALERTS INNER JOIN ALERT_RCPT WITH(NOLOCK) ON
				#ALERTS.ALERT_ID = ALERT_RCPT.ALERT_ID
			WHERE
				ALERT_RCPT.CURRENT_NOTIFY = 1;
		END

		-- GET CURRENT STATE ORDER TO USE WITH ALLOW DEMOTION FLAG
		UPDATE 
			#ALERTS SET #ALERTS.CURR_STATE_ORDER = ALERT_NOTIFY_STATES.SORT_ORDER
		FROM
			#ALERTS INNER JOIN ALERT_NOTIFY_STATES WITH(NOLOCK) ON
			#ALERTS.CURR_ALRT_NOTIFY_HDR_ID = ALERT_NOTIFY_STATES.ALRT_NOTIFY_HDR_ID
			AND #ALERTS.CURR_ALERT_STATE = ALERT_NOTIFY_STATES.ALERT_STATE_ID

		-- GET NEW WORKFLOW STATE
		UPDATE	
			#ALERTS SET #ALERTS.NEW_ALERT_STATE = WORKFLOW_ALERT_STATE.END_STATE_ID
		FROM 
			#ALERTS INNER JOIN WORKFLOW_ALERT_STATE WITH(NOLOCK) ON 
			#ALERTS.CURR_ALRT_NOTIFY_HDR_ID = WORKFLOW_ALERT_STATE.ALRT_NOTIFY_HDR_ID  
			AND #ALERTS.CURR_ALERT_STATE = WORKFLOW_ALERT_STATE.ALERT_STATE_ID
		WHERE
			WORKFLOW_ALERT_STATE.WORKFLOW_ID = @WORKFLOW_EVENT_ID;
		
		-- DON'T INCLUDE IF NO NEW STATE
		DELETE FROM #ALERTS WHERE #ALERTS.NEW_ALERT_STATE IS NULL;

		-- UPDATE INFO
		UPDATE #ALERTS 
		SET #ALERTS.NEW_DFLT_EMP_CODE = 
			CASE
				WHEN @KEEP_CURRENT_EMPLOYEE = 0 THEN ALERT_NOTIFY_STATES.DFLT_EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS
				WHEN @KEEP_CURRENT_EMPLOYEE = 1 THEN #ALERTS.CURRENT_ASSIGNED_EMP
			END,
			#ALERTS.NEW_STATE_ORDER = ISNULL(ALERT_NOTIFY_STATES.SORT_ORDER ,9999)
		FROM 
			#ALERTS INNER JOIN ALERT_NOTIFY_STATES WITH(NOLOCK) ON #ALERTS.CURR_ALRT_NOTIFY_HDR_ID = ALERT_NOTIFY_STATES.ALRT_NOTIFY_HDR_ID  
			AND #ALERTS.NEW_ALERT_STATE = ALERT_NOTIFY_STATES.ALERT_STATE_ID;		

		-- SET NEW_STATE_IS_UNASSIGNED
		UPDATE #ALERTS 
		SET #ALERTS.NEW_STATE_IS_UNASSIGNED = 
			CASE
				WHEN #ALERTS.NEW_DFLT_EMP_CODE IS NULL THEN 1
				ELSE 0	
			END
			
		--  DON'T ALLOW ASSIGNMENT STATES TO BE DEMOTED TO LOWER STATE
		IF @ALLOW_DEMOTION = 0	
		BEGIN
			DELETE FROM #ALERTS WHERE #ALERTS.CURR_STATE_ORDER >= #ALERTS.NEW_STATE_ORDER;
		END

	END

	SELECT 
		#ALERTS.ALERT_ID AS AlertID,
		#ALERTS.CURR_ALRT_NOTIFY_HDR_ID AS CurrentAlertTemplateID,
		#ALERTS.CURR_ALERT_STATE AS CurrentAlertStateID,
		#ALERTS.NEW_ALERT_STATE AS NewAlertStateID,
		ISNULL(#ALERTS.NEW_DFLT_EMP_CODE,'unassigned') AS NewDefaultEmployeeCode,
		#ALERTS.NEW_STATE_IS_UNASSIGNED AS NewStateIsUnassigned,
		ISNULL(#ALERTS.CURR_STATE_ORDER, 0) AS CurrentStateOrder,
		#ALERTS.NEW_STATE_ORDER AS NewStateOrder
	FROM #ALERTS;	
			
	DROP TABLE #WORKFLOW_TEMPLATES;
	DROP TABLE #ALERTS;  
/*=========== QUERY ===========*/
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO