SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_cp_dto_project_view]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_cp_dto_project_view]
GO


CREATE PROCEDURE [dbo].[usp_cp_dto_project_view] 
@AE 			char(1),	--> Y/N
@cdp_selection char(1),		--> 0-none; 1-c; 2-c/d; 3-c/d/p; 4-campaign
@start_date	varchar(12),
@end_date	varchar(12),
@closed_jobs	char(1),	--> Y/N
@UserID 	varchar(100),
@EmpCode	varchar(6),
@myProjects	char(1),		--> Y/N
@CPID int,
@EXCLUDE_JOBS_WITH_COMPLETED_SCHEDULES BIT
AS

/*=========== QUERY ===========*/
	SET @EXCLUDE_JOBS_WITH_COMPLETED_SCHEDULES = ISNULL(@EXCLUDE_JOBS_WITH_COMPLETED_SCHEDULES, 0);

DECLARE @sql varchar(MAX)
DECLARE @sql_from varchar(MAX)
DECLARE @sql_where varchar(MAX)
DECLARE @sql_group varchar(MAX)
DECLARE @EMP_CODE AS VARCHAR(6)
DECLARE @COUNT AS INTEGER

--SELECT @EMP_CODE = EMP_CODE FROM SEC_USER WHERE UPPER(USER_CODE) = UPPER(@UserID)
--SELECT @COUNT = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CODE

Declare @Restrictions Int
Select @Restrictions = Count(*) 
FROM CP_SEC_CLIENT
WHERE CDP_CONTACT_ID = @CPID

DECLARE 
		@TIME_ONLY BIT, 
		@THRESHOLD DECIMAL (9,3), 
		@QVA_STATUS SMALLINT

		IF (SELECT UPPER(VARIABLE_VALUE) FROM APP_VARS WHERE UPPER(USERID) = UPPER(@UserID) AND [APPLICATION] = 'PROJECTVIEWPOINT' AND VARIABLE_NAME = 'PVQvAType') = 'TRUE'
		BEGIN
			SET @TIME_ONLY = 1;
		END
		ELSE
		BEGIN
			SET @TIME_ONLY = 0;
		END
		SELECT @THRESHOLD = (CAST(ISNULL(VARIABLE_VALUE, '0') AS decimal)/100) FROM APP_VARS WHERE UPPER(USERID) = UPPER(@UserID) AND [APPLICATION] = 'PROJECTVIEWPOINT' AND VARIABLE_NAME = 'PVQvAThreshold';


-- Gather Office filter data
--Declare @OfficeCount Integer
--Declare @OfficeCode Varchar(4)
--SELECT @OfficeCount = Count(*) 
--FROM APP_VARS 
--WHERE UPPER(USERID) = UPPER(@UserID) 
--AND APPLICATION = 'PROJECTVIEWPOINT'
--AND VARIABLE_GROUP = 'OFFICE'

--If @OfficeCount = 1
--	SELECT @OfficeCode = VARIABLE_VALUE 
--	FROM APP_VARS 
--	WHERE UPPER(USERID) = UPPER(@UserID) 
--	AND APPLICATION = 'PROJECTVIEWPOINT'
--	AND VARIABLE_GROUP = 'OFFICE'
	
--If @OfficeCode = 'ALL'
--	Set @OfficeCount = 0

--If @OfficeCount > 0 
-- Begin
--	CREATE TABLE #OFFICE( 	
--		OFFICE_CODE			varchar(4)  COLLATE SQL_Latin1_General_CP1_CS_AS NULL)
	
--	INSERT INTO #OFFICE
--	SELECT ISNULL(VARIABLE_VALUE,'') 
--	FROM APP_VARS 
--	WHERE UPPER(USERID) = UPPER(@UserID) 
--	AND APPLICATION = 'PROJECTVIEWPOINT'
--	AND VARIABLE_GROUP = 'OFFICE'	
-- End
 
---- Gather Sales Class filter data
--Declare @SCCount Integer
--Declare @SCCode Varchar(4)
--SELECT @SCCount = Count(*) 
--FROM APP_VARS 
--WHERE UPPER(USERID) = UPPER(@UserID) 
--AND APPLICATION = 'PROJECTVIEWPOINT'
--AND VARIABLE_GROUP = 'SC'

--If @SCCount = 1
--	SELECT @SCCode = VARIABLE_VALUE 
--	FROM APP_VARS 
--	WHERE UPPER(USERID) = UPPER(@UserID) 
--	AND APPLICATION = 'PROJECTVIEWPOINT'
--	AND VARIABLE_GROUP = 'SC'
	
--If @SCCode = 'ALL'
--	Set @SCCount = 0

--If @SCCount > 0 
-- Begin
--	CREATE TABLE #SC( 	
--		SC_CODE			varchar(6)  COLLATE SQL_Latin1_General_CP1_CS_AS NULL)
	
--	INSERT INTO #SC
--	SELECT ISNULL(VARIABLE_VALUE,'') 
--	FROM APP_VARS 
--	WHERE UPPER(USERID) = UPPER(@UserID) 
--	AND APPLICATION = 'PROJECTVIEWPOINT'
--	AND VARIABLE_GROUP = 'SC'	
-- End

CREATE TABLE #PV_QUERY(	
					[CL_CODE] [varchar](6) NULL,
					[DIV_CODE] [varchar](6) NULL,
					[PRD_CODE] [varchar](6) NULL,
					[JOB_NUMBER] [int] NULL,
					[JOB_DESC] [varchar](60) NULL,
					[JOB_COMPONENT_NBR] [smallint] NULL,
					[JOB_COMP_DESC] [varchar](60) NULL,
					[EMP_CODE] [varchar](6) NULL,
					[JOB_COMP_DATE] [smalldatetime] NULL,
					[JOB_PROCESS_CONTRL] [smallint] NULL,
					[PROCESS_DATE] [smalldatetime] NULL,
					[JOB_FIRST_USE_DATE] [smalldatetime] NULL,
					[COMPLETED_DATE] [smalldatetime] NULL,
					[CDP] [VARCHAR] (30) NULL,
					[JobAndComp] VARCHAR (200) NULL,
					[AcctExec] VARCHAR (300) NULL,
					[Status] VARCHAR(200) NULL,
					JC_START_DATE SMALLDATETIME NULL,
					OPEN_ASSIGNMENTS INT NULL,
					OPEN_TASKS INT NULL,
					QUOTED_AMT DECIMAL(14,3) NULL,
					ACTUAL_AMT DECIMAL(14,3) NULL,
					THRESHOLD DECIMAL(14,3) NULL,
					THRESHOLD_STATUS SMALLINT NULL,
					ESTIMATE_NUMBER INT NULL,
					HAS_JOB_VERSIONS BIT NULL,
					JOB_VERSIONS_LABEL VARCHAR(50) NULL,
					ID INT IDENTITY(1,1) NOT NULL
					)

SET @sql = 'INSERT INTO #PV_QUERY '

	SET @sql = @sql + 'SELECT A.*, 0, 0, 0, 0, 0, 0, ''Versions'' FROM ('

	SET @sql = @sql + 'SELECT JL.CL_CODE, JL.DIV_CODE, JL.PRD_CODE, JL.JOB_NUMBER, JL.JOB_DESC, JC.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, 
						JC.EMP_CODE, JC.JOB_COMP_DATE, JC.JOB_PROCESS_CONTRL, MAX(JPL.PROCESS_DATE) AS PROCESS_DATE, JC.JOB_FIRST_USE_DATE, JT.COMPLETED_DATE, 
						JL.CL_CODE + ''/'' + JL.DIV_CODE + ''/'' + JL.PRD_CODE as CDP,
						( RIGHT(REPLICATE(''0'', 6) + CONVERT(VARCHAR(20), JL.JOB_NUMBER),6) + ''/'' + RIGHT(REPLICATE(''0'', 2) + CONVERT(VARCHAR(20), JC.JOB_COMPONENT_NBR),2) + '' - '' + JC.JOB_COMP_DESC ) as JobAndComp,
						ISNULL(dbo.udf_get_empl_name(JC.EMP_CODE,''FML''),'''') as AcctExec, 
						TRAFFIC.TRF_DESCRIPTION AS Status, JC.START_DATE AS JC_START_DATE,
						dbo.wvfn_open_assignment_count(JL.JOB_NUMBER, JC.JOB_COMPONENT_NBR) AS OPEN_ASSIGNMENTS, 
						dbo.wvfn_open_task_count(JL.JOB_NUMBER, JC.JOB_COMPONENT_NBR, 1) AS OPEN_TASKS '

	SET @sql_from = ' 

			FROM         JOB_TRAFFIC AS JT WITH(NOLOCK) LEFT OUTER JOIN
								  TRAFFIC WITH(NOLOCK) ON JT.TRF_CODE = TRAFFIC.TRF_CODE FULL OUTER JOIN
								  JOB_COMPONENT AS JC WITH(NOLOCK) INNER JOIN
								  JOB_LOG AS JL WITH(NOLOCK) ON JL.JOB_NUMBER = JC.JOB_NUMBER LEFT OUTER JOIN
								  JOB_PROCESS_LOG AS JPL WITH(NOLOCK) ON JC.JOB_NUMBER = JPL.JOB_NUMBER AND JC.JOB_COMPONENT_NBR = JPL.JOB_COMPONENT_NBR ON 
								  JT.JOB_NUMBER = JC.JOB_NUMBER AND JT.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR	
		'

	SET @sql_where = ' WHERE 1 = 1 '		
  	
If @Restrictions > 0 
	Begin
		Set @sql_from = @sql_from + ' INNER JOIN CP_SEC_CLIENT ON JL.CL_CODE = CP_SEC_CLIENT.CL_CODE 
		    AND JL.DIV_CODE = CP_SEC_CLIENT.DIV_CODE 
		    AND JL.PRD_CODE = CP_SEC_CLIENT.PRD_CODE '
		    
		Set @sql_where = @sql_where +  ' And CP_SEC_CLIENT.CDP_CONTACT_ID = ''' + CAST(@CPID AS VARCHAR(6)) + ''''
	End


If @closed_jobs <> 'Y' 
   Set @sql_where = @sql_where + ' And JC.JOB_PROCESS_CONTRL NOT IN (6, 12)'
    
IF @EXCLUDE_JOBS_WITH_COMPLETED_SCHEDULES = 1
	 BEGIN
		SET @sql_where = @sql_where + ' AND (JT.COMPLETED_DATE IS NULL) '
	 END

 Set @sql_group = ' GROUP BY JL.CL_CODE, JL.DIV_CODE, JL.PRD_CODE, JL.JOB_NUMBER, JL.JOB_DESC, JC.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, JC.EMP_CODE, JC.JOB_COMP_DATE, JC.JOB_PROCESS_CONTRL,JC.JOB_FIRST_USE_DATE, JT.COMPLETED_DATE,TRAFFIC.TRF_DESCRIPTION,JC.START_DATE'


Set @sql = @sql + @sql_from + @sql_where + @sql_group
SET @sql = @sql + ') AS A'
SET @sql = @sql + ' ORDER BY A.CL_CODE ASC, A.DIV_CODE ASC, A.PRD_CODE ASC, A.JOB_NUMBER DESC, A.JOB_COMPONENT_NBR ASC';

EXEC(@sql)
print(@sql)

DECLARE @REC_COUNTER INT, @REC_COUNT INT;

	SET @REC_COUNTER = 0;
	SELECT @REC_COUNT = COUNT(1) FROM #PV_QUERY;

	DECLARE 
		@CURR_JOB_NUMBER INT, 
		@CURR_JOB_COMPONENT_NBR SMALLINT, 
		@TIME_ONLY_CHAR CHAR(1), 
		@CURR_AMT DECIMAL(14,3),
		@CURR_QUOTED DECIMAL(14,3);

	IF @TIME_ONLY = 1
	BEGIN
		SET @TIME_ONLY_CHAR = 'E';
	END

	WHILE @REC_COUNTER < @REC_COUNT
	BEGIN

		SELECT @REC_COUNTER = @REC_COUNTER + 1;
		SELECT @CURR_JOB_NUMBER = JOB_NUMBER, @CURR_JOB_COMPONENT_NBR = JOB_COMPONENT_NBR FROM #PV_QUERY WHERE ID = @REC_COUNTER;

		SET @CURR_AMT = 0.00;
		EXEC @CURR_AMT = usp_wv_PVqva @CURR_JOB_NUMBER, @CURR_JOB_COMPONENT_NBR, @TIME_ONLY_CHAR, @UserID;
		UPDATE #PV_QUERY SET ACTUAL_AMT = @CURR_AMT WHERE JOB_NUMBER = @CURR_JOB_NUMBER AND JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR;

		SET @CURR_QUOTED = 0.00;
		IF @TIME_ONLY = 1
		BEGIN
			SELECT  @CURR_QUOTED = ISNULL(Sum(ESTIMATE_REV_DET.LINE_TOTAL), 0.00)
			FROM ESTIMATE_REV_DET 
			INNER JOIN ESTIMATE_APPROVAL ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = ESTIMATE_APPROVAL.ESTIMATE_NUMBER 
			  AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = ESTIMATE_APPROVAL.EST_COMPONENT_NBR 
			  AND ESTIMATE_REV_DET.EST_QUOTE_NBR = ESTIMATE_APPROVAL.EST_QUOTE_NBR 
			  AND ESTIMATE_REV_DET.EST_REV_NBR = ESTIMATE_APPROVAL.EST_REVISION_NBR 
			INNER JOIN JOB_LOG ON ESTIMATE_APPROVAL.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
			INNER JOIN JOB_COMPONENT ON ESTIMATE_APPROVAL.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER 
			  AND ESTIMATE_APPROVAL.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR 
			Where (NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12)))
			And ESTIMATE_APPROVAL.JOB_NUMBER = @CURR_JOB_NUMBER And ESTIMATE_APPROVAL.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR
			AND ESTIMATE_REV_DET.EST_FNC_TYPE = 'E'
			Group By ESTIMATE_APPROVAL.JOB_NUMBER, ESTIMATE_APPROVAL.JOB_COMPONENT_NBR
		END
		ELSE
		BEGIN
			SELECT  @CURR_QUOTED = ISNULL(Sum(ESTIMATE_REV_DET.LINE_TOTAL), 0.00)
			FROM ESTIMATE_REV_DET 
			INNER JOIN ESTIMATE_APPROVAL ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = ESTIMATE_APPROVAL.ESTIMATE_NUMBER 
			  AND ESTIMATE_REV_DET.EST_COMPONENT_NBR = ESTIMATE_APPROVAL.EST_COMPONENT_NBR 
			  AND ESTIMATE_REV_DET.EST_QUOTE_NBR = ESTIMATE_APPROVAL.EST_QUOTE_NBR 
			  AND ESTIMATE_REV_DET.EST_REV_NBR = ESTIMATE_APPROVAL.EST_REVISION_NBR 
			INNER JOIN JOB_LOG ON ESTIMATE_APPROVAL.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
			INNER JOIN JOB_COMPONENT ON ESTIMATE_APPROVAL.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER 
			  AND ESTIMATE_APPROVAL.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR 
			Where (NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12)))
			And ESTIMATE_APPROVAL.JOB_NUMBER = @CURR_JOB_NUMBER And ESTIMATE_APPROVAL.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR
			Group By ESTIMATE_APPROVAL.JOB_NUMBER, ESTIMATE_APPROVAL.JOB_COMPONENT_NBR
		END
		UPDATE #PV_QUERY SET QUOTED_AMT = @CURR_QUOTED WHERE JOB_NUMBER = @CURR_JOB_NUMBER AND JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR;

	END

	IF @THRESHOLD > 0
	BEGIN
		UPDATE #PV_QUERY SET THRESHOLD = @THRESHOLD;

		-- THRESHOLD STATUS 0 = NONE (YELLOW), 1 = OK (GREEN), 2 = OVER (RED)
		UPDATE #PV_QUERY SET THRESHOLD_STATUS = CASE
													WHEN ACTUAL_AMT > (@THRESHOLD * QUOTED_AMT) THEN 2
													ELSE 1
												END
		WHERE QUOTED_AMT > 0.00;
	END

	UPDATE #PV_QUERY SET ESTIMATE_NUMBER = ISNULL(JC.ESTIMATE_NUMBER, 0)
	FROM 
	 #PV_QUERY PV INNER JOIN JOB_COMPONENT JC WITH(NOLOCK) ON PV.JOB_NUMBER = JC.JOB_NUMBER AND PV.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR;

	UPDATE #PV_QUERY SET HAS_JOB_VERSIONS = 1
	FROM
	#PV_QUERY PV INNER JOIN JOB_VER_HDR JVH WITH(NOLOCK) ON  PV.JOB_NUMBER = JVH.JOB_NUMBER AND PV.JOB_COMPONENT_NBR = JVH.JOB_COMPONENT_NBR;

	DECLARE @CUSTOM_LABEL VARCHAR(50)
	SELECT @CUSTOM_LABEL = COALESCE(CAST(AGY_SETTINGS_VALUE AS VARCHAR), CAST(AGY_SETTINGS_DEF AS VARCHAR), 'Versions') FROM AGY_SETTINGS WITH(NOLOCK) WHERE AGY_SETTINGS_CODE = 'JOB_VERSION_DESC'

	UPDATE #PV_QUERY SET JOB_VERSIONS_LABEL = @CUSTOM_LABEL;

	SELECT * FROM #PV_QUERY;

	DROP TABLE #PV_QUERY;




/*=========== QUERY ===========*/
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO