IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[usp_wv_ALERT_NOTIFY_SAVE]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[usp_wv_ALERT_NOTIFY_SAVE]
GO
CREATE PROCEDURE [dbo].[usp_wv_ALERT_NOTIFY_SAVE] /*WITH ENCRYPTION*/
@USER_CODE VARCHAR(100),
@ALERT_ID INT,
@EMP_CODE VARCHAR(6),
@COMMENT_TYPE INT,
@ALERT_STATE_ID      INT,
@ALRT_NOTIFY_HDR_ID  INT,
@ALERT_COMMENT TEXT,
@IS_UNASSIGNED TINYINT,
@SAVE_UNASSIGNED TINYINT,
@IS_NEW_ASSIGNMENT TINYINT
AS
/*=========== QUERY ===========*/
BEGIN
	DECLARE @COMMENT            VARCHAR(1000),
			@EMP_FML            VARCHAR(75),
			@USER_EMP_FML            VARCHAR(75),
			@EMP_EMAIL          VARCHAR(50),
			@MAX_ALERT_RCPT_ID  INT,
			@STATE_COMMENT      VARCHAR(1000),
			@ALERT_STATE_NAME   VARCHAR(100),
			@LAST_NOTIFY_EMP	VARCHAR(6),
			@DFLT_ALERT_CAT_ID	INT,
			@NEXT_ALERT_SEQ_NBR SMALLINT,
			@ALERT_RECIPIENT_ALREADY_HAS_CURRENT_NOTIFY BIT,
			@IS_DRAFT BIT,
			@THIS_JOB_NUMBER INT,
			@THIS_JOB_COMPONENT_NBR SMALLINT,
			@ASSIGNEE_CHANGED BIT


	SELECT @THIS_JOB_NUMBER = ISNULL(JOB_NUMBER,0), @THIS_JOB_COMPONENT_NBR = ISNULL(JOB_COMPONENT_NBR,0), @IS_DRAFT = ISNULL(IS_DRAFT, 0), @LAST_NOTIFY_EMP = ASSIGNED_EMP_CODE
	FROM ALERT WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID;

	SELECT @USER_EMP_FML = (
		SELECT 
			TOP 1 COALESCE(RTRIM(E.EMP_FNAME) + ' ', '') + COALESCE (E.EMP_MI + '. ', '') + COALESCE (E.EMP_LNAME, '')
		FROM EMPLOYEE E WITH(NOLOCK) INNER JOIN SEC_USER SU ON E.EMP_CODE = SU.EMP_CODE
		WHERE UPPER(SU.USER_CODE) = UPPER(@USER_CODE)
	);
		
	SET @ALERT_RECIPIENT_ALREADY_HAS_CURRENT_NOTIFY = 0;
	SET @MAX_ALERT_RCPT_ID = 0;        

	IF @IS_UNASSIGNED = 0
	BEGIN

		SELECT 
			@EMP_FML = COALESCE(RTRIM(EMPLOYEE.EMP_FNAME) + ' ', '') + COALESCE (EMPLOYEE.EMP_MI + '. ', '') + COALESCE (EMPLOYEE.EMP_LNAME, ''),
			@EMP_EMAIL = EMP_EMAIL 
		FROM EMPLOYEE WITH(NOLOCK) 
		WHERE  EMP_CODE = @EMP_CODE;
		
		IF (@EMP_FML IS NULL) OR (@EMP_FML = '')
		BEGIN
			SET @IS_UNASSIGNED = 1;
		END	
	END
	IF @IS_UNASSIGNED = 1
	BEGIN
		SET @EMP_FML = 'Unassigned';
	END
	IF @LAST_NOTIFY_EMP <> @EMP_CODE
	BEGIN
		SET @ASSIGNEE_CHANGED = 1;
	END
	ELSE
	BEGIN
		SET @ASSIGNEE_CHANGED = 0;
	END
	SELECT @MAX_ALERT_RCPT_ID = ISNULL(MAX(ALERT_RCPT_ID), 0) FROM ALERT_RCPT WITH(NOLOCK) WHERE  ALERT_ID = @ALERT_ID;
	SET @MAX_ALERT_RCPT_ID = @MAX_ALERT_RCPT_ID + 1;
	
	IF EXISTS (SELECT 1 FROM dbo.ALERT_RCPT WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1 AND EMP_CODE = @EMP_CODE)
	BEGIN
		SET @ALERT_RECIPIENT_ALREADY_HAS_CURRENT_NOTIFY = 1;
	END
	
	IF @ALERT_RECIPIENT_ALREADY_HAS_CURRENT_NOTIFY = 0
	BEGIN
		IF EXISTS (SELECT 1 FROM dbo.ALERT_RCPT_DISMISSED WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1 AND EMP_CODE = @EMP_CODE)
		BEGIN
			SET @ALERT_RECIPIENT_ALREADY_HAS_CURRENT_NOTIFY = 1;
		END
	END

	SELECT @ALERT_STATE_NAME = ALERT_STATE_NAME	FROM ALERT_STATES WITH(ROWLOCK)	WHERE  ALERT_STATE_ID = @ALERT_STATE_ID;

	SET @STATE_COMMENT = UPPER(@ALERT_STATE_NAME);
	
	SELECT @DFLT_ALERT_CAT_ID = DFLT_ALERT_CAT_ID FROM ALERT_STATES WITH(NOLOCK) WHERE ALERT_STATE_ID = @ALERT_STATE_ID;
	
	UPDATE ALERT WITH(ROWLOCK)
	SET    ALERT_STATE_ID = @ALERT_STATE_ID,
			ALRT_NOTIFY_HDR_ID = @ALRT_NOTIFY_HDR_ID,
			IS_WORK_ITEM = 1
	WHERE  ALERT_ID = @ALERT_ID;

	--UPDATE THE JOB COMPONENT
	BEGIN

		IF @THIS_JOB_NUMBER > 0 AND @THIS_JOB_COMPONENT_NBR > 0 
		BEGIN
	
			UPDATE JOB_COMPONENT WITH(ROWLOCK)
			SET
				ALRT_NOTIFY_HDR_ID = @ALRT_NOTIFY_HDR_ID
			WHERE
				JOB_NUMBER = @THIS_JOB_NUMBER AND JOB_COMPONENT_NBR = @THIS_JOB_COMPONENT_NBR AND (JOB_COMPONENT.ALRT_NOTIFY_HDR_ID IS NULL);	

			-- SET ALERT SEQUENCE FOR ALERTS WITH JOB AND COMPONENT
			IF @IS_NEW_ASSIGNMENT = 1
			BEGIN
				SELECT @NEXT_ALERT_SEQ_NBR = (ISNULL(MAX(ALERT_SEQ_NBR),0) + 1) FROM ALERT WHERE JOB_NUMBER = @THIS_JOB_NUMBER AND JOB_COMPONENT_NBR = @THIS_JOB_COMPONENT_NBR;
				UPDATE ALERT WITH(ROWLOCK) SET ALERT_SEQ_NBR = ISNULL(@NEXT_ALERT_SEQ_NBR,1) WHERE ALERT_ID = @ALERT_ID;
			END

		END
	END

	IF @ALERT_RECIPIENT_ALREADY_HAS_CURRENT_NOTIFY = 0
	BEGIN
		
		IF @IS_UNASSIGNED = 0 --IF NO RECIPIENT RECORD AND ISSUE IS UN-ASSIGNED, DON'T INSERT ALERT_RCPT
		BEGIN

			INSERT INTO ALERT_RCPT WITH
			  (
				ROWLOCK
			  )(
				   ALERT_ID,
				   ALERT_RCPT_ID,
				   EMP_CODE,
				   EMAIL_ADDRESS,
				   PROCESSED,
				   NEW_ALERT,
				   READ_ALERT,
				   CURRENT_RCPT,
				   CURRENT_NOTIFY,
				   ALRT_NOTIFY_HDR_ID,
				   ALERT_STATE_ID
			   )
			VALUES
			  (
				@ALERT_ID,
				@MAX_ALERT_RCPT_ID,
				@EMP_CODE,
				@EMP_EMAIL,
				NULL,
				NULL,
				NULL,
				NULL,
				1,
				@ALRT_NOTIFY_HDR_ID,
				@ALERT_STATE_ID
			  );
			SET @COMMENT_TYPE = 0;

			UPDATE 
				ALERT WITH(ROWLOCK)
			SET    
				ASSIGNED_EMP_CODE = NULL,
				ASSIGNED_EMP_FML = NULL,
				LAST_UPDATED = GETDATE(),
				LAST_UPDATED_USER_CODE = @USER_CODE,
				LAST_UPDATED_FML = @USER_EMP_FML
			WHERE  
				ALERT_ID = @ALERT_ID;

		END
		ELSE
		BEGIN

			UPDATE 
				ALERT WITH(ROWLOCK)
			SET    
				ASSIGNED_EMP_CODE = NULL,
				ASSIGNED_EMP_FML = NULL,
				ASSIGN_COMPLETED = NULL,
				LAST_ASSIGNED_EMP_CODE = NULL,
				LAST_UPDATED = GETDATE(),
				LAST_UPDATED_USER_CODE = @USER_CODE,
				LAST_UPDATED_FML = @USER_EMP_FML
			WHERE  
				ALERT_ID = @ALERT_ID;
				
		END
		
	END
	IF @ALERT_RECIPIENT_ALREADY_HAS_CURRENT_NOTIFY = 1
	BEGIN
		IF @IS_UNASSIGNED = 0 -- CHANGE THE ASSIGNMENT
		BEGIN
			IF EXISTS (SELECT 1 FROM ALERT_RCPT_DISMISSED WHERE  ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1 AND EMP_CODE = @EMP_CODE)
			BEGIN
				IF NOT EXISTS (SELECT 1 FROM ALERT_RCPT WHERE  ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1 AND EMP_CODE = @EMP_CODE)
				BEGIN
					INSERT INTO ALERT_RCPT (ALERT_ID, ALERT_RCPT_ID, EMP_CODE, EMAIL_ADDRESS, PROCESSED, NEW_ALERT, READ_ALERT, CURRENT_RCPT, CURRENT_NOTIFY, CARD_SEQ_NBR, CS_IS_REVIEWER, IS_DELETED, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, PERC_COMPLETE, COMPLETED_DATE, TEMP_COMP_DATE, HOURS_ALLOWED, LAST_ASSIGNED)
					SELECT ALERT_RCPT_DISMISSED.ALERT_ID, ALERT_RCPT_DISMISSED.ALERT_RCPT_ID, ALERT_RCPT_DISMISSED.EMP_CODE, 
						   ALERT_RCPT_DISMISSED.EMAIL_ADDRESS, ALERT_RCPT_DISMISSED.PROCESSED, ALERT_RCPT_DISMISSED.NEW_ALERT, ALERT_RCPT_DISMISSED.READ_ALERT, 
						   ALERT_RCPT_DISMISSED.CURRENT_RCPT, ALERT_RCPT_DISMISSED.CURRENT_NOTIFY, ALERT_RCPT_DISMISSED.CARD_SEQ_NBR, ALERT_RCPT_DISMISSED.CS_IS_REVIEWER, ALERT_RCPT_DISMISSED.IS_DELETED,
						   @ALRT_NOTIFY_HDR_ID, @ALERT_STATE_ID, ALERT_RCPT_DISMISSED.PERC_COMPLETE, ALERT_RCPT_DISMISSED.COMPLETED_DATE, 
							ALERT_RCPT_DISMISSED.TEMP_COMP_DATE, ALERT_RCPT_DISMISSED.HOURS_ALLOWED, ALERT_RCPT_DISMISSED.LAST_ASSIGNED
				    FROM ALERT_RCPT_DISMISSED WHERE  ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1 AND EMP_CODE = @EMP_CODE
				END
			END

			UPDATE ALERT_RCPT WITH(ROWLOCK)
			SET    PROCESSED = NULL, NEW_ALERT = 1, READ_ALERT = NULL, CURRENT_RCPT = NULL, EMAIL_ADDRESS = @EMP_EMAIL, CARD_SEQ_NBR = NULL, ALRT_NOTIFY_HDR_ID = @ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID = @ALERT_STATE_ID
			WHERE  ALERT_ID = @ALERT_ID AND
				   CURRENT_NOTIFY = 1 AND
				   EMP_CODE = @EMP_CODE;

			SET @COMMENT_TYPE = 1;
			
			UPDATE 
				ALERT WITH(ROWLOCK)
			SET    
				ASSIGNED_EMP_CODE = NULL,
				ASSIGNED_EMP_FML = NULL,
				LAST_ASSIGNED_EMP_CODE = NULL,
				LAST_UPDATED = GETDATE(),
				LAST_UPDATED_USER_CODE = @USER_CODE,
				LAST_UPDATED_FML = @USER_EMP_FML
			WHERE  
				ALERT_ID = @ALERT_ID;

		END
		IF @IS_UNASSIGNED = 1 --  GO FROM ASSIGNED BACK TO UNASSIGNED
		BEGIN
		
			--DELETE FROM ALERT_RCPT WITH(ROWLOCK)
			--WHERE  ALERT_ID = @ALERT_ID
			--		AND EMP_CODE = @LAST_NOTIFY_EMP AND CURRENT_NOTIFY = 1;	
		
			UPDATE 
				ALERT WITH(ROWLOCK)
			SET    
				ASSIGNED_EMP_CODE = NULL,
				ASSIGNED_EMP_FML = NULL,
				ASSIGN_COMPLETED = NULL,
				LAST_ASSIGNED_EMP_CODE = @LAST_NOTIFY_EMP,
				LAST_UPDATED = GETDATE(),
				LAST_UPDATED_USER_CODE = @USER_CODE,
				LAST_UPDATED_FML = @USER_EMP_FML
			WHERE  
				ALERT_ID = @ALERT_ID;
		END
	END
		
	SET @COMMENT = ISNULL(@EMP_FML,'');
	
	DECLARE @NEW_COMMENT_ID INT, @COMMENT_EMP_CODE VARCHAR(6)
	
	IF @IS_UNASSIGNED = 1
	BEGIN
	
		SET @COMMENT_EMP_CODE = NULL;
		
	END
	ELSE
	BEGIN
	
		SET @COMMENT_EMP_CODE = @EMP_CODE;
	
	END
	
	SET @NEW_COMMENT_ID = 0;	

	IF @IS_DRAFT = 0
	BEGIN
		
		DECLARE @INSERT_COMMENT VARCHAR(MAX);
		DECLARE @LAST_COMMENT_ID INT

		SET @INSERT_COMMENT = NULL;
		SET @INSERT_COMMENT = CAST(@STATE_COMMENT + ' | ' + CAST(@COMMENT AS VARCHAR) AS TEXT)

		IF NOT @INSERT_COMMENT IS NULL
		BEGIN

			SELECT TOP 1
				@LAST_COMMENT_ID = COMMENT_ID
			FROM
				dbo.ALERT_COMMENT
			WHERE
				ALERT_ID = @ALERT_ID
			ORDER BY
				ALERT_COMMENT.GENERATED_DATE DESC,
				ALERT_COMMENT.COMMENT_ID DESC
				
			IF ISNULL(@LAST_COMMENT_ID, 0) > 0 
			BEGIN			
				UPDATE dbo.ALERT_COMMENT 
                SET CUSTODY_END = GETDATE() 
                WHERE 
                    COMMENT_ID = @LAST_COMMENT_ID
                    AND CUSTODY_START IS NOT NULL
                ;				
			END

			IF EXISTS(SELECT ALERT_ID FROM dbo.ALERT WHERE ALERT_ID = @ALERT_ID AND CP_ALERT = 1) AND @IS_NEW_ASSIGNMENT = 1 BEGIN
			
				INSERT INTO ALERT_COMMENT WITH (ROWLOCK)(ALERT_ID, USER_CODE_CP, GENERATED_DATE, COMMENT, EMAILSENT, ASSIGNED_EMP_CODE, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID)
				VALUES
				  (
					@ALERT_ID,
					@USER_CODE,
					GETDATE(),
					@INSERT_COMMENT,
					1,
					@COMMENT_EMP_CODE,
					@ALRT_NOTIFY_HDR_ID,
					@ALERT_STATE_ID
				  );

			END ELSE BEGIN
			
				INSERT INTO ALERT_COMMENT WITH (ROWLOCK)(ALERT_ID, USER_CODE, GENERATED_DATE, COMMENT, EMAILSENT, ASSIGNED_EMP_CODE, ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID)
				VALUES
				  (
					@ALERT_ID,
					@USER_CODE,
					GETDATE(),
					@INSERT_COMMENT,
					1,
					@COMMENT_EMP_CODE,
					@ALRT_NOTIFY_HDR_ID,
					@ALERT_STATE_ID
				  );

			END

	  
			SELECT @NEW_COMMENT_ID = SCOPE_IDENTITY();
			SET @NEW_COMMENT_ID = ISNULL(@NEW_COMMENT_ID,0);
	
			IF @NEW_COMMENT_ID > 0 
			BEGIN
	
				DECLARE @PTR BINARY(16)
				DECLARE @L INT
				SELECT @PTR = TEXTPTR(COMMENT), @L = DATALENGTH(COMMENT) FROM ALERT_COMMENT WITH(NOLOCK) WHERE COMMENT_ID = @NEW_COMMENT_ID;
				UPDATETEXT ALERT_COMMENT.COMMENT @PTR @L 0 @ALERT_COMMENT;
		
			END

		END

	END
	
	DECLARE @SAVED_CORRECTLY BIT;
	SET @SAVED_CORRECTLY = 0;
	
	IF @IS_UNASSIGNED = 0
	BEGIN
		IF EXISTS (SELECT ALERT_ID  FROM ALERT_RCPT WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1)
		BEGIN
			SET @SAVED_CORRECTLY = 1;
		END
		IF @SAVED_CORRECTLY = 0
		BEGIN
			IF EXISTS (SELECT ALERT_ID  FROM ALERT_RCPT_DISMISSED WITH(NOLOCK) WHERE ALERT_ID = @ALERT_ID AND CURRENT_NOTIFY = 1)
			BEGIN
				SET @SAVED_CORRECTLY = 1;
			END
		END
	END
	ELSE
	BEGIN
	
		SET @SAVED_CORRECTLY = 1;
		
	END

	--	Mark as read for everyone else
	UPDATE ALERT_RCPT SET READ_ALERT = 1 WHERE ALERT_ID = @ALERT_ID AND EMP_CODE <> @EMP_CODE;
	UPDATE ALERT_RCPT_DISMISSED SET READ_ALERT = 1 WHERE ALERT_ID = @ALERT_ID AND EMP_CODE <> @EMP_CODE;
	
	--ONLY RUN CLEAN UP ON NEW INSERTS THAT DIDN'T SAVE THE ASSIGNMENT CORRECTLY...
	--IF WE GIVE ABILITY TO "CONVERT" A NORMAL ALERT TO AN ASSIGNMENT, THIS WON'T WORK....
	IF @IS_NEW_ASSIGNMENT = 1 AND @SAVED_CORRECTLY = 0 
	BEGIN

		DELETE FROM ALERT_ATTACHMENT WITH(ROWLOCK) WHERE ALERT_ID = @ALERT_ID;
		DELETE FROM ALERT_COMMENT WITH(ROWLOCK) WHERE ALERT_ID = @ALERT_ID;
		DELETE FROM ALERT_RCPT WITH(ROWLOCK) WHERE ALERT_ID = @ALERT_ID;
		DELETE FROM ALERT WITH(ROWLOCK) WHERE ALERT_ID = @ALERT_ID;

	END
		
	SELECT CONVERT(BIT, @SAVED_CORRECTLY);
END
/*=========== QUERY ===========*/
