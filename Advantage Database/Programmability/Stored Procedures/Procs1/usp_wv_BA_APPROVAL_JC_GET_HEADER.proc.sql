--DROP PROCEDURE [dbo].[usp_wv_BA_APPROVAL_JC_GET_HEADER]
CREATE PROCEDURE [dbo].[usp_wv_BA_APPROVAL_JC_GET_HEADER]
	@BA_BATCH_ID AS INT,
	@BA_ID AS INT,
	@JOB_NUMBER AS INT,
	@JOB_COMPONENT_NBR AS SMALLINT

AS

	DECLARE
		@DEFAULT_BILL_TYPE AS INTEGER,
		@DEFAULT_JOB_BILL_HOLD AS SMALLINT,
		@DEFAULT_AB_FLAG AS SMALLINT,
		@AB_CALC_METHOD AS SMALLINT,
		@AB_ADV_BILL AS BIT,
		@AB_BILLED AS DECIMAL (15,2),
		@AB_UNBILLED AS DECIMAL (15,2),
		@AB_INCOME_REC AS DECIMAL (15,2),
		@HAS_QTY_RATE AS INTEGER,
		@IS_READ_ONLY AS BIT,
		@JC_STATUS AS VARCHAR(75),
		@JC_ON_ANOTHER_BATCH AS BIT,
		@JC_SELECTED_BA_ID AS INT
		
		SET @DEFAULT_BILL_TYPE = 0;
		SET @IS_READ_ONLY = 0;
		SET @JC_STATUS = 'In Progress';
		SET @JC_ON_ANOTHER_BATCH = 0;
		

				--BASE INFO:	
				SELECT     
					@BA_BATCH_ID AS BA_BATCH_ID,
					JOB_COMPONENT.BA_BATCH_ID AS JC_BA_BATCH_ID,
					CASE 
						WHEN @BA_ID = JOB_COMPONENT.SELECTED_BA_ID THEN 0
						ELSE 1
					END AS CAN_DELETE,
					JOB_LOG.JOB_NUMBER, 
					JOB_COMPONENT.JOB_COMPONENT_NBR, 
					RIGHT(REPLICATE('0',6)+ CONVERT(VARCHAR(20),JOB_COMPONENT.JOB_NUMBER),6)
					+'-'+
					RIGHT(REPLICATE('0',2)+ CONVERT(VARCHAR(20),JOB_COMPONENT.JOB_COMPONENT_NBR),2) 
					+'  '+
					ISNULL(JOB_LOG.JOB_DESC,'')+' / '+ISNULL(JOB_COMPONENT.JOB_COMP_DESC,'')
					AS JOB_AND_COMPONENT, 
					JOB_LOG.JOB_DESC,
					JOB_COMPONENT.JOB_COMP_DESC,
					CLIENT.CL_CODE, CLIENT.CL_NAME,
					CLIENT.CL_CODE+ISNULL(' - '+CLIENT.CL_NAME,'') AS CLIENT_DISPLAY,
					DIVISION.DIV_CODE, DIVISION.DIV_NAME, 
					DIVISION.DIV_CODE+ISNULL(' - '+DIVISION.DIV_NAME,'') AS DIVISION_DISPLAY,
					PRODUCT.PRD_CODE, PRODUCT.PRD_DESCRIPTION, 
					PRODUCT.PRD_CODE+ISNULL(' - '+PRODUCT.PRD_DESCRIPTION,'') AS PRODUCT_DISPLAY,
					CAMPAIGN.CMP_IDENTIFIER, 
					CAMPAIGN.CMP_CODE,
					ISNULL(CAMPAIGN.CMP_CODE+' - ',NULL) + ISNULL(CAMPAIGN.CMP_NAME,NULL) AS CAMPAIGN_DISPLAY, 
					EMPLOYEE.EMP_CODE, 
					ISNULL(EMPLOYEE.EMP_CODE,'') + ' - ' + ISNULL(EMPLOYEE.EMP_FNAME+' ','') + ISNULL(EMPLOYEE.EMP_MI+'. ','') + ISNULL(EMPLOYEE.EMP_LNAME,'') AS AE_EMP_FML_NAME,
					ISNULL(JOB_COMPONENT.AB_FLAG,0) AS AB_FLAG,
					ISNULL(JOB_COMPONENT.JOB_BILL_HOLD,0) AS JOB_BILL_HOLD,
					JOB_COMPONENT.JOB_CL_PO_NBR,
					JOB_COMPONENT.CDP_CONTACT_ID,
					CDP_CONTACT_HDR.CONT_FML AS JOB_COMPONENT_CONTACT_FULL_NAME,
					CAST(JOB_COMPONENT.JOB_PROCESS_CONTRL as VARCHAR(3)) + ' - ' + JOB_PROC_CONTROLS.JOB_PROCESS_DESC AS JOB_PROCESS
				FROM         
					CDP_CONTACT_HDR RIGHT OUTER JOIN
					CLIENT WITH (NOLOCK) INNER JOIN
					JOB_LOG WITH (NOLOCK) INNER JOIN
					JOB_COMPONENT WITH (NOLOCK) ON JOB_LOG.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
					PRODUCT WITH (NOLOCK) ON JOB_LOG.CL_CODE = PRODUCT.CL_CODE AND JOB_LOG.DIV_CODE = PRODUCT.DIV_CODE AND JOB_LOG.PRD_CODE = PRODUCT.PRD_CODE ON 
					CLIENT.CL_CODE = JOB_LOG.CL_CODE INNER JOIN
					DIVISION WITH (NOLOCK) ON JOB_LOG.CL_CODE = DIVISION.CL_CODE AND JOB_LOG.DIV_CODE = DIVISION.DIV_CODE ON 
					CDP_CONTACT_HDR.CDP_CONTACT_ID = JOB_COMPONENT.CDP_CONTACT_ID LEFT OUTER JOIN
					CAMPAIGN WITH (NOLOCK) ON JOB_LOG.CMP_IDENTIFIER = CAMPAIGN.CMP_IDENTIFIER LEFT OUTER JOIN
					EMPLOYEE WITH (NOLOCK) ON JOB_COMPONENT.EMP_CODE = EMPLOYEE.EMP_CODE LEFT OUTER JOIN
					JOB_PROC_CONTROLS WITH (NOLOCK) ON JOB_PROC_CONTROLS.JOB_PROCESS_CONTRL = JOB_COMPONENT.JOB_PROCESS_CONTRL				
                WHERE
					(JOB_LOG.JOB_NUMBER = @JOB_NUMBER) AND
					(JOB_COMPONENT.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR);
					
					
				--SET SOME VARIABLES:	
				SELECT @DEFAULT_JOB_BILL_HOLD = ISNULL(JOB_BILL_HOLD,0), @DEFAULT_AB_FLAG = ISNULL(AB_FLAG,0)  FROM JOB_COMPONENT WITH(NOLOCK)
				WHERE
					(JOB_COMPONENT.JOB_NUMBER = @JOB_NUMBER) AND
					(JOB_COMPONENT.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR);

				SELECT 
					@AB_ADV_BILL = ISNULL(ADV_BILL,0),
					@AB_CALC_METHOD = ISNULL(CALC_METHOD,0),
					@AB_BILLED = BILLED,
					@AB_UNBILLED = UNBILLED,
					@AB_INCOME_REC = INCOME_REC
				FROM 
					dbo.advtf_advance_bill_by_job(@JOB_NUMBER,@JOB_COMPONENT_NBR)

			--SET DEFAULT BILL TYPE:
			IF ((@DEFAULT_AB_FLAG = 0)) --THEN IT IS BILL HOLD OR PROGRESS
				BEGIN
					IF (@DEFAULT_JOB_BILL_HOLD = 0)
						BEGIN
							SET @DEFAULT_BILL_TYPE = 0
						END
					IF (@DEFAULT_JOB_BILL_HOLD = 1 OR @DEFAULT_JOB_BILL_HOLD = 2)
						BEGIN
							SET @DEFAULT_BILL_TYPE = 1
						END
				END
			ELSE --IT IS ADVANCE BILLING (ASSUME @AB_ADV_BILL AND @DEFAULT_AB_FLAG ARE BOTH NOT ZERO
				BEGIN
					IF (@AB_CALC_METHOD = 4)
						BEGIN
							SET @DEFAULT_BILL_TYPE = 3
						END
					ELSE --CALC_METHOD 0,1,2,NULL:
						BEGIN
							SET @DEFAULT_BILL_TYPE = 2
						END
				END
			
					
					
				--APPROVAL HEADER INFO:	
				SELECT     
					BILL_APPR_HDR.BA_HDR_ID, BILL_APPR_HDR.BA_ID, BILL_APPR_HDR.JOB_NUMBER, BILL_APPR_HDR.JOB_COMPONENT_NBR, 
					BILL_APPR_HDR.ACCT_EXEC, BILL_APPR_HDR.APPROVED_AMT, BILL_APPR_HDR.APPR_COMMENTS, BILL_APPR_HDR.CLIENT_COMMENTS, 
					BILL_APPR_HDR.CREATE_DATE, BILL_APPR_HDR.CREATE_USER, BILL_APPR_HDR.AR_INV_NBR, BILL_APPR_HDR.INVOICE_DATE, 
					--IS THIS SUBSTITUTION OK?
					ISNULL(BILL_APPR_HDR.BILL_TYPE,@DEFAULT_BILL_TYPE) AS BILL_TYPE,
					ISNULL(EMPLOYEE.EMP_CODE,'') + ' - ' + ISNULL(EMPLOYEE.EMP_FNAME+' ','') + ISNULL(EMPLOYEE.EMP_MI+'. ','') + ISNULL(EMPLOYEE.EMP_LNAME,'') AS AE_EMP_FML_NAME,
					ISNULL(BILL_APPR_HDR.ADJUSTED,0) AS ADJUSTED,
					AR_INV_NBR,
					INVOICE_DATE,
					@DEFAULT_BILL_TYPE AS DEFAULT_BILL_TYPE,
					@AB_ADV_BILL AS AB_ADV_BILL,
					@AB_CALC_METHOD AS AB_CALC_METHOD,
					@AB_BILLED AS AB_BILLED,
					@AB_UNBILLED AS AB_UNBILLED,
					@AB_INCOME_REC AS AB_INCOME_REC,
					ISNULL(BILL_APPR_HDR.APPR_STATUS, 0) AS APPR_STATUS			
				FROM         
					BILL_APPR_HDR WITH (NOLOCK) LEFT OUTER JOIN
					EMPLOYEE WITH (NOLOCK) ON BILL_APPR_HDR.ACCT_EXEC = EMPLOYEE.EMP_CODE
				WHERE     
					(BA_ID = @BA_ID) AND 
					(JOB_NUMBER = @JOB_NUMBER) AND 
					(JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR);	
	
				--APPROVAL INFO:
				SELECT     
					BILL_APPR.BA_ID, BILL_APPR.BA_BATCH_ID, BILL_APPR.CREATE_USER, BILL_APPR.CREATE_DATE, BILL_APPR_CL.CL_CODE, 
					BILL_APPR_CL.BA_CL_DESC, BILL_APPR_CL.BA_CL_DATE, BILL_APPR_CL.SENT_DATE, BILL_APPR_CL.APPR_DATE, BILL_APPR_CL.CLIENT_PO, 
					BILL_APPR_CL.CREATE_USER AS CL_CREATE_USER
				FROM         
					BILL_APPR_CL WITH (NOLOCK) INNER JOIN
					BILL_APPR WITH (NOLOCK) ON BILL_APPR_CL.BA_ID = BILL_APPR.BA_ID
				WHERE     
					(BILL_APPR.BA_ID = @BA_ID) AND 
					(BILL_APPR.BA_BATCH_ID = @BA_BATCH_ID);
					
				--SET VARIABLE: HAS QTY RATES?
				SELECT   
					@HAS_QTY_RATE = COUNT(1)
				FROM         
					BILL_APPR_DTL WITH(NOLOCK)
				WHERE 
					(QTY_HRS > 0 OR BILLING_RATE > 0)
					AND (JOB_NUMBER = @JOB_NUMBER) 
					AND (JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR) 
					AND BA_ID = @BA_ID;

				--SET VARIABLE: BATCH STATUS:
				DECLARE @BA_BATCH_STATUS AS VARCHAR(20);
				SELECT @BA_BATCH_STATUS = dbo.wvfn_get_batch_status(@BA_BATCH_ID);


				--SET VARIABLE: IS READ ONLY?
				DECLARE @IS_APPROVED SMALLINT, @HAS_APPR_REC INT, @APPR_STATUS SMALLINT
				SELECT @HAS_APPR_REC = ISNULL(COUNT(1),0) FROM BILL_APPR_HDR WITH(NOLOCK) WHERE BA_ID = @BA_ID AND JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
				SELECT @APPR_STATUS = ISNULL(APPR_STATUS,0)  FROM BILL_APPR_HDR WITH(NOLOCK) WHERE BA_ID = @BA_ID AND JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;

				SELECT @JC_SELECTED_BA_ID = ISNULL(SELECTED_BA_ID,0) FROM JOB_COMPONENT WITH(NOLOCK) WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;

				IF @JC_SELECTED_BA_ID = @BA_ID
				BEGIN
					SET @JC_STATUS = 'Selected in Billing Command Center'
				END

				IF @HAS_APPR_REC = 1 AND @APPR_STATUS = 0
				BEGIN
					SET @JC_STATUS = 'Approved'
				END

				IF @IS_READ_ONLY = 0
				BEGIN
					SELECT 
						@IS_READ_ONLY = 
						CASE
							WHEN AR_INV_NBR IS NULL THEN   0
							ELSE   1
						END
					FROM 
						BILL_APPR_HDR WITH(NOLOCK) 
					WHERE 
						BA_ID = @BA_ID AND JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
					IF @IS_READ_ONLY = 1
					BEGIN
						SET @JC_STATUS = 'Job/Component Billed';
					END
				END
				IF @IS_READ_ONLY = 0
				BEGIN
					SELECT @IS_READ_ONLY = ISNULL(ADJUSTED,0) 
					FROM BILL_APPR_HDR WITH(NOLOCK) 
					WHERE BA_ID = @BA_ID AND JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
					IF @IS_READ_ONLY = 1
					BEGIN
						SET @JC_STATUS = 'Job/Component Adjusted';
					END
				END
				IF @IS_READ_ONLY = 0
				BEGIN
					SELECT
						@IS_READ_ONLY = 
						CASE
							WHEN @BA_BATCH_STATUS = 'Approved' THEN 1
							ELSE 0
						END;
					IF @IS_READ_ONLY = 1
					BEGIN
						SET @JC_STATUS = 'Batch Approved';
					END
				END
				IF @IS_READ_ONLY = 0
				BEGIN
					SELECT
						@IS_READ_ONLY = 
						CASE
							WHEN @BA_BATCH_STATUS = 'Finished' THEN 1
							ELSE 0
						END;
					IF @IS_READ_ONLY = 1
					BEGIN
						SET @JC_STATUS = 'Batch Finished';
						--Allow editing if finished, but keep the message
						SET @IS_READ_ONLY = 0
					END
				END
				
				--SET FLAG FOR ON ANOTHER BATCH
				IF NOT EXISTS
				( SELECT * FROM JOB_COMPONENT WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR AND  BA_BATCH_ID = @BA_BATCH_ID) 
					SET @JC_ON_ANOTHER_BATCH = 1;
		

	
				--RETURN VARIABLES FOR AB:	
				SELECT     
					@DEFAULT_BILL_TYPE AS DEFAULT_BILL_TYPE,
					@AB_ADV_BILL AS AB_ADV_BILL,
					@AB_CALC_METHOD AS AB_CALC_METHOD,
					@AB_BILLED AS AB_BILLED,
					@AB_UNBILLED AS AB_UNBILLED,
					@AB_INCOME_REC AS AB_INCOME_REC,
					ISNULL(@HAS_QTY_RATE,0) AS HAS_QTY_RATE,
					@IS_READ_ONLY AS IS_READ_ONLY,
					@BA_BATCH_STATUS AS BATCH_STATUS,
					@JC_STATUS AS JC_STATUS,
					@JC_ON_ANOTHER_BATCH AS JC_ON_ANOTHER_BATCH;	