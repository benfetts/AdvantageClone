--DROP PROCEDURE [dbo].[usp_wv_BA_BATCH_GET_JOBS]
CREATE PROCEDURE [dbo].[usp_wv_BA_BATCH_GET_JOBS] 
@BA_BATCH_ID AS INTEGER,
@BA_ID AS INTEGER,
@CL_CODE AS VARCHAR(6)
AS
/*=========== QUERY ===========*/
	--TABLE TO HOLD IT ALL:
	CREATE TABLE #TABLE_BATCH_COMPS 
	(
		JOB_NUMBER  INT NOT NULL,
		JOB_COMPONENT_NBR  SMALLINT NOT NULL,
		JOB_AND_COMPONENT  VARCHAR(4000) NULL,
		CL_CODE VARCHAR(6) NULL,
		DIV_CODE VARCHAR(6) NULL,
		PRD_CODE VARCHAR(6) NULL,
		APPROVAL_STATUS  VARCHAR(20) NULL,
		ADJUSTED_STATUS  VARCHAR(20) NULL,
		BA_ID INT NULL,
		BA_BATCH_ID INT NULL,
		APPROVAL_STATUS_SEQ INT NULL,
		BILL_APPR_HDR_ID INT NULL,
		MY_KEY VARCHAR(100),
		HDR_ADJUSTED BIT NULL,
		IS_LOCKED BIT NULL,
		HDR_AR_INV_NBR INT NULL,
		APPR_STATUS SMALLINT NULL,
		HAS_APPR_REC BIT NULL,
		JOB_COMPONENT_SELECTED_BA_ID INT NULL,
		UNAPPROVED BIT NULL
	)
	--BUILD BASE SQL:
		--GET FROM J/C WHERE SAME BATCH ID:
		IF ((@CL_CODE = '') OR (@CL_CODE IS NULL))
			BEGIN
				INSERT INTO #TABLE_BATCH_COMPS(JOB_NUMBER,JOB_COMPONENT_NBR,CL_CODE,DIV_CODE,PRD_CODE,BA_BATCH_ID,MY_KEY,IS_LOCKED,JOB_COMPONENT_SELECTED_BA_ID)
				SELECT 
					JOB_COMPONENT.JOB_NUMBER,JOB_COMPONENT.JOB_COMPONENT_NBR,JOB_LOG.CL_CODE,JOB_LOG.DIV_CODE,JOB_LOG.PRD_CODE,BA_BATCH_ID,
					RTRIM(LTRIM(CONVERT(VARCHAR(100), JOB_COMPONENT.JOB_NUMBER)))+'|'+RTRIM(LTRIM(CONVERT(VARCHAR(100), JOB_COMPONENT.JOB_COMPONENT_NBR))),0, JOB_COMPONENT.SELECTED_BA_ID
				FROM         
					JOB_LOG WITH(NOLOCK) INNER JOIN
					JOB_COMPONENT WITH(NOLOCK) ON JOB_LOG.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER LEFT OUTER JOIN
					CAMPAIGN WITH(NOLOCK) ON JOB_LOG.CMP_IDENTIFIER = CAMPAIGN.CMP_IDENTIFIER AND JOB_LOG.CL_CODE = CAMPAIGN.CL_CODE
				WHERE     
					JOB_COMPONENT.BA_BATCH_ID = @BA_BATCH_ID;
			END
		ELSE
			BEGIN
				INSERT INTO #TABLE_BATCH_COMPS(JOB_NUMBER,JOB_COMPONENT_NBR,CL_CODE,DIV_CODE,PRD_CODE,BA_BATCH_ID,MY_KEY,IS_LOCKED,JOB_COMPONENT_SELECTED_BA_ID)
				SELECT 
					JOB_COMPONENT.JOB_NUMBER,JOB_COMPONENT.JOB_COMPONENT_NBR,JOB_LOG.CL_CODE,JOB_LOG.DIV_CODE,JOB_LOG.PRD_CODE,BA_BATCH_ID,
					RTRIM(LTRIM(CONVERT(VARCHAR(100), JOB_COMPONENT.JOB_NUMBER)))+'|'+RTRIM(LTRIM(CONVERT(VARCHAR(100), JOB_COMPONENT.JOB_COMPONENT_NBR))),0, JOB_COMPONENT.SELECTED_BA_ID
				FROM         
					JOB_LOG WITH(NOLOCK) INNER JOIN
					JOB_COMPONENT WITH(NOLOCK) ON JOB_LOG.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER LEFT OUTER JOIN
					CAMPAIGN WITH(NOLOCK) ON JOB_LOG.CMP_IDENTIFIER = CAMPAIGN.CMP_IDENTIFIER AND JOB_LOG.CL_CODE = CAMPAIGN.CL_CODE
				WHERE     
					JOB_LOG.CL_CODE = @CL_CODE AND JOB_COMPONENT.BA_BATCH_ID = @BA_BATCH_ID;
			END

		--GET RECS FROM APPROVAL THAT MIGHT HAVE BEEN REMOVED BY CHANGING BATCH (THIS USED TO BE THE ONLY PATH THAT WOULD "LOCK" A JOB ON AN APPROVAL)
		INSERT INTO #TABLE_BATCH_COMPS(JOB_NUMBER,JOB_COMPONENT_NBR,BA_BATCH_ID,MY_KEY,APPROVAL_STATUS,APPROVAL_STATUS_SEQ,IS_LOCKED, UNAPPROVED,JOB_COMPONENT_SELECTED_BA_ID)
		SELECT 
			BILL_APPR_HDR.JOB_NUMBER, BILL_APPR_HDR.JOB_COMPONENT_NBR, BILL_APPR.BA_BATCH_ID,
			RTRIM(LTRIM(CONVERT(VARCHAR(100), BILL_APPR_HDR.JOB_NUMBER)))+'|'+RTRIM(LTRIM(CONVERT(VARCHAR(100), BILL_APPR_HDR.JOB_COMPONENT_NBR))),
			'Approved', 1, 0, 0, JC.SELECTED_BA_ID
		FROM 
			BILL_APPR_HDR WITH(NOLOCK) INNER JOIN BILL_APPR WITH(NOLOCK) ON BILL_APPR.BA_ID = BILL_APPR_HDR.BA_ID
			INNER JOIN JOB_COMPONENT JC WITH(NOLOCK) ON BILL_APPR_HDR.JOB_NUMBER = JC.JOB_NUMBER AND BILL_APPR_HDR.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR
		WHERE 
			BILL_APPR_HDR.BA_ID = @BA_ID
			AND
			RTRIM(LTRIM(CONVERT(VARCHAR(100), BILL_APPR_HDR.JOB_NUMBER)))+'|'+RTRIM(LTRIM(CONVERT(VARCHAR(100), BILL_APPR_HDR.JOB_COMPONENT_NBR)))
			NOT IN (SELECT MY_KEY FROM #TABLE_BATCH_COMPS)

		--GET RECS FROM APPROVAL THAT MIGHT NOT SHOW UP BECAUSE BATCH CRITERIA CHANGED, BUT IS PART OF THE BATCH BECAUSE IT WAS SAVED
		INSERT INTO #TABLE_BATCH_COMPS(JOB_NUMBER,JOB_COMPONENT_NBR,BA_BATCH_ID,MY_KEY,APPROVAL_STATUS,APPROVAL_STATUS_SEQ,IS_LOCKED, UNAPPROVED,JOB_COMPONENT_SELECTED_BA_ID)
		SELECT 
			BILL_APPR_HDR.JOB_NUMBER, BILL_APPR_HDR.JOB_COMPONENT_NBR, BILL_APPR.BA_BATCH_ID,
			RTRIM(LTRIM(CONVERT(VARCHAR(100), BILL_APPR_HDR.JOB_NUMBER)))+'|'+RTRIM(LTRIM(CONVERT(VARCHAR(100), BILL_APPR_HDR.JOB_COMPONENT_NBR))),
			'Approved', 1, 0, 0, JC.SELECTED_BA_ID
		FROM 
			BILL_APPR_HDR WITH(NOLOCK) INNER JOIN BILL_APPR WITH(NOLOCK) ON BILL_APPR_HDR.BA_ID = BILL_APPR.BA_ID
			INNER JOIN JOB_COMPONENT JC WITH(NOLOCK) ON BILL_APPR_HDR.JOB_NUMBER = JC.JOB_NUMBER AND BILL_APPR_HDR.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR
		WHERE 
			BILL_APPR.BA_BATCH_ID = @BA_BATCH_ID
			AND
			RTRIM(LTRIM(CONVERT(VARCHAR(100), BILL_APPR_HDR.JOB_NUMBER)))+'|'+RTRIM(LTRIM(CONVERT(VARCHAR(100), BILL_APPR_HDR.JOB_COMPONENT_NBR)))
			NOT IN (SELECT MY_KEY FROM #TABLE_BATCH_COMPS)

		
		--SET RECORDS THAT EXIST IN HEADER TO APPROVED
		UPDATE #TABLE_BATCH_COMPS
		SET #TABLE_BATCH_COMPS.APPROVAL_STATUS = 'Approved', #TABLE_BATCH_COMPS.BA_ID = BILL_APPR_HDR.BA_ID, APPROVAL_STATUS_SEQ = 0, #TABLE_BATCH_COMPS.APPR_STATUS = BILL_APPR_HDR.APPR_STATUS,
		#TABLE_BATCH_COMPS.HAS_APPR_REC = 1, UNAPPROVED = 0
		FROM
			#TABLE_BATCH_COMPS,BILL_APPR_HDR WITH(NOLOCK)
		WHERE
			#TABLE_BATCH_COMPS.JOB_NUMBER = BILL_APPR_HDR.JOB_NUMBER
			AND #TABLE_BATCH_COMPS.JOB_COMPONENT_NBR = BILL_APPR_HDR.JOB_COMPONENT_NBR
			AND BILL_APPR_HDR.BA_ID = @BA_ID;


		UPDATE #TABLE_BATCH_COMPS
		SET JOB_AND_COMPONENT = 
						RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), 
						JOB_COMPONENT.JOB_NUMBER), 6) + '-' + RIGHT(REPLICATE('0', 3) + CONVERT(VARCHAR(20), JOB_COMPONENT.JOB_COMPONENT_NBR), 3) 
						+ '  ' + ISNULL(JOB_LOG.JOB_DESC, '') + ' / ' + ISNULL(JOB_COMPONENT.JOB_COMP_DESC, ''),
			CL_CODE = JOB_LOG.CL_CODE, DIV_CODE = JOB_LOG.DIV_CODE, PRD_CODE = JOB_LOG.PRD_CODE
		FROM 
			#TABLE_BATCH_COMPS,JOB_LOG WITH(NOLOCK),JOB_COMPONENT WITH(NOLOCK)
		WHERE 
			JOB_LOG.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER
			AND #TABLE_BATCH_COMPS.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER
			AND #TABLE_BATCH_COMPS.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR;

		UPDATE #TABLE_BATCH_COMPS
		SET BILL_APPR_HDR_ID = BILL_APPR_HDR.BA_HDR_ID
		FROM
			#TABLE_BATCH_COMPS,BILL_APPR_HDR WITH(NOLOCK),BILL_APPR WITH(NOLOCK)
		WHERE
			#TABLE_BATCH_COMPS.JOB_NUMBER = BILL_APPR_HDR.JOB_NUMBER
			AND #TABLE_BATCH_COMPS.JOB_COMPONENT_NBR = BILL_APPR_HDR.JOB_COMPONENT_NBR
			AND BILL_APPR_HDR.BA_ID = BILL_APPR.BA_ID
			AND BILL_APPR.BA_BATCH_ID = @BA_BATCH_ID;
		
		UPDATE #TABLE_BATCH_COMPS
		SET BA_ID = BILL_APPR_HDR.BA_ID
		FROM
			#TABLE_BATCH_COMPS,BILL_APPR_HDR WITH(NOLOCK)
		WHERE
			#TABLE_BATCH_COMPS.JOB_NUMBER = BILL_APPR_HDR.JOB_NUMBER
			AND #TABLE_BATCH_COMPS.JOB_COMPONENT_NBR = BILL_APPR_HDR.JOB_COMPONENT_NBR;		

		UPDATE #TABLE_BATCH_COMPS
		SET APPROVAL_STATUS = 'Pending', APPROVAL_STATUS_SEQ = 2
		FROM #TABLE_BATCH_COMPS		
		WHERE #TABLE_BATCH_COMPS.APPROVAL_STATUS IS NULL;

		UPDATE #TABLE_BATCH_COMPS
		SET HDR_ADJUSTED = BILL_APPR_HDR.ADJUSTED
		FROM
			#TABLE_BATCH_COMPS,BILL_APPR_HDR WITH(NOLOCK)
		WHERE
			#TABLE_BATCH_COMPS.JOB_NUMBER = BILL_APPR_HDR.JOB_NUMBER
			AND #TABLE_BATCH_COMPS.JOB_COMPONENT_NBR = BILL_APPR_HDR.JOB_COMPONENT_NBR
			AND BILL_APPR_HDR.BA_ID = @BA_ID;

		UPDATE #TABLE_BATCH_COMPS
		SET HDR_AR_INV_NBR = BILL_APPR_HDR.AR_INV_NBR
		FROM
			#TABLE_BATCH_COMPS,BILL_APPR_HDR WITH(NOLOCK)
		WHERE
			#TABLE_BATCH_COMPS.JOB_NUMBER = BILL_APPR_HDR.JOB_NUMBER
			AND #TABLE_BATCH_COMPS.JOB_COMPONENT_NBR = BILL_APPR_HDR.JOB_COMPONENT_NBR
			AND BILL_APPR_HDR.BA_ID = @BA_ID;


		UPDATE #TABLE_BATCH_COMPS
		SET ADJUSTED_STATUS = 
		CASE
			WHEN (NOT HDR_AR_INV_NBR IS NULL) THEN 'Billed'
			WHEN HDR_ADJUSTED = 1 THEN 'Adjusted'
			WHEN JOB_COMPONENT_SELECTED_BA_ID = @BA_ID THEN 'Selected'
			ELSE 'Pending'
		END

		DECLARE @BATCH_IS_FINISHED AS BIT, @BATCH_IS_APPROVED AS BIT;
		SELECT @BATCH_IS_FINISHED = ISNULL(FINISHED, 0), @BATCH_IS_APPROVED = ISNULL(APPROVED, 0) FROM BILL_APPR_BATCH WITH(NOLOCK) WHERE BA_BATCH_ID = @BA_BATCH_ID;
	
		UPDATE #TABLE_BATCH_COMPS
		SET IS_LOCKED = 1
		WHERE (HDR_ADJUSTED = 1) OR (NOT(HDR_AR_INV_NBR IS NULL)) OR (JOB_COMPONENT_SELECTED_BA_ID = @BA_ID);

		IF (@BATCH_IS_APPROVED = 1 OR @BATCH_IS_FINISHED = 1)
		BEGIN
			UPDATE #TABLE_BATCH_COMPS
			SET IS_LOCKED = 1;
		END
	
		UPDATE #TABLE_BATCH_COMPS SET IS_LOCKED = 0 WHERE (IS_LOCKED IS NULL);
	
		IF ((@BA_ID IS NULL) OR (@BA_ID <= 0))
			BEGIN
				SELECT 
					JOB_NUMBER,
					JOB_COMPONENT_NBR,
					JOB_AND_COMPONENT,
					CL_CODE,
					DIV_CODE,
					PRD_CODE,
					ADJUSTED_STATUS,
					BA_ID,
					BA_BATCH_ID,
					APPROVAL_STATUS_SEQ,
					BILL_APPR_HDR_ID INT,
					MY_KEY,
					HDR_ADJUSTED,
					IS_LOCKED,
					HDR_AR_INV_NBR,
					APPR_STATUS,
					CASE 
						WHEN APPR_STATUS IS NULL THEN 'Approved'
						ELSE 'Pending'
					END AS 	APPROVAL_STATUS,
					HAS_APPR_REC,
					CASE
						WHEN (HAS_APPR_REC = 1 AND APPR_STATUS = 1)  THEN 'Pending'
						WHEN (HAS_APPR_REC = 1 AND ((APPR_STATUS IS NULL OR APPR_STATUS = 0) OR @BATCH_IS_FINISHED = 1))  THEN 'Approved'
						ELSE 'Pending'
					END AS 	
					BILL_APPR_ENTRY_EDIT_GROUPING,
					JOB_COMPONENT_SELECTED_BA_ID,
					CASE
						WHEN (HAS_APPR_REC = 1 AND APPR_STATUS = 1)  THEN 1
						WHEN (HAS_APPR_REC = 1 AND ((APPR_STATUS IS NULL OR APPR_STATUS = 0) OR @BATCH_IS_FINISHED = 1))  THEN 0
						ELSE 1
					END AS 	UNAPPROVED
				FROM 
					#TABLE_BATCH_COMPS 
				ORDER BY 
					JOB_NUMBER, JOB_COMPONENT_NBR;
			END
		ELSE
			BEGIN
				SELECT 
					JOB_NUMBER,
					JOB_COMPONENT_NBR,
					JOB_AND_COMPONENT,
					CL_CODE,
					DIV_CODE,
					PRD_CODE,
					ADJUSTED_STATUS,
					BA_ID,
					BA_BATCH_ID,
					APPROVAL_STATUS_SEQ,
					BILL_APPR_HDR_ID INT,
					MY_KEY,
					HDR_ADJUSTED,
					IS_LOCKED,
					HDR_AR_INV_NBR,
					APPR_STATUS,
					CASE 
						WHEN APPR_STATUS IS NULL THEN 'Approved'
						ELSE 'Pending'
					END AS 	APPROVAL_STATUS,
					HAS_APPR_REC,
					CASE
						WHEN (HAS_APPR_REC = 1 AND APPR_STATUS = 1)  THEN 'Pending'
						WHEN (HAS_APPR_REC = 1 AND ((APPR_STATUS IS NULL OR APPR_STATUS = 0) OR @BATCH_IS_FINISHED = 1))  THEN 'Approved'
						ELSE 'Pending'
					END AS 	
					BILL_APPR_ENTRY_EDIT_GROUPING,
					JOB_COMPONENT_SELECTED_BA_ID,
					CASE
						WHEN (HAS_APPR_REC = 1 AND APPR_STATUS = 1)  THEN 1
						WHEN (HAS_APPR_REC = 1 AND ((APPR_STATUS IS NULL OR APPR_STATUS = 0) OR @BATCH_IS_FINISHED = 1))  THEN 0
						ELSE 1
					END AS 	UNAPPROVED
				FROM 
					#TABLE_BATCH_COMPS 
				WHERE 
					(
						BILL_APPR_HDR_ID IN (SELECT BA_HDR_ID FROM BILL_APPR_HDR WITH(NOLOCK) WHERE BA_ID = @BA_ID)
						OR (BILL_APPR_HDR_ID IS NULL)
					)
				ORDER BY 
					APPROVAL_STATUS_SEQ,JOB_NUMBER, JOB_COMPONENT_NBR;
			END

		DROP TABLE #TABLE_BATCH_COMPS;
/*=========== QUERY ===========*/
