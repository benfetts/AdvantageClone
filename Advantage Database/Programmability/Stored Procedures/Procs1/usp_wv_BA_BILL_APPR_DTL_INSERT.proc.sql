--DROP PROCEDURE [dbo].[usp_wv_BA_BILL_APPR_DTL_INSERT]
CREATE PROCEDURE [dbo].[usp_wv_BA_BILL_APPR_DTL_INSERT] 
	@BA_ID AS INT,
	@JOB_NUMBER AS INT,
	@JOB_COMPONENT_NBR AS SMALLINT,
	@FNC_CODE AS VARCHAR(6),
	@QTY_HRS AS DECIMAL(15,3),
	@BILLING_RATE AS DECIMAL (9,2),
	@FNC_DESC AS VARCHAR(30),
	@APPROVED_AMT AS DECIMAL(15,2),
	@FNC_COMMENTS AS TEXT,
	@CLIENT_COMMENTS AS TEXT,
	@ROW_TYPE AS TINYINT,
	@APPR_NET AS DECIMAL(14,2),

    @APPR_MARKUP_PCT DECIMAL(6, 3),
    @APPR_MARKUP_AMT DECIMAL(14, 2),
    @APPR_TAX_CODE VARCHAR(4),
    @APPR_TAX_COMM SMALLINT,
    @APPR_TAX_COMM_ONLY SMALLINT,
    @APPR_TAX_RESALE SMALLINT,
    @APPR_RESALE_TAX DECIMAL(14, 2),
    @APPR_VENDOR_TAX DECIMAL(14, 2),
    @APPR_TAX_STATE_PCT DECIMAL(8, 4),
    @APPR_TAX_COUNTY_PCT DECIMAL(8, 4),
    @APPR_TAX_CITY_PCT DECIMAL(8, 4),
    @IS_USER_ROW BIT 
AS

DECLARE
	@VALID_FUNCTION AS SMALLINT,
	@DTL_FUNCTION_EXISTS AS SMALLINT
	
SET @VALID_FUNCTION = 0;
SET @DTL_FUNCTION_EXISTS = 0;
	
--See if function for the BA,J,C is already in the table:	
SELECT     
	@DTL_FUNCTION_EXISTS = ISNULL(COUNT(1),0)
FROM         
	BILL_APPR_DTL WITH(NOLOCK)
WHERE     
	(BA_ID = @BA_ID) 
	AND (JOB_NUMBER = @JOB_NUMBER) 
	AND (JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR) 
	AND (FNC_CODE = @FNC_CODE);

--See if function is valid:
SELECT     
	@VALID_FUNCTION = ISNULL(COUNT(1),0)
FROM         
	FUNCTIONS WITH(NOLOCK)
WHERE     
	((FNC_INACTIVE = 0) OR (FNC_INACTIVE IS NULL))	
	AND (FNC_CODE = @FNC_CODE)
	AND FNC_TYPE NOT IN ('F','C');

--If blank description, get default???
IF RTRIM(LTRIM(@FNC_DESC)) = ''
BEGIN
	SELECT @FNC_DESC = FNC_DESCRIPTION FROM FUNCTIONS WITH(NOLOCK) WHERE (FNC_CODE = @FNC_CODE);
END

--Only add to detail table if it isn't there and it is valid:
--INSERT:
IF (@DTL_FUNCTION_EXISTS = 0) AND (@VALID_FUNCTION = 1)
BEGIN
	
	DECLARE @NEW_BA_DTL_ID INT

	INSERT INTO BILL_APPR_DTL WITH(ROWLOCK)
		(
			BA_ID,
			JOB_NUMBER,
			JOB_COMPONENT_NBR,
			FNC_CODE,
			QTY_HRS,
			BILLING_RATE,
			FNC_DESC,
			APPROVED_AMT,
			FNC_COMMENTS,
			CLIENT_COMMENTS,
			ROW_TYPE,
			APPR_NET,
		    APPR_MARKUP_PCT,
		    APPR_MARKUP_AMT,
		    APPR_TAX_CODE,
		    APPR_TAX_COMM,
		    APPR_TAX_COMM_ONLY,
		    APPR_TAX_RESALE,
		    APPR_RESALE_TAX,
		    APPR_VENDOR_TAX,
		    APPR_TAX_STATE_PCT,
		    APPR_TAX_COUNTY_PCT,
		    APPR_TAX_CITY_PCT,
		    IS_USER_ROW			
		)
		VALUES
		(
			@BA_ID,
			@JOB_NUMBER,
			@JOB_COMPONENT_NBR,
			@FNC_CODE,
			@QTY_HRS,
			@BILLING_RATE,
			@FNC_DESC,
			@APPROVED_AMT,
			@FNC_COMMENTS,
			@CLIENT_COMMENTS,
			@ROW_TYPE,
			@APPR_NET,
	        @APPR_MARKUP_PCT,
            @APPR_MARKUP_AMT,
            @APPR_TAX_CODE,
            @APPR_TAX_COMM,
            @APPR_TAX_COMM_ONLY,
            @APPR_TAX_RESALE,
            @APPR_RESALE_TAX,
            @APPR_VENDOR_TAX,
            @APPR_TAX_STATE_PCT,
            @APPR_TAX_COUNTY_PCT,
            @APPR_TAX_CITY_PCT,
            @IS_USER_ROW 

		);

	SELECT @NEW_BA_DTL_ID = SCOPE_IDENTITY();

	IF NOT @NEW_BA_DTL_ID IS NULL AND @NEW_BA_DTL_ID > 0
	BEGIN
		EXEC advsp_billing_approval_detail_calculate_amounts @NEW_BA_DTL_ID;
	END

	SELECT @NEW_BA_DTL_ID;
END