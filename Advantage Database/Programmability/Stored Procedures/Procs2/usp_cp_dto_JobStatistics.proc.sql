if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_cp_dto_JobStatistics]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_cp_dto_JobStatistics]
GO

CREATE PROCEDURE [dbo].[usp_cp_dto_JobStatistics]
@CPID Int,
@StartDate DATETIME,
@EndDate DATETIME,
@CancelledCode VARCHAR(100),
@IsCancelled VARCHAR(10),
@AE varchar(6),
@Manager varchar(6)
AS
DECLARE @Restrictions INT, @SqlStmt NVARCHAR(4000)
DECLARE @OfficeRestrictions INT
DECLARE @EMP_CODE AS VARCHAR(6)

--Check restrictions:
SELECT @Restrictions = COUNT(*) FROM CP_SEC_CLIENT WHERE CDP_CONTACT_ID = @CPID

--SELECT @EMP_CODE = EMP_CODE FROM SEC_USER WHERE UPPER(USER_CODE) = @CPID
--SELECT @OfficeRestrictions = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CODE


--Create temp table:
CREATE TABLE #JOB_STATS
(
	CL_CODE VARCHAR(15) NOT NULL,
	CLIENT_DESCRIPT VARCHAR(50) NOT NULL,
	JOBS_CREATED INT NOT NULL,
	JOBS_COMPLETED INT NOT NULL,
	JOBS_CANCELLED INT NOT NULL,
	JOBS_DUE INT NOT NULL,
	JOBS_IN_PROGRESS INT NOT NULL
)

--Insert first row:
INSERT INTO #JOB_STATS
SELECT 'ALL_CLIENTS','All Clients',0,0,0,0,0

--Get client list:
INSERT INTO #JOB_STATS
SELECT DISTINCT 
	CL_CODE, 
	ISNULL(CL_CODE,'')+' - '+ISNULL(CL_NAME,'') AS CLIENT_DESCRIPT,
	0,0,0,0,0
FROM 
	CLIENT
ORDER BY 
	CL_CODE

--Get jobs created:
SET @SqlStmt = 'UPDATE #JOB_STATS
			SET JOBS_CREATED = T1.JOBS_CREATED
			FROM
			(
			SELECT 
				COUNT(*) AS JOBS_CREATED,JOB_LOG.CL_CODE
			FROM
				JOB_COMPONENT INNER JOIN
				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER LEFT OUTER JOIN
				JOB_TRAFFIC ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR'
			IF @OfficeRestrictions > 0 
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
			End
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN
				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE'
			End
SET @SqlStmt = @SqlStmt + '	WHERE     
				(JOB_COMPONENT.JOB_COMP_DATE >= ''' + CONVERT( varchar(10), @StartDate, 1 ) + ''') AND 
				(JOB_COMPONENT.JOB_COMP_DATE <= ''' + CONVERT( varchar(10), @EndDate, 1 ) + ''')'
			IF LEFT (@AE, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
			End
			IF LEFT (@Manager, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
			End				
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (CP_SEC_CLIENT.CDP_CONTACT_ID = ''' + CAST(@CPID AS VARCHAR) + ''')'
			End
SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.CL_CODE
			) T1
			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	'
 PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt
--IF @OfficeRestrictions > 0 
--	Begin
--	IF @Restrictions > 0
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_CREATED = T1.JOBS_CREATED
--			FROM
--			(
--			SELECT 
--				COUNT(*) AS JOBS_CREATED,JOB_LOG.CL_CODE
--			FROM
--				JOB_COMPONENT INNER JOIN
--				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--				INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--			WHERE     
--				(JOB_COMPONENT.JOB_COMP_DATE >= @StartDate) AND 
--				(JOB_COMPONENT.JOB_COMP_DATE <= @EndDate) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--		END
--	ELSE
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_CREATED = T1.JOBS_CREATED
--			FROM
--			(
--			SELECT 
--				COUNT(*) AS JOBS_CREATED,JOB_LOG.CL_CODE
--			FROM
--				JOB_COMPONENT INNER JOIN
--				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--				INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--			WHERE     
--				(JOB_COMPONENT.JOB_COMP_DATE >= @StartDate) AND 
--				(JOB_COMPONENT.JOB_COMP_DATE <= @EndDate)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	
--		END
--	End
--ELSE
--	Begin
--	IF @Restrictions > 0
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_CREATED = T1.JOBS_CREATED
--			FROM
--			(
--			SELECT 
--				COUNT(*) AS JOBS_CREATED,JOB_LOG.CL_CODE
--			FROM
--				JOB_COMPONENT INNER JOIN
--				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--			WHERE     
--				(JOB_COMPONENT.JOB_COMP_DATE >= @StartDate) AND 
--				(JOB_COMPONENT.JOB_COMP_DATE <= @EndDate) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--		END
--	ELSE
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_CREATED = T1.JOBS_CREATED
--			FROM
--			(
--			SELECT 
--				COUNT(*) AS JOBS_CREATED,JOB_LOG.CL_CODE
--			FROM
--				JOB_COMPONENT INNER JOIN
--				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--			WHERE     
--				(JOB_COMPONENT.JOB_COMP_DATE >= @StartDate) AND 
--				(JOB_COMPONENT.JOB_COMP_DATE <= @EndDate)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	
--		END
--	End


--Get jobs completed:
SET @SqlStmt = ''
SET @SqlStmt = 'UPDATE #JOB_STATS
			SET JOBS_COMPLETED = T1.JOBS_COMPLETED
			FROM
			(
			SELECT 
				COUNT(*) AS JOBS_COMPLETED, JOB_LOG.CL_CODE
			FROM
				JOB_TRAFFIC INNER JOIN
				JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR'
			IF @OfficeRestrictions > 0 
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
			End
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN
				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE'
			End
SET @SqlStmt = @SqlStmt + '	WHERE (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND    
				(JOB_TRAFFIC.COMPLETED_DATE >= ''' + CONVERT( varchar(10), @StartDate, 1 ) + ''') AND 
				(JOB_TRAFFIC.COMPLETED_DATE <= ''' + CONVERT( varchar(10), @EndDate, 1 ) + ''')'
			IF LEFT (@AE, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
			End
			IF LEFT (@Manager, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
			End				
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (CP_SEC_CLIENT.CDP_CONTACT_ID = ''' + CAST(@CPID AS VARCHAR) + ''')'
			End
SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.CL_CODE
			) T1
			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	'
 PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt
--IF @OfficeRestrictions > 0 
--	BEGIN
--	IF @Restrictions > 0
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_COMPLETED = T1.JOBS_COMPLETED
--			FROM
--			(
--			SELECT
--				COUNT(*) AS JOBS_COMPLETED, JOB_LOG.CL_CODE
--			FROM
--				JOB_TRAFFIC INNER JOIN
--				JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--				INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--			WHERE     
--				--(JOB_TRAFFIC.TRF_CODE LIKE '%complete%') AND 
--				(NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND
--				(JOB_TRAFFIC.COMPLETED_DATE >= @StartDate) AND 
--				(JOB_TRAFFIC.COMPLETED_DATE <= @EndDate) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--		END
--	ELSE
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_COMPLETED = T1.JOBS_COMPLETED
--			FROM
--			(
--			SELECT
--				COUNT(*) AS JOBS_COMPLETED, JOB_LOG.CL_CODE
--			FROM
--				JOB_TRAFFIC INNER JOIN
--				JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--				INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--			WHERE     
--				--(JOB_TRAFFIC.TRF_CODE LIKE '%complete%') AND 
--				(NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND
--				(JOB_TRAFFIC.COMPLETED_DATE >= @StartDate) AND 
--				(JOB_TRAFFIC.COMPLETED_DATE <= @EndDate)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	
--		END
--	END
--ELSE
--	BEGIN
--	IF @Restrictions > 0
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_COMPLETED = T1.JOBS_COMPLETED
--			FROM
--			(
--			SELECT
--				COUNT(*) AS JOBS_COMPLETED, JOB_LOG.CL_CODE
--			FROM
--				JOB_TRAFFIC INNER JOIN
--				JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--			WHERE     
--				--(JOB_TRAFFIC.TRF_CODE LIKE '%complete%') AND 
--				(NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND
--				(JOB_TRAFFIC.COMPLETED_DATE >= @StartDate) AND 
--				(JOB_TRAFFIC.COMPLETED_DATE <= @EndDate) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--		END
--	ELSE
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_COMPLETED = T1.JOBS_COMPLETED
--			FROM
--			(
--			SELECT
--				COUNT(*) AS JOBS_COMPLETED, JOB_LOG.CL_CODE
--			FROM
--				JOB_TRAFFIC INNER JOIN
--				JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--			WHERE     
--				--(JOB_TRAFFIC.TRF_CODE LIKE '%complete%') AND 
--				(NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND
--				(JOB_TRAFFIC.COMPLETED_DATE >= @StartDate) AND 
--				(JOB_TRAFFIC.COMPLETED_DATE <= @EndDate)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	
--		END
--	END


--Check custom column:
IF @IsCancelled = 'true'
Begin
	--Get jobs cancelled:
			SET @SqlStmt = ''
			SET @SqlStmt = 'UPDATE #JOB_STATS
						SET JOBS_CANCELLED = T1.JOBS_CANCELLED
						FROM
						(
						SELECT 
							COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
						FROM
							JOB_TRAFFIC INNER JOIN
							JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
							JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR'
						IF @OfficeRestrictions > 0 
						Begin
							SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
						End
						IF @Restrictions > 0
						Begin
							SET @SqlStmt = @SqlStmt + ' INNER JOIN
							CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE'
						End
			SET @SqlStmt = @SqlStmt + '	WHERE (JOB_TRAFFIC.TRF_CODE = ''' + @CancelledCode + ''') AND (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND    
							(JOB_TRAFFIC.COMPLETED_DATE >= ''' + CONVERT( varchar(10), @StartDate, 1 ) + ''') AND 
							(JOB_TRAFFIC.COMPLETED_DATE <= ''' + CONVERT( varchar(10), @EndDate, 1 ) + ''')'
						IF LEFT (@AE, 3) <> 'All'
						Begin
							SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
						End
						IF LEFT (@Manager, 3) <> 'All'
						Begin
							SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
						End				
						IF @Restrictions > 0
						Begin
							SET @SqlStmt = @SqlStmt + ' AND (CP_SEC_CLIENT.CDP_CONTACT_ID = ''' + @CPID + ''')'
						End
			SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.CL_CODE
						) T1
						INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	'
 PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt
End
Else
Begin
	--Get custom column:
			SET @SqlStmt = ''
			SET @SqlStmt = 'UPDATE #JOB_STATS
						SET JOBS_CANCELLED = T1.JOBS_CANCELLED
						FROM
						(
						SELECT 
							COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
						FROM
							JOB_TRAFFIC INNER JOIN
							JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
							JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
							JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER'
						IF @OfficeRestrictions > 0 
						Begin
							SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
						End
						IF @Restrictions > 0
						Begin
							SET @SqlStmt = @SqlStmt + ' INNER JOIN
							CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE'
						End
			SET @SqlStmt = @SqlStmt + '	WHERE (NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND 
							(JOB_TRAFFIC.TRF_CODE = ''' + @CancelledCode + ''')'
						IF LEFT (@AE, 3) <> 'All'
						Begin
							SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
						End
						IF LEFT (@Manager, 3) <> 'All'
						Begin
							SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
						End				
						IF @Restrictions > 0
						Begin
							SET @SqlStmt = @SqlStmt + ' AND (CP_SEC_CLIENT.CDP_CONTACT_ID = ''' + CAST(@CPID AS VARCHAR) + ''')'
						End
			SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.CL_CODE
						) T1
						INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	'
 PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt
End
--IF @OfficeRestrictions > 0 
--	BEGIN
--	IF @IsCancelled = 'true'
--		BEGIN
--			--Get jobs cancelled:
--			IF @Restrictions > 0
--				BEGIN
--					UPDATE #JOB_STATS
--					SET JOBS_CANCELLED = T1.JOBS_CANCELLED
--					FROM
--					(
--					SELECT
--						COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
--					FROM
--						JOB_TRAFFIC INNER JOIN
--						JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--						CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--						INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--					WHERE     
--						(JOB_TRAFFIC.TRF_CODE = @CancelledCode) AND (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND
--						(JOB_TRAFFIC.COMPLETED_DATE >= @StartDate) AND 
--						(JOB_TRAFFIC.COMPLETED_DATE <= @EndDate) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--					GROUP BY JOB_LOG.CL_CODE
--					) T1
--					INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--				END
--			ELSE
--				BEGIN
--					UPDATE #JOB_STATS
--					SET JOBS_CANCELLED = T1.JOBS_CANCELLED
--					FROM
--					(
--					SELECT
--						COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
--					FROM
--						JOB_TRAFFIC INNER JOIN
--						JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--						INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--					WHERE     
--						(JOB_TRAFFIC.TRF_CODE = @CancelledCode) AND (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND
--						(JOB_TRAFFIC.COMPLETED_DATE >= @StartDate) AND 
--						(JOB_TRAFFIC.COMPLETED_DATE <= @EndDate)
--					GROUP BY JOB_LOG.CL_CODE
--					) T1
--					INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--				END
--		END    
--	ELSE
--		BEGIN
--			--Get custom column:
--			IF @Restrictions > 0
--				BEGIN
--					UPDATE #JOB_STATS
--					SET JOBS_CANCELLED = T1.JOBS_CANCELLED
--					FROM
--					(
--						SELECT
--							COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
--						FROM
--							JOB_TRAFFIC INNER JOIN
--							JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--							JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--							JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--							CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--							INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--						WHERE     
--							(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND 
--							(JOB_TRAFFIC.TRF_CODE = @CancelledCode) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--						GROUP BY JOB_LOG.CL_CODE
--					) T1
--					INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--				END
--			ELSE
--				BEGIN
--					UPDATE #JOB_STATS
--					SET JOBS_CANCELLED = T1.JOBS_CANCELLED
--					FROM
--					(
--						SELECT
--							COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
--						FROM
--							JOB_TRAFFIC INNER JOIN
--							JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--							JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--							JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--							INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--						WHERE     
--							(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND 
--							(JOB_TRAFFIC.TRF_CODE = @CancelledCode)
--						GROUP BY JOB_LOG.CL_CODE
--					) T1
--					INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--				END        
--		END    
--	END
	
--ELSE
--	BEGIN
--	IF @IsCancelled = 'true'
--		BEGIN
--			--Get jobs cancelled:
--			IF @Restrictions > 0
--				BEGIN
--					UPDATE #JOB_STATS
--					SET JOBS_CANCELLED = T1.JOBS_CANCELLED
--					FROM
--					(
--					SELECT
--						COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
--					FROM
--						JOB_TRAFFIC INNER JOIN
--						JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--						CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--					WHERE     
--						(JOB_TRAFFIC.TRF_CODE = @CancelledCode) AND (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND
--						(JOB_TRAFFIC.COMPLETED_DATE >= @StartDate) AND 
--						(JOB_TRAFFIC.COMPLETED_DATE <= @EndDate) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--					GROUP BY JOB_LOG.CL_CODE
--					) T1
--					INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--				END
--			ELSE
--				BEGIN
--					UPDATE #JOB_STATS
--					SET JOBS_CANCELLED = T1.JOBS_CANCELLED
--					FROM
--					(
--					SELECT
--						COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
--					FROM
--						JOB_TRAFFIC INNER JOIN
--						JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--					WHERE     
--						(JOB_TRAFFIC.TRF_CODE = @CancelledCode) AND (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND
--						(JOB_TRAFFIC.COMPLETED_DATE >= @StartDate) AND 
--						(JOB_TRAFFIC.COMPLETED_DATE <= @EndDate)
--					GROUP BY JOB_LOG.CL_CODE
--					) T1
--					INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--				END
--		END    
--	ELSE
--		BEGIN
--			--Get custom column:
--			IF @Restrictions > 0
--				BEGIN
--					UPDATE #JOB_STATS
--					SET JOBS_CANCELLED = T1.JOBS_CANCELLED
--					FROM
--					(
--						SELECT
--							COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
--						FROM
--							JOB_TRAFFIC INNER JOIN
--							JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--							JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--							JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--							CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--						WHERE     
--							(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND 
--							(JOB_TRAFFIC.TRF_CODE = @CancelledCode) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--						GROUP BY JOB_LOG.CL_CODE
--					) T1
--					INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--				END
--			ELSE
--				BEGIN
--					UPDATE #JOB_STATS
--					SET JOBS_CANCELLED = T1.JOBS_CANCELLED
--					FROM
--					(
--						SELECT
--							COUNT(*) AS JOBS_CANCELLED, JOB_LOG.CL_CODE
--						FROM
--							JOB_TRAFFIC INNER JOIN
--							JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--							JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--							JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--						WHERE     
--							(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND 
--							(JOB_TRAFFIC.TRF_CODE = @CancelledCode)
--						GROUP BY JOB_LOG.CL_CODE
--					) T1
--					INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--				END        
--		END 
--	END 
	


--Get jobs due:
SET @SqlStmt = ''
SET @SqlStmt = 'UPDATE #JOB_STATS
			SET JOBS_DUE = T1.JOBS_DUE
			FROM
			(
			SELECT 
				COUNT(*) AS JOBS_DUE, JOB_LOG.CL_CODE
			FROM
				JOB_TRAFFIC INNER JOIN
				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
				JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER'
			IF @OfficeRestrictions > 0 
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
			End
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN
				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE'
			End
SET @SqlStmt = @SqlStmt + '	WHERE (NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND    
				(JOB_COMPONENT.JOB_FIRST_USE_DATE >= ''' + CONVERT( varchar(10), @StartDate, 1 ) + ''') AND 
				(JOB_COMPONENT.JOB_FIRST_USE_DATE <= ''' + CONVERT( varchar(10), @EndDate, 1 ) + ''')'
			IF LEFT (@AE, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
			End
			IF LEFT (@Manager, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
			End				
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (CP_SEC_CLIENT.CDP_CONTACT_ID = ''' + CAST(@CPID AS VARCHAR) + ''')'
			End
SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.CL_CODE
			) T1
			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	'
 PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt
--IF @OfficeRestrictions > 0 
--	BEGIN
--	IF @Restrictions > 0
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_DUE = T1.JOBS_DUE
--			FROM
--			(
--			SELECT
--				COUNT(*) AS JOBS_DUE, JOB_LOG.CL_CODE
--			FROM
--				JOB_TRAFFIC INNER JOIN
--				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--				JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--				INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--			WHERE     
--				(JOB_COMPONENT.JOB_FIRST_USE_DATE >= @StartDate) AND 
--				(JOB_COMPONENT.JOB_FIRST_USE_DATE <= @EndDate) AND 
--				(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--		END
--	ELSE
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_DUE = T1.JOBS_DUE
--			FROM
--			(
--			SELECT
--				COUNT(*) AS JOBS_DUE, JOB_LOG.CL_CODE
--			FROM
--				JOB_TRAFFIC INNER JOIN
--				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--				JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--				INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--			WHERE     
--				(JOB_COMPONENT.JOB_FIRST_USE_DATE >= @StartDate) AND 
--				(JOB_COMPONENT.JOB_FIRST_USE_DATE <= @EndDate) AND 
--				(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)		
--		END
--	END
--ELSE
--	BEGIN
--		IF @Restrictions > 0
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_DUE = T1.JOBS_DUE
--			FROM
--			(
--			SELECT
--				COUNT(*) AS JOBS_DUE, JOB_LOG.CL_CODE
--			FROM
--				JOB_TRAFFIC INNER JOIN
--				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--				JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--			WHERE     
--				(JOB_COMPONENT.JOB_FIRST_USE_DATE >= @StartDate) AND 
--				(JOB_COMPONENT.JOB_FIRST_USE_DATE <= @EndDate) AND 
--				(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--		END
--	ELSE
--		BEGIN
--			UPDATE #JOB_STATS
--			SET JOBS_DUE = T1.JOBS_DUE
--			FROM
--			(
--			SELECT
--				COUNT(*) AS JOBS_DUE, JOB_LOG.CL_CODE
--			FROM
--				JOB_TRAFFIC INNER JOIN
--				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--				JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--			WHERE     
--				(JOB_COMPONENT.JOB_FIRST_USE_DATE >= @StartDate) AND 
--				(JOB_COMPONENT.JOB_FIRST_USE_DATE <= @EndDate) AND 
--				(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
--			GROUP BY JOB_LOG.CL_CODE
--			) T1
--			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)		
--		END
--	END

--*******************************************************************  

--Get jobs in progress:
SET @SqlStmt = ''
SET @SqlStmt = 'UPDATE #JOB_STATS
			SET JOBS_IN_PROGRESS = T1.JOBS_IN_PROGRESS
			FROM
			(
			SELECT 
				COUNT(*) AS JOBS_IN_PROGRESS, JOB_LOG.CL_CODE
			FROM
				JOB_TRAFFIC INNER JOIN
				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
				JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER'
			IF @OfficeRestrictions > 0 
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
			End
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN
				CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE'
			End
SET @SqlStmt = @SqlStmt + '	WHERE (NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)'
			IF LEFT (@AE, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
			End
			IF LEFT (@Manager, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
			End				
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (CP_SEC_CLIENT.CDP_CONTACT_ID = ''' + CAST(@CPID AS VARCHAR) + ''')'
			End
SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.CL_CODE
			) T1
			INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	'
 PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt
--IF @OfficeRestrictions > 0 
--	BEGIN
--		IF @Restrictions > 0
--			BEGIN
--				UPDATE #JOB_STATS
--				SET JOBS_IN_PROGRESS = T1.JOBS_IN_PROGRESS
--				FROM
--				(
--				SELECT
--					COUNT(*) AS JOBS_IN_PROGRESS, JOB_LOG.CL_CODE
--				FROM
--					JOB_TRAFFIC INNER JOIN
--					JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--					JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--					JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--					CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--					INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--				WHERE     
--					(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--				GROUP BY JOB_LOG.CL_CODE
--				) T1
--				INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--			END
--		ELSE
--			BEGIN
--				UPDATE #JOB_STATS
--				SET JOBS_IN_PROGRESS = T1.JOBS_IN_PROGRESS
--				FROM
--				(
--				SELECT
--					COUNT(*) AS JOBS_IN_PROGRESS, JOB_LOG.CL_CODE
--				FROM
--					JOB_TRAFFIC INNER JOIN
--					JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--					JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--					JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--					INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
--				WHERE     
--					(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
--				GROUP BY JOB_LOG.CL_CODE
--				) T1
--				INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	
--			END
--	END
--ELSE
--	BEGIN
--		IF @Restrictions > 0
--			BEGIN
--				UPDATE #JOB_STATS
--				SET JOBS_IN_PROGRESS = T1.JOBS_IN_PROGRESS
--				FROM
--				(
--				SELECT
--					COUNT(*) AS JOBS_IN_PROGRESS, JOB_LOG.CL_CODE
--				FROM
--					JOB_TRAFFIC INNER JOIN
--					JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--					JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--					JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
--					CP_SEC_CLIENT ON JOB_LOG.CL_CODE = CP_SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = CP_SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = CP_SEC_CLIENT.PRD_CODE
--				WHERE     
--					(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)
--				GROUP BY JOB_LOG.CL_CODE
--				) T1
--				INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)
--			END
--		ELSE
--			BEGIN
--				UPDATE #JOB_STATS
--				SET JOBS_IN_PROGRESS = T1.JOBS_IN_PROGRESS
--				FROM
--				(
--				SELECT
--					COUNT(*) AS JOBS_IN_PROGRESS, JOB_LOG.CL_CODE
--				FROM
--					JOB_TRAFFIC INNER JOIN
--					JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
--					JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
--					JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER
--				WHERE     
--					(NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
--				GROUP BY JOB_LOG.CL_CODE
--				) T1
--				INNER JOIN #JOB_STATS T2 ON (T1.CL_CODE COLLATE DATABASE_DEFAULT = T2.CL_CODE COLLATE DATABASE_DEFAULT)	
--			END
--	END


--Update summary row:
UPDATE #JOB_STATS SET JOBS_CREATED = (SELECT SUM(JOBS_CREATED) FROM #JOB_STATS) WHERE CL_CODE='ALL_CLIENTS'
UPDATE #JOB_STATS SET JOBS_COMPLETED = (SELECT SUM(JOBS_COMPLETED) FROM #JOB_STATS) WHERE CL_CODE='ALL_CLIENTS'
UPDATE #JOB_STATS SET JOBS_CANCELLED = (SELECT SUM(JOBS_CANCELLED) FROM #JOB_STATS) WHERE CL_CODE='ALL_CLIENTS'
UPDATE #JOB_STATS SET JOBS_DUE = (SELECT SUM(JOBS_DUE) FROM #JOB_STATS) WHERE CL_CODE='ALL_CLIENTS'
UPDATE #JOB_STATS SET JOBS_IN_PROGRESS = (SELECT SUM(JOBS_IN_PROGRESS) FROM #JOB_STATS) WHERE CL_CODE='ALL_CLIENTS'





--Select statement to return:
IF @Restrictions > 0
	BEGIN
		SELECT DISTINCT
		    #JOB_STATS.CL_CODE,
		    #JOB_STATS.CLIENT_DESCRIPT,
		    #JOB_STATS.JOBS_CREATED,
		    #JOB_STATS.JOBS_COMPLETED,
		    #JOB_STATS.JOBS_CANCELLED,
		    #JOB_STATS.JOBS_DUE,
		    #JOB_STATS.JOBS_IN_PROGRESS,
		    0 as num
		FROM         
		    #JOB_STATS
		WHERE     
		    (#JOB_STATS.CL_CODE = 'ALL_CLIENTS')
		UNION    
		SELECT DISTINCT
		    #JOB_STATS.CL_CODE,
		    #JOB_STATS.CLIENT_DESCRIPT,
		    #JOB_STATS.JOBS_CREATED,
		    #JOB_STATS.JOBS_COMPLETED,
		    #JOB_STATS.JOBS_CANCELLED,
		    #JOB_STATS.JOBS_DUE,
		    #JOB_STATS.JOBS_IN_PROGRESS,
		    1 as num
		FROM         
		    #JOB_STATS INNER JOIN
			CP_SEC_CLIENT ON #JOB_STATS.CL_CODE COLLATE DATABASE_DEFAULT= CP_SEC_CLIENT.CL_CODE COLLATE DATABASE_DEFAULT
		WHERE     
		    (CP_SEC_CLIENT.CDP_CONTACT_ID = @CPID)	
		Order by num
		
	END
ELSE
	BEGIN
		SELECT * FROM #JOB_STATS
	END




--Drop temporary table:
DROP TABLE #JOB_STATS

