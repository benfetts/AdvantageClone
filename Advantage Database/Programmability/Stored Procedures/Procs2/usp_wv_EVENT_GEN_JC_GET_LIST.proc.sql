
CREATE PROCEDURE [dbo].[usp_wv_EVENT_GEN_JC_GET_LIST] 
	@JOB_NUMBER INT,
	@JOB_COMPONENT_NBR SMALLINT
AS



        DECLARE @EST_NUMBER         INT,
                @EST_COMPONENT_NBR  SMALLINT,
                @EST_QUOTE_NBR      SMALLINT

        CREATE TABLE #GEN_LIST
        (
	        [EVENT_GEN_ID]     INT NULL,
	        [EVENT_GEN_LABEL]  VARCHAR(50) NULL,
	        [IS_CLIENT_APPROVED] BIT NULL,
	        [IS_INTERNAL_APPROVED] BIT NULL
        );
        	
         CREATE TABLE #DUPE_GEN_LIST
        (
	        [EVENT_GEN_ID]     INT,
	        [EVENT_GEN_LABEL]  VARCHAR(50) NULL,
	        [IS_CLIENT_APPROVED] BIT NULL,
	        [IS_INTERNAL_APPROVED] BIT NULL
        );
       --INSERT GENERATORS CREATED FROM WITHIN THE JOB/COMP:
        INSERT INTO #GEN_LIST
          (
            [EVENT_GEN_ID],
            [EVENT_GEN_LABEL]
          )
        SELECT [EVENT_GEN_ID],
               [EVENT_GEN_LABEL]
        FROM   EVENT_GEN WITH(NOLOCK)
        WHERE  JOB_NUMBER = @JOB_NUMBER
               AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;

       --INSERT GENERATORS CREATED FROM WITHIN THE JOB/COMP:
       --this is actually the table that is clean of duplicates and will be returned
        INSERT INTO #DUPE_GEN_LIST
          (
            [EVENT_GEN_ID],
            [EVENT_GEN_LABEL]
          )
        SELECT [EVENT_GEN_ID],
               [EVENT_GEN_LABEL]
        FROM   EVENT_GEN WITH(NOLOCK)
        WHERE  JOB_NUMBER = @JOB_NUMBER
               AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
               
       --GET GENERATORS THAT WERE CREATED FROM THE ESTIMATE BEFORE THE ESTIMATE WAS ASSOCIATED TO A JOB
        INSERT INTO #DUPE_GEN_LIST
          (
            [EVENT_GEN_ID],
            [EVENT_GEN_LABEL]
          )
		SELECT [EVENT_GEN_ID],
			   [EVENT_GEN_LABEL]
		FROM   EVENT_GEN WITH (NOLOCK)
			   INNER JOIN JOB_COMPONENT
					ON  EVENT_GEN.EST_NUMBER = JOB_COMPONENT.ESTIMATE_NUMBER
						AND EVENT_GEN.EST_QUOTE_NUMBER = JOB_COMPONENT.EST_COMPONENT_NBR
		WHERE  JOB_COMPONENT.JOB_NUMBER = @JOB_NUMBER
			   AND JOB_COMPONENT.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR
			   AND EVENT_GEN.EVENT_GEN_ID NOT IN (
													 SELECT [EVENT_GEN_ID]
													 FROM   EVENT_GEN WITH(NOLOCK)
													 WHERE  JOB_NUMBER = @JOB_NUMBER
															AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR
			   );

        --SEE IF THE ESTIMATE HAS BEEN CLIENT APPROVED:	
        SELECT @EST_NUMBER = ESTIMATE_NUMBER,
               @EST_COMPONENT_NBR = EST_COMPONENT_NBR,
               @EST_QUOTE_NBR = EST_QUOTE_NBR
        FROM   ESTIMATE_APPROVAL WITH(NOLOCK)
        WHERE  JOB_NUMBER = @JOB_NUMBER
               AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
               
        --ADD GENERATORS IF EST IS CLIENT APPROVED:
        IF (NOT(@EST_NUMBER IS NULL))
           AND (NOT(@EST_COMPONENT_NBR IS NULL))
           AND (NOT(@EST_QUOTE_NBR IS NULL))
        BEGIN
            INSERT INTO #GEN_LIST
              (
                [EVENT_GEN_ID],
                [EVENT_GEN_LABEL],
                [IS_CLIENT_APPROVED]
              )
            SELECT [EVENT_GEN_ID],
                   [EVENT_GEN_LABEL],1
            FROM   EVENT_GEN WITH(NOLOCK)
            WHERE  EST_NUMBER = @EST_NUMBER
                   AND EST_COMPONENT_NBR = @EST_COMPONENT_NBR
                   AND EST_QUOTE_NUMBER = @EST_QUOTE_NBR
            ;
        END
        
        --RESET THE VARIABLES:			
        SET @EST_NUMBER = NULL;	
        SET @EST_COMPONENT_NBR = NULL;
        SET @EST_QUOTE_NBR = NULL;
        
        --SEE IF THE ESTIMATE HAS BEEN INTERNALLY APPROVED:	
        SELECT @EST_NUMBER = ESTIMATE_NUMBER,
               @EST_COMPONENT_NBR = EST_COMPONENT_NBR,
               @EST_QUOTE_NBR = EST_QUOTE_NBR
        FROM   ESTIMATE_INT_APPR WITH(NOLOCK)
        WHERE  JOB_NUMBER = @JOB_NUMBER
               AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
               
        --ADD GENERATORS IF EST IS INTERNALLY APPROVED:
        IF (NOT(@EST_NUMBER IS NULL))
           AND (NOT(@EST_COMPONENT_NBR IS NULL))
           AND (NOT(@EST_QUOTE_NBR IS NULL))
        BEGIN
            INSERT INTO #GEN_LIST
              (
                [EVENT_GEN_ID],
                [EVENT_GEN_LABEL],
                [IS_INTERNAL_APPROVED]
              )
            SELECT [EVENT_GEN_ID],
                   [EVENT_GEN_LABEL],1
            FROM   EVENT_GEN WITH(NOLOCK)
            WHERE  EST_NUMBER = @EST_NUMBER
                   AND EST_COMPONENT_NBR = @EST_COMPONENT_NBR
                   AND EST_QUOTE_NUMBER = @EST_QUOTE_NBR
            ;
        END			
        
        --GET DUPLICATES
        INSERT INTO #DUPE_GEN_LIST (EVENT_GEN_ID, EVENT_GEN_LABEL)
        SELECT 
			EVENT_GEN_ID, EVENT_GEN_LABEL
        FROM 
			#GEN_LIST 
        GROUP BY 
			EVENT_GEN_ID , EVENT_GEN_LABEL
        HAVING 
			COUNT(EVENT_GEN_ID) > 1;
		
		--CURSOR TO LOOP THROUGH DISTINCT ITEMS AND UPDATE FLAGS	       
		DECLARE @CURR_EVENT_GEN_ID AS INT
        DECLARE MY_ROWS CURSOR  
        FOR
	        SELECT EVENT_GEN_ID
	        FROM   #DUPE_GEN_LIST
        ;
        OPEN MY_ROWS;
        FETCH NEXT FROM MY_ROWS INTO @CURR_EVENT_GEN_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
			--UPDATE THE CLIENT FLAG
			IF EXISTS (SELECT EVENT_GEN_ID FROM #GEN_LIST WHERE EVENT_GEN_ID = @CURR_EVENT_GEN_ID AND IS_CLIENT_APPROVED = 1)
			BEGIN
				UPDATE #DUPE_GEN_LIST
				SET IS_CLIENT_APPROVED = 1
				WHERE EVENT_GEN_ID = @CURR_EVENT_GEN_ID;
			END
			--UPDATE THE INTERNAL FLAG
			IF EXISTS (SELECT EVENT_GEN_ID FROM #GEN_LIST WHERE EVENT_GEN_ID = @CURR_EVENT_GEN_ID AND IS_INTERNAL_APPROVED = 1)
			BEGIN
				UPDATE #DUPE_GEN_LIST
				SET IS_INTERNAL_APPROVED = 1
				WHERE EVENT_GEN_ID = @CURR_EVENT_GEN_ID;
			END
	        --GO TO NEXT EVENT_GEN_ID
	        FETCH NEXT FROM MY_ROWS INTO @CURR_EVENT_GEN_ID;
        END
        CLOSE MY_ROWS;
        DEALLOCATE MY_ROWS;

        SELECT DISTINCT A.EVENT_GEN_ID, A.EVENT_GEN_LABEL + '  (' + CONVERT(VARCHAR(10),EVENT_GEN.GENERATE_DATE, 101)  + ')' AS EVENT_GEN_LABEL
        FROM
        (
		SELECT
			EVENT_GEN_ID,
			CASE
				WHEN IS_CLIENT_APPROVED = 1 AND IS_INTERNAL_APPROVED = 1 THEN CAST(EVENT_GEN_ID AS VARCHAR(50))+' - '+EVENT_GEN_LABEL + ' (CA,IA)'
				WHEN IS_CLIENT_APPROVED = 1 AND (IS_INTERNAL_APPROVED IS NULL OR IS_INTERNAL_APPROVED = 0) THEN CAST(EVENT_GEN_ID AS VARCHAR(50))+' - '+ EVENT_GEN_LABEL + ' (CA)'
				WHEN (IS_CLIENT_APPROVED IS NULL OR IS_CLIENT_APPROVED = 0) AND IS_INTERNAL_APPROVED = 1 THEN CAST(EVENT_GEN_ID AS VARCHAR(50))+' - '+ EVENT_GEN_LABEL + ' (IA)'
				ELSE CAST(EVENT_GEN_ID AS VARCHAR(50))+' - '+ EVENT_GEN_LABEL
			END AS EVENT_GEN_LABEL	
		FROM 
			#DUPE_GEN_LIST
		) AS A	INNER JOIN EVENT_GEN WITH(NOLOCK) ON A.EVENT_GEN_ID = EVENT_GEN.EVENT_GEN_ID
        ORDER BY
              A.EVENT_GEN_ID DESC--, A.EVENT_GEN_LABEL + '  (' + CONVERT(VARCHAR(10),EVENT_GEN.GENERATE_DATE, 101)  + ')' 
               
        --DROP TEMP TABLES:       
        DROP TABLE #GEN_LIST;
        DROP TABLE #DUPE_GEN_LIST;

	
	
