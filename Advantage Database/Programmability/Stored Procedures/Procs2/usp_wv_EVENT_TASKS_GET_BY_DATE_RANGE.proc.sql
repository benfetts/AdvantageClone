if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_EVENT_TASKS_GET_BY_DATE_RANGE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_EVENT_TASKS_GET_BY_DATE_RANGE]
GO


CREATE PROCEDURE [dbo].[usp_wv_EVENT_TASKS_GET_BY_DATE_RANGE] /*WITH ENCRYPTION*/
@START_DATE  SMALLDATETIME,
@END_DATE    SMALLDATETIME,
@UserID varchar(100)
AS

DECLARE @EMP_CODE AS VARCHAR(6)
DECLARE @OfficeRestrictions AS INTEGER

SELECT @EMP_CODE = EMP_CODE FROM SEC_USER WHERE UPPER(USER_CODE) = UPPER(@UserID)
SELECT @OfficeRestrictions = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CODE

/*=========== QUERY ===========*/
	SET @START_DATE =
		   CONVERT(
			   DATETIME,
			   CONVERT(CHAR(10), DATEPART(yyyy, @START_DATE), 101) 
			   +
			   '-' +
			   CONVERT(CHAR(10), DATEPART(mm, @START_DATE), 101) +
			   '-' +
			   CONVERT(CHAR(10), DATEPART(dd, @START_DATE), 101) +
			   ' 00:00:00'
		   ) 
	SET @END_DATE =
		   CONVERT(
			   DATETIME,
			   CONVERT(CHAR(10), DATEPART(yyyy, @END_DATE), 101) 
			   +
			   '-' +
			   CONVERT(CHAR(10), DATEPART(mm, @END_DATE), 101) +
			   '-' +
			   CONVERT(CHAR(10), DATEPART(dd, @END_DATE), 101) +
			   ' 23:59:00'
		   ) 


    --THE MAIN NAV THAT MOVES FROM DAY TO DAY ON THE EVENT TASK SCHEDULER
	SELECT DISTINCT
		   CONVERT(
			   DATETIME,
			   CONVERT(CHAR(10), DATEPART(yyyy, EVENT_TASK.[START_DATE]), 101) 
			   +
			   '-' +
			   CONVERT(CHAR(10), DATEPART(mm, EVENT_TASK.[START_DATE]), 101) +
			   '-' +
			   CONVERT(CHAR(10), DATEPART(dd, EVENT_TASK.[START_DATE]), 101) +
			   ' 00:00:00'
		   ) AS EVENT_TASK_DATES
	FROM   EVENT_TASK WITH(NOLOCK)
	WHERE  (EVENT_TASK.START_DATE BETWEEN @START_DATE AND @END_DATE)
	ORDER BY
		   EVENT_TASK_DATES;

	--ROLE CODE DROP DOWN IN TOOLBAR 
	SELECT     
		DISTINCT TASK_TRAFFIC_ROLE.ROLE_CODE AS TRF_ROLE_CODES, TRAFFIC_ROLE.ROLE_DESC
	FROM         
		TASK_TRAFFIC_ROLE WITH(NOLOCK) INNER JOIN
		TRAFFIC_ROLE WITH(NOLOCK) ON TASK_TRAFFIC_ROLE.ROLE_CODE = TRAFFIC_ROLE.ROLE_CODE
	WHERE     
		(TASK_TRAFFIC_ROLE.TRF_CODE IN (SELECT     DISTINCT EVENT_TASK.TASK_CODE
										FROM         EVENT_TASK WITH(NOLOCK)
										WHERE      
											(EVENT_TASK.START_DATE BETWEEN @START_DATE AND @END_DATE)
		   										))
	ORDER BY TASK_TRAFFIC_ROLE.ROLE_CODE;


if @OfficeRestrictions > 0
Begin
	SELECT JOB_LOG.JOB_NUMBER,
		   JOB_LOG.JOB_DESC,
		   JOB_LOG.CL_CODE,
		   JOB_LOG.DIV_CODE,
		   JOB_LOG.PRD_CODE,
		   JOB_LOG.OFFICE_CODE,
		   JOB_COMPONENT.JOB_COMPONENT_NBR,
		   JOB_COMPONENT.JOB_COMP_DESC,
		   EVENT.EVENT_ID,
		   EVENT.EVENT_LABEL,
		   EVENT.EVENT_DESC_LONG,
		   EVENT.EVENT_DATE,
		   EVENT.QTY_HRS AS EVENT_QTY_HRS,
		   EVENT.START_TIME AS EVENT_START_TIME,
		   EVENT.END_TIME AS EVENT_END_TIME,
		   EVENT.RESOURCE_CODE,
		   AD_NUMBER.AD_NBR,
		   AD_NUMBER.AD_NBR_DESC,
		   RESOURCE.RESOURCE_DESC,
		   EVENT.EVENT_COMMENT,
		   EVENT_TASK.EVENT_TASK_ID,
		   EVENT_TASK.TASK_CODE AS EVENT_TASK_TRF_CODE,
		   EVENT_TASK.EMP_CODE AS EVENT_TASK_EMP_CODE,
		   EVENT_TASK.START_DATE AS EVENT_TASK_DATE,
		   CONVERT(
			   DATETIME,
			   CONVERT(CHAR(10), DATEPART(yyyy, EVENT_TASK.START_DATE), 101) 
			   + '-' + CONVERT(CHAR(10), DATEPART(mm, EVENT_TASK.START_DATE), 101) + 
			   '-' + CONVERT(CHAR(10), DATEPART(dd, EVENT_TASK.START_DATE), 101) + 
			   ' 00:00:00'
		   ) AS NORMALIZED_EVENT_TASK_DATE,
		   EVENT_TASK.START_TIME AS EVENT_TASK_START_TIME,
		   EVENT_TASK.END_TIME AS EVENT_TASK_END_TIME,
		   dbo.wvfn_normalize_date(EVENT_TASK.START_DATE,EVENT_TASK.START_TIME) AS NORMALIZED_START_DATE_TIME,
		   dbo.wvfn_normalize_date(EVENT_TASK.START_DATE,EVENT_TASK.END_TIME) AS NORMALIZED_END_DATE_TIME,
		   EVENT_TASK.HOURS_ALLOWED AS EVENT_TASK_HOURS_ALLOWED,
		   EVENT_TASK.COMMENTS AS EVENT_TASK_COMMENTS,
		   EMPLOYEE.EMP_FNAME,
		   EMPLOYEE.EMP_MI,
		   EMPLOYEE.EMP_LNAME,
		   EVENT.FNC_CODE,
		   TRAFFIC_FNC.TRF_DESC,
		   FUNCTIONS.FNC_DESCRIPTION,
		   EVENT.EVENT_TYPE_ID
	FROM   JOB_LOG WITH (NOLOCK)
		   INNER JOIN JOB_COMPONENT WITH (NOLOCK)
				ON  JOB_LOG.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER
		   INNER JOIN EVENT WITH (NOLOCK)
				ON  JOB_COMPONENT.JOB_NUMBER = EVENT.JOB_NUMBER
				AND JOB_COMPONENT.JOB_COMPONENT_NBR = EVENT.JOB_COMPONENT_NBR
		   INNER JOIN EVENT_TASK WITH (NOLOCK)
				ON  EVENT.EVENT_ID = EVENT_TASK.EVENT_ID
		   INNER JOIN TRAFFIC_FNC WITH (NOLOCK)
				ON  EVENT_TASK.TASK_CODE = TRAFFIC_FNC.TRF_CODE
		   INNER JOIN FUNCTIONS
				ON  EVENT.FNC_CODE = FUNCTIONS.FNC_CODE
		   LEFT OUTER JOIN EMPLOYEE WITH (NOLOCK)
				ON  EVENT_TASK.EMP_CODE = EMPLOYEE.EMP_CODE
		   LEFT OUTER JOIN RESOURCE WITH (NOLOCK)
				ON  EVENT.RESOURCE_CODE = RESOURCE.RESOURCE_CODE
		   LEFT OUTER JOIN AD_NUMBER WITH (NOLOCK)
				ON  EVENT.AD_NUMBER = AD_NUMBER.AD_NBR
		   INNER JOIN 
				EMP_OFFICE ON JOB_LOG.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = @EMP_CODE
    WHERE  (EVENT_TASK.START_DATE BETWEEN @START_DATE AND @END_DATE)
	ORDER BY 
		NORMALIZED_EVENT_TASK_DATE,
		JOB_LOG.JOB_NUMBER,
		JOB_COMPONENT.JOB_COMPONENT_NBR,
		EVENT.RESOURCE_CODE,
		NORMALIZED_START_DATE_TIME,
		EVENT_TASK.TASK_CODE,
		EVENT.AD_NUMBER
End
Else
Begin
	SELECT JOB_LOG.JOB_NUMBER,
		   JOB_LOG.JOB_DESC,
		   JOB_LOG.CL_CODE,
		   JOB_LOG.DIV_CODE,
		   JOB_LOG.PRD_CODE,
		   JOB_LOG.OFFICE_CODE,
		   JOB_COMPONENT.JOB_COMPONENT_NBR,
		   JOB_COMPONENT.JOB_COMP_DESC,
		   EVENT.EVENT_ID,
		   EVENT.EVENT_LABEL,
		   EVENT.EVENT_DESC_LONG,
		   EVENT.EVENT_DATE,
		   EVENT.QTY_HRS AS EVENT_QTY_HRS,
		   EVENT.START_TIME AS EVENT_START_TIME,
		   EVENT.END_TIME AS EVENT_END_TIME,
		   EVENT.RESOURCE_CODE,
		   AD_NUMBER.AD_NBR,
		   AD_NUMBER.AD_NBR_DESC,
		   RESOURCE.RESOURCE_DESC,
		   EVENT.EVENT_COMMENT,
		   EVENT_TASK.EVENT_TASK_ID,
		   EVENT_TASK.TASK_CODE AS EVENT_TASK_TRF_CODE,
		   EVENT_TASK.EMP_CODE AS EVENT_TASK_EMP_CODE,
		   EVENT_TASK.START_DATE AS EVENT_TASK_DATE,
		   CONVERT(
			   DATETIME,
			   CONVERT(CHAR(10), DATEPART(yyyy, EVENT_TASK.START_DATE), 101) 
			   + '-' + CONVERT(CHAR(10), DATEPART(mm, EVENT_TASK.START_DATE), 101) + 
			   '-' + CONVERT(CHAR(10), DATEPART(dd, EVENT_TASK.START_DATE), 101) + 
			   ' 00:00:00'
		   ) AS NORMALIZED_EVENT_TASK_DATE,
		   EVENT_TASK.START_TIME AS EVENT_TASK_START_TIME,
		   EVENT_TASK.END_TIME AS EVENT_TASK_END_TIME,
		   dbo.wvfn_normalize_date(EVENT_TASK.START_DATE,EVENT_TASK.START_TIME) AS NORMALIZED_START_DATE_TIME,
		   dbo.wvfn_normalize_date(EVENT_TASK.START_DATE,EVENT_TASK.END_TIME) AS NORMALIZED_END_DATE_TIME,
		   EVENT_TASK.HOURS_ALLOWED AS EVENT_TASK_HOURS_ALLOWED,
		   EVENT_TASK.COMMENTS AS EVENT_TASK_COMMENTS,
		   EMPLOYEE.EMP_FNAME,
		   EMPLOYEE.EMP_MI,
		   EMPLOYEE.EMP_LNAME,
		   EVENT.FNC_CODE,
		   TRAFFIC_FNC.TRF_DESC,
		   FUNCTIONS.FNC_DESCRIPTION,
		   EVENT.EVENT_TYPE_ID
	FROM   JOB_LOG WITH (NOLOCK)
		   INNER JOIN JOB_COMPONENT WITH (NOLOCK)
				ON  JOB_LOG.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER
		   INNER JOIN EVENT WITH (NOLOCK)
				ON  JOB_COMPONENT.JOB_NUMBER = EVENT.JOB_NUMBER
				AND JOB_COMPONENT.JOB_COMPONENT_NBR = EVENT.JOB_COMPONENT_NBR
		   INNER JOIN EVENT_TASK WITH (NOLOCK)
				ON  EVENT.EVENT_ID = EVENT_TASK.EVENT_ID
		   INNER JOIN TRAFFIC_FNC WITH (NOLOCK)
				ON  EVENT_TASK.TASK_CODE = TRAFFIC_FNC.TRF_CODE
		   INNER JOIN FUNCTIONS
				ON  EVENT.FNC_CODE = FUNCTIONS.FNC_CODE
		   LEFT OUTER JOIN EMPLOYEE WITH (NOLOCK)
				ON  EVENT_TASK.EMP_CODE = EMPLOYEE.EMP_CODE
		   LEFT OUTER JOIN RESOURCE WITH (NOLOCK)
				ON  EVENT.RESOURCE_CODE = RESOURCE.RESOURCE_CODE
		   LEFT OUTER JOIN AD_NUMBER WITH (NOLOCK)
				ON  EVENT.AD_NUMBER = AD_NUMBER.AD_NBR
    WHERE  (EVENT_TASK.START_DATE BETWEEN @START_DATE AND @END_DATE)
	ORDER BY 
		NORMALIZED_EVENT_TASK_DATE,
		JOB_LOG.JOB_NUMBER,
		JOB_COMPONENT.JOB_COMPONENT_NBR,
		EVENT.RESOURCE_CODE,
		NORMALIZED_START_DATE_TIME,
		EVENT_TASK.TASK_CODE,
		EVENT.AD_NUMBER
End

	
/*=========== QUERY ===========*/
