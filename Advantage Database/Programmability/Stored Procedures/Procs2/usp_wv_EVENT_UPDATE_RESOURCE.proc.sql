
CREATE PROCEDURE [dbo].[usp_wv_EVENT_UPDATE_RESOURCE] 
	@EVENT_ID INT,
	@RESOURCE_CODE VARCHAR(6),
	@UPDATE_EVENT_RESOURCE BIT,
	@DELETE_ALL_EXISTING_TASKS BIT,
	@DELETE_GENERATED_TASKS BIT
	

AS

		IF @RESOURCE_CODE = ''
		BEGIN
			SET @RESOURCE_CODE = NULL;
		END
		
        DECLARE
	        --EVENT_TASK TABLE (FOR THE ACTUAL INSERT):
	        @EVENT_TASK_TASK_CODE VARCHAR(10),
	        @EVENT_TASK_EMP_CODE VARCHAR(6),
	        @EVENT_TASK_START_DATE SMALLDATETIME,
	        @EVENT_TASK_END_DATE SMALLDATETIME,
	        @EVENT_TASK_START_TIME SMALLDATETIME,
	        @EVENT_TASK_END_TIME SMALLDATETIME,
	        @EVENT_TASK_TEMP_COMP_DATE SMALLDATETIME,
	        @EVENT_TASK_HOURS_ALLOWED DECIMAL(15,2),
	        --NEEDED FROM THE EVENT TABLE:
	        @EVENT_EVENT_DATE SMALLDATETIME,
	        @EVENT_START_TIME SMALLDATETIME,
	        @EVENT_END_TIME SMALLDATETIME,
	        @EVENT_AD_NUMBER VARCHAR(30),
	        @EVENT_RESOURCE_CODE VARCHAR(6),
	        --LAST INFO:
	        @LAST_DATE AS DATETIME,
	        @LAST_START_TIME AS DATETIME,
	        @LAST_END_TIME AS DATETIME,
	        @LAST_AD_NUMBER AS VARCHAR(30),
	        @LAST_EVENT_ID AS INT;
        	
        --SET THE EVENT INFO:
        SELECT	
	        @EVENT_EVENT_DATE = EVENT_DATE,
	        @EVENT_START_TIME = START_TIME,
	        @EVENT_END_TIME = END_TIME,
	        @EVENT_AD_NUMBER = AD_NUMBER,
	        @EVENT_RESOURCE_CODE = RESOURCE_CODE
        FROM
	        [EVENT] WITH(NOLOCK)
        WHERE
	        EVENT_ID = @EVENT_ID;	
        	
        --CLEAR TASKS IF RESOURCE CODE IS SAME/DIFFERENT/NO MATTER WHAT?
        --UPDATE THE RESOURCE CODE:
        IF @RESOURCE_CODE IS NULL
        BEGIN
        	SET @UPDATE_EVENT_RESOURCE = 1;
        	SET @DELETE_ALL_EXISTING_TASKS = 1;
        END
        
        IF @UPDATE_EVENT_RESOURCE = 1
        BEGIN
        	UPDATE EVENT WITH(ROWLOCK) SET RESOURCE_CODE = @RESOURCE_CODE WHERE EVENT_ID = @EVENT_ID;
        END
        --DELETE ONLY GENERATED (ROW_TYPE = 1) EVENT TASKS
        IF @DELETE_GENERATED_TASKS = 1 AND @DELETE_ALL_EXISTING_TASKS = 0
        BEGIN
        	DELETE FROM EVENT_TASK WITH(ROWLOCK) WHERE EVENT_ID = @EVENT_ID AND ROW_TYPE = 1; -- 1= GENERATED
        END
        --THE "DELETE ALL" FLAG WILL DELETE ALL REGARDLESS OF ROW_TYPE
        IF @DELETE_ALL_EXISTING_TASKS = 1
        BEGIN
        	DELETE FROM EVENT_TASK WITH(ROWLOCK) WHERE EVENT_ID = @EVENT_ID;
        END
        
        IF NOT @RESOURCE_CODE IS NULL
        BEGIN
			  --LOOP THROUGH EACH TASK FOR THE RESOURCE AND THEN APPLY THE INSERT/UPDATE LOGIC...
			DECLARE 
					--RESOURCE_TASKS TABLE:
					@ROW_RESOURCE_TASKS_ID AS INT,
					@RESOURCE_TASKS_TASK_CODE AS VARCHAR(10),
					@RESOURCE_TASKS_HOURS_ALLOWED AS DECIMAL(8,2),
					@RESOURCE_TASKS_MINUTES_ALLOWED AS DECIMAL(8,2),
					@RESOURCE_TASKS_SET_HOURS AS DECIMAL(8,2),
					@RESOURCE_TASKS_SET_MINUTES AS INT,
					@RESOURCE_TASKS_BEFORE_AFTER AS SMALLINT,
					@RESOURCE_TASKS_CONDITION AS SMALLINT,
					@HAS_AD_NUMBER_CHANGE AS BIT;
	        		
			DECLARE MY_ROWS CURSOR
			FOR
				SELECT RESOURCE_TASKS_ID 
				FROM   RESOURCE_TASKS WITH(NOLOCK)
				WHERE  RESOURCE_CODE = @RESOURCE_CODE;

			OPEN MY_ROWS;
			FETCH NEXT FROM MY_ROWS INTO @ROW_RESOURCE_TASKS_ID;
			WHILE @@FETCH_STATUS = 0
				BEGIN
					----TEST:
					--PRINT @ROW_RESOURCE_TASKS_ID;
					--SET VARS:
					SELECT 
						@RESOURCE_TASKS_TASK_CODE = TASK_CODE,
						@RESOURCE_TASKS_HOURS_ALLOWED = ISNULL(HOURS_ALLOWED,0),
						@RESOURCE_TASKS_MINUTES_ALLOWED = ISNULL(HOURS_ALLOWED,0) * 60,
						@RESOURCE_TASKS_SET_HOURS = ISNULL(SET_HOURS,0),
						@RESOURCE_TASKS_SET_MINUTES = ISNULL(SET_HOURS,0) * 60,
						@RESOURCE_TASKS_BEFORE_AFTER = BEFORE_AFTER, -- 0 = BEFORE, 1 = AFTER
						@RESOURCE_TASKS_CONDITION = CONDITION -- 0 = ALWAYS ADD, 1 = ON AD NUMBER CHANGE
					FROM 
						RESOURCE_TASKS WITH(NOLOCK)	
					WHERE
						RESOURCE_TASKS_ID = @ROW_RESOURCE_TASKS_ID;	
				        
					--IF (@RESOURCE_TASKS_SET_HOURS = 0) OR (@RESOURCE_TASKS_SET_HOURS IS NULL)
					--BEGIN
					--    SELECT @RESOURCE_TASKS_SET_HOURS = ISNULL(QTY_HRS,0) FROM EVENT WITH(NOLOCK) WHERE EVENT_ID = @EVENT_ID;
					--    SET @RESOURCE_TASKS_SET_MINUTES = @RESOURCE_TASKS_SET_HOURS * 60;
					--END  
				     
					--SET THE "LAST" INFO:
						SELECT 
							@LAST_DATE = A.EVENT_DATE,
							@LAST_START_TIME = A.START_TIME,
							@LAST_END_TIME = A.END_TIME,
							@LAST_AD_NUMBER = A.AD_NUMBER,
							@LAST_EVENT_ID = EVENT_ID
						FROM
						(
							SELECT     
								TOP 1 MAX(EVENT_DATE) AS EVENT_DATE, 
								START_TIME, 
								END_TIME, 
								AD_NUMBER, 
								EVENT_ID
							FROM         
								EVENT WITH(NOLOCK)
							WHERE
								(EVENT_ID <> @EVENT_ID) 
								AND RESOURCE_CODE = @RESOURCE_CODE	
								AND EVENT_DATE < @EVENT_EVENT_DATE
							GROUP BY 
								START_TIME, END_TIME, AD_NUMBER, EVENT_ID
							ORDER BY 
								MAX(EVENT_DATE) DESC
						) AS A;
	        		    
			--		--TEST:
			--		SELECT @LAST_DATE, @LAST_START_TIME,@LAST_END_TIME,@LAST_AD_NUMBER,@LAST_EVENT_ID;
			--		--TEST:
			--		SELECT @EVENT_AD_NUMBER AS EVENT_AD_NUMBER, @LAST_AD_NUMBER AS LAST_AD_NUMBER;

					--SET FLAG:
					IF ISNULL(@EVENT_AD_NUMBER,'') <> ISNULL(@LAST_AD_NUMBER,'')
						BEGIN
							SET @HAS_AD_NUMBER_CHANGE = 1;
						END	
					ELSE
						BEGIN
							SET @HAS_AD_NUMBER_CHANGE = 0;
						END	
	        			
			--		--TEST:
			--		SELECT @HAS_AD_NUMBER_CHANGE AS HAS_AD_NUMBER_CHANGE,@RESOURCE_TASKS_CONDITION AS RESOURCE_TASKS_CONDITION,@RESOURCE_TASKS_TASK_CODE AS RESOURCE_TASKS_TASK_CODE;
	        		
					--SET THE DATES AND STUFF:
					--================================================================================================
					--A. SET THE START TIME BASED ON "SET HOURS" AND "BEFORE/AFTER"
					IF @RESOURCE_TASKS_BEFORE_AFTER = 0 --BEFORE
						BEGIN
							SET @EVENT_TASK_START_DATE = DATEADD(minute,@RESOURCE_TASKS_SET_MINUTES * -1,@EVENT_START_TIME);
							SET @EVENT_TASK_START_TIME = DATEADD(minute,@RESOURCE_TASKS_SET_MINUTES * -1,@EVENT_START_TIME);	
						END
					ELSE --
						BEGIN
							SET @EVENT_TASK_START_DATE = DATEADD(minute,@RESOURCE_TASKS_SET_MINUTES,@EVENT_END_TIME);
							SET @EVENT_TASK_START_TIME = DATEADD(minute,@RESOURCE_TASKS_SET_MINUTES,@EVENT_END_TIME);	
						END	

					--B.  SET THE END TIME BASED ON THE STEP A's CALCULATED START AND THE HOURS ALLOWED??
					SET @EVENT_TASK_END_DATE = DATEADD(minute,@RESOURCE_TASKS_MINUTES_ALLOWED,@EVENT_TASK_START_DATE);
					SET @EVENT_TASK_END_TIME = DATEADD(minute,@RESOURCE_TASKS_MINUTES_ALLOWED,@EVENT_TASK_START_TIME);
			--		--TEST:
			--		SELECT 
			--			@EVENT_START_TIME AS EVENT_START_TIME, 
			--			@EVENT_TASK_START_TIME AS EVENT_TASK_START_TIME, 
			--			@RESOURCE_TASKS_TASK_CODE AS RESOURCE_TASKS_TASK_CODE,
			--			@RESOURCE_TASKS_MINUTES_ALLOWED AS RESOURCE_TASKS_MINUTES_ALLOWED,
			--			@EVENT_TASK_END_DATE AS EVENT_TASK_END_DATE,
			--			@EVENT_TASK_END_TIME AS EVENT_TASK_END_TIME;


					--APPLY ADD LOGIC HERE:
					--================================================================================================
					IF (@RESOURCE_TASKS_CONDITION = 0) OR (@HAS_AD_NUMBER_CHANGE = 1 AND @RESOURCE_TASKS_CONDITION = 1)
						BEGIN
							IF (@RESOURCE_TASKS_SET_HOURS = 0) OR (@RESOURCE_TASKS_SET_HOURS IS NULL)
							BEGIN
								SELECT 
									@RESOURCE_TASKS_HOURS_ALLOWED = ISNULL(QTY_HRS,0),
									--set date and time columns too!
									@EVENT_TASK_START_DATE = EVENT_DATE,
									@EVENT_TASK_END_DATE = EVENT_DATE,
									@EVENT_TASK_START_TIME = START_TIME,
									@EVENT_TASK_END_TIME = END_TIME
								FROM 
									EVENT WITH(NOLOCK) 
								WHERE 
									EVENT_ID = @EVENT_ID;
							END  

							INSERT INTO EVENT_TASK
							(
								EVENT_ID,
								TASK_CODE,
								EMP_CODE,
								[START_DATE],
								END_DATE,
								START_TIME,
								END_TIME,
								TEMP_COMP_DATE,
								HOURS_ALLOWED,
								COMMENTS,
								COMPLETED_COMMENTS,
								ROW_TYPE -- 1= GENERATED
							)
							VALUES
							(
								@EVENT_ID,
								@RESOURCE_TASKS_TASK_CODE,
								NULL,
								@EVENT_TASK_START_DATE,
								@EVENT_TASK_END_DATE,
								@EVENT_TASK_START_TIME,
								@EVENT_TASK_END_TIME,
								NULL,
								@RESOURCE_TASKS_HOURS_ALLOWED,
								NULL,
								NULL,
								1
							)
						END
					--CLEAR VARIABLES BEFORE LOOPING TO NEXT TASK:
	    				SET @RESOURCE_TASKS_TASK_CODE = NULL
						SET @RESOURCE_TASKS_HOURS_ALLOWED = 0
						SET @RESOURCE_TASKS_MINUTES_ALLOWED = 0
						SET @RESOURCE_TASKS_SET_HOURS = 0
						SET @RESOURCE_TASKS_SET_MINUTES = 0
						SET @RESOURCE_TASKS_BEFORE_AFTER = NULL
						SET @RESOURCE_TASKS_CONDITION = NULL
						SET @LAST_DATE = NULL
						SET @LAST_START_TIME = NULL
						SET @LAST_END_TIME = NULL
						SET @LAST_AD_NUMBER = NULL
						SET @LAST_EVENT_ID = NULL
						SET @HAS_AD_NUMBER_CHANGE = 0

					--GO TO NEXT EVENT:
					FETCH NEXT FROM MY_ROWS INTO @ROW_RESOURCE_TASKS_ID;
				END;
			CLOSE MY_ROWS;
			DEALLOCATE MY_ROWS;	  

      	
        END
           	
