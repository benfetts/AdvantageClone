if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_Project_Status_Data_Week]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_Project_Status_Data_Week]
GO

CREATE PROCEDURE [dbo].[usp_wv_Project_Status_Data_Week] 
	@JOB_NUMBER     INT,
	@JOB_COMPONENT_NBR  INT,
	@Quoted INT

AS

    SET ANSI_NULLS ON
    SET ANSI_WARNINGS OFF
    SET ARITHABORT OFF
    SET ARITHIGNORE ON


		CREATE TABLE #PROJECT_MONTH --MASTER TABLE TO RETURN
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[WEEK] int,
			[YEAR] int,
			[WEEK_START] datetime,
			[WEEK_END] datetime,
			[QUOTED_HOURS] DECIMAL(17,4),
	        [QUOTED_HRS_AMT] DECIMAL(17,4),
			[FORECAST_HOURS] DECIMAL(17,4),
			[FORECAST_HRS_AMT] DECIMAL(17,4),
			[HOURS_ALLOWED] DECIMAL(17,4),
			[HOURS_ALLOWED_AMT] DECIMAL(17,4),
			[ACTUAL_HOURS] DECIMAL(17,4),
			[ACTUAL_HOURS_AMT] DECIMAL(17,4)
        );
       
       CREATE TABLE #PROJECT_TASK_ADJ --MASTER TABLE TO RETURN
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[SEQ_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[ADJ_DATE] datetime,
			[ADJ_WEEK] int,
			[ADJ_YEAR] int,
			[WEEK_START] datetime,
			[WEEK_END] datetime,
	        [EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[WORK_DAYS] int,
			[ADJ_HOURS_ALLOWED] DECIMAL(17,4),
	        [BILL_RATE] DECIMAL(17,4),
			[IS_WORK_DAY] SMALLINT,
			[EMP_HOURS] DECIMAL(17,4)
        );

		CREATE TABLE #PROJECT_TASK_LIST 
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[SEQ_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[START_DATE] datetime,
			[END_DATE] datetime,
	        [EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[HOURS_ALLOWED] DECIMAL(17,4),
			[ACTUAL_HOURS] DECIMAL(17,4),
			[ACTUAL_AMT] DECIMAL(17,4),
			[PERC_SCHEDULE] DECIMAL(17,4)
        );

		CREATE TABLE #PROJECT_FORECAST
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[FORECAST_HOURS] DECIMAL(17,4),
			[FORECAST_AMT] DECIMAL(17,4),
			[WEEK] int,
			[YEAR] int
        );

		CREATE TABLE #PROJECT_QUOTED
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[QUOTED_HOURS] DECIMAL(17,4),
			[QUOTED_AMT] DECIMAL(17,4),
			--[WORK_DAYS] int,
			[WEEK] int,
			[YEAR] int,
			[WEEK_START] datetime,
			[WEEK_END] datetime,
        );

		CREATE TABLE #PROJECT_ACTUAL
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[ACTUAL_HOURS] DECIMAL(17,4),
			[ACTUAL_AMT] DECIMAL(17,4),
			--[WORK_DAYS] int,
			[WEEK] int,
			[YEAR] int,
			[WEEK_START] datetime,
			[WEEK_END] datetime,
        );

		CREATE TABLE #WORK_DAYS
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[WEEK] int,
			[YEAR] int,
			[WORK_DATE] datetime,
			[WEEK_START] datetime,
			[WEEK_END] datetime,
        );

		CREATE TABLE #WORK_DAY --Table of employee workdays
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
	        [EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	        [WORK_DATE]               SMALLDATETIME,
	        [STD_HRS]  DECIMAL(18,6),
        );

		--GENERATE LIST OF DISTINCT EMPS:
		DECLARE @EMP_LIST VARCHAR(8000), @START_DATE_MIN SMALLDATETIME, @END_DATE_MAX SMALLDATETIME
		SET @EMP_LIST = '';
		SELECT @EMP_LIST = @EMP_LIST + A.EMP_CODE + ','
			    FROM   (
						    SELECT     
							    DISTINCT JOB_TRAFFIC_DET_EMPS.EMP_CODE AS EMP_CODE
						    FROM         
								JOB_TRAFFIC_DET_EMPS WITH (NOLOCK) INNER JOIN
								JOB_COMPONENT ON JOB_TRAFFIC_DET_EMPS.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
								JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
								JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						    WHERE     
							    JOB_TRAFFIC_DET_EMPS.JOB_NUMBER = @JOB_NUMBER AND JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR
				       ) AS A;

		 --Find min and max dates for schedule
		 SELECT @START_DATE_MIN = MIN(TASK_START_DATE), @END_DATE_MAX = MAX(JOB_REVISED_DATE)
				FROM         
					V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
					JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
					JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE V_JOB_TRAFFIC_DET.JOB_NUMBER = @JOB_NUMBER AND V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR 				  		
		
		--SELECT @EMP_LIST,@START_DATE_MIN,@END_DATE_MAX	  
        --Calculate work days and std hrs
		INSERT INTO #WORK_DAY (EMP_CODE, WORK_DATE, STD_HRS)
				SELECT fn.emp_code, fn.workday, fn.std_hours
				FROM [dbo].[udf_get_std_hrs_wl] ( @START_DATE_MIN, @END_DATE_MAX, @EMP_LIST) fn
	 			WHERE ( fn.std_hours <> 0.00 )
				
		--SELECT * FROM #WORK_DAY			

        
		INSERT INTO #PROJECT_TASK_LIST
		SELECT  V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, V_JOB_TRAFFIC_DET.SEQ_NBR, V_JOB_TRAFFIC_DET.FNC_EST,
		 V_JOB_TRAFFIC_DET.TASK_START_DATE, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE, V_JOB_TRAFFIC_DET.EMP_CODE, ISNULL(V_JOB_TRAFFIC_DET.JOB_HRS,0), 0, 0, 0
		FROM   V_JOB_TRAFFIC_DET 
		WHERE     (V_JOB_TRAFFIC_DET.JOB_NUMBER = @JOB_NUMBER) AND (V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
		ORDER BY V_JOB_TRAFFIC_DET.TASK_START_DATE

		--TEST
		

        DECLARE @DAY_COUNT      AS INTEGER,
				@DAY_INCREMENT  AS INTEGER,
				@ADJ_HOURS AS DECIMAL(17,4),
				@IS_WORK_DAY AS INTEGER,
				@WORK_DAYS_TODAY AS DECIMAL(15,5),
				@WORK_DAYS_TOTAL AS DECIMAL(15,5),
				@CURR_DAY_OF_YEAR AS INT,
				@CURR_YEAR AS INT
        DECLARE @CURR_JOB_NUMBER AS INT,
	        @CURR_JOB_COMPONENT_NBR     INT,
	        @CURR_SEQ_NBR     INT,
	        @CURR_EST_FUNC     VARCHAR(6),
	        @CURR_START_DATE     SMALLDATETIME,
	        @CURR_END_DATE     SMALLDATETIME,
	        @CURR_EMP_CODE     VARCHAR(6),
	        @CURR_HOURS_ALLOWED     DECIMAL(17,4),
			@CURR_ACTUAL_HOURS     DECIMAL(17,4),
			@SUM_ACTUAL_HOURS     DECIMAL(17,4),
	        @CURR_BILL_RATE     DECIMAL(17,4),
			@CURR_ROW_ID		INT,
	        @CURR_CL_CODE   VARCHAR(6),
	        @CURR_DIV_CODE     VARCHAR(6),
	        @CURR_PRD_CODE     VARCHAR(6),
	        @CURR_SC_CODE     VARCHAR(6),
			@CURR_DAY_OF_WEEK SMALLINT,			
			@ROW_BILLING_RATE  DECIMAL(9,3),
			@ROW_RATE_LEVEL  SMALLINT,
			@ROW_TAX_CODE  VARCHAR(4),
			@ROW_TAX_LEVEL SMALLINT,
			@ROW_NOBILL_FLAG SMALLINT,
			@ROW_NOBILL_LEVEL SMALLINT,
			@ROW_COMM DECIMAL(9,3),
			@ROW_COMM_LEVEL SMALLINT,
			@ROW_TAX_COMM SMALLINT,
			@ROW_TAX_COMM_ONLY SMALLINT,
			@ROW_TAX_COMM_FLAGS_LEVEL SMALLINT,
			@ROW_FEE_TIME_FLAG SMALLINT,
			@ROW_FEE_TIME_LEVEL SMALLINT
			;

		if @Quoted = 1
		Begin
		
        DECLARE MY_ROWS                         CURSOR  
        FOR
	        SELECT ROW_ID
	        FROM   #PROJECT_TASK_LIST
        ;
        OPEN MY_ROWS;
        FETCH NEXT FROM MY_ROWS INTO @CURR_ROW_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
	        SELECT @CURR_JOB_NUMBER = JOB_NUMBER, @CURR_JOB_COMPONENT_NBR = JOB_COMPONENT_NBR,
	        @CURR_SEQ_NBR = SEQ_NBR, 
	        @CURR_EST_FUNC = EST_FUNC,
	        @CURR_START_DATE = [START_DATE], 
	        @CURR_END_DATE = END_DATE,
	        @CURR_EMP_CODE = EMP_CODE, 
	        @CURR_HOURS_ALLOWED = HOURS_ALLOWED FROM #PROJECT_TASK_LIST WHERE ROW_ID = @CURR_ROW_ID;
			SET @CURR_ACTUAL_HOURS = 0
			SELECT @CURR_CL_CODE = CL_CODE, @CURR_DIV_CODE = DIV_CODE, @CURR_PRD_CODE = PRD_CODE, @CURR_SC_CODE = SC_CODE
			FROM JOB_LOG 
			WHERE JOB_NUMBER = @CURR_JOB_NUMBER
			-- GET DAYS (LOOP)
					--=================================================================================================
								                
					SET @DAY_INCREMENT = -1;
					SELECT @DAY_COUNT = DATEDIFF(dd, @CURR_START_DATE, @CURR_END_DATE) + 1;
			        --SET @ADJ_HOURS = @CURR_HOURS_ALLOWED / [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE,1)
					SET @ADJ_HOURS = @CURR_HOURS_ALLOWED / (SELECT COUNT(*) FROM #WORK_DAY WHERE EMP_CODE = @CURR_EMP_CODE 
																AND WORK_DATE >= @CURR_START_DATE AND WORK_DATE <= @CURR_END_DATE 
																AND (NOT EXISTS (SELECT ent.NON_TASK_ID 
															   FROM dbo.EMP_NON_TASKS ent INNER JOIN
																TIME_CATEGORY ON ent.CATEGORY = TIME_CATEGORY.CATEGORY
															  WHERE ent.[TYPE] = 'A' AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) 
																AND ent.ALL_DAY = 1 
																AND (WORK_DATE BETWEEN ent.[START_DATE] AND ent.[END_DATE] )
																AND (ent.EMP_CODE = #WORK_DAY.EMP_CODE)
															)))
					EXECUTE dbo.usp_wv_Estimating_GetBillingRates
									@THIS_FNC_CODE = @CURR_EST_FUNC,
									@THIS_JOB_NUMBER = @CURR_JOB_NUMBER,
									@THIS_JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR,
									@THIS_CL_CODE = @CURR_CL_CODE,
									@THIS_DIV_CODE = @CURR_DIV_CODE,
									@THIS_PRD_CODE = @CURR_PRD_CODE,
									@THIS_SC_CODE = @CURR_SC_CODE,
									@THIS_EMP_CODE = @CURR_EMP_CODE, 
									@THIS_EMP_TITLE_ID = NULL,  
									@THIS_BILLING_RATE = @ROW_BILLING_RATE OUTPUT,
									@THIS_RATE_LEVEL = @ROW_RATE_LEVEL OUTPUT,
									@THIS_TAX_CODE = @ROW_TAX_CODE OUTPUT,
									@THIS_TAX_LEVEL = @ROW_TAX_LEVEL OUTPUT,
									@THIS_NOBILL_FLAG = @ROW_NOBILL_FLAG OUTPUT,
									@THIS_NOBILL_LEVEL = @ROW_NOBILL_LEVEL OUTPUT,
									@THIS_COMM = @ROW_COMM OUTPUT,
									@THIS_COMM_LEVEL = @ROW_COMM_LEVEL OUTPUT,
									@THIS_TAX_COMM = @ROW_TAX_COMM OUTPUT,
									@THIS_TAX_COMM_ONLY = @ROW_TAX_COMM_ONLY OUTPUT,
									@THIS_TAX_COMM_FLAGS_LEVEL = @ROW_TAX_COMM_FLAGS_LEVEL OUTPUT,
									@THIS_FEE_TIME_FLAG = @ROW_FEE_TIME_FLAG OUTPUT,
									@THIS_FEE_TIME_LEVEL = @ROW_FEE_TIME_LEVEL OUTPUT;
			--        --TEST:
			--        SELECT @DAY_COUNT AS DAY_COUNT;


					INSERT INTO #PROJECT_TASK_ADJ
						SELECT @CURR_JOB_NUMBER, @CURR_JOB_COMPONENT_NBR, @CURR_SEQ_NBR, @CURR_EST_FUNC, WORK_DATE,
							DATEPART(wk, WORK_DATE),
							DATEPART(yy, WORK_DATE),
							DATEADD(dd, -(DATEPART(dw, WORK_DATE)-1), WORK_DATE),
							DATEADD(dd, 7-(DATEPART(dw, WORK_DATE)), WORK_DATE),
							EMP_CODE,
							(SELECT COUNT(*) FROM #WORK_DAY WHERE EMP_CODE = @CURR_EMP_CODE 
									AND WORK_DATE >= @CURR_START_DATE AND WORK_DATE <= @CURR_END_DATE
									AND (NOT EXISTS (SELECT ent.NON_TASK_ID 
															   FROM dbo.EMP_NON_TASKS ent INNER JOIN
																TIME_CATEGORY ON ent.CATEGORY = TIME_CATEGORY.CATEGORY
															  WHERE ent.[TYPE] = 'A' AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) 
																AND ent.ALL_DAY = 1 
																AND (WORK_DATE BETWEEN ent.[START_DATE] AND ent.[END_DATE] )
																AND (ent.EMP_CODE = #WORK_DAY.EMP_CODE)
															))),
							@ADJ_HOURS,
							@ROW_BILLING_RATE,
							1,
							(SELECT ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0)
							FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
							WHERE (EMP_TIME_DTL.JOB_NUMBER = @CURR_JOB_NUMBER) AND (EMP_TIME_DTL.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
							  AND (EMP_TIME.EMP_DATE = WORK_DATE) AND (EMP_TIME_DTL.EMP_HOURS <> 0))
						FROM #WORK_DAY
						WHERE EMP_CODE = @CURR_EMP_CODE AND WORK_DATE >= @CURR_START_DATE AND WORK_DATE <= @CURR_END_DATE
			        
					--WHILE @DAY_COUNT > 0
					--BEGIN
					--	SET @IS_WORK_DAY = 0
					--	SET @CURR_DAY_OF_WEEK = DATEPART(dw, DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE))
					--	SET @CURR_DAY_OF_YEAR = DATEPART(dayofyear, DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE))
					--	SET @CURR_YEAR = DATEPART(yy,DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE)) 
					--	IF @CURR_DAY_OF_WEEK = 1 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sun%')
					--		AND NOT EXISTS (
					--		SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		   --     				WHERE 
					--			[TYPE] = 'H'	
					--			AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					--			AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					--			AND ALL_DAY = 1)
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 2 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Mon%')
					--		AND NOT EXISTS (
					--		SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		   --     				WHERE 
					--			[TYPE] = 'H'	
					--			AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					--			AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					--			AND ALL_DAY = 1)
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 3 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Tue%')
					--		AND NOT EXISTS (
					--		SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		   --     				WHERE 
					--			[TYPE] = 'H'	
					--			AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					--			AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					--			AND ALL_DAY = 1)
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 4 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Wed%')
					--		AND NOT EXISTS (
					--		SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		   --     				WHERE 
					--			[TYPE] = 'H'	
					--			AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					--			AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					--			AND ALL_DAY = 1)
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 5 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Thu%')
					--		AND NOT EXISTS (
					--		SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		   --     				WHERE 
					--			[TYPE] = 'H'	
					--			AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					--			AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					--			AND ALL_DAY = 1)
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 6 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Fri%')
					--		AND NOT EXISTS (
					--		SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		   --     				WHERE 
					--			[TYPE] = 'H'	
					--			AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					--			AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					--			AND ALL_DAY = 1)
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 7 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sat%')
					--		AND NOT EXISTS (
					--		SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		   --     				WHERE 
					--			[TYPE] = 'H'	
					--			AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					--			AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					--			AND ALL_DAY = 1)
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END

					--	SELECT @CURR_ACTUAL_HOURS = ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0)
					--	FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
					--	WHERE (EMP_TIME_DTL.JOB_NUMBER = @CURR_JOB_NUMBER) AND (EMP_TIME_DTL.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
					--		  AND (EMP_TIME.EMP_DATE = DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE)) AND (EMP_TIME_DTL.EMP_HOURS <> 0)

					--	INSERT INTO #PROJECT_TASK_ADJ
					--	  (
					--		[JOB_NUMBER],
					--		[JOB_COMPONENT_NBR],
					--		[SEQ_NBR],
					--		[EST_FUNC],
					--		[ADJ_DATE],
					--		[ADJ_WEEK],
					--		[ADJ_YEAR],
					--		[WEEK_START],
					--		[WEEK_END],
					--		[EMP_CODE],
					--		[WORK_DAYS],
					--		[ADJ_HOURS_ALLOWED],
					--		[BILL_RATE],
					--		[IS_WORK_DAY],
					--		[EMP_HOURS]
					--	  )
					--	VALUES
					--	  (
					--		@CURR_JOB_NUMBER,
					--		@CURR_JOB_COMPONENT_NBR,
					--		@CURR_SEQ_NBR, 
					--		@CURR_EST_FUNC,
					--		DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE),
					--		DATEPART(wk, @CURR_START_DATE),
					--		DATEPART(yy, @CURR_START_DATE),
					--		DATEADD(dd, -(DATEPART(dw, @CURR_START_DATE)-1), @CURR_START_DATE),
					--		DATEADD(dd, 7-(DATEPART(dw, @CURR_START_DATE)), @CURR_START_DATE),
					--		@CURR_EMP_CODE, 
					--		[dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE,1),
					--		@ADJ_HOURS,
					--		@ROW_BILLING_RATE,
					--		@IS_WORK_DAY,
					--		@CURR_ACTUAL_HOURS	
					--	  );
					--	SET @DAY_INCREMENT = @DAY_INCREMENT + 1;
					--	SET @DAY_COUNT = @DAY_COUNT - 1;
					--END
			--		UPDATE #DAY_RANGE SET [DATE] = @END_DATE WHERE [DATE] = (SELECT MAX([DATE]) FROM #DAY_RANGE)
			--        --TEST:
			--        SELECT * FROM #DAY_RANGE;
			
			SELECT @CURR_ACTUAL_HOURS = ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0)
			FROM EMP_TIME_DTL INNER JOIN
                 EMP_TIME ON EMP_TIME_DTL.ET_ID = EMP_TIME.ET_ID INNER JOIN
                 V_JOB_TRAFFIC_DET ON EMP_TIME_DTL.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND 
                 EMP_TIME_DTL.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR AND 
                 EMP_TIME_DTL.FNC_CODE = V_JOB_TRAFFIC_DET.FNC_EST AND EMP_TIME.EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
			WHERE (V_JOB_TRAFFIC_DET.JOB_NUMBER = @CURR_JOB_NUMBER) AND (V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)

			UPDATE #PROJECT_TASK_LIST SET ACTUAL_HOURS = @CURR_ACTUAL_HOURS, ACTUAL_AMT = (@CURR_ACTUAL_HOURS * @ROW_BILLING_RATE)
			WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
				  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)

			--SET @WORK_DAYS_TODAY = [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,GETDATE(),1)
			--SET @WORK_DAYS_TOTAL = [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE,1)
			SET @WORK_DAYS_TODAY = (SELECT COUNT(*) FROM #WORK_DAY WHERE EMP_CODE = @CURR_EMP_CODE 
																AND WORK_DATE >= @CURR_START_DATE AND WORK_DATE <= GETDATE()
																AND (NOT EXISTS (SELECT ent.NON_TASK_ID 
															   FROM dbo.EMP_NON_TASKS ent INNER JOIN
																TIME_CATEGORY ON ent.CATEGORY = TIME_CATEGORY.CATEGORY
															  WHERE ent.[TYPE] = 'A' AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) 
																AND ent.ALL_DAY = 1 
																AND (WORK_DATE BETWEEN ent.[START_DATE] AND ent.[END_DATE] )
																AND (ent.EMP_CODE = #WORK_DAY.EMP_CODE)
															)))
			SET @WORK_DAYS_TOTAL = (SELECT COUNT(*) FROM #WORK_DAY WHERE EMP_CODE = @CURR_EMP_CODE 
																AND WORK_DATE >= @CURR_START_DATE AND WORK_DATE <= @CURR_END_DATE
																AND (NOT EXISTS (SELECT ent.NON_TASK_ID 
															   FROM dbo.EMP_NON_TASKS ent INNER JOIN
																TIME_CATEGORY ON ent.CATEGORY = TIME_CATEGORY.CATEGORY
															  WHERE ent.[TYPE] = 'A' AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) 
																AND ent.ALL_DAY = 1 
																AND (WORK_DATE BETWEEN ent.[START_DATE] AND ent.[END_DATE] )
																AND (ent.EMP_CODE = #WORK_DAY.EMP_CODE)
															)))
			
			IF @CURR_START_DATE <= GETDATE() AND @CURR_END_DATE >= GETDATE()
			BEGIN				
				UPDATE #PROJECT_TASK_LIST SET PERC_SCHEDULE = (@WORK_DAYS_TODAY / @WORK_DAYS_TOTAL) * 100
				WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
				  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)
			END
			ELSE IF @CURR_START_DATE > GETDATE()
			BEGIN
				UPDATE #PROJECT_TASK_LIST SET PERC_SCHEDULE = 0
				WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
				  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)
			END
			ELSE 
			BEGIN
				UPDATE #PROJECT_TASK_LIST SET PERC_SCHEDULE = 100
				WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
				  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)
			END

	        --GO TO NEXT EVENT
	        FETCH NEXT FROM MY_ROWS INTO @CURR_ROW_ID;
        END
        CLOSE MY_ROWS;
        DEALLOCATE MY_ROWS;

		End

  --      SELECT * FROM #PROJECT_TASK_LIST
		--SELECT * FROM #PROJECT_TASK_ADJ

		DECLARE @HAS_EST_APPR   AS INTEGER,
				@HAS_EST_INT_APPR  AS INTEGER,
				@QUOTED_HOURS AS DECIMAL(17,4),
				@QUOTED_AMT AS DECIMAL(17,4),
				@FORECAST_HOURS AS DECIMAL(17,4),
				@FORECAST_AMT AS DECIMAL(17,4),
				@FORECAST_HOURS_AE AS DECIMAL(17,4),
				@FORECAST_AMT_AE AS DECIMAL(17,4), @sd as datetime, @ed as datetime, @workdaystotal AS DECIMAL(15,5),
				@CURR_DATE         SMALLDATETIME,
				@CTR               INT,
				@WORKING_DAYS      DECIMAL(17,4)
		IF EXISTS(SELECT JOB_NUMBER FROM ESTIMATE_APPROVAL WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
		BEGIN
			SET @HAS_EST_APPR = 1
		END
		IF EXISTS(SELECT JOB_NUMBER FROM ESTIMATE_INT_APPR WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
		BEGIN
			SET @HAS_EST_INT_APPR = 1
		END

		SET @QUOTED_HOURS = 0
		IF @HAS_EST_APPR = 1 
		BEGIN
			SELECT @QUOTED_HOURS =  ISNULL(SUM(ESTIMATE_REV_DET.EST_REV_QUANTITY),0), @QUOTED_AMT = ISNULL(SUM(ESTIMATE_REV_DET.EST_REV_EXT_AMT),0)
			FROM         JOB_COMPONENT INNER JOIN
								  ESTIMATE_REV_DET ON JOB_COMPONENT.ESTIMATE_NUMBER = ESTIMATE_REV_DET.ESTIMATE_NUMBER AND 
								  JOB_COMPONENT.EST_COMPONENT_NBR = ESTIMATE_REV_DET.EST_COMPONENT_NBR INNER JOIN
								  ESTIMATE_APPROVAL ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = ESTIMATE_APPROVAL.ESTIMATE_NUMBER AND 
								  ESTIMATE_REV_DET.EST_COMPONENT_NBR = ESTIMATE_APPROVAL.EST_COMPONENT_NBR AND 
								  ESTIMATE_REV_DET.EST_QUOTE_NBR = ESTIMATE_APPROVAL.EST_QUOTE_NBR AND 
								  ESTIMATE_REV_DET.EST_REV_NBR = ESTIMATE_APPROVAL.EST_REVISION_NBR INNER JOIN
								  JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
								  JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
			WHERE     (JOB_COMPONENT.JOB_NUMBER = @JOB_NUMBER) AND (JOB_COMPONENT.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR) AND ESTIMATE_REV_DET.EST_FNC_TYPE = 'E'
		END
		ELSE IF @HAS_EST_INT_APPR = 1
		BEGIN
			SELECT @QUOTED_HOURS =  ISNULL(SUM(ESTIMATE_REV_DET.EST_REV_QUANTITY),0), @QUOTED_AMT = ISNULL(SUM(ESTIMATE_REV_DET.EST_REV_EXT_AMT),0)
			FROM         JOB_COMPONENT INNER JOIN
								  ESTIMATE_REV_DET ON JOB_COMPONENT.ESTIMATE_NUMBER = ESTIMATE_REV_DET.ESTIMATE_NUMBER AND 
								  JOB_COMPONENT.EST_COMPONENT_NBR = ESTIMATE_REV_DET.EST_COMPONENT_NBR INNER JOIN
								  ESTIMATE_INT_APPR ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = ESTIMATE_INT_APPR.ESTIMATE_NUMBER AND 
								  ESTIMATE_REV_DET.EST_COMPONENT_NBR = ESTIMATE_INT_APPR.EST_COMPONENT_NBR AND 
								  ESTIMATE_REV_DET.EST_QUOTE_NBR = ESTIMATE_INT_APPR.EST_QUOTE_NBR AND 
								  ESTIMATE_REV_DET.EST_REV_NBR = ESTIMATE_INT_APPR.EST_REVISION_NBR INNER JOIN
								  JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
								  JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
			WHERE     (JOB_COMPONENT.JOB_NUMBER = @JOB_NUMBER) AND (JOB_COMPONENT.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR) AND ESTIMATE_REV_DET.EST_FNC_TYPE = 'E'
		END

		--SELECT @QUOTED_HOURS,@QUOTED_AMT		

		INSERT INTO #PROJECT_MONTH
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, ADJ_WEEK, ADJ_YEAR, WEEK_START, WEEK_END, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT,
				SUM(ADJ_HOURS_ALLOWED) AS HOURS_ALLOWED, SUM(ADJ_HOURS_ALLOWED * BILL_RATE) AS HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT
		FROM #PROJECT_TASK_ADJ
		WHERE IS_WORK_DAY = 1
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, ADJ_WEEK, ADJ_YEAR, WEEK_START, WEEK_END

		SELECT @sd = JC.START_DATE, @ed = JC.JOB_FIRST_USE_DATE
		 FROM JOB_COMPONENT JC 
		 WHERE JC.JOB_NUMBER = @JOB_NUMBER AND JC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR

		 
		SET @workdaystotal = DATEDIFF(DAY, @sd, @ed) 
		SET @WORK_DAYS_TOTAL = DATEDIFF(DAY, @sd, @ed) 
		SET @CURR_DATE = @sd
		SET @CTR = 0
		SET @WORKING_DAYS = 0
				WHILE @WORK_DAYS_TOTAL > 0
					BEGIN
						SET @CURR_DATE = DATEADD(DAY, @CTR , @sd)
						SET @CURR_DAY_OF_WEEK = DATEPART(weekday, @CURR_DATE)
						if (@CURR_DAY_OF_WEEK <> 1 AND @CURR_DAY_OF_WEEK <> 7) AND (
								   NOT EXISTS(
									   SELECT NON_TASK_ID
									   FROM   EMP_NON_TASKS WITH(NOLOCK)
									   WHERE  TYPE = 'H'
											AND DATEPART(dayofyear,@CURR_DATE) BETWEEN DATEPART(dayofyear,[START_DATE]) AND DATEPART(dayofyear,[END_DATE]) 
											AND DATEPART(yy,[START_DATE]) = DATEPART(yy,@CURR_DATE)
											AND ALL_DAY = 1
								   )
						   )
						   BEGIN
								INSERT INTO #WORK_DAYS
								VALUES(DATEPART(wk,@CURR_DATE),DATEPART(YY,@CURR_DATE), @CURR_DATE,DATEADD(dd, -(DATEPART(dw, @CURR_DATE)-1), @CURR_DATE),DATEADD(dd, 7-(DATEPART(dw, @CURR_DATE)), @CURR_DATE))
								SET @WORKING_DAYS = @WORKING_DAYS + 1
						   END
						SET @CTR = @CTR + 1
						SET @WORK_DAYS_TOTAL = @WORK_DAYS_TOTAL - 1
					END
				--SET @perc_schedule = (@WORKING_DAYS / @TOTAL_DAYS) * 100		
				--SELECT @WORKING_DAYS, @sd, @ed

		INSERT INTO #PROJECT_QUOTED
		SELECT @JOB_NUMBER, @JOB_COMPONENT_NBR, (@QUOTED_HOURS / @WORKING_DAYS) * COUNT([WEEK]), (@QUOTED_AMT / @WORKING_DAYS) * COUNT([WEEK]), [WEEK], [YEAR], WEEK_START, WEEK_END
		FROM #WORK_DAYS
		GROUP BY [WEEK], [YEAR], WEEK_START, WEEK_END

		--SELECT @QUOTED_HOURS / @workdaystotal
		--SELECT * FROM #PROJECT_QUOTED

		--SELECT * FROM #WORK_DAYS

		INSERT INTO #PROJECT_MONTH
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, [WEEK], [YEAR], WEEK_START, WEEK_END, SUM(QUOTED_HOURS), SUM(QUOTED_AMT), 0, 0 AS FORECAST_HOURS_AMT,
				0 AS HOURS_ALLOWED, 0 AS HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT
		FROM #PROJECT_QUOTED
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, [WEEK], [YEAR], WEEK_START, WEEK_END

		INSERT INTO #PROJECT_ACTUAL
		SELECT EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR, ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0),SUM(EMP_TIME_DTL.TOTAL_BILL + EMP_TIME_DTL.EXT_MARKUP_AMT), DATEPART(wk,EMP_TIME.EMP_DATE), DATEPART(yy,EMP_TIME.EMP_DATE), DATEADD(dd, -(DATEPART(dw, EMP_TIME.EMP_DATE)-1), EMP_TIME.EMP_DATE), DATEADD(dd, 7-(DATEPART(dw, EMP_TIME.EMP_DATE)), EMP_TIME.EMP_DATE)
		FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
		WHERE (EMP_TIME_DTL.JOB_NUMBER = @JOB_NUMBER) AND (EMP_TIME_DTL.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
			 AND (EMP_TIME_DTL.EMP_HOURS <> 0) AND EMP_TIME.EMP_DATE >= @sd AND EMP_TIME.EMP_DATE <= @ed
		GROUP BY EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR, DATEPART(wk,EMP_TIME.EMP_DATE), DATEPART(yy,EMP_TIME.EMP_DATE), DATEADD(dd, -(DATEPART(dw, EMP_TIME.EMP_DATE)-1), EMP_TIME.EMP_DATE), DATEADD(dd, 7-(DATEPART(dw, EMP_TIME.EMP_DATE)), EMP_TIME.EMP_DATE)

		INSERT INTO #PROJECT_ACTUAL
		SELECT EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR, ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0),SUM(EMP_TIME_DTL.TOTAL_BILL + EMP_TIME_DTL.EXT_MARKUP_AMT), DATEPART(wk,@sd), DATEPART(yy,@sd), DATEADD(dd, -(DATEPART(dw, @sd)-1), @sd), DATEADD(dd, 7-(DATEPART(dw, @sd)), @sd)
		FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
		WHERE (EMP_TIME_DTL.JOB_NUMBER = @JOB_NUMBER) AND (EMP_TIME_DTL.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
			 AND (EMP_TIME_DTL.EMP_HOURS <> 0) AND EMP_TIME.EMP_DATE < @sd
		GROUP BY EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR

		INSERT INTO #PROJECT_ACTUAL
		SELECT EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR, ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0),SUM(EMP_TIME_DTL.TOTAL_BILL + EMP_TIME_DTL.EXT_MARKUP_AMT), DATEPART(wk,@ed), DATEPART(yy,@ed), DATEADD(dd, -(DATEPART(dw, @ed)-1), @ed), DATEADD(dd, 7-(DATEPART(dw, @ed)), @ed)
		FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
		WHERE (EMP_TIME_DTL.JOB_NUMBER = @JOB_NUMBER) AND (EMP_TIME_DTL.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
			 AND (EMP_TIME_DTL.EMP_HOURS <> 0) AND EMP_TIME.EMP_DATE > @ed
		GROUP BY EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR

		INSERT INTO #PROJECT_MONTH
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, [WEEK], [YEAR], WEEK_START, WEEK_END, 0, 0, 0, 0 AS FORECAST_HOURS_AMT,
				0 AS HOURS_ALLOWED, 0 AS HOURS_ALLOWED_AMT, SUM(ACTUAL_HOURS) AS ACTUAL_HOURS, SUM(ACTUAL_AMT) AS ACTUAL_HOURS_AMT
		FROM #PROJECT_ACTUAL
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, [WEEK], [YEAR], WEEK_START, WEEK_END
		
		--SELECT * FROM #PROJECT_ACTUAL

		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, [WEEK], [YEAR], ISNULL(SUM(QUOTED_HOURS),0) AS QUOTED_HOURS, ISNULL(SUM(QUOTED_HRS_AMT),0) AS QUOTED_HRS_AMT, ISNULL(SUM(FORECAST_HOURS),0) AS FORECAST_HOURS, ISNULL(SUM(FORECAST_HRS_AMT),0) AS FORECAST_HRS_AMT,
				ISNULL(SUM(HOURS_ALLOWED),0) AS HOURS_ALLOWED, ISNULL(SUM(HOURS_ALLOWED_AMT),0) AS HOURS_ALLOWED_AMT, ISNULL(SUM(ACTUAL_HOURS),0) AS ACTUAL_HOURS, ISNULL(SUM(ACTUAL_HOURS_AMT),0) AS ACTUAL_HRS_AMT, ISNULL((SUM(ACTUAL_HOURS) / SUM(FORECAST_HOURS)),0) AS BURN_RATE_ETF,
				ISNULL((SUM(ACTUAL_HOURS_AMT) / SUM(FORECAST_HRS_AMT)),0) AS BURN_RATE_AMT_ETF, ISNULL((SUM(ACTUAL_HOURS) / SUM(HOURS_ALLOWED)),0) AS BURN_RATE_ALLOWED, ISNULL((SUM(ACTUAL_HOURS_AMT) / SUM(HOURS_ALLOWED_AMT)),0) AS BURN_RATE_AMT_ALLOWED,
				CASE WHEN [WEEK] = 1 THEN CONVERT(DATETIME,'1/1/' + CAST([YEAR] AS VARCHAR(4))) ELSE WEEK_START END AS WEEK_START, WEEK_END
		FROM #PROJECT_MONTH 
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, [WEEK], [YEAR], WEEK_START, WEEK_END
		ORDER BY [YEAR],[WEEK],WEEK_START

		--SELECT * FROM #PROJECT_TASK_LIST
		--SELECT * FROM #PROJECT_TASK_ADJ
				
        DROP TABLE #PROJECT_TASK_LIST;
        DROP TABLE #PROJECT_TASK_ADJ;
		DROP TABLE #PROJECT_FORECAST;
		DROP TABLE #PROJECT_MONTH;
		DROP TABLE #PROJECT_QUOTED;
		DROP TABLE #PROJECT_ACTUAL;
		DROP TABLE #WORK_DAYS;
        
                




        




                
                
                
                
      



GO

