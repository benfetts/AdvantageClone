if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_Project_Status_Summary]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_Project_Status_Summary]
GO
CREATE PROCEDURE [dbo].[usp_wv_Project_Status_Summary] 
	@JOB_NUMBER     varchar(4000),
	@JOB_COMPONENT_NBR  varchar(4000)

AS

    SET ANSI_NULLS ON
    SET ANSI_WARNINGS OFF
    SET ARITHABORT OFF
    SET ARITHIGNORE ON
		DECLARE @Records int, @Count int, @Recordcomp int, @Countcomp int, @jNum int, @cNum int

		CREATE TABLE #PROJECT_MONTH --MASTER TABLE TO RETURN
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[CLIENT] varchar(40),			
			[PROJECT_DESC]  varchar(100),
			[AE] varchar(6),
			[START_DATE] datetime,
			[END_DATE] datetime,
			[QUOTED_HOURS] DECIMAL(15,2),
	        [QUOTED_HRS_AMT] DECIMAL(15,2),
			[FORECAST_HOURS] DECIMAL(15,2),
			[FORECAST_HRS_AMT] DECIMAL(15,2),
			[HOURS_ALLOWED] DECIMAL(15,2),
			[HOURS_ALLOWED_AMT] DECIMAL(15,2),
			[ADJ_HOURS_ALLOWED] DECIMAL(15,2),
			[ADJ_HOURS_ALLOWED_AMT] DECIMAL(15,2),
			[ACTUAL_HOURS] DECIMAL(15,2),
			[ACTUAL_HOURS_AMT] DECIMAL(15,2),
			[PERC_SCHEDULE] DECIMAL(15,2),
			[STATUS] varchar(30),
			[PERC_COMPLETE] DECIMAL(7,3)
        );
       
       CREATE TABLE #PROJECT_TASK_ADJ --MASTER TABLE TO RETURN
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[SEQ_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[ADJ_DATE] datetime,
			[ADJ_MONTH] int,
			[ADJ_YEAR] int,
	        [EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[WORK_DAYS] int,
			[ADJ_HOURS_ALLOWED] DECIMAL(15,2),
	        [BILL_RATE] DECIMAL(15,3),
			[IS_WORK_DAY] SMALLINT,
			[EMP_HOURS] DECIMAL(12,2),
			[HOURS_ALLOWED] DECIMAL(15,2)
        );

		CREATE TABLE #PROJECT_TASK_LIST 
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[SEQ_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[START_DATE] datetime,
			[END_DATE] datetime,
	        [EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[HOURS_ALLOWED] DECIMAL(15,2),
			[ACTUAL_HOURS] DECIMAL(15,2),
			[ACTUAL_AMT] DECIMAL(15,2),
	        [BILL_RATE] DECIMAL(15,3),
        );

		CREATE TABLE #PROJECT_FORECAST
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[FORECAST_HOURS] DECIMAL(15,2),
			[FORECAST_AMT] DECIMAL(15,2),
			[MTH] int,
			[YEAR] int
        );

		CREATE TABLE #PROJECT_QUOTED
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[QUOTED_HOURS] DECIMAL(15,2),
			[QUOTED_AMT] DECIMAL(15,2),
			[MTH] int,
			[YEAR] int
        );

		CREATE TABLE #PROJECT_ACTUAL
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[ACTUAL_HOURS] DECIMAL(17,4),
			[ACTUAL_AMT] DECIMAL(17,4),
			--[WORK_DAYS] int,
			[MTH] int,
			[YEAR] int
        );

		CREATE TABLE #jobcomps(
			RowID int IDENTITY(1, 1), 
			JobNo int,
			CompNo int)

		CREATE TABLE #jobs(
			RowID int IDENTITY(1, 1), 
			listpos int,
			job int)

		CREATE TABLE #comps(
			RowID int IDENTITY(1, 1), 
			listpos int,
			comp int)

		INSERT INTO #jobs 
		SELECT * FROM [dbo].[charlist_to_table] (
		  @JOB_NUMBER,',')

		INSERT INTO #comps 
		SELECT * FROM [dbo].[charlist_to_table] (
		  @JOB_COMPONENT_NBR,',')		

		SELECT @Records = COUNT(*) FROM #jobs
		SET @Count = 1
		SELECT @Recordcomp = COUNT(*) FROM #comps
		SET @Countcomp = 1

		WHILE @Count <= @Records
		BEGIN

		 SELECT @jNum = job
		 FROM #jobs
		 WHERE RowID = @Count

		 SELECT @cNum = comp
		 FROM #comps
		 WHERE RowID = @Countcomp

			INSERT INTO #jobcomps
			VALUES (@jNum, @cNum)
				
			SET @Count = @Count + 1	
			SET @Countcomp = @Countcomp + 1	           
		END

        --SELECT * FROM #jobcomps

		INSERT INTO #PROJECT_TASK_LIST
		SELECT  V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, V_JOB_TRAFFIC_DET.SEQ_NBR, V_JOB_TRAFFIC_DET.FNC_EST,
		 V_JOB_TRAFFIC_DET.TASK_START_DATE, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE, V_JOB_TRAFFIC_DET.EMP_CODE, ISNULL(V_JOB_TRAFFIC_DET.JOB_HRS,0), 0, 0, 0
		FROM   V_JOB_TRAFFIC_DET INNER JOIN JOB_COMPONENT ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR
				INNER JOIN #jobcomps ON V_JOB_TRAFFIC_DET.JOB_NUMBER = #jobcomps.JobNo AND V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = #jobcomps.CompNo
		WHERE   JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12)
		ORDER BY V_JOB_TRAFFIC_DET.TASK_START_DATE

		--TEST
		

        DECLARE @DAY_COUNT      AS INTEGER,
				@DAY_INCREMENT  AS INTEGER,
				@ADJ_HOURS AS DECIMAL(15,2),
				@IS_WORK_DAY AS INTEGER,
				@WORK_DAYS_TODAY AS DECIMAL(15,5),
				@WORK_DAYS_TOTAL AS DECIMAL(15,5)
        DECLARE @CURR_JOB_NUMBER AS INT,
	        @CURR_JOB_COMPONENT_NBR     INT,
	        @CURR_SEQ_NBR     INT,
	        @CURR_EST_FUNC     VARCHAR(6),
	        @CURR_START_DATE     SMALLDATETIME,
	        @CURR_END_DATE     SMALLDATETIME,
	        @CURR_EMP_CODE     VARCHAR(6),
	        @CURR_HOURS_ALLOWED     DECIMAL(15,2),
			@CURR_ACTUAL_HOURS     DECIMAL(15,2),
			@CURR_ACTUAL_AMT     DECIMAL(15,4),
			@SUM_ACTUAL_HOURS     DECIMAL(15,2),
	        @CURR_BILL_RATE     DECIMAL(15,3),
			@CURR_ROW_ID		INT,
	        @CURR_CL_CODE   VARCHAR(6),
	        @CURR_DIV_CODE     VARCHAR(6),
	        @CURR_PRD_CODE     VARCHAR(6),
	        @CURR_SC_CODE     VARCHAR(6),
			@CURR_DAY_OF_WEEK SMALLINT,			
			@ROW_BILLING_RATE  DECIMAL(9,2),
			@ROW_RATE_LEVEL  SMALLINT,
			@ROW_TAX_CODE  VARCHAR(4),
			@ROW_TAX_LEVEL SMALLINT,
			@ROW_NOBILL_FLAG SMALLINT,
			@ROW_NOBILL_LEVEL SMALLINT,
			@ROW_COMM DECIMAL(9,3),
			@ROW_COMM_LEVEL SMALLINT,
			@ROW_TAX_COMM SMALLINT,
			@ROW_TAX_COMM_ONLY SMALLINT,
			@ROW_TAX_COMM_FLAGS_LEVEL SMALLINT,
			@ROW_FEE_TIME_FLAG SMALLINT,
			@ROW_FEE_TIME_LEVEL SMALLINT
			;
        DECLARE MY_ROWS                         CURSOR  
        FOR
	        SELECT ROW_ID
	        FROM   #PROJECT_TASK_LIST
        ;
        OPEN MY_ROWS;
        FETCH NEXT FROM MY_ROWS INTO @CURR_ROW_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
	        SELECT @CURR_JOB_NUMBER = JOB_NUMBER, @CURR_JOB_COMPONENT_NBR = JOB_COMPONENT_NBR,
	        @CURR_SEQ_NBR = SEQ_NBR, 
	        @CURR_EST_FUNC = EST_FUNC,
	        @CURR_START_DATE = [START_DATE], 
	        @CURR_END_DATE = END_DATE,
	        @CURR_EMP_CODE = EMP_CODE, 
	        @CURR_HOURS_ALLOWED = HOURS_ALLOWED FROM #PROJECT_TASK_LIST WHERE ROW_ID = @CURR_ROW_ID;
			SET @CURR_ACTUAL_HOURS = 0
			SELECT @CURR_CL_CODE = CL_CODE, @CURR_DIV_CODE = DIV_CODE, @CURR_PRD_CODE = PRD_CODE, @CURR_SC_CODE = SC_CODE
			FROM JOB_LOG 
			WHERE JOB_NUMBER = @CURR_JOB_NUMBER
			-- GET DAYS (LOOP)
					--=================================================================================================
								                
					SET @DAY_INCREMENT = -1;
					SELECT @DAY_COUNT = DATEDIFF(dd, @CURR_START_DATE, @CURR_END_DATE) + 1;
			        SET @ADJ_HOURS = @CURR_HOURS_ALLOWED / [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE,1)
					EXECUTE dbo.usp_wv_Estimating_GetBillingRates
									@THIS_FNC_CODE = @CURR_EST_FUNC,
									@THIS_JOB_NUMBER = @CURR_JOB_NUMBER,
									@THIS_JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR,
									@THIS_CL_CODE = @CURR_CL_CODE,
									@THIS_DIV_CODE = @CURR_DIV_CODE,
									@THIS_PRD_CODE = @CURR_PRD_CODE,
									@THIS_SC_CODE = @CURR_SC_CODE,
									@THIS_EMP_CODE = @CURR_EMP_CODE, 
									@THIS_EMP_TITLE_ID = NULL,
									@THIS_BILLING_RATE = @ROW_BILLING_RATE OUTPUT,
									@THIS_RATE_LEVEL = @ROW_RATE_LEVEL OUTPUT,
									@THIS_TAX_CODE = @ROW_TAX_CODE OUTPUT,
									@THIS_TAX_LEVEL = @ROW_TAX_LEVEL OUTPUT,
									@THIS_NOBILL_FLAG = @ROW_NOBILL_FLAG OUTPUT,
									@THIS_NOBILL_LEVEL = @ROW_NOBILL_LEVEL OUTPUT,
									@THIS_COMM = @ROW_COMM OUTPUT,
									@THIS_COMM_LEVEL = @ROW_COMM_LEVEL OUTPUT,
									@THIS_TAX_COMM = @ROW_TAX_COMM OUTPUT,
									@THIS_TAX_COMM_ONLY = @ROW_TAX_COMM_ONLY OUTPUT,
									@THIS_TAX_COMM_FLAGS_LEVEL = @ROW_TAX_COMM_FLAGS_LEVEL OUTPUT,
									@THIS_FEE_TIME_FLAG = @ROW_FEE_TIME_FLAG OUTPUT,
									@THIS_FEE_TIME_LEVEL = @ROW_FEE_TIME_LEVEL OUTPUT;
			--        --TEST:
			--        SELECT @DAY_COUNT AS DAY_COUNT;
			        
					--WHILE @DAY_COUNT > 0
					--BEGIN
					--	SET @IS_WORK_DAY = 0
					--	SET @CURR_DAY_OF_WEEK = DATEPART(dw, DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE))
					--	IF @CURR_DAY_OF_WEEK = 1 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sun%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 2 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Mon%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 3 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Tue%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 4 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Wed%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 5 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Thu%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 6 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Fri%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 7 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sat%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END

					--	SELECT @CURR_ACTUAL_HOURS = ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0)
					--	FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
					--	WHERE (EMP_TIME_DTL.JOB_NUMBER = @CURR_JOB_NUMBER) AND (EMP_TIME_DTL.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
					--		  AND (EMP_TIME.EMP_DATE = DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE)) AND (EMP_TIME.EMP_CODE = @CURR_EMP_CODE) AND (EMP_TIME_DTL.EMP_HOURS <> 0)

					--	INSERT INTO #PROJECT_TASK_ADJ
					--	  (
					--		[JOB_NUMBER],
					--		[JOB_COMPONENT_NBR],
					--		[SEQ_NBR],
					--		[EST_FUNC],
					--		[ADJ_DATE],
					--		[ADJ_MONTH],
					--		[ADJ_YEAR],
					--		[EMP_CODE],
					--		[WORK_DAYS],
					--		[ADJ_HOURS_ALLOWED],
					--		[BILL_RATE],
					--		[IS_WORK_DAY],
					--		[EMP_HOURS],
					--		[HOURS_ALLOWED]
					--	  )
					--	VALUES
					--	  (
					--		@CURR_JOB_NUMBER,
					--		@CURR_JOB_COMPONENT_NBR,
					--		@CURR_SEQ_NBR, 
					--		@CURR_EST_FUNC,
					--		DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE),
					--		DATEPART(mm, @CURR_START_DATE),
					--		DATEPART(yy, @CURR_START_DATE),
					--		@CURR_EMP_CODE, 
					--		[dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE,1),
					--		@ADJ_HOURS,
					--		@ROW_BILLING_RATE,
					--		@IS_WORK_DAY,
					--		@CURR_ACTUAL_HOURS,
					--		@CURR_HOURS_ALLOWED	
					--	  );
					--	SET @DAY_INCREMENT = @DAY_INCREMENT + 1;
					--	SET @DAY_COUNT = @DAY_COUNT - 1;
					--END
			--		UPDATE #DAY_RANGE SET [DATE] = @END_DATE WHERE [DATE] = (SELECT MAX([DATE]) FROM #DAY_RANGE)
			--        --TEST:
			--        SELECT * FROM #DAY_RANGE;
			
			SELECT @CURR_ACTUAL_HOURS = ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0), @CURR_ACTUAL_AMT = ISNULL(SUM(EMP_TIME_DTL.TOTAL_BILL + EMP_TIME_DTL.EXT_MARKUP_AMT),0)
			FROM EMP_TIME_DTL INNER JOIN
                 EMP_TIME ON EMP_TIME_DTL.ET_ID = EMP_TIME.ET_ID INNER JOIN
                 V_JOB_TRAFFIC_DET ON EMP_TIME_DTL.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND 
                 EMP_TIME_DTL.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR AND 
                 EMP_TIME_DTL.FNC_CODE = V_JOB_TRAFFIC_DET.FNC_EST AND EMP_TIME.EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
			WHERE (V_JOB_TRAFFIC_DET.JOB_NUMBER = @CURR_JOB_NUMBER) AND (V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
				  AND (V_JOB_TRAFFIC_DET.SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_TIME.EMP_CODE = @CURR_EMP_CODE) AND (EMP_TIME_DTL.EMP_HOURS <> 0)

			UPDATE #PROJECT_TASK_LIST SET ACTUAL_HOURS = @CURR_ACTUAL_HOURS, ACTUAL_AMT = @CURR_ACTUAL_AMT, BILL_RATE = @ROW_BILLING_RATE
			WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
				  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)

			--SET @WORK_DAYS_TODAY = [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,GETDATE(),1)
			--SET @WORK_DAYS_TOTAL = [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE,1)
			
			--IF @CURR_START_DATE <= GETDATE() AND @CURR_END_DATE >= GETDATE()
			--BEGIN				
			--	UPDATE #PROJECT_TASK_LIST SET PERC_SCHEDULE = (@WORK_DAYS_TODAY / @WORK_DAYS_TOTAL) * 100
			--	WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
			--	  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)
			--END
			--ELSE IF @CURR_START_DATE > GETDATE()
			--BEGIN
			--	UPDATE #PROJECT_TASK_LIST SET PERC_SCHEDULE = 0
			--	WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
			--	  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)
			--END
			--ELSE 
			--BEGIN
			--	UPDATE #PROJECT_TASK_LIST SET PERC_SCHEDULE = 100
			--	WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
			--	  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)
			--END

	        --GO TO NEXT EVENT
	        FETCH NEXT FROM MY_ROWS INTO @CURR_ROW_ID;
        END
        CLOSE MY_ROWS;
        DEALLOCATE MY_ROWS;
		--SELECT * FROM #PROJECT_TASK_LIST
  		--Quoted Hours
		DECLARE @HAS_EST_APPR   AS INTEGER,
				@HAS_EST_INT_APPR  AS INTEGER,
				@QUOTED_HOURS AS DECIMAL(15,2),
				@FORECAST_HOURS AS DECIMAL(15,2),
				@FORECAST_AMT AS DECIMAL(15,2),
				@FORECAST_HOURS_AE AS DECIMAL(15,2),
				@FORECAST_AMT_AE AS DECIMAL(15,2),
				@NumberRecords int, @RowCount int, @jn int, @jcn int, @client varchar(40), @ae varchar(6), @sd datetime, @ed datetime, @jcd varchar(60), @status varchar(30), @perc_schedule decimal(15,5),
				@CURR_DATE         SMALLDATETIME,
				@CTR               INT,
				@WORKING_DAYS      DECIMAL(15,2),
				@TOTAL_DAYS		   DECIMAL(15,2), @perc_comp decimal(7,3)
		--IF EXISTS(SELECT JOB_NUMBER FROM ESTIMATE_APPROVAL WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
		--BEGIN
		--	SET @HAS_EST_APPR = 1
		--END
		--IF EXISTS(SELECT JOB_NUMBER FROM ESTIMATE_INT_APPR WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
		--BEGIN
		--	SET @HAS_EST_INT_APPR = 1
		--END

		SET @QUOTED_HOURS = 0
		--IF @HAS_EST_APPR = 1 
		--BEGIN
			INSERT INTO #PROJECT_QUOTED
			SELECT JOB_COMPONENT.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR, SUM(ESTIMATE_REV_DET.EST_REV_QUANTITY), SUM(ESTIMATE_REV_DET.EST_REV_EXT_AMT), 0, 0
			FROM         JOB_COMPONENT INNER JOIN
								  ESTIMATE_REV_DET ON JOB_COMPONENT.ESTIMATE_NUMBER = ESTIMATE_REV_DET.ESTIMATE_NUMBER AND 
								  JOB_COMPONENT.EST_COMPONENT_NBR = ESTIMATE_REV_DET.EST_COMPONENT_NBR INNER JOIN
								  ESTIMATE_APPROVAL ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = ESTIMATE_APPROVAL.ESTIMATE_NUMBER AND 
								  ESTIMATE_REV_DET.EST_COMPONENT_NBR = ESTIMATE_APPROVAL.EST_COMPONENT_NBR AND 
								  ESTIMATE_REV_DET.EST_QUOTE_NBR = ESTIMATE_APPROVAL.EST_QUOTE_NBR AND 
								  ESTIMATE_REV_DET.EST_REV_NBR = ESTIMATE_APPROVAL.EST_REVISION_NBR INNER JOIN
								  JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
								  JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
								  INNER JOIN #jobcomps ON JOB_COMPONENT.JOB_NUMBER = #jobcomps.JobNo AND JOB_COMPONENT.JOB_COMPONENT_NBR = #jobcomps.CompNo
			WHERE  JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND ESTIMATE_REV_DET.EST_FNC_TYPE = 'E'
			GROUP BY JOB_COMPONENT.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR
		--END
		--ELSE IF @HAS_EST_INT_APPR = 1
		--BEGIN
			INSERT INTO #PROJECT_QUOTED
			SELECT JOB_COMPONENT.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR, SUM(ESTIMATE_REV_DET.EST_REV_QUANTITY), SUM(ESTIMATE_REV_DET.EST_REV_EXT_AMT), 0, 0
			FROM         JOB_COMPONENT INNER JOIN
								  ESTIMATE_REV_DET ON JOB_COMPONENT.ESTIMATE_NUMBER = ESTIMATE_REV_DET.ESTIMATE_NUMBER AND 
								  JOB_COMPONENT.EST_COMPONENT_NBR = ESTIMATE_REV_DET.EST_COMPONENT_NBR INNER JOIN
								  ESTIMATE_INT_APPR ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = ESTIMATE_INT_APPR.ESTIMATE_NUMBER AND 
								  ESTIMATE_REV_DET.EST_COMPONENT_NBR = ESTIMATE_INT_APPR.EST_COMPONENT_NBR AND 
								  ESTIMATE_REV_DET.EST_QUOTE_NBR = ESTIMATE_INT_APPR.EST_QUOTE_NBR AND 
								  ESTIMATE_REV_DET.EST_REV_NBR = ESTIMATE_INT_APPR.EST_REVISION_NBR INNER JOIN
								  JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
								  JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
								  INNER JOIN #jobcomps ON JOB_COMPONENT.JOB_NUMBER = #jobcomps.JobNo AND JOB_COMPONENT.JOB_COMPONENT_NBR = #jobcomps.CompNo
			WHERE  JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND JOB_COMPONENT.ESTIMATE_NUMBER NOT IN (SELECT ESTIMATE_NUMBER FROM ESTIMATE_APPROVAL) AND ESTIMATE_REV_DET.EST_FNC_TYPE = 'E'
			GROUP BY JOB_COMPONENT.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR
		--END

		INSERT INTO #PROJECT_FORECAST
		SELECT ETF_OFFDTLJC.JOB_NUMBER, ETF_OFFDTLJC.JOB_COMPONENT_NBR, SUM(ETF_OFFDTLJC_EMP.HOURS), SUM(ETF_OFFDTLEMP.BILL_RATE*ETF_OFFDTLJC_EMP.HOURS), POSTPERIOD.PPGLMONTH, POSTPERIOD.PPGLYEAR
		FROM (((ETF_OFFDTL INNER JOIN ETF_HDR ON ETF_OFFDTL.ETF_ID = ETF_HDR.ETF_ID) 
		INNER JOIN ETF_OFFDTLJC ON ETF_OFFDTL.ETF_OFFDTL_ID = ETF_OFFDTLJC.ETF_OFFDTL_ID) 
		INNER JOIN ETF_OFFDTLEMP ON ETF_OFFDTL.ETF_OFFDTL_ID = ETF_OFFDTLEMP.ETF_OFFDTL_ID) 
		INNER JOIN ETF_OFFDTLJC_EMP ON (ETF_OFFDTLEMP.ETF_OFFDTLEMP_ID = ETF_OFFDTLJC_EMP.ETF_OFFDTLEMP_ID) AND (ETF_OFFDTLJC.ETF_OFFDTLJC_ID = ETF_OFFDTLJC_EMP.ETF_OFFDTLJC_ID)
		INNER JOIN POSTPERIOD ON ETF_HDR.PPPERIOD = POSTPERIOD.PPPERIOD
		INNER JOIN #jobcomps ON ETF_OFFDTLJC.JOB_NUMBER = #jobcomps.JobNo AND ETF_OFFDTLJC.JOB_COMPONENT_NBR = #jobcomps.CompNo
		WHERE (((ETF_OFFDTL.APPROVED)='True')) --AND ETF_OFFDTLJC.JOB_NUMBER = @JOB_NUMBER AND ETF_OFFDTLJC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR
		GROUP BY ETF_OFFDTLJC.JOB_NUMBER, ETF_OFFDTLJC.JOB_COMPONENT_NBR, POSTPERIOD.PPGLMONTH, POSTPERIOD.PPGLYEAR
		--ORDER BY ETF_OFFDTLJC.JOB_NUMBER

		INSERT INTO #PROJECT_FORECAST
		SELECT ETF_OFFDTLJC.JOB_NUMBER, ETF_OFFDTLJC.JOB_COMPONENT_NBR, SUM(ETF_OFFDTLJC_AE.HOURS), SUM(ETF_OFFDTLAE.BILL_RATE*ETF_OFFDTLJC_AE.HOURS) AS REVAMT, POSTPERIOD.PPGLMONTH, POSTPERIOD.PPGLYEAR
		FROM ETF_OFFDTLAE INNER JOIN (((ETF_OFFDTL INNER JOIN ETF_HDR ON ETF_OFFDTL.ETF_ID = ETF_HDR.ETF_ID) 
		INNER JOIN ETF_OFFDTLJC ON ETF_OFFDTL.ETF_OFFDTL_ID = ETF_OFFDTLJC.ETF_OFFDTL_ID) 
		INNER JOIN ETF_OFFDTLJC_AE ON ETF_OFFDTLJC.ETF_OFFDTLJC_ID = ETF_OFFDTLJC_AE.ETF_OFFDTLJC_ID) ON (ETF_OFFDTLAE.ETF_OFFDTLAE_ID = ETF_OFFDTLJC_AE.ETF_OFFDTLAE_ID) AND (ETF_OFFDTLAE.ETF_OFFDTL_ID = ETF_OFFDTL.ETF_OFFDTL_ID)
		INNER JOIN POSTPERIOD ON ETF_HDR.PPPERIOD = POSTPERIOD.PPPERIOD
		INNER JOIN #jobcomps ON ETF_OFFDTLJC.JOB_NUMBER = #jobcomps.JobNo AND ETF_OFFDTLJC.JOB_COMPONENT_NBR = #jobcomps.CompNo
		WHERE (((ETF_OFFDTL.APPROVED)='True')) --AND ETF_OFFDTLJC.JOB_NUMBER = @JOB_NUMBER AND ETF_OFFDTLJC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR
		GROUP BY ETF_OFFDTLJC.JOB_NUMBER, ETF_OFFDTLJC.JOB_COMPONENT_NBR, POSTPERIOD.PPGLMONTH, POSTPERIOD.PPGLYEAR
		--ORDER BY ETF_OFFDTLJC.JOB_NUMBER
		--SELECT * FROM #PROJECT_TASK_LIST
		--SELECT * FROM #PROJECT_QUOTED
		--SELECT * FROM #PROJECT_FORECAST
		--INSERT INTO #PROJECT_MONTH
		--SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT, SUM(HOURS_ALLOWED), SUM(HOURS_ALLOWED * BILL_RATE),
		--		SUM(ADJ_HOURS_ALLOWED) AS ADJ_HOURS_ALLOWED, SUM(ADJ_HOURS_ALLOWED * BILL_RATE) AS ADJ_HOURS_ALLOWED_AMT, SUM(EMP_HOURS) AS ACTUAL_HOURS, SUM(EMP_HOURS * BILL_RATE) AS ACTUAL_HOURS_AMT, 0, ''
		--FROM #PROJECT_TASK_ADJ
		--GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, ADJ_MONTH, ADJ_YEAR

		INSERT INTO #PROJECT_ACTUAL
		SELECT EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR, ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0),SUM(EMP_TIME_DTL.TOTAL_BILL + EMP_TIME_DTL.EXT_MARKUP_AMT), DATEPART(mm,EMP_TIME.EMP_DATE), DATEPART(yy,EMP_TIME.EMP_DATE)
		FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID 
			INNER JOIN #jobcomps ON EMP_TIME_DTL.JOB_NUMBER = #jobcomps.JobNo AND EMP_TIME_DTL.JOB_COMPONENT_NBR = #jobcomps.CompNo
		GROUP BY EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR, DATEPART(mm,EMP_TIME.EMP_DATE), DATEPART(yy,EMP_TIME.EMP_DATE)

		--SELECT * FROM #PROJECT_ACTUAL

		INSERT INTO #PROJECT_MONTH
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT, 0 AS HOURS_ALLOWED, 0,
				0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, SUM(ACTUAL_HOURS) AS ACTUAL_HOURS, SUM(ACTUAL_AMT) AS ACTUAL_HOURS_AMT, 0, '',0
		FROM #PROJECT_ACTUAL
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR

		INSERT INTO #PROJECT_MONTH
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT, SUM(HOURS_ALLOWED) AS HOURS_ALLOWED, SUM(HOURS_ALLOWED * BILL_RATE),
				0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT, 0, '',0
		FROM #PROJECT_TASK_LIST
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR

		INSERT INTO #PROJECT_MONTH
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, SUM(FORECAST_HOURS), SUM(FORECAST_AMT) AS FORECAST_HOURS_AMT, 0, 0,
				0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT, 0, '',0
		FROM #PROJECT_FORECAST
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, MTH, [YEAR]

		INSERT INTO #PROJECT_MONTH
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, ISNULL(SUM(QUOTED_HOURS),0) AS QUOTED_HOURS, SUM(QUOTED_AMT) AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT, 0, 0,
				0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT, 0, '',0
		FROM #PROJECT_QUOTED
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, MTH, [YEAR]

		--SELECT * FROM #PROJECT_MONTH
		SELECT @NumberRecords = COUNT(*) FROM #PROJECT_MONTH
		SET @RowCount = 1

		WHILE @RowCount <= @NumberRecords
		BEGIN
		 SELECT @jn = JOB_NUMBER, @jcn = JOB_COMPONENT_NBR
		 FROM #PROJECT_MONTH
		 WHERE [ROW_ID] = @RowCount

		 SELECT @status = TRAFFIC.TRF_DESCRIPTION, @perc_comp = ISNULL(JOB_TRAFFIC.PERCENT_COMPLETE,0)
		 FROM JOB_TRAFFIC INNER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
		 WHERE JOB_TRAFFIC.JOB_NUMBER = @jn AND JOB_TRAFFIC.JOB_COMPONENT_NBR = @jcn

		 SELECT @client = CLIENT.CL_NAME, @ae = JC.EMP_CODE, @jcd = JC.JOB_COMP_DESC, @sd = JC.START_DATE, @ed = JC.JOB_FIRST_USE_DATE
		 FROM JOB_COMPONENT JC INNER JOIN JOB_LOG JL ON JC.JOB_NUMBER = JL.JOB_NUMBER INNER JOIN CLIENT ON JL.CL_CODE = CLIENT.CL_CODE
		 WHERE JC.JOB_NUMBER = @jn AND JC.JOB_COMPONENT_NBR = @jcn

		-- SELECT @sd, @ed
		 SET @TOTAL_DAYS = 1
		 IF @sd <= @ed 
			BEGIN
				SET @WORK_DAYS_TOTAL = DATEDIFF(DAY, @sd, @ed) 
				SET @CURR_DATE = @sd
				SET @CTR = 0
				SET @WORKING_DAYS = 0
				--SELECT @WORK_DAYS_TOTAL
				WHILE @WORK_DAYS_TOTAL > 0
					BEGIN
						SET @CURR_DATE = DATEADD(DAY, @CTR , @sd)
						SET @CURR_DAY_OF_WEEK = DATEPART(weekday, @CURR_DATE)
						if (@CURR_DAY_OF_WEEK <> 1 AND @CURR_DAY_OF_WEEK <> 7) AND (
								   NOT EXISTS(
									   SELECT NON_TASK_ID
									   FROM   EMP_NON_TASKS WITH(NOLOCK)
									   WHERE  TYPE = 'H'
											AND DATEPART(dayofyear,@CURR_DATE) BETWEEN DATEPART(dayofyear,[START_DATE]) AND DATEPART(dayofyear,[END_DATE]) 
											AND DATEPART(yy,[START_DATE]) = DATEPART(yy,@CURR_DATE)
											AND ALL_DAY = 1
								   )
						   )
						   BEGIN
								SET @TOTAL_DAYS = @TOTAL_DAYS + 1
						   END
						SET @CTR = @CTR + 1
						SET @WORK_DAYS_TOTAL = @WORK_DAYS_TOTAL - 1
					END
				--SELECT @WORKING_DAYS, @TOTAL_DAYS, @sd, @ed, (@WORKING_DAYS / @TOTAL_DAYS)	
			END
			ELSE IF @sd > @ed 
			BEGIN
				SET @TOTAL_DAYS = 1
			END
			 
		 IF @sd <= GETDATE() AND @ed >= GETDATE()
			BEGIN
				SET @WORK_DAYS_TOTAL = DATEDIFF(DAY, @sd, GETDATE()) 
				SET @CURR_DATE = @sd
				SET @CTR = 0
				SET @WORKING_DAYS = 1
				--SELECT @WORK_DAYS_TOTAL
				WHILE @WORK_DAYS_TOTAL > 0
					BEGIN
						SET @CURR_DATE = DATEADD(DAY, @CTR , @sd)
						SET @CURR_DAY_OF_WEEK = DATEPART(weekday, @CURR_DATE)
						if (@CURR_DAY_OF_WEEK <> 1 AND @CURR_DAY_OF_WEEK <> 7) AND (
								   NOT EXISTS(
									   SELECT NON_TASK_ID
									   FROM   EMP_NON_TASKS WITH(NOLOCK)
									   WHERE  TYPE = 'H'
											AND DATEPART(dayofyear,@CURR_DATE) BETWEEN DATEPART(dayofyear,[START_DATE]) AND DATEPART(dayofyear,[END_DATE]) 
											AND DATEPART(yy,[START_DATE]) = DATEPART(yy,@CURR_DATE)
											AND ALL_DAY = 1
								   )
						   )
						   BEGIN
								SET @WORKING_DAYS = @WORKING_DAYS + 1
						   END
						SET @CTR = @CTR + 1
						SET @WORK_DAYS_TOTAL = @WORK_DAYS_TOTAL - 1
					END
				SET @perc_schedule = (@WORKING_DAYS / @TOTAL_DAYS) * 100		
				--SELECT @WORKING_DAYS, @TOTAL_DAYS, @sd, @ed, (@WORKING_DAYS / @TOTAL_DAYS)	
			END
			ELSE IF @sd > GETDATE()
			BEGIN
				SET @perc_schedule = 0
			END
			ELSE 
			BEGIN
				SET @perc_schedule = 100
			END		 

		 UPDATE #PROJECT_MONTH 
		 SET CLIENT = @client, AE = @ae, PROJECT_DESC = @jcd, [START_DATE] = @sd, END_DATE = @ed, [STATUS] = @status, [PERC_SCHEDULE] = @perc_schedule, [PERC_COMPLETE] = @perc_comp
		 WHERE JOB_NUMBER = @jn AND JOB_COMPONENT_NBR = @jcn

		 SET @RowCount = @RowCount + 1
		END

				
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, CLIENT, PROJECT_DESC, AE, dbo.udf_get_empl_name(AE, 'FML') AS AE_NAME, [START_DATE], END_DATE, ISNULL(SUM(QUOTED_HOURS),0) AS QUOTED_HOURS, ISNULL(SUM(QUOTED_HRS_AMT),0) AS QUOTED_HRS_AMT, ISNULL(SUM(FORECAST_HOURS),0) AS FORECAST_HOURS, ISNULL(SUM(FORECAST_HRS_AMT),0) AS FORECAST_HRS_AMT,
						ISNULL(SUM(HOURS_ALLOWED),0) AS HOURS_ALLOWED, ISNULL(SUM(HOURS_ALLOWED_AMT),0) AS HOURS_ALLOWED_AMT, ISNULL(SUM(ADJ_HOURS_ALLOWED),0) AS ADJ_HOURS_ALLOWED, ISNULL(SUM(ADJ_HOURS_ALLOWED_AMT),0) AS ADJ_HOURS_ALLOWED_AMT, ISNULL(SUM(ACTUAL_HOURS),0) AS ACTUAL_HOURS, ISNULL(SUM(ACTUAL_HOURS_AMT),0) AS ACTUAL_HRS_AMT, [STATUS],
						CASE WHEN PERC_COMPLETE <> 0.00 THEN PERC_COMPLETE ELSE [PERC_SCHEDULE] END AS PERC_SCHEDULE
		FROM #PROJECT_MONTH
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, CLIENT, PROJECT_DESC, AE, [START_DATE], END_DATE, [STATUS], [PERC_SCHEDULE], [PERC_COMPLETE]
		ORDER BY JOB_NUMBER DESC, JOB_COMPONENT_NBR ASC
		--SELECT * FROM #PROJECT_TASK_LIST
		--SELECT * FROM #PROJECT_TASK_ADJ
				
        DROP TABLE #PROJECT_TASK_LIST;
        DROP TABLE #PROJECT_TASK_ADJ;
		DROP TABLE #PROJECT_FORECAST;
		DROP TABLE #PROJECT_MONTH;
        
                




        




                
                
                
                
      



