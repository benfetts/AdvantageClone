if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_RESOURCES_EMP_AVAILABILITY]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_RESOURCES_EMP_AVAILABILITY]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE [dbo].[usp_wv_RESOURCES_EMP_AVAILABILITY] 
    @EMP_CODE       VARCHAR(6),
    @ROLES		    VARCHAR(4000),
    @START_DATE     SMALLDATETIME,
    @END_DATE       SMALLDATETIME,
    -- 0 = NONE, 1 = DAY, 2 = WEEK, 3 = MONTH, 4 = YEAR, 5 = SPECIAL MODE FOR CHILD GRID ON EMP FINDER
    -- 6 = VIEW FOR TASK ASSIGNMENTS
    @SUMMARY_LEVEL  SMALLINT, 
    @DEPTS	        VARCHAR(4000),
    @EMP_LIST	    VARCHAR(4000),
	@UserID			VARCHAR(100)

AS






    SET ANSI_NULLS ON
    SET ANSI_WARNINGS OFF
    SET ARITHABORT OFF
    SET ARITHIGNORE ON















/*
* The column HRS_ASSIGNED_TASK now also includes the event hours!!!!
* need to fix: if it is a holiday with hours on it, it is getting removed...
* so does the HRS_BALANCE_AVAIL column!!!!
* BOTH COLUMNS ALSO FACTOR IN EMP_NON_TASK WHERE TIME_CATEGORY.VAC_SICK_FLAG IS NULL OR NOT 1,2,3...
*/

 	    SET @START_DATE = CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, @START_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, @START_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, @START_DATE), 101) +
				       ' 00:00:00' 
				       );
				       
 	    SET @END_DATE = CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, @END_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, @END_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, @END_DATE), 101) +
				       ' 23:59:00' 
				       );
       
--        --TEST:
--        SELECT @START_DATE AS START_DATE, @END_DATE AS END_DATE;
                
        IF @EMP_CODE = '%' OR (@EMP_CODE IS NULL) 
        BEGIN
           SET @EMP_CODE = '';
        END
        IF @ROLES IS NULL
        BEGIN
        	SET @ROLES = '';
        END
        IF @DEPTS IS NULL
        BEGIN
        	SET @DEPTS = '';
        END
        IF @EMP_LIST IS NULL
        BEGIN
        	SET @EMP_LIST = '';
        END

        
       CREATE TABLE #EMP_AVAILABILITY --MASTER TABLE TO RETURN
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
	        [EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	        [EMP_START_TIME]     SMALLDATETIME,
	        [EMP_END_TIME]     SMALLDATETIME,
	        
	        [EMP_START_TIME_SUN]     SMALLDATETIME,
	        [EMP_END_TIME_SUN]     SMALLDATETIME,
	        [EMP_START_TIME_MON]     SMALLDATETIME,
	        [EMP_END_TIME_MON]     SMALLDATETIME,
	        [EMP_START_TIME_TUE]     SMALLDATETIME,
	        [EMP_END_TIME_TUE]     SMALLDATETIME,
	        [EMP_START_TIME_WED]     SMALLDATETIME,
	        [EMP_END_TIME_WED]     SMALLDATETIME,
	        [EMP_START_TIME_THU]     SMALLDATETIME,
	        [EMP_END_TIME_THU]     SMALLDATETIME,
	        [EMP_START_TIME_FRI]     SMALLDATETIME,
	        [EMP_END_TIME_FRI]     SMALLDATETIME,
	        [EMP_START_TIME_SAT]     SMALLDATETIME,
	        [EMP_END_TIME_SAT]     SMALLDATETIME,
	        
	        [EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
	        [DATE]               SMALLDATETIME,
	        [DAY_OF_WEEK]			 INT,
	        [DAY_OF_YEAR]          INT,
	        [WEEK_OF_YEAR]         INT,
	        [MONTH_OF_YEAR]        INT,
	        [YEAR]               INT,
	        [STD_HRS_AVAIL]      DECIMAL(18,6),
	        [HRS_USED_NON_TASK]  DECIMAL(18,6),
	        [HRS_AVAIL]          DECIMAL(18,6),
	        [HRS_ASSIGNED_TASK]  DECIMAL(18,6),
	        [HRS_ASSIGNED_EVENT]  DECIMAL(18,6),
	        [HRS_BALANCE_AVAIL]  DECIMAL(18,6),
	        [NOTE]               VARCHAR(100),
	        [IS_FULL_DAY_OFF]    SMALLINT,
	        [HRS_APPTS]			 DECIMAL(18,6)
        );
        CREATE TABLE #DAY_RANGE --RANGE OF DAYS
        (
	        [DATE] SMALLDATETIME,
        );
        CREATE TABLE #EMP_LIST --LIST OF EMPS
        (
	        [EMP_CODE] VARCHAR(6),
	        [EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
	        [EMP_START_TIME]     SMALLDATETIME,
	        [EMP_END_TIME]     SMALLDATETIME,
	        [EMP_START_TIME_SUN]     SMALLDATETIME,
	        [EMP_END_TIME_SUN]     SMALLDATETIME,
	        [EMP_START_TIME_MON]     SMALLDATETIME,
	        [EMP_END_TIME_MON]     SMALLDATETIME,
	        [EMP_START_TIME_TUE]     SMALLDATETIME,
	        [EMP_END_TIME_TUE]     SMALLDATETIME,
	        [EMP_START_TIME_WED]     SMALLDATETIME,
	        [EMP_END_TIME_WED]     SMALLDATETIME,
	        [EMP_START_TIME_THU]     SMALLDATETIME,
	        [EMP_END_TIME_THU]     SMALLDATETIME,
	        [EMP_START_TIME_FRI]     SMALLDATETIME,
	        [EMP_END_TIME_FRI]     SMALLDATETIME,
	        [EMP_START_TIME_SAT]     SMALLDATETIME,
	        [EMP_END_TIME_SAT]     SMALLDATETIME
        );

        --1. GET DAYS (LOOP)
        --=================================================================================================
        DECLARE @DAY_COUNT      AS INTEGER,
                @DAY_INCREMENT  AS INTEGER
                
        SET @DAY_INCREMENT = -1;
        SELECT @DAY_COUNT = DATEDIFF(dd, @START_DATE, @END_DATE) + 1;
        
--        --TEST:
--        SELECT @DAY_COUNT AS DAY_COUNT;
        
        WHILE @DAY_COUNT > 0
        BEGIN
            INSERT INTO #DAY_RANGE
              (
                [DATE]
              )
            VALUES
              (
                DATEADD(dd, @DAY_INCREMENT + 1, @START_DATE)
              );
            SET @DAY_INCREMENT = @DAY_INCREMENT + 1;
            SET @DAY_COUNT = @DAY_COUNT - 1;
        END
		UPDATE #DAY_RANGE SET [DATE] = @END_DATE WHERE [DATE] = (SELECT MAX([DATE]) FROM #DAY_RANGE)
--        --TEST:
--        SELECT * FROM #DAY_RANGE;


        --2. GET EMPS (SELECT)
        --=================================================================================================
        DECLARE @DYNA_SQL AS NVARCHAR(4000);
        SET @DYNA_SQL = '';
        --INITIALIZE THE DYNAMIC SQL:
        SET @DYNA_SQL = 'INSERT INTO #EMP_LIST(EMP_CODE,EMP_START_TIME,EMP_END_TIME,EMP_START_TIME_SUN,EMP_END_TIME_SUN,EMP_START_TIME_MON,EMP_END_TIME_MON,EMP_START_TIME_TUE,EMP_END_TIME_TUE,EMP_START_TIME_WED,EMP_END_TIME_WED,EMP_START_TIME_THU,EMP_END_TIME_THU,EMP_START_TIME_FRI,EMP_END_TIME_FRI,EMP_START_TIME_SAT,EMP_END_TIME_SAT,EMP_DIRECT_HRS_GOAL_PERC)'
        SET @DYNA_SQL = @DYNA_SQL + 'SELECT DISTINCT EMPLOYEE.EMP_CODE, EMPLOYEE.EMP_START_TIME, EMPLOYEE.EMP_END_TIME,EMPLOYEE.EMP_START_TIME_SUN,EMPLOYEE.EMP_END_TIME_SUN,EMPLOYEE.EMP_START_TIME_MON,EMPLOYEE.EMP_END_TIME_MON,EMPLOYEE.EMP_START_TIME_TUE,EMPLOYEE.EMP_END_TIME_TUE,EMPLOYEE.EMP_START_TIME_WED,EMPLOYEE.EMP_END_TIME_WED,EMPLOYEE.EMP_START_TIME_THU,EMPLOYEE.EMP_END_TIME_THU,
		        EMPLOYEE.EMP_START_TIME_FRI,EMPLOYEE.EMP_END_TIME_FRI,EMPLOYEE.EMP_START_TIME_SAT,EMPLOYEE.EMP_END_TIME_SAT,EMPLOYEE.DIRECT_HRS_PER 
                FROM EMPLOYEE WITH (NOLOCK) '
        IF (@ROLES <> '') 
	        BEGIN
				SET @DYNA_SQL = @DYNA_SQL + ' INNER JOIN EMP_TRAFFIC_ROLE WITH (NOLOCK) ON EMPLOYEE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE'
	        END

  
        --- START THE WHERE CLAUSE
        SET @DYNA_SQL = @DYNA_SQL + ' WHERE (EMPLOYEE.EMP_TERM_DATE IS NULL) AND 1 = 1 '
        --FILTER BY EMP CODE       
		IF (@EMP_CODE <> '') 
			BEGIN
				SET @DYNA_SQL = @DYNA_SQL + 'AND EMPLOYEE.EMP_CODE = ''' + @EMP_CODE + ''''
			END
		--FILTER BY EMP CODE LIST:	
		IF (@EMP_LIST <> '') 
			BEGIN
				SET @DYNA_SQL = @DYNA_SQL + 'AND (EMPLOYEE.EMP_CODE IN ('+ @EMP_LIST +'))'
			END
        --FILTER BY ROLE                            
        IF (@ROLES <> '') 
	        BEGIN
				SET @DYNA_SQL = @DYNA_SQL + 'AND (EMP_TRAFFIC_ROLE.ROLE_CODE IN ('+ @ROLES +')) '
	        END
        --FILTER BY DEPT                            
        IF (@DEPTS <> '') 
	        BEGIN
				SET @DYNA_SQL = @DYNA_SQL + 'AND (EMPLOYEE.DP_TM_CODE IN ('+ @DEPTS +')) '
	        END


       --END THE DYNAMIC SQL:                            
        SET @DYNA_SQL = @DYNA_SQL + ' ORDER BY EMPLOYEE.EMP_CODE;'
        
        --PRINT @DYNA_SQL;
  		EXEC sp_executesql @DYNA_SQL;
      
--        --TEST:
--        SELECT * FROM #EMP_LIST;



        --3. PUT BOTH INTO LIST
        DECLARE @CURR_EMP_CODE AS VARCHAR(6),
	        @CURR_EMP_START_TIME     SMALLDATETIME,
	        @CURR_EMP_END_TIME     SMALLDATETIME,
	        @CURR_EMP_START_TIME_SUN     SMALLDATETIME,
	        @CURR_EMP_END_TIME_SUN     SMALLDATETIME,
	        @CURR_EMP_START_TIME_MON     SMALLDATETIME,
	        @CURR_EMP_END_TIME_MON     SMALLDATETIME,
	        @CURR_EMP_START_TIME_TUE     SMALLDATETIME,
	        @CURR_EMP_END_TIME_TUE     SMALLDATETIME,
	        @CURR_EMP_START_TIME_WED     SMALLDATETIME,
	        @CURR_EMP_END_TIME_WED     SMALLDATETIME,
	        @CURR_EMP_START_TIME_THU     SMALLDATETIME,
	        @CURR_EMP_END_TIME_THU     SMALLDATETIME,
	        @CURR_EMP_START_TIME_FRI     SMALLDATETIME,
	        @CURR_EMP_END_TIME_FRI     SMALLDATETIME,
	        @CURR_EMP_START_TIME_SAT     SMALLDATETIME,
	        @CURR_EMP_END_TIME_SAT     SMALLDATETIME,
	        @CURR_EMP_DIRECT_HRS_GOAL_PERC DECIMAL(18,6)
	        ;
        DECLARE MY_ROWS                         CURSOR  
        FOR
	        SELECT EMP_CODE
	        FROM   #EMP_LIST
        ;
        OPEN MY_ROWS;
        FETCH NEXT FROM MY_ROWS INTO @CURR_EMP_CODE;
        WHILE @@FETCH_STATUS = 0
        BEGIN
	        SELECT @CURR_EMP_START_TIME = EMP_START_TIME, @CURR_EMP_END_TIME = EMP_END_TIME,
	        @CURR_EMP_START_TIME_SUN = EMP_START_TIME_SUN, 
	        @CURR_EMP_END_TIME_SUN = EMP_END_TIME_SUN,
	        @CURR_EMP_START_TIME_MON = EMP_START_TIME_MON, 
	        @CURR_EMP_END_TIME_MON = EMP_END_TIME_MON,
	        @CURR_EMP_START_TIME_TUE = EMP_START_TIME_TUE, 
	        @CURR_EMP_END_TIME_TUE = EMP_END_TIME_TUE,
	        @CURR_EMP_START_TIME_WED = EMP_START_TIME_WED, 
	        @CURR_EMP_END_TIME_WED = EMP_END_TIME_WED,
	        @CURR_EMP_START_TIME_THU = EMP_START_TIME_THU, 
	        @CURR_EMP_END_TIME_THU = EMP_END_TIME_THU,
	        @CURR_EMP_START_TIME_FRI = EMP_START_TIME_FRI, 
	        @CURR_EMP_END_TIME_FRI = EMP_END_TIME_FRI,
	        @CURR_EMP_START_TIME_SAT = EMP_START_TIME_SAT, 
	        @CURR_EMP_END_TIME_SAT = EMP_END_TIME_SAT,
	        @CURR_EMP_DIRECT_HRS_GOAL_PERC = ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.00) FROM #EMP_LIST WHERE EMP_CODE = @CURR_EMP_CODE;
	        INSERT INTO #EMP_AVAILABILITY(EMP_CODE,[DATE],EMP_START_TIME,EMP_END_TIME,EMP_START_TIME_SUN,EMP_END_TIME_SUN,EMP_START_TIME_MON,EMP_END_TIME_MON,EMP_START_TIME_TUE,EMP_END_TIME_TUE,EMP_START_TIME_WED,EMP_END_TIME_WED,EMP_START_TIME_THU,EMP_END_TIME_THU,EMP_START_TIME_FRI,EMP_END_TIME_FRI,EMP_START_TIME_SAT,EMP_END_TIME_SAT,EMP_DIRECT_HRS_GOAL_PERC)
	        SELECT @CURR_EMP_CODE,[DATE],@CURR_EMP_START_TIME,@CURR_EMP_END_TIME,
	         @CURR_EMP_START_TIME_SUN, @CURR_EMP_END_TIME_SUN, @CURR_EMP_START_TIME_MON, @CURR_EMP_END_TIME_MON, @CURR_EMP_START_TIME_TUE, @CURR_EMP_END_TIME_TUE, @CURR_EMP_START_TIME_WED, @CURR_EMP_END_TIME_WED, @CURR_EMP_START_TIME_THU, @CURR_EMP_END_TIME_THU, @CURR_EMP_START_TIME_FRI, @CURR_EMP_END_TIME_FRI, @CURR_EMP_START_TIME_SAT, @CURR_EMP_END_TIME_SAT,
	        @CURR_EMP_DIRECT_HRS_GOAL_PERC FROM #DAY_RANGE;   
	        --GO TO NEXT EVENT
	        FETCH NEXT FROM MY_ROWS INTO @CURR_EMP_CODE;
        END
        CLOSE MY_ROWS;
        DEALLOCATE MY_ROWS;
--        --TEST:
--        SELECT * FROM #EMP_LIST;
        
--        --FIX THE SMALLDATETIME ROUNDING
--        UPDATE #EMP_AVAILABILITY
--        SET
--        	[DATE] = DATEADD(DD,-1,[DATE])

--        --TEST:
--        SELECT * FROM #EMP_AVAILABILITY;
        
        --SET DATE COUNTERS:
        UPDATE #EMP_AVAILABILITY SET
	        DAY_OF_WEEK = DATEPART(weekday,[DATE]),
	        DAY_OF_YEAR= DATEPART(dayofyear,[DATE]) ,
	        WEEK_OF_YEAR= DATEPART(wk,[DATE]) ,
	        MONTH_OF_YEAR= DATEPART(mm,[DATE]),
	        [YEAR] = DATEPART(yy,[DATE]) 
	  
--        --TEST:
--        SELECT * FROM #EMP_AVAILABILITY;
--		SELECT EMP_CODE, HRS_ASSIGNED_TASK,DATE FROM #EMP_AVAILABILITY;

        --4. LOOP THROUGH MAIN TABLE AND UPDATE DATA:
        SET @CURR_EMP_CODE = NULL;
        DECLARE 
	        @CURR_DATE AS SMALLDATETIME,
	        @CURR_ROW_ID AS INT,
	        @CURR_DAY_OF_WEEK AS INT,
	        @CURR_ROW_ID_HAS_BEEN_DELETED AS SMALLINT,
	        @CURR_DAY_OF_YEAR AS INT,
	        @CURR_YEAR AS INT

	        DECLARE MY_ROWS2                         CURSOR  
	        FOR
		        SELECT ROW_ID
		        FROM   #EMP_AVAILABILITY
	        ;
	        OPEN MY_ROWS2;
	        FETCH NEXT FROM MY_ROWS2 INTO @CURR_ROW_ID;
	        WHILE @@FETCH_STATUS = 0
	        BEGIN
	        	--INITIALIZE:
	        	SET @CURR_ROW_ID_HAS_BEEN_DELETED = 0;
				SET @CURR_EMP_CODE = NULL;
				SET @CURR_DATE = NULL;
				SET @CURR_DAY_OF_WEEK = NULL;
				SET @CURR_YEAR = NULL;
		        --A. SET IDENTIFYING INFO:
		        SELECT @CURR_EMP_CODE = EMP_CODE, @CURR_DATE = [DATE], @CURR_DAY_OF_WEEK = DAY_OF_WEEK, @CURR_DAY_OF_YEAR = DATEPART(dayofyear,[DATE]), @CURR_YEAR = DATEPART(yy,[DATE])  
		        FROM #EMP_AVAILABILITY WHERE ROW_ID = @CURR_ROW_ID;
		        
--		        --TEST:
--		        SELECT @CURR_DAY_OF_YEAR, @CURR_YEAR;
		        
		        --B. SET STANDARD HOURS:
		        ----SUNDAY:
		        IF @CURR_DAY_OF_WEEK = 1 
		        AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sun%') 
		        BEGIN
			        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = ISNULL(SUN_HRS,0) FROM #EMP_AVAILABILITY  INNER JOIN EMPLOYEE WITH(NOLOCK) ON #EMP_AVAILABILITY.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  WHERE EMPLOYEE.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        END		
		        IF @CURR_DAY_OF_WEEK = 1 
		        AND NOT EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sun%') 
				--REMOVE IF THEY DON'T HAVE TASKS...
				AND 
				(
				NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM        
						V_JOB_TRAFFIC_DET WITH (NOLOCK) INNER JOIN
						JOB_COMPONENT ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      
					(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND
					(V_JOB_TRAFFIC_DET.EMP_CODE = @CURR_EMP_CODE)  AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
							AND @CURR_YEAR <= DATEPART(yy,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.TASK_START_DATE)
							AND @CURR_YEAR >= DATEPART(yy,V_JOB_TRAFFIC_DET.TASK_START_DATE)
						)
					)
				) 	    
				--THEY DON'T HAVE EVENT TASK    
				AND NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM       
						EVENT_TASK WITH (NOLOCK) INNER JOIN
						EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
						JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      (EVENT_TASK.EMP_CODE = @CURR_EMP_CODE)
					AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,EVENT_TASK.END_TIME)
							AND @CURR_YEAR <= DATEPART(yy,EVENT_TASK.END_TIME)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,EVENT_TASK.START_TIME)
							AND @CURR_YEAR >= DATEPART(yy,EVENT_TASK.START_TIME)
						)
					)
				)	
				)
		        --REMOVE IF IT IS AN ALL DAY HOLIDAY
		        OR EXISTS(
		        	SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		        	WHERE 
					[TYPE] = 'H'	
					AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					AND ALL_DAY = 1
		        )			    
		        BEGIN
			        DELETE FROM #EMP_AVAILABILITY WHERE #EMP_AVAILABILITY.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        	SET @CURR_ROW_ID_HAS_BEEN_DELETED = 1;
				END		
		        
		        ----MONDAY:
		        IF @CURR_DAY_OF_WEEK = 2  
		        AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Mon%') 
		        BEGIN
			        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = ISNULL(MON_HRS,0) FROM #EMP_AVAILABILITY  INNER JOIN EMPLOYEE WITH(NOLOCK) ON #EMP_AVAILABILITY.EMP_CODE  COLLATE SQL_Latin1_General_CP1_CS_AS= EMPLOYEE.EMP_CODE  COLLATE SQL_Latin1_General_CP1_CS_AS WHERE EMPLOYEE.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        END		
--		        SELECT HRS_ASSIGNED_TASK,DATE FROM #EMP_AVAILABILITY

		        IF @CURR_DAY_OF_WEEK = 2  
		        AND NOT EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Mon%') 
				--REMOVE IF THEY DON'T HAVE TASKS...
				AND 
				(
				NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM        
						V_JOB_TRAFFIC_DET WITH (NOLOCK) INNER JOIN
						JOB_COMPONENT ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      
					(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND
					(V_JOB_TRAFFIC_DET.EMP_CODE = @CURR_EMP_CODE)  AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
							AND @CURR_YEAR <= DATEPART(yy,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.TASK_START_DATE)
							AND @CURR_YEAR >= DATEPART(yy,V_JOB_TRAFFIC_DET.TASK_START_DATE)
						)
					)
				) 	    
				--THEY DON'T HAVE EVENT TASK    
				AND NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM       
						EVENT_TASK WITH (NOLOCK) INNER JOIN
						EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
						JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      (EVENT_TASK.EMP_CODE = @CURR_EMP_CODE)
					AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,EVENT_TASK.END_TIME)
							AND @CURR_YEAR <= DATEPART(yy,EVENT_TASK.END_TIME)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,EVENT_TASK.START_TIME)
							AND @CURR_YEAR >= DATEPART(yy,EVENT_TASK.START_TIME)
						)
					)
				)	
				)
		        --REMOVE IF IT IS AN ALL DAY HOLIDAY
		        OR EXISTS(
		        	SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		        	WHERE 
					[TYPE] = 'H'	
					AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					AND ALL_DAY = 1
		        )			    
		        BEGIN
			        DELETE FROM #EMP_AVAILABILITY WHERE #EMP_AVAILABILITY.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        	SET @CURR_ROW_ID_HAS_BEEN_DELETED = 1;
		        END		
		        
		        ----TUESDAY:
		        IF @CURR_DAY_OF_WEEK = 3  
		        AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Tue%') 
		        BEGIN
			        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = ISNULL(TUE_HRS,0) FROM #EMP_AVAILABILITY  INNER JOIN EMPLOYEE WITH(NOLOCK) ON #EMP_AVAILABILITY.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  WHERE EMPLOYEE.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        END		
		        IF @CURR_DAY_OF_WEEK = 3  
		        AND NOT EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Tue%') 
				--REMOVE IF THEY DON'T HAVE TASKS...
				AND 
				(
				NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM        
						V_JOB_TRAFFIC_DET WITH (NOLOCK) INNER JOIN
						JOB_COMPONENT ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      
					(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND
					(V_JOB_TRAFFIC_DET.EMP_CODE = @CURR_EMP_CODE)  AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
							AND @CURR_YEAR <= DATEPART(yy,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.TASK_START_DATE)
							AND @CURR_YEAR >= DATEPART(yy,V_JOB_TRAFFIC_DET.TASK_START_DATE)
						)
					)
				) 	    
				--THEY DON'T HAVE EVENT TASK    
				AND NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM       
						EVENT_TASK WITH (NOLOCK) INNER JOIN
						EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
						JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      (EVENT_TASK.EMP_CODE = @CURR_EMP_CODE)
					AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,EVENT_TASK.END_TIME)
							AND @CURR_YEAR <= DATEPART(yy,EVENT_TASK.END_TIME)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,EVENT_TASK.START_TIME)
							AND @CURR_YEAR >= DATEPART(yy,EVENT_TASK.START_TIME)
						)
					)
				)	
				)
		        --REMOVE IF IT IS AN ALL DAY HOLIDAY
		        OR EXISTS(
		        	SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		        	WHERE 
					[TYPE] = 'H'	
					AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					AND ALL_DAY = 1
		        )			    
		        BEGIN
			        DELETE FROM #EMP_AVAILABILITY WHERE #EMP_AVAILABILITY.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        	SET @CURR_ROW_ID_HAS_BEEN_DELETED = 1;
		        END		
		        
		        ----WEDNESDAY:
		        IF @CURR_DAY_OF_WEEK = 4  
		        AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Wed%') 
		        BEGIN
			        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = ISNULL(WED_HRS,0) FROM #EMP_AVAILABILITY  INNER JOIN EMPLOYEE WITH(NOLOCK) ON #EMP_AVAILABILITY.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  WHERE EMPLOYEE.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        END		
		        IF @CURR_DAY_OF_WEEK = 4  
		        AND NOT EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Wed%') 
				--REMOVE IF THEY DON'T HAVE TASKS...
				AND 
				(
				NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM        
						V_JOB_TRAFFIC_DET WITH (NOLOCK) INNER JOIN
						JOB_COMPONENT ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      
					(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND
					(V_JOB_TRAFFIC_DET.EMP_CODE = @CURR_EMP_CODE)  AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
							AND @CURR_YEAR <= DATEPART(yy,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.TASK_START_DATE)
							AND @CURR_YEAR >= DATEPART(yy,V_JOB_TRAFFIC_DET.TASK_START_DATE)
						)
					)
				) 	    
				--THEY DON'T HAVE EVENT TASK    
				AND NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM       
						EVENT_TASK WITH (NOLOCK) INNER JOIN
						EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
						JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      (EVENT_TASK.EMP_CODE = @CURR_EMP_CODE)
					AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,EVENT_TASK.END_TIME)
							AND @CURR_YEAR <= DATEPART(yy,EVENT_TASK.END_TIME)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,EVENT_TASK.START_TIME)
							AND @CURR_YEAR >= DATEPART(yy,EVENT_TASK.START_TIME)
						)
					)
				)	
				)
		        --REMOVE IF IT IS AN ALL DAY HOLIDAY
		        OR EXISTS(
		        	SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		        	WHERE 
					[TYPE] = 'H'	
					AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					AND ALL_DAY = 1
		        )			    
		        BEGIN
			        DELETE FROM #EMP_AVAILABILITY WHERE #EMP_AVAILABILITY.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        	SET @CURR_ROW_ID_HAS_BEEN_DELETED = 1;
		        END		
		        
		        ----THURSDAY:
		        IF @CURR_DAY_OF_WEEK = 5  
		        AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Thu%')
		        BEGIN
			        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = ISNULL(THU_HRS,0) FROM #EMP_AVAILABILITY  INNER JOIN EMPLOYEE WITH(NOLOCK) ON #EMP_AVAILABILITY.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  WHERE EMPLOYEE.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        END		
		        IF @CURR_DAY_OF_WEEK = 5  
		        AND NOT EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Thu%') 
				--REMOVE IF THEY DON'T HAVE TASKS...
				AND 
				(
				NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM        
						V_JOB_TRAFFIC_DET WITH (NOLOCK) INNER JOIN
						JOB_COMPONENT ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      
					(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND
					(V_JOB_TRAFFIC_DET.EMP_CODE = @CURR_EMP_CODE)  AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
							AND @CURR_YEAR <= DATEPART(yy,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.TASK_START_DATE)
							AND @CURR_YEAR >= DATEPART(yy,V_JOB_TRAFFIC_DET.TASK_START_DATE)
						)
					)
				) 	    
				--THEY DON'T HAVE EVENT TASK    
				AND NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM       
						EVENT_TASK WITH (NOLOCK) INNER JOIN
						EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
						JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      (EVENT_TASK.EMP_CODE = @CURR_EMP_CODE)
					AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,EVENT_TASK.END_TIME)
							AND @CURR_YEAR <= DATEPART(yy,EVENT_TASK.END_TIME)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,EVENT_TASK.START_TIME)
							AND @CURR_YEAR >= DATEPART(yy,EVENT_TASK.START_TIME)
						)
					)
				)	
				)
		        --REMOVE IF IT IS AN ALL DAY HOLIDAY
		        OR EXISTS(
		        	SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		        	WHERE 
					[TYPE] = 'H'	
					AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					AND ALL_DAY = 1
		        )			    
		        BEGIN
			        DELETE FROM #EMP_AVAILABILITY WHERE #EMP_AVAILABILITY.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        	SET @CURR_ROW_ID_HAS_BEEN_DELETED = 1;
		        END		
		        
		        ----FRIDAY:
		        IF @CURR_DAY_OF_WEEK = 6  
		        AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Fri%') 
		        BEGIN
			        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = ISNULL(FRI_HRS,0) FROM #EMP_AVAILABILITY  INNER JOIN EMPLOYEE WITH(NOLOCK) ON #EMP_AVAILABILITY.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  WHERE EMPLOYEE.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        END	
		        
		        IF @CURR_DAY_OF_WEEK = 6  
		        AND
		        --REMOVE IF THEY DON'T WORK THAT DAY
		        NOT EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Fri%') 
				--REMOVE IF THEY DON'T HAVE TASKS...
				AND 
				(
				NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM        
						V_JOB_TRAFFIC_DET WITH (NOLOCK) INNER JOIN
						JOB_COMPONENT ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      
					(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND
					(V_JOB_TRAFFIC_DET.EMP_CODE = @CURR_EMP_CODE)  AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
							AND @CURR_YEAR <= DATEPART(yy,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.TASK_START_DATE)
							AND @CURR_YEAR >= DATEPART(yy,V_JOB_TRAFFIC_DET.TASK_START_DATE)
						)
					)
				) 	    
				--THEY DON'T HAVE EVENT TASK    
				AND NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM       
						EVENT_TASK WITH (NOLOCK) INNER JOIN
						EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
						JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      (EVENT_TASK.EMP_CODE = @CURR_EMP_CODE)
					AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,EVENT_TASK.END_TIME)
							AND @CURR_YEAR <= DATEPART(yy,EVENT_TASK.END_TIME)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,EVENT_TASK.START_TIME)
							AND @CURR_YEAR >= DATEPART(yy,EVENT_TASK.START_TIME)
						)
					)
				)	
				)
		        --REMOVE IF IT IS AN ALL DAY HOLIDAY
		        OR EXISTS(
		        	SELECT NON_TASK_ID FROM EMP_NON_TASKS 
		        	WHERE 
					[TYPE] = 'H'	
					AND (@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,[START_DATE]) AND @CURR_YEAR >= DATEPART(yy,[START_DATE]))
					AND (@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_DATE) AND @CURR_YEAR <= DATEPART(yy,END_DATE))
					AND ALL_DAY = 1
		        )			    
		        BEGIN
			        DELETE FROM #EMP_AVAILABILITY WHERE #EMP_AVAILABILITY.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        	SET @CURR_ROW_ID_HAS_BEEN_DELETED = 1;
		        END	
		        	
		        ----SATURDAY:
		        IF @CURR_DAY_OF_WEEK = 7  
		        AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sat%')
		        BEGIN
			        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = ISNULL(SAT_HRS,0) FROM #EMP_AVAILABILITY  INNER JOIN EMPLOYEE WITH(NOLOCK) ON #EMP_AVAILABILITY.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  WHERE EMPLOYEE.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        END		
		        IF @CURR_DAY_OF_WEEK = 7  
		        AND NOT EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sat%') 
		        OR EXISTS(SELECT NON_TASK_ID FROM EMP_NON_TASKS WHERE TYPE = 'H' AND DATEPART(dayofyear,[START_DATE]) = @CURR_DAY_OF_YEAR AND DATEPART(yy,[START_DATE]) = @CURR_YEAR AND ALL_DAY = 1)
				AND 
				NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM        
						V_JOB_TRAFFIC_DET WITH (NOLOCK) INNER JOIN
						JOB_COMPONENT ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      
					(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND
					(V_JOB_TRAFFIC_DET.EMP_CODE = @CURR_EMP_CODE)  AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
							AND @CURR_YEAR <= DATEPART(yy,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,V_JOB_TRAFFIC_DET.TASK_START_DATE)
							AND @CURR_YEAR >= DATEPART(yy,V_JOB_TRAFFIC_DET.TASK_START_DATE)
						)
					)
				) 	        
				AND NOT EXISTS
				(
					SELECT     COUNT(1)
					FROM       
						EVENT_TASK WITH (NOLOCK) INNER JOIN
						EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
						JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					WHERE      (EVENT_TASK.EMP_CODE = @CURR_EMP_CODE)
					AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
					AND 
					(
						(
							@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,EVENT_TASK.END_TIME)
							AND @CURR_YEAR <= DATEPART(yy,EVENT_TASK.END_TIME)
						) 
						AND 
						(
							@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,EVENT_TASK.START_TIME)
							AND @CURR_YEAR >= DATEPART(yy,EVENT_TASK.START_TIME)
						)
					)
				) 	        
		        BEGIN
			        DELETE FROM #EMP_AVAILABILITY WHERE #EMP_AVAILABILITY.EMP_CODE = @CURR_EMP_CODE AND #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
		        	SET @CURR_ROW_ID_HAS_BEEN_DELETED = 1;
		        END		
		        
		        
		        IF @CURR_ROW_ID_HAS_BEEN_DELETED = 0
		        BEGIN
						--C. GET NON-TASKS TOTALS
						--REMOVE HOLIDAY HOURS:
						--NOT SURE IF THIS "IF" FIRES SINCE IT SHOULD BE GETTING DELETED ABOVE (?)
						IF EXISTS(SELECT NON_TASK_ID FROM EMP_NON_TASKS WITH(NOLOCK) WHERE TYPE = 'H' 
						AND 
						(
							DATEPART(dayofyear,[START_DATE]) = @CURR_DAY_OF_YEAR AND DATEPART(yy,[START_DATE]) = @CURR_YEAR 
							OR DATEPART(dayofyear,[END_DATE]) = @CURR_DAY_OF_YEAR AND DATEPART(yy,[END_DATE]) = @CURR_YEAR 
						)
						AND ALL_DAY = 1)
						--add a "NOT EXISTS" IF THERE IS A TASK FOR THE DATE???
						BEGIN
							UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 0, 
										#EMP_AVAILABILITY.NOTE = EMP_NON_TASKS.NON_TASK_DESC, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 1
							FROM #EMP_AVAILABILITY INNER JOIN EMP_NON_TASKS WITH(NOLOCK) 
								ON DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) = DATEPART(dayofyear,EMP_NON_TASKS.START_DATE)
								AND DATEPART(yy,#EMP_AVAILABILITY.DATE) = DATEPART(yy,EMP_NON_TASKS.START_DATE)
							WHERE #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID
							AND TYPE = 'H' 
							AND 
							(
								DATEPART(dayofyear,[START_DATE]) = @CURR_DAY_OF_YEAR AND DATEPART(yy,[START_DATE]) = @CURR_YEAR 
								OR DATEPART(dayofyear,[END_DATE]) = @CURR_DAY_OF_YEAR AND DATEPART(yy,[END_DATE]) = @CURR_YEAR 
							)
							AND ALL_DAY = 1
							;
						END
		        		
						IF EXISTS(SELECT NON_TASK_ID FROM EMP_NON_TASKS WHERE TYPE = 'H' 
						AND 
						(
							DATEPART(dayofyear,[START_DATE]) = @CURR_DAY_OF_YEAR AND DATEPART(yy,[START_DATE]) = @CURR_YEAR 
							OR DATEPART(dayofyear,[END_DATE]) = @CURR_DAY_OF_YEAR AND DATEPART(yy,[END_DATE]) = @CURR_YEAR 
						)
						AND ALL_DAY = 0)
						BEGIN
							UPDATE #EMP_AVAILABILITY 
							SET #EMP_AVAILABILITY.STD_HRS_AVAIL = ISNULL(#EMP_AVAILABILITY.STD_HRS_AVAIL,0.00) - ISNULL(EMP_NON_TASKS.HOURS,0.00),
							#EMP_AVAILABILITY.NOTE = EMP_NON_TASKS.NON_TASK_DESC
							FROM #EMP_AVAILABILITY INNER JOIN EMP_NON_TASKS WITH(NOLOCK) ON 
							DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) = DATEPART(dayofyear,EMP_NON_TASKS.START_DATE)
							AND DATEPART(yy,#EMP_AVAILABILITY.DATE) = DATEPART(yy,EMP_NON_TASKS.START_DATE)
							WHERE #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID
							AND TYPE = 'H' 
							AND 
							(
								DATEPART(dayofyear,[START_DATE]) = @CURR_DAY_OF_YEAR AND DATEPART(yy,[START_DATE]) = @CURR_YEAR 
								OR DATEPART(dayofyear,[END_DATE]) = @CURR_DAY_OF_YEAR AND DATEPART(yy,[END_DATE]) = @CURR_YEAR 
							)
							AND ALL_DAY = 0
							;
						END
						
--						--TEST:
--		        		SELECT * FROM #EMP_AVAILABILITY;
--			SELECT EMP_CODE, HRS_ASSIGNED_TASK,DATE FROM #EMP_AVAILABILITY;
	        		
						--DECREMENT NON ALL-DAY AND MULTI-DAY APPOINTMENTS:
						UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = 
						A.SUM_HRS, #EMP_AVAILABILITY.NOTE = 'Appointment'
						FROM
						( SELECT
						ISNULL(SUM(EMP_NON_TASKS.HOURS),0.000000) AS SUM_HRS
						FROM         EMP_NON_TASKS WITH(NOLOCK) INNER JOIN
											  TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY INNER JOIN
											  EMPLOYEE WITH(NOLOCK) ON EMP_NON_TASKS.EMP_CODE = EMPLOYEE.EMP_CODE
						WHERE     (EMP_NON_TASKS.EMP_CODE = @CURR_EMP_CODE) AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) AND ((ALL_DAY IS NULL) OR ALL_DAY = 0)
						AND
						(
							(DATEPART(dayofyear,EMP_NON_TASKS.START_DATE) = @CURR_DAY_OF_YEAR AND DATEPART(yy,EMP_NON_TASKS.START_DATE) = @CURR_YEAR)
							OR (DATEPART(dayofyear,EMP_NON_TASKS.END_DATE) = @CURR_DAY_OF_YEAR AND DATEPART(yy,EMP_NON_TASKS.END_DATE) = @CURR_YEAR))
						) AS A
						WHERE #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;
						
						--ZERO OUT ALL-DAY (AND ALL DAY MULTI-DAY) APPOINTMENTS:
						UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = STD_HRS_AVAIL, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 2
						FROM EMP_NON_TASKS WITH(NOLOCK) INNER JOIN
											  TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY INNER JOIN
											  #EMP_AVAILABILITY WITH(NOLOCK) ON EMP_NON_TASKS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
						WHERE #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) AND EMP_NON_TASKS.ALL_DAY = 1
						AND 
						(
							(
								@CURR_DAY_OF_YEAR <= DATEPART(dayofyear,END_TIME)
								AND @CURR_YEAR <= DATEPART(yy,END_TIME)
							) 
							AND 
							(
								@CURR_DAY_OF_YEAR >= DATEPART(dayofyear,START_TIME)
								AND @CURR_YEAR >= DATEPART(yy,START_TIME)
							)
--							(DATEPART(dayofyear,EMP_NON_TASKS.START_DATE) = @CURR_DAY_OF_YEAR AND DATEPART(yy,EMP_NON_TASKS.START_DATE) = @CURR_YEAR)
--							OR (DATEPART(dayofyear,EMP_NON_TASKS.END_DATE) = @CURR_DAY_OF_YEAR AND DATEPART(yy,EMP_NON_TASKS.END_DATE) = @CURR_YEAR)
						)
						;
						
--						--TEST:
--		        		SELECT * FROM #EMP_AVAILABILITY;
		        		
						--ADD IN NON APPOINTMENTS BY ADDING IT TO THE TASK HOURS...?  Total of Appointment hours
						UPDATE #EMP_AVAILABILITY SET HRS_APPTS = 
						ISNULL(A.SUM_HRS,0.000000)
						FROM
						( 
							SELECT     ISNULL(SUM(EMP_NON_TASKS.HOURS),0.000000) AS SUM_HRS
							FROM         EMP_NON_TASKS WITH(NOLOCK) LEFT OUTER JOIN
												  TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY
							WHERE     (EMP_NON_TASKS.EMP_CODE = @CURR_EMP_CODE) 
							AND 
							(
								(DATEPART(dayofyear,EMP_NON_TASKS.START_DATE) = @CURR_DAY_OF_YEAR AND DATEPART(yy,EMP_NON_TASKS.START_DATE) = @CURR_YEAR)
								OR (DATEPART(dayofyear,EMP_NON_TASKS.END_DATE) = @CURR_DAY_OF_YEAR AND DATEPART(yy,EMP_NON_TASKS.END_DATE) = @CURR_YEAR)
							)
							AND ((TIME_CATEGORY.VAC_SICK_FLAG NOT IN (1, 2, 3) OR TIME_CATEGORY.VAC_SICK_FLAG IS NULL ))
						) AS A
						WHERE #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID;

						  
--						--TEST:
--		        		SELECT * FROM #EMP_AVAILABILITY;
--SELECT HRS_ASSIGNED_TASK,DATE FROM #EMP_AVAILABILITY
								UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = 
									ISNULL(HRS_ASSIGNED_TASK,0.000000) + ISNULL(A.HOURS_TODAY,0.000000)
									FROM
									(
									SELECT 
									CASE
										WHEN [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_DATE,@CURR_DATE,1) = 0 THEN 0
										ELSE SUM(ISNULL(JOB_HRS,0.000000)/[dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,V_JOB_TRAFFIC_DET.TASK_START_DATE,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE,1)) 
									END
									AS HOURS_TODAY  
								FROM         
									V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
									JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
									V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
									JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
									JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
								WHERE (V_JOB_TRAFFIC_DET.EMP_CODE = @CURR_EMP_CODE)  
									AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
									AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
									AND 
									(
										(
											DATEPART(dayofyear,JOB_REVISED_DATE) >= @CURR_DAY_OF_YEAR
											AND DATEPART(yy,JOB_REVISED_DATE) >= @CURR_YEAR	
										) 
										AND 
										(
											DATEPART(dayofyear,TASK_START_DATE) <= @CURR_DAY_OF_YEAR
											AND DATEPART(yy,TASK_START_DATE) <= @CURR_YEAR	
										)
									)
									) AS A
								WHERE #EMP_AVAILABILITY.ROW_ID = @CURR_ROW_ID
--						--TEST:
--		        		SELECT * FROM #EMP_AVAILABILITY;
						
						--GET HOURS ASSIGNED TO EVENTS/TASKS:
						UPDATE #EMP_AVAILABILITY
						SET #EMP_AVAILABILITY.HRS_ASSIGNED_EVENT = ISNULL(A.SUM_EVENT_HOURS_ALLOWED,0.000000)
						FROM 
						(
							SELECT     
								ISNULL(SUM(EVENT_TASK.HOURS_ALLOWED),0.000000) AS SUM_EVENT_HOURS_ALLOWED, EVENT_TASK.EMP_CODE, 
								CONVERT(SMALLDATETIME,CONVERT(VARCHAR(10),EVENT_TASK.START_TIME,101)) AS EVENT_DATE
							FROM         
								EVENT_TASK WITH (NOLOCK) INNER JOIN
								EMPLOYEE WITH (NOLOCK) ON EVENT_TASK.EMP_CODE  COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  INNER JOIN
								EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
								JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
								EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
								JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
								JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
							WHERE
								(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
								AND DATEPART(dayofyear,EVENT_TASK.START_TIME) = @CURR_DAY_OF_YEAR 
								AND DATEPART(yy,EVENT_TASK.START_TIME) = @CURR_YEAR
							GROUP BY 
								EVENT_TASK.EMP_CODE, CONVERT(SMALLDATETIME,CONVERT(VARCHAR(10),EVENT_TASK.START_TIME,101))
						) AS A, #EMP_AVAILABILITY
						WHERE 
							#EMP_AVAILABILITY.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS 
							AND DATEPART(dayofyear,#EMP_AVAILABILITY.[DATE]) = @CURR_DAY_OF_YEAR 
							AND DATEPART(yy,#EMP_AVAILABILITY.[DATE]) = @CURR_YEAR
							AND DATEPART(dayofyear,A.EVENT_DATE) = @CURR_DAY_OF_YEAR 
							AND DATEPART(yy,A.EVENT_DATE) = @CURR_YEAR
						;
--						--TEST:
--		        		SELECT * FROM #EMP_AVAILABILITY;
						
						--CLEAN UP HRS_ASSIGNED_EVENT COLUMN:
						UPDATE #EMP_AVAILABILITY
						SET #EMP_AVAILABILITY.HRS_ASSIGNED_EVENT = 0.000000 WHERE #EMP_AVAILABILITY.HRS_ASSIGNED_EVENT IS NULL;
						
--						--TEST:
--		        		SELECT * FROM #EMP_AVAILABILITY;

						--ZERO WHOLE DAY OFF TO MATCH THE [wvfn_get_emp_workday_count] DIVISOR
						UPDATE #EMP_AVAILABILITY
						SET #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 1,#EMP_AVAILABILITY.HRS_ASSIGNED_TASK = 0.000000, #EMP_AVAILABILITY.HRS_BALANCE_AVAIL = 0.000000
						FROM #EMP_AVAILABILITY,EMP_NON_TASKS WITH(NOLOCK)
						WHERE 
						#EMP_AVAILABILITY.EMP_CODE = @CURR_EMP_CODE
						AND #EMP_AVAILABILITY.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EMP_NON_TASKS.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS
						AND 
						(
							(DATEPART(dayofyear,EMP_NON_TASKS.START_DATE) = @CURR_DAY_OF_YEAR AND DATEPART(yy,EMP_NON_TASKS.START_DATE) = @CURR_YEAR)
							OR (DATEPART(dayofyear,EMP_NON_TASKS.END_DATE) = @CURR_DAY_OF_YEAR AND DATEPART(yy,EMP_NON_TASKS.END_DATE) = @CURR_YEAR)
						)
						AND EMP_NON_TASKS.ALL_DAY = 1 AND EMP_NON_TASKS.[TYPE] = 'H';
--
						
--						--TEST:
--		        		SELECT * FROM #EMP_AVAILABILITY;


						
						
						
--						--TEST:
--		        		SELECT * FROM #EMP_AVAILABILITY;

		        	
		        END
--				SET @CURR_EMP_CODE = NULL;
--				SET @CURR_DATE = NULL;
--				SET @CURR_DAY_OF_WEEK = NULL;
--				SET @CURR_YEAR = NULL;
        		
        		
        		
	        --GO TO NEXT EVENT
		        FETCH NEXT FROM MY_ROWS2 INTO @CURR_ROW_ID;
	        END
	        CLOSE MY_ROWS2;
	        DEALLOCATE MY_ROWS2;

--        --TEST:
--        SELECT * FROM #EMP_AVAILABILITY;

        --CLEAN UP:
        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 0.000000 WHERE STD_HRS_AVAIL IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = 0.000000 WHERE HRS_USED_NON_TASK IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_AVAIL = ISNULL(STD_HRS_AVAIL,0.000000) - ISNULL(HRS_USED_NON_TASK,0.000000) - ISNULL(HRS_APPTS,0.000000);
        UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = 0.000000 WHERE HRS_ASSIGNED_TASK IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_BALANCE_AVAIL = ISNULL(HRS_AVAIL,0.000000) - ISNULL(HRS_ASSIGNED_TASK,0.000000);
		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = 0.000000 WHERE HRS_APPTS IS NULL;

--        --TEST:
--        SELECT * FROM #EMP_AVAILABILITY;

				
        DECLARE
	        @NUM_DAYS INT,
	        @NUM_WEEKS INT,
	        @NUM_MONTHS INT,
	        @NUM_YEARS INT,
	        @NUM_EMPS INT,
	        @CALCULATED_START_DATE SMALLDATETIME, --SINCE WE FILTER OUT DAYS EMPS DON'T WORK, THE START/END PASSED IN ISN'T NECESSARILY THE START/END THAT GETS OUTPUT
	        @CALCULATED_END_DATE SMALLDATETIME
	        
--		--TEST:
--		SELECT * FROM #EMP_AVAILABILITY

	    IF @SUMMARY_LEVEL BETWEEN 1 AND 5
	    BEGIN
			SELECT  
				@CALCULATED_START_DATE = MIN([DATE]),
				@CALCULATED_END_DATE = MAX([DATE]),
				@NUM_DAYS = COUNT(DISTINCT DAY_OF_YEAR),
				@NUM_WEEKS = COUNT(DISTINCT WEEK_OF_YEAR), 
				@NUM_MONTHS = COUNT(DISTINCT MONTH_OF_YEAR),
				@NUM_YEARS = COUNT(DISTINCT [YEAR]),
				@NUM_EMPS = COUNT(DISTINCT EMP_CODE)
			FROM 
				#EMP_AVAILABILITY;
	    	
			SELECT 
				@START_DATE  AS ENTERED_START_DATE, 
				@END_DATE AS ENTERED_END_DATE, 
				@CALCULATED_START_DATE  AS CALCULATED_START_DATE, 
				@CALCULATED_END_DATE AS CALCULATED_END_DATE, 
				ISNULL(@NUM_DAYS,0) AS NUM_DAYS, 
				ISNULL(@NUM_WEEKS,0) AS NUM_WEEKS, 
				ISNULL(@NUM_MONTHS,0) AS NUM_MONTHS, 
				ISNULL(@NUM_YEARS,0) AS NUM_YEARS, 
				ISNULL(@NUM_EMPS,0) AS NUM_EMPS;
	    END    
     
     
--		--TEST:
--		SELECT * FROM #EMP_AVAILABILITY

		--FINAL CLEANUP:
		-- recalc available time and subtract event task time from final balance
		-- add event task time to hrs_assigned_task too
		UPDATE #EMP_AVAILABILITY
		SET 
		#EMP_AVAILABILITY.HRS_BALANCE_AVAIL = ISNULL(#EMP_AVAILABILITY.HRS_BALANCE_AVAIL,0.000000) - ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_EVENT,0.000000),
		#EMP_AVAILABILITY.HRS_ASSIGNED_TASK = ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_TASK,0.000000) + ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_EVENT,0.000000);

		--? REMOVE WHAT SHOULD BE ALL DAY HOLIDAYS....
		DELETE FROM #EMP_AVAILABILITY WHERE HRS_USED_NON_TASK = 0.000000 AND HRS_AVAIL = 0.000000 AND HRS_ASSIGNED_TASK = 0.000000 AND HRS_ASSIGNED_EVENT = 0.000000 AND HRS_BALANCE_AVAIL = 0.000000 AND IS_FULL_DAY_OFF = 1;

		--UPDATE EMP_START_TIME AND EMP_END_TIME WITH THE CORRECT START/END TIMES FOR THAT DAY
		UPDATE #EMP_AVAILABILITY
		SET EMP_START_TIME =
        CASE DATEPART(dw,[DATE])
		    WHEN 1 THEN EMP_START_TIME_SUN
		    WHEN 2 THEN EMP_START_TIME_MON
		    WHEN 3 THEN EMP_START_TIME_TUE
		    WHEN 4 THEN EMP_START_TIME_WED
		    WHEN 5 THEN EMP_START_TIME_THU
		    WHEN 6 THEN EMP_START_TIME_FRI
		    WHEN 7 THEN EMP_START_TIME_SAT
	    END,
		EMP_END_TIME =
        CASE DATEPART(dw,[DATE])
		    WHEN 1 THEN EMP_END_TIME_SUN
		    WHEN 2 THEN EMP_END_TIME_MON
		    WHEN 3 THEN EMP_END_TIME_TUE
		    WHEN 4 THEN EMP_END_TIME_WED
		    WHEN 5 THEN EMP_END_TIME_THU
		    WHEN 6 THEN EMP_END_TIME_FRI
		    WHEN 7 THEN EMP_END_TIME_SAT
	    END
--		--TEST:
--		SELECT * FROM #EMP_AVAILABILITY
     
        -- @SUMMARY_LEVEL SMALLINT ==> 0 = NONE, 1 = DAY, 2 = WEEK, 3 = MONTH, 4 = YEAR
        IF @SUMMARY_LEVEL IS NULL OR @SUMMARY_LEVEL = 0 --NO SUMMARY
        BEGIN
	        SELECT 
		        ROW_ID,
		        EMP_CODE,
		        CASE DATEPART(dw,[DATE])
					WHEN 1 THEN 'Sun'
					WHEN 2 THEN 'Mon'
					WHEN 3 THEN 'Tue'
					WHEN 4 THEN 'Wed'
					WHEN 5 THEN 'Thu'
					WHEN 6 THEN 'Fri'
					WHEN 7 THEN 'Sat'
				END AS S_DAY_OF_WEEK,       
		        EMP_START_TIME,
		        EMP_END_TIME,
		        EMP_START_TIME_SUN,
		        EMP_END_TIME_SUN,
		        EMP_START_TIME_MON,
		        EMP_END_TIME_MON,
		        EMP_START_TIME_TUE,
		        EMP_END_TIME_TUE,
		        EMP_START_TIME_WED,
		        EMP_END_TIME_WED,
		        EMP_START_TIME_THU,
		        EMP_END_TIME_THU,
		        EMP_START_TIME_FRI,
		        EMP_END_TIME_FRI,
		        EMP_START_TIME_SAT,
		        EMP_END_TIME_SAT,
		        EMP_DIRECT_HRS_GOAL_PERC,
		        [DATE],
		        DAY_OF_WEEK,
		        DAY_OF_YEAR,
		        WEEK_OF_YEAR,
		        MONTH_OF_YEAR,
		        [YEAR],
		        STD_HRS_AVAIL,
		        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * ISNULL(HRS_AVAIL,0.000000) AS EMP_DIRECT_HRS_GOAL_HOURS,
		        HRS_USED_NON_TASK,
		        HRS_AVAIL,
		        HRS_ASSIGNED_TASK,
				HRS_APPTS,
		        HRS_ASSIGNED_EVENT,
		        HRS_BALANCE_AVAIL,
		        NOTE,
		        IS_FULL_DAY_OFF,
		        0 AS IS_FIRST_CHOICE
	        FROM #EMP_AVAILABILITY;
        END	
        IF @SUMMARY_LEVEL = 1 --SUM BY DAY
        BEGIN
      
        	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0.000000 THEN CAST(ISNULL(SUM(A.HRS_ASSIGNED_TASK),0.000000)/ISNULL(SUM(A.STD_HRS_AVAIL),0.000000) AS DECIMAL(18,6)) 
        			ELSE 0.000000
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,
                      EMPLOYEE.EMP_START_TIME,EMPLOYEE.EMP_END_TIME,
		        0 AS IS_FIRST_CHOICE,
		        ISNULL(EMPLOYEE.SENIORITY,9999) AS EMP_SENIORITY
        	FROM	
        	    (
		        SELECT 
			        EMP_CODE,
			        EMP_DIRECT_HRS_GOAL_PERC,
			        DAY_OF_YEAR,
			        ISNULL(SUM(STD_HRS_AVAIL),0.000000) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        ISNULL(SUM(HRS_USED_NON_TASK),0.000000) AS HRS_USED_NON_TASK, 
			        ISNULL(SUM(HRS_AVAIL),0.000000) AS HRS_AVAIL,
			        ISNULL(SUM(HRS_ASSIGNED_TASK),0.000000) AS HRS_ASSIGNED_TASK, 
			        ISNULL(SUM(HRS_APPTS),0.000000) AS HRS_APPTS, 
			        ISNULL(SUM(HRS_BALANCE_AVAIL),0.000000) AS HRS_BALANCE_AVAIL
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,DAY_OF_YEAR
		        ) AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
        		GROUP BY 
        			A.EMP_CODE, A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
					  DEPT_TEAM.DP_TM_DESC,EMPLOYEE.EMP_START_TIME,EMPLOYEE.EMP_END_TIME, EMPLOYEE.SENIORITY;
					  
        	SELECT DISTINCT DAY_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], DAY_OF_YEAR;
        	
	        SELECT 
		        EMP_CODE,
		        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
		        DAY_OF_YEAR,
		        CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
		        CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.01) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
		        CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
		        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
		        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        		CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
		        CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		        0 AS IS_FIRST_CHOICE
	        FROM #EMP_AVAILABILITY
	        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,DAY_OF_YEAR
       
      
        	
        END
        IF @SUMMARY_LEVEL = 2 --SUM BY WEEK
        BEGIN
        --		SELECT 
        --			EMP_CODE,
        --			EMP_DIRECT_HRS_GOAL_PERC,
        --			SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
        --			(ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.00) * 0.01) * ISNULL(SUM(STD_HRS_AVAIL),0.00) AS EMP_DIRECT_HRS_GOAL_HOURS
        --		FROM #EMP_AVAILABILITY
        --		GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC
        --		ORDER BY EMP_CODE;
          	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0 THEN CAST(SUM(A.HRS_ASSIGNED_TASK)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0.000000
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,
		        0 AS IS_FIRST_CHOICE
        	FROM	
        	    (		
		        SELECT 
			        EMP_CODE,
			        EMP_DIRECT_HRS_GOAL_PERC,
			        WEEK_OF_YEAR,
			        SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
			        SUM(HRS_AVAIL) AS HRS_AVAIL,
			        SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK,
			        SUM(HRS_APPTS) AS HRS_APPTS,  
			        SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,WEEK_OF_YEAR
        	    ) AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
				GROUP BY A.EMP_CODE,   A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC;
        	
	        	--SELECT DISTINCT WEEK_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], WEEK_OF_YEAR;
        		DECLARE @WEEK_VIEW_MIN_YEAR AS INT, @WEEK_VIEW_MAX_YEAR AS INT, @WEEK_VIEW_YEAR_COUNT AS INT, @LAST_WEEK_OF_YEAR AS INT
        		
        		SELECT @WEEK_VIEW_MIN_YEAR = MIN([YEAR]), @WEEK_VIEW_MAX_YEAR = MAX([YEAR]) FROM #EMP_AVAILABILITY;
        		SELECT @LAST_WEEK_OF_YEAR = MAX(WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE [YEAR] = @WEEK_VIEW_MIN_YEAR;
        		
        		SET @WEEK_VIEW_YEAR_COUNT = ISNULL(@WEEK_VIEW_MAX_YEAR,0) - ISNULL(@WEEK_VIEW_MIN_YEAR,0)
         		--SELECT @WEEK_VIEW_MIN_YEAR AS WVMINYEAR, @WEEK_VIEW_MAX_YEAR AS WVMAXYEAR, @WEEK_VIEW_YEAR_COUNT AS WVYEAR_COUNT, @LAST_WEEK_OF_YEAR AS LWOY
       		
        		--HANDLE WHEN RESULTS SPAN MORE THAN A YEAR (GOING FROM DECEMBER OF ONE YEAR TO JANUARY OF NEXT)
        		IF @WEEK_VIEW_YEAR_COUNT = 0 
        			BEGIN
	        			SELECT DISTINCT WEEK_OF_YEAR AS CTR, [YEAR], WEEK_OF_YEAR FROM #EMP_AVAILABILITY ORDER BY [YEAR], WEEK_OF_YEAR;
        			END
        		ELSE
        			BEGIN
	        			--SELECT DISTINCT WEEK_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], WEEK_OF_YEAR;
	        			SELECT DISTINCT A.CTR, A.[YEAR], A.WEEK_OF_YEAR
	        			FROM
	        			(
	        			SELECT 
	        				CASE 
	        				WHEN [YEAR] <> @WEEK_VIEW_MIN_YEAR THEN (@LAST_WEEK_OF_YEAR + WEEK_OF_YEAR)
	        				ELSE WEEK_OF_YEAR
	        			END AS CTR, 
	        			@WEEK_VIEW_MIN_YEAR AS [YEAR], WEEK_OF_YEAR
	        			FROM #EMP_AVAILABILITY	
	        			)AS A ORDER BY A.CTR
        			END




        	
        		SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        WEEK_OF_YEAR,
			        CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			        CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			        CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
			        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
			        CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		            0 AS IS_FIRST_CHOICE
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,WEEK_OF_YEAR

        END
        IF @SUMMARY_LEVEL = 3 --SUM BY MONTH
        BEGIN
        	

          	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0 THEN CAST(SUM(A.HRS_ASSIGNED_TASK)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,
		        0 AS IS_FIRST_CHOICE
        	FROM	
        	    (		
		        SELECT 
			        EMP_CODE,
			        EMP_DIRECT_HRS_GOAL_PERC,
			        MONTH_OF_YEAR,
			        SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.01) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
			        SUM(HRS_AVAIL) AS HRS_AVAIL,
			        SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK, 
			        SUM(HRS_APPTS) AS HRS_APPTS,  
			        SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,MONTH_OF_YEAR
        	    ) AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
           	GROUP BY A.EMP_CODE,   A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC;
						  
						  
	        	SELECT DISTINCT MONTH_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], MONTH_OF_YEAR;
		  
		        SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        MONTH_OF_YEAR,
			        CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			        CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			        CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
			        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,  
			        CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		            0 AS IS_FIRST_CHOICE
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,MONTH_OF_YEAR
		        ORDER BY MONTH_OF_YEAR;
		        
        END
        IF @SUMMARY_LEVEL = 4 --SUM BY YEAR
        BEGIN
        	
          	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0 THEN CAST(SUM(A.HRS_ASSIGNED_TASK)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,
		        0 AS IS_FIRST_CHOICE
        	FROM	
        	    (		
		        SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        [YEAR],
			        SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
			        SUM(HRS_AVAIL) AS HRS_AVAIL,
			        SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK, 
			        SUM(HRS_APPTS) AS HRS_APPTS,  
			        SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,[YEAR]
        	    )AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
        	    
               	GROUP BY A.EMP_CODE,   A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC;

        	
	        	SELECT DISTINCT [YEAR] AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR];
        	
		        SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        [YEAR],
			        CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			        CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.00) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			        CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
			        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK, 
        			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
			        CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		        0 AS IS_FIRST_CHOICE
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,[YEAR]
		        ORDER BY [YEAR];
        END
        
        IF @SUMMARY_LEVEL = 5 --SPECIAL MODE FOR CHILD GRID ON EMP FINDER** OBSOLETE!!!! NOW USING LEVEL 1 ON CHILD GRID!
        BEGIN

        	SELECT DISTINCT
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
 			    CASE
 					WHEN ISNULL(SUM(A.STD_HRS_AVAIL),0.000000) > 0.000000 THEN CAST(ISNULL(SUM(A.HRS_ASSIGNED_TASK),0.000000)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0.000000
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,
                      --EMPLOYEE.EMP_START_TIME,EMPLOYEE.EMP_END_TIME,
				CASE DATEPART(dw,[DATE])
					WHEN 1 THEN EMP_START_TIME_SUN
					WHEN 2 THEN EMP_START_TIME_MON
					WHEN 3 THEN EMP_START_TIME_TUE
					WHEN 4 THEN EMP_START_TIME_WED
					WHEN 5 THEN EMP_START_TIME_THU
					WHEN 6 THEN EMP_START_TIME_FRI
					WHEN 7 THEN EMP_START_TIME_SAT
				END AS EMP_START_TIME,
				CASE DATEPART(dw,[DATE])
					WHEN 1 THEN EMP_END_TIME_SUN
					WHEN 2 THEN EMP_END_TIME_MON
					WHEN 3 THEN EMP_END_TIME_TUE
					WHEN 4 THEN EMP_END_TIME_WED
					WHEN 5 THEN EMP_END_TIME_THU
					WHEN 6 THEN EMP_END_TIME_FRI
					WHEN 7 THEN EMP_END_TIME_SAT
				END AS EMP_END_TIME,
      
		        0 AS IS_FIRST_CHOICE,
		        A.[DATE]
        	FROM	
        	    (
					SELECT 
						EMP_CODE,
						EMP_DIRECT_HRS_GOAL_PERC,
						DAY_OF_YEAR,
						SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
						(ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
						SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
						SUM(HRS_AVAIL) AS HRS_AVAIL,
						SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK, 
						SUM(HRS_APPTS) AS HRS_APPTS,  
						SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL,[DATE]
					FROM #EMP_AVAILABILITY
					GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,DAY_OF_YEAR,[DATE]
		        ) 
		        AS 
					A INNER JOIN
					EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
					DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
					OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
        		GROUP BY 
        			A.EMP_CODE, A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC,
						  EMPLOYEE.EMP_START_TIME_SUN,
						  EMPLOYEE.EMP_START_TIME_MON,
						  EMPLOYEE.EMP_START_TIME_TUE,
						  EMPLOYEE.EMP_START_TIME_WED,
						  EMPLOYEE.EMP_START_TIME_THU,
						  EMPLOYEE.EMP_START_TIME_FRI,
						  EMPLOYEE.EMP_START_TIME_SAT,
						  EMPLOYEE.EMP_END_TIME_SUN,
						  EMPLOYEE.EMP_END_TIME_MON,
						  EMPLOYEE.EMP_END_TIME_TUE,
						  EMPLOYEE.EMP_END_TIME_WED,
						  EMPLOYEE.EMP_END_TIME_THU,
						  EMPLOYEE.EMP_END_TIME_FRI,
						  EMPLOYEE.EMP_END_TIME_SAT,
						  A.[DATE];
						  
        	SELECT DISTINCT DAY_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], DAY_OF_YEAR;
        	
		   CREATE TABLE #EMP_AVAILABILITY_MODE_5 --MASTER TABLE TO RETURN
			(
				[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
				[EMP_SENIORITY]		SMALLINT,
				[EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
				[STD_HRS_AVAIL]      DECIMAL(18,6),
				[HRS_USED_NON_TASK]  DECIMAL(18,6),
				[HRS_AVAIL]          DECIMAL(18,6),
				[HRS_ASSIGNED_TASK]  DECIMAL(18,6),
				[HRS_APPTS]			 DECIMAL(18,6),
				[HRS_ASSIGNED_EVENT]  DECIMAL(18,6),
				[HRS_BALANCE_AVAIL]  DECIMAL(18,6),
				[IS_FIRST_CHOICE]	SMALLINT,
				[EMP_START_TIME] SMALLDATETIME,
				[EMP_END_TIME] SMALLDATETIME
			);
        	INSERT INTO #EMP_AVAILABILITY_MODE_5
	        SELECT 
		        #EMP_AVAILABILITY.EMP_CODE,
		        EMPLOYEE.SENIORITY,
		        CAST(#EMP_AVAILABILITY.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
		        --DAY_OF_YEAR,
		        CAST(SUM(#EMP_AVAILABILITY.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
		        CAST((ISNULL(#EMP_AVAILABILITY.EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
		        CAST(SUM(#EMP_AVAILABILITY.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
		        CAST(SUM(#EMP_AVAILABILITY.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
		        CAST(SUM(#EMP_AVAILABILITY.HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK, 
		        CAST(SUM(#EMP_AVAILABILITY.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
		        CAST(SUM(#EMP_AVAILABILITY.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		        0 AS IS_FIRST_CHOICE,NULL, NULL
	        FROM #EMP_AVAILABILITY INNER JOIN EMPLOYEE WITH(NOLOCK) ON #EMP_AVAILABILITY.EMP_CODE = EMPLOYEE.EMP_CODE
	        GROUP BY #EMP_AVAILABILITY.EMP_CODE,#EMP_AVAILABILITY.EMP_DIRECT_HRS_GOAL_PERC,EMPLOYEE.SENIORITY--,DAY_OF_YEAR
 
			SELECT
				EMP_CODE,
				EMP_SENIORITY,
				EMP_DIRECT_HRS_GOAL_PERC,
				STD_HRS_AVAIL,
				HRS_USED_NON_TASK,
				HRS_AVAIL,
				HRS_ASSIGNED_TASK,
				HRS_APPTS,
				HRS_ASSIGNED_EVENT,
				HRS_BALANCE_AVAIL,
				--IS_FIRST_CHOICE,
				CASE WHEN HRS_BALANCE_AVAIL = (SELECT MAX(HRS_BALANCE_AVAIL) FROM #EMP_AVAILABILITY_MODE_5) THEN 1
				ELSE 0
				END AS IS_FIRST_CHOICE,
				EMP_START_TIME,
				EMP_END_TIME 
			FROM #EMP_AVAILABILITY_MODE_5
			ORDER BY IS_FIRST_CHOICE DESC, HRS_BALANCE_AVAIL DESC, EMP_SENIORITY
 
 
			DROP TABLE #EMP_AVAILABILITY_MODE_5;
        END
        
        IF @SUMMARY_LEVEL = 6 --SPECIAL MODE FOR JOINING TO TASK ASSIGNMENTS
        BEGIN
	        SELECT 
		        EMP_CODE,
		        SUM(ISNULL(HRS_USED_NON_TASK,0.000000)) AS HRS_USED_NON_TASK,
		        SUM(ISNULL(HRS_AVAIL,0.000000)) AS HRS_AVAIL,
		        SUM(ISNULL(HRS_ASSIGNED_TASK,0.000000)) AS HRS_ASSIGNED_TASK,
			    SUM(ISNULL(HRS_APPTS,0.000000)) AS HRS_APPTS,  
		        SUM(ISNULL(HRS_ASSIGNED_EVENT,0.000000)) AS HRS_ASSIGNED_EVENT,
		        SUM(ISNULL(HRS_BALANCE_AVAIL,0.000000)) AS HRS_BALANCE_AVAIL
	        FROM #EMP_AVAILABILITY
	        GROUP BY EMP_CODE
        END	


        DROP TABLE #EMP_AVAILABILITY;
        DROP TABLE #DAY_RANGE;
        DROP TABLE #EMP_LIST;
        
                




        




                
                
                
                
      



GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

