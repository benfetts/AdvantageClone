
CREATE PROCEDURE [dbo].[usp_wv_RESOURCES_EMP_IS_BOOKED] /*WITH ENCRYPTION*/
@EMP_CODE           VARCHAR(6),
@EVENT_TASK_ID_NEEDED    INT,
@EVENT_TASK_DATE_NEEDED  SMALLDATETIME,
@START_TIME_NEEDED  SMALLDATETIME,
@END_TIME_NEEDED    SMALLDATETIME,
@RETURN_COUNT_ONLY  BIT
AS
/*=========== QUERY ===========*/

IF @RETURN_COUNT_ONLY IS NULL
BEGIN
    SET @RETURN_COUNT_ONLY = 0;
END

CREATE TABLE #DUP_EVENT_TASK_LIST
(
	EVENT_TASK_ID  INT,
	EVENT_ID       INT,
	START_DATE     SMALLDATETIME,
	START_TIME     SMALLDATETIME,
	END_TIME       SMALLDATETIME,
	EMP_CODE       VARCHAR(6)
);

DECLARE @THIS_JOB_NUMBER         INT,
        @THIS_JOB_COMPONENT_NBR  SMALLINT

SELECT @THIS_JOB_NUMBER = EVENT.JOB_NUMBER,
       @THIS_JOB_COMPONENT_NBR = EVENT.JOB_COMPONENT_NBR
FROM  [EVENT] WITH(NOLOCK)
       INNER JOIN [EVENT_TASK] WITH(NOLOCK)
            ON  EVENT.EVENT_ID = EVENT_TASK.EVENT_ID
WHERE  (EVENT_TASK.EVENT_TASK_ID = @EVENT_TASK_ID_NEEDED);

INSERT INTO #DUP_EVENT_TASK_LIST
  (
    EVENT_TASK_ID,
    EVENT_ID,
    START_DATE,
    START_TIME,
    END_TIME,
    EMP_CODE
  )
--actual "booked checking" query start:
SELECT [EVENT_TASK].EVENT_TASK_ID,
       [EVENT_TASK].EVENT_ID,
       [EVENT_TASK].START_DATE,
       [EVENT_TASK].START_TIME,
       [EVENT_TASK].END_TIME,
       [EVENT_TASK].EMP_CODE
FROM   [EVENT] WITH(NOLOCK)
       INNER JOIN [EVENT_TASK] WITH(NOLOCK)
            ON  EVENT.EVENT_ID = EVENT_TASK.EVENT_ID
WHERE  [EVENT_TASK].EMP_CODE = @EMP_CODE
       AND CONVERT(VARCHAR(10), [EVENT_TASK].START_DATE, 101) = CONVERT(VARCHAR(10), @EVENT_TASK_DATE_NEEDED, 101)
       AND (
               (
                   [EVENT_TASK].START_TIME <= @START_TIME_NEEDED
                   AND [EVENT_TASK].END_TIME >= @END_TIME_NEEDED
               )
               OR (
                      [EVENT_TASK].START_TIME <= @START_TIME_NEEDED
                      AND [EVENT_TASK].END_TIME BETWEEN @START_TIME_NEEDED AND @END_TIME_NEEDED
                  )
               OR (
                      [EVENT_TASK].START_TIME BETWEEN @START_TIME_NEEDED AND @END_TIME_NEEDED
                  )
               OR (
                      [EVENT_TASK].END_TIME BETWEEN @START_TIME_NEEDED AND @END_TIME_NEEDED
                  )
           )
       AND (
               [EVENT_TASK].END_TIME <> @START_TIME_NEEDED
               AND [EVENT_TASK].START_TIME <> @END_TIME_NEEDED
           )
       AND [EVENT_TASK].EVENT_TASK_ID <> @EVENT_TASK_ID_NEEDED
       AND (
               RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), [EVENT].JOB_NUMBER), 6) + '-' + RIGHT(REPLICATE('0', 2) + CONVERT(VARCHAR(20), [EVENT].JOB_COMPONENT_NBR), 2)
               <>
               RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), @THIS_JOB_NUMBER), 6) + '-' + RIGHT(REPLICATE('0', 2) + CONVERT(VARCHAR(20), @THIS_JOB_COMPONENT_NBR), 2)              
           );

	  --acutal "booked checking" query end.
IF @RETURN_COUNT_ONLY = 1
	BEGIN
		SELECT COUNT(1) AS NUM_OVER_BOOKED_EVENT_TASKS
		FROM   #DUP_EVENT_TASK_LIST;
	END
ELSE
	BEGIN
		SELECT *
		FROM   #DUP_EVENT_TASK_LIST;
	END
	   
	DROP TABLE #DUP_EVENT_TASK_LIST;	   


/*=========== QUERY ===========*/
