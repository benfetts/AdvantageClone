
CREATE PROCEDURE [dbo].[usp_wv_RESOURCES_FINDER] 
    @EVENT_ID_LIST       AS VARCHAR(8000),
    @RESOURCE_TYPE_CODE  AS VARCHAR(6),
    @AD_NUMBER           AS VARCHAR(30),
	@SAVE_RESOURCE_SELECTIONS AS TINYINT,
	@OVERRIDE_EXISTING AS TINYINT
AS
/*=========== QUERY ===========*/
		SET @SAVE_RESOURCE_SELECTIONS = ISNULL(@SAVE_RESOURCE_SELECTIONS,0);
		SET @OVERRIDE_EXISTING = ISNULL(@OVERRIDE_EXISTING,0);

		IF @AD_NUMBER = '' OR @AD_NUMBER = '[NONE]' OR @AD_NUMBER = '[None]'
		BEGIN
			SET @AD_NUMBER = NULL
		END

		CREATE TABLE #EVENT_LIST_APPLY --LIST PASSED IN TO APPLY RESOURCE TO
		(
			EVENT_ID               INT,
			EVENT_DATE             DATETIME,
			START_TIME             DATETIME,
			END_TIME               DATETIME,
			AD_NUMBER              VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			FIRST_CHOICE           VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			CURRENT_RESOURCE_CODE  VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			EVENT_LABEL            VARCHAR(50) COLLATE SQL_Latin1_General_CP1_CS_AS 
		);

		CREATE TABLE #EVENT_LIST_FULL --LIST PASSED BASED ON DATE RANGE FOR CHECKING
		(
			EVENT_ID          INT,
			EVENT_DATE        DATETIME,
			START_TIME        DATETIME,
			END_TIME          DATETIME,
			AD_NUMBER         VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			RESOURCE_CODE     VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			IS_TEMP_RESOURCE  BIT
		);
		                
		CREATE TABLE #EVENT_AVAILABLE_RESOURCES --AVAILABLE RESOURCES DATATABLE
		(
			EVENT_ID             INT,
			RESOURCE_CODE        VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS ,	--THE AVAILABLE RESOURCE
			RESOURCE_DESC        VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			IS_FULLY_AVAILABLE   BIT,
			EVENT_DATE           DATETIME,
			START_TIME           DATETIME,
			END_TIME             DATETIME,
			--TYPE_DISPLAY		VARCHAR(500), --JUST FILLER TO MAKE IT WORK WITH usp_wv_RESOURCES_GET_DETAILS
			PRIORITY             SMALLINT,
			LAST_DATE            DATETIME,
			LAST_START_TIME      DATETIME,
			LAST_END_TIME        DATETIME,
			REQUESTED_AD_NUMBER  VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			CURRENT_AD_NUMBER    VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			LAST_JOB_NUMBER		 INT,
			LAST_JOB_COMPONENT_NBR SMALLINT,
			LAST_AD_NUMBER       VARCHAR(30),
			NEEDS_AD_CHANGE      BIT,
			LAST_EVENT_ID        INT
		);

		DECLARE @POS            AS INT,
				@CURR_EVENT_ID  AS INT,
				@RANGE_START    AS DATETIME,
				@RANGE_END      AS DATETIME;


				--1. GET TEMP TABLE OF ALL EVENTS WE NEED TO ASSIGN RESOURCE TO:
				--POPULATE_EVENT_LIST_APPLY
				--SQL LOOP THROUGH LIST AND INSERT INTO 
		SET @EVENT_ID_LIST = LTRIM(RTRIM(@EVENT_ID_LIST)) + ',';
		SET @POS = CHARINDEX(',', @EVENT_ID_LIST, 1);

		IF REPLACE(@EVENT_ID_LIST, ',', '') <> ''
		BEGIN
			WHILE @POS > 0
			BEGIN
				SET @CURR_EVENT_ID = CONVERT(
						INT,
						ISNULL(LTRIM(RTRIM(LEFT(@EVENT_ID_LIST, @POS - 1))), 0)
					)
		        
				;
				IF @CURR_EVENT_ID > 0 AND (NOT (@AD_NUMBER IS NULL))
				BEGIN
					INSERT INTO #EVENT_LIST_APPLY
					  (
						EVENT_ID,
						EVENT_DATE,
						START_TIME,
						END_TIME,
						AD_NUMBER,
						CURRENT_RESOURCE_CODE,
						EVENT_LABEL
					  )
					SELECT EVENT_ID,
						   EVENT_DATE,
						   CONVERT(
							   DATETIME,
							   CONVERT(CHAR(10), DATEPART(yyyy, EVENT.EVENT_DATE), 101) 
							   +
							   '-' +
							   CONVERT(CHAR(10), DATEPART(mm, EVENT.EVENT_DATE), 101) +
							   '-' +
							   CONVERT(CHAR(10), DATEPART(dd, EVENT.EVENT_DATE), 101) +
							   ' ' +
							   CONVERT(CHAR(10), DATEPART(hh, EVENT.START_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(mi, EVENT.START_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(ss, EVENT.START_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(ms, EVENT.START_TIME), 101),
							   102
						   ) AS START_TIME,
						   CONVERT(
							   DATETIME,
							   CONVERT(CHAR(10), DATEPART(yyyy, EVENT.EVENT_DATE), 101) 
							   +
							   '-' +
							   CONVERT(CHAR(10), DATEPART(mm, EVENT.EVENT_DATE), 101) +
							   '-' +
							   CONVERT(CHAR(10), DATEPART(dd, EVENT.EVENT_DATE), 101) +
							   ' ' +
							   CONVERT(CHAR(10), DATEPART(hh, EVENT.END_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(mi, EVENT.END_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(ss, EVENT.END_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(ms, EVENT.END_TIME), 101),
							   102
						   ) AS END_TIME,
						   AD_NUMBER,
						   EVENT.RESOURCE_CODE,
						   EVENT_LABEL
					FROM   EVENT WITH(NOLOCK)
					WHERE  EVENT_ID = @CURR_EVENT_ID
						   AND AD_NUMBER = @AD_NUMBER
		            
					;
				END
				--HANDLE NULL AD_NUMBER:
				
		        IF @CURR_EVENT_ID > 0 AND (@AD_NUMBER IS NULL)
				BEGIN
					INSERT INTO #EVENT_LIST_APPLY
					  (
						EVENT_ID,
						EVENT_DATE,
						START_TIME,
						END_TIME,
						AD_NUMBER,
						CURRENT_RESOURCE_CODE,
						EVENT_LABEL
					  )
					SELECT EVENT_ID,
						   EVENT_DATE,
						   CONVERT(
							   DATETIME,
							   CONVERT(CHAR(10), DATEPART(yyyy, EVENT.EVENT_DATE), 101) 
							   +
							   '-' +
							   CONVERT(CHAR(10), DATEPART(mm, EVENT.EVENT_DATE), 101) +
							   '-' +
							   CONVERT(CHAR(10), DATEPART(dd, EVENT.EVENT_DATE), 101) +
							   ' ' +
							   CONVERT(CHAR(10), DATEPART(hh, EVENT.START_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(mi, EVENT.START_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(ss, EVENT.START_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(ms, EVENT.START_TIME), 101),
							   102
						   ) AS START_TIME,
						   CONVERT(
							   DATETIME,
							   CONVERT(CHAR(10), DATEPART(yyyy, EVENT.EVENT_DATE), 101) 
							   +
							   '-' +
							   CONVERT(CHAR(10), DATEPART(mm, EVENT.EVENT_DATE), 101) +
							   '-' +
							   CONVERT(CHAR(10), DATEPART(dd, EVENT.EVENT_DATE), 101) +
							   ' ' +
							   CONVERT(CHAR(10), DATEPART(hh, EVENT.END_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(mi, EVENT.END_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(ss, EVENT.END_TIME), 101) +
							   ':' +
							   CONVERT(CHAR(10), DATEPART(ms, EVENT.END_TIME), 101),
							   102
						   ) AS END_TIME,
						   AD_NUMBER,
						   EVENT.RESOURCE_CODE,
						   EVENT_LABEL
					FROM   EVENT WITH(NOLOCK) 
					WHERE  EVENT_ID = @CURR_EVENT_ID
						   AND AD_NUMBER IS NULL
					;
				END
				
				
				SET @EVENT_ID_LIST = RIGHT(@EVENT_ID_LIST, LEN(@EVENT_ID_LIST) - @POS);
				SET @POS = CHARINDEX(',', @EVENT_ID_LIST, 1);
			END
		END

		--SET MAX RANGES TO GET FULLY AVAILABLE RESOURCES
		SELECT @RANGE_START = MIN(START_TIME),
			   @RANGE_END = MAX(END_TIME)
		FROM   #EVENT_LIST_APPLY;
		SET @RANGE_START =			   CONVERT(
				   DATETIME,
				   CONVERT(CHAR(10), DATEPART(yyyy, @RANGE_START), 101) 
				   +
				   '-' +
				   CONVERT(CHAR(10), DATEPART(mm, @RANGE_START), 101) +
				   '-' +
				   CONVERT(CHAR(10), DATEPART(dd, @RANGE_START), 101) +
				   ' ' +
				   '00:00:00'
			   ); 
		
		SET @RANGE_END =			   CONVERT(
				   DATETIME,
				   CONVERT(CHAR(10), DATEPART(yyyy, @RANGE_END), 101) 
				   +
				   '-' +
				   CONVERT(CHAR(10), DATEPART(mm, @RANGE_END), 101) +
				   '-' +
				   CONVERT(CHAR(10), DATEPART(dd, @RANGE_END), 101) +
				   ' ' +
				   '23:59:00'
			   ); 
		--POPULATE THE FULL LIST TO COMPARE TO
		INSERT INTO #EVENT_LIST_FULL
		  (
			EVENT_ID,
			EVENT_DATE,
			START_TIME,
			END_TIME,
			AD_NUMBER,
			RESOURCE_CODE,
			IS_TEMP_RESOURCE
		  )
		SELECT EVENT_ID,
			   EVENT_DATE,
			   CONVERT(
				   DATETIME,
				   CONVERT(CHAR(10), DATEPART(yyyy, EVENT.EVENT_DATE), 101) 
				   +
				   '-' +
				   CONVERT(CHAR(10), DATEPART(mm, EVENT.EVENT_DATE), 101) +
				   '-' +
				   CONVERT(CHAR(10), DATEPART(dd, EVENT.EVENT_DATE), 101) +
				   ' ' +
				   CONVERT(CHAR(10), DATEPART(hh, EVENT.START_TIME), 101) +
				   ':' +
				   CONVERT(CHAR(10), DATEPART(mi, EVENT.START_TIME), 101) +
				   ':' +
				   CONVERT(CHAR(10), DATEPART(ss, EVENT.START_TIME), 101) +
				   ':' +
				   CONVERT(CHAR(10), DATEPART(ms, EVENT.START_TIME), 101),
				   102
			   ) AS START_TIME,
			   CONVERT(
				   DATETIME,
				   CONVERT(CHAR(10), DATEPART(yyyy, EVENT.EVENT_DATE), 101) 
				   +
				   '-' +
				   CONVERT(CHAR(10), DATEPART(mm, EVENT.EVENT_DATE), 101) +
				   '-' +
				   CONVERT(CHAR(10), DATEPART(dd, EVENT.EVENT_DATE), 101) +
				   ' ' +
				   CONVERT(CHAR(10), DATEPART(hh, EVENT.END_TIME), 101) +
				   ':' +
				   CONVERT(CHAR(10), DATEPART(mi, EVENT.END_TIME), 101) +
				   ':' +
				   CONVERT(CHAR(10), DATEPART(ss, EVENT.END_TIME), 101) +
				   ':' +
				   CONVERT(CHAR(10), DATEPART(ms, EVENT.END_TIME), 101),
				   102
			   ) AS END_TIME,
			   AD_NUMBER,
			    RESOURCE.RESOURCE_CODE,
			   0
		FROM   EVENT WITH(NOLOCK) INNER JOIN RESOURCE ON EVENT.RESOURCE_CODE = RESOURCE.RESOURCE_CODE
		       INNER JOIN RESOURCE_TYPE ON RESOURCE.RESOURCE_TYPE_CODE = RESOURCE_TYPE.RESOURCE_TYPE_CODE
		WHERE  (EVENT_DATE BETWEEN @RANGE_START AND @RANGE_END)
			   AND EVENT_ID NOT IN (SELECT EVENT_ID
									FROM   #EVENT_LIST_APPLY)
				AND (RESOURCE.INACTIVE_FLAG = 0 OR 	RESOURCE.INACTIVE_FLAG IS NULL)			
				AND RESOURCE_TYPE.RESOURCE_TYPE_CODE = @RESOURCE_TYPE_CODE	
		ORDER BY
			   EVENT_ID;

		/*
		* LOOP THROUGH EACH EVENT
		*/
		DECLARE @ROW_EVENT_ID                   AS INT,
				@ROW_EVENT_DATE                 AS DATETIME,
				@ROW_MIN_DATE                   AS DATETIME,
				@ROW_MAX_DATE                   AS DATETIME,
				@FULLY_AVAILABLE_RESOURCE_CODE  AS VARCHAR(6)
		        	
		DECLARE MY_ROWS                         CURSOR  
		FOR
			SELECT EVENT_ID
			FROM   #EVENT_LIST_APPLY
		;

						OPEN MY_ROWS;
							FETCH NEXT FROM MY_ROWS INTO @ROW_EVENT_ID;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			--SET THE DATE VARIABLES:
			SELECT @ROW_EVENT_DATE = EVENT_DATE,
				   @ROW_MIN_DATE = START_TIME,
				   @ROW_MAX_DATE = END_TIME
			FROM   #EVENT_LIST_APPLY
			WHERE  EVENT_ID = @ROW_EVENT_ID
		    
			;
			--FULL AVAILABLE RESOURCES
			SELECT @FULLY_AVAILABLE_RESOURCE_CODE = A.RESOURCE_CODE
			FROM   (
					   SELECT TOP 1 RESOURCE.RESOURCE_CODE
					   FROM   RESOURCE WITH(NOLOCK)
					   WHERE  (RESOURCE_TYPE_CODE = @RESOURCE_TYPE_CODE)
							  AND (RESOURCE.INACTIVE_FLAG IS NULL OR RESOURCE.INACTIVE_FLAG = 0)
							  AND RESOURCE_CODE NOT IN (SELECT RESOURCE.RESOURCE_CODE
														FROM   RESOURCE WITH(NOLOCK)
															   LEFT OUTER JOIN EVENT 
																	WITH(NOLOCK)
																	ON  RESOURCE.RESOURCE_CODE = 
																		EVENT.RESOURCE_CODE
														WHERE  (RESOURCE.RESOURCE_TYPE_CODE = @RESOURCE_TYPE_CODE)
															   AND EVENT.EVENT_DATE 
																   BETWEEN @RANGE_START 
																   AND @RANGE_END)
					   ORDER BY
							  RESOURCE.RESOURCE_PRIORITY ASC
				   ) AS A
		    
			; 
			--INSERT THE FULLY AVAILABLE RESOURCE
			IF NOT @FULLY_AVAILABLE_RESOURCE_CODE IS NULL
			BEGIN
				INSERT INTO #EVENT_AVAILABLE_RESOURCES
				  (
					EVENT_ID,
					RESOURCE_CODE,
					IS_FULLY_AVAILABLE
				  )
				SELECT @ROW_EVENT_ID,
					   @FULLY_AVAILABLE_RESOURCE_CODE,
					   1;
			END
		    
			;
			--GET ANY RESOURCE AVAILABLE FOR THAT DATE??
			INSERT INTO #EVENT_AVAILABLE_RESOURCES
			  (
				EVENT_ID,
				RESOURCE_CODE,
				IS_FULLY_AVAILABLE
			  )
			SELECT @ROW_EVENT_ID,
				   RESOURCE_CODE,
				   0
			FROM   RESOURCE WITH(NOLOCK)
			WHERE  (RESOURCE_TYPE_CODE = @RESOURCE_TYPE_CODE)
			       AND (RESOURCE.INACTIVE_FLAG IS NULL OR RESOURCE.INACTIVE_FLAG = 0)
				   AND RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  NOT IN (SELECT RESOURCE.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS 
											 FROM   RESOURCE WITH(NOLOCK)
													LEFT OUTER JOIN #EVENT_LIST_FULL 
														 WITH(NOLOCK)
														 ON  RESOURCE.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  = 
															 #EVENT_LIST_FULL.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS 
											 WHERE  (RESOURCE.RESOURCE_TYPE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  = @RESOURCE_TYPE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS )
													AND (
															(
																#EVENT_LIST_FULL.START_TIME 
																BETWEEN @ROW_MIN_DATE 
																AND @ROW_MAX_DATE
															)
															OR (
																   #EVENT_LIST_FULL.END_TIME 
																   BETWEEN @ROW_MIN_DATE 
																   AND @ROW_MAX_DATE
															   )
														))
				   AND RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  NOT IN --REMOVE DUPLICATE THAT MIGHT BE FULLY AVAILABLE
											(SELECT RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS 
											 FROM   #EVENT_AVAILABLE_RESOURCES
											 WHERE  EVENT_ID = @ROW_EVENT_ID
													AND IS_FULLY_AVAILABLE = 1
													AND RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  = RESOURCE.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS )
				  AND  dbo.wvfn_resource_is_booked(RESOURCE.RESOURCE_CODE,
													@ROW_EVENT_ID,
													@ROW_EVENT_DATE,
													@ROW_MIN_DATE,
													@ROW_MAX_DATE) = 0									
		    
			;
			--GO TO NEXT EVENT
			FETCH NEXT FROM MY_ROWS INTO @ROW_EVENT_ID;
		END
						CLOSE MY_ROWS;
				DEALLOCATE MY_ROWS;

--SELECT 'HI', * FROM #EVENT_AVAILABLE_RESOURCES;
		--UPDATE THE RESOURCE INFO:
		UPDATE #EVENT_AVAILABLE_RESOURCES
		SET    PRIORITY = RESOURCE.RESOURCE_PRIORITY,
			   RESOURCE_DESC = RESOURCE.RESOURCE_DESC
		FROM   #EVENT_AVAILABLE_RESOURCES
			   INNER JOIN RESOURCE
					ON  RESOURCE.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  = #EVENT_AVAILABLE_RESOURCES.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS ;

		--UPDATE DATE/TIME INFO:
		UPDATE #EVENT_AVAILABLE_RESOURCES
		SET    #EVENT_AVAILABLE_RESOURCES.REQUESTED_AD_NUMBER = #EVENT_LIST_APPLY.AD_NUMBER,
			   #EVENT_AVAILABLE_RESOURCES.EVENT_DATE = #EVENT_LIST_APPLY.EVENT_DATE,
			   #EVENT_AVAILABLE_RESOURCES.START_TIME = #EVENT_LIST_APPLY.START_TIME,
			   #EVENT_AVAILABLE_RESOURCES.END_TIME = #EVENT_LIST_APPLY.END_TIME
		FROM   #EVENT_AVAILABLE_RESOURCES
			   INNER JOIN #EVENT_LIST_APPLY
					ON  #EVENT_AVAILABLE_RESOURCES.EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID;
		--GET "LAST" INFO:
		CREATE TABLE #RESOURCE_LAST_USE --AVAILABLE RESOURCES DATATABLE
		(
			RESOURCE_CODE    VARCHAR(6),
			LAST_DATE        DATETIME,
			LAST_START_TIME  DATETIME,
			LAST_END_TIME    DATETIME,
			LAST_AD_NUMBER   VARCHAR(30),
			LAST_EVENT_ID    INT,
		);
		INSERT INTO #RESOURCE_LAST_USE
		  (
			RESOURCE_CODE
		  )
		SELECT DISTINCT RESOURCE_CODE
		FROM   #EVENT_AVAILABLE_RESOURCES;
		/*
		* LOOP THROUGH EACH RESOURCE
		*/
		DECLARE @LAST_USE_RESOURCE_CODE  AS VARCHAR(6),
				@LAST_DATE               AS DATETIME,
				@LAST_START_TIME         AS DATETIME,
				@LAST_END_TIME           AS DATETIME,
				@LAST_AD_NUMBER          AS VARCHAR(30  ),
				@LAST_EVENT_ID           AS INT
						
		DECLARE MY_ROWS_LAST_USE                        CURSOR  
		FOR
			SELECT RESOURCE_CODE
			FROM   #RESOURCE_LAST_USE
		;

						OPEN MY_ROWS_LAST_USE;
							FETCH NEXT FROM MY_ROWS_LAST_USE INTO @LAST_USE_RESOURCE_CODE;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			
			SELECT @LAST_DATE = A.EVENT_DATE,
				   @LAST_START_TIME = A.START_TIME,
				   @LAST_END_TIME = A.END_TIME,
				   @LAST_AD_NUMBER = A.AD_NUMBER,
				   @LAST_EVENT_ID = EVENT_ID
			FROM   (
					   SELECT TOP 1 MAX(EVENT_DATE) AS EVENT_DATE,
							  START_TIME,
							  END_TIME,
							  AD_NUMBER,
							  EVENT_ID
					   FROM   EVENT WITH(NOLOCK)
					   WHERE  RESOURCE_CODE = @LAST_USE_RESOURCE_CODE
					   GROUP BY
							  START_TIME,
							  END_TIME,
							  AD_NUMBER,
							  EVENT_ID
					   ORDER BY
							  MAX(EVENT_DATE) DESC
				   ) AS A
		    
			;
		    
			UPDATE #RESOURCE_LAST_USE
			SET    LAST_DATE = @LAST_DATE,
				   LAST_START_TIME = @LAST_START_TIME,
				   LAST_END_TIME = @LAST_END_TIME,
				   LAST_AD_NUMBER = @LAST_AD_NUMBER,
				   LAST_EVENT_ID = @LAST_EVENT_ID
			WHERE  RESOURCE_CODE = @LAST_USE_RESOURCE_CODE;
			
			SET @LAST_DATE = NULL;
			SET @LAST_START_TIME = NULL;
			SET @LAST_END_TIME = NULL;
			SET @LAST_AD_NUMBER = NULL;
			SET @LAST_EVENT_ID = NULL; 
		    
			--GO TO NEXT RESOURCE
			FETCH NEXT FROM MY_ROWS_LAST_USE INTO @LAST_USE_RESOURCE_CODE;
		END
				CLOSE MY_ROWS_LAST_USE;
				DEALLOCATE MY_ROWS_LAST_USE;
		--SELECT * FROM #RESOURCE_LAST_USE;

		--UPDATE TABLE THAT IS GOING TO GET RETURNED
		UPDATE #EVENT_AVAILABLE_RESOURCES
		SET    #EVENT_AVAILABLE_RESOURCES.LAST_DATE = #RESOURCE_LAST_USE.LAST_DATE,
			   #EVENT_AVAILABLE_RESOURCES.LAST_START_TIME = #RESOURCE_LAST_USE.LAST_START_TIME,
			   #EVENT_AVAILABLE_RESOURCES.LAST_END_TIME = #RESOURCE_LAST_USE.LAST_END_TIME,
			   #EVENT_AVAILABLE_RESOURCES.LAST_AD_NUMBER = #RESOURCE_LAST_USE.LAST_AD_NUMBER,
			   #EVENT_AVAILABLE_RESOURCES.LAST_EVENT_ID = #RESOURCE_LAST_USE.LAST_EVENT_ID
		FROM   #EVENT_AVAILABLE_RESOURCES
			   INNER JOIN #RESOURCE_LAST_USE
					ON  #EVENT_AVAILABLE_RESOURCES.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  = #RESOURCE_LAST_USE.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS ;
		
------		--????	"CURRENT AD NUMBER OF A RESOURCE"	
------		--HOW DO I KNOW IF AN AD NUMBER HAS CHANGED FOR THIS RESOURCE????	
----		UPDATE #EVENT_AVAILABLE_RESOURCES
----		SET    #EVENT_AVAILABLE_RESOURCES.CURRENT_AD_NUMBER = A.AD_NUMBER
----		FROM   #EVENT_AVAILABLE_RESOURCES,
----		(SELECT     RESOURCE_CODE, AD_NUMBER, EVENT_DATE, EVENT_END_DATE, START_TIME, END_TIME
----			FROM         EVENT
----			WHERE       (NOT (RESOURCE_CODE IS NULL))) AS A
----		WHERE #EVENT_AVAILABLE_RESOURCES.RESOURCE_CODE = A.RESOURCE_CODE
----		AND (A.START_TIME < #EVENT_AVAILABLE_RESOURCES.START_TIME 
----		AND A.START_TIME > #EVENT_AVAILABLE_RESOURCES.END_TIME )
----		AND (A.END_TIME > #EVENT_AVAILABLE_RESOURCES.END_TIME 
----		AND A.END_TIME < #EVENT_AVAILABLE_RESOURCES.START_TIME )

		--SET FLAG:
		UPDATE #EVENT_AVAILABLE_RESOURCES
		SET    NEEDS_AD_CHANGE = CASE 
									  WHEN REQUESTED_AD_NUMBER COLLATE SQL_Latin1_General_CP1_CS_AS  = LAST_AD_NUMBER COLLATE SQL_Latin1_General_CP1_CS_AS  AND (NOT(LAST_AD_NUMBER IS NULL)) THEN 0
									  WHEN (LAST_AD_NUMBER IS NULL) THEN 0
									  ELSE 1
								 END;
								 
		--SET LAST JOB/COMP:
		UPDATE #EVENT_AVAILABLE_RESOURCES
		SET    #EVENT_AVAILABLE_RESOURCES.LAST_JOB_NUMBER = EVENT.JOB_NUMBER, #EVENT_AVAILABLE_RESOURCES.LAST_JOB_COMPONENT_NBR = EVENT.JOB_COMPONENT_NBR
		FROM   #EVENT_AVAILABLE_RESOURCES
			   INNER JOIN EVENT WITH(NOLOCK)
					ON  #EVENT_AVAILABLE_RESOURCES.LAST_EVENT_ID = EVENT.EVENT_ID
							 

		--SET FIRST CHOICE:
		--IF FULLY AVAILABLE:
		UPDATE #EVENT_LIST_APPLY
		SET    #EVENT_LIST_APPLY.FIRST_CHOICE = #EVENT_AVAILABLE_RESOURCES.RESOURCE_CODE
		FROM   #EVENT_AVAILABLE_RESOURCES
			   INNER JOIN #EVENT_LIST_APPLY
					ON  #EVENT_AVAILABLE_RESOURCES.EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID
		WHERE  #EVENT_AVAILABLE_RESOURCES.IS_FULLY_AVAILABLE = 1;

		--ALSO FULLY AVAILABLE IF NEVER USED ON A J/C:
		UPDATE #EVENT_LIST_APPLY
		SET    #EVENT_LIST_APPLY.FIRST_CHOICE = A.RESOURCE_CODE
		FROM
		(SELECT TOP 1  #EVENT_AVAILABLE_RESOURCES.RESOURCE_CODE
		FROM   #EVENT_AVAILABLE_RESOURCES
			   INNER JOIN #EVENT_LIST_APPLY
					ON  #EVENT_AVAILABLE_RESOURCES.EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID
		WHERE  (#EVENT_AVAILABLE_RESOURCES.LAST_JOB_NUMBER IS NULL) AND (#EVENT_AVAILABLE_RESOURCES.LAST_JOB_COMPONENT_NBR IS NULL)
		 ORDER BY PRIORITY
		) AS A;
		
		--OVERRIDE...IS THERE A RESOURCE THAT ALREADY HAS THE AD NUMBER ON IT? IS IT AVAILABLE?
		UPDATE #EVENT_LIST_APPLY
		SET    #EVENT_LIST_APPLY.FIRST_CHOICE = #EVENT_AVAILABLE_RESOURCES.RESOURCE_CODE
		FROM   #EVENT_AVAILABLE_RESOURCES
			   INNER JOIN #EVENT_LIST_APPLY
					ON  #EVENT_AVAILABLE_RESOURCES.EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID
		WHERE  #EVENT_AVAILABLE_RESOURCES.REQUESTED_AD_NUMBER COLLATE SQL_Latin1_General_CP1_CS_AS  = #EVENT_AVAILABLE_RESOURCES.LAST_AD_NUMBER COLLATE SQL_Latin1_General_CP1_CS_AS ;
		          

        --DON'T CHANGE IF THERE IS ONE ALREADY SET (SUGGEST THE SAME RESOURCE)
		UPDATE #EVENT_LIST_APPLY
		SET    FIRST_CHOICE = CURRENT_RESOURCE_CODE
		WHERE NOT (CURRENT_RESOURCE_CODE IS NULL);

		--IF STILL NO FIRST CHOICE, IS THERE ANY RESOURCE AVAILABLE WHERE THE RESOURCE DOESN'T SEEM TO BE IN USE AT ALL (FOR THE TARGET EVENT'S RANGE?)
		UPDATE #EVENT_LIST_APPLY
		SET #EVENT_LIST_APPLY.FIRST_CHOICE = #EVENT_AVAILABLE_RESOURCES.RESOURCE_CODE 
		FROM   #EVENT_AVAILABLE_RESOURCES
			   INNER JOIN #EVENT_LIST_APPLY
					ON  #EVENT_AVAILABLE_RESOURCES.EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID
		WHERE (#EVENT_LIST_APPLY.FIRST_CHOICE IS NULL)
		AND 
		(
				(	-- the entire "last use" range of an available resource is after the "target" event range
					#EVENT_AVAILABLE_RESOURCES.LAST_START_TIME > #EVENT_LIST_APPLY.START_TIME
					AND #EVENT_AVAILABLE_RESOURCES.LAST_START_TIME > #EVENT_LIST_APPLY.END_TIME
					AND #EVENT_AVAILABLE_RESOURCES.LAST_END_TIME > #EVENT_LIST_APPLY.START_TIME
					AND #EVENT_AVAILABLE_RESOURCES.LAST_END_TIME > #EVENT_LIST_APPLY.END_TIME
				)
			OR
				(	-- the entire "last use" range of an available resource is before the "target" event range
					#EVENT_AVAILABLE_RESOURCES.LAST_START_TIME < #EVENT_LIST_APPLY.START_TIME
					AND #EVENT_AVAILABLE_RESOURCES.LAST_START_TIME < #EVENT_LIST_APPLY.END_TIME
					AND #EVENT_AVAILABLE_RESOURCES.LAST_END_TIME < #EVENT_LIST_APPLY.START_TIME
					AND #EVENT_AVAILABLE_RESOURCES.LAST_END_TIME < #EVENT_LIST_APPLY.END_TIME
				)
		);



		IF @SAVE_RESOURCE_SELECTIONS = 1 AND @OVERRIDE_EXISTING = 0
		BEGIN
			SELECT '#EVENT_LIST_APPLY' AS TABLE_NAME, #EVENT_LIST_APPLY.*,[EVENT].RESOURCE_CODE
			FROM [EVENT] INNER JOIN #EVENT_LIST_APPLY ON [EVENT].EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID
			WHERE 
			([EVENT].RESOURCE_CODE IS NULL) 
			AND (#EVENT_LIST_APPLY.CURRENT_RESOURCE_CODE IS NULL)
			AND (NOT(#EVENT_LIST_APPLY.FIRST_CHOICE IS NULL))
			ORDER BY #EVENT_LIST_APPLY.EVENT_DATE, #EVENT_LIST_APPLY.START_TIME, #EVENT_LIST_APPLY.END_TIME;
			
			UPDATE [EVENT] SET [EVENT].RESOURCE_CODE = #EVENT_LIST_APPLY.FIRST_CHOICE 
			FROM [EVENT] INNER JOIN #EVENT_LIST_APPLY ON [EVENT].EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID
			WHERE 
			([EVENT].RESOURCE_CODE IS NULL) 
			AND (#EVENT_LIST_APPLY.CURRENT_RESOURCE_CODE IS NULL)
			AND (NOT(#EVENT_LIST_APPLY.FIRST_CHOICE IS NULL))

		END
		IF @SAVE_RESOURCE_SELECTIONS = 1 AND @OVERRIDE_EXISTING = 1
		BEGIN
			SELECT '#EVENT_LIST_APPLY' AS TABLE_NAME,#EVENT_LIST_APPLY.*,[EVENT].RESOURCE_CODE
			FROM [EVENT] INNER JOIN #EVENT_LIST_APPLY ON [EVENT].EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID
			WHERE   (NOT(#EVENT_LIST_APPLY.FIRST_CHOICE IS NULL))
			ORDER BY #EVENT_LIST_APPLY.EVENT_DATE, #EVENT_LIST_APPLY.START_TIME, #EVENT_LIST_APPLY.END_TIME;
			--UPDATE [EVENT] SET [EVENT].RESOURCE_CODE = #EVENT_LIST_APPLY.FIRST_CHOICE 
			--FROM [EVENT] INNER JOIN #EVENT_LIST_APPLY ON [EVENT].EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID
			--WHERE    (NOT(#EVENT_LIST_APPLY.FIRST_CHOICE IS NULL))

		END

		----DECLARE 
		----	@EVENT_ID_FOR_TASK_UPDATE AS INT,
		----	@RESOURCE_CODE_FOR_TASK_UPDATE AS VARCHAR(6)
			
	
		----IF @SAVE_RESOURCE_SELECTIONS = 1 
		----BEGIN
		----	DECLARE TASK_UPDATE CURSOR
		----	FOR
		----		SELECT [EVENT].EVENT_ID FROM [EVENT] INNER JOIN #EVENT_LIST_APPLY ON [EVENT].EVENT_ID = #EVENT_LIST_APPLY.EVENT_ID
		----	;
		----	OPEN TASK_UPDATE;
		----	FETCH NEXT FROM TASK_UPDATE INTO @EVENT_ID_FOR_TASK_UPDATE;
		----	WHILE @@FETCH_STATUS = 0
		----	BEGIN
		----		--DO SOMETHING
		----		SELECT @RESOURCE_CODE_FOR_TASK_UPDATE = ISNULL([EVENT].RESOURCE_CODE,'') FROM [EVENT] WITH(NOLOCK) WHERE [EVENT].EVENT_ID = @EVENT_ID_FOR_TASK_UPDATE;
				
		----		EXEC usp_wv_EVENT_UPDATE_RESOURCE @EVENT_ID = @EVENT_ID_FOR_TASK_UPDATE, @RESOURCE_CODE = @RESOURCE_CODE_FOR_TASK_UPDATE,@UPDATE_EVENT_RESOURCE = 1, @DELETE_ALL_EXISTING_TASKS = 0, @DELETE_GENERATED_TASKS = 1;

		----		FETCH NEXT FROM TASK_UPDATE INTO @EVENT_ID_FOR_TASK_UPDATE;
		----	END
		----	CLOSE MY_ROWS_LAST_USE;
		----	DEALLOCATE MY_ROWS_LAST_USE;
		----END


		--RETURN DATA:
		----DATATABLE(0) = PARENT GRID
		IF ((@SAVE_RESOURCE_SELECTIONS = 0) OR (@SAVE_RESOURCE_SELECTIONS IS NULL))
		BEGIN
			SELECT '#EVENT_LIST_APPLY' AS TABLE_NAME,*
			FROM   #EVENT_LIST_APPLY
			ORDER BY #EVENT_LIST_APPLY.EVENT_DATE, #EVENT_LIST_APPLY.START_TIME, #EVENT_LIST_APPLY.END_TIME;
		END

		----DATATABLE(1) = CHILD GRID
		SELECT '#EVENT_AVAILABLE_RESOURCES' AS TABLE_NAME,*
		FROM   #EVENT_AVAILABLE_RESOURCES
		ORDER BY
			   EVENT_ID ASC,
			   IS_FULLY_AVAILABLE DESC,	
			   NEEDS_AD_CHANGE ASC,
			   PRIORITY ASC
			   ;
			   
		----DATATABLE(2) = DISTINCT RESOURCE FOR NEW "ADD TO ALL"
	   SELECT
	        DISTINCT RESOURCE_CODE, RESOURCE_DESC,PRIORITY,LAST_JOB_NUMBER,LAST_JOB_COMPONENT_NBR,LAST_AD_NUMBER,LAST_DATE,LAST_START_TIME,LAST_END_TIME,
	        RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), 
			LAST_JOB_NUMBER), 6) + '/' + RIGHT(REPLICATE('0', 2) + CONVERT(VARCHAR(20), LAST_JOB_COMPONENT_NBR), 2) 
			AS LAST_JOB_AND_COMPONENT
	   FROM   #EVENT_AVAILABLE_RESOURCES
	   ORDER BY RESOURCE_CODE
 
		--DROP TEMP TABLES:
		DROP TABLE #EVENT_LIST_FULL;	
		DROP TABLE #RESOURCE_LAST_USE;
		DROP TABLE #EVENT_LIST_APPLY;
		DROP TABLE #EVENT_AVAILABLE_RESOURCES;

/*=========== QUERY ===========*/
