if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_Revenue_Forecast_Report]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_Revenue_Forecast_Report]
GO

CREATE PROCEDURE [dbo].[usp_wv_Revenue_Forecast_Report] 
	@DATE_TYPE AS int,
	@START_PERIOD varchar(6),
	@END_PERIOD varchar(6),
	--@INCLUDE_DETAIL AS bit = 0,
	--@INCLUDE_EMP as bit = 0,
	--@QUOTED_PLANNED AS smallint,
	--@FORECAST_HOURSALLOWED AS smallint,
	@OFFICE_CODES varchar(MAX),
	@SALES_CLASS_CODES varchar(MAX),
	@CURRENT_PERIOD varchar(6),
	@DISPLAY_OPTION smallint,
	@ACTUALIZE_DATE smalldatetime

AS

    SET ANSI_NULLS ON
    SET ANSI_WARNINGS OFF
    SET ARITHABORT OFF
    SET ARITHIGNORE ON
		DECLARE @Records int, @Count int, @Recordcomp int, @Countcomp int, @jNum int, @cNum int, @estFunc varchar(10),
				 @startdatetask smalldatetime, @enddatetask smalldatetime, @START_DATE smalldatetime, @END_DATE smalldatetime, @no_of_days int, @CURRENT_START_DATE smalldatetime, @CURRENT_END_DATE smalldatetime

		SELECT @START_DATE = PPSRTDATE
		FROM POSTPERIOD
		WHERE PPPERIOD = @START_PERIOD

		SELECT @END_DATE = PPENDDATE
		FROM POSTPERIOD
		WHERE PPPERIOD = @END_PERIOD

		SELECT @CURRENT_START_DATE = PPSRTDATE
		FROM POSTPERIOD
		WHERE PPPERIOD = @CURRENT_PERIOD

		SELECT @CURRENT_END_DATE = PPENDDATE
		FROM POSTPERIOD
		WHERE PPPERIOD = @CURRENT_PERIOD

		CREATE TABLE #weeks(
			RowID int IDENTITY(1, 1), 
			DATE_OPENED int,
			WEEK_START Datetime,
			WEEK_END Datetime)

		set @no_of_days = datediff(dd,@START_DATE,@END_DATE) + 1
		set rowcount @no_of_days
		select identity(int,0,1) as dy into #temp from sysobjects a, sysobjects b
		set rowcount 0

		INSERT INTO #weeks
		SELECT datepart(ww, dateadd(dd,dy,@START_DATE)) AS DATE_OPENED, DATEADD(wk, DATEDIFF(wk, 6, dateadd(dd,dy,@START_DATE)), 6) AS WEEK_START,
				DATEADD(wk, DATEDIFF(wk, 0, dateadd(dd,dy,@START_DATE)), 5) AS WEEK_END 
		FROM #temp
		GROUP BY datepart(ww, dateadd(dd,dy,@START_DATE)), DATEADD(wk, DATEDIFF(wk, 6, dateadd(dd,dy,@START_DATE)), 6),DATEADD(wk, DATEDIFF(wk, 0, dateadd(dd,dy,@START_DATE)), 5)
		ORDER BY DATEADD(wk, DATEDIFF(wk, 6, dateadd(dd,dy,@START_DATE)), 6), datepart(ww, dateadd(dd,dy,@START_DATE)) DESC

		CREATE TABLE #PROJECT_MONTH --MASTER TABLE TO RETURN
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[CLIENT] varchar(40),			
			[PROJECT_DESC]  varchar(100),
			[AE] varchar(6),
			[START_DATE] datetime,
			[END_DATE] datetime,
			[EST_FUNC] varchar(10) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[FUNC_DESC] varchar(40) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[EMP_NAME] varchar(100) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[START_DATE_TASK] datetime,
			[END_DATE_TASK] datetime,
			[QUOTED_HOURS] DECIMAL(15,2),
	        [QUOTED_HRS_AMT] DECIMAL(15,2),
			[FORECAST_HOURS] DECIMAL(15,2),
			[FORECAST_HRS_AMT] DECIMAL(15,2),
			[HOURS_ALLOWED] DECIMAL(15,2),
			[HOURS_ALLOWED_AMT] DECIMAL(15,2),
			[ADJ_HOURS_ALLOWED] DECIMAL(15,2),
			[ADJ_HOURS_ALLOWED_AMT] DECIMAL(15,2),
			[ACTUAL_HOURS] DECIMAL(15,2),
			[ACTUAL_HOURS_AMT] DECIMAL(15,2),
			[INCOME_HOURS] DECIMAL(15,2),
			[INCOME_HOURS_AMT] DECIMAL(15,2),
			[PERC_SCHEDULE] DECIMAL(15,2),
			[STATUS] varchar(30),
			[PERC_COMPLETE] DECIMAL(7,3),
			[WEEK] int,
			[YEAR] int,
			[WEEK_START] datetime,
			[WEEK_END] datetime,
			[PRIOR_ACTUAL_HOURS] DECIMAL(15,2),
			[PRIOR_ACTUAL_HOURS_AMT] DECIMAL(15,2)
        );

		CREATE TABLE #PROJECT_MONTH_TOTAL --MASTER TABLE TO RETURN
        (
	        [ID] [int] IDENTITY(1,1) NOT NULL,
			JobNumber int,
			JobDescription varchar(60),
			ComponentNumber smallint,			
			ComponentDescription varchar(60),
			JobComponent varchar(12),
			[Type] varchar(40),
			[Type2] varchar(40),
			JobProcessControl varchar(50),
			EstimatedGrossIncome DECIMAL(15,2),
	        CurrentRevenue DECIMAL(15,2),
			PriorRevenue DECIMAL(15,2),
			TotalHours DECIMAL(15,2),
			PercentCompleteToDate DECIMAL(15,2),
			[Week] int,
			EstimateHours DECIMAL(15,2),
			AcutalHours DECIMAL(15,2),
			RemainingHours DECIMAL(15,2),
			ActualAmount DECIMAL(15,2),
			RemainingAmount DECIMAL(15,2),
			ForecastedHours DECIMAL(15,2),
			ForecastedAmount DECIMAL(15,2),
			ProjectedHours DECIMAL(15,2),
			ProjectedAmount DECIMAL(15,2)
        );

       
       CREATE TABLE #PROJECT_TASK_ADJ 
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[SEQ_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[ADJ_DATE] datetime,
			[ADJ_WEEK] int,
			[ADJ_YEAR] int,
			[WEEK_START] datetime,
			[WEEK_END] datetime,
	        [EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[WORK_DAYS] int,
			[ADJ_HOURS_ALLOWED] DECIMAL(15,2),
	        [BILL_RATE] DECIMAL(15,3),
			[IS_WORK_DAY] SMALLINT,
			[EMP_HOURS] DECIMAL(12,2)
        );

		CREATE TABLE #PROJECT_TASK_LIST 
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[SEQ_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[EST_FUNC_DESC] VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[FUNC_CODE] VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[FUNC_DESC] VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[START_DATE] datetime,
			[END_DATE] datetime,
	        [EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[HOURS_ALLOWED] DECIMAL(15,2),
			[ACTUAL_HOURS] DECIMAL(15,2),
			[ACTUAL_AMT] DECIMAL(15,2),
	        [BILL_RATE] DECIMAL(15,3),
        );

		CREATE TABLE #PROJECT_FORECAST
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[FUNC_DESC] VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[FORECAST_HOURS] DECIMAL(15,2),
			[FORECAST_AMT] DECIMAL(15,2),
			[MTH] int,
			[YEAR] int
        );

		CREATE TABLE #PROJECT_QUOTED
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[FUNC_DESC] VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[QUOTED_HOURS] DECIMAL(15,2),
			[QUOTED_AMT] DECIMAL(15,2),
			[MTH] int,
			[YEAR] int
        );

		CREATE TABLE #PROJECT_ACTUAL
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[FUNC_DESC] VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[ACTUAL_HOURS] DECIMAL(17,4),
			[ACTUAL_AMT] DECIMAL(17,4),
			--[WORK_DAYS] int,
			[WEEK] int,
			[YEAR] int,
			[WEEK_START] datetime,
			[WEEK_END] datetime,
			[PRIOR_ACTUAL_HOURS] DECIMAL(15,2),
			[PRIOR_ACTUAL_HOURS_AMT] DECIMAL(15,2)
        );

		CREATE TABLE #PROJECT_INCOME_ONLY
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[JOB_NUMBER] int,
			[JOB_COMPONENT_NBR] smallint,
			[EST_FUNC] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[FUNC_DESC] VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[INCOME_HOURS] DECIMAL(17,4),
			[INCOME_AMT] DECIMAL(17,4),
			--[WORK_DAYS] int,
			[WEEK] int,
			[YEAR] int,
			[WEEK_START] datetime,
			[WEEK_END] datetime
        );

		CREATE TABLE #WORK_DAYS
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[WEEK] int,
			[YEAR] int,
			[WORK_DATE] datetime,
			[WEEK_START] datetime,
			[WEEK_END] datetime,
        );

		CREATE TABLE #WORK_DAY --Table of employee workdays
        (
	        [ROW_ID] [int] IDENTITY(1,1) NOT NULL,
	        [EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	        [WORK_DATE]               SMALLDATETIME,
	        [STD_HRS]  DECIMAL(18,6),
        );

		CREATE TABLE #jobcomps(
			RowID int IDENTITY(1, 1), 
			JobNo int,
			CompNo int)

		CREATE TABLE #jobs(
			RowID int IDENTITY(1, 1), 
			listpos int,
			job int)

		CREATE TABLE #comps(
			RowID int IDENTITY(1, 1), 
			listpos int,
			comp int)

		--INSERT INTO #jobs 
		--SELECT * FROM [dbo].[charlist_to_table] (
		--  @JOB_NUMBER,',')

		--INSERT INTO #comps 
		--SELECT * FROM [dbo].[charlist_to_table] (
		--  @JOB_COMPONENT_NBR,',')		

		SELECT @Records = COUNT(*) FROM #jobs
		SET @Count = 1
		SELECT @Recordcomp = COUNT(*) FROM #comps
		SET @Countcomp = 1

		WHILE @Count <= @Records
		BEGIN

		 SELECT @jNum = job
		 FROM #jobs
		 WHERE RowID = @Count

		 SELECT @cNum = comp
		 FROM #comps
		 WHERE RowID = @Countcomp

			INSERT INTO #jobcomps
			VALUES (@jNum, @cNum)
				
			SET @Count = @Count + 1	
			SET @Countcomp = @Countcomp + 1	           
		END

        --SELECT * FROM #jobcomps

		--GENERATE LIST OF DISTINCT EMPS:
		DECLARE @EMP_LIST VARCHAR(8000), @START_DATE_MIN SMALLDATETIME, @END_DATE_MAX SMALLDATETIME
		SET @EMP_LIST = '';
		SELECT @EMP_LIST = @EMP_LIST + A.EMP_CODE + ','
			    FROM   (
						    SELECT     
							    DISTINCT V_JOB_TRAFFIC_DET.EMP_CODE AS EMP_CODE
						    FROM         
								V_JOB_TRAFFIC_DET INNER JOIN
								JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
								V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR
						   WHERE   JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND V_JOB_TRAFFIC_DET.EMP_CODE IS NOT NULL AND
							 ((CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) BETWEEN @START_DATE AND @END_DATE)
								OR (CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) BETWEEN @START_DATE AND @END_DATE)
								OR (@START_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) AND @END_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE)))
				       ) AS A;

		 --Find min and max dates for schedule
		 SELECT @START_DATE_MIN = MIN(TASK_START_DATE), @END_DATE_MAX = MAX(JOB_REVISED_DATE)
				FROM         
					V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN JOB_LOG J ON J.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER INNER JOIN
					JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
					JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 WHERE   JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND
							 ((CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) BETWEEN @START_DATE AND @END_DATE)
								OR (CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) BETWEEN @START_DATE AND @END_DATE)
								OR (@START_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) AND @END_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE))) 		  		
		
		--SELECT @EMP_LIST,@START_DATE_MIN,@END_DATE_MAX	  
        --Calculate work days and std hrs
		INSERT INTO #WORK_DAY (EMP_CODE, WORK_DATE, STD_HRS)
				SELECT fn.emp_code, fn.workday, fn.std_hours
				FROM [dbo].[udf_get_std_hrs_wl] ( @START_DATE_MIN, @END_DATE_MAX, @EMP_LIST) fn
	 			WHERE ( fn.std_hours <> 0.00 )
				
		--SELECT * FROM #WORK_DAY		

		INSERT INTO #PROJECT_TASK_LIST
		SELECT  V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, V_JOB_TRAFFIC_DET.SEQ_NBR, V_JOB_TRAFFIC_DET.FNC_EST, F.FNC_DESCRIPTION, V_JOB_TRAFFIC_DET.FNC_CODE, V_JOB_TRAFFIC_DET.TASK_DESCRIPTION,
		 V_JOB_TRAFFIC_DET.TASK_START_DATE, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE, V_JOB_TRAFFIC_DET.EMP_CODE, ISNULL(V_JOB_TRAFFIC_DET.JOB_HRS,0), 0, 0, 0
		FROM   V_JOB_TRAFFIC_DET INNER JOIN JOB_COMPONENT ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR
								 INNER JOIN JOB_LOG J ON J.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER
								 LEFT OUTER JOIN FUNCTIONS F ON F.FNC_CODE = V_JOB_TRAFFIC_DET.FNC_EST
				--INNER JOIN #jobcomps ON V_JOB_TRAFFIC_DET.JOB_NUMBER = #jobcomps.JobNo AND V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = #jobcomps.CompNo
		WHERE   JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND
							 ((CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) BETWEEN @START_DATE AND @END_DATE)
								OR (CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) BETWEEN @START_DATE AND @END_DATE)
								OR (@START_DATE >= CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) AND @END_DATE <= CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE))) AND
								(J.OFFICE_CODE IN (SELECT * FROM dbo.udf_split_list(@OFFICE_CODES, ',')) OR @OFFICE_CODES IS NULL) AND
								(J.SC_CODE IN (SELECT * FROM dbo.udf_split_list(@SALES_CLASS_CODES, ',')) OR @SALES_CLASS_CODES IS NULL)	
		
				 
		ORDER BY V_JOB_TRAFFIC_DET.TASK_START_DATE

		--TEST
		

        DECLARE @DAY_COUNT      AS INTEGER,
				@DAY_INCREMENT  AS INTEGER,
				@ADJ_HOURS AS DECIMAL(15,2),
				@IS_WORK_DAY AS INTEGER,
				@WORK_DAYS_TODAY AS DECIMAL(15,5),
				@WORK_DAYS_TOTAL AS DECIMAL(15,5)
        DECLARE @CURR_JOB_NUMBER AS INT,
	        @CURR_JOB_COMPONENT_NBR     INT,
	        @CURR_SEQ_NBR     INT,
	        @CURR_EST_FUNC     VARCHAR(6),
	        @CURR_START_DATE     SMALLDATETIME,
	        @CURR_END_DATE     SMALLDATETIME,
	        @CURR_EMP_CODE     VARCHAR(6),
	        @CURR_HOURS_ALLOWED     DECIMAL(15,2),
			@CURR_ACTUAL_HOURS     DECIMAL(15,2),
			@CURR_ACTUAL_AMT     DECIMAL(15,4),
			@SUM_ACTUAL_HOURS     DECIMAL(15,2),
	        @CURR_BILL_RATE     DECIMAL(15,3),
			@CURR_ROW_ID		INT,
	        @CURR_CL_CODE   VARCHAR(6),
	        @CURR_DIV_CODE     VARCHAR(6),
	        @CURR_PRD_CODE     VARCHAR(6),
	        @CURR_SC_CODE     VARCHAR(6),
			@CURR_DAY_OF_WEEK SMALLINT,			
			@ROW_BILLING_RATE  DECIMAL(9,2),
			@ROW_RATE_LEVEL  SMALLINT,
			@ROW_TAX_CODE  VARCHAR(4),
			@ROW_TAX_LEVEL SMALLINT,
			@ROW_NOBILL_FLAG SMALLINT,
			@ROW_NOBILL_LEVEL SMALLINT,
			@ROW_COMM DECIMAL(9,3),
			@ROW_COMM_LEVEL SMALLINT,
			@ROW_TAX_COMM SMALLINT,
			@ROW_TAX_COMM_ONLY SMALLINT,
			@ROW_TAX_COMM_FLAGS_LEVEL SMALLINT,
			@ROW_FEE_TIME_FLAG SMALLINT,
			@ROW_FEE_TIME_LEVEL SMALLINT
			;
        DECLARE MY_ROWS                         CURSOR  
        FOR
	        SELECT ROW_ID
	        FROM   #PROJECT_TASK_LIST
        ;
        OPEN MY_ROWS;
        FETCH NEXT FROM MY_ROWS INTO @CURR_ROW_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
	        SELECT @CURR_JOB_NUMBER = JOB_NUMBER, @CURR_JOB_COMPONENT_NBR = JOB_COMPONENT_NBR,
	        @CURR_SEQ_NBR = SEQ_NBR, 
	        @CURR_EST_FUNC = EST_FUNC,
	        @CURR_START_DATE = [START_DATE], 
	        @CURR_END_DATE = END_DATE,
	        @CURR_EMP_CODE = EMP_CODE, 
	        @CURR_HOURS_ALLOWED = HOURS_ALLOWED FROM #PROJECT_TASK_LIST WHERE ROW_ID = @CURR_ROW_ID;
			SET @CURR_ACTUAL_HOURS = 0
			SELECT @CURR_CL_CODE = CL_CODE, @CURR_DIV_CODE = DIV_CODE, @CURR_PRD_CODE = PRD_CODE, @CURR_SC_CODE = SC_CODE
			FROM JOB_LOG 
			WHERE JOB_NUMBER = @CURR_JOB_NUMBER
			-- GET DAYS (LOOP)
					--=================================================================================================
								                
					SET @DAY_INCREMENT = -1;
					SELECT @DAY_COUNT = DATEDIFF(dd, @CURR_START_DATE, @CURR_END_DATE) + 1;
			        SET @ADJ_HOURS = @CURR_HOURS_ALLOWED / [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE,1)
					EXECUTE dbo.usp_wv_Estimating_GetBillingRates
									@THIS_FNC_CODE = @CURR_EST_FUNC,
									@THIS_JOB_NUMBER = @CURR_JOB_NUMBER,
									@THIS_JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR,
									@THIS_CL_CODE = @CURR_CL_CODE,
									@THIS_DIV_CODE = @CURR_DIV_CODE,
									@THIS_PRD_CODE = @CURR_PRD_CODE,
									@THIS_SC_CODE = @CURR_SC_CODE,
									@THIS_EMP_CODE = @CURR_EMP_CODE, 
									@THIS_EMP_TITLE_ID = NULL,  
									@THIS_BILLING_RATE = @ROW_BILLING_RATE OUTPUT,
									@THIS_RATE_LEVEL = @ROW_RATE_LEVEL OUTPUT,
									@THIS_TAX_CODE = @ROW_TAX_CODE OUTPUT,
									@THIS_TAX_LEVEL = @ROW_TAX_LEVEL OUTPUT,
									@THIS_NOBILL_FLAG = @ROW_NOBILL_FLAG OUTPUT,
									@THIS_NOBILL_LEVEL = @ROW_NOBILL_LEVEL OUTPUT,
									@THIS_COMM = @ROW_COMM OUTPUT,
									@THIS_COMM_LEVEL = @ROW_COMM_LEVEL OUTPUT,
									@THIS_TAX_COMM = @ROW_TAX_COMM OUTPUT,
									@THIS_TAX_COMM_ONLY = @ROW_TAX_COMM_ONLY OUTPUT,
									@THIS_TAX_COMM_FLAGS_LEVEL = @ROW_TAX_COMM_FLAGS_LEVEL OUTPUT,
									@THIS_FEE_TIME_FLAG = @ROW_FEE_TIME_FLAG OUTPUT,
									@THIS_FEE_TIME_LEVEL = @ROW_FEE_TIME_LEVEL OUTPUT;		

			--        --TEST:
			--        SELECT @DAY_COUNT AS DAY_COUNT;
			        
					--WHILE @DAY_COUNT > 0
					--BEGIN
					--	SET @IS_WORK_DAY = 0
					--	SET @CURR_DAY_OF_WEEK = DATEPART(dw, DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE))
					--	IF @CURR_DAY_OF_WEEK = 1 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sun%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 2 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Mon%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 3 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Tue%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 4 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Wed%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 5 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Thu%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 6 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Fri%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END
					--	IF @CURR_DAY_OF_WEEK = 7 
					--	AND EXISTS (SELECT EMP_CODE FROM EMPLOYEE WITH(NOLOCK) WHERE EMP_CODE = @CURR_EMP_CODE AND EMP_WORK_DAYS LIKE '%Sat%')
					--	BEGIN
					--		SET @IS_WORK_DAY = 1
					--	END

					--	SELECT @CURR_ACTUAL_HOURS = ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0)
					--	FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
					--	WHERE (EMP_TIME_DTL.JOB_NUMBER = @CURR_JOB_NUMBER) AND (EMP_TIME_DTL.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
					--		  AND (EMP_TIME.EMP_DATE = DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE)) AND (EMP_TIME.EMP_CODE = @CURR_EMP_CODE) AND (EMP_TIME_DTL.EMP_HOURS <> 0)

					--	INSERT INTO #PROJECT_TASK_ADJ
					--	  (
					--		[JOB_NUMBER],
					--		[JOB_COMPONENT_NBR],
					--		[SEQ_NBR],
					--		[EST_FUNC],
					--		[ADJ_DATE],
					--		[ADJ_MONTH],
					--		[ADJ_YEAR],
					--		[EMP_CODE],
					--		[WORK_DAYS],
					--		[ADJ_HOURS_ALLOWED],
					--		[BILL_RATE],
					--		[IS_WORK_DAY],
					--		[EMP_HOURS],
					--		[HOURS_ALLOWED]
					--	  )
					--	VALUES
					--	  (
					--		@CURR_JOB_NUMBER,
					--		@CURR_JOB_COMPONENT_NBR,
					--		@CURR_SEQ_NBR, 
					--		@CURR_EST_FUNC,
					--		DATEADD(dd, @DAY_INCREMENT + 1, @CURR_START_DATE),
					--		DATEPART(mm, @CURR_START_DATE),
					--		DATEPART(yy, @CURR_START_DATE),
					--		@CURR_EMP_CODE, 
					--		[dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE,1),
					--		@ADJ_HOURS,
					--		@ROW_BILLING_RATE,
					--		@IS_WORK_DAY,
					--		@CURR_ACTUAL_HOURS,
					--		@CURR_HOURS_ALLOWED	
					--	  );
					--	SET @DAY_INCREMENT = @DAY_INCREMENT + 1;
					--	SET @DAY_COUNT = @DAY_COUNT - 1;
					--END
			--		UPDATE #DAY_RANGE SET [DATE] = @END_DATE WHERE [DATE] = (SELECT MAX([DATE]) FROM #DAY_RANGE)
			--        --TEST:
			--        SELECT * FROM #DAY_RANGE;
			--SELECT @CURR_JOB_NUMBER, @CURR_JOB_COMPONENT_NBR, @CURR_SEQ_NBR, @CURR_EST_FUNC,@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE
			INSERT INTO #PROJECT_TASK_ADJ
						SELECT @CURR_JOB_NUMBER, @CURR_JOB_COMPONENT_NBR, @CURR_SEQ_NBR, @CURR_EST_FUNC, WORK_DATE,
							DATEPART(wk, WORK_DATE),
							DATEPART(yy, WORK_DATE),
							DATEADD(dd, -(DATEPART(dw, WORK_DATE)-1), WORK_DATE),
							DATEADD(dd, 7-(DATEPART(dw, WORK_DATE)), WORK_DATE),
							EMP_CODE,
							(SELECT COUNT(*) FROM #WORK_DAY WHERE EMP_CODE = @CURR_EMP_CODE 
									AND WORK_DATE >= @CURR_START_DATE AND WORK_DATE <= @CURR_END_DATE
									AND (NOT EXISTS (SELECT ent.NON_TASK_ID 
															   FROM dbo.EMP_NON_TASKS ent INNER JOIN
																TIME_CATEGORY ON ent.CATEGORY = TIME_CATEGORY.CATEGORY
															  WHERE ent.[TYPE] = 'A' AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) 
																AND ent.ALL_DAY = 1 
																AND (WORK_DATE BETWEEN ent.[START_DATE] AND ent.[END_DATE] )
																AND (ent.EMP_CODE = #WORK_DAY.EMP_CODE)
															))),
							@ADJ_HOURS,
							@ROW_BILLING_RATE,
							1,
							(SELECT ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0)
							FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID
							WHERE (EMP_TIME_DTL.JOB_NUMBER = @CURR_JOB_NUMBER) AND (EMP_TIME_DTL.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
							  AND (EMP_TIME.EMP_DATE = WORK_DATE) AND (EMP_TIME_DTL.EMP_HOURS <> 0))
						FROM #WORK_DAY
						WHERE EMP_CODE = @CURR_EMP_CODE AND WORK_DATE >= @CURR_START_DATE AND WORK_DATE <= @CURR_END_DATE
			        
			--SELECT * FROM #PROJECT_TASK_ADJ
			SELECT @CURR_ACTUAL_HOURS = ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0), @CURR_ACTUAL_AMT = ISNULL(SUM(EMP_TIME_DTL.TOTAL_BILL + EMP_TIME_DTL.EXT_MARKUP_AMT),0)
			FROM EMP_TIME_DTL INNER JOIN
                 EMP_TIME ON EMP_TIME_DTL.ET_ID = EMP_TIME.ET_ID INNER JOIN
                 V_JOB_TRAFFIC_DET ON EMP_TIME_DTL.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND 
                 EMP_TIME_DTL.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR AND 
                 EMP_TIME_DTL.FNC_CODE = V_JOB_TRAFFIC_DET.FNC_EST AND EMP_TIME.EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
			WHERE (V_JOB_TRAFFIC_DET.JOB_NUMBER = @CURR_JOB_NUMBER) AND (V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
				  AND (V_JOB_TRAFFIC_DET.SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_TIME.EMP_CODE = @CURR_EMP_CODE) AND (EMP_TIME_DTL.EMP_HOURS <> 0)

			UPDATE #PROJECT_TASK_LIST SET ACTUAL_HOURS = @CURR_ACTUAL_HOURS, ACTUAL_AMT = @CURR_ACTUAL_AMT, BILL_RATE = @ROW_BILLING_RATE
			WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
				  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)

			--SET @WORK_DAYS_TODAY = [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,GETDATE(),1)
			--SET @WORK_DAYS_TOTAL = [dbo].[wvfn_get_emp_workday_count](@CURR_EMP_CODE,@CURR_START_DATE,@CURR_END_DATE,1)
			
			--IF @CURR_START_DATE <= GETDATE() AND @CURR_END_DATE >= GETDATE()
			--BEGIN				
			--	UPDATE #PROJECT_TASK_LIST SET PERC_SCHEDULE = (@WORK_DAYS_TODAY / @WORK_DAYS_TOTAL) * 100
			--	WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
			--	  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)
			--END
			--ELSE IF @CURR_START_DATE > GETDATE()
			--BEGIN
			--	UPDATE #PROJECT_TASK_LIST SET PERC_SCHEDULE = 0
			--	WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
			--	  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)
			--END
			--ELSE 
			--BEGIN
			--	UPDATE #PROJECT_TASK_LIST SET PERC_SCHEDULE = 100
			--	WHERE (JOB_NUMBER = @CURR_JOB_NUMBER) AND (JOB_COMPONENT_NBR = @CURR_JOB_COMPONENT_NBR)
			--	  AND (SEQ_NBR = @CURR_SEQ_NBR) AND (EMP_CODE = @CURR_EMP_CODE)
			--END

	        --GO TO NEXT EVENT
	        FETCH NEXT FROM MY_ROWS INTO @CURR_ROW_ID;
        END
        CLOSE MY_ROWS;
        DEALLOCATE MY_ROWS;
		--SELECT * FROM #PROJECT_TASK_LIST
		--SELECT * FROM #PROJECT_TASK_ADJ
  		--Quoted Hours
		DECLARE @HAS_EST_APPR   AS INTEGER,
				@HAS_EST_INT_APPR  AS INTEGER,
				@QUOTED_HOURS AS DECIMAL(15,2),
				@FORECAST_HOURS AS DECIMAL(15,2),
				@FORECAST_AMT AS DECIMAL(15,2),
				@FORECAST_HOURS_AE AS DECIMAL(15,2),
				@FORECAST_AMT_AE AS DECIMAL(15,2),
				@NumberRecords int, @RowCount int, @jn int, @jcn int, @client varchar(40), @ae varchar(6), @sd datetime, @ed datetime, @jcd varchar(60), @status varchar(30), @perc_schedule decimal(15,5),
				@CURR_DATE         SMALLDATETIME,
				@CTR               INT,
				@WORKING_DAYS      DECIMAL(15,2),
				@TOTAL_DAYS		   DECIMAL(15,2), @perc_comp decimal(7,3)
		--IF EXISTS(SELECT JOB_NUMBER FROM ESTIMATE_APPROVAL WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
		--BEGIN
		--	SET @HAS_EST_APPR = 1
		--END
		--IF EXISTS(SELECT JOB_NUMBER FROM ESTIMATE_INT_APPR WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
		--BEGIN
		--	SET @HAS_EST_INT_APPR = 1
		--END

		SET @QUOTED_HOURS = 0
		--IF @HAS_EST_APPR = 1 
		--BEGIN
			INSERT INTO #PROJECT_QUOTED
			SELECT JOB_COMPONENT.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR,ESTIMATE_REV_DET.FNC_CODE,FUNCTIONS.FNC_DESCRIPTION, SUM(ESTIMATE_REV_DET.EST_REV_QUANTITY), SUM(ESTIMATE_REV_DET.EST_REV_EXT_AMT), 0, 0
			FROM         JOB_COMPONENT INNER JOIN
								  ESTIMATE_REV_DET ON JOB_COMPONENT.ESTIMATE_NUMBER = ESTIMATE_REV_DET.ESTIMATE_NUMBER AND 
								  JOB_COMPONENT.EST_COMPONENT_NBR = ESTIMATE_REV_DET.EST_COMPONENT_NBR INNER JOIN
								  ESTIMATE_APPROVAL ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = ESTIMATE_APPROVAL.ESTIMATE_NUMBER AND 
								  ESTIMATE_REV_DET.EST_COMPONENT_NBR = ESTIMATE_APPROVAL.EST_COMPONENT_NBR AND 
								  ESTIMATE_REV_DET.EST_QUOTE_NBR = ESTIMATE_APPROVAL.EST_QUOTE_NBR AND 
								  ESTIMATE_REV_DET.EST_REV_NBR = ESTIMATE_APPROVAL.EST_REVISION_NBR INNER JOIN
								  FUNCTIONS ON ESTIMATE_REV_DET.FNC_CODE = FUNCTIONS.FNC_CODE INNER JOIN
								  JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
								  JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
								  INNER JOIN JOB_LOG J ON J.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER 
								  --INNER JOIN #jobcomps ON JOB_COMPONENT.JOB_NUMBER = #jobcomps.JobNo AND JOB_COMPONENT.JOB_COMPONENT_NBR = #jobcomps.CompNo
			WHERE  JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND (ESTIMATE_REV_DET.EST_FNC_TYPE = 'E' OR ESTIMATE_REV_DET.EST_FNC_TYPE = 'I')
					AND CAST(JOB_COMPONENT.JOB_NUMBER AS VARCHAR) + '/' + CAST(JOB_COMPONENT.JOB_COMPONENT_NBR AS VARCHAR) IN (SELECT CAST(JOB_NUMBER AS VARCHAR) + '/' + CAST(JOB_COMPONENT_NBR AS VARCHAR) FROM #PROJECT_TASK_LIST)
			GROUP BY JOB_COMPONENT.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR,ESTIMATE_REV_DET.FNC_CODE,FUNCTIONS.FNC_DESCRIPTION
		--END
		--ELSE IF @HAS_EST_INT_APPR = 1
		--BEGIN
			INSERT INTO #PROJECT_QUOTED
			SELECT JOB_COMPONENT.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR,ESTIMATE_REV_DET.FNC_CODE,FUNCTIONS.FNC_DESCRIPTION, SUM(ESTIMATE_REV_DET.EST_REV_QUANTITY), SUM(ESTIMATE_REV_DET.EST_REV_EXT_AMT), 0, 0
			FROM         JOB_COMPONENT INNER JOIN
								  ESTIMATE_REV_DET ON JOB_COMPONENT.ESTIMATE_NUMBER = ESTIMATE_REV_DET.ESTIMATE_NUMBER AND 
								  JOB_COMPONENT.EST_COMPONENT_NBR = ESTIMATE_REV_DET.EST_COMPONENT_NBR INNER JOIN
								  ESTIMATE_INT_APPR ON ESTIMATE_REV_DET.ESTIMATE_NUMBER = ESTIMATE_INT_APPR.ESTIMATE_NUMBER AND 
								  ESTIMATE_REV_DET.EST_COMPONENT_NBR = ESTIMATE_INT_APPR.EST_COMPONENT_NBR AND 
								  ESTIMATE_REV_DET.EST_QUOTE_NBR = ESTIMATE_INT_APPR.EST_QUOTE_NBR AND 
								  ESTIMATE_REV_DET.EST_REV_NBR = ESTIMATE_INT_APPR.EST_REVISION_NBR INNER JOIN
								  FUNCTIONS ON ESTIMATE_REV_DET.FNC_CODE = FUNCTIONS.FNC_CODE INNER JOIN
								  JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
								  JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
								  INNER JOIN JOB_LOG J ON J.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER
								  --INNER JOIN #jobcomps ON JOB_COMPONENT.JOB_NUMBER = #jobcomps.JobNo AND JOB_COMPONENT.JOB_COMPONENT_NBR = #jobcomps.CompNo
			WHERE  JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND JOB_COMPONENT.ESTIMATE_NUMBER NOT IN (SELECT ESTIMATE_NUMBER FROM ESTIMATE_APPROVAL) AND (ESTIMATE_REV_DET.EST_FNC_TYPE = 'E' OR ESTIMATE_REV_DET.EST_FNC_TYPE = 'I')
					AND CAST(JOB_COMPONENT.JOB_NUMBER AS VARCHAR) + '/' + CAST(JOB_COMPONENT.JOB_COMPONENT_NBR AS VARCHAR) IN (SELECT CAST(JOB_COMPONENT.JOB_NUMBER AS VARCHAR) + '/' + CAST(JOB_COMPONENT.JOB_COMPONENT_NBR AS VARCHAR) FROM #PROJECT_TASK_LIST)
			GROUP BY JOB_COMPONENT.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR,ESTIMATE_REV_DET.FNC_CODE,FUNCTIONS.FNC_DESCRIPTION
		--END
		
		--SELECT * FROM #PROJECT_QUOTED


		INSERT INTO #PROJECT_FORECAST
		SELECT ETF_OFFDTLJC.JOB_NUMBER, ETF_OFFDTLJC.JOB_COMPONENT_NBR,NULL,NULL, SUM(ETF_OFFDTLJC_EMP.HOURS), SUM(ETF_OFFDTLEMP.BILL_RATE*ETF_OFFDTLJC_EMP.HOURS), POSTPERIOD.PPGLMONTH, POSTPERIOD.PPGLYEAR
		FROM (((ETF_OFFDTL INNER JOIN ETF_HDR ON ETF_OFFDTL.ETF_ID = ETF_HDR.ETF_ID) 
		INNER JOIN ETF_OFFDTLJC ON ETF_OFFDTL.ETF_OFFDTL_ID = ETF_OFFDTLJC.ETF_OFFDTL_ID) 
		INNER JOIN ETF_OFFDTLEMP ON ETF_OFFDTL.ETF_OFFDTL_ID = ETF_OFFDTLEMP.ETF_OFFDTL_ID) 
		INNER JOIN ETF_OFFDTLJC_EMP ON (ETF_OFFDTLEMP.ETF_OFFDTLEMP_ID = ETF_OFFDTLJC_EMP.ETF_OFFDTLEMP_ID) AND (ETF_OFFDTLJC.ETF_OFFDTLJC_ID = ETF_OFFDTLJC_EMP.ETF_OFFDTLJC_ID)
		INNER JOIN POSTPERIOD ON ETF_HDR.PPPERIOD = POSTPERIOD.PPPERIOD 
		INNER JOIN JOB_COMPONENT ON JOB_COMPONENT.JOB_NUMBER = ETF_OFFDTLJC.JOB_NUMBER AND JOB_COMPONENT.JOB_COMPONENT_NBR = ETF_OFFDTLJC.JOB_COMPONENT_NBR 
		INNER JOIN JOB_LOG J ON JOB_COMPONENT.JOB_NUMBER = J.JOB_NUMBER
		--INNER JOIN #jobcomps ON ETF_OFFDTLJC.JOB_NUMBER = #jobcomps.JobNo AND ETF_OFFDTLJC.JOB_COMPONENT_NBR = #jobcomps.CompNo
		WHERE (((ETF_OFFDTL.APPROVED)='True')) AND JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND CAST(ETF_OFFDTLJC.JOB_NUMBER AS VARCHAR) + '/' + CAST(ETF_OFFDTLJC.JOB_COMPONENT_NBR AS VARCHAR) IN (SELECT CAST(JOB_NUMBER AS VARCHAR) + '/' + CAST(JOB_COMPONENT_NBR AS VARCHAR) FROM #PROJECT_TASK_LIST)
		GROUP BY ETF_OFFDTLJC.JOB_NUMBER, ETF_OFFDTLJC.JOB_COMPONENT_NBR, POSTPERIOD.PPGLMONTH, POSTPERIOD.PPGLYEAR
		--ORDER BY ETF_OFFDTLJC.JOB_NUMBER

		INSERT INTO #PROJECT_FORECAST
		SELECT ETF_OFFDTLJC.JOB_NUMBER, ETF_OFFDTLJC.JOB_COMPONENT_NBR,NULL,NULL, SUM(ETF_OFFDTLJC_AE.HOURS), SUM(ETF_OFFDTLAE.BILL_RATE*ETF_OFFDTLJC_AE.HOURS) AS REVAMT, POSTPERIOD.PPGLMONTH, POSTPERIOD.PPGLYEAR
		FROM ETF_OFFDTLAE INNER JOIN (((ETF_OFFDTL INNER JOIN ETF_HDR ON ETF_OFFDTL.ETF_ID = ETF_HDR.ETF_ID) 
		INNER JOIN ETF_OFFDTLJC ON ETF_OFFDTL.ETF_OFFDTL_ID = ETF_OFFDTLJC.ETF_OFFDTL_ID) 
		INNER JOIN ETF_OFFDTLJC_AE ON ETF_OFFDTLJC.ETF_OFFDTLJC_ID = ETF_OFFDTLJC_AE.ETF_OFFDTLJC_ID) ON (ETF_OFFDTLAE.ETF_OFFDTLAE_ID = ETF_OFFDTLJC_AE.ETF_OFFDTLAE_ID) AND (ETF_OFFDTLAE.ETF_OFFDTL_ID = ETF_OFFDTL.ETF_OFFDTL_ID)
		INNER JOIN POSTPERIOD ON ETF_HDR.PPPERIOD = POSTPERIOD.PPPERIOD
		INNER JOIN JOB_COMPONENT ON JOB_COMPONENT.JOB_NUMBER = ETF_OFFDTLJC.JOB_NUMBER AND JOB_COMPONENT.JOB_COMPONENT_NBR = ETF_OFFDTLJC.JOB_COMPONENT_NBR 
		INNER JOIN JOB_LOG J ON JOB_COMPONENT.JOB_NUMBER = J.JOB_NUMBER
		--INNER JOIN #jobcomps ON ETF_OFFDTLJC.JOB_NUMBER = #jobcomps.JobNo AND ETF_OFFDTLJC.JOB_COMPONENT_NBR = #jobcomps.CompNo
		WHERE (((ETF_OFFDTL.APPROVED)='True')) AND JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND CAST(ETF_OFFDTLJC.JOB_NUMBER AS VARCHAR) + '/' + CAST(ETF_OFFDTLJC.JOB_COMPONENT_NBR AS VARCHAR) IN (SELECT CAST(JOB_NUMBER AS VARCHAR) + '/' + CAST(JOB_COMPONENT_NBR AS VARCHAR) FROM #PROJECT_TASK_LIST)
		GROUP BY ETF_OFFDTLJC.JOB_NUMBER, ETF_OFFDTLJC.JOB_COMPONENT_NBR, POSTPERIOD.PPGLMONTH, POSTPERIOD.PPGLYEAR
		--ORDER BY ETF_OFFDTLJC.JOB_NUMBER
		--SELECT * FROM #PROJECT_TASK_LIST
		--SELECT * FROM #PROJECT_QUOTED
		--SELECT * FROM #PROJECT_FORECAST
		--INSERT INTO #PROJECT_MONTH
		--SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT, SUM(HOURS_ALLOWED), SUM(HOURS_ALLOWED * BILL_RATE),
		--		SUM(ADJ_HOURS_ALLOWED) AS ADJ_HOURS_ALLOWED, SUM(ADJ_HOURS_ALLOWED * BILL_RATE) AS ADJ_HOURS_ALLOWED_AMT, SUM(EMP_HOURS) AS ACTUAL_HOURS, SUM(EMP_HOURS * BILL_RATE) AS ACTUAL_HOURS_AMT, 0, ''
		--FROM #PROJECT_TASK_ADJ
		--GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, ADJ_MONTH, ADJ_YEAR

		INSERT INTO #PROJECT_ACTUAL
		SELECT EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR,EMP_TIME_DTL.FNC_CODE,FUNCTIONS.FNC_DESCRIPTION, EMP_TIME.EMP_CODE,
				ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0),SUM(EMP_TIME_DTL.TOTAL_BILL),-- + EMP_TIME_DTL.EXT_MARKUP_AMT),
				DATEPART(wk,EMP_TIME.EMP_DATE), DATEPART(yy,EMP_TIME.EMP_DATE), DATEADD(dd, -(DATEPART(dw, EMP_TIME.EMP_DATE)-1), EMP_TIME.EMP_DATE), DATEADD(dd, 7-(DATEPART(dw, EMP_TIME.EMP_DATE)), EMP_TIME.EMP_DATE),
				CASE WHEN EMP_TIME.EMP_DATE <= @ACTUALIZE_DATE THEN ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS),0) ELSE 0 END, CASE WHEN EMP_TIME.EMP_DATE <= @ACTUALIZE_DATE THEN SUM(EMP_TIME_DTL.TOTAL_BILL + EMP_TIME_DTL.EXT_MARKUP_AMT) ELSE 0 END
		FROM EMP_TIME INNER JOIN EMP_TIME_DTL ON EMP_TIME.ET_ID = EMP_TIME_DTL.ET_ID INNER JOIN
								  FUNCTIONS ON EMP_TIME_DTL.FNC_CODE = FUNCTIONS.FNC_CODE INNER JOIN
								  JOB_COMPONENT ON JOB_COMPONENT.JOB_NUMBER = EMP_TIME_DTL.JOB_NUMBER AND JOB_COMPONENT.JOB_COMPONENT_NBR = EMP_TIME_DTL.JOB_COMPONENT_NBR INNER JOIN
								  JOB_LOG J ON JOB_COMPONENT.JOB_NUMBER = J.JOB_NUMBER
			--INNER JOIN #jobcomps ON EMP_TIME_DTL.JOB_NUMBER = #jobcomps.JobNo AND EMP_TIME_DTL.JOB_COMPONENT_NBR = #jobcomps.CompNo
		WHERE JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND CAST(EMP_TIME_DTL.JOB_NUMBER AS VARCHAR) + '/' + CAST(EMP_TIME_DTL.JOB_COMPONENT_NBR AS VARCHAR) IN (SELECT CAST(JOB_NUMBER AS VARCHAR) + '/' + CAST(JOB_COMPONENT_NBR AS VARCHAR) FROM #PROJECT_TASK_LIST)
		GROUP BY EMP_TIME_DTL.JOB_NUMBER, EMP_TIME_DTL.JOB_COMPONENT_NBR,EMP_TIME_DTL.FNC_CODE,FUNCTIONS.FNC_DESCRIPTION,EMP_TIME.EMP_CODE, DATEPART(wk,EMP_TIME.EMP_DATE), DATEPART(yy,EMP_TIME.EMP_DATE), DATEADD(dd, -(DATEPART(dw, EMP_TIME.EMP_DATE)-1), EMP_TIME.EMP_DATE), DATEADD(dd, 7-(DATEPART(dw, EMP_TIME.EMP_DATE)), EMP_TIME.EMP_DATE),EMP_TIME.EMP_DATE



		--INSERT INTO #PROJECT_INCOME_ONLY
		--SELECT INCOME_ONLY.JOB_NUMBER, INCOME_ONLY.JOB_COMPONENT_NBR,INCOME_ONLY.FNC_CODE,FUNCTIONS.FNC_DESCRIPTION, NULL,
		--		ISNULL(SUM(INCOME_ONLY.IO_QTY),0),SUM(INCOME_ONLY.LINE_TOTAL), NULL, NULL, NULL, NULL
		--FROM INCOME_ONLY INNER JOIN
		--						  FUNCTIONS ON INCOME_ONLY.FNC_CODE = FUNCTIONS.FNC_CODE INNER JOIN
		--						  JOB_COMPONENT ON JOB_COMPONENT.JOB_NUMBER = INCOME_ONLY.JOB_NUMBER AND JOB_COMPONENT.JOB_COMPONENT_NBR = INCOME_ONLY.JOB_COMPONENT_NBR INNER JOIN
		--						  JOB_LOG J ON JOB_COMPONENT.JOB_NUMBER = J.JOB_NUMBER
		--WHERE JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6,12) AND CAST(INCOME_ONLY.JOB_NUMBER AS VARCHAR) + '/' + CAST(INCOME_ONLY.JOB_COMPONENT_NBR AS VARCHAR) IN (SELECT CAST(JOB_NUMBER AS VARCHAR) + '/' + CAST(JOB_COMPONENT_NBR AS VARCHAR) FROM #PROJECT_TASK_LIST)
		--GROUP BY  INCOME_ONLY.JOB_NUMBER, INCOME_ONLY.JOB_COMPONENT_NBR,INCOME_ONLY.FNC_CODE,FUNCTIONS.FNC_DESCRIPTION

		--SELECT * FROM #PROJECT_ACTUAL --WHERE JOB_NUMBER = 229
		--SELECT * FROM #PROJECT_TASK_LIST --WHERE JOB_NUMBER = 229
		--SELECT * FROM #PROJECT_QUOTED --WHERE JOB_NUMBER = 229
		--SELECT * FROM #PROJECT_TASK_ADJ

		INSERT INTO #PROJECT_MONTH
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, EST_FUNC, FUNC_DESC, EMP_CODE, NULL, NULL, NULL, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT, 0 AS HOURS_ALLOWED, 0,
				0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, SUM(ACTUAL_HOURS) AS ACTUAL_HOURS, SUM(ACTUAL_AMT) AS ACTUAL_HOURS_AMT,0,0, 0, '',0, [WEEK], [YEAR], WEEK_START, WEEK_END, SUM(PRIOR_ACTUAL_HOURS) AS PRIOR_ACTUAL_HOURS, SUM(PRIOR_ACTUAL_HOURS_AMT) AS PRIOR_ACTUAL_HOURS_AMT
		FROM #PROJECT_ACTUAL
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, EST_FUNC, FUNC_DESC, EMP_CODE, [WEEK], [YEAR], WEEK_START, WEEK_END

		--INSERT INTO #PROJECT_MONTH
		--SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, EST_FUNC, FUNC_DESC, EMP_CODE, NULL, NULL, NULL, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT, 0 AS HOURS_ALLOWED, 0,
		--		0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT,SUM(INCOME_HOURS),SUM(INCOME_AMT), 0, '',0, [WEEK], [YEAR], WEEK_START, WEEK_END
		--FROM #PROJECT_INCOME_ONLY
		--GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, EST_FUNC, FUNC_DESC, EMP_CODE, [WEEK], [YEAR], WEEK_START, WEEK_END

		INSERT INTO #PROJECT_MONTH
		SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, EST_FUNC, NULL, EMP_CODE, NULL, NULL, NULL, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT,
				SUM(ADJ_HOURS_ALLOWED) AS HOURS_ALLOWED, SUM(ADJ_HOURS_ALLOWED * BILL_RATE) AS HOURS_ALLOWED_AMT,0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT,0,0, 0, '',0, ADJ_WEEK, ADJ_YEAR, WEEK_START, WEEK_END,0,0
		FROM #PROJECT_TASK_ADJ
		WHERE IS_WORK_DAY = 1
		GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, EST_FUNC, EMP_CODE, ADJ_WEEK, ADJ_YEAR, WEEK_START, WEEK_END

		--INSERT INTO #PROJECT_MONTH
		--SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, CASE WHEN EST_FUNC IS NOT NULL THEN EST_FUNC ELSE FUNC_CODE END, CASE WHEN EST_FUNC IS NOT NULL THEN EST_FUNC_DESC ELSE FUNC_DESC END,
		--	   EMP_CODE, NULL, [START_DATE], END_DATE, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT, SUM(HOURS_ALLOWED) AS HOURS_ALLOWED, SUM(HOURS_ALLOWED * BILL_RATE),
		--		0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT, 0, '',0
		--FROM #PROJECT_TASK_LIST
		--GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, EST_FUNC, EST_FUNC_DESC,FUNC_CODE, FUNC_DESC, EMP_CODE, [START_DATE], END_DATE

		--SELECT * FROM #PROJECT_FORECAST

		--IF @INCLUDE_DETAIL = 0 AND @INCLUDE_EMP = 0 
		--BEGIN
			INSERT INTO #PROJECT_MONTH
			SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0 AS QUOTED_HOURS, 0 AS QUOTED_HRS_AMT, SUM(FORECAST_HOURS), SUM(FORECAST_AMT) AS FORECAST_HOURS_AMT, 0, 0,
					0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT,0,0, 0, '',0, NULL, NULL, NULL, NULL,0,0
			FROM #PROJECT_FORECAST
			GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, MTH, [YEAR]
		--END
		
		--SELECT * FROM #PROJECT_MONTH

		--if @INCLUDE_EMP = 0
		--BEGIN
			INSERT INTO #PROJECT_MONTH
			SELECT JOB_NUMBER, JOB_COMPONENT_NBR, '', '', '', NULL, NULL, EST_FUNC, FUNC_DESC, NULL, NULL, NULL, NULL, ISNULL(SUM(QUOTED_HOURS),0) AS QUOTED_HOURS, SUM(QUOTED_AMT) AS QUOTED_HRS_AMT, 0 AS FORECAST_HOURS, 0 AS FORECAST_HOURS_AMT, 0, 0,
					0 AS ADJ_HOURS_ALLOWED, 0 AS ADJ_HOURS_ALLOWED_AMT, 0 AS ACTUAL_HOURS, 0 AS ACTUAL_HOURS_AMT,0,0, 0, '',0, 0, NULL, NULL, NULL,0,0
			FROM #PROJECT_QUOTED
			GROUP BY JOB_NUMBER, JOB_COMPONENT_NBR, EST_FUNC, FUNC_DESC, MTH, [YEAR]
		--END		

		--SELECT * FROM #PROJECT_MONTH
		SELECT @NumberRecords = COUNT(*) FROM #PROJECT_MONTH
		SET @RowCount = 1

		WHILE @RowCount <= @NumberRecords
		BEGIN
		 SELECT @jn = JOB_NUMBER, @jcn = JOB_COMPONENT_NBR, @estFunc = EST_FUNC, @startdatetask = START_DATE_TASK, @enddatetask = END_DATE_TASK
		 FROM #PROJECT_MONTH
		 WHERE [ROW_ID] = @RowCount

		 --SELECT @estFunc,@startdatetask

		 SELECT @status = TRAFFIC.TRF_DESCRIPTION, @perc_comp = ISNULL(JOB_TRAFFIC.PERCENT_COMPLETE,0)
		 FROM JOB_TRAFFIC INNER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
		 WHERE JOB_TRAFFIC.JOB_NUMBER = @jn AND JOB_TRAFFIC.JOB_COMPONENT_NBR = @jcn

		 SELECT @client = CLIENT.CL_NAME, @ae = JC.EMP_CODE, @jcd = JC.JOB_COMP_DESC, @sd = JC.START_DATE, @ed = JC.JOB_FIRST_USE_DATE
		 FROM JOB_COMPONENT JC INNER JOIN JOB_LOG JL ON JC.JOB_NUMBER = JL.JOB_NUMBER INNER JOIN CLIENT ON JL.CL_CODE = CLIENT.CL_CODE
		 WHERE JC.JOB_NUMBER = @jn AND JC.JOB_COMPONENT_NBR = @jcn

		-- SELECT @sd, @ed
		 SET @TOTAL_DAYS = DATEDIFF(DAY, @sd, @ed) 
		 IF @sd <= GETDATE() AND @ed >= GETDATE()
			BEGIN
				SET @WORK_DAYS_TOTAL = DATEDIFF(DAY, @sd, GETDATE()) 
				SET @CURR_DATE = @sd
				SET @CTR = 0
				SET @WORKING_DAYS = 0
				WHILE @WORK_DAYS_TOTAL > 0
					BEGIN
						SET @CURR_DATE = DATEADD(DAY, @CTR , @sd)
						SET @CURR_DAY_OF_WEEK = DATEPART(weekday, @CURR_DATE)
						if (@CURR_DAY_OF_WEEK <> 1 AND @CURR_DAY_OF_WEEK <> 7) AND (
								   NOT EXISTS(
									   SELECT NON_TASK_ID
									   FROM   EMP_NON_TASKS WITH(NOLOCK)
									   WHERE  TYPE = 'H'
											AND DATEPART(dayofyear,@CURR_DATE) BETWEEN DATEPART(dayofyear,[START_DATE]) AND DATEPART(dayofyear,[END_DATE]) 
											AND DATEPART(yy,[START_DATE]) = DATEPART(yy,@CURR_DATE)
											AND ALL_DAY = 1
								   )
						   )
						   BEGIN
								SET @WORKING_DAYS = @WORKING_DAYS + 1
						   END
						SET @CTR = @CTR + 1
						SET @WORK_DAYS_TOTAL = @WORK_DAYS_TOTAL - 1
					END
				SET @perc_schedule = (@WORKING_DAYS / @TOTAL_DAYS) * 100		 
				--SELECT @WORKING_DAYS, @TOTAL_DAYS, @sd, @ed, (@WORKING_DAYS / @TOTAL_DAYS)	
			END
			ELSE IF @sd > GETDATE()
			BEGIN
				SET @perc_schedule = 0
			END
			ELSE 
			BEGIN
				SET @perc_schedule = 100
			END		 

		 If @startdatetask IS NULL
		 Begin
			UPDATE #PROJECT_MONTH 
			SET START_DATE_TASK = (SELECT TOP 1 START_DATE_TASK FROM #PROJECT_MONTH PM WHERE PM.EST_FUNC = @estFunc AND JOB_NUMBER = @jn AND JOB_COMPONENT_NBR = @jcn AND START_DATE_TASK IS NOT NULL)
			WHERE EST_FUNC = @estFunc
		 End

		 If @enddatetask IS NULL
		 Begin
			UPDATE #PROJECT_MONTH 
			SET END_DATE_TASK = (SELECT TOP 1 END_DATE_TASK FROM #PROJECT_MONTH PM WHERE PM.EST_FUNC = @estFunc AND JOB_NUMBER = @jn AND JOB_COMPONENT_NBR = @jcn AND END_DATE_TASK IS NOT NULL)
			WHERE EST_FUNC = @estFunc
		 End

		 UPDATE #PROJECT_MONTH 
		 SET CLIENT = @client, AE = @ae, PROJECT_DESC = @jcd, [START_DATE] = @sd, END_DATE = @ed, [STATUS] = @status, [PERC_SCHEDULE] = @perc_schedule, [PERC_COMPLETE] = @perc_comp
		 WHERE JOB_NUMBER = @jn AND JOB_COMPONENT_NBR = @jcn

		 SET @RowCount = @RowCount + 1
		END
		DECLARE @Name varchar(10)
		SET @Name = 'Manager'		

		
		--SELECT * FROM #PROJECT_MONTH
		--SELECT * FROM #weeks
		INSERT INTO #PROJECT_MONTH_TOTAL
		SELECT PM.JOB_NUMBER AS JobNumber,
			   JL.JOB_DESC AS JobDescription,
				PM.JOB_COMPONENT_NBR AS ComponentNumber,
				PROJECT_DESC AS ComponentDescription,
				[JobComponent] = RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), PM.JOB_NUMBER), 6) + '-' + RIGHT(REPLICATE('0', 2) + CONVERT(VARCHAR(20), PM.JOB_COMPONENT_NBR), 2),
				(SELECT ISNULL(UDV_DESC,'') FROM JOB_LOG INNER JOIN JOB_LOG_UDV1 ON JOB_LOG.UDV1_CODE = JOB_LOG_UDV1.UDV_CODE WHERE JOB_LOG.JOB_NUMBER = PM.JOB_NUMBER) as [Type],	
				(SELECT ISNULL(UDV_DESC,'') FROM JOB_COMPONENT INNER JOIN JOB_CMP_UDV1 ON JOB_COMPONENT.UDV1_CODE = JOB_CMP_UDV1.UDV_CODE WHERE JOB_COMPONENT.JOB_NUMBER = PM.JOB_NUMBER AND JOB_COMPONENT.JOB_COMPONENT_NBR = PM.JOB_COMPONENT_NBR) as [Type2],	
				JOB_PROCESS_DESC AS JobProcessControl,	
				CASE WHEN ISNULL(SUM(QUOTED_HRS_AMT),0) = 0 THEN ISNULL(SUM(ACTUAL_HOURS_AMT),0) ELSE ISNULL(SUM(QUOTED_HRS_AMT),0) END AS EstimatedGrossIncome,
				0 as CurrentRevenue,
				SUM(PRIOR_ACTUAL_HOURS) as PriorHoursRevenue,
				SUM(PRIOR_ACTUAL_HOURS_AMT) as PriorRevenue,
				ISNULL(SUM(ACTUAL_HOURS_AMT),0) + ISNULL(SUM(HOURS_ALLOWED_AMT),0) as TotalHours,
				CASE WHEN ISNULL(SUM(QUOTED_HRS_AMT),0) > 0 THEN ((ISNULL(SUM(ACTUAL_HOURS_AMT),0) + ISNULL(SUM(HOURS_ALLOWED_AMT),0)) / (ISNULL(SUM(QUOTED_HRS_AMT),0))) * 100 ELSE 0 END AS PercentCompleteToDate,
				[WEEK] as [Week],				
				ISNULL(SUM(QUOTED_HOURS),0) AS EstimateHours,
				ISNULL(SUM(ACTUAL_HOURS),0) AS ActualHours,
				ISNULL(SUM(QUOTED_HOURS),0) - ISNULL(SUM(ACTUAL_HOURS),0) AS RemainingHours,
				ISNULL(SUM(ACTUAL_HOURS_AMT),0) AS ActualAmount,
				ISNULL(SUM(QUOTED_HRS_AMT),0) - ISNULL(SUM(ACTUAL_HOURS_AMT),0) AS RemainingAmount,
				ISNULL(SUM(FORECAST_HOURS),0) AS ForecastedHours,
				ISNULL(SUM(FORECAST_HRS_AMT),0) AS ForecastedAmount,
				ISNULL(SUM(HOURS_ALLOWED),0) AS ProjectedHours,
				ISNULL(SUM(HOURS_ALLOWED_AMT),0) AS ProjectedAmount
				--ISNULL(SUM(INCOME_HOURS),0) AS IncomeOnlyHours,
				--ISNULL(SUM(INCOME_HOURS_AMT),0) AS IncomeOnlyAmount
		FROM #PROJECT_MONTH PM LEFT OUTER JOIN
		[dbo].[JOB_TRAFFIC] AS JOBT ON JOBT.JOB_NUMBER = PM.JOB_NUMBER AND
									JOBT.JOB_COMPONENT_NBR = PM.JOB_COMPONENT_NBR INNER JOIN
		JOB_COMPONENT JC ON PM.JOB_NUMBER = JC.JOB_NUMBER AND PM.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR INNER JOIN
		JOB_LOG JL ON JL.JOB_NUMBER = JC.JOB_NUMBER INNER JOIN
		[dbo].[CLIENT] AS C ON C.CL_CODE = JL.CL_CODE INNER JOIN
		[dbo].[DIVISION] AS D ON D.CL_CODE = JL.CL_CODE AND
								 D.DIV_CODE = JL.DIV_CODE INNER JOIN
		[dbo].[PRODUCT] AS P ON P.CL_CODE = JL.CL_CODE AND
								P.DIV_CODE = JL.DIV_CODE AND
								P.PRD_CODE = JL.PRD_CODE LEFT OUTER JOIN
		[dbo].[CDP_CONTACT_HDR] AS CC ON CC.CDP_CONTACT_ID = JC.CDP_CONTACT_ID LEFT OUTER JOIN
		[dbo].[JOB_TYPE] AS JT ON JT.JT_CODE = JC.JT_CODE LEFT OUTER JOIN
		[dbo].[EMPLOYEE_CLOAK] AS MEMP ON MEMP.EMP_CODE = JOBT.MGR_EMP_CODE LEFT OUTER JOIN
		[dbo].[JOB_PROC_CONTROLS] AS JPC ON JPC.JOB_PROCESS_CONTRL = JC.JOB_PROCESS_CONTRL

		--WHERE
		--1 = CASE WHEN @DATE_TYPE = 0 THEN CASE WHEN JC.[START_DATE] >= @START_DATE AND JC.[START_DATE] <= CONVERT(DATETIME, @END_DATE +' 23:59:59', 101) THEN 1 ELSE 0 END
				 --WHEN @DATE_TYPE = 1 THEN CASE WHEN JC.JOB_FIRST_USE_DATE >= @START_DATE AND JC.JOB_FIRST_USE_DATE <= CONVERT(DATETIME, @END_DATE +' 23:59:59', 101) THEN 1 ELSE 0 END
				 --WHEN @DATE_TYPE = 2 THEN CASE WHEN V_JOB_TRAFFIC_DET.JOB_REVISED_DATE >= @START_DATE AND V_JOB_TRAFFIC_DET.JOB_REVISED_DATE <= CONVERT(DATETIME, @END_DATE +' 23:59:59', 101) THEN 1 ELSE 0 END
				 --WHEN @DATE_TYPE = 3 THEN CASE WHEN EA.[EstimateDate] >= @START_DATE AND EA.[EstimateDate] <= CONVERT(DATETIME, @END_DATE +' 23:59:59', 101) THEN 1 ELSE 0 END
				 --WHEN @DATE_TYPE = 4 THEN CASE WHEN EA.[EstimateApprovedDate] >= @START_DATE AND EA.[EstimateApprovedDate] <= CONVERT(DATETIME, @END_DATE +' 23:59:59', 101) THEN 1 ELSE 0 END
				 --WHEN @DATE_TYPE = 3 THEN CASE WHEN JL.CREATE_DATE >= @START_DATE AND JL.CREATE_DATE <= CONVERT(DATETIME, @END_DATE +' 23:59:59', 101) THEN 1 ELSE 0 END END
		GROUP BY PM.JOB_NUMBER, PM.JOB_COMPONENT_NBR, [WEEK], JL.JOB_DESC,PROJECT_DESC,JOB_PROCESS_DESC,PM.[STATUS],PM.[START_DATE],PM.END_DATE
		ORDER BY PM.JOB_NUMBER DESC, PM.JOB_COMPONENT_NBR ASC

		SELECT * FROM #PROJECT_MONTH_TOTAL

		UPDATE #PROJECT_MONTH_TOTAL 
		SET EstimatedGrossIncome = CASE WHEN (SELECT SUM(QUOTED_HRS_AMT) FROM #PROJECT_MONTH PM WHERE PM.JOB_NUMBER = #PROJECT_MONTH_TOTAL.JobNumber AND PM.JOB_COMPONENT_NBR = #PROJECT_MONTH_TOTAL.ComponentNumber) = 0 THEN
											(SELECT SUM(ACTUAL_HOURS_AMT) FROM #PROJECT_MONTH PM WHERE PM.JOB_NUMBER = #PROJECT_MONTH_TOTAL.JobNumber AND PM.JOB_COMPONENT_NBR = #PROJECT_MONTH_TOTAL.ComponentNumber AND ACTUAL_HOURS_AMT <> 0) ELSE
											(SELECT SUM(QUOTED_HRS_AMT) FROM #PROJECT_MONTH PM WHERE PM.JOB_NUMBER = #PROJECT_MONTH_TOTAL.JobNumber AND PM.JOB_COMPONENT_NBR = #PROJECT_MONTH_TOTAL.ComponentNumber AND QUOTED_HRS_AMT <> 0) END
		WHERE EstimatedGrossIncome = 0

		UPDATE #PROJECT_MONTH_TOTAL 
		SET PercentCompleteToDate = CASE WHEN EstimatedGrossIncome > 0 THEN (Totalhours / EstimatedGrossIncome) * 100 ELSE 0 END 

		UPDATE #PROJECT_MONTH_TOTAL 
		SET CurrentRevenue = (EstimatedGrossIncome - PriorRevenue)


		SELECT [ID],
			JobNumber,
			JobDescription,
			ComponentNumber,			
			ComponentDescription,
			JobComponent,
			[Type],
			[Type2],
			JobProcessControl,
			ISNULL(EstimatedGrossIncome,0) AS EstimatedGrossIncome,
	        ISNULL(CurrentRevenue,0) AS CurrentRevenue,
			ISNULL(PriorRevenue,0) AS PriorRevenue,
			ISNULL(TotalHours,0) AS TotalHours,
			ISNULL(PercentCompleteToDate,0) AS PercentCompleteToDate,
			[Week],
			ISNULL(EstimateHours,0) AS EstimateHours,
			ISNULL(AcutalHours,0) AS AcutalHours,
			ISNULL(RemainingHours,0) AS RemainingHours,
			ISNULL(ActualAmount,0) AS ActualAmount,
			ISNULL(RemainingAmount,0) AS RemainingAmount,
			ISNULL(ForecastedHours,0) AS ForecastedHours,
			ISNULL(ForecastedAmount,0) AS ForecastedAmount,
			ISNULL(ProjectedHours,0) AS ProjectedHours,
			ISNULL(ProjectedAmount,0) AS ProjectedAmount
		FROM #PROJECT_MONTH_TOTAL		
		
		--SELECT * FROM #PROJECT_TASK_LIST
		--SELECT * FROM #PROJECT_TASK_ADJ
				
        DROP TABLE #PROJECT_TASK_LIST;
        DROP TABLE #PROJECT_TASK_ADJ;
		DROP TABLE #PROJECT_FORECAST;
		DROP TABLE #PROJECT_MONTH;
        
                




        




                
                
                
                
      



