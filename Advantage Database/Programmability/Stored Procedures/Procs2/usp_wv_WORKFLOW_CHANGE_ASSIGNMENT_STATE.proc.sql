SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_WORKFLOW_CHANGE_ASSIGNMENT_STATE]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_WORKFLOW_CHANGE_ASSIGNMENT_STATE]
GO

CREATE PROCEDURE [dbo].[usp_wv_WORKFLOW_CHANGE_ASSIGNMENT_STATE] /*WITH ENCRYPTION*/
	@USER_CODE VARCHAR(100),
	@ALLOW_DEMOTION BIT,
	@WORKFLOW_EVENT_ID INT,
	@JOB_NUMBER INT,
	@JOB_COMPONENT_NBR SMALLINT,
	@OFFICE_CODE VARCHAR(4),
	@CL_CODE VARCHAR(6),
	@DIV_CODE VARCHAR(6),
	@PRD_CODE VARCHAR(6),
	@CMP_CODE VARCHAR(6),
	@ESTIMATE_NUMBER INT,
	@EST_COMPONENT_NBR SMALLINT,
	@EST_QUOTE_NBR SMALLINT,
	@ESTIMATE_REV_NBR SMALLINT,
	@VN_CODE VARCHAR(6),
	@EMP_CODE VARCHAR(6),
	@PO_NUMBER INT,
	@PO_REVISION SMALLINT,
	@ORDER_NBR INT,
	@REV_NBR SMALLINT,
	@CMP_IDENTIFIER INT,
	@BA_BATCH_ID INT,
	@TASK_SEQ_NBR SMALLINT,
	@ALERT_STATE_ID INT,
	@ALRT_NOTIFY_HDR_ID INT
AS
/*=========== QUERY ===========*/
	DECLARE 
		@HAS_ASSOC BIT;
		
	-- SEE IF WORKFLOW HAS ASSOCIATION TO A TEMPLATE STATE
	IF EXISTS (
		SELECT WORKFLOW_ALERT_STATE.WORKFLOW_ID 
		FROM WORKFLOW_ALERT_STATE WITH(NOLOCK) 
		WHERE WORKFLOW_ALERT_STATE.WORKFLOW_ID = @WORKFLOW_EVENT_ID
	) 
		BEGIN
			SET @HAS_ASSOC = 1;
		END
	ELSE
		BEGIN
			SET @HAS_ASSOC = 0;
		END
	
	IF @HAS_ASSOC = 1
	BEGIN
		CREATE TABLE #ALERTS (
			ALERT_ID INT,
			CURR_ALRT_NOTIFY_HDR_ID INT,
			CURR_ALERT_STATE INT,
			NEW_ALERT_STATE INT,
			NEW_DFLT_EMP_CODE VARCHAR(50),
			NEW_STATE_IS_UNASSIGNED TINYINT,
			CURR_STATE_ORDER INT,
			NEW_STATE_ORDER INT
		);
		DECLARE 
			@NEW_STATE_ID INT,
			@SQL VARCHAR(MAX)
			
		--ALERTS THAT NEED UPDATING
		SET @SQL = '
		INSERT INTO #ALERTS
		SELECT DISTINCT ALERT.ALERT_ID, ALERT.ALRT_NOTIFY_HDR_ID, ALERT.ALERT_STATE_ID, NULL, NULL, NULL, ISNULL(ALERT_NOTIFY_STATES.SORT_ORDER, 9999), NULL
		FROM         ALERT WITH (NOLOCK) INNER JOIN
							  ALERT_RCPT WITH (NOLOCK) ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID INNER JOIN
							  WORKFLOW_ALERT_STATE WITH (NOLOCK) ON ALERT.ALRT_NOTIFY_HDR_ID = WORKFLOW_ALERT_STATE.ALRT_NOTIFY_HDR_ID INNER JOIN
							  ALERT_NOTIFY_STATES WITH (NOLOCK) ON ALERT.ALRT_NOTIFY_HDR_ID = ALERT_NOTIFY_STATES.ALRT_NOTIFY_HDR_ID AND 
							  ALERT.ALERT_STATE_ID = ALERT_NOTIFY_STATES.ALERT_STATE_ID
		WHERE     (ALERT_RCPT.CURRENT_NOTIFY = 1) AND (WORKFLOW_ALERT_STATE.WORKFLOW_ID = ' + CAST(@WORKFLOW_EVENT_ID AS VARCHAR) + ') '
		--ADD OTHER FILTERS HERE:
		IF (NOT @JOB_NUMBER IS NULL) AND @JOB_NUMBER > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.JOB_NUMBER = ' + CAST(@JOB_NUMBER AS VARCHAR);
		END
		IF (NOT @JOB_COMPONENT_NBR IS NULL) AND @JOB_COMPONENT_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.JOB_COMPONENT_NBR = ' + CAST(@JOB_COMPONENT_NBR AS VARCHAR);
		END
		IF (NOT @OFFICE_CODE IS NULL) AND @OFFICE_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.OFFICE_CODE = ''' + @OFFICE_CODE + '''';
		END
		IF (NOT @CL_CODE IS NULL) AND @CL_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.CL_CODE = ''' + @CL_CODE + '''';
		END
		IF (NOT @DIV_CODE IS NULL) AND @DIV_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.DIV_CODE = ''' + @DIV_CODE + '''';
		END
		IF (NOT @PRD_CODE IS NULL) AND @PRD_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.PRD_CODE = ''' + @PRD_CODE + '''';
		END
		IF (NOT @CMP_CODE IS NULL) AND @CMP_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.CMP_CODE = ''' + @CMP_CODE + '''';
		END
		IF (NOT @ESTIMATE_NUMBER IS NULL) AND @ESTIMATE_NUMBER > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ESTIMATE_NUMBER = ' + CAST(@ESTIMATE_NUMBER AS VARCHAR);
		END
		IF (NOT @EST_COMPONENT_NBR IS NULL) AND @EST_COMPONENT_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.EST_COMPONENT_NBR = ' + CAST(@EST_COMPONENT_NBR AS VARCHAR);
		END
		IF (NOT @EST_QUOTE_NBR IS NULL) AND @EST_QUOTE_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.EST_QUOTE_NBR = ' + CAST(@EST_QUOTE_NBR AS VARCHAR);
		END
		IF (NOT @ESTIMATE_REV_NBR IS NULL) AND @ESTIMATE_REV_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ESTIMATE_REV_NBR = ' + CAST(@ESTIMATE_REV_NBR AS VARCHAR);
		END
		IF (NOT @VN_CODE IS NULL) AND @VN_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.VN_CODE = ''' + @VN_CODE + '''';
		END
		IF (NOT @EMP_CODE IS NULL) AND @EMP_CODE <> ''
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.EMP_CODE = ''' + @EMP_CODE + '''';
		END
		IF (NOT @PO_NUMBER IS NULL) AND @PO_NUMBER > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.PO_NUMBER = ' + CAST(@PO_NUMBER AS VARCHAR);
		END
		IF (NOT @PO_REVISION IS NULL) AND @PO_REVISION > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.PO_REVISION = ' + CAST(@PO_REVISION AS VARCHAR);
		END
		IF (NOT @ORDER_NBR IS NULL) AND @ORDER_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ORDER_NBR = ' + CAST(@ORDER_NBR AS VARCHAR);
		END
		IF (NOT @REV_NBR IS NULL) AND @REV_NBR > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.REV_NBR = ' + CAST(@REV_NBR AS VARCHAR);
		END
		IF (NOT @CMP_IDENTIFIER IS NULL) AND @CMP_IDENTIFIER > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.CMP_IDENTIFIER = ' + CAST(@CMP_IDENTIFIER AS VARCHAR);
		END
		IF (NOT @BA_BATCH_ID IS NULL) AND @BA_BATCH_ID > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.BA_BATCH_ID = ' + CAST(@BA_BATCH_ID AS VARCHAR);
		END
		IF (NOT @TASK_SEQ_NBR IS NULL) AND @TASK_SEQ_NBR > -1 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.TASK_SEQ_NBR = ' + CAST(@TASK_SEQ_NBR AS VARCHAR);
		END
		IF (NOT @ALERT_STATE_ID IS NULL) AND @ALERT_STATE_ID > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ALERT_STATE_ID = ' + CAST(@ALERT_STATE_ID AS VARCHAR);
		END
		IF (NOT @ALRT_NOTIFY_HDR_ID IS NULL) AND @ALRT_NOTIFY_HDR_ID > 0 
		BEGIN
			SET @SQL = @SQL + ' AND ALERT.ALRT_NOTIFY_HDR_ID = ' + CAST(@ALRT_NOTIFY_HDR_ID AS VARCHAR);
		END
		
		----PRINT @SQL;
		EXEC (@SQL);
		
		-- GET NEW WORKFLOW STATE
		UPDATE	
			#ALERTS SET #ALERTS.NEW_ALERT_STATE = WORKFLOW_ALERT_STATE.ALERT_STATE_ID
		FROM 
			#ALERTS INNER JOIN WORKFLOW_ALERT_STATE WITH(NOLOCK) ON #ALERTS.CURR_ALRT_NOTIFY_HDR_ID = WORKFLOW_ALERT_STATE.ALRT_NOTIFY_HDR_ID  
		WHERE
			#ALERTS.CURR_ALERT_STATE <> WORKFLOW_ALERT_STATE.ALERT_STATE_ID
			AND WORKFLOW_ALERT_STATE.WORKFLOW_ID = @WORKFLOW_EVENT_ID;
		
		-- DON'T INCLUDE IF THE CURRENT STATE IS NEW STATE
		DELETE FROM #ALERTS WHERE NEW_ALERT_STATE IS NULL;
		
		-- UPDATE INFO
		UPDATE 
			#ALERTS SET #ALERTS.NEW_DFLT_EMP_CODE = ALERT_NOTIFY_STATES.DFLT_EMP_CODE,
			#ALERTS.NEW_STATE_IS_UNASSIGNED = 
			CASE
				WHEN NOT ALERT_NOTIFY_STATES.DFLT_EMP_CODE IS NULL THEN 1
				ELSE 0	
			END,
			#ALERTS.NEW_STATE_ORDER = ISNULL(ALERT_NOTIFY_STATES.SORT_ORDER ,9999)
		FROM 
			#ALERTS INNER JOIN ALERT_NOTIFY_STATES WITH(NOLOCK) ON #ALERTS.CURR_ALRT_NOTIFY_HDR_ID = ALERT_NOTIFY_STATES.ALRT_NOTIFY_HDR_ID  
			AND #ALERTS.NEW_ALERT_STATE = ALERT_NOTIFY_STATES.ALERT_STATE_ID;		
			
		--  DON'T ALLOW ASSIGNMENT STATES TO BE DEMOTED TO LOWER STATE
		IF (NOT @ALLOW_DEMOTION IS NULL) AND @ALLOW_DEMOTION = 1		
		BEGIN
			DELETE FROM #ALERTS WHERE CURR_STATE_ORDER >= NEW_STATE_ORDER;
		END
		
		SELECT 
			#ALERTS.ALERT_ID,
			#ALERTS.CURR_ALRT_NOTIFY_HDR_ID,
			#ALERTS.CURR_ALERT_STATE,
			#ALERTS.NEW_ALERT_STATE,
			ISNULL(#ALERTS.NEW_DFLT_EMP_CODE,'unassigned') AS NEW_DFLT_EMP_CODE,
			#ALERTS.NEW_STATE_IS_UNASSIGNED,
			#ALERTS.CURR_STATE_ORDER,
			#ALERTS.NEW_STATE_ORDER
		FROM #ALERTS;	
			
		DROP TABLE #ALERTS;  
		            
	END  
/*=========== QUERY ===========*/
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


	
	
