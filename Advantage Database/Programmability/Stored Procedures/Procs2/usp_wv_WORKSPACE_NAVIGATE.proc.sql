--DROP PROCEDURE [dbo].[usp_wv_WORKSPACE_NAVIGATE]
CREATE PROCEDURE [dbo].[usp_wv_WORKSPACE_NAVIGATE] /*WITH ENCRYPTION*/
@USER_CODE             VARCHAR(100),
@MOVE_DIRECTION        VARCHAR(1),
@IS_DASHBOARD		   BIT
AS
/*=========== QUERY ===========*/

	DECLARE @CURRENT_WORKSPACE_ID  INT,
			@NEXT_WORKSPACE_ID     INT,
			@PREV_WORKSPACE_ID     INT,
			@HAS_SETTING           BIT,
			@HAS_RECORD            BIT	

	SET @HAS_SETTING = 0;
	SET @IS_DASHBOARD = ISNULL(@IS_DASHBOARD, 0);

	IF EXISTS(
		   SELECT VARIABLE_NAME
		   FROM   APP_VARS WITH(NOLOCK)
		   WHERE  [APPLICATION] = 'MY_SETTINGS'
				  AND VARIABLE_NAME = 'CURRENT_WORKSPACE'
				  AND UPPER(USERID) = UPPER(@USER_CODE)
	   )
	BEGIN
		SELECT @CURRENT_WORKSPACE_ID = ISNULL(VARIABLE_VALUE, 0)
		FROM   APP_VARS WITH(NOLOCK)
		WHERE  [APPLICATION] = 'MY_SETTINGS'
			   AND VARIABLE_NAME = 'CURRENT_WORKSPACE'
			   AND UPPER(USERID) = UPPER(@USER_CODE);
		SET @HAS_SETTING = 1;
	END

	IF NOT EXISTS (
		   SELECT WORKSPACE_ID
		   FROM   WV_USER_WORKSPACE
		   WHERE  WORKSPACE_ID = @CURRENT_WORKSPACE_ID
	   )
	BEGIN
		SET @CURRENT_WORKSPACE_ID = NULL;
	END

	IF (@CURRENT_WORKSPACE_ID IS NULL OR @CURRENT_WORKSPACE_ID = 0)
	BEGIN

		SELECT @CURRENT_WORKSPACE_ID = MIN(WORKSPACE_ID)
		FROM 
		(SELECT TOP 1 WORKSPACE_ID
		FROM   WV_USER_WORKSPACE WITH(NOLOCK)
		WHERE  UPPER(USER_CODE) = UPPER(@USER_CODE)
		ORDER BY SORT_ORDER
		) AS A

	END

	--WORKSPACE NUMBERS MIGHT NOT BE SEQUENTIAL AND IN ORDER IF WORKSPACES ADDED/DELETED
	--MAKE IT SO
	DECLARE @ORDERED_WORKSPACES TABLE (
				[IDX] INT IDENTITY(1, 1) NOT NULL,
				WORKSPACE_ID INT NOT NULL
			);
	INSERT INTO @ORDERED_WORKSPACES
	  (
		WORKSPACE_ID
	  )
	SELECT WORKSPACE_ID
	FROM   WV_USER_WORKSPACE WITH(NOLOCK)
	WHERE  UPPER(USER_CODE) = UPPER(@USER_CODE)
	ORDER BY
		   SORT_ORDER;

	DECLARE @CURRENT_INDEX  INT,
			@MIN_INDEX      INT,
			@MAX_INDEX      INT,
			@NEXT_INDEX     INT,
			@PREV_INDEX     INT

	SELECT @CURRENT_INDEX = IDX
	FROM   @ORDERED_WORKSPACES
	WHERE  WORKSPACE_ID = @CURRENT_WORKSPACE_ID;

	SELECT @MIN_INDEX = MIN(IDX),
		   @MAX_INDEX = MAX(IDX)
	FROM   @ORDERED_WORKSPACES;

	SET @NEXT_INDEX = @CURRENT_INDEX + 1;
	SET @PREV_INDEX = @CURRENT_INDEX - 1;

	IF @NEXT_INDEX > @MAX_INDEX
	BEGIN
		SET @NEXT_INDEX = @MIN_INDEX;
	END

	IF @PREV_INDEX < @MIN_INDEX
	BEGIN
		SET @PREV_INDEX = @MAX_INDEX;
	END

	SELECT @NEXT_WORKSPACE_ID = WORKSPACE_ID
	FROM   @ORDERED_WORKSPACES
	WHERE  IDX = @NEXT_INDEX;
	
	SELECT @PREV_WORKSPACE_ID = WORKSPACE_ID
	FROM   @ORDERED_WORKSPACES
	WHERE  IDX = @PREV_INDEX;
	
	DECLARE @GO_TO_WORKSPACE_ID INT;
	
	IF @IS_DASHBOARD = 0 OR @IS_DASHBOARD IS NULL
	BEGIN
		IF @MOVE_DIRECTION = 'N'
		   OR @MOVE_DIRECTION = '+'
		BEGIN
			SELECT @GO_TO_WORKSPACE_ID = ISNULL(@NEXT_WORKSPACE_ID, 0);
		END
		IF @MOVE_DIRECTION = 'P'
		   OR @MOVE_DIRECTION = '-'
		BEGIN
			SELECT @GO_TO_WORKSPACE_ID = ISNULL(@PREV_WORKSPACE_ID, 0);
		END
	END
	ELSE
	BEGIN
		IF @MOVE_DIRECTION = 'N'
		   OR @MOVE_DIRECTION = '+'
		BEGIN
			SELECT @GO_TO_WORKSPACE_ID = WORKSPACE_ID FROM @ORDERED_WORKSPACES WHERE IDX = @MIN_INDEX;
		END
		IF @MOVE_DIRECTION = 'P'
		   OR @MOVE_DIRECTION = '-'
		BEGIN
			SELECT @GO_TO_WORKSPACE_ID = WORKSPACE_ID FROM @ORDERED_WORKSPACES WHERE IDX = @MAX_INDEX;
		END
	END

	IF @MOVE_DIRECTION = ''
	   OR @MOVE_DIRECTION = '0'
	BEGIN
		SELECT @GO_TO_WORKSPACE_ID = @CURRENT_WORKSPACE_ID;
	END
	
	IF @HAS_SETTING = 0 OR (@HAS_SETTING IS NULL)
	BEGIN
		INSERT INTO APP_VARS WITH
		  (
			ROWLOCK
		  )(
			   USERID,
			   [APPLICATION],
			   VARIABLE_GROUP,
			   VARIABLE_NAME,
			   VARIABLE_TYPE,
			   VARIABLE_ORDER,
			   VARIABLE_VALUE
		   )
		VALUES
		  (
			@USER_CODE,
			'MY_SETTINGS',
			0,
			'CURRENT_WORKSPACE',
			'String',
			NULL,
			@GO_TO_WORKSPACE_ID
		  )
	END
	IF @HAS_SETTING = 1
	BEGIN
		UPDATE APP_VARS WITH(ROWLOCK)
		SET    VARIABLE_VALUE = @GO_TO_WORKSPACE_ID
		WHERE  [APPLICATION] = 'MY_SETTINGS'
			   AND VARIABLE_NAME = 'CURRENT_WORKSPACE'
			   AND UPPER(USERID) = UPPER(@USER_CODE);
	END

	SELECT @GO_TO_WORKSPACE_ID AS GO_TO_WORKSPACE_ID;

/*=========== QUERY ===========*/