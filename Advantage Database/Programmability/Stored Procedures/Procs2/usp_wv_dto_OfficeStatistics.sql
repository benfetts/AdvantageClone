 SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_dto_OfficeStatistics]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_dto_OfficeStatistics]
GO


CREATE PROCEDURE [dbo].[usp_wv_dto_OfficeStatistics]
@UserID VARCHAR(100),
@StartDate DATETIME,
@EndDate DATETIME,
@CancelledCode VARCHAR(100),
@IsCancelled VARCHAR(10),
@AE varchar(6),
@Manager varchar(6)
AS
DECLARE @Restrictions INT, @SqlStmt NVARCHAR(4000)
DECLARE @OfficeRestrictions INT
DECLARE @EMP_CODE AS VARCHAR(6)

--Check restrictions:
SELECT @Restrictions = COUNT(*) FROM SEC_CLIENT WHERE UPPER(USER_ID) = UPPER(@UserID)

SELECT @EMP_CODE = EMP_CODE FROM SEC_USER WHERE UPPER(USER_CODE) = UPPER(@UserID)
SELECT @OfficeRestrictions = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CODE


--Create temp table:
CREATE TABLE #JOB_STATS
(
	OFFICE_CODE VARCHAR(15) NOT NULL,
	OFFICE_DESCRIPT VARCHAR(50) NOT NULL,
	JOBS_CREATED INT NOT NULL,
	JOBS_COMPLETED INT NOT NULL,
	JOBS_DUE INT NOT NULL,
	JOBS_IN_PROGRESS INT NOT NULL,
	JOBS_CANCELLED INT NOT NULL
)

--Insert first row:
INSERT INTO #JOB_STATS
SELECT 'ALL_OFFICES','All Offices',0,0,0,0,0

--Get client list:
INSERT INTO #JOB_STATS
SELECT DISTINCT 
	OFFICE_CODE, 
	ISNULL(OFFICE_CODE,'')+' - '+ISNULL(OFFICE_NAME,'') AS OFFICE_DESCRIPT,
	0,0,0,0,0
FROM 
	OFFICE
ORDER BY 
	OFFICE_CODE


--Get jobs created:
SET @SqlStmt = 'UPDATE #JOB_STATS
			SET JOBS_CREATED = T1.JOBS_CREATED
			FROM
			(
			SELECT 
				COUNT(*) AS JOBS_CREATED,JOB_LOG.OFFICE_CODE
			FROM
				JOB_COMPONENT INNER JOIN
				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER LEFT OUTER JOIN
				JOB_TRAFFIC ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR'
			IF @OfficeRestrictions > 0 
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
			End
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN
				SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE'
			End
			
SET @SqlStmt = @SqlStmt + '	WHERE     
				(JOB_COMPONENT.JOB_COMP_DATE >= ''' + CONVERT( varchar(10), @StartDate, 1 ) + ''') AND 
				(JOB_COMPONENT.JOB_COMP_DATE <= ''' + CONVERT( varchar(10), @EndDate, 1 ) + ''')'
			IF LEFT (@AE, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
			End
			IF LEFT (@Manager, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
			End				
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
			End
SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.OFFICE_CODE
			) T1
			INNER JOIN #JOB_STATS T2 ON (T1.OFFICE_CODE COLLATE DATABASE_DEFAULT = T2.OFFICE_CODE COLLATE DATABASE_DEFAULT)	'
 PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt

SET @SqlStmt = ''
SET @SqlStmt = 'UPDATE #JOB_STATS
			SET JOBS_COMPLETED = T1.JOBS_COMPLETED
			FROM
			(
			SELECT 
				COUNT(*) AS JOBS_COMPLETED, JOB_LOG.OFFICE_CODE
			FROM
				JOB_TRAFFIC INNER JOIN
				JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR'
			IF @OfficeRestrictions > 0 
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
			End
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN
				SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE'
			End
SET @SqlStmt = @SqlStmt + '	WHERE (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND    
				(JOB_TRAFFIC.COMPLETED_DATE >= ''' + CONVERT( varchar(10), @StartDate, 1 ) + ''') AND 
				(JOB_TRAFFIC.COMPLETED_DATE <= ''' + CONVERT( varchar(10), @EndDate, 1 ) + ''')'
			IF LEFT (@AE, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
			End
			IF LEFT (@Manager, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
			End				
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
			End
SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.OFFICE_CODE
			) T1
			INNER JOIN #JOB_STATS T2 ON (T1.OFFICE_CODE COLLATE DATABASE_DEFAULT = T2.OFFICE_CODE COLLATE DATABASE_DEFAULT)	'
 --PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt

IF @IsCancelled = 'true'
Begin
	--Get jobs cancelled:
			SET @SqlStmt = ''
			SET @SqlStmt = 'UPDATE #JOB_STATS
						SET JOBS_CANCELLED = T1.JOBS_CANCELLED
						FROM
						(
						SELECT 
							COUNT(*) AS JOBS_CANCELLED, JOB_LOG.OFFICE_CODE
						FROM
							JOB_TRAFFIC INNER JOIN
							JOB_LOG ON JOB_TRAFFIC.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
							JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR'
						IF @OfficeRestrictions > 0 
						Begin
							SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
						End
						IF @Restrictions > 0
						Begin
							SET @SqlStmt = @SqlStmt + ' INNER JOIN
							SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE'
						End
			SET @SqlStmt = @SqlStmt + '	WHERE (JOB_TRAFFIC.TRF_CODE = ''' + @CancelledCode + ''') AND (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL)) AND    
							(JOB_TRAFFIC.COMPLETED_DATE >= ''' + CONVERT( varchar(10), @StartDate, 1 ) + ''') AND 
							(JOB_TRAFFIC.COMPLETED_DATE <= ''' + CONVERT( varchar(10), @EndDate, 1 ) + ''')'
						IF LEFT (@AE, 3) <> 'All'
						Begin
							SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
						End
						IF LEFT (@Manager, 3) <> 'All'
						Begin
							SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
						End				
						IF @Restrictions > 0
						Begin
							SET @SqlStmt = @SqlStmt + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
						End
			SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.OFFICE_CODE
						) T1
						INNER JOIN #JOB_STATS T2 ON (T1.OFFICE_CODE COLLATE DATABASE_DEFAULT = T2.OFFICE_CODE COLLATE DATABASE_DEFAULT)	'
 --PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt
End
Else
Begin
	--Get custom column:
			SET @SqlStmt = ''
			SET @SqlStmt = 'UPDATE #JOB_STATS
						SET JOBS_CANCELLED = T1.JOBS_CANCELLED
						FROM
						(
						SELECT 
							COUNT(*) AS JOBS_CANCELLED, JOB_LOG.OFFICE_CODE
						FROM
							JOB_TRAFFIC INNER JOIN
							JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
							JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
							JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER'
						IF @OfficeRestrictions > 0 
						Begin
							SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
						End
						IF @Restrictions > 0
						Begin
							SET @SqlStmt = @SqlStmt + ' INNER JOIN
							SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE'
						End
			SET @SqlStmt = @SqlStmt + '	WHERE (NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND 
							(JOB_TRAFFIC.TRF_CODE = ''' + @CancelledCode + ''')'
						IF LEFT (@AE, 3) <> 'All'
						Begin
							SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
						End
						IF LEFT (@Manager, 3) <> 'All'
						Begin
							SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
						End				
						IF @Restrictions > 0
						Begin
							SET @SqlStmt = @SqlStmt + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
						End
			SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.OFFICE_CODE
						) T1
						INNER JOIN #JOB_STATS T2 ON (T1.OFFICE_CODE COLLATE DATABASE_DEFAULT = T2.OFFICE_CODE COLLATE DATABASE_DEFAULT)	'
 --PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt
End

SET @SqlStmt = ''
SET @SqlStmt = 'UPDATE #JOB_STATS
			SET JOBS_DUE = T1.JOBS_DUE
			FROM
			(
			SELECT 
				COUNT(*) AS JOBS_DUE, JOB_LOG.OFFICE_CODE
			FROM
				JOB_TRAFFIC INNER JOIN
				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
				JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER'
			IF @OfficeRestrictions > 0 
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
			End
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN
				SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE'
			End
SET @SqlStmt = @SqlStmt + '	WHERE (NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND    
				(JOB_COMPONENT.JOB_FIRST_USE_DATE >= ''' + CONVERT( varchar(10), @StartDate, 1 ) + ''') AND 
				(JOB_COMPONENT.JOB_FIRST_USE_DATE <= ''' + CONVERT( varchar(10), @EndDate, 1 ) + ''')'
			IF LEFT (@AE, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
			End
			IF LEFT (@Manager, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
			End				
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
			End
SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.OFFICE_CODE
			) T1
			INNER JOIN #JOB_STATS T2 ON (T1.OFFICE_CODE COLLATE DATABASE_DEFAULT = T2.OFFICE_CODE COLLATE DATABASE_DEFAULT)	'
 --PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt


SET @SqlStmt = ''
SET @SqlStmt = 'UPDATE #JOB_STATS
			SET JOBS_IN_PROGRESS = T1.JOBS_IN_PROGRESS
			FROM
			(
			SELECT 
				COUNT(*) AS JOBS_IN_PROGRESS, JOB_LOG.OFFICE_CODE
			FROM
				JOB_TRAFFIC INNER JOIN
				JOB_COMPONENT ON JOB_TRAFFIC.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
				JOB_TRAFFIC.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER'
			IF @OfficeRestrictions > 0 
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = JOB_LOG.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CODE + ''''
			End
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' INNER JOIN
				SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE'
			End
SET @SqlStmt = @SqlStmt + '	WHERE (NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12))) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)'
			IF LEFT (@AE, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (JOB_COMPONENT.EMP_CODE = ''' + @AE + ''')'
			End
			IF LEFT (@Manager, 3) <> 'All'
			Begin
				SET @SqlStmt = @SqlStmt + N' AND (JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''')'
			End				
			IF @Restrictions > 0
			Begin
				SET @SqlStmt = @SqlStmt + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
			End
SET @SqlStmt = @SqlStmt + ' GROUP BY JOB_LOG.OFFICE_CODE
			) T1
			INNER JOIN #JOB_STATS T2 ON (T1.OFFICE_CODE COLLATE DATABASE_DEFAULT = T2.OFFICE_CODE COLLATE DATABASE_DEFAULT)	'
 --PRINT @SqlStmt   
 EXEC sp_executesql @SqlStmt


UPDATE #JOB_STATS SET JOBS_CREATED = (SELECT SUM(JOBS_CREATED) FROM #JOB_STATS) WHERE OFFICE_CODE='ALL_OFFICES'
UPDATE #JOB_STATS SET JOBS_COMPLETED = (SELECT SUM(JOBS_COMPLETED) FROM #JOB_STATS) WHERE OFFICE_CODE='ALL_OFFICES'
UPDATE #JOB_STATS SET JOBS_CANCELLED = (SELECT SUM(JOBS_CANCELLED) FROM #JOB_STATS) WHERE OFFICE_CODE='ALL_OFFICES'
UPDATE #JOB_STATS SET JOBS_DUE = (SELECT SUM(JOBS_DUE) FROM #JOB_STATS) WHERE OFFICE_CODE='ALL_OFFICES'
UPDATE #JOB_STATS SET JOBS_IN_PROGRESS = (SELECT SUM(JOBS_IN_PROGRESS) FROM #JOB_STATS) WHERE OFFICE_CODE='ALL_OFFICES'



SELECT * FROM #JOB_STATS Order By OFFICE_CODE



--Drop temporary table:
DROP TABLE #JOB_STATS

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
-- =============================================
-- Script Template
-- =============================================
