
CREATE PROCEDURE usp_wv_get_emp_avail_ass 
	@user_id	varchar(100),
	@emp_code 	varchar(6),
	@start_date	varchar(12),
	@end_date	varchar(12),
	@sum_level	varchar(1),
	@actualize	varchar(1),
	@OfficeCode  varchar(4), 
	@ClientCode 	Varchar(6),
	@DivisionCode 	Varchar(6),
	@ProductCode 	Varchar(6),
	@JobNum 	Varchar(6),
	@JobComp 	Varchar(6),
	@Role 		VarChar(6),
	@TaskStatus 	Varchar(1),
	@ExcludeTempComplete Char(1),
	@Manager	varchar(6)

AS
SET NOCOUNT ON

DECLARE @DAYOFYEAR 	INTEGER
DECLARE @MONTH 		INTEGER
DECLARE @WEEK 		INTEGER
DECLARE @CURRENT_DATE 	SMALLDATETIME
DECLARE @MIDDLE_DATE	SMALLDATETIME
DECLARE	@IDX_DATE	SMALLDATETIME
DECLARE @DAYIDX 	INTEGER
DECLARE @STARTDAY 	INTEGER
DECLARE @ENDDAY 	INTEGER

DECLARE @WK_MAX 	INTEGER
DECLARE @WK_MIN 	INTEGER
DECLARE @WK_IDX  	INTEGER
DECLARE @sql 		nvarchar(4000)
DECLARE @sql_from 	nvarchar(4000)
DECLARE @sql_where 	nvarchar(4000)
DECLARE @WKNBR 		VARCHAR(3)
DECLARE @ASSIGNED 	DECIMAL(9,3)
DECLARE @ASSIGNED_STR 	VARCHAR(9)
DECLARE @HOURS_STR	VARCHAR(9)

DECLARE @HRS_AVAIL 	INTEGER
DECLARE @OFFICE_CODE 	VARCHAR(4)
DECLARE @DP_TM_CODE 	VARCHAR(30)
DECLARE @DIRECT_HRS_PER DECIMAL(7,4)
DECLARE @HOURS_AVAIL 	DECIMAL(9,3)
DECLARE @DIR_HRS_GOAL 	DEC(9,3)

DECLARE	@IDX_MIN	INTEGER
DECLARE	@IDX_MAX	INTEGER
DECLARE	@IDX		INTEGER
DECLARE @MIDDLE_DAY	INTEGER
DECLARE @EMP_TIME	INTEGER
DECLARE @MONTHS_NBR	INTEGER
DECLARE	@WEEKS_NBR	INTEGER
DECLARE	@DAYS_NBR	INTEGER
DECLARE @ACT_WK_IDX 	INTEGER
DECLARE @Restrictions 	INTEGER
DECLARE @startdate	smalldatetime
DECLARE @enddate	smalldatetime


SELECT @startdate = CAST(@start_date AS SMALLDATETIME)
SELECT @enddate = CAST(@end_date AS SMALLDATETIME)

SELECT @DAYS_NBR   = DATEDIFF ( day , @startdate , @enddate )
SELECT @WEEKS_NBR  = DATEDIFF ( week , @startdate , @enddate )
SELECT @MONTHS_NBR = DATEDIFF ( month , @startdate , @enddate )

SELECT @STARTDAY = DATEPART(dayofyear, @startdate)
SELECT @ENDDAY = @STARTDAY + @DAYS_NBR
SELECT @DAYIDX = @STARTDAY
SELECT @CURRENT_DATE = @startdate


Select @Restrictions = Count(*) 
FROM SEC_CLIENT
Where UPPER(USER_ID) = UPPER(@user_id)


CREATE TABLE #W_ASSIGNED_TEMP (
	EMP_CODE	VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	ACTUAL_DATE	SMALLDATETIME,
	DAYOFYEAR	INT,
	MONTH		INT,
	WEEK		INT,
	ASSIGNED	DECIMAL(9,3)
)


SELECT @sql = 'INSERT INTO #W_ASSIGNED_TEMP
	SELECT  V_JOB_TRAFFIC_DET.EMP_CODE, 
	V_JOB_TRAFFIC_DET.JOB_REVISED_DATE,
	DATEPART(dayofyear, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE),
	DATEPART(month, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE),
	DATEPART(week, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE ),
	sum(ISNULL(V_JOB_TRAFFIC_DET.JOB_HRS,0)) AS ASSIGNED '

SELECT @sql_from = ' FROM    JOB_COMPONENT 
	INNER JOIN JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER 
				AND JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR 
	INNER JOIN V_JOB_TRAFFIC_DET ON JOB_TRAFFIC.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER 
				AND JOB_TRAFFIC.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR 
	INNER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER '

If @Restrictions > 0
	SELECT @sql_from = @sql_from + ' INNER JOIN SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE 
					AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE 
					AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE '


SELECT @sql_where = ' WHERE JOB_COMPONENT.JOB_PROCESS_CONTRL <> 6 AND JOB_COMPONENT.JOB_PROCESS_CONTRL <> 12 
		AND JOB_TRAFFIC.COMPLETED_DATE IS NULL 
		AND V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL
		AND V_JOB_TRAFFIC_DET.EMP_CODE IS NOT NULL
		AND V_JOB_TRAFFIC_DET.EMP_CODE = ''' + @emp_code + ''' 
		AND V_JOB_TRAFFIC_DET.JOB_REVISED_DATE BETWEEN ''' + @start_date + ''' AND  ''' + @end_date + ''''

If @OfficeCode <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.OFFICE_CODE = ''' + @OfficeCode + ''''

If @ClientCode <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.CL_CODE = ''' + @ClientCode + ''''

If @DivisionCode  <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.DIV_CODE = ''' + @DivisionCode + '''' 

If @ProductCode   <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.PRD_CODE = ''' + @ProductCode + ''''  

If @JobNum  <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_LOG.JOB_NUMBER = ' + @JobNum 

If @JobComp  <> ''
	SELECT @sql_where = @sql_where + ' AND JOB_COMPONENT.JOB_COMPONENT_NBR = ' + @JobComp 

--If @emp_code  <> ''
--	SELECT @sql_where = @sql_where + ' AND V_JOB_TRAFFIC_DET.EMP_CODE = ''' + @emp_code + '''' 

If @Role <> ''
	Begin
	  SELECT @sql_from = @sql_from + 'LEFT OUTER JOIN TASK_TRAFFIC_ROLE ON TASK_TRAFFIC_ROLE.TRF_CODE = V_JOB_TRAFFIC_DET.FNC_CODE
	FULL OUTER JOIN EMP_TRAFFIC_ROLE ON V_JOB_TRAFFIC_DET.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
		AND TASK_TRAFFIC_ROLE.ROLE_CODE = EMP_TRAFFIC_ROLE.ROLE_CODE
		AND EMP_TRAFFIC_ROLE.EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE '
		
	  SELECT @sql_where = @sql_where + ' AND ( TASK_TRAFFIC_ROLE.ROLE_CODE = ''' + @Role + ''' OR EMP_TRAFFIC_ROLE.ROLE_CODE = ''' + @Role + ''')' 
	End

If @TaskStatus <> ''
	SELECT @sql_where = @sql_where + ' AND V_JOB_TRAFFIC_DET.TASK_STATUS = ''' + @TaskStatus + '''' 
								 
If @ExcludeTempComplete = 'Y'
	SELECT @sql_where = @sql_where + ' AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL '
	
If @Manager <> ''
	  SELECT @sql_where = @sql_where + ' AND JOB_TRAFFIC.MGR_EMP_CODE = ''' + @Manager + ''' '


SELECT @sql = @sql + @sql_from + @sql_where

SELECT @sql = @sql + ' GROUP BY V_JOB_TRAFFIC_DET.EMP_CODE, 
	V_JOB_TRAFFIC_DET.JOB_REVISED_DATE,
	DATEPART(dayofyear, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE),
	DATEPART(month, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE),
	DATEPART(week, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE ) 
ORDER BY V_JOB_TRAFFIC_DET.EMP_CODE, 
	V_JOB_TRAFFIC_DET.JOB_REVISED_DATE,
	DATEPART(dayofyear, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE),
	DATEPART(month, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE),
	DATEPART(week, V_JOB_TRAFFIC_DET.JOB_REVISED_DATE ) '

EXEC sp_executesql @sql



CREATE TABLE #W_ASSIGNED_MATRIX (
	ACTUAL_DATE	SMALLDATETIME,
	DAYOFYEAR 	INT,
	WEEK		INT,
	MONTH		INT
)


WHILE @DAYIDX < @ENDDAY + 1
BEGIN

	SELECT @MONTH 	  = DATEPART(month, @CURRENT_DATE)
	SELECT @WEEK 	  = DATEPART(week, @CURRENT_DATE)
	SELECT @DAYOFYEAR = DATEPART(dayofyear, @CURRENT_DATE)
	INSERT INTO #W_ASSIGNED_MATRIX (ACTUAL_DATE, DAYOFYEAR, WEEK, MONTH) VALUES(@CURRENT_DATE, @DAYOFYEAR, @WEEK, @MONTH )
	SELECT @CURRENT_DATE = DATEADD(Day, 1, @CURRENT_DATE)
	SELECT @DAYIDX = @DAYIDX + 1
END


CREATE TABLE #W_EMP_ASSIGNED (
	EMP_CODE	VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	ACTUAL_DATE	SMALLDATETIME,
	DAYOFYEAR	INT,
	WEEK		INT,
	MONTH		INT,
	ASSIGNED	DECIMAL(9,3)
)



INSERT INTO #W_EMP_ASSIGNED
SELECT EMP_CODE, ACTUAL_DATE, DAYOFYEAR, WEEK, MONTH, ASSIGNED
FROM #W_ASSIGNED_TEMP
UNION
SELECT @emp_code, ACTUAL_DATE, DAYOFYEAR, WEEK, MONTH, 0
FROM #W_ASSIGNED_MATRIX
WHERE ACTUAL_DATE NOT IN (SELECT ACTUAL_DATE FROM #W_ASSIGNED_TEMP)


CREATE TABLE #W_EMP_TIME (
	EMP_CODE	VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	EMP_DATE	SMALLDATETIME,
	DAYOFYEAR	INT,
	EMP_HOURS	DECIMAL(9,3)
)


INSERT INTO #W_EMP_TIME
SELECT EMP_CODE, 
	EMP_DATE,
	DATEPART(dayofyear, EMP_DATE),
	ISNULL(EMP_DTL_HRS, 0)
FROM EMP_TIME
WHERE  EMP_CODE = @emp_code 
AND EMP_DATE BETWEEN @startdate AND GetDate()


If @actualize = '1' 
	Begin
		SELECT @MIDDLE_DATE = GetDate()
		--SELECT @MIDDLE_DATE = MAX(EMP_DATE) FROM W_EMP_TIME

		UPDATE #W_EMP_ASSIGNED SET ASSIGNED = 0 WHERE ACTUAL_DATE BETWEEN @startdate AND @MIDDLE_DATE 

		UPDATE #W_EMP_ASSIGNED SET ASSIGNED = ET.EMP_HOURS FROM #W_EMP_TIME ET, #W_EMP_ASSIGNED EA WHERE ET.EMP_DATE = EA.ACTUAL_DATE
	End

SELECT @WK_MIN = 1

If @sum_level = 'd'
BEGIN
	SELECT @WK_MAX =  @DAYS_NBR
	SELECT @ACT_WK_IDX = DATEPART(day, @startdate )
END
If @sum_level = 'w'
BEGIN
	SELECT @WK_MAX =  @WEEKS_NBR
	SELECT @ACT_WK_IDX = DATEPART(week, @startdate )
END
If @sum_level = 'm'
BEGIN	
	SELECT @WK_MAX =  @MONTHS_NBR
	SELECT @ACT_WK_IDX = DATEPART(month, @startdate )
END


INSERT INTO ##W_ASSIGNED_XREF (EMP_CODE, EMP_DESC) VALUES(@emp_code, dbo.udf_get_empl_name(@emp_code,'FML') )

SELECT @IDX_DATE = @startdate
SELECT @WK_IDX = @WK_MIN


CREATE TABLE #W_EMP_HRS_AVAIL (
	EMP_CODE	VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	DAYOFYEAR 	INT,
	WEEK		INT,
	MONTH		INT,
	HOURS		DECIMAL(9,3)
)

exec usp_wv_get_emp_avail_hrs @emp_code, @start_date, @end_date

WHILE @WK_IDX < @WK_MAX + 2
BEGIN
	If @sum_level = 'd'
		BEGIN
		  SELECT @ASSIGNED = ISNULL(ASSIGNED,0) FROM #W_EMP_ASSIGNED WHERE DAYOFYEAR = @ACT_WK_IDX
		  SELECT @HRS_AVAIL = ISNULL(HOURS,0) FROM #W_EMP_HRS_AVAIL WHERE DAYOFYEAR = @ACT_WK_IDX
		  SELECT @IDX_DATE = DATEADD( day, 1, @IDX_DATE ) 
		  SELECT @ACT_WK_IDX = DATEPART(dayofyear, @IDX_DATE )
		END

	If @sum_level = 'w'
		BEGIN
		  SELECT @ASSIGNED = ISNULL(SUM(ASSIGNED),0) FROM #W_EMP_ASSIGNED WHERE WEEK = @ACT_WK_IDX
		  SELECT @HRS_AVAIL = ISNULL(SUM(HOURS),0) FROM #W_EMP_HRS_AVAIL WHERE WEEK = @ACT_WK_IDX
		  SELECT @IDX_DATE = DATEADD( week, 1, @IDX_DATE ) 
		  SELECT @ACT_WK_IDX = DATEPART(week, @IDX_DATE )
		END

	If @sum_level = 'm'
		BEGIN
		  SELECT @ASSIGNED = ISNULL(SUM(ASSIGNED),0) FROM #W_EMP_ASSIGNED WHERE MONTH = @ACT_WK_IDX
		  SELECT @HRS_AVAIL = ISNULL(SUM(HOURS),0) FROM #W_EMP_HRS_AVAIL WHERE MONTH = @ACT_WK_IDX
		  SELECT @IDX_DATE = DATEADD( month, 1, @IDX_DATE ) 
		  SELECT @ACT_WK_IDX = DATEPART(month, @IDX_DATE )
		END


	SELECT @ASSIGNED_STR = CAST(@ASSIGNED AS VARCHAR(9))
	SELECT @WKNBR = CAST(@WK_IDX AS VARCHAR(3))

	SELECT @sql = N'UPDATE ##W_ASSIGNED_XREF SET col' + @WKNBR + ' = ' + @ASSIGNED_STR + ' WHERE EMP_CODE =  ''' + @emp_code + ''''
	EXEC sp_executesql @sql
	
	SELECT @HOURS_STR = CAST(@HRS_AVAIL AS VARCHAR(9))

	SELECT @sql = N'UPDATE ##W_ASSIGNED_XREF SET ass' + @WKNBR + ' = ' + @HOURS_STR + ' WHERE EMP_CODE =  ''' + @emp_code + ''''
	EXEC sp_executesql @sql

	SELECT @WK_IDX = @WK_IDX + 1
END


SELECT @HRS_AVAIL = SUM(ISNULL(HOURS,0)) FROM #W_EMP_HRS_AVAIL WHERE EMP_CODE = @emp_code


SELECT @OFFICE_CODE 	= OFFICE_CODE, 
	@DP_TM_CODE  	= dbo.udf_get_dept_name(DP_TM_CODE), 
	@DIRECT_HRS_PER = ISNULL(DIRECT_HRS_PER, 100), 
	@DIR_HRS_GOAL 	= (ISNULL(DIRECT_HRS_PER, 100) * .01) * @HRS_AVAIL
FROM EMPLOYEE 
WHERE EMP_CODE = @emp_code 
--GROUP BY OFFICE_CODE, EMP_CODE, DP_TM_CODE, DIRECT_HRS_PER

UPDATE ##W_ASSIGNED_XREF SET 
		OFFICE_CODE 	= @OFFICE_CODE,  
		DP_TM_CODE 	= @DP_TM_CODE, 
		DIRECT_HRS_PER 	= @DIRECT_HRS_PER, 
		HOURS_AVAIL 	= @HRS_AVAIL, 
		DIR_HRS_GOAL 	= @DIR_HRS_GOAL 
WHERE EMP_CODE = @emp_code 


--DROP TABLE W_EMP_TIME
--DROP TABLE W_ASSIGNED_TEMP
--DROP TABLE W_ASSIGNED_MATRIX
--DROP TABLE W_EMP_ASSIGNED
--DROP TABLE W_EMP_HRS_AVAIL

SET QUOTED_IDENTIFIER ON 
