IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[usp_wv_qva_summary_jobhistory]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[usp_wv_qva_summary_jobhistory]
GO

/*****************************************************************
Webvantage
******************************************************************/
CREATE PROCEDURE [dbo].[usp_wv_qva_summary_jobhistory] 
@UserID VarChar(100),
@JobNum Varchar(6),
@JobComp Varchar(6),
@Emps Varchar(2000),
@JobType Varchar(10),
@FromDate Varchar(12),
@ToDate Varchar(12),
@Client varchar(6),
@Division varchar(6),
@Product varchar(6),
@Closed int,
@jobs varchar(100),
@comps varchar(100),
@JobCount int

AS
Declare @Rescrictions Int,
		@RescrictionsEmp Int,
		@sql nvarchar(4000),
		@paramlist nvarchar(4000),
		@jc varchar(20), @Records int, @Count int, @Recordcomp int, @Countcomp int,
		@jNum int,
		@cNum int
--
--Set NoCount On
--
Select @Rescrictions = Count(*) 
FROM SEC_CLIENT
WHERE UPPER(USER_ID) = UPPER(@UserID)

Select @RescrictionsEmp = Count(*) 
FROM SEC_EMP
WHERE UPPER(USER_ID) = UPPER(@UserID)

CREATE TABLE #qva_rows( 	
	FNC_CODE				varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
	FNC_DESCRIPTION			varchar(30) NULL,
	FNC_TYPE      			varchar(1) NULL,
	Quoted_QtyHrs			decimal(15,2) NULL,
	Quoted_Amount  			decimal(15,2) NULL,
	Quoted_Markup			decimal(15,2) NULL,
	Quoted_Tax				decimal(15,2) NULL,	
	Quoted_Total			decimal(15,2) NULL,
	Actual_Hours			decimal(15,2) NULL,
	Actual_Amount			decimal(15,2) NULL,
	Actual_Markup			decimal(15,2) NULL,
	Actual_Tax				decimal(15,2) NULL,
	Actual_Total			decimal(15,2) NULL,
	Open_PO_Net_Amt			decimal(15,2) NULL,
	Billed_to_Date			decimal(15,2) NULL,
	Quote_vs_Actual_PO		decimal(15,2) NULL,
	Actual_PO_vs_Billed		decimal(15,2) NULL,
	Qva						decimal(15,2) NULL,
	Avb						decimal(15,2) NULL,
	Qva_PO					decimal(15,2) NULL,
	Avb_PO					decimal(15,2) NULL,
	NB_Actual_Total         decimal(15,2) NULL,
	Adv_Billed				decimal(15,2) NULL,
	PO_Total				decimal(15,2) NULL,
	PO_Applied				decimal(15,2) NULL,
	NB_Tax					decimal(15,2) NULL,
	NB_Markup				decimal(15,2) NULL,
	NB_Amount				decimal(15,2) NULL,
	APPROVED_AMT			decimal(15,2) NULL
			)

CREATE TABLE #jobs(
	RowID int IDENTITY(1, 1), 
	listpos int,
	job int)

CREATE TABLE #comps(
	RowID int IDENTITY(1, 1), 
	listpos int,
	comp int)

CREATE TABLE #job(
	RowID int IDENTITY(1, 1), 
	JobNo int,
	JobCompNo int)

CREATE TABLE #jobfunc(
	RowID int IDENTITY(1, 1), 
	JOB_NUMBER int,
	JOB_COMPONENT_NBR int,
	FNC_CODE varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL)

DECLARE @qva_quoted TABLE( 
		FNC_CODE				varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FNC_DESCRIPTION			varchar(30) NULL,
		FNC_TYPE      			varchar(1) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		Quoted_QtyHrs			decimal(15,2) NULL,
		Quoted_Amount  			decimal(15,2) NULL,
		Quoted_Markup			decimal(15,2) NULL,
		Quoted_Tax				decimal(15,2) NULL,	
		Quoted_Total			decimal(15,2) NULL)
	
DECLARE @qva_actual TABLE( 
		FNC_CODE				varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FNC_DESCRIPTION			varchar(30) NULL,
		FNC_TYPE      			varchar(1) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		Actual_Hours			decimal(15,2) NULL,
		Actual_Amount			decimal(15,2) NULL,
		Actual_Markup			decimal(15,2) NULL,
		Actual_Tax				decimal(15,2) NULL,
		Actual_Total			decimal(15,2) NULL)

DECLARE @qva_Billed TABLE( 
		FNC_CODE				varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FNC_DESCRIPTION			varchar(30) NULL,
		FNC_TYPE      			varchar(1) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		Open_PO_Net_Amt			decimal(15,2) NULL,
		Billed_to_Date			decimal(15,2) NULL)

DECLARE @qva_AdvBilled TABLE( 
		FNC_CODE				varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FNC_DESCRIPTION			varchar(30) NULL,
		FNC_TYPE      			varchar(1) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		Quote_vs_Actual_PO		decimal(15,2) NULL,
		Actual_PO_vs_Billed		decimal(15,2) NULL,
		Adv_Billed				decimal(15,2) NULL,		
		Qva						decimal(15,2) NULL,
		Avb						decimal(15,2) NULL,
		Qva_PO					decimal(15,2) NULL,
		Avb_PO					decimal(15,2) NULL,
		NB_Actual_Total			decimal(15,2) NULL)

DECLARE @qva_POtotal TABLE( 
		FNC_CODE				varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FNC_DESCRIPTION			varchar(30) NULL,
		FNC_TYPE      			varchar(1) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		PO_Total			    decimal(15,2) NULL)

DECLARE @qva_POapplied TABLE( 
		FNC_CODE				varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FNC_DESCRIPTION			varchar(30) NULL,
		FNC_TYPE      			varchar(1) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		PO_Applied		    	decimal(15,2) NULL)

DECLARE @qva_NB TABLE( 
		FNC_CODE				varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FNC_DESCRIPTION			varchar(30) NULL,
		FNC_TYPE      			varchar(1) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		NB_Tax					decimal(15,2) NULL,
		NB_Markup				decimal(15,2) NULL,
		NB_Amount				decimal(15,2) NULL)

DECLARE @APPROVED_AMT TABLE (
		FNC_CODE				varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		APPROVED_AMT			decimal(15,2) NULL)

INSERT INTO #jobs 
SELECT * FROM [dbo].[charlist_to_table] (
  @jobs,',')

INSERT INTO #comps 
SELECT * FROM [dbo].[charlist_to_table] (
  @comps,',')

SELECT @Records = COUNT(*) FROM #jobs
SET @Count = 1
SELECT @Recordcomp = COUNT(*) FROM #comps
SET @Countcomp = 1

WHILE @Count <= @Records
BEGIN

 SELECT @jNum = job
 FROM #jobs
 WHERE RowID = @Count 

 SELECT @cNum = comp
 FROM #comps
 WHERE RowID = @Countcomp 

 INSERT INTO #job
 VALUES(@jNum, @cNum)	

SET @Count = @Count + 1
SET @Countcomp = @Countcomp + 1
END

SELECT @Count = COUNT(*) FROM #job
--SELECT * FROM #job


--SELECT @sql = 'INSERT INTO #job
--SELECT     JOB_LOG.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR                      
--FROM         JOB_LOG INNER JOIN
--                      JOB_COMPONENT ON JOB_LOG.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER
--WHERE    	JOB_COMPONENT.JT_CODE = @JobType AND JOB_COMPONENT.JOB_COMP_DATE >= @FromDate AND JOB_COMPONENT.JOB_COMP_DATE <= @ToDate '
--
--	if @Client <> ''
--		Begin
--			SELECT @sql = @sql + ' AND JOB_LOG.CLIENT = @Client'
--		End
--	if @Division <> ''
--		Begin
--			SELECT @sql = @sql + ' AND JOB_LOG.DIVISION = @Division'
--		End
--	if @Product <> ''
--		Begin
--			SELECT @sql = @sql + ' AND JOB_LOG.PRODUCT = @Product'
--		End
--	if @Closed = 1
--		Begin
--			SELECT @sql = @sql + ' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6,12))'
--		End
--
--	SELECT @sql = @sql + ' ORDER BY JOB_LOG.JOB_NUMBER'
--
--SELECT @paramlist = '@Client varchar(6), @Division varchar(6), @Product varchar(6), @JobType varchar(10), @FromDate smalldatetime, @ToDate smalldatetime'
--print @sql
--EXEC sp_executesql @sql, @paramlist, @Client, @Division, @Product, @JobType, @FromDate, @ToDate

INSERT INTO #jobfunc
SELECT V_QUOTE_VS_ACTUAL.JOB_NUMBER,V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR, V_QUOTE_VS_ACTUAL.FNC_CODE 
FROM V_QUOTE_VS_ACTUAL INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR 

INSERT INTO @qva_quoted
	SELECT     #jobfunc.FNC_CODE, ISNULL(FUNCTIONS.FNC_DESCRIPTION,'') FNC_DESCRIPTION, FUNCTIONS.FNC_TYPE, 
                      ISNULL(SUM(ESTIMATE_REV_DET.EST_REV_QUANTITY), 0.00) / @JobCount  AS Quoted_QtyHrs, 
                      ISNULL(SUM(ESTIMATE_REV_DET.EST_REV_EXT_AMT), 0.00) / @JobCount AS Quoted_Amount, 
                      ISNULL(SUM(ESTIMATE_REV_DET.EXT_MARKUP_AMT), 0.00) / @JobCount AS Quoted_Markup, 
                      (ISNULL(SUM(ESTIMATE_REV_DET.EXT_CITY_RESALE), 0.00) + ISNULL(SUM(ESTIMATE_REV_DET.EXT_STATE_RESALE), 0.00)
                      + ISNULL(SUM(ESTIMATE_REV_DET.EXT_COUNTY_RESALE), 0.00) + ISNULL(SUM(ESTIMATE_REV_DET.EXT_NONRESALE_TAX), 0.00)) / @JobCount 
                      AS Quoted_Tax, 0.00 AS Quoted_Total	
FROM         FUNCTIONS INNER JOIN
                      #jobfunc ON FUNCTIONS.FNC_CODE = #jobfunc.FNC_CODE INNER JOIN
                      JOB_COMPONENT ON #jobfunc.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
                      #jobfunc.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
                      ESTIMATE_APPROVAL INNER JOIN
                      ESTIMATE_REV_DET ON ESTIMATE_APPROVAL.ESTIMATE_NUMBER = ESTIMATE_REV_DET.ESTIMATE_NUMBER AND 
                      ESTIMATE_APPROVAL.EST_COMPONENT_NBR = ESTIMATE_REV_DET.EST_COMPONENT_NBR AND 
                      ESTIMATE_APPROVAL.EST_QUOTE_NBR = ESTIMATE_REV_DET.EST_QUOTE_NBR AND 
                      ESTIMATE_APPROVAL.EST_REVISION_NBR = ESTIMATE_REV_DET.EST_REV_NBR ON 
                      #jobfunc.JOB_NUMBER = ESTIMATE_APPROVAL.JOB_NUMBER AND 
                      #jobfunc.JOB_COMPONENT_NBR = ESTIMATE_APPROVAL.JOB_COMPONENT_NBR AND 
                      #jobfunc.FNC_CODE = ESTIMATE_REV_DET.FNC_CODE
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR 
--WHERE CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job)
GROUP BY #jobfunc.FNC_CODE, FUNCTIONS.FNC_DESCRIPTION, FUNCTIONS.FNC_TYPE
ORDER BY FUNCTIONS.FNC_DESCRIPTION

INSERT INTO @qva_actual
	SELECT      #jobfunc.FNC_CODE, FUNCTIONS.FNC_DESCRIPTION, FUNCTIONS.FNC_TYPE, 
					  CASE WHEN FUNCTIONS.FNC_TYPE = 'E' THEN ISNULL(SUM(EMP_TIME_DTL.EMP_HOURS), 0.00) / @JobCount   
						   WHEN FUNCTIONS.FNC_TYPE = 'I' THEN ISNULL(SUM(INCOME_ONLY.IO_QTY), 0.00) / @JobCount 
					       WHEN FUNCTIONS.FNC_TYPE = 'V' THEN ISNULL(SUM(AP_PRODUCTION.AP_PROD_QUANTITY), 0.00) / @JobCount 
					       WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS Actual_hours,
					  CASE WHEN FUNCTIONS.FNC_TYPE = 'E' THEN ISNULL(SUM(EMP_TIME_DTL.TOTAL_BILL), 0.00) / @JobCount  
						   WHEN FUNCTIONS.FNC_TYPE = 'I' THEN ISNULL(SUM(INCOME_ONLY.IO_AMOUNT), 0.00) / @JobCount 
					       WHEN FUNCTIONS.FNC_TYPE = 'V' THEN ISNULL(SUM(AP_PRODUCTION.AP_PROD_EXT_AMT), 0.00) / @JobCount 
					       WHEN FUNCTIONS.FNC_TYPE = 'C' THEN ISNULL(SUM(CLIENT_OOP.AMOUNT), 0.00) / @JobCount END AS Actual_Amount,
					  CASE WHEN FUNCTIONS.FNC_TYPE = 'E' THEN ISNULL(SUM(EMP_TIME_DTL.EXT_MARKUP_AMT), 0.00) / @JobCount  
						   WHEN FUNCTIONS.FNC_TYPE = 'I' THEN ISNULL(SUM(INCOME_ONLY.EXT_MARKUP_AMT), 0.00) / @JobCount 
					       WHEN FUNCTIONS.FNC_TYPE = 'V' THEN ISNULL(SUM(AP_PRODUCTION.EXT_MARKUP_AMT), 0.00) / @JobCount 
					       WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS Actual_Markup,
					  CASE WHEN FUNCTIONS.FNC_TYPE = 'E' THEN (ISNULL(SUM(EMP_TIME_DTL.EXT_CITY_RESALE), 0.00) + ISNULL(SUM(EMP_TIME_DTL.EXT_STATE_RESALE), 0.00) + ISNULL(SUM(EMP_TIME_DTL.EXT_COUNTY_RESALE), 0.00) ) / @JobCount 
						   WHEN FUNCTIONS.FNC_TYPE = 'I' THEN (ISNULL(SUM(INCOME_ONLY.EXT_CITY_RESALE), 0.00) + ISNULL(SUM(INCOME_ONLY.EXT_STATE_RESALE), 0.00) + ISNULL(SUM(INCOME_ONLY.EXT_COUNTY_RESALE), 0.00)) / @JobCount   
					       WHEN FUNCTIONS.FNC_TYPE = 'V' THEN (ISNULL(SUM(AP_PRODUCTION.EXT_CITY_RESALE), 0.00) + ISNULL(SUM(AP_PRODUCTION.EXT_STATE_RESALE), 0.00) + ISNULL(SUM(AP_PRODUCTION.EXT_COUNTY_RESALE), 0.00) + ISNULL(SUM(AP_PRODUCTION.EXT_NONRESALE_TAX), 0.00)) / @JobCount
					       WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS Actual_Tax, 0.00 AS Actual_Total
FROM         dbo.FUNCTIONS INNER JOIN
                      dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
                      dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
                      dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
                      dbo.EMP_TIME_DTL ON dbo.JOB_COMPONENT.JOB_NUMBER = dbo.EMP_TIME_DTL.JOB_NUMBER AND 
                      dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.EMP_TIME_DTL.JOB_COMPONENT_NBR AND 
                      dbo.#jobfunc.FNC_CODE = dbo.EMP_TIME_DTL.FNC_CODE AND (EMP_TIME_DTL.EDIT_FLAG <> 1 OR EMP_TIME_DTL.EDIT_FLAG IS NULL) LEFT OUTER JOIN
                      dbo.INCOME_ONLY ON dbo.JOB_COMPONENT.JOB_NUMBER = dbo.INCOME_ONLY.JOB_NUMBER AND 
                      dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.INCOME_ONLY.JOB_COMPONENT_NBR AND 
                      dbo.#jobfunc.FNC_CODE = dbo.INCOME_ONLY.FNC_CODE LEFT OUTER JOIN
                      dbo.AP_PRODUCTION ON dbo.JOB_COMPONENT.JOB_NUMBER = dbo.AP_PRODUCTION.JOB_NUMBER AND 
                      dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.AP_PRODUCTION.JOB_COMPONENT_NBR AND 
                      dbo.#jobfunc.FNC_CODE = dbo.AP_PRODUCTION.FNC_CODE LEFT OUTER JOIN
                      dbo.CLIENT_OOP ON dbo.JOB_COMPONENT.JOB_NUMBER = dbo.CLIENT_OOP.JOB_NUMBER AND 
                      dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.CLIENT_OOP.JOB_COMPONENT_NBR AND 
                      dbo.#jobfunc.FNC_CODE = dbo.CLIENT_OOP.FNC_CODE
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR 
--WHERE CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job)
--WHERE (JOB_COMPONENT.JT_CODE = @JobType) AND (JOB_COMPONENT.JOB_COMP_DATE >= @FromDate) AND (JOB_COMPONENT.JOB_COMP_DATE <= @ToDate)    
GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE
ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION

INSERT INTO @qva_Billed
	SELECT     dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE, 0.00,
                      CASE WHEN FUNCTIONS.FNC_TYPE = 'E' THEN ISNULL(SUM(EMP_TIME_DTL.LINE_TOTAL), 0.00) / @JobCount 
                      WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS Billed_to_Date
	FROM         dbo.FUNCTIONS INNER JOIN
						  dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
						  dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
						  dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
						  dbo.EMP_TIME_DTL ON dbo.#jobfunc.FNC_CODE = dbo.EMP_TIME_DTL.FNC_CODE AND 
						  dbo.JOB_COMPONENT.JOB_NUMBER = dbo.EMP_TIME_DTL.JOB_NUMBER AND 
						  dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.EMP_TIME_DTL.JOB_COMPONENT_NBR
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR 
	WHERE (dbo.EMP_TIME_DTL.AR_INV_NBR IS NOT NULL OR dbo.EMP_TIME_DTL.AB_FLAG = 3) AND (EMP_TIME_DTL.EDIT_FLAG <> 1 OR EMP_TIME_DTL.EDIT_FLAG IS NULL) --AND CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job)
	GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE                     
	ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION

INSERT INTO @qva_Billed
	SELECT     dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE, 0.00,
						  CASE WHEN FUNCTIONS.FNC_TYPE = 'I' THEN ISNULL(SUM(INCOME_ONLY.LINE_TOTAL), 0.00) / @JobCount 
						  WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS Billed_to_Date
	FROM         dbo.FUNCTIONS INNER JOIN
						  dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
						  dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
						  dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
						  dbo.INCOME_ONLY ON dbo.#jobfunc.FNC_CODE = dbo.INCOME_ONLY.FNC_CODE AND 
						  dbo.JOB_COMPONENT.JOB_NUMBER = dbo.INCOME_ONLY.JOB_NUMBER AND 
						  dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.INCOME_ONLY.JOB_COMPONENT_NBR
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR 
	WHERE (dbo.INCOME_ONLY.AR_INV_NBR IS NOT NULL OR dbo.INCOME_ONLY.AB_FLAG = 3) --AND CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job) 
	GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE                     
	ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION

INSERT INTO @qva_Billed
	SELECT     dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE, 0.00,
						  CASE WHEN FUNCTIONS.FNC_TYPE = 'V' THEN ISNULL(SUM(AP_PRODUCTION.LINE_TOTAL), 0.00) / @JobCount 
						  WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS Billed_to_Date
	FROM         dbo.FUNCTIONS INNER JOIN
						  dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
						  dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
						  dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
						  dbo.AP_PRODUCTION ON dbo.#jobfunc.FNC_CODE = dbo.AP_PRODUCTION.FNC_CODE AND 
						  dbo.JOB_COMPONENT.JOB_NUMBER = dbo.AP_PRODUCTION.JOB_NUMBER AND 
						  dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.AP_PRODUCTION.JOB_COMPONENT_NBR
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR 
	WHERE (dbo.AP_PRODUCTION.AR_INV_NBR IS NOT NULL OR dbo.AP_PRODUCTION.AB_FLAG = 3) --AND CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job)
	GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE                     
	ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION

INSERT INTO @qva_AdvBilled
	SELECT     dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE,0.00,0.00,
                      ISNULL(SUM(ADVANCE_BILLING.LINE_TOTAL), 0.00) / @JobCount AS Adv_Billed, 0.00,0.00,0.00,0.00,0.00
	FROM         dbo.FUNCTIONS INNER JOIN
						  dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
						  dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
						  dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
						  dbo.ADVANCE_BILLING ON dbo.#jobfunc.FNC_CODE = dbo.ADVANCE_BILLING.FNC_CODE AND 
						  dbo.JOB_COMPONENT.JOB_NUMBER = dbo.ADVANCE_BILLING.JOB_NUMBER AND 
						  dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.ADVANCE_BILLING.JOB_COMPONENT_NBR
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR 
	WHERE (dbo.ADVANCE_BILLING.AR_INV_NBR IS NOT NULL OR dbo.ADVANCE_BILLING.AB_FLAG = 3) --AND CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job) 
	GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE                     
	ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION

INSERT INTO @qva_POtotal
	SELECT     dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE, 
                      CASE WHEN FUNCTIONS.FNC_TYPE = 'V' THEN ISNULL(SUM(dbo.PURCHASE_ORDER_DET.PO_EXT_AMOUNT), 0.00) / @JobCount
						ELSE 0.00 END AS PO_Total
	FROM         dbo.FUNCTIONS INNER JOIN
						  dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
						  dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
						  dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						  dbo.PURCHASE_ORDER_DET ON dbo.JOB_COMPONENT.JOB_NUMBER = dbo.PURCHASE_ORDER_DET.JOB_NUMBER AND 
						  dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.PURCHASE_ORDER_DET.JOB_COMPONENT_NBR AND 
						  dbo.#jobfunc.FNC_CODE = dbo.PURCHASE_ORDER_DET.FNC_CODE INNER JOIN
						  dbo.PURCHASE_ORDER ON dbo.PURCHASE_ORDER_DET.PO_NUMBER = dbo.PURCHASE_ORDER.PO_NUMBER
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR
	WHERE (PURCHASE_ORDER_DET.PO_COMPLETE IS NULL OR PURCHASE_ORDER_DET.PO_COMPLETE = 0) AND (PURCHASE_ORDER.VOID_FLAG IS NULL OR PURCHASE_ORDER.VOID_FLAG = 0) --AND CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job)
	GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE                      
	ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION

INSERT INTO @qva_POapplied
	SELECT     dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE, 
                      CASE WHEN FUNCTIONS.FNC_TYPE = 'V' THEN ISNULL(SUM(dbo.AP_PRODUCTION.AP_PROD_EXT_AMT), 0.00) / @JobCount
						ELSE 0.00 END AS PO_Applied
	FROM         dbo.FUNCTIONS INNER JOIN
						  dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
						  dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
						  dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						  dbo.PURCHASE_ORDER_DET ON dbo.JOB_COMPONENT.JOB_NUMBER = dbo.PURCHASE_ORDER_DET.JOB_NUMBER AND 
						  dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.PURCHASE_ORDER_DET.JOB_COMPONENT_NBR AND 
						  dbo.#jobfunc.FNC_CODE = dbo.PURCHASE_ORDER_DET.FNC_CODE INNER JOIN
						  dbo.AP_PRODUCTION ON dbo.PURCHASE_ORDER_DET.PO_NUMBER = dbo.AP_PRODUCTION.PO_NUMBER AND 
						  dbo.PURCHASE_ORDER_DET.LINE_NUMBER = dbo.AP_PRODUCTION.PO_LINE_NUMBER
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR
	WHERE (PURCHASE_ORDER_DET.PO_COMPLETE = 0 OR PURCHASE_ORDER_DET.PO_COMPLETE IS NULL) AND
				(AP_PRODUCTION.DELETE_FLAG IS NULL OR AP_PRODUCTION.DELETE_FLAG = 0) --AND CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job)
	GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE
	ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION

INSERT INTO @qva_NB
	SELECT     dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE, 
                      CASE WHEN FUNCTIONS.FNC_TYPE = 'E' THEN (ISNULL(SUM(EMP_TIME_DTL.EXT_CITY_RESALE), 0.00) + ISNULL(SUM(EMP_TIME_DTL.EXT_STATE_RESALE), 0.00) + ISNULL(SUM(EMP_TIME_DTL.EXT_COUNTY_RESALE), 0.00)) / @JobCount
                      WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS NB_Tax,
					  CASE WHEN FUNCTIONS.FNC_TYPE = 'E' THEN ISNULL(SUM(EMP_TIME_DTL.EXT_MARKUP_AMT), 0.00) / @JobCount
                      WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS NB_Markup,	
					  CASE WHEN FUNCTIONS.FNC_TYPE = 'E' THEN ISNULL(SUM(EMP_TIME_DTL.TOTAL_BILL), 0.00) / @JobCount
                      WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS NB_Amount	
	FROM         dbo.FUNCTIONS INNER JOIN
						  dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
						  dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
						  dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
						  dbo.EMP_TIME_DTL ON dbo.#jobfunc.FNC_CODE = dbo.EMP_TIME_DTL.FNC_CODE AND 
						  dbo.JOB_COMPONENT.JOB_NUMBER = dbo.EMP_TIME_DTL.JOB_NUMBER AND 
						  dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.EMP_TIME_DTL.JOB_COMPONENT_NBR 
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR
	WHERE (dbo.EMP_TIME_DTL.EMP_NON_BILL_FLAG = 1) --AND CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job) 
	GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE                     
	ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION
INSERT INTO @qva_NB
	SELECT     dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE, 
						  CASE WHEN FUNCTIONS.FNC_TYPE = 'I' THEN (ISNULL(SUM(INCOME_ONLY.EXT_CITY_RESALE), 0.00) + ISNULL(SUM(INCOME_ONLY.EXT_STATE_RESALE), 0.00) + ISNULL(SUM(INCOME_ONLY.EXT_COUNTY_RESALE), 0.00)) / @JobCount 
						  WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS NB_Tax,
						  CASE WHEN FUNCTIONS.FNC_TYPE = 'I' THEN ISNULL(SUM(INCOME_ONLY.EXT_MARKUP_AMT), 0.00) / @JobCount
						  WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS NB_Markup,	
						  CASE WHEN FUNCTIONS.FNC_TYPE = 'I' THEN ISNULL(SUM(INCOME_ONLY.IO_AMOUNT), 0.00) / @JobCount
						  WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS NB_Amount
	FROM         dbo.FUNCTIONS INNER JOIN
						  dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
						  dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
						  dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
						  dbo.INCOME_ONLY ON dbo.#jobfunc.FNC_CODE = dbo.INCOME_ONLY.FNC_CODE AND 
						  dbo.JOB_COMPONENT.JOB_NUMBER = dbo.INCOME_ONLY.JOB_NUMBER AND 
						  dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.INCOME_ONLY.JOB_COMPONENT_NBR 
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR
	WHERE (dbo.INCOME_ONLY.NON_BILL_FLAG = 1) --AND CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job)  
	GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE                     
	ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION
INSERT INTO @qva_NB
	SELECT     dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE, 
						  CASE WHEN FUNCTIONS.FNC_TYPE = 'V' THEN (ISNULL(SUM(AP_PRODUCTION.EXT_CITY_RESALE), 0.00) + ISNULL(SUM(AP_PRODUCTION.EXT_STATE_RESALE), 0.00) + ISNULL(SUM(AP_PRODUCTION.EXT_COUNTY_RESALE), 0.00)) / @JobCount
						  WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS NB_Tax,
						  CASE WHEN FUNCTIONS.FNC_TYPE = 'V' THEN ISNULL(SUM(AP_PRODUCTION.EXT_MARKUP_AMT), 0.00) / @JobCount
						  WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS NB_Markup,
						  CASE WHEN FUNCTIONS.FNC_TYPE = 'V' THEN ISNULL(SUM(AP_PRODUCTION.AP_PROD_EXT_AMT), 0.00) / @JobCount
						  WHEN FUNCTIONS.FNC_TYPE = 'C' THEN 0.00 END AS NB_Amount
	FROM         dbo.FUNCTIONS INNER JOIN
						  dbo.#jobfunc ON dbo.FUNCTIONS.FNC_CODE = dbo.#jobfunc.FNC_CODE INNER JOIN
						  dbo.JOB_COMPONENT ON dbo.#jobfunc.JOB_NUMBER = dbo.JOB_COMPONENT.JOB_NUMBER AND 
						  dbo.#jobfunc.JOB_COMPONENT_NBR = dbo.JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
						  dbo.AP_PRODUCTION ON dbo.#jobfunc.FNC_CODE = dbo.AP_PRODUCTION.FNC_CODE AND 
						  dbo.JOB_COMPONENT.JOB_NUMBER = dbo.AP_PRODUCTION.JOB_NUMBER AND 
						  dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = dbo.AP_PRODUCTION.JOB_COMPONENT_NBR
					  --INNER JOIN #job ON #job.JobNo = V_QUOTE_VS_ACTUAL.JOB_NUMBER AND #job.JobCompNo = V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR 
	WHERE (dbo.AP_PRODUCTION.AP_PROD_NOBILL_FLG = 1) --AND CAST(V_QUOTE_VS_ACTUAL.JOB_NUMBER AS VARCHAR(12)) + '-' + CAST(V_QUOTE_VS_ACTUAL.JOB_COMPONENT_NBR AS VARCHAR(6)) IN (SELECT CAST(#job.JobNo AS VARCHAR(12)) + '-' + CAST(#job.JobCompNo AS VARCHAR(6)) FROM #job) 
	GROUP BY dbo.#jobfunc.FNC_CODE, dbo.FUNCTIONS.FNC_DESCRIPTION, dbo.FUNCTIONS.FNC_TYPE                     
	ORDER BY dbo.FUNCTIONS.FNC_DESCRIPTION

INSERT INTO #qva_rows
	SELECT qq.FNC_CODE, qq.FNC_DESCRIPTION, qq.FNC_TYPE, ISNULL(qq.Quoted_QtyHrs,0.00), ISNULL(qq.Quoted_Amount,0.00),
		   ISNULL(qq.Quoted_Markup,0.00), ISNULL(qq.Quoted_Tax,0.00), 0.00 AS Quoted_Total,
		   ISNULL(qa.Actual_Hours,0.00), ISNULL(qa.Actual_Amount,0.00), ISNULL(qa.Actual_Markup,0.00), ISNULL(qa.Actual_Tax,0.00), 0.00 AS Actual_Total,
		   0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00  ,0
	FROM @qva_quoted qq INNER JOIN @qva_actual qa ON qq.FNC_CODE = qa.FNC_CODE AND qq.FNC_TYPE = qa.FNC_TYPE

UPDATE #qva_rows
SET Open_PO_Net_Amt = ISNULL(qb.Open_PO_Net_Amt,0.00),
	Billed_to_Date = ISNULL(qb.Billed_to_Date,0.00)
FROM #qva_rows qv, @qva_Billed qb
WHERE qv.FNC_CODE = qb.FNC_CODE

UPDATE #qva_rows
SET Quote_vs_Actual_PO = ISNULL(qab.Quote_vs_Actual_PO,0.00),
	Actual_PO_vs_Billed = ISNULL(qab.Actual_PO_vs_Billed,0.00),
	Qva = ISNULL(qab.Qva,0.00),
	Avb = ISNULL(qab.Avb,0.00),
	Qva_PO = ISNULL(qab.Qva_PO,0.00),
	Avb_PO = ISNULL(qab.Avb_PO,0.00),
	NB_Actual_Total = ISNULL(qab.NB_Actual_Total,0.00),
	Adv_Billed = ISNULL(qab.Adv_Billed,0.00)
FROM #qva_rows qv, @qva_AdvBilled qab
WHERE qv.FNC_CODE = qab.FNC_CODE

UPDATE #qva_rows
SET PO_Total = ISNULL(qpt.PO_Total,0.00)
FROM #qva_rows qv, @qva_POtotal qpt
WHERE qv.FNC_CODE = qpt.FNC_CODE

UPDATE #qva_rows
SET PO_Applied = ISNULL(qpa.PO_Applied,0.00)
FROM #qva_rows qv, @qva_POapplied qpa
WHERE qv.FNC_CODE = qpa.FNC_CODE

UPDATE #qva_rows
SET NB_Tax = ISNULL(qn.NB_Tax,0.00),  
	NB_Markup = ISNULL(qn.NB_Markup,0.00),
	NB_Amount = ISNULL(qn.NB_Amount,0.00)
FROM #qva_rows qv, @qva_NB qn
WHERE qv.FNC_CODE = qn.FNC_CODE


INSERT INTO @APPROVED_AMT
SELECT BD.FNC_CODE, ISNULL(SUM(BD.APPROVED_AMT), 0)
FROM BILL_APPR_DTL BD, BILL_APPR_HDR BH
WHERE BH.JOB_NUMBER = @JobNum AND BH.JOB_COMPONENT_NBR = @JobComp
AND BH.JOB_NUMBER = BD.JOB_NUMBER
AND BH.JOB_COMPONENT_NBR = BD.JOB_COMPONENT_NBR
AND BH.BA_ID = BD.BA_ID
AND BH.AR_INV_NBR IS NULL
GROUP BY BD.FNC_CODE

UPDATE #qva_rows
SET APPROVED_AMT = AA.APPROVED_AMT
FROM @APPROVED_AMT AA
WHERE AA.FNC_CODE = #qva_rows.FNC_CODE


SELECT *,ISNULL((Actual_Hours/NULLIF(Quoted_QtyHrs,0))*100,0) as PERCENT_QUOTE from #qva_rows Order by FNC_TYPE, FNC_DESCRIPTION
DROP TABLE #qva_rows

