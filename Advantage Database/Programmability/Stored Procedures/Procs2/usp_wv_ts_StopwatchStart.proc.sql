SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[usp_wv_ts_StopwatchStart]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[usp_wv_ts_StopwatchStart]
GO
CREATE PROCEDURE [dbo].[usp_wv_ts_StopwatchStart] /*WITH ENCRYPTION*/
@EMP_CODE VARCHAR(6),
@ET_ID INT,
@ET_DTL_ID SMALLINT,
@USER_CODE VARCHAR(100),
@CREATE_DATE SMALLDATETIME
AS
/*=========== QUERY ===========*/
	DECLARE
		@CAN_EDIT SMALLINT,
		@LAST_STOPWATCH_ET_ID INT,
		@LAST_STOPWATCH_ET_DTL_ID SMALLINT,
		@LAST_STOPWATCH_START SMALLDATETIME,
		@MINUTES_RUNNING DECIMAL(7,2),
		@JOB_NUMBER INT,
		@JOB_COMPONENT_NBR SMALLINT,
		@RETURN_MESSAGE VARCHAR(500),
		@FNC_CODE VARCHAR(10),
		@EST_CHECK_CAN_MODIFY_TIME BIT,
		@EST_EXCEED_OPTION SMALLINT, -- 0 = YES (ALLOW, NO MESSAGE NEEDED), 1 = WARN (ALLOW BUT SHOW WARNING MESSAGE), 2 = NO  (DON'T ALLOW, SHOW MESSAGE)
		@SUM_ACTUAL DECIMAL(32,2),
		@SUM_APPROVED DECIMAL (32,2),
		@APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND BIT,
		@IS_OVER_ESTIMATE_AMOUNT BIT
		
	--CHECK FOR LAST EXISTING STOPWATCH
	SET @LAST_STOPWATCH_ET_ID = (SELECT TOP 1 ET_ID FROM EMP_TIME WHERE EMP_CODE = @EMP_CODE AND (NOT(STOP_WATCH_ET_DTL_ID IS NULL)) ORDER BY EMP_DATE DESC)
	SET @LAST_STOPWATCH_ET_ID = ISNULL(@LAST_STOPWATCH_ET_ID, 0);
	SET @CAN_EDIT = 1;	

	SET @EST_CHECK_CAN_MODIFY_TIME = 0;
	SET @EST_EXCEED_OPTION = 0;			

	SELECT 
		@JOB_NUMBER = JOB_NUMBER, 
		@JOB_COMPONENT_NBR = JOB_COMPONENT_NBR,
		@FNC_CODE = FNC_CODE
	FROM EMP_TIME_DTL WHERE ET_ID = @ET_ID AND ET_DTL_ID = @ET_DTL_ID;
		
	SET @JOB_NUMBER = ISNULL(@JOB_NUMBER, 0);
	SET @JOB_COMPONENT_NBR = ISNULL(@JOB_COMPONENT_NBR, 0);
	IF @LAST_STOPWATCH_ET_ID > 0
	BEGIN
	
		SELECT @LAST_STOPWATCH_ET_DTL_ID = STOP_WATCH_ET_DTL_ID, @LAST_STOPWATCH_START = STOP_WATCH_START_TIME 
		FROM EMP_TIME WITH(NOLOCK) WHERE ET_ID = @LAST_STOPWATCH_ET_ID;
		
		IF NOT @LAST_STOPWATCH_START IS NULL
		BEGIN
			SELECT @MINUTES_RUNNING = DATEDIFF(minute, @LAST_STOPWATCH_START,GETDATE());
		END
		
		SET @MINUTES_RUNNING = ISNULL(@MINUTES_RUNNING, 0.00);

		IF @MINUTES_RUNNING < (24.00 * 60.00) -- IF TIMER HAS BEEN RUNNING LESS THAN 24 HOURS, UPDATE TIME
		BEGIN

			DECLARE 
			@THIS_HOURS DECIMAL(7,2),		
			@TIME_TYPE VARCHAR(1),
			@STOPWATCH_STOP SMALLDATETIME

			SET @TIME_TYPE = 'D';
			SET @STOPWATCH_STOP = GETDATE()

			SET @THIS_HOURS = @MINUTES_RUNNING /60.00;

			IF @JOB_NUMBER > 0 AND @JOB_COMPONENT_NBR > 0
			BEGIN
							
				SELECT 
					@EST_CHECK_CAN_MODIFY_TIME = EST_CHECK_CAN_MODIFY_TIME,
					@EST_EXCEED_OPTION = EXCEED_OPTION,
					@RETURN_MESSAGE = DISPLAY_MSG,
					@APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND = APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND,
					@SUM_ACTUAL = SUM_ACTUAL,
					@SUM_APPROVED = SUM_APPROVED,
					@IS_OVER_ESTIMATE_AMOUNT = IS_OVER
				FROM 
					[dbo].[advtf_timesheet_approved_estimate_check] (@JOB_NUMBER, @JOB_COMPONENT_NBR, @THIS_HOURS, @FNC_CODE);
									
				IF @APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND = 1 -- BLOCK
				BEGIN
					SET @CAN_EDIT = 0;
				END
				ELSE
				BEGIN
					IF @EST_EXCEED_OPTION = 0
					BEGIN
						SET @CAN_EDIT = 1;
						SET @RETURN_MESSAGE = '';
					END
					ELSE
					BEGIN
						IF @IS_OVER_ESTIMATE_AMOUNT = 1
						BEGIN
							IF @EST_EXCEED_OPTION = 1 -- WARN
							BEGIN
								SET @CAN_EDIT = 1;
							END
							IF @EST_EXCEED_OPTION = 2 -- BLOCK
							BEGIN
								SET @CAN_EDIT = 0;
							END
						END
						ELSE
						BEGIN
							SET @CAN_EDIT = 1;
							SET @RETURN_MESSAGE = '';
						END
					END
				END

			END

			IF @CAN_EDIT = 1
			BEGIN
				EXEC usp_wv_ts_UpdateExistingTime @LAST_STOPWATCH_ET_ID,
													@LAST_STOPWATCH_ET_DTL_ID,
													@THIS_HOURS,
													@LAST_STOPWATCH_START,
													@STOPWATCH_STOP,
													@TIME_TYPE,
													@USER_CODE,
													@CREATE_DATE;
			END

		END
		
	END

	--DELETE ANY EXISTING
	UPDATE EMP_TIME WITH(ROWLOCK) 
	SET STOP_WATCH_START_TIME = NULL, STOP_WATCH_ET_DTL_ID = NULL
	WHERE EMP_CODE = @EMP_CODE;
	
	DECLARE @STARTED BIT;
	SET @STARTED = 0;

	IF @CAN_EDIT = 1
	BEGIN

		IF @JOB_NUMBER > 0 AND @JOB_COMPONENT_NBR > 0
		BEGIN
							
			SELECT 
				@EST_CHECK_CAN_MODIFY_TIME = EST_CHECK_CAN_MODIFY_TIME,
				@EST_EXCEED_OPTION = EXCEED_OPTION,
				@RETURN_MESSAGE = DISPLAY_MSG,
				@APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND = APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND,
				@SUM_ACTUAL = SUM_ACTUAL,
				@SUM_APPROVED = SUM_APPROVED,
				@IS_OVER_ESTIMATE_AMOUNT = IS_OVER
			FROM 
				[dbo].[advtf_timesheet_approved_estimate_check] (@JOB_NUMBER, @JOB_COMPONENT_NBR, 0, @FNC_CODE);
									
			IF @APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND = 1 -- BLOCK
			BEGIN
				SET @CAN_EDIT = 0;
			END
			ELSE
			BEGIN
				IF @EST_EXCEED_OPTION = 0 -- ALLOW
				BEGIN
					SET @CAN_EDIT = 1;
					SET @RETURN_MESSAGE = '';
				END
				ELSE
				BEGIN
					IF @IS_OVER_ESTIMATE_AMOUNT = 1
					BEGIN
						IF @EST_EXCEED_OPTION = 1 -- WARN
						BEGIN
							SET @CAN_EDIT = 1;
						END
						IF @EST_EXCEED_OPTION = 2 -- BLOCK
						BEGIN
							SET @CAN_EDIT = 0;
						END
					END
					ELSE
					BEGIN
						SET @CAN_EDIT = 1;
						SET @RETURN_MESSAGE = '';
					END
				END
			END
		END

		IF @CAN_EDIT = 1
		BEGIN
			----NEW
			UPDATE EMP_TIME WITH(ROWLOCK) 
			SET STOP_WATCH_START_TIME = @CREATE_DATE, STOP_WATCH_ET_DTL_ID = @ET_DTL_ID
			WHERE EMP_CODE = @EMP_CODE AND ET_ID = @ET_ID;
			SET @STARTED = 1;
		END

	END
	
	SELECT CAST(@CAN_EDIT AS VARCHAR) + '|' + ISNULL(@RETURN_MESSAGE, '') + '|' + CAST(@STARTED AS VARCHAR);

/*=========== QUERY ===========*/
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO	
