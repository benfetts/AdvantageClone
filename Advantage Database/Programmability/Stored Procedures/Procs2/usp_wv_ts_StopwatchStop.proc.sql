IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[usp_wv_ts_StopwatchStop]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[usp_wv_ts_StopwatchStop]
GO
CREATE PROCEDURE [dbo].[usp_wv_ts_StopwatchStop] /*WITH ENCRYPTION*/
@EMP_CODE VARCHAR(6),
@ET_ID INT,
@ET_DTL_ID SMALLINT,
@COMMENT TEXT,
@USER_CODE VARCHAR(100),
@CREATE_DATE SMALLDATETIME
AS
/*=========== QUERY ===========*/
	DECLARE
		@POST_PERIOD_CHECK INT,
		@POST_PERIOD INT,
		@LAST_STOPWATCH_START SMALLDATETIME,
		@MINUTES_RUNNING DECIMAL(7,2),
		@STOPWATCH_STOP SMALLDATETIME,
		@JOB_NUMBER INT,
		@JOB_COMPONENT_NBR SMALLINT,
		@EDIT_TYPE INT,
		@JOB_COMPONENT_PROC_CTRL SMALLINT,
		@TIME_TYPE VARCHAR(1),
		@SIMPLE_DATE SMALLDATETIME,
		@APPROVED_PENDING SMALLINT,
		@CAN_EDIT SMALLINT,
		@RETURN_MESSAGE VARCHAR(500),
		@FNC_CODE VARCHAR(10)
		
	SET @CAN_EDIT = 1;	
	SET @RETURN_MESSAGE = '';
		
	SET @STOPWATCH_STOP = @CREATE_DATE;
	SET @SIMPLE_DATE = CONVERT(VARCHAR(10),@STOPWATCH_STOP,120);
	
	-- CHECK POST PERIOD
	SELECT @POST_PERIOD_CHECK = TS_PPERIOD_CHK FROM AGENCY WITH(NOLOCK);
	SET @POST_PERIOD_CHECK = ISNULL(@POST_PERIOD_CHECK, 0)
	IF @POST_PERIOD_CHECK = 1
	BEGIN
		SELECT @POST_PERIOD = COUNT(*) 
		FROM POSTPERIOD WITH (NOLOCK)
		WHERE	PPSRTDATE <= @SIMPLE_DATE
		AND	PPENDDATE >= @SIMPLE_DATE
		AND (PPTECURMTH = 'C' OR PPTECURMTH IS NULL);
	END
	SET @POST_PERIOD = ISNULL(@POST_PERIOD, 0);
	
	IF @POST_PERIOD_CHECK = 1 AND @POST_PERIOD = 0
	BEGIN
		SET @CAN_EDIT = 0;
		SET @RETURN_MESSAGE = 'Post period is closed';
	END

	IF @CAN_EDIT = 1
	BEGIN
		-- CHECK FOR APPROVAL STATUS
		SELECT @APPROVED_PENDING = (ISNULL(APPR_FLAG, 0) + ISNULL(APPR_PENDING, 0))
		FROM EMP_TIME WITH (NOLOCK) 
		WHERE 
			EMP_CODE = @EMP_CODE 
			AND EMP_DATE = @SIMPLE_DATE;
		
		-- NOT ZERO IS EITHER APPROVED OR PENDING; DON'T CARE WHICH
		SET @APPROVED_PENDING = ISNULL(@APPROVED_PENDING, 0)	;
	
		IF @APPROVED_PENDING > 0
		BEGIN
			SET @CAN_EDIT = 0;
			SET @RETURN_MESSAGE = 'Day is Approved/Pending';
		END
	END
	
   --CHECK FOR LAST EXISTING STOPWATCH
	IF @ET_ID > 0 AND @ET_DTL_ID > 0 AND @CAN_EDIT = 1
	BEGIN

		--CHECK JOB
		SELECT 
			@JOB_NUMBER = JOB_NUMBER, 
			@JOB_COMPONENT_NBR = JOB_COMPONENT_NBR,
			@FNC_CODE = FNC_CODE
		FROM EMP_TIME_DTL WHERE ET_ID = @ET_ID AND ET_DTL_ID = @ET_DTL_ID;
		SET @JOB_NUMBER = ISNULL(@JOB_NUMBER, 0);
		SET @JOB_COMPONENT_NBR = ISNULL(@JOB_COMPONENT_NBR, 0);
		IF @JOB_NUMBER > 0 AND @JOB_COMPONENT_NBR > 0
		BEGIN
			SET @TIME_TYPE = 'D';
			SELECT @JOB_COMPONENT_PROC_CTRL = JOB_PROCESS_CONTRL FROM JOB_COMPONENT WITH(NOLOCK) WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
			IF @JOB_COMPONENT_PROC_CTRL IN (2,3,5,6,9,10,12,13)
			BEGIN
				SET @CAN_EDIT = 0;
				SET @RETURN_MESSAGE = 'Cannot edit due to Job Processing Control';
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT 1 FROM EMP_TIME_NP WHERE ET_ID = @ET_ID AND ET_DTL_ID = @ET_DTL_ID)
			BEGIN
				SET @TIME_TYPE = 'N';
				SET @RETURN_MESSAGE = '';
			END
			ELSE
			BEGIN
				SET @TIME_TYPE = NULL;
				SET @RETURN_MESSAGE = '';
				SET @CAN_EDIT = 0;
			END
		END
	
		IF @CAN_EDIT = 1
		BEGIN
			--GET EDIT FLAG
			DECLARE @TEMP_VAR TABLE (EDIT_FLAG INT)
			INSERT INTO @TEMP_VAR
			EXEC [dbo].[usp_wv_ts_Check_Edit_Status] @ET_ID, @ET_DTL_ID
			SELECT @EDIT_TYPE = ISNULL(EDIT_FLAG, 0) FROM @TEMP_VAR;
	
			-- CHECK
			IF @APPROVED_PENDING > 0 AND @EDIT_TYPE <> 7
			BEGIN
				SET @CAN_EDIT = 0;
				SET @RETURN_MESSAGE = 'Cannot edit due to Approval Status';
			END	
		END

		IF @CAN_EDIT = 1 AND (@EDIT_TYPE <> 0 AND @EDIT_TYPE <> 7)
		BEGIN

			SET @CAN_EDIT = 0;

		END
	
		IF @CAN_EDIT = 1
		BEGIN
		
			SELECT @LAST_STOPWATCH_START = STOP_WATCH_START_TIME 
			FROM EMP_TIME WITH(NOLOCK) WHERE ET_ID = @ET_ID;
			
			IF NOT @LAST_STOPWATCH_START IS NULL
			BEGIN
				SELECT @MINUTES_RUNNING = DATEDIFF(minute, @LAST_STOPWATCH_START, @STOPWATCH_STOP);
			END
			
			SET @MINUTES_RUNNING = ISNULL(@MINUTES_RUNNING, 0.00);

			IF @MINUTES_RUNNING <= (24.00 * 60.00)  -- IF TIMER HAS BEEN RUNNING LESS THAN 24 HOURS, UPDATE TIME
			BEGIN

				DECLARE @THIS_HOURS DECIMAL(7,2)

				SET @THIS_HOURS = @MINUTES_RUNNING / 60.00;

				SELECT @THIS_HOURS = dbo.wvfn_ts_minimum_time_entry (@THIS_HOURS, 0);
				SELECT @THIS_HOURS = dbo.wvfn_ts_round_up_time_entry (@THIS_HOURS, 0);

				IF @JOB_NUMBER > 0 AND @JOB_COMPONENT_NBR > 0 AND @THIS_HOURS <> 0
				BEGIN
					DECLARE 
						@EST_CHECK_CAN_MODIFY_TIME BIT,
						@EST_EXCEED_OPTION SMALLINT, -- 0 = YES (ALLOW, NO MESSAGE NEEDED), 1 = WARN (ALLOW BUT SHOW WARNING MESSAGE), 2 = NO  (DON'T ALLOW, SHOW MESSAGE)
						@SUM_ACTUAL DECIMAL(32,2),
						@SUM_APPROVED DECIMAL (32,2),
						@APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND BIT,
						@IS_OVER_ESTIMATE_AMOUNT BIT

					SET @EST_CHECK_CAN_MODIFY_TIME = 0;
					SET @EST_EXCEED_OPTION = 0;			
							
					SELECT 
						@EST_CHECK_CAN_MODIFY_TIME = EST_CHECK_CAN_MODIFY_TIME,
						@EST_EXCEED_OPTION = EXCEED_OPTION,
						@RETURN_MESSAGE = DISPLAY_MSG,
						@APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND = APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND,
						@SUM_ACTUAL = SUM_ACTUAL,
						@SUM_APPROVED = SUM_APPROVED,
						@IS_OVER_ESTIMATE_AMOUNT = IS_OVER
					FROM 
						[dbo].[advtf_timesheet_approved_estimate_check] (@JOB_NUMBER, @JOB_COMPONENT_NBR, @THIS_HOURS, @FNC_CODE);
									
					IF @APPROVED_ESTIMATE_REQUIRED_BUT_NOT_FOUND = 1 -- BLOCK
					BEGIN
						SET @CAN_EDIT = 0;
					END
					ELSE
					BEGIN
						IF @IS_OVER_ESTIMATE_AMOUNT = 1
						BEGIN
							IF @EST_EXCEED_OPTION = 1 -- WARN
							BEGIN
								SET @CAN_EDIT = 1;
							END
							IF @EST_EXCEED_OPTION = 2 -- BLOCK
							BEGIN
								SET @CAN_EDIT = 0;
							END
						END
						ELSE
						BEGIN
							SET @CAN_EDIT = 1;
							SET @RETURN_MESSAGE = '';
						END
					END

				END

				IF @CAN_EDIT = 1
				BEGIN
					EXEC usp_wv_ts_UpdateExistingTime @ET_ID,
													  @ET_DTL_ID,
													  @THIS_HOURS,
													  @LAST_STOPWATCH_START,
													  @STOPWATCH_STOP,
													  @TIME_TYPE,
													  @USER_CODE,
													  @CREATE_DATE;
				END

			END

			IF NOT @COMMENT IS NULL
			BEGIN

				IF EXISTS (SELECT ET_ID FROM EMP_TIME_DTL_CMTS WITH(NOLOCK) WHERE ET_ID = @ET_ID AND ET_DTL_ID = @ET_DTL_ID AND ET_SOURCE = @TIME_TYPE)
				BEGIN 

					UPDATE EMP_TIME_DTL_CMTS WITH(ROWLOCK) SET EMP_COMMENT = @COMMENT WHERE ET_ID = @ET_ID AND ET_DTL_ID = @ET_DTL_ID AND ET_SOURCE = @TIME_TYPE;

				END
				ELSE
				BEGIN

					INSERT INTO EMP_TIME_DTL_CMTS (ET_ID, ET_DTL_ID, SEQ_NBR, ET_SOURCE, EMP_COMMENT) VALUES (@ET_ID, @ET_DTL_ID, @ET_DTL_ID, @TIME_TYPE, @COMMENT);

				END

			END
			
		END
		
	END
	
	--DELETE ANY EXISTING
	UPDATE EMP_TIME WITH(ROWLOCK) 
	SET STOP_WATCH_START_TIME = NULL, STOP_WATCH_ET_DTL_ID = NULL
	WHERE EMP_CODE = @EMP_CODE;
	
	--EXEC [dbo].[usp_wv_ts_DeleteZeroHours] @EMP_CODE, @STOPWATCH_STOP;

	--RETURN HOURS AND MESSAGE
	IF NOT @TIME_TYPE IS NULL
	BEGIN
		IF @TIME_TYPE = 'D'
		BEGIN
			SELECT ISNULL(EMP_HOURS, 0.00) AS EMP_HOURS, @CAN_EDIT AS CAN_EDIT, @RETURN_MESSAGE AS RETURN_MESSAGE 
			FROM EMP_TIME_DTL WITH(NOLOCK) WHERE ET_ID = @ET_ID AND ET_DTL_ID = @ET_DTL_ID;
		END
		IF @TIME_TYPE = 'N'
		BEGIN
			SELECT ISNULL(EMP_HOURS, 0.00) AS EMP_HOURS, @CAN_EDIT AS CAN_EDIT, @RETURN_MESSAGE AS RETURN_MESSAGE 
			FROM EMP_TIME_NP WITH(NOLOCK) WHERE ET_ID = @ET_ID AND ET_DTL_ID = @ET_DTL_ID;
		END
	END
	ELSE
	BEGIN
		SELECT CAST(0.00 AS DECIMAL(7,2)) AS EMP_HOURS, CAST(1 AS SMALLINT) AS CAN_EDIT, '' AS RETURN_MESSAGE
	END
/*=========== QUERY ===========*/
