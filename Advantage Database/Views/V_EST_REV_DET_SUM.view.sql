

CREATE VIEW dbo.V_EST_REV_DET_SUM ( ESTIMATE_NUMBER, EST_COMPONENT_NBR,   		EST_QUOTE_NBR, EST_REV_NBR, FNC_CODE, FNC_DESCRIPTION, FNC_TYPE,   		EST_REV_EXT_AMT, EST_REV_COMM_PCT, EST_REV_CONT_PCT, TAX_CITY_PCT,   		TAX_STATE_PCT, TAX_COUNTY_PCT, TAX_COMM, TAX_COMM_ONLY, TAX_CODE,   		TAX_RESALE, EXT_CITY_CONT, EXT_CITY_RESALE, EXT_CONTINGENCY,   		EXT_COUNTY_CONT, EXT_COUNTY_RESALE, EXT_MARKUP_AMT, EXT_MU_CONT,   		EXT_NONRESALE_TAX, EXT_NR_CONT, EXT_STATE_CONT, EXT_STATE_RESALE,   		LINE_TOTAL, LINE_TOTAL_CONT, SUMMARIZED, TAXES )   	AS  	 SELECT ESTIMATE_NUMBER, EST_COMPONENT_NBR, EST_QUOTE_NBR, EST_REV_NBR,   		A.FNC_CODE, FNC_DESCRIPTION, FNC_TYPE,   		SUM( COALESCE( EST_REV_EXT_AMT, 0 )),   		NULL, NULL, NULL, NULL, NULL, MAX( A.TAX_COMM ),   		MAX( A.TAX_COMM_ONLY ), NULL, NULL, 0.00, 0.00,   		SUM( COALESCE( EXT_CONTINGENCY, 0 )), 0.00, 0.00,   		SUM( COALESCE( EXT_MARKUP_AMT, 0 )),   		SUM( COALESCE( EXT_MU_CONT, 0 )), 0.00, 0.00, 0.00, 0.00,   		SUM( COALESCE( EST_REV_EXT_AMT, 0 ) + COALESCE( EXT_MARKUP_AMT, 0 )),   		SUM( COALESCE( EXT_CONTINGENCY, 0 ) + COALESCE( EXT_MU_CONT, 0 )),  		1,  		CASE  		  WHEN ( MAX( TAX_CODE ) IS NOT NULL ) THEN 1  		  ELSE 0  		END  	   FROM ESTIMATE_REV_DET A, FUNCTIONS B   	  WHERE A.FNC_CODE = B.FNC_CODE   	    AND FNC_TYPE NOT IN ( 'F', 'C' )         GROUP BY ESTIMATE_NUMBER, EST_COMPONENT_NBR, EST_QUOTE_NBR, EST_REV_NBR,   		A.FNC_CODE, FNC_DESCRIPTION, FNC_TYPE           HAVING COUNT( * ) > 1  UNION ALL  	 SELECT ESTIMATE_NUMBER, EST_COMPONENT_NBR, EST_QUOTE_NBR, EST_REV_NBR, C.FNC_CODE,   		FNC_DESCRIPTION, FNC_TYPE, EST_REV_EXT_AMT, EST_REV_COMM_PCT, EST_REV_CONT_PCT,   		TAX_CITY_PCT, TAX_STATE_PCT, TAX_COUNTY_PCT, C.TAX_COMM, C.TAX_COMM_ONLY,   		TAX_CODE, TAX_RESALE, EXT_CITY_CONT, EXT_CITY_RESALE, EXT_CONTINGENCY,   		EXT_COUNTY_CONT, EXT_COUNTY_RESALE, EXT_MARKUP_AMT, EXT_MU_CONT,   		EXT_NONRESALE_TAX, EXT_NR_CONT, EXT_STATE_CONT, EXT_STATE_RESALE,   		LINE_TOTAL, LINE_TOTAL_CONT, 0, 0  	   FROM ESTIMATE_REV_DET C, FUNCTIONS D   	  WHERE C.FNC_CODE = D.FNC_CODE   		AND D.FNC_TYPE NOT IN ( 'F', 'C' )  		AND NOT EXISTS ( SELECT *  				   FROM ESTIMATE_REV_DET erd   				  WHERE C.ESTIMATE_NUMBER = erd.ESTIMATE_NUMBER  				    AND C.EST_COMPONENT_NBR = erd.EST_COMPONENT_NBR  				    AND C.EST_QUOTE_NBR = erd.EST_QUOTE_NBR  				    AND C.EST_REV_NBR = erd.EST_REV_NBR  				    AND C.FNC_CODE = erd.FNC_CODE   			       GROUP BY erd.FNC_CODE  				 HAVING COUNT( * ) > 1 )

