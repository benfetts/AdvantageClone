Namespace Controller.Media

    Public Class MediaBroadcastWorksheetController
        Inherits AdvantageFramework.Controller.BaseController

#Region " Constants "



#End Region

#Region " Enum "

        Public Enum MarketGoalsCPPColumns
            ID
            DataTableID
        End Enum

        Public Enum MarketGoalsColumns
            ID
            WorksheetMarketGoalID
            Daypart
            Length
            GRP
            CPP
            Budget
            Percentage
            WasRateImported
        End Enum

        Public Enum MarketDetailsColumns
            ID
            WorksheetMarketDetailID
            DaysAndTime
            OnHold
            LineNumber
            MakegoodNumber
            MakegoodDate
            MakegoodSpots
            MadegoodNumber
            RevisionNumber
            VendorCode
            VendorName
            VendorRadioStationComboID
            VendorNCCTVSyscodeID
            VendorNielsenTVStationCode
            VendorIsCableSystem
            VendorIsComboRadioStation
            CableNetworkStationCode
            CableNetworkNielsenTVStationCode
            Daypart
            Product
            Piggyback
            Length
            Days
            StartTime
            EndTime
            BookProgram
            Program
            Comments
            Bookend
            ValueAdded
            DefaultRate
            OrderStatus
            OrderComments
            OverridePost
            OverridePostImpressions
            OverridePostAQH
            RowSource
            TotalSpots
            TotalDollars
            TotalNet
            BookPrimaryRating
            PrimaryRating
            BookPrimaryShare
            PrimaryShare
            PrimaryHPUT
            PrimaryCPP
            PrimaryGRP
            PrimaryReach
            PrimaryFrequency
            BookPrimaryImpressions
            PrimaryImpressions
            PrimaryGrossImpressions
            PrimaryUniverse
            PrimaryCumeImpressions
            BookPrimaryAQHRating
            PrimaryAQHRating
            BookPrimaryAQH
            PrimaryAQH
            PrimaryCumeRating
            PrimaryCume
            PrimaryCPM
            PrimaryVendorSubmittedRating
            PrimaryVendorSubmittedShare
            PrimaryVendorSubmittedImpressions
            BookSecondaryRating
            SecondaryRating
            BookSecondaryShare
            SecondaryShare
            SecondaryHPUT
            SecondaryCPP
            SecondaryGRP
            SecondaryReach
            SecondaryFrequency
            BookSecondaryImpressions
            SecondaryImpressions
            SecondaryGrossImpressions
            SecondaryUniverse
            SecondaryCumeImpressions
            BookSecondaryAQHRating
            SecondaryAQHRating
            BookSecondaryAQH
            SecondaryAQH
            SecondaryCumeRating
            SecondaryCume
            SecondaryCPM
            SecondaryVendorSubmittedRating
            SecondaryVendorSubmittedShare
            SecondaryVendorSubmittedImpressions
        End Enum

        Public Enum MarketDetails_RowTotalColumns
            ID
            RowTotalsGroup
            RowTotalsDescription
        End Enum

        Public Enum MarketDetails_RowTotalRows
            TotalSpots
            TotalRatings
            TotalImpressions
            TotalDollars
            TotalReach
            TotalFrequency
            GoalRatings
            GoalDollars
            VarianceRatings
            VarianceDollars
            VarianceRatingsPercent
            VarianceDollarsPercent
        End Enum

        Public Enum MarketDetails_MeasurementTrendsColumns
            ID
            BookID
            HPUTBookID
            NeilsenRadioPeriodID1
            NeilsenRadioPeriodID2
            NeilsenRadioPeriodID3
            NeilsenRadioPeriodID4
            NeilsenRadioPeriodID5
            BookProgram
            Program
            BookRating
            Rating
            BookShare
            Share
            HUTPUT
            BookImpressions
            Impressions
            BookAQHRating
            AQHRating
            BookAQH
            AQH
            CumeRating
            Cume
        End Enum

        Public Enum MarketDetails_DaypartSummaryColumns
            ID
            Daypart
            Spots
            Cost
            CostPercentageOfTotal
            GRP
            CPP
            GIMP
            PercentOfTotalGIMP
            CPM
            Budget
            GoalGRP
            PercentOfBudget
            PercentOfGRP
            Reach
            Frequency
        End Enum

        Public Enum MarketDetails_DaypartWeeklyDailySummaryColumns
            ID
            Daypart
            Totals
        End Enum

        Public Enum MarketDetails_DaypartGRPWeeklyDailySummaryColumns
            ID
            Daypart
            Totals
        End Enum

        Public Enum MarketDetails_StationSummaryColumns
            ID
            Station
            Spots
            Cost
            CostPercentageOfTotal
            GRP
            CPP
            GIMP
            CPM
            Reach
            Frequency
        End Enum

        Public Enum MarketDetails_LengthSummaryColumns
            ID
            Length
            Spots
            Cost
            CostPercentageOfTotal
            GRP
            CPP
            GIMP
            CPM
        End Enum

        Public Enum MarketDetails_DaypartLengthSummaryColumns
            ID
            Daypart
            Length
            Spots
            Cost
            CostPercentageOfTotal
            GRP
            CPP
            GIMP
            CPM
            Reach
            Frequency
        End Enum

        Public Enum MarketDetails_StationMonthlySummaryColumns
            ID
            Station
            DataType
            Totals
        End Enum

#End Region

#Region " Variables "



#End Region

#Region " Properties "



#End Region

#Region " Methods "

#Region "  Override Validate DTO "

        Public Overrides Sub FinalizeEntityPropertyValidation(DbContext As AdvantageFramework.BaseClasses.DbContext, DataContext As AdvantageFramework.BaseClasses.DataContext,
                                                              ByRef DTO As AdvantageFramework.DTO.BaseClass, PropertyName As String, ByRef IsValid As Boolean, ByRef Value As Object, ByRef ErrorText As String, IsEntityKey As Boolean,
                                                              IsNullable As Boolean, IsRequired As Boolean, MaxLength As Integer, Precision As Long, Scale As Long, PropertyType As AdvantageFramework.BaseClasses.PropertyTypes)

            If TypeOf DTO Is AdvantageFramework.DTO.DaysAndTime Then

                If PropertyName = AdvantageFramework.DTO.DaysAndTime.Properties.StartTime.ToString Then

                    If IsValid = False AndAlso String.IsNullOrWhiteSpace(Value) Then

                        IsValid = True
                        ErrorText = String.Empty

                    End If

                ElseIf PropertyName = AdvantageFramework.DTO.DaysAndTime.Properties.EndTime.ToString Then

                    If IsValid = False AndAlso String.IsNullOrWhiteSpace(Value) Then

                        IsValid = True
                        ErrorText = String.Empty

                    End If

                End If

            End If

        End Sub
        Public Overrides Function ValidateCustomProperties(DbContext As AdvantageFramework.BaseClasses.DbContext, DataContext As AdvantageFramework.BaseClasses.DataContext, ByRef DTO As AdvantageFramework.DTO.BaseClass, PropertyName As String, ByRef IsValid As Boolean, ByRef Value As Object) As String

            'objects
            Dim ErrorText As String = ""
            Dim DaysAndTimeController As AdvantageFramework.Controller.DaysAndTimeController = Nothing
            Dim WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket = Nothing
            Dim PropertyValue As Object = Nothing

            If TypeOf DTO Is AdvantageFramework.DTO.DaysAndTime Then

                DaysAndTimeController = New AdvantageFramework.Controller.DaysAndTimeController(Me.Session)

                ErrorText = DaysAndTimeController.ValidateCustomProperties(DbContext, DataContext, DTO, PropertyName, IsValid, Value)

            ElseIf TypeOf DTO Is AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket Then

                WorksheetMarket = DTO

                Select Case PropertyName

                    Case AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket.Properties.PeriodStart.ToString

                        PropertyValue = Value

                        If PropertyValue IsNot Nothing AndAlso WorksheetMarket.PeriodEnd.HasValue Then

                            If DirectCast(PropertyValue, Date) > WorksheetMarket.PeriodEnd.Value Then

                                IsValid = False

                                ErrorText = "The period start is greater than the period end."

                            ElseIf (From Entity In DbContext.GetQuery(Of Database.Entities.NPRUniverse)
                                    Where Entity.Date >= DirectCast(PropertyValue, Date) AndAlso
                                          Entity.Date <= WorksheetMarket.PeriodEnd.Value
                                    Select Entity).Count <> DateDiff(DateInterval.Day, DirectCast(PropertyValue, Date), WorksheetMarket.PeriodEnd.Value) + 1 Then

                                IsValid = False

                                ErrorText = "More than one universe record is missing for the period date range specified."

                            End If

                        End If

                    Case AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket.Properties.PeriodEnd.ToString

                        PropertyValue = Value

                        If PropertyValue IsNot Nothing AndAlso WorksheetMarket.PeriodStart.HasValue Then

                            If WorksheetMarket.PeriodStart.Value > DirectCast(PropertyValue, Date) Then

                                IsValid = False

                                ErrorText = "The period start is greater than the period end."

                            ElseIf (From Entity In DbContext.GetQuery(Of Database.Entities.NPRUniverse)
                                    Where Entity.Date >= WorksheetMarket.PeriodStart.Value AndAlso
                                          Entity.Date <= DirectCast(PropertyValue, Date)
                                    Select Entity).Count <> DateDiff(DateInterval.Day, WorksheetMarket.PeriodStart.Value, DirectCast(PropertyValue, Date)) + 1 Then

                                IsValid = False

                                ErrorText = "More than one universe record is missing for the period date range specified."

                            End If

                        End If

                End Select

            Else

                ErrorText = MyBase.ValidateCustomProperties(DbContext, DataContext, DTO, PropertyName, IsValid, Value)

            End If

            ValidateCustomProperties = ErrorText

        End Function
        Public Overrides Sub SetRequiredFields(ByRef DTO As AdvantageFramework.DTO.BaseClass)

            'objects
            Dim PropertyDescriptors As Generic.List(Of System.ComponentModel.PropertyDescriptor) = Nothing
            Dim WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket = Nothing

            If DTO.GetType Is GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket) Then

                WorksheetMarket = DTO

                PropertyDescriptors = System.ComponentModel.TypeDescriptor.GetProperties(DTO).OfType(Of System.ComponentModel.PropertyDescriptor)().ToList

                For Each PropertyDescriptor In PropertyDescriptors

                    Select Case PropertyDescriptor.Name

                        Case AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket.Properties.PeriodStart.ToString

                            DTO.SetRequired(PropertyDescriptor, WorksheetMarket.PeriodStart.HasValue OrElse WorksheetMarket.PeriodEnd.HasValue)

                        Case AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket.Properties.PeriodEnd.ToString

                            DTO.SetRequired(PropertyDescriptor, WorksheetMarket.PeriodStart.HasValue OrElse WorksheetMarket.PeriodEnd.HasValue)

                    End Select

                Next

            End If

        End Sub

#End Region

#Region " Public "

        Public Sub New(Session As AdvantageFramework.Security.Session)

            MyBase.New(Session)

        End Sub
        Public Function GetWorksheetDates(Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet, UseOldCalendarDateCreation As Boolean) As Generic.List(Of Date)

            GetWorksheetDates = GetWorksheetDates(Worksheet.MediaBroadcastWorksheetDateTypeID, Worksheet.MediaCalendarTypeID, Worksheet.StartDate, Worksheet.EndDate, UseOldCalendarDateCreation)

        End Function
        Private Function GetNextDate(Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet, [Date] As Date, UseOldCalendarDateCreation As Boolean) As Date

            GetNextDate = GetNextDate(Worksheet.MediaBroadcastWorksheetDateTypeID, Worksheet.MediaCalendarTypeID, [Date], UseOldCalendarDateCreation)

        End Function
        Private Function GetWorksheetDates(MediaBroadcastWorksheetDateTypeID As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes, MediaCalendarTypeID As AdvantageFramework.DTO.Media.CalendarTypes,
                                           StartDate As Date, EndDate As Date, UseOldCalendarDateCreation As Boolean) As Generic.List(Of Date)

            'objects
            Dim [Date] As Date = Date.MinValue
            Dim Dates As Generic.List(Of Date) = Nothing

            Dates = New Generic.List(Of Date)

            If MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                [Date] = StartDate

                'If MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast Then

                '	Do Until [Date].DayOfWeek = DayOfWeek.Monday

                '		[Date] = [Date].AddDays(-1)

                '	Loop

                'Else

                '	Do Until [Date].DayOfWeek = DayOfWeek.Sunday

                '		[Date] = [Date].AddDays(-1)

                '	Loop

                'End If

            Else

                [Date] = StartDate

            End If

            Do While True

                If [Date] > EndDate Then

                    Exit Do

                Else

                    Dates.Add([Date])

                End If

                [Date] = GetNextDate(MediaBroadcastWorksheetDateTypeID, MediaCalendarTypeID, [Date], UseOldCalendarDateCreation)

            Loop

            GetWorksheetDates = Dates

        End Function
        Private Function GetNextDate(MediaBroadcastWorksheetDateTypeID As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes, MediaCalendarTypeID As AdvantageFramework.DTO.Media.CalendarTypes,
                                     [Date] As Date, UseOldCalendarDateCreation As Boolean) As Date

            'objects
            Dim NextDate As Date = Date.MinValue

            If MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Daily Then

                NextDate = [Date].AddDays(1)

            ElseIf MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                NextDate = [Date].AddDays(1)

                If UseOldCalendarDateCreation Then

                    If MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast Then

                        Do Until NextDate.DayOfWeek = DayOfWeek.Monday

                            NextDate = NextDate.AddDays(1)

                        Loop

                    Else

                        Do Until NextDate.DayOfWeek = DayOfWeek.Sunday

                            NextDate = NextDate.AddDays(1)

                        Loop

                    End If

                Else

                    Do Until NextDate.DayOfWeek = DayOfWeek.Monday

                        NextDate = NextDate.AddDays(1)

                    Loop

                End If

            End If

            GetNextDate = NextDate

        End Function
        Private Function GetWeekDate(MediaCalendarTypeID As AdvantageFramework.DTO.Media.CalendarTypes, [Date] As Date) As Date

            'objects
            Dim WeekDate As Date = Date.MinValue

            WeekDate = New Date([Date].Year, [Date].Month, [Date].Day)

            If MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast Then

                Do Until WeekDate.DayOfWeek = DayOfWeek.Monday

                    WeekDate = WeekDate.AddDays(-1)

                Loop

            Else

                Do Until WeekDate.DayOfWeek = DayOfWeek.Sunday

                    WeekDate = WeekDate.AddDays(-1)

                Loop

            End If

            GetWeekDate = WeekDate

        End Function
        Private Function GetWorksheetDatesForOrder(DbContext As AdvantageFramework.Database.DbContext, BroadcastCalendarWeeks As Generic.List(Of AdvantageFramework.Classes.Media.BroadcastCalendarWeek),
                                                   Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet,
                                                   WorksheetDates As Generic.List(Of Date), StartDate As Date, EndDate As Date, CreateOrdersByWeek As Boolean) As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate)

            'objects
            Dim WorksheetMarketOrderDates As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate) = Nothing
            Dim WorksheetMarketOrderDate As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate = Nothing
            Dim [Date] As Date = Date.MinValue
            Dim OrderDate As Date = Date.MinValue
            Dim BroadcastCalendarWeek As AdvantageFramework.Classes.Media.BroadcastCalendarWeek = Nothing
            Dim WorksheetMarketOrderDateData As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDateData = Nothing
            Dim OrderMonths As Generic.List(Of Date) = Nothing
            Dim OrderWeeks As Generic.List(Of Date) = Nothing
            Dim [WeekDate] As Date = Date.MinValue
            Dim MonthDate As Date = Date.MinValue

            WorksheetMarketOrderDates = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate)

            If Worksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                If CreateOrdersByWeek = True Then

                    If Worksheet.UseOldCalendarDateCreation = False OrElse Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast Then

                        OrderWeeks = New Generic.List(Of Date)

                        For Each [Date] In WorksheetDates.Where(Function(Entity) Entity.Date >= StartDate AndAlso Entity.Date <= EndDate).ToList

                            BroadcastCalendarWeek = BroadcastCalendarWeeks.Where(Function(Entity) Entity.WeekDate <= [Date]).OrderByDescending(Function(Entity) Entity.WeekDate).FirstOrDefault

                            If BroadcastCalendarWeek IsNot Nothing Then

                                If OrderWeeks.Contains(BroadcastCalendarWeek.WeekDate) = False Then

                                    OrderWeeks.Add(BroadcastCalendarWeek.WeekDate)

                                End If

                            End If

                        Next

                        For Each [Date] In WorksheetDates.ToList

                            BroadcastCalendarWeek = BroadcastCalendarWeeks.Where(Function(Entity) Entity.WeekDate <= [Date]).OrderByDescending(Function(Entity) Entity.WeekDate).FirstOrDefault

                            If BroadcastCalendarWeek IsNot Nothing AndAlso OrderWeeks.Contains(BroadcastCalendarWeek.WeekDate) Then

                                WorksheetMarketOrderDateData = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDateData

                                WorksheetMarketOrderDateData.Date = [Date]
                                WorksheetMarketOrderDateData.Month = BroadcastCalendarWeek.Month
                                WorksheetMarketOrderDateData.Year = BroadcastCalendarWeek.Year
                                WorksheetMarketOrderDateData.Week = BroadcastCalendarWeek.Week

                                OrderDate = BroadcastCalendarWeek.WeekDate

                                If OrderDate < StartDate Then

                                    OrderDate = StartDate

                                End If

                                If WorksheetMarketOrderDates.Any(Function(Entity) Entity.StartDate = OrderDate) = False Then

                                    WorksheetMarketOrderDate = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate

                                    WorksheetMarketOrderDate.StartDate = OrderDate

                                    If WorksheetMarketOrderDate.StartDate < StartDate Then

                                        WorksheetMarketOrderDate.StartDate = StartDate

                                    End If

                                    WorksheetMarketOrderDate.EndDate = OrderDate

                                    Do Until WorksheetMarketOrderDate.EndDate.DayOfWeek = DayOfWeek.Sunday

                                        WorksheetMarketOrderDate.EndDate = WorksheetMarketOrderDate.EndDate.AddDays(1)

                                    Loop

                                    If WorksheetMarketOrderDate.EndDate > EndDate Then

                                        WorksheetMarketOrderDate.EndDate = EndDate

                                    End If

                                    WorksheetMarketOrderDate.Month = BroadcastCalendarWeek.Month
                                    WorksheetMarketOrderDate.Year = BroadcastCalendarWeek.Year
                                    ' WorksheetMarketOrderDate.MonthWeeks = GetWeeksForMonth(StartDate, BroadcastCalendarWeek.Year, BroadcastCalendarWeek.Month, False, BroadcastCalendarWeeks)
                                    WorksheetMarketOrderDate.MonthWeeks = New Generic.List(Of Integer)({BroadcastCalendarWeek.Week})

                                    WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Add(WorksheetMarketOrderDateData)

                                    WorksheetMarketOrderDates.Add(WorksheetMarketOrderDate)

                                Else

                                    WorksheetMarketOrderDates.FirstOrDefault(Function(Entity) Entity.StartDate = OrderDate).WorksheetMarketOrderDateDatas.Add(WorksheetMarketOrderDateData)

                                End If

                            End If

                        Next

                    Else

                        OrderWeeks = New Generic.List(Of Date)

                        For Each [Date] In WorksheetDates.Where(Function(Entity) Entity.Date >= StartDate AndAlso Entity.Date <= EndDate).ToList

                            WeekDate = [Date]

                            Do Until WeekDate.DayOfWeek = DayOfWeek.Sunday

                                WeekDate = WeekDate.AddDays(-1)

                            Loop

                            If OrderWeeks.Contains(WeekDate) = False Then

                                OrderWeeks.Add(WeekDate)

                            End If

                        Next

                        For Each [Date] In WorksheetDates.ToList

                            WeekDate = [Date]

                            Do Until WeekDate.DayOfWeek = DayOfWeek.Sunday

                                WeekDate = WeekDate.AddDays(-1)

                            Loop

                            If OrderWeeks.Contains(WeekDate) Then

                                WorksheetMarketOrderDateData = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDateData

                                WorksheetMarketOrderDateData.Date = [Date]
                                WorksheetMarketOrderDateData.Month = [Date].Month
                                WorksheetMarketOrderDateData.Year = [Date].Year
                                WorksheetMarketOrderDateData.Week = CInt(System.Globalization.DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear([Date], System.Globalization.CalendarWeekRule.FirstFullWeek, DayOfWeek.Sunday))

                                OrderDate = WeekDate

                                If OrderDate < StartDate Then

                                    OrderDate = StartDate

                                End If

                                If WorksheetMarketOrderDates.Any(Function(Entity) Entity.StartDate = OrderDate) = False Then

                                    WorksheetMarketOrderDate = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate

                                    WorksheetMarketOrderDate.StartDate = OrderDate

                                    If WorksheetMarketOrderDate.StartDate < StartDate Then

                                        WorksheetMarketOrderDate.StartDate = StartDate

                                    End If

                                    WorksheetMarketOrderDate.EndDate = OrderDate

                                    Do Until WorksheetMarketOrderDate.EndDate.DayOfWeek = DayOfWeek.Saturday

                                        WorksheetMarketOrderDate.EndDate = WorksheetMarketOrderDate.EndDate.AddDays(1)

                                    Loop

                                    If WorksheetMarketOrderDate.EndDate > EndDate Then

                                        WorksheetMarketOrderDate.EndDate = EndDate

                                    End If

                                    WorksheetMarketOrderDate.Month = OrderDate.Month
                                    WorksheetMarketOrderDate.Year = OrderDate.Year
                                    WorksheetMarketOrderDate.MonthWeeks = New Generic.List(Of Integer)({CInt(System.Globalization.DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear(StartDate, System.Globalization.CalendarWeekRule.FirstFullWeek, DayOfWeek.Sunday))})

                                    WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Add(WorksheetMarketOrderDateData)

                                    WorksheetMarketOrderDates.Add(WorksheetMarketOrderDate)

                                Else

                                    WorksheetMarketOrderDates.FirstOrDefault(Function(Entity) Entity.StartDate = OrderDate).WorksheetMarketOrderDateDatas.Add(WorksheetMarketOrderDateData)

                                End If

                            End If

                        Next

                    End If

                Else

                    If Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast Then

                        OrderMonths = New Generic.List(Of Date)

                        For Each [Date] In WorksheetDates.Where(Function(Entity) Entity.Date >= StartDate AndAlso Entity.Date <= EndDate).ToList

                            BroadcastCalendarWeek = BroadcastCalendarWeeks.Where(Function(Entity) Entity.WeekDate <= [Date]).OrderByDescending(Function(Entity) Entity.WeekDate).FirstOrDefault

                            If BroadcastCalendarWeek IsNot Nothing Then

                                MonthDate = (From BCW In BroadcastCalendarWeeks
                                             Where BCW.Month = BroadcastCalendarWeek.Month AndAlso
                                                   BCW.Year = BroadcastCalendarWeek.Year
                                             Select [BCWDate] = BCW.WeekDate).Min

                                If OrderMonths.Contains(MonthDate) = False Then

                                    OrderMonths.Add(MonthDate)

                                End If

                            End If

                        Next

                        For Each [Date] In WorksheetDates.ToList

                            BroadcastCalendarWeek = BroadcastCalendarWeeks.Where(Function(Entity) Entity.WeekDate <= [Date]).OrderByDescending(Function(Entity) Entity.WeekDate).FirstOrDefault

                            MonthDate = (From BCW In BroadcastCalendarWeeks
                                         Where BCW.Month = BroadcastCalendarWeek.Month AndAlso
                                               BCW.Year = BroadcastCalendarWeek.Year
                                         Select [BCWDate] = BCW.WeekDate).Min

                            If BroadcastCalendarWeek IsNot Nothing AndAlso OrderMonths.Contains(MonthDate) Then

                                WorksheetMarketOrderDateData = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDateData

                                WorksheetMarketOrderDateData.Date = [Date]
                                WorksheetMarketOrderDateData.Month = BroadcastCalendarWeek.Month
                                WorksheetMarketOrderDateData.Year = BroadcastCalendarWeek.Year
                                WorksheetMarketOrderDateData.Week = BroadcastCalendarWeek.Week

                                OrderDate = MonthDate

                                If OrderDate < StartDate Then

                                    OrderDate = StartDate

                                End If

                                If WorksheetMarketOrderDates.Any(Function(Entity) Entity.StartDate = OrderDate) = False Then

                                    WorksheetMarketOrderDate = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate

                                    WorksheetMarketOrderDate.StartDate = OrderDate

                                    If WorksheetMarketOrderDate.StartDate < StartDate Then

                                        WorksheetMarketOrderDate.StartDate = StartDate

                                    End If

                                    WorksheetMarketOrderDate.EndDate = (From BCW In BroadcastCalendarWeeks
                                                                        Where BCW.Month = BroadcastCalendarWeek.Month AndAlso
                                                                              BCW.Year = BroadcastCalendarWeek.Year
                                                                        Select [BCWDate] = BCW.WeekDate).Max.AddDays(6)

                                    If WorksheetMarketOrderDate.EndDate > EndDate Then

                                        WorksheetMarketOrderDate.EndDate = EndDate

                                    End If

                                    WorksheetMarketOrderDate.Month = BroadcastCalendarWeek.Month
                                    WorksheetMarketOrderDate.Year = BroadcastCalendarWeek.Year
                                    WorksheetMarketOrderDate.MonthWeeks = GetWeeksForMonth(StartDate, BroadcastCalendarWeek.Year, BroadcastCalendarWeek.Month, False, BroadcastCalendarWeeks)

                                    WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Add(WorksheetMarketOrderDateData)

                                    WorksheetMarketOrderDates.Add(WorksheetMarketOrderDate)

                                Else

                                    WorksheetMarketOrderDates.FirstOrDefault(Function(Entity) Entity.StartDate = OrderDate).WorksheetMarketOrderDateDatas.Add(WorksheetMarketOrderDateData)

                                End If

                            End If

                        Next

                    Else

                        OrderMonths = New Generic.List(Of Date)

                        For Each [Date] In WorksheetDates.Where(Function(Entity) Entity.Date >= StartDate AndAlso Entity.Date <= EndDate).ToList

                            MonthDate = New Date([Date].Year, [Date].Month, 1)

                            If OrderMonths.Contains(MonthDate) = False Then

                                OrderMonths.Add(MonthDate)

                            End If

                        Next

                        For Each [Date] In WorksheetDates.ToList

                            MonthDate = New Date([Date].Year, [Date].Month, 1)

                            If OrderMonths.Contains(MonthDate) Then

                                WorksheetMarketOrderDateData = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDateData

                                WorksheetMarketOrderDateData.Date = [Date]
                                WorksheetMarketOrderDateData.Month = [Date].Month
                                WorksheetMarketOrderDateData.Year = [Date].Year
                                WorksheetMarketOrderDateData.Week = CInt(System.Globalization.DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear([Date], System.Globalization.CalendarWeekRule.FirstFullWeek, DayOfWeek.Sunday))

                                OrderDate = MonthDate

                                If OrderDate < StartDate Then

                                    OrderDate = StartDate

                                End If

                                If WorksheetMarketOrderDates.Any(Function(Entity) Entity.StartDate = OrderDate) = False Then

                                    WorksheetMarketOrderDate = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate

                                    WorksheetMarketOrderDate.StartDate = OrderDate

                                    If WorksheetMarketOrderDate.StartDate < StartDate Then

                                        WorksheetMarketOrderDate.StartDate = StartDate

                                    End If

                                    WorksheetMarketOrderDate.EndDate = New Date(OrderDate.Year, OrderDate.Month, Date.DaysInMonth(OrderDate.Year, OrderDate.Month))

                                    If WorksheetMarketOrderDate.EndDate > EndDate Then

                                        WorksheetMarketOrderDate.EndDate = EndDate

                                    End If

                                    WorksheetMarketOrderDate.Month = OrderDate.Month
                                    WorksheetMarketOrderDate.Year = OrderDate.Year
                                    WorksheetMarketOrderDate.MonthWeeks = GetWeeksForMonth(StartDate, OrderDate.Year, OrderDate.Month, True, BroadcastCalendarWeeks)

                                    If OrderDate.DayOfWeek = DayOfWeek.Sunday AndAlso Worksheet.UseOldCalendarDateCreation = False Then

                                        WorksheetMarketOrderDate.MonthWeeks.Insert(0, WorksheetMarketOrderDate.MonthWeeks(0) - 1)

                                        If OrderDate.Day = 1 AndAlso OrderDate = StartDate Then

                                            WorksheetMarketOrderDateData.Week = WorksheetMarketOrderDateData.Week - 1

                                        End If

                                    End If

                                    WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Add(WorksheetMarketOrderDateData)

                                    WorksheetMarketOrderDates.Add(WorksheetMarketOrderDate)

                                Else

                                    WorksheetMarketOrderDates.FirstOrDefault(Function(Entity) Entity.StartDate = OrderDate).WorksheetMarketOrderDateDatas.Add(WorksheetMarketOrderDateData)

                                End If

                            End If

                        Next

                    End If

                End If

            Else

                For Each [Date] In WorksheetDates.Where(Function(Entity) Entity.Date >= StartDate AndAlso Entity.Date <= EndDate).ToList

                    WorksheetMarketOrderDateData = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDateData

                    WorksheetMarketOrderDateData.Date = [Date]
                    WorksheetMarketOrderDateData.Month = [Date].Month
                    WorksheetMarketOrderDateData.Year = [Date].Year
                    WorksheetMarketOrderDateData.Week = 1

                    WorksheetMarketOrderDate = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate

                    WorksheetMarketOrderDate.StartDate = [Date]
                    WorksheetMarketOrderDate.EndDate = [Date]
                    WorksheetMarketOrderDate.Month = [Date].Month
                    WorksheetMarketOrderDate.Year = [Date].Year

                    WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Add(WorksheetMarketOrderDateData)

                    WorksheetMarketOrderDates.Add(WorksheetMarketOrderDate)

                Next

            End If

            GetWorksheetDatesForOrder = WorksheetMarketOrderDates

        End Function
        Private Function GetWeeksForMonth(WorksheetStartDate As Date, Year As Integer, Month As Integer,
                                          IsCalendarMonth As Boolean, BroadcastCalendarWeeks As Generic.List(Of AdvantageFramework.Classes.Media.BroadcastCalendarWeek)) As Generic.List(Of Integer)

            'objects
            Dim Week As Integer = 0
            Dim Weeks As Generic.List(Of Integer) = Nothing
            Dim StartDate As Date = Date.MinValue
            Dim MonthBroadcastCalendarWeeks As Generic.List(Of AdvantageFramework.Classes.Media.BroadcastCalendarWeek) = Nothing

            Weeks = New Generic.List(Of Integer)

            StartDate = New Date(Year, Month, 1)

            If StartDate <> Date.MinValue Then

                If IsCalendarMonth Then

                    If StartDate < WorksheetStartDate Then

                        StartDate = WorksheetStartDate

                    End If

                    Do While StartDate.Month = Month

                        Week = CInt(System.Globalization.DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear(StartDate, System.Globalization.CalendarWeekRule.FirstFullWeek, DayOfWeek.Sunday))

                        If Weeks.Contains(Week) = False Then

                            Weeks.Add(Week)

                        End If

                        StartDate = StartDate.AddDays(1)

                    Loop

                Else

                    MonthBroadcastCalendarWeeks = BroadcastCalendarWeeks.Where(Function(Entity) Entity.Month = Month AndAlso Entity.Year = Year).ToList

                    For Each MBCW In MonthBroadcastCalendarWeeks

                        If (MBCW.WeekDate < WorksheetStartDate AndAlso MBCW.WeekDate.AddDays(6) < WorksheetStartDate) = False Then

                            Weeks.Add(MBCW.Week)

                        End If

                    Next

                End If

            End If

            GetWeeksForMonth = Weeks

        End Function
        Public Function GetNielsenTVRatingAndShareData(DbContext As AdvantageFramework.Database.DbContext, NielsenDbContext As AdvantageFramework.Nielsen.Database.DbContext,
                                                       NielsenMarketNumber As Integer, BookIDs() As String, HPUTBookIDs() As String,
                                                       MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                       MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                       StationCodes() As String,
                                                       MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType),
                                                       IsAgencyASP As Boolean) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

            'objects
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHPUTBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_MARKET_NUM", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterBookIDs = New System.Data.SqlClient.SqlParameter("@BookIDs", SqlDbType.VarChar)

            If BookIDs.Count = 0 Then

                SqlParameterBookIDs.Value = System.DBNull.Value

            Else

                SqlParameterBookIDs.Value = Join(BookIDs, ",")

            End If

            SqlParameterHPUTBookIDs = New System.Data.SqlClient.SqlParameter("@HPUTBookIDs", SqlDbType.VarChar)

            If HPUTBookIDs.Count = 0 Then

                SqlParameterHPUTBookIDs.Value = System.DBNull.Value

            Else

                SqlParameterHPUTBookIDs.Value = Join(HPUTBookIDs, ",")

            End If

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterStationCodes = New System.Data.SqlClient.SqlParameter("@StationCodes", SqlDbType.VarChar)
            SqlParameterStationCodes.Value = Join(StationCodes, ",")

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            If IsAgencyASP Then

                SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

            Else

                SqlParameterHostedClientCode.Value = System.DBNull.Value

            End If

            TVWorksheetRatingAndShareDataList = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)("EXEC advsp_tv_worksheet_rating @NIELSEN_MARKET_NUM, @BookIDs, @HPUTBookIDs, @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @StationCodes, @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @HOSTED_CLIENT_CODE",
                                                                                                                                                              SqlParameterNielsenMarketNumber, SqlParameterBookIDs, SqlParameterHPUTBookIDs, SqlParameterMediaDemoType,
                                                                                                                                                              SqlParameterMediaDemoDetailType, SqlParameterStationCodes, SqlParameterMediaSpotTVResearchDaytimeType, SqlParameterHostedClientCode).ToList()

            GetNielsenTVRatingAndShareData = TVWorksheetRatingAndShareDataList

        End Function
        Public Function GetNielsenTVRatingAndShareDataNielsenOnly(DbContext As AdvantageFramework.Database.DbContext, NielsenDbContext As AdvantageFramework.Nielsen.Database.DbContext,
                                                                  NielsenMarketNumber As Integer, BookIDs() As String, HPUTBookIDs() As String,
                                                                  MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                                  MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                                  StationCodes() As String,
                                                                  MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType),
                                                                  IsAgencyASP As Boolean) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.NielsenTVWorksheetRatingAndShareData)

            'objects
            Dim NielsenTVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.NielsenTVWorksheetRatingAndShareData) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHPUTBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_MARKET_NUM", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterBookIDs = New System.Data.SqlClient.SqlParameter("@BookIDs", SqlDbType.VarChar)
            SqlParameterBookIDs.Value = Join(BookIDs, ",")

            SqlParameterHPUTBookIDs = New System.Data.SqlClient.SqlParameter("@HPUTBookIDs", SqlDbType.VarChar)

            If HPUTBookIDs.Count = 0 Then

                SqlParameterHPUTBookIDs.Value = System.DBNull.Value

            Else

                SqlParameterHPUTBookIDs.Value = Join(HPUTBookIDs, ",")

            End If

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterStationCodes = New System.Data.SqlClient.SqlParameter("@StationCodes", SqlDbType.VarChar)
            SqlParameterStationCodes.Value = Join(StationCodes, ",")

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            If IsAgencyASP Then

                SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

            Else

                SqlParameterHostedClientCode.Value = System.DBNull.Value

            End If

            NielsenTVWorksheetRatingAndShareDataList = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.NielsenTVWorksheetRatingAndShareData)("EXEC advsp_tv_worksheet_rating @NIELSEN_MARKET_NUM, @BookIDs, @HPUTBookIDs, @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @StationCodes, @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @HOSTED_CLIENT_CODE",
                                                                                                                                                                            SqlParameterNielsenMarketNumber, SqlParameterBookIDs, SqlParameterHPUTBookIDs, SqlParameterMediaDemoType,
                                                                                                                                                                            SqlParameterMediaDemoDetailType, SqlParameterStationCodes, SqlParameterMediaSpotTVResearchDaytimeType, SqlParameterHostedClientCode).ToList()

            GetNielsenTVRatingAndShareDataNielsenOnly = NielsenTVWorksheetRatingAndShareDataList

        End Function
        Private Function GetMeasurementTrendDetails(NielsenMarketNumber As Integer, ShareBookID As Integer, HPUTBookID As Integer,
                                                    MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                    MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                    StationCode As Integer,
                                                    MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail)

            'objects
            Dim MeasurementTrendDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShareBookID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHPUTBookID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_MARKET_NUM", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterShareBookID = New System.Data.SqlClient.SqlParameter("@SHARE_BOOK_ID", SqlDbType.Int)
            SqlParameterShareBookID.Value = ShareBookID

            SqlParameterHPUTBookID = New System.Data.SqlClient.SqlParameter("@HPUT_BOOK_ID", SqlDbType.Int)

            If HPUTBookID = 0 Then

                SqlParameterHPUTBookID.Value = System.DBNull.Value

            Else

                SqlParameterHPUTBookID.Value = HPUTBookID

            End If

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterStationCode = New System.Data.SqlClient.SqlParameter("@STATION_CODE", SqlDbType.Int)
            SqlParameterStationCode.Value = StationCode

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext) Then

                    SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

                Else

                    SqlParameterHostedClientCode.Value = System.DBNull.Value

                End If

            End Using

            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Nothing)

                NielsenDbContext.Database.Connection.Open()

                MeasurementTrendDetails = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail)("EXEC advsp_tv_worksheet_rating_program_drilldown @NIELSEN_MARKET_NUM, @SHARE_BOOK_ID, @HPUT_BOOK_ID, 
                                                                                                                                                                                                   @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @STATION_CODE, 
                                                                                                                                                                                                   @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @HOSTED_CLIENT_CODE",
                                                                                                                                                 SqlParameterNielsenMarketNumber, SqlParameterShareBookID, SqlParameterHPUTBookID, SqlParameterMediaDemoType,
                                                                                                                                                 SqlParameterMediaDemoDetailType, SqlParameterStationCode, SqlParameterMediaSpotTVResearchDaytimeType, SqlParameterHostedClientCode).ToList()

            End Using

            GetMeasurementTrendDetails = MeasurementTrendDetails

        End Function
        Private Function GetCDMAMeasurementTrendDetails(NielsenMarketNumber As Integer, ShareBookID As Integer, HPUTBookID As Integer,
                                                        MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                        MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                        StationCode As Integer,
                                                        MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType),
                                                        SyscodeID As Integer) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail)

            'objects
            Dim MeasurementTrendDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShareBookID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHPUTBookID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSyscode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_MARKET_NUM", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterShareBookID = New System.Data.SqlClient.SqlParameter("@SHARE_BOOK_ID", SqlDbType.Int)
            SqlParameterShareBookID.Value = ShareBookID

            SqlParameterHPUTBookID = New System.Data.SqlClient.SqlParameter("@HPUT_BOOK_ID", SqlDbType.Int)

            If HPUTBookID = 0 Then

                SqlParameterHPUTBookID.Value = System.DBNull.Value

            Else

                SqlParameterHPUTBookID.Value = HPUTBookID

            End If

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterStationCode = New System.Data.SqlClient.SqlParameter("@STATION_CODE", SqlDbType.Int)
            SqlParameterStationCode.Value = StationCode

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterSyscode = New System.Data.SqlClient.SqlParameter("@NCCTVSyscodeID", SqlDbType.Int)
            SqlParameterSyscode.Value = SyscodeID

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext) Then

                    SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

                Else

                    SqlParameterHostedClientCode.Value = System.DBNull.Value

                End If

            End Using

            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Nothing)

                NielsenDbContext.Database.Connection.Open()

                MeasurementTrendDetails = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail)("EXEC advsp_tv_worksheet_rating_cable_program_drilldown @NIELSEN_MARKET_NUM, @SHARE_BOOK_ID, @HPUT_BOOK_ID, 
                                                                                                                                                                                                         @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @STATION_CODE, 
                                                                                                                                                                                                         @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @NCCTVSyscodeID, @HOSTED_CLIENT_CODE",
                                                                                                                                                 SqlParameterNielsenMarketNumber, SqlParameterShareBookID, SqlParameterHPUTBookID,
                                                                                                                                                 SqlParameterMediaDemoType, SqlParameterMediaDemoDetailType, SqlParameterStationCode,
                                                                                                                                                 SqlParameterMediaSpotTVResearchDaytimeType, SqlParameterSyscode, SqlParameterHostedClientCode).ToList()

            End Using

            GetCDMAMeasurementTrendDetails = MeasurementTrendDetails

        End Function
        Private Function GetLeadInLeadOutDetails(NielsenMarketNumber As Integer, ShareBookID As Integer, HPUTBookID As Integer,
                                                 MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                 MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                 StationCode As Integer,
                                                 MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail)

            'objects
            Dim LeadInLeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShareBookID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHPUTBookID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_MARKET_NUM", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterShareBookID = New System.Data.SqlClient.SqlParameter("@SHARE_BOOK_ID", SqlDbType.Int)
            SqlParameterShareBookID.Value = ShareBookID

            SqlParameterHPUTBookID = New System.Data.SqlClient.SqlParameter("@HPUT_BOOK_ID", SqlDbType.Int)

            If HPUTBookID = 0 Then

                SqlParameterHPUTBookID.Value = System.DBNull.Value

            Else

                SqlParameterHPUTBookID.Value = HPUTBookID

            End If

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterStationCode = New System.Data.SqlClient.SqlParameter("@STATION_CODE", SqlDbType.Int)
            SqlParameterStationCode.Value = StationCode

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext) Then

                    SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

                Else

                    SqlParameterHostedClientCode.Value = System.DBNull.Value

                End If

            End Using

            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Nothing)

                NielsenDbContext.Database.Connection.Open()

                LeadInLeadOutDetails = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail)("EXEC advsp_tv_worksheet_rating_program_leadinout @NIELSEN_MARKET_NUM, @SHARE_BOOK_ID, @HPUT_BOOK_ID, 
                                                                                                                                                                                             @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @STATION_CODE, 
                                                                                                                                                                                             @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @HOSTED_CLIENT_CODE",
                                                                                                                                                 SqlParameterNielsenMarketNumber, SqlParameterShareBookID, SqlParameterHPUTBookID, SqlParameterMediaDemoType,
                                                                                                                                                 SqlParameterMediaDemoDetailType, SqlParameterStationCode, SqlParameterMediaSpotTVResearchDaytimeType, SqlParameterHostedClientCode).ToList()

            End Using

            GetLeadInLeadOutDetails = LeadInLeadOutDetails

        End Function
        Private Function GetCDMALeadInLeadOutDetails(NielsenMarketNumber As Integer, ShareBookID As Integer, HPUTBookID As Integer,
                                                     MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                     MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                     StationCode As Integer,
                                                     MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType),
                                                     SyscodeID As Integer) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail)

            'objects
            Dim LeadInLeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShareBookID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHPUTBookID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSyscode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_MARKET_NUM", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterShareBookID = New System.Data.SqlClient.SqlParameter("@SHARE_BOOK_ID", SqlDbType.Int)
            SqlParameterShareBookID.Value = ShareBookID

            SqlParameterHPUTBookID = New System.Data.SqlClient.SqlParameter("@HPUT_BOOK_ID", SqlDbType.Int)

            If HPUTBookID = 0 Then

                SqlParameterHPUTBookID.Value = System.DBNull.Value

            Else

                SqlParameterHPUTBookID.Value = HPUTBookID

            End If

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterStationCode = New System.Data.SqlClient.SqlParameter("@STATION_CODE", SqlDbType.Int)
            SqlParameterStationCode.Value = StationCode

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterSyscode = New System.Data.SqlClient.SqlParameter("@NCCTVSyscodeID", SqlDbType.Int)
            SqlParameterSyscode.Value = SyscodeID

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext) Then

                    SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

                Else

                    SqlParameterHostedClientCode.Value = System.DBNull.Value

                End If

            End Using

            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Nothing)

                NielsenDbContext.Database.Connection.Open()

                LeadInLeadOutDetails = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail)("EXEC advsp_tv_worksheet_rating_cable_program_leadinout @NIELSEN_MARKET_NUM, @SHARE_BOOK_ID, @HPUT_BOOK_ID, 
                                                                                                                                                                                                   @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @STATION_CODE, 
                                                                                                                                                                                                   @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @NCCTVSyscodeID, @HOSTED_CLIENT_CODE",
                                                                                                                                           SqlParameterNielsenMarketNumber, SqlParameterShareBookID, SqlParameterHPUTBookID,
                                                                                                                                           SqlParameterMediaDemoType, SqlParameterMediaDemoDetailType, SqlParameterStationCode,
                                                                                                                                           SqlParameterMediaSpotTVResearchDaytimeType, SqlParameterSyscode, SqlParameterHostedClientCode).ToList()

            End Using

            GetCDMALeadInLeadOutDetails = LeadInLeadOutDetails

        End Function
        Public Function GetNielsenTVCDMARatingAndShareData(NielsenDbContext As AdvantageFramework.Nielsen.Database.DbContext, NielsenMarketNumber As Integer, BookIDs() As String, HPUTBookIDs() As String,
                                                           MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                           MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                           StationCodes() As String,
                                                           MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType),
                                                           SyscodeID As Integer, IsAgencyASP As Boolean) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

            'objects
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHPUTBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSyscode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_MARKET_NUM", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterBookIDs = New System.Data.SqlClient.SqlParameter("@BookIDs", SqlDbType.VarChar)
            SqlParameterBookIDs.Value = Join(BookIDs, ",")

            SqlParameterHPUTBookIDs = New System.Data.SqlClient.SqlParameter("@HPUTBookIDs", SqlDbType.VarChar)

            If HPUTBookIDs.Count = 0 Then

                SqlParameterHPUTBookIDs.Value = System.DBNull.Value

            Else

                SqlParameterHPUTBookIDs.Value = Join(HPUTBookIDs, ",")

            End If

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterStationCodes = New System.Data.SqlClient.SqlParameter("@StationCodes", SqlDbType.VarChar)
            SqlParameterStationCodes.Value = Join(StationCodes, ",")

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterSyscode = New System.Data.SqlClient.SqlParameter("@NCCTVSyscodeID", SqlDbType.Int)
            SqlParameterSyscode.Value = SyscodeID

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            If IsAgencyASP Then

                SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

            Else

                SqlParameterHostedClientCode.Value = System.DBNull.Value

            End If

            TVWorksheetRatingAndShareDataList = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)("EXEC advsp_tv_worksheet_rating_cable @NIELSEN_MARKET_NUM, @BookIDs, @HPUTBookIDs, @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @StationCodes, @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @NCCTVSyscodeID, @HOSTED_CLIENT_CODE",
                                                                                                                                                              SqlParameterNielsenMarketNumber, SqlParameterBookIDs, SqlParameterHPUTBookIDs, SqlParameterMediaDemoType,
                                                                                                                                                              SqlParameterMediaDemoDetailType, SqlParameterStationCodes, SqlParameterMediaSpotTVResearchDaytimeType,
                                                                                                                                                              SqlParameterSyscode, SqlParameterHostedClientCode).ToList()

            GetNielsenTVCDMARatingAndShareData = TVWorksheetRatingAndShareDataList

        End Function
        Public Function GetNielsenRadioRatingData(DbContext As AdvantageFramework.Database.DbContext, NielsenDbContext As AdvantageFramework.Nielsen.Database.DbContext,
                                                  NielsenMarketNumber As Integer, BookIDs() As String, Geography As Integer,
                                                  NielsenStationRadioComboIDs() As String, SelectedMediaDemographicIDs() As String,
                                                  MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType),
                                                  MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                  MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                  IsAgencyASP As Boolean) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData)

            'objects
            Dim RadioWorksheetRatingDatas As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterGeography As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemographicIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_RADIO_MARKET_NUMBER", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterBookIDs = New System.Data.SqlClient.SqlParameter("@NIELSEN_RADIO_PERIOD_IDs", SqlDbType.VarChar)
            SqlParameterBookIDs.Value = Join(BookIDs, ",")

            SqlParameterGeography = New System.Data.SqlClient.SqlParameter("@GEO_INDICATOR", SqlDbType.SmallInt)
            SqlParameterGeography.Value = Geography

            SqlParameterStationCodes = New System.Data.SqlClient.SqlParameter("@STATION_COMBO_IDs", SqlDbType.VarChar)
            SqlParameterStationCodes.Value = Join(NielsenStationRadioComboIDs, ",")

            SqlParameterMediaDemographicIDs = New System.Data.SqlClient.SqlParameter("@SelectedMediaDemographicIDs", SqlDbType.VarChar)
            SqlParameterMediaDemographicIDs.Value = Join(SelectedMediaDemographicIDs, ",")

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            If IsAgencyASP Then

                SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

            Else

                SqlParameterHostedClientCode.Value = System.DBNull.Value

            End If

            RadioWorksheetRatingDatas = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData)("EXEC advsp_radio_worksheet_rating @NIELSEN_RADIO_MARKET_NUMBER, @NIELSEN_RADIO_PERIOD_IDs, @GEO_INDICATOR, 
																																													@STATION_COMBO_IDs, @SelectedMediaDemographicIDs, @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE,
																																													@MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @HOSTED_CLIENT_CODE",
                                                                                                                                                                                    SqlParameterNielsenMarketNumber, SqlParameterBookIDs, SqlParameterGeography,
                                                                                                                                                                                    SqlParameterStationCodes, SqlParameterMediaDemographicIDs, SqlParameterMediaSpotTVResearchDaytimeType,
                                                                                                                                                                                    SqlParameterMediaDemoType, SqlParameterMediaDemoDetailType, SqlParameterHostedClientCode).ToList()

            GetNielsenRadioRatingData = RadioWorksheetRatingDatas

        End Function
        Private Function CalculateShare(Rating As Decimal, HPUT As Decimal) As Decimal

            'objects
            Dim Share As Decimal = 0

            If HPUT <> 0 Then

                Share = Rating / (HPUT / 100)

            End If


            CalculateShare = Decimal.Round(Share, 2)

        End Function
        Public Function CalculateImpressionsFromOverrideRating(Rating As Decimal, Universe As Long) As Long

            'objects
            Dim Impressions As Long = 0

            Impressions = (Rating / 100) * Universe

            CalculateImpressionsFromOverrideRating = Impressions

        End Function
        Private Function CalculateRatingFromOverrideImpressions(Impressions As Long, Universe As Long) As Decimal

            'objects
            Dim Rating As Decimal = 0

            If Universe <> 0 Then

                Rating = Impressions / Universe

            End If

            CalculateRatingFromOverrideImpressions = Decimal.Round(Rating * 100, 2)

        End Function
        Private Function CalculateAQHRatingFromOverrideAQH(AQH As Long, Universe As Long) As Decimal

            'objects
            Dim AQHRating As Decimal = 0

            If Universe <> 0 Then

                AQHRating = AQH / Universe

            End If

            CalculateAQHRatingFromOverrideAQH = Decimal.Round(AQHRating * 100, 2)

        End Function
        Public Function CalculateAQHFromOverrideAQHRating(AQHRating As Decimal, Universe As Long) As Long

            'objects
            Dim AQH As Long = 0

            AQH = (AQHRating / 100) * Universe

            CalculateAQHFromOverrideAQHRating = AQH

        End Function
        Private Function CalculateRating(Share As Decimal, HPUT As Decimal) As Decimal

            'objects
            Dim Rating As Decimal = 0

            If HPUT <> 0 Then

                Rating = Share * (HPUT / 100)

            End If

            CalculateRating = Decimal.Round(Rating, 2)

        End Function
        Private Function CalculateTVReach(BuyImpressions As Decimal, CumeImpressions As Long, TotalSpots As Integer, Universe As Long, Rating As Decimal, BookRating As Decimal) As Double

            'objects
            Dim Reach As Double = 0
            Dim CIOverU As Decimal = 0
            Dim NewCumeImpressions As Long = 0

            If CumeImpressions = 0 OrElse Rating <> BookRating Then

                'Reach = (1 - ((1 - (Rating / 100)) ^ TotalSpots))
                Reach = 0
                Reach = CalculateCumlessReach(Rating, TotalSpots)

            ElseIf Universe = 0 Then

                Reach = 0

            Else

                'Reach = (BuyImpressions / CumeImpressions)

                'Reach = (1 - Reach)

                'Reach = (1 - Reach ^ TotalSpots)

                'CIOverU = (CumeImpressions / Universe)

                'Reach = Reach * CIOverU

                If CumeImpressions > Universe Then

                    NewCumeImpressions = Universe

                Else

                    NewCumeImpressions = CumeImpressions

                End If

                Reach = (1 - (1 - (BuyImpressions / NewCumeImpressions)) ^ TotalSpots) * (NewCumeImpressions / Universe)

                If Reach < 0 OrElse Reach > (NewCumeImpressions / Universe) Then

                    Reach = (NewCumeImpressions / Universe)

                End If

            End If

            Reach = Math.Round(Reach, 3)

            CalculateTVReach = Reach

        End Function
        Private Function CalculateRadioReach(AQH As Long, Cume As Long, TotalSpots As Integer, Universe As Long, Rating As Decimal, BookRating As Decimal) As Double

            'objects
            Dim Reach As Double = 0
            Dim CIOverU As Decimal = 0
            Dim NewCume As Long = 0

            If Cume = 0 OrElse Rating <> BookRating Then

                'Reach = (1 - ((1 - (Rating / 100)) ^ TotalSpots))
                Reach = 0
                Reach = CalculateCumlessReach(Rating, TotalSpots)

            ElseIf Universe = 0 Then

                Reach = 0

            Else

                'Reach = (BuyImpressions / CumeImpressions)

                'Reach = (1 - Reach)

                'Reach = (1 - Reach ^ TotalSpots)

                'CIOverU = (CumeImpressions / Universe)

                'Reach = Reach * CIOverU

                If Cume > Universe Then

                    NewCume = Universe

                Else

                    NewCume = Cume

                End If

                Reach = (1 - (1 - (AQH / NewCume)) ^ TotalSpots) * (NewCume / Universe)

                If Reach < 0 OrElse Reach > (NewCume / Universe) Then

                    Reach = (NewCume / Universe)

                End If

            End If

            Reach = Math.Round(Reach, 3)

            CalculateRadioReach = Reach

        End Function
        Private Function CalculateTVFrequency(GRP As Decimal, Reach As Decimal) As Decimal

            'objects
            Dim Frequency As Decimal = 0

            If Reach = 0 Then

                Frequency = 0

            Else

                Frequency = GRP / (Reach * 100)

            End If

            If Frequency < 1 AndAlso Frequency > 0 Then

                Frequency = 1

            End If

            CalculateTVFrequency = Frequency

        End Function
        Private Function CalculateRadioFrequency(GRP As Decimal, Reach As Decimal) As Decimal

            'objects
            Dim Frequency As Decimal = 0

            If Reach = 0 Then

                Frequency = 0

            Else

                Frequency = GRP / (Reach * 100)

            End If

            If Frequency < 1 AndAlso Frequency > 0 Then

                Frequency = 1

            End If

            CalculateRadioFrequency = Frequency

        End Function
        Public Function CalculateCumlessReach(Rating As Decimal, TotalSpots As Integer) As Double

            'objects
            Dim Reach As Double = 0
            Dim SpotReach As Double = 0
            Dim Factor As Double = 0

            Factor = 0.667

            If TotalSpots = 0 Then

                Reach = 0

            Else

                Reach = Rating

            End If

            For Spot As Integer = 2 To TotalSpots

                SpotReach = 100 * (1 - (1 - Rating / 100) ^ Spot)
                SpotReach = SpotReach - ((Spot - 1) * Rating * Factor)

                If Reach > SpotReach Then

                    Exit For

                Else

                    Reach = SpotReach

                End If

            Next

            If Reach <> 0 Then

                Reach = Reach / 100

            End If

            Reach = Math.Round(Reach, 3)

            CalculateCumlessReach = Reach

        End Function
        Private Function LoadMarketSelection(MediaType As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes,
                                             WorksheetMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket)) As IEnumerable

            If MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                LoadMarketSelection = (From WorksheetMarket In WorksheetMarkets
                                       Select MarketDescription = If(WorksheetMarket.IsCable, WorksheetMarket.MarketDescription & " - CA", WorksheetMarket.MarketDescription),
                                              [ID] = WorksheetMarket.ID).ToList

            ElseIf MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                LoadMarketSelection = (From WorksheetMarket In WorksheetMarkets
                                       Select MarketDescription = If(WorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.HasValue AndAlso WorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value > 1,
                                                                     WorksheetMarket.MarketDescription & " - " & AdvantageFramework.EnumUtilities.GetNameAsWords(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), WorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value),
                                                                     WorksheetMarket.MarketDescription),
                                              [ID] = WorksheetMarket.ID).ToList

            Else

                LoadMarketSelection = (From WorksheetMarket In WorksheetMarkets
                                       Select MarketDescription = WorksheetMarket.MarketDescription,
                                              [ID] = WorksheetMarket.ID).ToList

            End If

        End Function
        Private Function LoadWorksheetFullName(MediaType As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes,
                                               Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet,
                                               WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket) As String
            'objects
            Dim WorksheetFullName As String = String.Empty

            If WorksheetMarket IsNot Nothing Then

                If MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    WorksheetFullName = Worksheet.Name & " (" & If(WorksheetMarket.IsCable, WorksheetMarket.MarketDescription & " - CA", WorksheetMarket.MarketDescription) & ")"

                ElseIf MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    If WorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.HasValue AndAlso WorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value > 1 Then

                        WorksheetFullName = Worksheet.Name & " (" & WorksheetMarket.MarketDescription & " - " & AdvantageFramework.EnumUtilities.GetNameAsWords(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), WorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value) & ")"

                    Else

                        WorksheetFullName = Worksheet.Name & " (" & WorksheetMarket.MarketDescription & ")"

                    End If

                Else

                    WorksheetFullName = Worksheet.Name & " (" & WorksheetMarket.MarketDescription & ")"

                End If

            Else

                WorksheetFullName = Worksheet.Name

            End If

            WorksheetFullName &= " - " & GetCDPDescription(Worksheet)

            LoadWorksheetFullName = WorksheetFullName

        End Function
        Private Function GetCDPDescription(Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet) As String

            'objects
            Dim CDPDescription As String = String.Empty

            If Worksheet IsNot Nothing Then

                CDPDescription = Worksheet.ClientName

                If Worksheet.ClientCode <> Worksheet.DivisionCode AndAlso Worksheet.ClientCode <> Worksheet.ProductCode Then

                    CDPDescription &= " (" & Worksheet.DivisionCode & "/" & Worksheet.ProductCode & ")"

                ElseIf Worksheet.ClientCode = Worksheet.DivisionCode AndAlso Worksheet.ClientCode <> Worksheet.ProductCode Then

                    CDPDescription &= " (" & Worksheet.ProductCode & ")"

                ElseIf Worksheet.ClientCode <> Worksheet.DivisionCode AndAlso Worksheet.ClientCode = Worksheet.ProductCode Then

                    CDPDescription &= " (" & Worksheet.DivisionCode & ")"

                End If

            End If

            GetCDPDescription = CDPDescription

        End Function
        Public Function SaveWorksheetPrintOptions(WorksheetPrintOptions As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetPrintOptions) As Boolean

            'objects
            Dim Saved As Boolean = False
            Dim MediaBroadcastWorksheetPrintOptions As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetPrintOptions = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetPrintOptions = (From Entity In DbContext.MediaBroadcastWorksheetPrintOptions
                                                       Where Entity.UserCode = Me.Session.UserCode
                                                       Select Entity).SingleOrDefault

                If MediaBroadcastWorksheetPrintOptions Is Nothing Then

                    MediaBroadcastWorksheetPrintOptions = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetPrintOptions

                    DbContext.MediaBroadcastWorksheetPrintOptions.Add(MediaBroadcastWorksheetPrintOptions)

                End If

                WorksheetPrintOptions.SaveToEntity(MediaBroadcastWorksheetPrintOptions)

                Saved = (DbContext.SaveChanges() > 0)

            End Using

            SaveWorksheetPrintOptions = Saved

        End Function
        Private Function GetNielsenTVBooks(MarketCode As String, MarketNielsenTVCode As String, IsCable As Boolean, MediaBroadcastWorksheetMarketTVGeographyID As Integer, Optional ShareBookID As Nullable(Of Integer) = Nothing) As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            'objects
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing

            If Session.IsNielsenSetup AndAlso String.IsNullOrWhiteSpace(MarketCode) = False AndAlso String.IsNullOrWhiteSpace(MarketNielsenTVCode) = False Then

                If IsCable = True AndAlso MediaBroadcastWorksheetMarketTVGeographyID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                    ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Me.Session)

                    NielsenTVBooks = ShareHPUTBookController.GetRepositoryNielsenTVBooksForCableCDMA(MarketNielsenTVCode)

                Else

                    ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Me.Session)

                    'If AllowImpactBooks Then

                    NielsenTVBooks = ShareHPUTBookController.GetRepositoryNielsenTVBooks(MarketNielsenTVCode, ShareBookID:=ShareBookID).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ThenBy(Function(NB) NB.ReportingService).ToList

                    'Else

                    '    NielsenTVBooks = ShareHPUTBookController.GetRepositoryNonImpactNielsenTVBooks(MarketNielsenTVCode).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ThenBy(Function(NB) NB.ReportingService).ToList

                    'End If

                End If

            Else

                NielsenTVBooks = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            End If

            GetNielsenTVBooks = NielsenTVBooks

        End Function
        Public Function IsWorksheetMarketLocked(MediaBroadcastWorksheetMarketID As Integer, ByRef LockedByUserEmployeeName As String) As Boolean

            'objects
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim ConnectedUsers As Generic.List(Of AdvantageFramework.Security.LicenseKey.Classes.ConnectedUser) = Nothing
            Dim IsLocked As Boolean = False

            Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                MediaBroadcastWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID)

                If MediaBroadcastWorksheetMarket IsNot Nothing Then

                    If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarket.LockedByUserCode) Then

                        DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.MEDIA_BROADCAST_WORKSHEET_MARKET SET LOCKED_BY = '{0}' WHERE MEDIA_BROADCAST_WORKSHEET_MARKET_ID = {1}", DbContext.UserCode, MediaBroadcastWorksheetMarketID))

                    Else

                        Using SecurityDbContext As New AdvantageFramework.Security.Database.DbContext(DbContext.ConnectionString, DbContext.UserCode)

                            ConnectedUsers = AdvantageFramework.Security.LicenseKey.LoadConnectedUsers(SecurityDbContext, AdvantageFramework.Security.LicenseKey.Types.PowerUser)

                        End Using

                        If ConnectedUsers.Where(Function(Entity) Entity.UserCode.ToUpper = MediaBroadcastWorksheetMarket.LockedByUserCode.ToUpper AndAlso Entity.UserCode.ToUpper <> DbContext.UserCode.ToUpper).Any Then

                            IsLocked = True

                            LockedByUserEmployeeName = "Schedule is in use by " & MediaBroadcastWorksheetMarket.LockedByUserCode & " (" & ConnectedUsers.Where(Function(Entity) Entity.UserCode.ToUpper = MediaBroadcastWorksheetMarket.LockedByUserCode.ToUpper).First.EmployeeName & ")"

                        Else

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.MEDIA_BROADCAST_WORKSHEET_MARKET SET LOCKED_BY = '{0}' WHERE MEDIA_BROADCAST_WORKSHEET_MARKET_ID = {1}", DbContext.UserCode, MediaBroadcastWorksheetMarketID))

                        End If

                    End If

                End If

            End Using

            IsWorksheetMarketLocked = IsLocked

        End Function
        Public Sub ClearWorksheetMarketLock(MediaBroadcastWorksheetMarketID)

            Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.MEDIA_BROADCAST_WORKSHEET_MARKET SET LOCKED_BY = NULL WHERE MEDIA_BROADCAST_WORKSHEET_MARKET_ID = {0}", MediaBroadcastWorksheetMarketID))

            End Using

        End Sub
        Public Function IsAnyMarketLockedByWorksheet(MediaBroadcastWorksheetID As Integer, ByRef Message As String) As Boolean

            'objects
            Dim Islocked As Boolean = False
            Dim LockedByUserCodes As IEnumerable(Of String) = Nothing
            Dim ConnectedUsers As Generic.List(Of AdvantageFramework.Security.LicenseKey.Classes.ConnectedUser) = Nothing
            Dim VerifiedLockedByUserCodes As Generic.List(Of String) = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                If (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetID).ToList
                    Where Not String.IsNullOrWhiteSpace(Entity.LockedByUserCode)).Any Then

                    Islocked = True

                    Using SecurityDbContext As New AdvantageFramework.Security.Database.DbContext(DbContext.ConnectionString, DbContext.UserCode)

                        ConnectedUsers = AdvantageFramework.Security.LicenseKey.LoadConnectedUsers(SecurityDbContext, AdvantageFramework.Security.LicenseKey.Types.PowerUser)

                    End Using

                    LockedByUserCodes = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetID).ToList
                                         Where Not String.IsNullOrWhiteSpace(Entity.LockedByUserCode)
                                         Select Entity.LockedByUserCode).Distinct.ToList

                    VerifiedLockedByUserCodes = New Generic.List(Of String)

                    For Each LockedByUserCode In LockedByUserCodes

                        If ConnectedUsers.Where(Function(CU) CU.UserCode.ToUpper = LockedByUserCode.ToUpper).Any Then

                            VerifiedLockedByUserCodes.Add(LockedByUserCode)

                        Else

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.MEDIA_BROADCAST_WORKSHEET_MARKET SET LOCKED_BY = NULL WHERE MEDIA_BROADCAST_WORKSHEET_ID = {0} AND UPPER(LOCKED_BY) = '{1}'", MediaBroadcastWorksheetID, LockedByUserCode.ToUpper))

                        End If

                    Next

                    If VerifiedLockedByUserCodes.Count = 0 Then

                        Islocked = False

                    Else

                        Message = "Cannot update Worksheet settings, schedules are in use by (" & String.Join(", ", VerifiedLockedByUserCodes) & ")"

                    End If

                End If

            End Using

            IsAnyMarketLockedByWorksheet = Islocked

        End Function
        Public Function IsWorksheetMarketLockedByAnyOtherUser(MediaBroadcastWorksheetMarketID As Integer, ByRef Message As String) As Boolean

            'objects
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim ConnectedUsers As Generic.List(Of AdvantageFramework.Security.LicenseKey.Classes.ConnectedUser) = Nothing
            Dim IsLocked As Boolean = False

            Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                MediaBroadcastWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID)

                If MediaBroadcastWorksheetMarket IsNot Nothing Then

                    If Not String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarket.LockedByUserCode) Then

                        Using SecurityDbContext As New AdvantageFramework.Security.Database.DbContext(DbContext.ConnectionString, DbContext.UserCode)

                            ConnectedUsers = AdvantageFramework.Security.LicenseKey.LoadConnectedUsers(SecurityDbContext, AdvantageFramework.Security.LicenseKey.Types.PowerUser)

                        End Using

                        If ConnectedUsers.Where(Function(Entity) Entity.UserCode.ToUpper = MediaBroadcastWorksheetMarket.LockedByUserCode.ToUpper AndAlso Entity.UserCode.ToUpper <> DbContext.UserCode.ToUpper).Any Then

                            IsLocked = True

                            Message = MediaBroadcastWorksheetMarket.Market.Description & " is in use by " & MediaBroadcastWorksheetMarket.LockedByUserCode & " (" & ConnectedUsers.Where(Function(Entity) Entity.UserCode.ToUpper = MediaBroadcastWorksheetMarket.LockedByUserCode.ToUpper).First.EmployeeName & ")"

                        End If

                    End If

                End If

            End Using

            IsWorksheetMarketLockedByAnyOtherUser = IsLocked

        End Function
        Private Function GetComscoreTVBooks() As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            'objects
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing

            ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Me.Session)

            NielsenTVBooks = ShareHPUTBookController.GetRepositoryNielsenTVBooks(0, AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ToList

            GetComscoreTVBooks = NielsenTVBooks

        End Function
        Public Function SearchByOrderNumber(OrderNumber As Integer, ByRef Message As String) As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderNumberSearchResult

            'objects
            Dim OrderNumberSearchResult As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderNumberSearchResult = Nothing

            If OrderNumber > 0 Then

                Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                    Try

                        OrderNumberSearchResult = DbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderNumberSearchResult)(String.Format("EXEC [dbo].[advsp_media_broadcast_worksheet_search_by_order_number] '{0}'", OrderNumber)).FirstOrDefault

                    Catch ex As Exception
                        OrderNumberSearchResult = Nothing
                        Message = "Error trying to find worksheet by order number. Please contact software support."
                    End Try

                    If OrderNumberSearchResult Is Nothing Then

                        If String.IsNullOrWhiteSpace(Message) Then

                            Message = "Cannot find a worksheet with the order number that was entered."

                        End If

                    End If

                End Using

            Else

                Message = "Please enter a valid order number."

            End If

            SearchByOrderNumber = OrderNumberSearchResult

        End Function

#Region "  Setup "

        Public Function Setup_Load() As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel

            'objects
            Dim MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel = Nothing
            Dim Dashboard As AdvantageFramework.Database.Entities.Dashboard = Nothing
            Dim MediaBroadcastWorksheetPrintOptions As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetPrintOptions = Nothing
            Dim GridAdvantage As AdvantageFramework.Database.Entities.GridAdvantage = Nothing
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim NielsenRadioController As AdvantageFramework.Controller.Media.NielsenRadioController = Nothing

            MediaBroadcastWorksheetSetupViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetSetupViewModel.IsNielsenSetup = Me.Session.IsNielsenSetup
                MediaBroadcastWorksheetSetupViewModel.IsNielsenPuertoRicoSetup = Me.Session.IsNielsenPuertoRicoSetup

                Dashboard = AdvantageFramework.Database.Procedures.Dashboard.LoadByDashboardType(DbContext, AdvantageFramework.Database.Entities.DashboardTypes.MediaBroadcastWorksheetSetup)

                If Dashboard IsNot Nothing Then

                    MediaBroadcastWorksheetSetupViewModel.Dashboard = New AdvantageFramework.DTO.Dashboard(Dashboard)

                Else

                    MediaBroadcastWorksheetSetupViewModel.Dashboard = New AdvantageFramework.DTO.Dashboard

                End If

                MediaBroadcastWorksheetPrintOptions = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetPrintOptions.LoadByUserCode(DbContext, Me.Session.UserCode)

                If MediaBroadcastWorksheetPrintOptions IsNot Nothing Then

                    MediaBroadcastWorksheetSetupViewModel.WorksheetPrintOptions = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetPrintOptions(MediaBroadcastWorksheetPrintOptions)

                Else

                    MediaBroadcastWorksheetSetupViewModel.WorksheetPrintOptions = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetPrintOptions(Me.Session.UserCode)

                End If

                Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    GridAdvantage = AdvantageFramework.Database.Procedures.GridAdvantage.LoadByGridTypeAndUserCode(DataContext, AdvantageFramework.Database.Entities.GridAdvantageType.MediaBroadcastWorksheet, Me.Session.UserCode)

                End Using

                If GridAdvantage IsNot Nothing Then

                    MediaBroadcastWorksheetSetupViewModel.WorksheetGridLayout = New AdvantageFramework.DTO.GridAdvantage(GridAdvantage)

                Else

                    MediaBroadcastWorksheetSetupViewModel.WorksheetGridLayout = New AdvantageFramework.DTO.GridAdvantage

                    MediaBroadcastWorksheetSetupViewModel.WorksheetGridLayout.UserCode = Me.Session.UserCode
                    MediaBroadcastWorksheetSetupViewModel.WorksheetGridLayout.GridType = Database.Entities.GridAdvantageType.MediaBroadcastWorksheet
                    MediaBroadcastWorksheetSetupViewModel.WorksheetGridLayout.GridSubtype = Nothing

                End If

                ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Me.Session)

                If MediaBroadcastWorksheetSetupViewModel.IsNielsenSetup Then

                    MediaBroadcastWorksheetSetupViewModel.NielsenTVBooks = ShareHPUTBookController.GetRepositoryAllNielsenTVBooks().OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ToList

                End If

                MediaBroadcastWorksheetSetupViewModel.ComscoreTVBooks = ShareHPUTBookController.GetRepositoryAllComscoreTVBooks().OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ToList

                NielsenRadioController = New AdvantageFramework.Controller.Media.NielsenRadioController(Me.Session)

                MediaBroadcastWorksheetSetupViewModel.NielsenRadioPeriods = NielsenRadioController.LoadAllNieslenRadioPeriods.OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

                MediaBroadcastWorksheetSetupViewModel.UserHasAccessToMediaTraffic = AdvantageFramework.Security.DoesUserHaveAccessToModule(Me.Session, AdvantageFramework.Security.Modules.Media_MediaBroadcastWorksheet_Actions_MediaTraffic)

            End Using

            Setup_Load = MediaBroadcastWorksheetSetupViewModel

        End Function
        Public Sub Setup_SelectedWorksheetChanged(ByRef MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel,
                                                  Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet)

            'objects
            Dim MediaBroadcastWorksheetMarkets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket) = Nothing
            Dim WorksheetMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket) = Nothing
            Dim WorksheetMarketGoals As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoal) = Nothing
            Dim WorksheetMarketGoalDates As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalDate) = Nothing
            Dim WorksheetMarketDetails As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail) = Nothing
            Dim WorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate) = Nothing
            Dim SetupFormDashboardDataSource As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SetupFormDashboardDataSource = Nothing
            Dim TotalMarketQuantity As Decimal = 0
            Dim MaxRevisionNumber As Integer = 0
            Dim WorksheetID As Integer = 0

            MediaBroadcastWorksheetSetupViewModel.SelectedWorksheet = Worksheet

            MediaBroadcastWorksheetSetupViewModel.DashboardDataSource = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SetupFormDashboardDataSource)

            If MediaBroadcastWorksheetSetupViewModel.SelectedWorksheet IsNot Nothing Then

                WorksheetID = MediaBroadcastWorksheetSetupViewModel.SelectedWorksheet.ID

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    'MediaBroadcastWorksheetMarkets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetSetupViewModel.SelectedWorksheet.ID).Include("Market").Include("BuyerEmployee").Include("MediaBroadcastWorksheetMarketGoals").Include("MediaBroadcastWorksheetMarketDetails").Include("MediaBroadcastWorksheetMarketDetails.MediaBroadcastWorksheetMarketDetailDates").ToList
                    MediaBroadcastWorksheetMarkets = DbContext.MediaBroadcastWorksheetMarkets.Include("Market").Where(Function(Entity) Entity.MediaBroadcastWorksheetID = WorksheetID).ToList

                    For Each MediaBroadcastWorksheetMarket In MediaBroadcastWorksheetMarkets

                        MaxRevisionNumber = DbContext.Database.SqlQuery(Of Integer)(String.Format("SELECT ISNULL(MAX(REVISION_NUMBER), 0) FROM dbo.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL WHERE MEDIA_BROADCAST_WORKSHEET_MARKET_ID = {0}", MediaBroadcastWorksheetMarket.ID)).FirstOrDefault()

                        'If MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketDetails.Any Then

                        '    MaxRevisionNumber = MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketDetails.Select(Function(Entity) Entity.RevisionNumber).Max

                        'Else

                        '    MaxRevisionNumber = 0

                        'End If

                        SetupFormDashboardDataSource = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SetupFormDashboardDataSource

                        If MediaBroadcastWorksheetMarket.IsCable Then

                            SetupFormDashboardDataSource.MarketCode = MediaBroadcastWorksheetMarket.MarketCode & "-CA"
                            SetupFormDashboardDataSource.MarketDescription = If(MediaBroadcastWorksheetMarket.Market IsNot Nothing, MediaBroadcastWorksheetMarket.Market.Description & " - CA", String.Empty)

                        Else

                            SetupFormDashboardDataSource.MarketCode = MediaBroadcastWorksheetMarket.MarketCode
                            SetupFormDashboardDataSource.MarketDescription = If(MediaBroadcastWorksheetMarket.Market IsNot Nothing, MediaBroadcastWorksheetMarket.Market.Description, String.Empty)

                        End If

                        'For Each MediaBroadcastWorksheetMarketGoal In MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketGoals

                        '    SetupFormDashboardDataSource.GRPGoal += MediaBroadcastWorksheetMarketGoal.GRP
                        '    SetupFormDashboardDataSource.GoalAmount += MediaBroadcastWorksheetMarketGoal.BudgetAmount

                        'Next

                        SetupFormDashboardDataSource.GRPGoal = DbContext.Database.SqlQuery(Of Decimal)(String.Format("SELECT ISNULL(SUM(GRP), 0) FROM dbo.MEDIA_BROADCAST_WORKSHEET_MARKET_GOAL WHERE MEDIA_BROADCAST_WORKSHEET_MARKET_ID = {0}", MediaBroadcastWorksheetMarket.ID)).FirstOrDefault()
                        SetupFormDashboardDataSource.GoalAmount = DbContext.Database.SqlQuery(Of Decimal)(String.Format("SELECT ISNULL(SUM(BUDGET_AMOUNT), 0) FROM dbo.MEDIA_BROADCAST_WORKSHEET_MARKET_GOAL WHERE MEDIA_BROADCAST_WORKSHEET_MARKET_ID = {0}", MediaBroadcastWorksheetMarket.ID)).FirstOrDefault()

                        SetupFormDashboardDataSource.GRPEstimated = DbContext.Database.SqlQuery(Of Decimal)(String.Format("SELECT ISNULL(SUM(PRIMARY_GRP), 0) FROM dbo.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL WHERE MEDIA_BROADCAST_WORKSHEET_MARKET_ID = {0} AND REVISION_NUMBER = {1}", MediaBroadcastWorksheetMarket.ID, MaxRevisionNumber)).FirstOrDefault()

                        SetupFormDashboardDataSource.Amount = DbContext.Database.SqlQuery(Of Decimal)(String.Format("SELECT 
	                                                                                                                    ISNULL(SUM(MBW_MDD.SPOTS * MBW_MDD.RATE), 0)
                                                                                                                    FROM 
	                                                                                                                    dbo.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_DATE MBW_MDD 
	                                                                                                                    INNER JOIN dbo.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL MBW_MD ON MBW_MD.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_ID = MBW_MDD.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_ID
                                                                                                                    WHERE 
	                                                                                                                    MBW_MD.MEDIA_BROADCAST_WORKSHEET_MARKET_ID = {0} 
	                                                                                                                    AND MBW_MD.REVISION_NUMBER = {1}", MediaBroadcastWorksheetMarket.ID, MaxRevisionNumber)).FirstOrDefault()

                        'For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.RevisionNumber = MaxRevisionNumber).ToList

                        '    SetupFormDashboardDataSource.GRPEstimated += MediaBroadcastWorksheetMarketDetail.PrimaryGRP

                        '    TotalMarketQuantity = 0

                        '    If MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Any Then

                        '        For Each MediaBroadcastWorksheetMarketDetailDate In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates

                        '            SetupFormDashboardDataSource.Amount += (MediaBroadcastWorksheetMarketDetailDate.Spots * MediaBroadcastWorksheetMarketDetailDate.Rate)

                        '        Next

                        '    End If

                        '    'SetupFormDashboardDataSource.Amount += (TotalMarketQuantity * MediaBroadcastWorksheetMarketDetail.DefaultRate)

                        'Next

                        MediaBroadcastWorksheetSetupViewModel.DashboardDataSource.Add(SetupFormDashboardDataSource)

                    Next

                    DbContext.Database.Connection.Close()

                End Using

            End If

        End Sub
        Public Function Setup_SelectedWorksheetIsInactiveChanged(ByRef MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel,
                                                                 Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet, IsInactive As Boolean) As Boolean

            'objects
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim Saved As Boolean = False

            Try

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    MediaBroadcastWorksheet = (From Entity In DbContext.MediaBroadcastWorksheets
                                               Where Entity.ID = Worksheet.ID
                                               Select Entity).SingleOrDefault

                    If MediaBroadcastWorksheet IsNot Nothing Then

                        MediaBroadcastWorksheet.IsInactive = IsInactive

                        DbContext.SaveChanges()

                        Worksheet.IsInactive = IsInactive

                        Saved = True

                    End If

                End Using

            Catch ex As Exception

            End Try

            Setup_SelectedWorksheetIsInactiveChanged = Saved

        End Function
        Public Sub Setup_SelectedWorksheetMarketChanged(ByRef MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel,
                                                        WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket)

            MediaBroadcastWorksheetSetupViewModel.SelectedWorksheetMarket = WorksheetMarket

        End Sub
        Public Sub Setup_LoadWorksheets(MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel)

            'objects
            Dim MediaBroadcastWorksheets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheet) = Nothing
            Dim ProductIDs As Generic.List(Of String) = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    ProductIDs = AdvantageFramework.Database.Procedures.ProductView.LoadByUserCodeWithOfficeLimits(Me.Session, DbContext, SecurityDbContext).Select(Function(Entity) Entity.ClientCode & "|" & Entity.DivisionCode & "|" & Entity.ProductCode).ToList

                End Using

                MediaBroadcastWorksheets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                          Include("Division").
                                                                                                                          Include("Product").
                                                                                                                          Include("SalesClass").
                                                                                                                          Include("Campaign").
                                                                                                                          Include("MediaPlan").
                                                                                                                          Include("PrimaryMediaDemographic").
                                                                                                                          Include("Country").ToList

                MediaBroadcastWorksheets = MediaBroadcastWorksheets.Where(Function(Entity) ProductIDs.Contains(Entity.Product.ID)).ToList

                If MediaBroadcastWorksheetSetupViewModel.ShowPendingMakegoods Then

                    MediaBroadcastWorksheetSetupViewModel.WorksheetMarketPendingMakegoods = DbContext.Database.SqlQuery(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketPendingMakegood)("exec advsp_media_broadcast_worksheets_with_pending_makegoods").ToList

                End If

            End Using

            MediaBroadcastWorksheetSetupViewModel.Worksheets = MediaBroadcastWorksheets.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).ToList

            If MediaBroadcastWorksheetSetupViewModel.ShowPendingMakegoods Then

                For Each Worksheet In MediaBroadcastWorksheetSetupViewModel.Worksheets

                    If MediaBroadcastWorksheetSetupViewModel.WorksheetMarketPendingMakegoods.Where(Function(PM) PM.MediaBroadcastWorksheetID = Worksheet.ID).Any Then

                        Worksheet.PendingMakegood = True

                    Else

                        Worksheet.PendingMakegood = False

                    End If

                Next

            End If

        End Sub
        Public Sub Setup_LoadSelectedWorksheetMarkets(ByRef MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel)

            MediaBroadcastWorksheetSetupViewModel.SelectedWorksheetMarkets = New List(Of DTO.Media.MediaBroadcastWorksheet.WorksheetMarket)

            If MediaBroadcastWorksheetSetupViewModel.SelectedWorksheet IsNot Nothing Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    MediaBroadcastWorksheetSetupViewModel.SelectedWorksheetMarkets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetSetupViewModel.SelectedWorksheet.ID).Include("Market").Include("BuyerEmployee").ToList.
                                                                                                                                                                                          Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).ToList

                    If MediaBroadcastWorksheetSetupViewModel.ShowPendingMakegoods Then

                        For Each WorksheetMarket In MediaBroadcastWorksheetSetupViewModel.SelectedWorksheetMarkets

                            If MediaBroadcastWorksheetSetupViewModel.WorksheetMarketPendingMakegoods.Where(Function(PM) PM.MediaBroadcastWorksheetMarketID = WorksheetMarket.ID).Any Then

                                WorksheetMarket.PendingMakegood = True

                            Else

                                WorksheetMarket.PendingMakegood = False

                            End If

                        Next

                    End If

                End Using

            End If

        End Sub
        Public Sub Setup_SaveDashboard(ByRef MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel, DashboardLayout() As Byte)

            'objects
            Dim Dashboard As AdvantageFramework.Database.Entities.Dashboard = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                Dashboard = AdvantageFramework.Database.Procedures.Dashboard.LoadByDashboardType(DbContext, AdvantageFramework.Database.Entities.DashboardTypes.MediaBroadcastWorksheetSetup)

                If Dashboard IsNot Nothing Then

                    Dashboard.Layout = DashboardLayout

                    AdvantageFramework.Database.Procedures.Dashboard.Update(DbContext, Dashboard)

                Else

                    Dashboard = New AdvantageFramework.Database.Entities.Dashboard

                    Dashboard.DbContext = DbContext
                    Dashboard.Type = AdvantageFramework.Database.Entities.DashboardTypes.MediaBroadcastWorksheetSetup
                    Dashboard.Layout = DashboardLayout

                    AdvantageFramework.Database.Procedures.Dashboard.Insert(DbContext, Dashboard)

                End If

            End Using

            MediaBroadcastWorksheetSetupViewModel.Dashboard.Layout = DashboardLayout

        End Sub
        Public Function Setup_GetRepositoryNielsenTVBooks(MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel) As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            'objects
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing

            If MediaBroadcastWorksheetSetupViewModel.HasASelectedWorksheet AndAlso MediaBroadcastWorksheetSetupViewModel.SelectedWorksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                If MediaBroadcastWorksheetSetupViewModel.IsNielsenSetup Then

                    ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Me.Session)

                    NielsenTVBooks = ShareHPUTBookController.GetRepositoryAllNielsenTVBooks().OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ToList

                Else

                    NielsenTVBooks = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

                End If

            ElseIf MediaBroadcastWorksheetSetupViewModel.HasASelectedWorksheet AndAlso MediaBroadcastWorksheetSetupViewModel.SelectedWorksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Me.Session)

                NielsenTVBooks = ShareHPUTBookController.GetRepositoryAllComscoreTVBooks().OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ToList

            End If

            Setup_GetRepositoryNielsenTVBooks = NielsenTVBooks

        End Function
        Public Function Setup_GetRepositoryMarketTVGeography(MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies), False)

            Setup_GetRepositoryMarketTVGeography = DataTable

        End Function
        Public Function Setup_GetRepositoryMarketRadioGeography(MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioGeographies), False)

            Setup_GetRepositoryMarketRadioGeography = DataTable

        End Function
        Public Function Setup_GetRepositoryExternalRadioSource(MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.Nielsen.Database.Entities.RadioSource), False)

            Setup_GetRepositoryExternalRadioSource = DataTable

        End Function
        Public Function Setup_GetRepositoryMarketRadioEthnicity(MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), False)

            Setup_GetRepositoryMarketRadioEthnicity = DataTable

        End Function
        Public Function Setup_GetRepositoryNielsenRadioPeriods(MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel) As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            'objects
            Dim NielsenRadioController As AdvantageFramework.Controller.Media.NielsenRadioController = Nothing
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing

            If MediaBroadcastWorksheetSetupViewModel.IsNielsenSetup Then

                NielsenRadioController = New AdvantageFramework.Controller.Media.NielsenRadioController(Me.Session)

                NielsenRadioPeriods = NielsenRadioController.LoadAllNieslenRadioPeriods.OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

            Else

                NielsenRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            End If

            Setup_GetRepositoryNielsenRadioPeriods = NielsenRadioPeriods

        End Function
        Public Sub Setup_SetWorksheetIDsWithMissingTrafficInstructions(ByVal WorkSheetIDs As IEnumerable(Of Integer), ByRef MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel)

            Dim MediaTrafficController As AdvantageFramework.Controller.Media.MediaTrafficController = Nothing

            MediaTrafficController = New AdvantageFramework.Controller.Media.MediaTrafficController(Me.Session)

            MediaBroadcastWorksheetSetupViewModel.WorksheetIDsWithMissingTrafficInstructions = (From Entity In MediaTrafficController.LoadMissingInstructions(WorkSheetIDs, Nothing).ToList
                                                                                                Select Entity.WorksheetID).Distinct.ToArray

            MediaBroadcastWorksheetSetupViewModel.WorksheetMarketIDsWithMissingTrafficInstructions = (From Entity In MediaTrafficController.LoadMissingInstructions(WorkSheetIDs, Nothing).ToList
                                                                                                      Select Entity.WorksheetMarketID).Distinct.ToArray

        End Sub
        Public Sub Setup_SetPendingMakegoodsFlag(ByRef MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel,
                                                 ShowPendingMakegoods As Boolean, FilterBeforeShowingPendingMakegoods As String)

            MediaBroadcastWorksheetSetupViewModel.ShowPendingMakegoods = ShowPendingMakegoods

            If ShowPendingMakegoods Then

                MediaBroadcastWorksheetSetupViewModel.FilterBeforeShowingPendingMakegoods = FilterBeforeShowingPendingMakegoods

            End If

        End Sub
        Public Sub Setup_ClearWorksheetIDsWithMissingTrafficInstructions(ByRef MediaBroadcastWorksheetSetupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetSetupViewModel)

            MediaBroadcastWorksheetSetupViewModel.WorksheetIDsWithMissingTrafficInstructions = Nothing

            MediaBroadcastWorksheetSetupViewModel.WorksheetMarketIDsWithMissingTrafficInstructions = Nothing

        End Sub

#End Region

#Region "  Edit "

        Public Function Edit_Load(MediaBroadcastWorksheetID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel

            'objects
            Dim MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel = Nothing
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet = Nothing
            Dim Client As AdvantageFramework.Database.Entities.Client = Nothing
            Dim WorksheetMarketIDs() As Integer = Nothing
            Dim WorksheetMarketDetailIDs() As Integer = Nothing
            Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim Country As Nullable(Of Integer) = Nothing

            MediaBroadcastWorksheetEditViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    If MediaBroadcastWorksheetID > 0 Then

                        MediaBroadcastWorksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetID)

                    End If

                    If MediaBroadcastWorksheet IsNot Nothing Then

                        Worksheet = New DTO.Media.MediaBroadcastWorksheet.Worksheet(MediaBroadcastWorksheet)

                    Else

                        Worksheet = New DTO.Media.MediaBroadcastWorksheet.Worksheet()

                    End If

                    MediaBroadcastWorksheetEditViewModel.Worksheet = Worksheet

                    MediaBroadcastWorksheetEditViewModel.MediaTypes = (From Entity In AdvantageFramework.EnumUtilities.LoadEnumObjects(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes))
                                                                       Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

                    MediaBroadcastWorksheetEditViewModel.Clients = (From Entity In AdvantageFramework.Database.Procedures.Client.LoadAllActiveByUserCodeWithOfficeLimits(Me.Session, DbContext, SecurityDbContext).ToList
                                                                    Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

                    If MediaBroadcastWorksheet IsNot Nothing AndAlso MediaBroadcastWorksheetEditViewModel.Clients.Any(Function(Entity) Entity.Value = Worksheet.ClientCode) = False Then

                        Client = AdvantageFramework.Database.Procedures.Client.LoadByClientCode(DbContext, Worksheet.ClientCode)

                        If Client IsNot Nothing Then

                            MediaBroadcastWorksheetEditViewModel.Clients.Add(New AdvantageFramework.DTO.ComboBoxItem(Client))

                        End If

                    End If

                    Edit_LoadDivisions(MediaBroadcastWorksheetEditViewModel, Worksheet.ClientCode)
                    Edit_LoadProducts(MediaBroadcastWorksheetEditViewModel, Worksheet.ClientCode, Worksheet.DivisionCode)
                    Edit_LoadMediaTypeDefaults(MediaBroadcastWorksheetEditViewModel)
                    Edit_LoadCampaigns(MediaBroadcastWorksheetEditViewModel, Worksheet.ClientCode, Worksheet.MediaPlanID.GetValueOrDefault(0), Worksheet.StartDate, Worksheet.EndDate)
                    Edit_LoadMediaPlans(MediaBroadcastWorksheetEditViewModel, Worksheet.ClientCode, Worksheet.DivisionCode, Worksheet.ProductCode)

                    MediaBroadcastWorksheetEditViewModel.MediaDemographics = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).OrderBy(Function(Entity) Entity.Description).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaDemographic(Entity)).ToList

                    MediaBroadcastWorksheetEditViewModel.UserHasAccessToMatchingTab = AdvantageFramework.Security.DoesUserHaveAccessToModule(Me.Session, AdvantageFramework.Security.Modules.Media_MediaBroadcastWorksheet_Actions_SpotMatching)

                    If Worksheet.ID > 0 Then

                        MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetSecondaryDemo.LoadByMediaBroadcastWorksheetID(DbContext, Worksheet.ID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetSecondaryDemo(Entity)).ToList

                        WorksheetMarketIDs = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, Worksheet.ID).Select(Function(Entity) Entity.ID).ToArray

                        MediaBroadcastWorksheetMarketDetails = DbContext.MediaBroadcastWorksheetMarketDetails.Include("MediaBroadcastWorksheetMarketDetailDates").Where(Function(Entity) WorksheetMarketIDs.Contains(Entity.MediaBroadcastWorksheetMarketID)).ToList

                        WorksheetMarketDetailIDs = MediaBroadcastWorksheetMarketDetails.Select(Function(Entity) Entity.ID).ToArray

                        MediaBroadcastWorksheetEditViewModel.HasRevisionBeenCreatedInAnyMarketSchedules = MediaBroadcastWorksheetMarketDetails.Any(Function(Entity) Entity.RevisionNumber > 0)

                        MediaBroadcastWorksheetEditViewModel.HasDataBeenEnteredInAnyMarketSchedules = WorksheetMarketDetailIDs.Any()

                        MediaBroadcastWorksheetEditViewModel.HasOrdersBeenCreated = MediaBroadcastWorksheetMarketDetails.SelectMany(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailDates).Any(Function(Entity) Entity.OrderNumber IsNot Nothing)

                        If MediaBroadcastWorksheetEditViewModel.Worksheet.MediaTypeCode = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.T.ToString Then

                            MediaBroadcastWorksheetEditViewModel.DefaultToLatestSharebookEnabled = (MediaBroadcastWorksheetEditViewModel.HasDataBeenEnteredInAnyMarketSchedules = False)

                        End If

                        If MediaBroadcastWorksheetEditViewModel.UserHasAccessToMatchingTab Then

                            Edit_LoadMatchingSettings(DbContext, MediaBroadcastWorksheetEditViewModel, Worksheet.MediaTypeCode, Worksheet.ClientCode)

                        End If

                    Else

                        MediaBroadcastWorksheetEditViewModel.HasDataBeenEnteredInAnyMarketSchedules = False
                        MediaBroadcastWorksheetEditViewModel.HasOrdersBeenCreated = False

                        Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                            Country = AdvantageFramework.Agency.LoadCountry(DataContext)

                            If Country IsNot Nothing AndAlso Country.GetValueOrDefault(0) > 0 Then

                                MediaBroadcastWorksheetEditViewModel.Worksheet.CountryID = Country.GetValueOrDefault(0)

                            End If

                            If MediaBroadcastWorksheetEditViewModel.Worksheet.CountryID = AdvantageFramework.DTO.Countries.Canada Then

                                MediaBroadcastWorksheetEditViewModel.Worksheet.IsGross = False
                                MediaBroadcastWorksheetEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Numeris

                            ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.CountryID = AdvantageFramework.DTO.Countries.Australia Then

                                MediaBroadcastWorksheetEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.OzTAM

                            Else

                                MediaBroadcastWorksheetEditViewModel.Worksheet.IsGross = (AdvantageFramework.Agency.LoadBroadcastWorksheetDefaultRateType(DataContext) = False)

                            End If

                        End Using

                    End If

                    MediaBroadcastWorksheetEditViewModel.DateTypes = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetDateType.Load(DbContext).ToList
                                                                      Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList
                    MediaBroadcastWorksheetEditViewModel.CalendarTypes = (From Entity In AdvantageFramework.Database.Procedures.MediaCalendarType.Load(DbContext).ToList
                                                                          Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList
                    MediaBroadcastWorksheetEditViewModel.RatingsServiceList = (From Entity In AdvantageFramework.EnumUtilities.LoadEnumObjects(GetType(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID))
                                                                               Where (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen)) OrElse
                                                                                     (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Numeris)) OrElse
                                                                                     (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.OzTAM)) OrElse
                                                                                     (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore) AndAlso Me.Session.IsComscoreSetup) OrElse
                                                                                     (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.NielsenPuertoRico) AndAlso Me.Session.IsNielsenPuertoRicoSetup)
                                                                               Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

                    MediaBroadcastWorksheetEditViewModel.Countries = (From Entity In DbContext.Countries.ToList
                                                                      Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

                    If Session.IsNielsenPuertoRicoSetup = False Then

                        MediaBroadcastWorksheetEditViewModel.Countries.RemoveAt(3)

                    End If

                    Edit_LoadDemoSource(MediaBroadcastWorksheetEditViewModel)

                End Using

            End Using

            Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                MediaBroadcastWorksheetEditViewModel.MediaRequireCampaign = AdvantageFramework.Agency.LoadMediaRequireCampaign(DataContext)

            End Using

            MediaBroadcastWorksheetEditViewModel.CancelEnabled = True

            Edit_Load = MediaBroadcastWorksheetEditViewModel

        End Function
        Public Sub Edit_Add(MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, ByRef ErrorMessage As String)

            'objects
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim MediaBroadcastWorksheetSecondaryDemo As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSecondaryDemo = Nothing
            Dim Market As AdvantageFramework.Database.Entities.Market = Nothing
            Dim WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket = Nothing
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing

            If Edit_ValidateWorksheet(MediaBroadcastWorksheetEditViewModel.Worksheet, True, ErrorMessage) Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    MediaBroadcastWorksheet = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheet

                    MediaBroadcastWorksheetEditViewModel.Worksheet.SaveToEntity(MediaBroadcastWorksheet)

                    MediaBroadcastWorksheet.CreatedByUserCode = Me.Session.UserCode
                    MediaBroadcastWorksheet.CreatedDate = Now

                    DbContext.MediaBroadcastWorksheets.Add(MediaBroadcastWorksheet)

                    For Each WorksheetSecondaryDemo In MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos

                        MediaBroadcastWorksheetSecondaryDemo = Nothing

                        MediaBroadcastWorksheetSecondaryDemo = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSecondaryDemo

                        MediaBroadcastWorksheetSecondaryDemo.MediaBroadcastWorksheet = MediaBroadcastWorksheet

                        DbContext.MediaBroadcastWorksheetSecondaryDemos.Add(MediaBroadcastWorksheetSecondaryDemo)

                        WorksheetSecondaryDemo.SaveToEntity(MediaBroadcastWorksheetSecondaryDemo)

                    Next

                    'If MediaBroadcastWorksheetEditViewModel.Worksheet.CountryID = AdvantageFramework.DTO.Countries.Canada Then

                    '    Market = DbContext.Markets.SingleOrDefault(Function(Entity) Entity.CountryID = AdvantageFramework.DTO.Countries.Canada AndAlso Entity.IsAllCanada = True)

                    '    WorksheetMarket = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket
                    '    MediaBroadcastWorksheetMarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket

                    '    WorksheetMarket.MarketCode = Market.Code
                    '    WorksheetMarket.CreatedByUserCode = Me.Session.UserCode
                    '    WorksheetMarket.CreatedDate = Now

                    '    WorksheetMarket.SaveToEntity(MediaBroadcastWorksheetMarket)

                    '    If MediaBroadcastWorksheet.MediaBroadcastWorksheetMarkets Is Nothing Then

                    '        MediaBroadcastWorksheet.MediaBroadcastWorksheetMarkets = New Generic.List(Of Database.Entities.MediaBroadcastWorksheetMarket)

                    '    End If

                    '    MediaBroadcastWorksheet.MediaBroadcastWorksheetMarkets.Add(MediaBroadcastWorksheetMarket)

                    'End If

                    If MediaBroadcastWorksheetEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                        Try

                            Market = DbContext.Markets.SingleOrDefault(Function(Entity) Entity.IsPuertoRico = True AndAlso (Entity.IsInactive Is Nothing OrElse Entity.IsInactive = 0))

                        Catch ex As Exception
                            Market = Nothing
                        End Try

                        If Market IsNot Nothing Then

                            WorksheetMarket = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket
                            MediaBroadcastWorksheetMarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket

                            WorksheetMarket.MarketCode = Market.Code
                            WorksheetMarket.CreatedByUserCode = Me.Session.UserCode
                            WorksheetMarket.CreatedDate = Now
                            WorksheetMarket.Length = MediaBroadcastWorksheet.Length

                            If DbContext.NPRUniverses.Any Then

                                WorksheetMarket.PeriodEnd = DbContext.GetQuery(Of Database.Entities.NPRUniverse).Max(Function(Entity) Entity.Date)
                                WorksheetMarket.PeriodStart = WorksheetMarket.PeriodEnd.Value.AddDays(-27)

                            End If

                            WorksheetMarket.SaveToEntity(MediaBroadcastWorksheetMarket)

                            If MediaBroadcastWorksheet.MediaBroadcastWorksheetMarkets Is Nothing Then

                                MediaBroadcastWorksheet.MediaBroadcastWorksheetMarkets = New Generic.List(Of Database.Entities.MediaBroadcastWorksheetMarket)

                            End If

                            MediaBroadcastWorksheet.MediaBroadcastWorksheetMarkets.Add(MediaBroadcastWorksheetMarket)

                        End If

                    End If

                    DbContext.SaveChanges()

                    MediaBroadcastWorksheetEditViewModel.Worksheet.ID = MediaBroadcastWorksheet.ID

                End Using

            End If

        End Sub
        Public Sub Edit_Save(MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, ByRef ErrorMessage As String)

            'objects
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim MediaBroadcastWorksheetSecondaryDemo As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSecondaryDemo = Nothing
            Dim ClearSecondaryRateAndShareData As Boolean = False
            Dim ContinueUpdatingRatingAndShareData As Boolean = False
            Dim MaxRevisionNumber As Integer = 0
            Dim WorksheetDates As Generic.List(Of Date) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing
            Dim MediaBroadcastWorksheetMarketGoalDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate = Nothing
            Dim DateCounter As Integer = 0
            Dim TotalGRP As Decimal = 0
            Dim GRP As Decimal = 0
            Dim TotalSpots As Integer = 0
            Dim DatesHaveChanged As Boolean = False
            Dim StartDateWeek As Date = Date.MinValue
            Dim EndDateWeek As Date = Date.MinValue
            Dim NielsenRadioMarketNumber As Integer = 0
            Dim Campaign As AdvantageFramework.Database.Entities.Campaign = Nothing
            Dim OrderNumbers As Generic.List(Of Integer) = Nothing
            Dim SpotMatchingSetting As AdvantageFramework.DTO.Media.SpotMatchingSetting = Nothing
            Dim MediaBroadcastWorksheetSpotMatchingSetting As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSpotMatchingSetting = Nothing
            Dim MediaBroadcastWorksheetMarketDetailList As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing

            If Edit_ValidateWorksheet(MediaBroadcastWorksheetEditViewModel.Worksheet, False, ErrorMessage) Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Configuration.AutoDetectChangesEnabled = False
                    DbContext.Database.Connection.Open()

                    MediaBroadcastWorksheet = DbContext.MediaBroadcastWorksheets.Find(MediaBroadcastWorksheetEditViewModel.Worksheet.ID)

                    If MediaBroadcastWorksheet IsNot Nothing Then

                        If MediaBroadcastWorksheet.StartDate <> MediaBroadcastWorksheetEditViewModel.Worksheet.StartDate OrElse
                                MediaBroadcastWorksheet.EndDate <> MediaBroadcastWorksheetEditViewModel.Worksheet.EndDate Then

                            DatesHaveChanged = True

                        End If

                        MediaBroadcastWorksheetEditViewModel.Worksheet.SaveToEntity(MediaBroadcastWorksheet)

                        StartDateWeek = GetWeekDate(MediaBroadcastWorksheet.MediaCalendarTypeID, MediaBroadcastWorksheet.StartDate)
                        EndDateWeek = GetWeekDate(MediaBroadcastWorksheet.MediaCalendarTypeID, MediaBroadcastWorksheet.EndDate)

                        MediaBroadcastWorksheet.ModifiedByUserCode = Me.Session.UserCode
                        MediaBroadcastWorksheet.ModifiedDate = Now

                        WorksheetDates = GetWorksheetDates(MediaBroadcastWorksheet.MediaBroadcastWorksheetDateTypeID, MediaBroadcastWorksheet.MediaCalendarTypeID, MediaBroadcastWorksheet.StartDate, MediaBroadcastWorksheet.EndDate, MediaBroadcastWorksheet.UseOldCalendarDateCreation)
                        'DbContext.UpdateObject(MediaBroadcastWorksheet)

                        If MediaBroadcastWorksheet.CampaignID.GetValueOrDefault(0) > 0 Then

                            Try

                                Campaign = AdvantageFramework.Database.Procedures.Campaign.LoadByCampaignID(DbContext, MediaBroadcastWorksheet.CampaignID.GetValueOrDefault(0))

                            Catch ex As Exception
                                Campaign = Nothing
                            End Try

                        End If

                        For Each MediaBroadcastWorksheetMarket In DbContext.MediaBroadcastWorksheetMarkets.Include("MediaBroadcastWorksheetMarketDetails").
                                                                                                           Include("MediaBroadcastWorksheetMarketGoals").
                                                                                                           Include("MediaBroadcastWorksheetMarketDetails.MediaBroadcastWorksheetMarketDetailDates").
                                                                                                           Include("MediaBroadcastWorksheetMarketGoals.MediaBroadcastWorksheetMarketGoalDates").
                                                                                                           Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetEditViewModel.Worksheet.ID)

                            If MediaBroadcastWorksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) = 0 Then

                                MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID = Nothing
                                MediaBroadcastWorksheetMarket.HUTPUTNielsenTVBookID = Nothing
                                MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID1 = Nothing
                                MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID2 = Nothing
                                MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID3 = Nothing
                                MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID4 = Nothing
                                MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID5 = Nothing

                            End If

                            For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketDetails.ToList

                                If MediaBroadcastWorksheetEditViewModel.ClearGoalGRPAndMarketScheduleSpotsData Then

                                    MediaBroadcastWorksheetMarketDetail.PrimaryGRP = 0
                                    MediaBroadcastWorksheetMarketDetail.PrimaryReach = 0
                                    MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = 0
                                    MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = 0

                                    MediaBroadcastWorksheetMarketDetail.SecondaryGRP = 0
                                    MediaBroadcastWorksheetMarketDetail.SecondaryReach = 0
                                    MediaBroadcastWorksheetMarketDetail.SecondaryFrequency = 0
                                    MediaBroadcastWorksheetMarketDetail.SecondaryGrossImpressions = 0

                                End If

                                For Each MediaBroadcastWorksheetMarketDetailDate In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.ToList

                                    If MediaBroadcastWorksheetEditViewModel.ClearGoalGRPAndMarketScheduleSpotsData Then

                                        DbContext.MediaBroadcastWorksheetMarketDetailDates.Remove(MediaBroadcastWorksheetMarketDetailDate)

                                    ElseIf WorksheetDates.Contains(MediaBroadcastWorksheetMarketDetailDate.Date) = False Then

                                        'If MediaBroadcastWorksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                                        '    If StartDateWeek = GetWeekDate(MediaBroadcastWorksheet.MediaCalendarTypeID, MediaBroadcastWorksheetMarketDetailDate.Date) Then

                                        '        MediaBroadcastWorksheetMarketDetailDate.Date = MediaBroadcastWorksheet.StartDate

                                        '    ElseIf EndDateWeek = GetWeekDate(MediaBroadcastWorksheet.MediaCalendarTypeID, MediaBroadcastWorksheetMarketDetailDate.Date) Then

                                        '        MediaBroadcastWorksheetMarketDetailDate.Date = MediaBroadcastWorksheet.EndDate

                                        '    Else

                                        '        DbContext.MediaBroadcastWorksheetMarketDetailDates.Remove(MediaBroadcastWorksheetMarketDetailDate)

                                        '    End If

                                        'Else

                                        DbContext.MediaBroadcastWorksheetMarketDetailDates.Remove(MediaBroadcastWorksheetMarketDetailDate)

                                        'End If

                                    ElseIf (MediaBroadcastWorksheetMarketDetailDate.Date < MediaBroadcastWorksheet.StartDate OrElse MediaBroadcastWorksheetMarketDetailDate.Date > MediaBroadcastWorksheet.EndDate) Then

                                        DbContext.MediaBroadcastWorksheetMarketDetailDates.Remove(MediaBroadcastWorksheetMarketDetailDate)

                                    End If

                                Next

                                If WorksheetDates.Count > 0 AndAlso
                                        (MediaBroadcastWorksheetEditViewModel.ClearGoalGRPAndMarketScheduleSpotsData OrElse DatesHaveChanged) Then

                                    For Each WorksheetDate In WorksheetDates

                                        MediaBroadcastWorksheetMarketDetailDate = Nothing

                                        MediaBroadcastWorksheetMarketDetailDate = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.SingleOrDefault(Function(Entity) Entity.Date = WorksheetDate)

                                        If MediaBroadcastWorksheetMarketDetailDate Is Nothing Then

                                            MediaBroadcastWorksheetMarketDetailDate = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate

                                            DbContext.MediaBroadcastWorksheetMarketDetailDates.Add(MediaBroadcastWorksheetMarketDetailDate)

                                            MediaBroadcastWorksheetMarketDetailDate.Date = WorksheetDate

                                            MediaBroadcastWorksheetMarketDetailDate.Rate = MediaBroadcastWorksheetMarketDetail.DefaultRate
                                            MediaBroadcastWorksheetMarketDetailDate.Spots = 0
                                            MediaBroadcastWorksheetMarketDetailDate.IsHiatus = False
                                            MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered
                                            MediaBroadcastWorksheetMarketDetailDate.LinkID = Nothing
                                            MediaBroadcastWorksheetMarketDetailDate.LinkLineID = Nothing
                                            MediaBroadcastWorksheetMarketDetailDate.OrderNumber = Nothing
                                            MediaBroadcastWorksheetMarketDetailDate.OrderLineNumber = Nothing
                                            MediaBroadcastWorksheetMarketDetailDate.VendorOrderLine = Nothing
                                            MediaBroadcastWorksheetMarketDetailDate.AllowSpotsToBeEntered = True
                                            MediaBroadcastWorksheetMarketDetailDate.MakegoodSpots = 0

                                            MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetail

                                        End If

                                    Next

                                End If

                            Next

                            For Each MediaBroadcastWorksheetMarketGoal In MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketGoals.ToList

                                For Each MediaBroadcastWorksheetMarketGoalDate In MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.ToList

                                    If MediaBroadcastWorksheetEditViewModel.ClearGoalGRPAndMarketScheduleSpotsData Then

                                        DbContext.MediaBroadcastWorksheetMarketGoalDates.Remove(MediaBroadcastWorksheetMarketGoalDate)

                                    ElseIf WorksheetDates.Contains(MediaBroadcastWorksheetMarketGoalDate.Date) = False Then

                                        'If MediaBroadcastWorksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                                        '    If StartDateWeek = GetWeekDate(MediaBroadcastWorksheet.MediaCalendarTypeID, MediaBroadcastWorksheetMarketGoalDate.Date) Then

                                        '        MediaBroadcastWorksheetMarketGoalDate.Date = MediaBroadcastWorksheet.StartDate

                                        '    ElseIf EndDateWeek = GetWeekDate(MediaBroadcastWorksheet.MediaCalendarTypeID, MediaBroadcastWorksheetMarketGoalDate.Date) Then

                                        '        MediaBroadcastWorksheetMarketGoalDate.Date = MediaBroadcastWorksheet.EndDate

                                        '    Else

                                        '        DbContext.MediaBroadcastWorksheetMarketGoalDates.Remove(MediaBroadcastWorksheetMarketGoalDate)

                                        '    End If

                                        'Else

                                        DbContext.MediaBroadcastWorksheetMarketGoalDates.Remove(MediaBroadcastWorksheetMarketGoalDate)

                                        'End If

                                    ElseIf MediaBroadcastWorksheetMarketGoalDate.Date < MediaBroadcastWorksheet.StartDate OrElse MediaBroadcastWorksheetMarketGoalDate.Date > MediaBroadcastWorksheet.EndDate Then

                                        DbContext.MediaBroadcastWorksheetMarketGoalDates.Remove(MediaBroadcastWorksheetMarketGoalDate)

                                    End If

                                Next

                                If WorksheetDates.Count > 0 AndAlso
                                        (MediaBroadcastWorksheetEditViewModel.ClearGoalGRPAndMarketScheduleSpotsData OrElse DatesHaveChanged) Then

                                    DateCounter = WorksheetDates.Count
                                    TotalGRP = MediaBroadcastWorksheetMarketGoal.GRP

                                    MediaBroadcastWorksheetMarketGoal.WasRateImported = False

                                    For Each WorksheetDate In WorksheetDates

                                        MediaBroadcastWorksheetMarketGoalDate = MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.SingleOrDefault(Function(Entity) Entity.Date = WorksheetDate)

                                        If MediaBroadcastWorksheetMarketGoalDate Is Nothing Then

                                            MediaBroadcastWorksheetMarketGoalDate = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate

                                            DbContext.MediaBroadcastWorksheetMarketGoalDates.Add(MediaBroadcastWorksheetMarketGoalDate)

                                            MediaBroadcastWorksheetMarketGoalDate.Date = WorksheetDate

                                        End If

                                        GRP = Math.Round((TotalGRP / DateCounter), 1)

                                        MediaBroadcastWorksheetMarketGoalDate.GRP = GRP

                                        TotalGRP -= GRP
                                        DateCounter -= 1

                                        MediaBroadcastWorksheetMarketGoalDate.Rate = 0
                                        MediaBroadcastWorksheetMarketGoalDate.IsHiatus = False

                                        MediaBroadcastWorksheetMarketGoalDate.MediaBroadcastWorksheetMarketGoal = MediaBroadcastWorksheetMarketGoal

                                    Next

                                End If

                            Next

                            If Campaign IsNot Nothing Then

                                OrderNumbers = MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketDetails.SelectMany(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailDates).Select(Function(Entity) Entity.OrderNumber.GetValueOrDefault(0)).Distinct.ToList

                                OrderNumbers = OrderNumbers.Where(Function(OrderNumber) OrderNumber <> 0).ToList

                                For Each OrderNumber In OrderNumbers

                                    If MediaBroadcastWorksheetEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                        Try

                                            DbContext.Database.ExecuteSqlCommand(Entity.TransactionalBehavior.DoNotEnsureTransaction, String.Format("UPDATE dbo.TV_HDR SET CMP_CODE = '{0}', CMP_IDENTIFIER = {1} WHERE ORDER_NBR = {2}", Campaign.Code, Campaign.ID, OrderNumber))

                                        Catch ex As Exception

                                        End Try

                                    ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                        Try

                                            DbContext.Database.ExecuteSqlCommand(Entity.TransactionalBehavior.DoNotEnsureTransaction, String.Format("UPDATE dbo.RADIO_HDR SET CMP_CODE = '{0}', CMP_IDENTIFIER = {1} WHERE ORDER_NBR = {2}", Campaign.Code, Campaign.ID, OrderNumber))

                                        Catch ex As Exception

                                        End Try

                                    End If

                                Next

                            End If

                        Next

                        For Each WorksheetSecondaryDemo In MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos

                            MediaBroadcastWorksheetSecondaryDemo = Nothing

                            If WorksheetSecondaryDemo.ID > 0 Then

                                MediaBroadcastWorksheetSecondaryDemo = DbContext.MediaBroadcastWorksheetSecondaryDemos.Find(WorksheetSecondaryDemo.ID)

                            End If

                            If MediaBroadcastWorksheetSecondaryDemo Is Nothing Then

                                MediaBroadcastWorksheetSecondaryDemo = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSecondaryDemo

                                MediaBroadcastWorksheetSecondaryDemo.MediaBroadcastWorksheet = MediaBroadcastWorksheet

                                DbContext.MediaBroadcastWorksheetSecondaryDemos.Add(MediaBroadcastWorksheetSecondaryDemo)

                            End If

                            WorksheetSecondaryDemo.SaveToEntity(MediaBroadcastWorksheetSecondaryDemo)

                        Next

                        For Each MediaBroadcastWorksheetSecondaryDemo In DbContext.MediaBroadcastWorksheetSecondaryDemos.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheet.ID).ToList

                            If MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos.Any(Function(WSD) WSD.ID = MediaBroadcastWorksheetSecondaryDemo.ID) = False Then

                                DbContext.MediaBroadcastWorksheetSecondaryDemos.Remove(MediaBroadcastWorksheetSecondaryDemo)

                            End If

                        Next

                        For Each MediaBroadcastWorksheetMarket In DbContext.MediaBroadcastWorksheetMarkets.Include("Market").Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetEditViewModel.Worksheet.ID)

                            ContinueUpdatingRatingAndShareData = True

                            If ContinueUpdatingRatingAndShareData Then

                                ClearSecondaryRateAndShareData = False

                                If MediaBroadcastWorksheetMarket.SecondaryMediaDemographicID.HasValue AndAlso
                                        MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos.Any(Function(WSD) WSD.ID = MediaBroadcastWorksheetMarket.SecondaryMediaDemographicID) = False OrElse
                                        (MediaBroadcastWorksheetEditViewModel.HasPrimaryDemographicChanged AndAlso MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.HasValue = False) Then

                                    ClearSecondaryRateAndShareData = True

                                End If

                                If ClearSecondaryRateAndShareData OrElse MediaBroadcastWorksheetEditViewModel.HasPrimaryDemographicChanged OrElse DatesHaveChanged Then

                                    If DbContext.MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).Any Then

                                        MaxRevisionNumber = DbContext.MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).Select(Function(Entity) Entity.RevisionNumber).Max

                                    Else

                                        MaxRevisionNumber = 0

                                    End If

                                    For Each MediaBroadcastWorksheetMarketDetail In DbContext.MediaBroadcastWorksheetMarketDetails.Include("Vendor").Include("MediaBroadcastWorksheetMarketDetailDates").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID AndAlso Entity.RevisionNumber = MaxRevisionNumber)

                                        If MediaBroadcastWorksheetEditViewModel.HasPrimaryDemographicChanged Then

                                            If MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.HasValue AndAlso Me.Session.IsNielsenSetup AndAlso
                                                    MediaBroadcastWorksheetEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                                                If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetail.Days) = False AndAlso String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetail.StartTime) = False AndAlso
                                                        String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetail.EndTime) = False Then

                                                    If MediaBroadcastWorksheetEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                                        MediaBroadcastWorksheetMarketDetail.OverridePost = False

                                                        If MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                                                            If MediaBroadcastWorksheetMarket.IsCable AndAlso
                                                                    MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                                                                Edit_GetTVCableRatingAndShareData(DbContext, MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.Value, MediaBroadcastWorksheetMarket.Market.NielsenTVCode,
                                                                                                  MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.Value, MediaBroadcastWorksheetMarket.HUTPUTNielsenTVBookID, MediaBroadcastWorksheetMarketDetail)

                                                            Else

                                                                Edit_GetTVRatingAndShareData(DbContext, MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.Value, MediaBroadcastWorksheetMarket.Market.NielsenTVCode,
                                                                                             MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.Value, MediaBroadcastWorksheetMarket.HUTPUTNielsenTVBookID, MediaBroadcastWorksheetMarketDetail)

                                                            End If

                                                        Else

                                                            If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                                                            Else

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                                                                MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                                                            End If

                                                            If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                                                            Else

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                                                                MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                                                            End If

                                                            MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                                                            If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                                                                MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty

                                                            Else

                                                                MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                                                                MediaBroadcastWorksheetMarketDetail.Program = String.Empty

                                                            End If

                                                            If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                                                            Else

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                                                                MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                                                            End If

                                                            MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                                                            MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                                                            MediaBroadcastWorksheetMarketDetail.PrimaryGRP = 0
                                                            MediaBroadcastWorksheetMarketDetail.PrimaryCPP = 0

                                                            MediaBroadcastWorksheetMarketDetail.PrimaryReach = 0
                                                            MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = 0

                                                            MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = 0
                                                            MediaBroadcastWorksheetMarketDetail.PrimaryCPM = 0

                                                        End If

                                                    ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                                        MediaBroadcastWorksheetMarketDetail.OverridePost = False

                                                        If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID1.HasValue Then

                                                            If MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen AndAlso
                                                                    String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarket.Market.NielsenRadioCode) = False Then

                                                                NielsenRadioMarketNumber = CInt(MediaBroadcastWorksheetMarket.Market.NielsenRadioCode)

                                                            ElseIf MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan AndAlso
                                                                    MediaBroadcastWorksheetMarket.Market.EastlanRadioCode.GetValueOrDefault(0) > 0 Then

                                                                NielsenRadioMarketNumber = CInt(MediaBroadcastWorksheetMarket.Market.EastlanRadioCode.GetValueOrDefault(0))

                                                            End If

                                                            If NielsenRadioMarketNumber > 0 Then

                                                                Edit_GetRadioRatingAndShareData(DbContext, MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.Value,
                                                                                                NielsenRadioMarketNumber, MediaBroadcastWorksheetMarket, MediaBroadcastWorksheetMarketDetail)

                                                            End If

                                                        Else

                                                            If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0

                                                            Else

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0
                                                                MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = 0

                                                            End If

                                                            If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH <> MediaBroadcastWorksheetMarketDetail.PrimaryAQH Then

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0

                                                            Else

                                                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0
                                                                MediaBroadcastWorksheetMarketDetail.PrimaryAQH = 0

                                                            End If

                                                            MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = 0
                                                            MediaBroadcastWorksheetMarketDetail.PrimaryCume = 0
                                                            MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0

                                                            MediaBroadcastWorksheetMarketDetail.PrimaryGRP = 0
                                                            MediaBroadcastWorksheetMarketDetail.PrimaryCPP = 0

                                                            MediaBroadcastWorksheetMarketDetail.PrimaryReach = 0
                                                            MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = 0

                                                            MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = 0

                                                        End If

                                                        'ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                                                        '	Edit_GetRatingAndShareData(DbContext, MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.Value, MediaBroadcastWorksheetMarket.Market.NielsenTVDMACode,
                                                        '							   MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.Value, MediaBroadcastWorksheetMarket.HUTPUTNielsenTVBookID, MediaBroadcastWorksheetMarketDetail)

                                                    End If

                                                End If

                                            ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.HasValue AndAlso Me.Session.IsNielsenPuertoRicoSetup AndAlso
                                                    MediaBroadcastWorksheetEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                                                If MediaBroadcastWorksheetMarket.PeriodStart.HasValue AndAlso MediaBroadcastWorksheetMarket.PeriodEnd.HasValue Then

                                                    MediaBroadcastWorksheetMarketDetailList = New List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail)
                                                    MediaBroadcastWorksheetMarketDetailList.Add(MediaBroadcastWorksheetMarketDetail)

                                                    Edit_GetTVRatingAndShareData(DbContext, MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.Value, MediaBroadcastWorksheetMarket.PeriodStart.Value,
                                                                                 MediaBroadcastWorksheetMarket.PeriodEnd.Value, MediaBroadcastWorksheetMarketDetailList)

                                                Else

                                                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                                                    Else

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                                                        MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                                                    End If

                                                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                                                    Else

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                                                        MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                                                    End If

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                                                    MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                                                    MediaBroadcastWorksheetMarketDetail.Program = String.Empty

                                                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                                                    Else

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                                                        MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                                                    End If

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryGRP = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryCPP = 0

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryReach = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = 0

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryCPM = 0

                                                End If

                                            Else

                                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                                                Else

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                                                End If

                                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                                                Else

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                                                End If

                                                MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                                                Else

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                                                End If

                                                MediaBroadcastWorksheetMarketDetail.PrimaryCPP = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryGRP = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryReach = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0

                                                Else

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = 0

                                                End If

                                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH <> MediaBroadcastWorksheetMarketDetail.PrimaryAQH Then

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0

                                                Else

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryAQH = 0

                                                End If

                                                MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryCume = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryCPM = 0

                                            End If

                                        ElseIf DatesHaveChanged Then

                                            TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                                            If MediaBroadcastWorksheetEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                                MediaBroadcastWorksheetMarketDetail.PrimaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryRating
                                                MediaBroadcastWorksheetMarketDetail.PrimaryReach = CalculateTVReach(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions, MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions,
                                                                                                                TotalSpots, MediaBroadcastWorksheetMarketDetail.PrimaryUniverse, MediaBroadcastWorksheetMarketDetail.PrimaryRating, MediaBroadcastWorksheetMarketDetail.BookPrimaryRating)
                                                MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CalculateTVFrequency(MediaBroadcastWorksheetMarketDetail.PrimaryGRP, MediaBroadcastWorksheetMarketDetail.PrimaryReach)
                                                MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryImpressions

                                                If ClearSecondaryRateAndShareData = False Then

                                                    MediaBroadcastWorksheetMarketDetail.SecondaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.SecondaryRating
                                                    MediaBroadcastWorksheetMarketDetail.SecondaryReach = CalculateTVReach(MediaBroadcastWorksheetMarketDetail.SecondaryImpressions, MediaBroadcastWorksheetMarketDetail.SecondaryCumeImpressions,
                                                                                                                TotalSpots, MediaBroadcastWorksheetMarketDetail.SecondaryUniverse, MediaBroadcastWorksheetMarketDetail.SecondaryRating, MediaBroadcastWorksheetMarketDetail.BookSecondaryRating)
                                                    MediaBroadcastWorksheetMarketDetail.SecondaryFrequency = CalculateTVFrequency(MediaBroadcastWorksheetMarketDetail.SecondaryGRP, MediaBroadcastWorksheetMarketDetail.SecondaryReach)
                                                    MediaBroadcastWorksheetMarketDetail.SecondaryGrossImpressions = TotalSpots * MediaBroadcastWorksheetMarketDetail.SecondaryImpressions

                                                End If

                                            ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                                MediaBroadcastWorksheetMarketDetail.PrimaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating
                                                MediaBroadcastWorksheetMarketDetail.PrimaryReach = CalculateRadioReach(MediaBroadcastWorksheetMarketDetail.PrimaryAQH, MediaBroadcastWorksheetMarketDetail.PrimaryCume,
                                                                                                                           TotalSpots, MediaBroadcastWorksheetMarketDetail.PrimaryUniverse, MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating, MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating)
                                                MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CalculateRadioFrequency(MediaBroadcastWorksheetMarketDetail.PrimaryGRP, MediaBroadcastWorksheetMarketDetail.PrimaryReach)
                                                MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = MediaBroadcastWorksheetMarketDetail.PrimaryAQH * TotalSpots

                                                If ClearSecondaryRateAndShareData = False Then

                                                    MediaBroadcastWorksheetMarketDetail.SecondaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.SecondaryAQHRating
                                                    MediaBroadcastWorksheetMarketDetail.SecondaryReach = CalculateRadioReach(MediaBroadcastWorksheetMarketDetail.SecondaryAQH, MediaBroadcastWorksheetMarketDetail.SecondaryCume,
                                                                                                                           TotalSpots, MediaBroadcastWorksheetMarketDetail.SecondaryUniverse, MediaBroadcastWorksheetMarketDetail.SecondaryAQHRating, MediaBroadcastWorksheetMarketDetail.BookSecondaryAQHRating)
                                                    MediaBroadcastWorksheetMarketDetail.SecondaryFrequency = CalculateRadioFrequency(MediaBroadcastWorksheetMarketDetail.SecondaryGRP, MediaBroadcastWorksheetMarketDetail.SecondaryReach)
                                                    MediaBroadcastWorksheetMarketDetail.SecondaryGrossImpressions = MediaBroadcastWorksheetMarketDetail.SecondaryAQH * TotalSpots

                                                End If

                                            End If

                                        End If

                                        If ClearSecondaryRateAndShareData Then

                                            If MediaBroadcastWorksheetMarketDetail.BookSecondaryRating <> MediaBroadcastWorksheetMarketDetail.SecondaryRating Then

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryRating = 0

                                            Else

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryRating = 0
                                                MediaBroadcastWorksheetMarketDetail.SecondaryRating = 0

                                            End If

                                            If MediaBroadcastWorksheetMarketDetail.BookSecondaryShare <> MediaBroadcastWorksheetMarketDetail.SecondaryShare Then

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryShare = 0

                                            Else

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryShare = 0
                                                MediaBroadcastWorksheetMarketDetail.SecondaryShare = 0

                                            End If

                                            MediaBroadcastWorksheetMarketDetail.SecondaryHPUT = 0

                                            If MediaBroadcastWorksheetMarketDetail.BookSecondaryImpressions <> MediaBroadcastWorksheetMarketDetail.SecondaryImpressions Then

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryImpressions = 0

                                            Else

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryImpressions = 0
                                                MediaBroadcastWorksheetMarketDetail.SecondaryImpressions = 0

                                            End If

                                            MediaBroadcastWorksheetMarketDetail.SecondaryCPP = 0
                                            MediaBroadcastWorksheetMarketDetail.SecondaryGRP = 0
                                            MediaBroadcastWorksheetMarketDetail.SecondaryReach = 0
                                            MediaBroadcastWorksheetMarketDetail.SecondaryFrequency = 0
                                            MediaBroadcastWorksheetMarketDetail.SecondaryGrossImpressions = 0
                                            MediaBroadcastWorksheetMarketDetail.SecondaryUniverse = 0
                                            MediaBroadcastWorksheetMarketDetail.SecondaryCumeImpressions = 0

                                            If MediaBroadcastWorksheetMarketDetail.BookSecondaryAQHRating <> MediaBroadcastWorksheetMarketDetail.SecondaryAQHRating Then

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryAQHRating = 0

                                            Else

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryAQHRating = 0
                                                MediaBroadcastWorksheetMarketDetail.SecondaryAQHRating = 0

                                            End If

                                            If MediaBroadcastWorksheetMarketDetail.BookSecondaryAQH <> MediaBroadcastWorksheetMarketDetail.SecondaryAQH Then

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryAQH = 0

                                            Else

                                                MediaBroadcastWorksheetMarketDetail.BookSecondaryAQH = 0
                                                MediaBroadcastWorksheetMarketDetail.SecondaryAQH = 0

                                            End If

                                            MediaBroadcastWorksheetMarketDetail.SecondaryCumeRating = 0
                                            MediaBroadcastWorksheetMarketDetail.SecondaryCume = 0
                                            MediaBroadcastWorksheetMarketDetail.SecondaryCPM = 0

                                            MediaBroadcastWorksheetMarket.SecondaryMediaDemographicID = Nothing

                                        End If

                                    Next

                                End If

                            End If

                        Next

                        If MediaBroadcastWorksheetEditViewModel.UserHasAccessToMatchingTab AndAlso MediaBroadcastWorksheetEditViewModel.MediaBroadcastWorksheetSpotMatchingSettings IsNot Nothing AndAlso MediaBroadcastWorksheetEditViewModel.MediaBroadcastWorksheetSpotMatchingSettings.Count = 1 Then

                            SpotMatchingSetting = MediaBroadcastWorksheetEditViewModel.MediaBroadcastWorksheetSpotMatchingSettings(0)

                            MediaBroadcastWorksheetSpotMatchingSetting = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetSpotMatchingSetting.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheet.ID)

                            If MediaBroadcastWorksheetSpotMatchingSetting Is Nothing Then

                                MediaBroadcastWorksheetSpotMatchingSetting = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSpotMatchingSetting
                                MediaBroadcastWorksheetSpotMatchingSetting.MediaBroadcastWorksheetID = MediaBroadcastWorksheet.ID

                                SpotMatchingSetting.SaveToEntity(MediaBroadcastWorksheetSpotMatchingSetting)

                                DbContext.Entry(MediaBroadcastWorksheetSpotMatchingSetting).State = Entity.EntityState.Added

                            Else

                                MediaBroadcastWorksheetSpotMatchingSetting.MediaBroadcastWorksheetID = MediaBroadcastWorksheet.ID

                                SpotMatchingSetting.SaveToEntity(MediaBroadcastWorksheetSpotMatchingSetting)

                                DbContext.Entry(MediaBroadcastWorksheetSpotMatchingSetting).State = Entity.EntityState.Modified

                            End If

                        End If

                        DbContext.Configuration.AutoDetectChangesEnabled = True

                        DbContext.SaveChanges()

                    Else

                        ErrorMessage &= System.Environment.NewLine & "This worksheet is no longer valid in the system."

                    End If

                    DbContext.Database.Connection.Close()

                End Using

            End If

        End Sub
        Public Sub Edit_Delete(Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet, ByRef ErrorMessage As String)

            'objects
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim MediaBroadcastWorksheetSpotMatchingSetting As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSpotMatchingSetting = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.LoadByMediaBroadcastWorksheetID(DbContext, Worksheet.ID)

                If MediaBroadcastWorksheet IsNot Nothing Then

                    For Each MediaBroadcastWorksheetMarket In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, Worksheet.ID)

                        For Each MediaBroadcastWorksheetMarketDetail In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarket.ID)

                            For Each MediaBroadcastWorksheetMarketDetailDate In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketDetailID(DbContext, MediaBroadcastWorksheetMarketDetail.ID)

                                DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketDetailDate)

                            Next

                            For Each MediaBroadcastWorksheetMarketDetailSubmarketDemo In DbContext.GetQuery(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailSubmarketDemo).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetail.ID).ToList

                                DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketDetailSubmarketDemo)

                            Next

                            DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketDetail)

                        Next

                        For Each MediaBroadcastWorksheetMarketGoal In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarket.ID)

                            For Each MediaBroadcastWorksheetMarketGoalDate In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoalDate.LoadByMediaBroadcastWorksheetMarketGoalID(DbContext, MediaBroadcastWorksheetMarketGoal.ID)

                                DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketGoalDate)

                            Next

                            DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketGoal)

                        Next

                        For Each MediaBroadcastWorksheetMarketNielsenTVBook In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenTVBook.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarket.ID)

                            DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketNielsenTVBook)

                        Next

                        For Each MediaBroadcastWorksheetMarketSubmarket In DbContext.GetQuery(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).ToList

                            DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketSubmarket)

                        Next

                        For Each MediaBroadcastWorksheetMarketRevision In DbContext.GetQuery(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketRevision).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).ToList

                            DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketRevision)

                        Next

                        DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarket)

                    Next

                    For Each MediaBroadcastWorksheetSecondaryDemo In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetSecondaryDemo.LoadByMediaBroadcastWorksheetID(DbContext, Worksheet.ID)

                        DbContext.DeleteEntityObject(MediaBroadcastWorksheetSecondaryDemo)

                    Next

                    Try

                        MediaBroadcastWorksheetSpotMatchingSetting = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetSpotMatchingSetting.LoadByMediaBroadcastWorksheetID(DbContext, Worksheet.ID)

                    Catch ex As Exception
                        MediaBroadcastWorksheetSpotMatchingSetting = Nothing
                    End Try

                    If MediaBroadcastWorksheetSpotMatchingSetting IsNot Nothing Then

                        DbContext.DeleteEntityObject(MediaBroadcastWorksheetSpotMatchingSetting)

                        Try

                            For Each MediaBroadcastWorksheetTimeSeparationSetting In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetTimeSeparationSetting.LoadByMediaBroadcastWorksheetSpotMatchingSettingID(DbContext, MediaBroadcastWorksheetSpotMatchingSetting.ID).ToList

                                DbContext.DeleteEntityObject(MediaBroadcastWorksheetTimeSeparationSetting)

                            Next

                        Catch ex As Exception

                        End Try

                    End If

                    DbContext.DeleteEntityObject(MediaBroadcastWorksheet)

                    DbContext.SaveChanges()

                Else

                    ErrorMessage &= System.Environment.NewLine & "This worksheet is no longer valid in the system."

                End If

                DbContext.Database.Connection.Close()

            End Using

        End Sub

        Public Function Edit_ValidateWorksheet(Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet,
                                               IsAdding As Boolean, ByRef ErrorMessage As String) As Boolean

            'objects
            Dim IsValid As Boolean = True

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                If Worksheet.StartDate > Worksheet.EndDate Then

                    ErrorMessage &= System.Environment.NewLine & "Please select a start date on or before the end date."

                End If

                If Worksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Daily Then

                    If Math.Abs(DateDiff(DateInterval.Day, Worksheet.StartDate, Worksheet.EndDate)) > 180 Then

                        ErrorMessage &= System.Environment.NewLine & "Please select a date range of 180 days or less."

                    End If

                ElseIf Worksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                    If (Worksheet.EndDate - Worksheet.StartDate).TotalDays / 7 > 78 Then

                        ErrorMessage &= System.Environment.NewLine & "Please select a date range 78 weeks or less."

                    End If

                End If

                If AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Any(Function(Entity) Entity.Name.ToUpper = Worksheet.Name.ToUpper AndAlso Entity.ID <> Worksheet.ID) Then

                    ErrorMessage &= System.Environment.NewLine & "Please enter unique name for worksheet."

                End If

                If AdvantageFramework.Database.Procedures.Client.Load(DbContext).Any(Function(Entity) Entity.Code = Worksheet.ClientCode) = False Then

                    ErrorMessage &= System.Environment.NewLine & "Please enter a valid client."

                End If

                If AdvantageFramework.Database.Procedures.Division.Load(DbContext).Any(Function(Entity) Entity.ClientCode = Worksheet.ClientCode AndAlso Entity.Code = Worksheet.DivisionCode) = False Then

                    ErrorMessage &= System.Environment.NewLine & "Please enter a valid division."

                End If

                If AdvantageFramework.Database.Procedures.Product.Load(DbContext).Any(Function(Entity) Entity.ClientCode = Worksheet.ClientCode AndAlso
                                                                                                       Entity.DivisionCode = Worksheet.DivisionCode AndAlso
                                                                                                       Entity.Code = Worksheet.ProductCode) = False Then

                    ErrorMessage &= System.Environment.NewLine & "Please enter a valid product."

                End If

                If AdvantageFramework.Database.Procedures.SalesClass.Load(DbContext).Any(Function(Entity) Entity.Code = Worksheet.SalesClassCode AndAlso
                                                                                                          (Entity.SalesClassTypeCode = "R" OrElse Entity.SalesClassTypeCode = "T" OrElse
                                                                                                           Entity.SalesClassTypeCode Is Nothing OrElse Entity.SalesClassTypeCode = "")) = False Then

                    ErrorMessage &= System.Environment.NewLine & "Please enter a valid sales class."

                End If

                If AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetDateType.Load(DbContext).Any(Function(Entity) Entity.ID = Worksheet.MediaBroadcastWorksheetDateTypeID) = False Then

                    ErrorMessage &= System.Environment.NewLine & "Please enter a valid date type."

                End If

                If AdvantageFramework.Database.Procedures.MediaCalendarType.Load(DbContext).Any(Function(Entity) Entity.ID = Worksheet.MediaCalendarTypeID) = False Then

                    ErrorMessage &= System.Environment.NewLine & "Please enter a valid calendar type."

                End If

                If Worksheet.CampaignID.GetValueOrDefault(0) > 0 Then

                    If AdvantageFramework.Database.Procedures.Campaign.Load(DbContext).Any(Function(Entity) Entity.ID = Worksheet.CampaignID AndAlso Entity.ClientCode = Worksheet.ClientCode) = False Then

                        ErrorMessage &= System.Environment.NewLine & "Please enter a valid campaign."

                    End If

                End If

                If Worksheet.MediaPlanID.GetValueOrDefault(0) > 0 Then

                    If AdvantageFramework.Database.Procedures.MediaPlan.Load(DbContext).Any(Function(Entity) Entity.ID = Worksheet.MediaPlanID) = False Then

                        ErrorMessage &= System.Environment.NewLine & "Please enter a valid media plan."

                    End If

                End If

                'If IsAdding Then

                '    If Worksheet.CountryID = AdvantageFramework.DTO.Countries.Canada Then

                '        If DbContext.Markets.Any(Function(Entity) Entity.CountryID = AdvantageFramework.DTO.Countries.Canada AndAlso Entity.IsAllCanada = True) = False Then

                '            ErrorMessage &= System.Environment.NewLine & "An ‘all-Canada’ market must be on file before you can create a Canadian worksheet."

                '        End If

                '    End If

                'End If

            End Using

            Edit_ValidateWorksheet = String.IsNullOrWhiteSpace(ErrorMessage)

        End Function
        Public Sub Edit_LoadSalesClasses(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, MediaTypeCode As String)

            'objects
            Dim SalesClasses As Generic.List(Of AdvantageFramework.Database.Entities.SalesClass) = Nothing

            If String.IsNullOrWhiteSpace(MediaTypeCode) = False Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    If MediaTypeCode = "N" Then

                        SalesClasses = (From Entity In AdvantageFramework.Database.Procedures.SalesClass.LoadAllActive(DbContext).ToList
                                        Where Entity.SalesClassTypeCode = "T" OrElse
                                              Entity.SalesClassTypeCode Is Nothing OrElse
                                              Entity.SalesClassTypeCode = ""
                                        Select Entity).ToList


                    Else

                        SalesClasses = (From Entity In AdvantageFramework.Database.Procedures.SalesClass.LoadAllActive(DbContext).ToList
                                        Where Entity.SalesClassTypeCode = MediaTypeCode OrElse
                                              Entity.SalesClassTypeCode Is Nothing OrElse
                                              Entity.SalesClassTypeCode = ""
                                        Select Entity).ToList

                    End If

                End Using

            Else

                SalesClasses = New Generic.List(Of AdvantageFramework.Database.Entities.SalesClass)

            End If

            MediaBroadcastWorksheetEditViewModel.SalesClasses = SalesClasses.Select(Function(Entity) New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

        End Sub
        Public Sub Edit_LoadDivisions(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, ClientCode As String)

            'objects
            Dim Divisions As Generic.List(Of AdvantageFramework.Database.Entities.Division) = Nothing
            Dim Division As AdvantageFramework.Database.Entities.Division = Nothing
            Dim Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet = Nothing

            If String.IsNullOrWhiteSpace(ClientCode) = False Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        Divisions = AdvantageFramework.Database.Procedures.Division.LoadAllActiveByUserCodeWithOfficeLimits(Me.Session, DbContext, SecurityDbContext).Where(Function(Entity) Entity.ClientCode = ClientCode).ToList

                    End Using

                End Using

            Else

                Divisions = New Generic.List(Of AdvantageFramework.Database.Entities.Division)

            End If

            Worksheet = MediaBroadcastWorksheetEditViewModel.Worksheet

            If String.IsNullOrWhiteSpace(Worksheet.ClientCode) = False AndAlso String.IsNullOrWhiteSpace(Worksheet.DivisionCode) = False AndAlso
                    Divisions.Any(Function(Entity) Entity.ClientCode = Worksheet.ClientCode AndAlso Entity.Code = Worksheet.DivisionCode) = False Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    Division = AdvantageFramework.Database.Procedures.Division.LoadByClientAndDivisionCode(DbContext, Worksheet.ClientCode, Worksheet.DivisionCode)

                    If Division IsNot Nothing Then

                        Divisions.Add(Division)

                    End If

                End Using

            End If

            MediaBroadcastWorksheetEditViewModel.Divisions = Divisions.Select(Function(Entity) New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

        End Sub
        Public Sub Edit_LoadProducts(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, ClientCode As String, DivisionCode As String)

            'objects
            Dim Products As Generic.List(Of AdvantageFramework.Database.Views.ProductView) = Nothing
            Dim Product As AdvantageFramework.Database.Views.ProductView = Nothing
            Dim Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet = Nothing

            If String.IsNullOrWhiteSpace(ClientCode) = False AndAlso String.IsNullOrWhiteSpace(DivisionCode) = False Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        Products = AdvantageFramework.Database.Procedures.ProductView.LoadAllActiveByUserCodeWithOfficeLimits(Me.Session, DbContext, SecurityDbContext).Where(Function(Entity) Entity.ClientCode = ClientCode AndAlso Entity.DivisionCode = DivisionCode).ToList

                    End Using

                End Using

            Else

                Products = New Generic.List(Of AdvantageFramework.Database.Views.ProductView)

            End If

            Worksheet = MediaBroadcastWorksheetEditViewModel.Worksheet

            If String.IsNullOrWhiteSpace(Worksheet.ClientCode) = False AndAlso String.IsNullOrWhiteSpace(Worksheet.DivisionCode) = False AndAlso String.IsNullOrWhiteSpace(Worksheet.ProductCode) = False AndAlso
                    Products.Any(Function(Entity) Entity.ClientCode = Worksheet.ClientCode AndAlso Entity.DivisionCode = Worksheet.DivisionCode AndAlso Entity.ProductCode = Worksheet.ProductCode) = False Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    Product = AdvantageFramework.Database.Procedures.ProductView.Load(DbContext).FirstOrDefault(Function(Entity) Entity.ClientCode = Worksheet.ClientCode AndAlso Entity.DivisionCode = Worksheet.DivisionCode AndAlso Entity.ProductCode = Worksheet.ProductCode)

                    If Product IsNot Nothing Then

                        Products.Add(Product)

                    End If

                End Using

            End If

            MediaBroadcastWorksheetEditViewModel.Products = Products.Select(Function(Entity) New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

        End Sub
        Public Sub Edit_LoadCampaigns(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel,
                                      ClientCode As String, MediaPlanID As Integer, StartDate As Date, EndDate As Date)

            'objects
            Dim Campaigns As Generic.List(Of AdvantageFramework.Database.Entities.Campaign) = Nothing
            Dim CampaignIDs As Generic.List(Of Integer) = Nothing
            Dim HeaderCampaignIDs As Generic.List(Of Integer) = Nothing
            Dim LevelCampaignIDs As Generic.List(Of Integer) = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                Campaigns = AdvantageFramework.Database.Procedures.Campaign.Load(DbContext).ToList

                If String.IsNullOrWhiteSpace(ClientCode) = False Then

                    If MediaPlanID > 0 Then

                        HeaderCampaignIDs = AdvantageFramework.Database.Procedures.MediaPlanDetail.LoadByMediaPlanID(DbContext, MediaPlanID).ToList.Where(Function(Entity) Entity.CampaignID.GetValueOrDefault(0) > 0).Select(Function(Entity) Entity.CampaignID.GetValueOrDefault(0)).ToList
                        LevelCampaignIDs = AdvantageFramework.Database.Procedures.MediaPlanDetailLevelLineTag.LoadByMediaPlanID(DbContext, MediaPlanID).ToList.Where(Function(Entity) Entity.CampaignID.GetValueOrDefault(0) > 0).Select(Function(Entity) Entity.CampaignID.GetValueOrDefault(0)).ToList

                        CampaignIDs = New Generic.List(Of Integer)

                        If HeaderCampaignIDs IsNot Nothing AndAlso HeaderCampaignIDs.Count > 0 Then

                            CampaignIDs.AddRange(HeaderCampaignIDs)

                        End If

                        If LevelCampaignIDs IsNot Nothing AndAlso LevelCampaignIDs.Count > 0 Then

                            CampaignIDs.AddRange(LevelCampaignIDs)

                        End If

                        CampaignIDs = CampaignIDs.Distinct.ToList

                        If CampaignIDs.Count > 0 Then

                            Campaigns = Campaigns.Where(Function(Entity) Entity.ClientCode = ClientCode AndAlso CampaignIDs.Contains(Entity.ID)).ToList

                        Else

                            Campaigns = Campaigns.Where(Function(Entity) Entity.ClientCode = ClientCode AndAlso Entity.IsClosed.GetValueOrDefault(0) = 0 AndAlso
                                                                         ((Entity.StartDate.HasValue = False OrElse Entity.EndDate.HasValue = False) OrElse
                                                                          (StartDate >= Entity.StartDate.GetValueOrDefault(StartDate) AndAlso StartDate <= Entity.EndDate.GetValueOrDefault(EndDate)) OrElse
                                                                          (EndDate >= Entity.StartDate.GetValueOrDefault(StartDate) AndAlso EndDate <= Entity.EndDate.GetValueOrDefault(EndDate)))).ToList

                        End If

                    Else

                        Campaigns = Campaigns.Where(Function(Entity) Entity.ClientCode = ClientCode AndAlso Entity.IsClosed.GetValueOrDefault(0) = 0 AndAlso
                                                                         ((Entity.StartDate.HasValue = False OrElse Entity.EndDate.HasValue = False) OrElse
                                                                          (StartDate >= Entity.StartDate.GetValueOrDefault(StartDate) AndAlso StartDate <= Entity.EndDate.GetValueOrDefault(EndDate)) OrElse
                                                                          (EndDate >= Entity.StartDate.GetValueOrDefault(StartDate) AndAlso EndDate <= Entity.EndDate.GetValueOrDefault(EndDate)))).ToList

                    End If

                Else

                    Campaigns = New Generic.List(Of AdvantageFramework.Database.Entities.Campaign)

                End If

            End Using

            MediaBroadcastWorksheetEditViewModel.Campaigns = Campaigns.Select(Function(Entity) New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

        End Sub
        Public Sub Edit_LoadMediaPlans(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, ClientCode As String, DivisionCode As String, ProductCode As String)

            'objects
            Dim MediaPlans As Generic.List(Of AdvantageFramework.Database.Entities.MediaPlan) = Nothing

            If String.IsNullOrWhiteSpace(ClientCode) = False AndAlso String.IsNullOrWhiteSpace(DivisionCode) = False AndAlso String.IsNullOrWhiteSpace(ProductCode) = False Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    MediaPlans = AdvantageFramework.Database.Procedures.MediaPlan.LoadAllActive(DbContext).Include("MediaPlanDetails").
                                                                                  Where(Function(Entity) Entity.ClientCode = ClientCode AndAlso
                                                                                                         Entity.DivisionCode = DivisionCode AndAlso
                                                                                                         Entity.ProductCode = ProductCode AndAlso
                                                                                                         Entity.MediaPlanDetails.Any(Function(MPD) MPD.SalesClassType = "R" OrElse MPD.SalesClassType = "T") = True).ToList

                End Using

            Else

                MediaPlans = New Generic.List(Of AdvantageFramework.Database.Entities.MediaPlan)

            End If

            MediaBroadcastWorksheetEditViewModel.MediaPlans = MediaPlans.Select(Function(Entity) New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

        End Sub
        Public Sub Edit_MediaPlanChanged(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, MediaPlanID As Integer)

            'objects
            Dim MediaPlan As AdvantageFramework.Database.Entities.MediaPlan = Nothing
            Dim HasOrdersInDateRange As Boolean = True

            If MediaPlanID > 0 Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    MediaPlan = AdvantageFramework.Database.Procedures.MediaPlan.LoadByMediaPlanID(DbContext, MediaPlanID)

                    If MediaPlan IsNot Nothing Then

                        If MediaBroadcastWorksheetEditViewModel.HasOrdersBeenCreated Then

                            If MediaBroadcastWorksheetEditViewModel.Worksheet.EndDate > MediaPlan.EndDate Then

                                Try

                                    HasOrdersInDateRange = DbContext.Database.SqlQuery(Of Boolean)(String.Format("SELECT 
	                                                                                                                    CAST(ISNULL(MAX(CASE WHEN ORDER_NBR IS NULL THEN 0 ELSE 1 END), 0) AS bit)
                                                                                                                    FROM 
	                                                                                                                    dbo.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_DATE 
                                                                                                                    WHERE 
	                                                                                                                    MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_ID IN (SELECT 
														                                                                                                                    MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_ID 
												                                                                                                                       FROM 
														                                                                                                                    dbo.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL 
												                                                                                                                       WHERE 
														                                                                                                                    MEDIA_BROADCAST_WORKSHEET_MARKET_ID IN (SELECT 
																									                                                                                                                    MEDIA_BROADCAST_WORKSHEET_MARKET_ID 
																								                                                                                                                    FROM 
																									                                                                                                                    dbo.MEDIA_BROADCAST_WORKSHEET_MARKET 
																								                                                                                                                    WHERE 
																									                                                                                                                    MEDIA_BROADCAST_WORKSHEET_ID = {2}))
	                                                                                                                    AND [DATE] >= '{0}' AND [DATE] <= '{1}'",
                                                                                                                 MediaPlan.EndDate.ToShortDateString,
                                                                                                                 MediaBroadcastWorksheetEditViewModel.Worksheet.EndDate.ToShortDateString,
                                                                                                                 MediaBroadcastWorksheetEditViewModel.Worksheet.ID)).FirstOrDefault

                                Catch ex As Exception
                                    HasOrdersInDateRange = True
                                End Try

                                If HasOrdersInDateRange = False Then

                                    MediaBroadcastWorksheetEditViewModel.Worksheet.EndDate = MediaPlan.EndDate

                                End If

                            Else

                                MediaBroadcastWorksheetEditViewModel.Worksheet.EndDate = MediaPlan.EndDate

                            End If

                        Else

                            MediaBroadcastWorksheetEditViewModel.Worksheet.StartDate = MediaPlan.StartDate
                            MediaBroadcastWorksheetEditViewModel.Worksheet.EndDate = MediaPlan.EndDate

                        End If

                    End If

                End Using

                MediaBroadcastWorksheetEditViewModel.Worksheet.MediaPlanComments = GetMediaPlanComments(MediaBroadcastWorksheetEditViewModel.Worksheet.MediaTypeCode, MediaPlanID)

            Else

                MediaBroadcastWorksheetEditViewModel.Worksheet.MediaPlanComments = String.Empty

            End If

        End Sub
        Public Function Edit_LoadPrimaryMediaDemographics(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, MediaTypeCode As String, RatingsSourceID As Integer) As Generic.List(Of AdvantageFramework.DTO.Media.MediaDemographic)

            'objects
            Dim MediaDemographics As Generic.List(Of AdvantageFramework.DTO.Media.MediaDemographic) = Nothing
            Dim MediaDemographic As AdvantageFramework.DTO.Media.MediaDemographic = Nothing
            Dim Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet = Nothing
            Dim PrimaryMediaDemographicID As Integer = 0

            MediaDemographics = New Generic.List(Of AdvantageFramework.DTO.Media.MediaDemographic)

            If String.IsNullOrWhiteSpace(MediaTypeCode) = False Then

                If RatingsSourceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso Entity.IsInactive = False AndAlso Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.Nielsen).ToList

                ElseIf RatingsSourceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso
                                                                                                                      Entity.IsInactive = False AndAlso
                                                                                                                      Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.Comscore).OrderBy(Function(Entity) Entity.GroupSortOrder).ThenBy(Function(Entity) Entity.Group).ThenBy(Function(Entity) Entity.Category).ToList

                ElseIf RatingsSourceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Numeris Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso Entity.IsInactive = False AndAlso Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.Numeris).ToList

                ElseIf RatingsSourceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.OzTAM Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso Entity.IsInactive = False AndAlso Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.OzTAM).ToList

                ElseIf RatingsSourceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.NielsenPuertoRico Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso Entity.IsInactive = False AndAlso Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.NielsenPuertoRico).ToList

                End If

            End If

            If MediaDemographics.Count > 0 Then

                Worksheet = MediaBroadcastWorksheetEditViewModel.Worksheet
                PrimaryMediaDemographicID = Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0)

                If PrimaryMediaDemographicID > 0 AndAlso
                        MediaDemographics.Any(Function(Entity) Entity.ID = PrimaryMediaDemographicID) = False Then

                    MediaDemographic = MediaBroadcastWorksheetEditViewModel.MediaDemographics.FirstOrDefault(Function(Entity) Entity.ID = PrimaryMediaDemographicID)

                    If MediaDemographic IsNot Nothing Then

                        MediaDemographics.Add(MediaDemographic)

                    End If

                End If

                For Each MediaDemographic In MediaDemographics.ToList

                    If MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos.Any(Function(Entity) Entity.MediaDemographicID = MediaDemographic.ID) Then

                        MediaDemographics.Remove(MediaDemographic)

                    End If

                Next

                If Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    For Each MediaDemographic In MediaDemographics.ToList

                        If MediaDemographic.Code = "Tww" OrElse MediaDemographic.Code = "TF1214" OrElse MediaDemographic.Code = "TF1517" OrElse
                                MediaDemographic.Code = "TM1214" OrElse MediaDemographic.Code = "TM1517" Then

                            MediaDemographics.Remove(MediaDemographic)

                        End If

                    Next

                End If

            End If

            Edit_LoadPrimaryMediaDemographics = MediaDemographics.ToList

        End Function
        Public Function Edit_LoadSecondaryMediaDemographics(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel,
                                                            MediaTypeCode As String, PrimaryMediaDemographicID As Integer, RatingsServiceID As Integer) As Generic.List(Of AdvantageFramework.DTO.Media.MediaDemographic)

            'objects
            Dim MediaDemographics As Generic.List(Of AdvantageFramework.DTO.Media.MediaDemographic) = Nothing
            Dim MediaDemographic As AdvantageFramework.DTO.Media.MediaDemographic = Nothing
            Dim Worksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet = Nothing
            Dim MediaDemographicID As Integer = 0

            MediaDemographics = New Generic.List(Of AdvantageFramework.DTO.Media.MediaDemographic)

            If String.IsNullOrWhiteSpace(MediaTypeCode) = False Then

                If RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso Entity.IsInactive = False AndAlso Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.Nielsen).ToList

                ElseIf RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso
                                                                                                                      Entity.IsInactive = False AndAlso
                                                                                                                      Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.Comscore).OrderBy(Function(Entity) Entity.GroupSortOrder).ThenBy(Function(Entity) Entity.Group).ThenBy(Function(Entity) Entity.Category).ToList

                ElseIf RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Numeris Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso Entity.IsInactive = False AndAlso Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.Numeris).ToList

                ElseIf RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.OzTAM Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso Entity.IsInactive = False AndAlso Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.OzTAM).OrderBy(Function(Entity) Entity.ID).ToList

                ElseIf RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.NielsenPuertoRico Then

                    MediaDemographics = MediaBroadcastWorksheetEditViewModel.MediaDemographics.Where(Function(Entity) Entity.Type = MediaTypeCode AndAlso Entity.IsInactive = False AndAlso Entity.MediaDemoSourceID = AdvantageFramework.Database.Entities.MediaDemoSourceID.NielsenPuertoRico).OrderBy(Function(Entity) Entity.ID).ToList

                End If

            End If

            If MediaDemographics.Count > 0 Then

                Worksheet = MediaBroadcastWorksheetEditViewModel.Worksheet

                For Each WorksheetSecondaryDemo In MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos

                    MediaDemographicID = WorksheetSecondaryDemo.MediaDemographicID

                    If MediaDemographicID > 0 AndAlso
                                MediaDemographics.Any(Function(Entity) Entity.ID = MediaDemographicID) = False Then

                        MediaDemographic = MediaBroadcastWorksheetEditViewModel.MediaDemographics.FirstOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                        If MediaDemographic IsNot Nothing Then

                            MediaDemographics.Add(MediaDemographic)

                        End If

                    End If

                Next

                For Each MediaDemographic In MediaDemographics.ToList

                    If MediaDemographic.ID = PrimaryMediaDemographicID OrElse
                            MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos.Any(Function(Entity) Entity.MediaDemographicID = MediaDemographic.ID) Then

                        MediaDemographics.Remove(MediaDemographic)

                    End If

                Next

                If Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    For Each MediaDemographic In MediaDemographics.ToList

                        If MediaDemographic.Code = "Tww" OrElse MediaDemographic.Code = "TF1214" OrElse MediaDemographic.Code = "TF1517" OrElse
                                MediaDemographic.Code = "TM1214" OrElse MediaDemographic.Code = "TM1517" Then

                            MediaDemographics.Remove(MediaDemographic)

                        End If

                    Next

                End If

            End If

            Edit_LoadSecondaryMediaDemographics = MediaDemographics

        End Function
        Public Sub Edit_SecondaryDemoSelectionChanged(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel,
                                                      IsNewItemRow As Boolean,
                                                      SelectedWorksheetSecondaryDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetSecondaryDemo)

            MediaBroadcastWorksheetEditViewModel.SecondaryDemo_IsNewItemRow = IsNewItemRow
            MediaBroadcastWorksheetEditViewModel.SecondaryDemo_CancelEnabled = IsNewItemRow
            MediaBroadcastWorksheetEditViewModel.SecondaryDemo_DeleteEnabled = Not IsNewItemRow

            MediaBroadcastWorksheetEditViewModel.SelectedWorksheetSecondaryDemo = SelectedWorksheetSecondaryDemo

            If MediaBroadcastWorksheetEditViewModel.SecondaryDemo_DeleteEnabled AndAlso MediaBroadcastWorksheetEditViewModel.SelectedWorksheetSecondaryDemo Is Nothing Then

                MediaBroadcastWorksheetEditViewModel.SecondaryDemo_DeleteEnabled = False

            End If

        End Sub
        Public Sub Edit_SecondaryDemoInitNewRowEvent(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel)

            MediaBroadcastWorksheetEditViewModel.SecondaryDemo_IsNewItemRow = True
            MediaBroadcastWorksheetEditViewModel.SecondaryDemo_CancelEnabled = True
            MediaBroadcastWorksheetEditViewModel.SecondaryDemo_DeleteEnabled = False

        End Sub
        Public Function Edit_SecondaryDemoValidateEntity(WorksheetSecondaryDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetSecondaryDemo, ByRef IsValid As Boolean) As String

            'objects
            Dim ErrorText As String = String.Empty

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    ErrorText = ValidateDTO(DbContext, DataContext, WorksheetSecondaryDemo, IsValid)

                End Using

            End Using

            Edit_SecondaryDemoValidateEntity = ErrorText

        End Function
        Public Function Edit_SecondaryDemoValidateProperty(WorksheetSecondaryDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetSecondaryDemo, FieldName As String, ByRef IsValid As Boolean, ByRef Value As Object) As String

            'objects
            Dim ErrorText As String = String.Empty
            Dim PropertyDescriptor As System.ComponentModel.PropertyDescriptor = Nothing

            PropertyDescriptor = System.ComponentModel.TypeDescriptor.GetProperties(WorksheetSecondaryDemo.GetType).OfType(Of System.ComponentModel.PropertyDescriptor)().FirstOrDefault(Function(PD) PD.Name = FieldName)

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    ErrorText = ValidateDTOProperty(DbContext, DataContext, WorksheetSecondaryDemo, PropertyDescriptor, IsValid, Value)

                End Using

            End Using

            Edit_SecondaryDemoValidateProperty = ErrorText

        End Function
        Public Sub Edit_SecondaryDemoCancelNewItemRow(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel)

            MediaBroadcastWorksheetEditViewModel.SecondaryDemo_IsNewItemRow = False
            MediaBroadcastWorksheetEditViewModel.SecondaryDemo_CancelEnabled = False
            MediaBroadcastWorksheetEditViewModel.SecondaryDemo_DeleteEnabled = MediaBroadcastWorksheetEditViewModel.HasASelectedWorksheetSecondaryDemo

        End Sub
        Public Sub Edit_SecondaryDemoDelete(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel,
                                            SelectedWorksheetSecondaryDemos As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetSecondaryDemo))

            For Each WorksheetSecondaryDemo In SelectedWorksheetSecondaryDemos

                MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos.Remove(WorksheetSecondaryDemo)

            Next

        End Sub
        Public Function Edit_GetRepositoryMediaDemographicCode(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel,
                                                               MediaDemographicID As Integer) As String

            'objects
            Dim MediaDemographicCode As String = String.Empty
            Dim MediaDemographic As AdvantageFramework.DTO.Media.MediaDemographic = Nothing

            MediaDemographic = MediaBroadcastWorksheetEditViewModel.MediaDemographics.FirstOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

            If MediaDemographic IsNot Nothing Then

                MediaDemographicCode = MediaDemographic.Code

            End If

            Edit_GetRepositoryMediaDemographicCode = MediaDemographicCode

        End Function
        Public Function Edit_GetRepositoryMediaDemographicDescription(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel,
                                                                      MediaDemographicID As Integer) As String

            'objects
            Dim MediaDemographicDescription As String = String.Empty
            Dim MediaDemographic As AdvantageFramework.DTO.Media.MediaDemographic = Nothing

            MediaDemographic = MediaBroadcastWorksheetEditViewModel.MediaDemographics.FirstOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

            If MediaDemographic IsNot Nothing Then

                MediaDemographicDescription = MediaDemographic.Description

            End If

            Edit_GetRepositoryMediaDemographicDescription = MediaDemographicDescription

        End Function
        Public Sub Edit_MediaTypeChanged(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel)

            Edit_LoadMediaTypeDefaults(MediaBroadcastWorksheetEditViewModel)

            MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID = Nothing
            MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicCode = String.Empty
            MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicDescription = String.Empty

            MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos.Clear()

        End Sub
        Public Sub Edit_LoadMediaTypeDefaults(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel)

            Edit_LoadSalesClasses(MediaBroadcastWorksheetEditViewModel, MediaBroadcastWorksheetEditViewModel.Worksheet.MediaTypeCode)

            If MediaBroadcastWorksheetEditViewModel.Worksheet.MediaTypeCode = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.T.ToString Then

                MediaBroadcastWorksheetEditViewModel.ProrateSecondaryDemosToPrimaryEnabled = True

                If MediaBroadcastWorksheetEditViewModel.AddVisible Then

                    MediaBroadcastWorksheetEditViewModel.DefaultToLatestSharebookEnabled = True

                Else

                    MediaBroadcastWorksheetEditViewModel.DefaultToLatestSharebookEnabled = (MediaBroadcastWorksheetEditViewModel.HasDataBeenEnteredInAnyMarketSchedules = False)

                End If

            Else

                MediaBroadcastWorksheetEditViewModel.Worksheet.ProrateSecondaryDemosToPrimary = False
                MediaBroadcastWorksheetEditViewModel.Worksheet.DefaultToLatestSharebook = False
                MediaBroadcastWorksheetEditViewModel.Worksheet.NPRPrepopulateDates = False

                MediaBroadcastWorksheetEditViewModel.ProrateSecondaryDemosToPrimaryEnabled = False
                MediaBroadcastWorksheetEditViewModel.DefaultToLatestSharebookEnabled = False

            End If

            If MediaBroadcastWorksheetEditViewModel.Worksheet.MediaPlanID.HasValue Then

                MediaBroadcastWorksheetEditViewModel.Worksheet.MediaPlanComments = GetMediaPlanComments(MediaBroadcastWorksheetEditViewModel.Worksheet.MediaTypeCode, MediaBroadcastWorksheetEditViewModel.Worksheet.MediaPlanID.Value)

            End If

        End Sub
        'Public Sub Edit_DateTypeChanged(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel)

        '    If MediaBroadcastWorksheetEditViewModel.Worksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Daily Then

        '        MediaBroadcastWorksheetEditViewModel.Worksheet.CreateOrdersByWeek = False

        '    End If

        'End Sub
        Public Sub Edit_PrimaryMediaDemographicsChanged(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel)

            If MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) = 0 Then

                MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos.Clear()

            End If

        End Sub
        Public Sub Edit_GetTVRatingAndShareData(DbContext As AdvantageFramework.Database.DbContext, MediaDemographicID As Integer, NielsenMarketNumber As Integer,
                                                SharebookNielsenTVBookID As Integer, HUTPUTNielsenTVBookID As Nullable(Of Integer),
                                                ByRef MediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail)

            'objects
            Dim BookIDs() As String = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim StationCode As String = String.Empty
            Dim TotalSpots As Integer = 0

            If MediaBroadcastWorksheetMarketDetail.Vendor IsNot Nothing Then

                If MediaBroadcastWorksheetMarketDetail.Vendor.IsCableSystem Then

                    If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetail.CableNetworkStationCode) = False AndAlso
                            MediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode.GetValueOrDefault(0) <> 0 Then

                        StationCode = MediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode

                    End If

                Else

                    If MediaBroadcastWorksheetMarketDetail.Vendor.NielsenTVStationCode.HasValue Then

                        StationCode = MediaBroadcastWorksheetMarketDetail.Vendor.NielsenTVStationCode.Value

                    End If

                End If

            End If

            If String.IsNullOrWhiteSpace(StationCode) = False Then

                BookIDs = New String() {SharebookNielsenTVBookID.ToString}

                If HUTPUTNielsenTVBookID.HasValue Then

                    HPUTBookIDs = New String() {HUTPUTNielsenTVBookID.Value.ToString}

                Else

                    HPUTBookIDs = New String() {}

                End If

                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                If MediaDemographic IsNot Nothing Then

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                Else

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                End If

                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                StationCodes = New String() {StationCode}

                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(MediaBroadcastWorksheetMarketDetail)}

                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                    TVWorksheetRatingAndShareDataList = GetNielsenTVRatingAndShareData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs,
                                                                                       HPUTBookIDs, MediaDemoTypes, MediaDemoDetailTypes, StationCodes,
                                                                                       MediaSpotTVResearchDaytimeTypes,
                                                                                       AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext))

                End Using

                If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                    For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating
                            MediaBroadcastWorksheetMarketDetail.PrimaryRating = TVWorksheetRatingAndShareData.Rating

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share
                            MediaBroadcastWorksheetMarketDetail.PrimaryShare = TVWorksheetRatingAndShareData.Share

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = TVWorksheetRatingAndShareData.HPUT

                        If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName
                            MediaBroadcastWorksheetMarketDetail.Program = TVWorksheetRatingAndShareData.ProgramName

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions
                            MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = TVWorksheetRatingAndShareData.Universe
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                        If MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions > MediaBroadcastWorksheetMarketDetail.PrimaryUniverse Then

                            MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                        End If

                    Next

                Else

                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                    End If

                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                    End If

                    MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                    If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                        MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                        MediaBroadcastWorksheetMarketDetail.Program = String.Empty

                    End If

                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                    End If

                    MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                    MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                End If

                TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                MediaBroadcastWorksheetMarketDetail.PrimaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryRating
                MediaBroadcastWorksheetMarketDetail.PrimaryCPP = If(MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0, 0, MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryRating)

                MediaBroadcastWorksheetMarketDetail.PrimaryReach = CalculateTVReach(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions, MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions,
                                                                                    TotalSpots, MediaBroadcastWorksheetMarketDetail.PrimaryUniverse, MediaBroadcastWorksheetMarketDetail.PrimaryRating, MediaBroadcastWorksheetMarketDetail.BookPrimaryRating)
                MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CalculateTVFrequency(MediaBroadcastWorksheetMarketDetail.PrimaryGRP, MediaBroadcastWorksheetMarketDetail.PrimaryReach)

                MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryImpressions
                MediaBroadcastWorksheetMarketDetail.PrimaryCPM = If(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions <> 0, (MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryImpressions) * 1000, 0)

            End If

        End Sub
        Public Sub Edit_GetTVRatingAndShareData(DbContext As AdvantageFramework.Database.DbContext, MediaDemographicID As Integer, NielsenMarketNumber As Integer,
                                                SharebookNielsenTVBookID As Integer, HUTPUTNielsenTVBookID As Nullable(Of Integer),
                                                ByRef MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail))

            'objects
            Dim BookIDs() As String = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim StationCode As String = String.Empty
            Dim TotalSpots As Integer = 0
            Dim FirstMediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail = Nothing
            Dim TVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing

            Try

                FirstMediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetails.FirstOrDefault

            Catch ex As Exception
                FirstMediaBroadcastWorksheetMarketDetail = Nothing
            End Try

            If FirstMediaBroadcastWorksheetMarketDetail IsNot Nothing AndAlso FirstMediaBroadcastWorksheetMarketDetail.Vendor IsNot Nothing Then

                If FirstMediaBroadcastWorksheetMarketDetail.Vendor.IsCableSystem Then

                    If String.IsNullOrWhiteSpace(FirstMediaBroadcastWorksheetMarketDetail.CableNetworkStationCode) = False AndAlso
                            FirstMediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode.GetValueOrDefault(0) <> 0 Then

                        StationCode = FirstMediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode

                    End If

                Else

                    If FirstMediaBroadcastWorksheetMarketDetail.Vendor.NielsenTVStationCode.HasValue Then

                        StationCode = FirstMediaBroadcastWorksheetMarketDetail.Vendor.NielsenTVStationCode.Value

                    End If

                End If

            End If

            If String.IsNullOrWhiteSpace(StationCode) = False Then

                BookIDs = New String() {SharebookNielsenTVBookID.ToString}

                If HUTPUTNielsenTVBookID.HasValue Then

                    HPUTBookIDs = New String() {HUTPUTNielsenTVBookID.Value.ToString}

                Else

                    HPUTBookIDs = New String() {}

                End If

                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                If MediaDemographic IsNot Nothing Then

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                Else

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                End If

                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                StationCodes = New String() {StationCode}

                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails

                    MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(MediaBroadcastWorksheetMarketDetail))

                Next

                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                    TVWorksheetRatingAndShareDataList = GetNielsenTVRatingAndShareData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs,
                                                                                       HPUTBookIDs, MediaDemoTypes, MediaDemoDetailTypes, StationCodes,
                                                                                       MediaSpotTVResearchDaytimeTypes,
                                                                                       AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext))

                End Using

                For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails

                    Try

                        TVWorksheetRatingAndShareData = TVWorksheetRatingAndShareDataList.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetail.ID)

                    Catch ex As Exception
                        TVWorksheetRatingAndShareData = Nothing
                    End Try

                    If TVWorksheetRatingAndShareData IsNot Nothing Then

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating
                            MediaBroadcastWorksheetMarketDetail.PrimaryRating = TVWorksheetRatingAndShareData.Rating

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share
                            MediaBroadcastWorksheetMarketDetail.PrimaryShare = TVWorksheetRatingAndShareData.Share

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = TVWorksheetRatingAndShareData.HPUT

                        If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName
                            MediaBroadcastWorksheetMarketDetail.Program = TVWorksheetRatingAndShareData.ProgramName

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions
                            MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = TVWorksheetRatingAndShareData.Universe
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                        If MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions > MediaBroadcastWorksheetMarketDetail.PrimaryUniverse Then

                            MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                        If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                            MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                            MediaBroadcastWorksheetMarketDetail.Program = String.Empty

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                    End If

                    TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                    MediaBroadcastWorksheetMarketDetail.PrimaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryRating
                    MediaBroadcastWorksheetMarketDetail.PrimaryCPP = If(MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0, 0, MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryRating)

                    MediaBroadcastWorksheetMarketDetail.PrimaryReach = CalculateTVReach(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions, MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions,
                                                                                    TotalSpots, MediaBroadcastWorksheetMarketDetail.PrimaryUniverse, MediaBroadcastWorksheetMarketDetail.PrimaryRating, MediaBroadcastWorksheetMarketDetail.BookPrimaryRating)
                    MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CalculateTVFrequency(MediaBroadcastWorksheetMarketDetail.PrimaryGRP, MediaBroadcastWorksheetMarketDetail.PrimaryReach)

                    MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryImpressions
                    MediaBroadcastWorksheetMarketDetail.PrimaryCPM = If(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions <> 0, (MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryImpressions) * 1000, 0)

                Next

            End If

        End Sub
        Public Sub Edit_GetTVCableRatingAndShareData(DbContext As AdvantageFramework.Database.DbContext, MediaDemographicID As Integer, NielsenMarketNumber As Integer,
                                                     SharebookNielsenTVBookID As Integer, HUTPUTNielsenTVBookID As Nullable(Of Integer),
                                                     ByRef MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail))

            'objects
            Dim BookIDs() As String = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim StationCode As String = String.Empty
            Dim TotalSpots As Integer = 0
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim FirstMediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail = Nothing
            Dim TVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing

            Try

                FirstMediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetails.FirstOrDefault

            Catch ex As Exception
                FirstMediaBroadcastWorksheetMarketDetail = Nothing
            End Try

            If FirstMediaBroadcastWorksheetMarketDetail IsNot Nothing AndAlso FirstMediaBroadcastWorksheetMarketDetail.Vendor IsNot Nothing Then

                If FirstMediaBroadcastWorksheetMarketDetail.Vendor.IsCableSystem Then

                    If String.IsNullOrWhiteSpace(FirstMediaBroadcastWorksheetMarketDetail.CableNetworkStationCode) = False AndAlso
                            FirstMediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode.GetValueOrDefault(0) <> 0 Then

                        StationCode = FirstMediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode

                    End If

                Else

                    If FirstMediaBroadcastWorksheetMarketDetail.Vendor.NielsenTVStationCode.HasValue Then

                        StationCode = FirstMediaBroadcastWorksheetMarketDetail.Vendor.NielsenTVStationCode.Value

                    End If

                End If

            End If

            If String.IsNullOrWhiteSpace(StationCode) = False Then

                BookIDs = New String() {SharebookNielsenTVBookID.ToString}

                If HUTPUTNielsenTVBookID.HasValue Then

                    HPUTBookIDs = New String() {HUTPUTNielsenTVBookID.Value.ToString}

                Else

                    HPUTBookIDs = New String() {}

                End If

                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                If MediaDemographic IsNot Nothing Then

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                Else

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                End If

                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                StationCodes = New String() {StationCode}

                For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails

                    MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(MediaBroadcastWorksheetMarketDetail))

                Next

                VendorNCCTVSyscodeID = FirstMediaBroadcastWorksheetMarketDetail.Vendor.NCCTVSyscodeID.GetValueOrDefault(0)

                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                    TVWorksheetRatingAndShareDataList = GetNielsenTVCDMARatingAndShareData(NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray, HPUTBookIDs, MediaDemoTypes, MediaDemoDetailTypes,
                                                                                           StationCodes, MediaSpotTVResearchDaytimeTypes, VendorNCCTVSyscodeID,
                                                                                           AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext))

                End Using

                For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails

                    Try

                        TVWorksheetRatingAndShareData = TVWorksheetRatingAndShareDataList.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetail.ID)

                    Catch ex As Exception
                        TVWorksheetRatingAndShareData = Nothing
                    End Try

                    If TVWorksheetRatingAndShareData IsNot Nothing Then

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating
                            MediaBroadcastWorksheetMarketDetail.PrimaryRating = TVWorksheetRatingAndShareData.Rating

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share
                            MediaBroadcastWorksheetMarketDetail.PrimaryShare = TVWorksheetRatingAndShareData.Share

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = TVWorksheetRatingAndShareData.HPUT

                        If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName
                            MediaBroadcastWorksheetMarketDetail.Program = TVWorksheetRatingAndShareData.ProgramName

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions
                            MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = TVWorksheetRatingAndShareData.Universe
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                        If MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions > MediaBroadcastWorksheetMarketDetail.PrimaryUniverse Then

                            MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                        If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                            MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                            MediaBroadcastWorksheetMarketDetail.Program = String.Empty

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                    End If

                    TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                    MediaBroadcastWorksheetMarketDetail.PrimaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryRating
                    MediaBroadcastWorksheetMarketDetail.PrimaryCPP = If(MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0, 0, MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryRating)

                    MediaBroadcastWorksheetMarketDetail.PrimaryReach = CalculateTVReach(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions, MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions,
                                                                                        TotalSpots, MediaBroadcastWorksheetMarketDetail.PrimaryUniverse, MediaBroadcastWorksheetMarketDetail.PrimaryRating, MediaBroadcastWorksheetMarketDetail.BookPrimaryRating)
                    MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CalculateTVFrequency(MediaBroadcastWorksheetMarketDetail.PrimaryGRP, MediaBroadcastWorksheetMarketDetail.PrimaryReach)

                    MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryImpressions
                    MediaBroadcastWorksheetMarketDetail.PrimaryCPM = If(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions <> 0, (MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryImpressions) * 1000, 0)

                Next

            End If

        End Sub
        Public Sub Edit_GetTVCableRatingAndShareData(DbContext As AdvantageFramework.Database.DbContext, MediaDemographicID As Integer, NielsenMarketNumber As Integer,
                                                     SharebookNielsenTVBookID As Integer, HUTPUTNielsenTVBookID As Nullable(Of Integer),
                                                     ByRef MediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail)

            'objects
            Dim BookIDs() As String = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim StationCode As String = String.Empty
            Dim TotalSpots As Integer = 0
            Dim VendorNCCTVSyscodeID As Integer = 0

            If MediaBroadcastWorksheetMarketDetail.Vendor IsNot Nothing Then

                If MediaBroadcastWorksheetMarketDetail.Vendor.IsCableSystem Then

                    If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetail.CableNetworkStationCode) = False AndAlso
                            MediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode.GetValueOrDefault(0) <> 0 Then

                        StationCode = MediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode

                    End If

                Else

                    If MediaBroadcastWorksheetMarketDetail.Vendor.NielsenTVStationCode.HasValue Then

                        StationCode = MediaBroadcastWorksheetMarketDetail.Vendor.NielsenTVStationCode.Value

                    End If

                End If

            End If

            If String.IsNullOrWhiteSpace(StationCode) = False Then

                BookIDs = New String() {SharebookNielsenTVBookID.ToString}

                If HUTPUTNielsenTVBookID.HasValue Then

                    HPUTBookIDs = New String() {HUTPUTNielsenTVBookID.Value.ToString}

                Else

                    HPUTBookIDs = New String() {}

                End If

                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                If MediaDemographic IsNot Nothing Then

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                Else

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                End If

                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                StationCodes = New String() {StationCode}

                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(MediaBroadcastWorksheetMarketDetail)}

                VendorNCCTVSyscodeID = MediaBroadcastWorksheetMarketDetail.Vendor.NCCTVSyscodeID.GetValueOrDefault(0)

                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                    TVWorksheetRatingAndShareDataList = GetNielsenTVCDMARatingAndShareData(NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray, HPUTBookIDs, MediaDemoTypes, MediaDemoDetailTypes,
                                                                                           StationCodes, MediaSpotTVResearchDaytimeTypes, VendorNCCTVSyscodeID,
                                                                                           AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext))

                End Using

                If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                    For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating
                            MediaBroadcastWorksheetMarketDetail.PrimaryRating = TVWorksheetRatingAndShareData.Rating

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share
                            MediaBroadcastWorksheetMarketDetail.PrimaryShare = TVWorksheetRatingAndShareData.Share

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = TVWorksheetRatingAndShareData.HPUT

                        If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName
                            MediaBroadcastWorksheetMarketDetail.Program = TVWorksheetRatingAndShareData.ProgramName

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions
                            MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = TVWorksheetRatingAndShareData.Universe
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                        If MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions > MediaBroadcastWorksheetMarketDetail.PrimaryUniverse Then

                            MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                        End If

                    Next

                Else

                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                    End If

                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                    End If

                    MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                    If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                        MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                        MediaBroadcastWorksheetMarketDetail.Program = String.Empty

                    End If

                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                    End If

                    MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                    MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                End If

                TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                MediaBroadcastWorksheetMarketDetail.PrimaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryRating
                MediaBroadcastWorksheetMarketDetail.PrimaryCPP = If(MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0, 0, MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryRating)

                MediaBroadcastWorksheetMarketDetail.PrimaryReach = CalculateTVReach(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions, MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions,
                                                                                    TotalSpots, MediaBroadcastWorksheetMarketDetail.PrimaryUniverse, MediaBroadcastWorksheetMarketDetail.PrimaryRating, MediaBroadcastWorksheetMarketDetail.BookPrimaryRating)
                MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CalculateTVFrequency(MediaBroadcastWorksheetMarketDetail.PrimaryGRP, MediaBroadcastWorksheetMarketDetail.PrimaryReach)

                MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryImpressions
                MediaBroadcastWorksheetMarketDetail.PrimaryCPM = If(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions <> 0, (MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryImpressions) * 1000, 0)

            End If

        End Sub
        Public Sub Edit_GetRadioRatingAndShareData(DbContext As AdvantageFramework.Database.DbContext, MediaDemographicID As Integer, NielsenMarketNumber As Integer,
                                                   ByRef MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket,
                                                   ByRef MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail))

            'objects
            Dim BookIDs As Generic.List(Of String) = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim RadioWorksheetRatingDatas As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim StationCode As String = String.Empty
            Dim TotalSpots As Integer = 0
            Dim MediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail = Nothing
            Dim RadioWorksheetRatingData As AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData = Nothing
            Dim MBWMDRadioWorksheetRatingDatas As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim IsAgencyASP As Boolean = False
            Dim NielsenRadioStationComboIDs() As String = Nothing
            Dim NielsenRadioStationComboID As Integer = 0
            Dim VendorRadioStationComboIDs As Generic.List(Of Integer) = Nothing
            Dim RadioDemoDataInfos As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo) = Nothing
            Dim RadioDemoDataInfo As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo = Nothing
            Dim ComboReach As Double = 0
            Dim ComboReachValues As Generic.List(Of Double) = Nothing
            Dim RadioStationComboReachValues As Generic.List(Of Double) = Nothing
            Dim ComboReachOuterCounter As Integer = 0
            Dim ComboReachCounter As Integer = 0
            Dim AQHComboValues As Generic.List(Of Double) = Nothing
            Dim AQHRatingComboValues As Generic.List(Of Double) = Nothing

            RadioDemoDataInfos = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo)

            For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails

                VendorRadioStationComboIDs = Nothing

                Try

                    RadioDemoDataInfo = RadioDemoDataInfos.SingleOrDefault(Function(Entity) Entity.VendorCode = MediaBroadcastWorksheetMarketDetail.VendorCode)

                Catch ex As Exception
                    RadioDemoDataInfo = Nothing
                End Try

                If MediaBroadcastWorksheetMarketDetail.Vendor.IsComboRadioStation Then

                    If MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                        VendorRadioStationComboIDs = DbContext.Database.SqlQuery(Of Integer)(String.Format("SELECT ISNULL(VCRS.NIELSEN_RADIO_STATION_COMBO_ID, 0) FROM dbo.VENDOR_COMBO_RADIO_STATION VCRS WHERE VCRS.VN_CODE = '{0}'", MediaBroadcastWorksheetMarketDetail.VendorCode)).Where(Function(ComboID) ComboID <> 0).ToList

                    ElseIf MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                        VendorRadioStationComboIDs = DbContext.Database.SqlQuery(Of Integer)(String.Format("SELECT ISNULL(V.EASTLAN_RADIO_STATION_COMBO_ID, 0) FROM dbo.VENDOR_COMBO_RADIO_STATION VCRS INNER JOIN dbo.VENDOR V ON V.VN_CODE = VCRS.VN_COMBO_RADIO_STATION_CODE WHERE VCRS.VN_CODE = '{0}'", MediaBroadcastWorksheetMarketDetail.VendorCode)).Where(Function(ComboID) ComboID <> 0).ToList

                    End If

                    If VendorRadioStationComboIDs IsNot Nothing AndAlso VendorRadioStationComboIDs.Count > 0 Then

                        RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(MediaBroadcastWorksheetMarketDetail.VendorCode, True, VendorRadioStationComboIDs, MediaBroadcastWorksheetMarketDetail.ID)

                    Else

                        RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(MediaBroadcastWorksheetMarketDetail.VendorCode, True, MediaBroadcastWorksheetMarketDetail.ID)

                    End If

                    RadioDemoDataInfos.Add(RadioDemoDataInfo)

                Else

                    NielsenRadioStationComboID = 0

                    If MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen AndAlso
                            MediaBroadcastWorksheetMarketDetail.Vendor.NielsenRadioStationComboID.HasValue AndAlso
                            MediaBroadcastWorksheetMarketDetail.Vendor.NielsenRadioStationComboID.Value > 0 Then

                        NielsenRadioStationComboID = MediaBroadcastWorksheetMarketDetail.Vendor.NielsenRadioStationComboID.Value

                    ElseIf MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan AndAlso
                            MediaBroadcastWorksheetMarketDetail.Vendor.EastlanRadioStationComboID.HasValue AndAlso
                            MediaBroadcastWorksheetMarketDetail.Vendor.EastlanRadioStationComboID.Value > 0 Then

                        NielsenRadioStationComboID = MediaBroadcastWorksheetMarketDetail.Vendor.EastlanRadioStationComboID.Value

                    End If

                    If RadioDemoDataInfo Is Nothing Then

                        If NielsenRadioStationComboID > 0 Then

                            RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(MediaBroadcastWorksheetMarketDetail.VendorCode, False, New Generic.List(Of Integer)({NielsenRadioStationComboID}), MediaBroadcastWorksheetMarketDetail.ID)

                        Else

                            RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(MediaBroadcastWorksheetMarketDetail.VendorCode, False, MediaBroadcastWorksheetMarketDetail.ID)

                        End If

                        RadioDemoDataInfos.Add(RadioDemoDataInfo)

                    Else

                        RadioDemoDataInfo.RowIndexes.Add(MediaBroadcastWorksheetMarketDetail.ID)

                    End If

                End If

            Next

            RadioDemoDataInfos = RadioDemoDataInfos.Where(Function(Entity) Entity.RadioStationComboIDs.Count > 0).ToList

            If RadioDemoDataInfos.Count > 0 AndAlso MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID1.HasValue Then

                IsAgencyASP = AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext)

                BookIDs = New Generic.List(Of String)

                BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID1.Value.ToString)

                If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID2.HasValue Then

                    BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID2.Value.ToString)

                End If

                If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID3.HasValue Then

                    BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID3.Value.ToString)

                End If

                If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID4.HasValue Then

                    BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID4.Value.ToString)

                End If

                If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID5.HasValue Then

                    BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID5.Value.ToString)

                End If

                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                If MediaDemographic IsNot Nothing Then

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                Else

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                End If

                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                For Each RadioDemoDataInfo In RadioDemoDataInfos

                    NielsenRadioStationComboIDs = RadioDemoDataInfo.RadioStationComboIDs.Select(Function(RadioStationComboID) RadioStationComboID.ToString).ToArray

                    MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                    For Each RowIndex In RadioDemoDataInfo.RowIndexes

                        Try

                            MediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetails.SingleOrDefault(Function(Entity) Entity.ID = RowIndex)

                        Catch ex As Exception
                            MediaBroadcastWorksheetMarketDetail = Nothing
                        End Try

                        MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(MediaBroadcastWorksheetMarketDetail))

                    Next

                    Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                        RadioWorksheetRatingDatas = GetNielsenRadioRatingData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray,
                                                                              MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID.GetValueOrDefault(0),
                                                                              NielsenRadioStationComboIDs, New String() {MediaDemographicID}, MediaSpotTVResearchDaytimeTypes,
                                                                              MediaDemoTypes, MediaDemoDetailTypes, IsAgencyASP)

                    End Using

                    For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails

                        Try

                            MBWMDRadioWorksheetRatingDatas = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetail.ID).ToList

                        Catch ex As Exception
                            MBWMDRadioWorksheetRatingDatas = Nothing
                        End Try

                        TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                        If MBWMDRadioWorksheetRatingDatas IsNot Nothing AndAlso MBWMDRadioWorksheetRatingDatas.Count > 0 Then

                            If MediaBroadcastWorksheetMarketDetail.Vendor.IsComboRadioStation Then

                                MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.Population)

                                AQHComboValues = New Generic.List(Of Double)
                                AQHRatingComboValues = New Generic.List(Of Double)

                                For Each RadioStationComboID In RadioDemoDataInfo.RadioStationComboIDs

                                    AQHComboValues.Add(MBWMDRadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetail.ID AndAlso Entity.NielsenRadioStationComboID = RadioStationComboID).Average(Function(Entity) Entity.AQH))
                                    AQHRatingComboValues.Add(MBWMDRadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetail.ID AndAlso Entity.NielsenRadioStationComboID = RadioStationComboID).Average(Function(Entity) CDbl((Entity.AQH * 100) / MediaBroadcastWorksheetMarketDetail.PrimaryUniverse)))

                                Next

                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH <> MediaBroadcastWorksheetMarketDetail.PrimaryAQH Then

                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = AQHComboValues.Sum(Function(AQH) AQH) 'MBWMDRadioWorksheetRatingDatas.Sum(Function(Entity) Entity.AQH)

                                Else

                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = AQHComboValues.Sum(Function(AQH) AQH) ' MBWMDRadioWorksheetRatingDatas.Sum(Function(Entity) Entity.AQH)
                                    MediaBroadcastWorksheetMarketDetail.PrimaryAQH = MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH 'AQHComboValues.Sum(Function(AQH) AQH) 'MBWMDRadioWorksheetRatingDatas.Sum(Function(Entity) Entity.AQH)

                                End If

                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = AQHRatingComboValues.Sum(Function(AQHRating) Math.Round(AQHRating, 1, MidpointRounding.AwayFromZero)) ' MBWMDRadioWorksheetRatingDatas.Sum(Function(Entity) (Entity.AQH * 100) / MediaBroadcastWorksheetMarketDetail.PrimaryUniverse)

                                Else

                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = AQHRatingComboValues.Sum(Function(AQHRating) Math.Round(AQHRating, 1, MidpointRounding.AwayFromZero)) 'MBWMDRadioWorksheetRatingDatas.Sum(Function(Entity) (Entity.AQH * 100) / MediaBroadcastWorksheetMarketDetail.PrimaryUniverse)
                                    MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating

                                End If

                                MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = 0 'ComboReach * 100
                                MediaBroadcastWorksheetMarketDetail.PrimaryCume = 0 'ComboReach * MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                                'MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.CumeRating)
                                'MediaBroadcastWorksheetMarketDetail.PrimaryCume = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.CUME)
                                'MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.Population)

                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = Math.Round(MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating, 1, MidpointRounding.AwayFromZero)
                                MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = Math.Round(MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating, 1, MidpointRounding.AwayFromZero)
                                MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = Math.Round(MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating, 1, MidpointRounding.AwayFromZero)

                                If MediaBroadcastWorksheetMarketDetail.PrimaryCume > MediaBroadcastWorksheetMarketDetail.PrimaryUniverse Then

                                    MediaBroadcastWorksheetMarketDetail.PrimaryCume = MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                                End If

                                ComboReachValues = New Generic.List(Of Double)

                                For Each RadioStationComboID In RadioWorksheetRatingDatas.Select(Function(Entity) Entity.NielsenRadioStationComboID).Distinct.ToList

                                    RadioStationComboReachValues = New Generic.List(Of Double)

                                    For Each RadioWorksheetRatingData In RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioStationComboID = RadioStationComboID).ToList

                                        RadioStationComboReachValues.Add(CalculateRadioReach(RadioWorksheetRatingData.AQH, RadioWorksheetRatingData.CUME,
                                                                                             TotalSpots, RadioWorksheetRatingData.Population,
                                                                                             RadioWorksheetRatingData.AQHRating, RadioWorksheetRatingData.AQHRating))

                                    Next

                                    ComboReachValues.Add(Math.Round(RadioStationComboReachValues.Average(Function(ReachValue) ReachValue), 3, MidpointRounding.AwayFromZero))

                                Next

                                ComboReach = ComboReachValues.Sum(Function(ComboReachValue) ComboReachValue)

                                For ComboReachOuterCounter = 0 To ComboReachValues.Count - 1

                                    ComboReachCounter = ComboReachOuterCounter + 1

                                    While ComboReachCounter <> ComboReachValues.Count

                                        'Console.WriteLine(" - (" & ComboReachValues(ComboReachOuterCounter) & " * " & ComboReachValues(ComboReachCounter) & ")")

                                        ComboReach -= (ComboReachValues(ComboReachOuterCounter) * ComboReachValues(ComboReachCounter))
                                        ComboReachCounter += 1

                                    End While

                                Next

                                MediaBroadcastWorksheetMarketDetail.PrimaryReach = Math.Round(ComboReach, 3, MidpointRounding.AwayFromZero)

                            Else

                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQHRating)

                                Else

                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQHRating)
                                    MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQHRating)

                                End If

                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQH)

                                Else

                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQH)
                                    MediaBroadcastWorksheetMarketDetail.PrimaryAQH = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQH)

                                End If

                                MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.CumeRating)
                                MediaBroadcastWorksheetMarketDetail.PrimaryCume = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.CUME)
                                MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = MBWMDRadioWorksheetRatingDatas.Average(Function(Entity) Entity.Population)

                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = Math.Round(MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating, 1, MidpointRounding.AwayFromZero)
                                MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = Math.Round(MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating, 1, MidpointRounding.AwayFromZero)
                                MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = Math.Round(MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating, 1, MidpointRounding.AwayFromZero)

                                If MediaBroadcastWorksheetMarketDetail.PrimaryCume > MediaBroadcastWorksheetMarketDetail.PrimaryUniverse Then

                                    MediaBroadcastWorksheetMarketDetail.PrimaryCume = MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                                End If

                            End If

                        Else

                            If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0

                            Else

                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0
                                MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = 0

                            End If

                            If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0

                            Else

                                MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0
                                MediaBroadcastWorksheetMarketDetail.PrimaryAQH = 0

                            End If

                            MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryCume = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0

                        End If

                        'TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                        MediaBroadcastWorksheetMarketDetail.PrimaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating
                        MediaBroadcastWorksheetMarketDetail.PrimaryCPP = If(MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = 0, 0, MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating)

                        If MediaBroadcastWorksheetMarketDetail.Vendor.IsComboRadioStation = False Then

                            MediaBroadcastWorksheetMarketDetail.PrimaryReach = CalculateRadioReach(MediaBroadcastWorksheetMarketDetail.PrimaryAQH, MediaBroadcastWorksheetMarketDetail.PrimaryCume,
                                                                                                   TotalSpots, MediaBroadcastWorksheetMarketDetail.PrimaryUniverse, MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating,
                                                                                                   MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating)

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CalculateRadioFrequency(MediaBroadcastWorksheetMarketDetail.PrimaryGRP, MediaBroadcastWorksheetMarketDetail.PrimaryReach)

                        MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = MediaBroadcastWorksheetMarketDetail.PrimaryAQH * TotalSpots

                    Next

                Next

            End If

        End Sub
        Public Sub Edit_GetRadioRatingAndShareData(DbContext As AdvantageFramework.Database.DbContext, MediaDemographicID As Integer, NielsenMarketNumber As Integer,
                                                   ByRef MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket,
                                                   ByRef MediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail)

            'objects
            Dim BookIDs As Generic.List(Of String) = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim RadioWorksheetRatingDatas As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim StationCode As String = String.Empty
            Dim TotalSpots As Integer = 0
            Dim IsAgencyASP As Boolean = False
            Dim NielsenRadioStationComboIDs() As String = Nothing
            Dim NielsenRadioStationComboID As Integer = 0
            Dim VendorRadioStationComboIDs As Generic.List(Of Integer) = Nothing
            Dim RadioDemoDataInfo As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo = Nothing
            Dim ComboReach As Double = 0
            Dim ComboReachValues As Generic.List(Of Double) = Nothing
            Dim RadioStationComboReachValues As Generic.List(Of Double) = Nothing
            Dim ComboReachOuterCounter As Integer = 0
            Dim ComboReachCounter As Integer = 0
            Dim Universe As Long = 0
            Dim AQHComboValues As Generic.List(Of Double) = Nothing
            Dim AQHRatingComboValues As Generic.List(Of Double) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailID As Integer = 0

            MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetail.ID

            If MediaBroadcastWorksheetMarketDetail.Vendor.IsComboRadioStation Then

                If MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                    VendorRadioStationComboIDs = DbContext.Database.SqlQuery(Of Integer)(String.Format("SELECT ISNULL(VCRS.NIELSEN_RADIO_STATION_COMBO_ID, 0) FROM dbo.VENDOR_COMBO_RADIO_STATION VCRS WHERE VCRS.VN_CODE = '{0}'", MediaBroadcastWorksheetMarketDetail.VendorCode)).Where(Function(ComboID) ComboID <> 0).ToList

                ElseIf MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                    VendorRadioStationComboIDs = DbContext.Database.SqlQuery(Of Integer)(String.Format("SELECT ISNULL(V.EASTLAN_RADIO_STATION_COMBO_ID, 0) FROM dbo.VENDOR_COMBO_RADIO_STATION VCRS INNER JOIN dbo.VENDOR V ON V.VN_CODE = VCRS.VN_COMBO_RADIO_STATION_CODE WHERE VCRS.VN_CODE = '{0}'", MediaBroadcastWorksheetMarketDetail.VendorCode)).Where(Function(ComboID) ComboID <> 0).ToList

                End If

                If VendorRadioStationComboIDs IsNot Nothing AndAlso VendorRadioStationComboIDs.Count > 0 Then

                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(MediaBroadcastWorksheetMarketDetail.VendorCode, True, VendorRadioStationComboIDs, MediaBroadcastWorksheetMarketDetail.ID)

                Else

                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(MediaBroadcastWorksheetMarketDetail.VendorCode, True, MediaBroadcastWorksheetMarketDetail.ID)

                End If

            Else

                NielsenRadioStationComboID = 0

                If MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen AndAlso
                        MediaBroadcastWorksheetMarketDetail.Vendor.NielsenRadioStationComboID.HasValue AndAlso
                        MediaBroadcastWorksheetMarketDetail.Vendor.NielsenRadioStationComboID.Value > 0 Then

                    NielsenRadioStationComboID = MediaBroadcastWorksheetMarketDetail.Vendor.NielsenRadioStationComboID.Value

                ElseIf MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan AndAlso
                        MediaBroadcastWorksheetMarketDetail.Vendor.EastlanRadioStationComboID.HasValue AndAlso
                        MediaBroadcastWorksheetMarketDetail.Vendor.EastlanRadioStationComboID.Value > 0 Then

                    NielsenRadioStationComboID = MediaBroadcastWorksheetMarketDetail.Vendor.EastlanRadioStationComboID.Value

                End If

                If NielsenRadioStationComboID > 0 Then

                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(MediaBroadcastWorksheetMarketDetail.VendorCode, False, New Generic.List(Of Integer)({NielsenRadioStationComboID}), MediaBroadcastWorksheetMarketDetail.ID)

                Else

                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(MediaBroadcastWorksheetMarketDetail.VendorCode, False, MediaBroadcastWorksheetMarketDetail.ID)

                End If

            End If

            If RadioDemoDataInfo.RadioStationComboIDs.Count > 0 AndAlso MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID1.HasValue Then

                IsAgencyASP = AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext)

                BookIDs = New Generic.List(Of String)

                BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID1.Value.ToString)

                If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID2.HasValue Then

                    BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID2.Value.ToString)

                End If

                If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID3.HasValue Then

                    BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID3.Value.ToString)

                End If

                If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID4.HasValue Then

                    BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID4.Value.ToString)

                End If

                If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID5.HasValue Then

                    BookIDs.Add(MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID5.Value.ToString)

                End If

                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                If MediaDemographic IsNot Nothing Then

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                Else

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                End If

                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                NielsenRadioStationComboIDs = RadioDemoDataInfo.RadioStationComboIDs.Select(Function(RadioStationComboID) RadioStationComboID.ToString).ToArray

                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(MediaBroadcastWorksheetMarketDetail))

                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                    RadioWorksheetRatingDatas = GetNielsenRadioRatingData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray,
                                                                          MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID,
                                                                          NielsenRadioStationComboIDs, New String() {MediaDemographicID}, MediaSpotTVResearchDaytimeTypes,
                                                                          MediaDemoTypes, MediaDemoDetailTypes, IsAgencyASP)

                End Using

                TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                If RadioWorksheetRatingDatas IsNot Nothing AndAlso RadioWorksheetRatingDatas.Count > 0 Then

                    If MediaBroadcastWorksheetMarketDetail.Vendor.IsComboRadioStation Then

                        Universe = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.Population)

                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = Universe

                        AQHComboValues = New Generic.List(Of Double)
                        AQHRatingComboValues = New Generic.List(Of Double)

                        For Each RadioStationComboID In RadioDemoDataInfo.RadioStationComboIDs

                            AQHComboValues.Add(RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID AndAlso Entity.NielsenRadioStationComboID = RadioStationComboID).Average(Function(Entity) Entity.AQH))
                            AQHRatingComboValues.Add(RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID AndAlso Entity.NielsenRadioStationComboID = RadioStationComboID).Average(Function(Entity) CDbl((Entity.AQH * 100) / Universe)))

                        Next

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH <> MediaBroadcastWorksheetMarketDetail.PrimaryAQH Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = AQHComboValues.Sum(Function(AQH) AQH) 'RadioWorksheetRatingDatas.Sum(Function(Entity) Entity.AQH)

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = AQHComboValues.Sum(Function(AQH) AQH) ' RadioWorksheetRatingDatas.Sum(Function(Entity) Entity.AQH)
                            MediaBroadcastWorksheetMarketDetail.PrimaryAQH = MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH 'AQHComboValues.Sum(Function(AQH) AQH) 'RadioWorksheetRatingDatas.Sum(Function(Entity) Entity.AQH)

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = AQHRatingComboValues.Sum(Function(AQHRating) Math.Round(AQHRating, 1, MidpointRounding.AwayFromZero)) 'RadioWorksheetRatingDatas.Sum(Function(Entity) (Entity.AQH * 100) / Universe)

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = AQHRatingComboValues.Sum(Function(AQHRating) Math.Round(AQHRating, 1, MidpointRounding.AwayFromZero)) 'RadioWorksheetRatingDatas.Sum(Function(Entity) (Entity.AQH * 100) / Universe)
                            MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = 0 'ComboReach * 100
                        MediaBroadcastWorksheetMarketDetail.PrimaryCume = 0 'ComboReach * MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = Math.Round(MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating, 1, MidpointRounding.AwayFromZero)
                        MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = Math.Round(MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating, 1, MidpointRounding.AwayFromZero)
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = Math.Round(MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating, 1, MidpointRounding.AwayFromZero)

                        If MediaBroadcastWorksheetMarketDetail.PrimaryCume > MediaBroadcastWorksheetMarketDetail.PrimaryUniverse Then

                            MediaBroadcastWorksheetMarketDetail.PrimaryCume = MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                        End If

                        ComboReachValues = New Generic.List(Of Double)

                        For Each RadioStationComboID In RadioWorksheetRatingDatas.Select(Function(Entity) Entity.NielsenRadioStationComboID).Distinct.ToList

                            RadioStationComboReachValues = New Generic.List(Of Double)

                            For Each RadioWorksheetRatingData In RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioStationComboID = RadioStationComboID).ToList

                                RadioStationComboReachValues.Add(CalculateRadioReach(RadioWorksheetRatingData.AQH, RadioWorksheetRatingData.CUME,
                                                                                     TotalSpots, RadioWorksheetRatingData.Population,
                                                                                     RadioWorksheetRatingData.AQHRating, RadioWorksheetRatingData.AQHRating))

                            Next

                            ComboReachValues.Add(Math.Round(RadioStationComboReachValues.Average(Function(ReachValue) ReachValue), 3, MidpointRounding.AwayFromZero))

                        Next

                        ComboReach = ComboReachValues.Sum(Function(ComboReachValue) ComboReachValue)

                        For ComboReachOuterCounter = 0 To ComboReachValues.Count - 1

                            ComboReachCounter = ComboReachOuterCounter + 1

                            While ComboReachCounter <> ComboReachValues.Count

                                'Console.WriteLine(" - (" & ComboReachValues(ComboReachOuterCounter) & " * " & ComboReachValues(ComboReachCounter) & ")")

                                ComboReach -= (ComboReachValues(ComboReachOuterCounter) * ComboReachValues(ComboReachCounter))
                                ComboReachCounter += 1

                            End While

                        Next

                        MediaBroadcastWorksheetMarketDetail.PrimaryReach = Math.Round(ComboReach, 3, MidpointRounding.AwayFromZero)

                    Else

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQHRating)

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQHRating)
                            MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQHRating)

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQH)

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQH)
                            MediaBroadcastWorksheetMarketDetail.PrimaryAQH = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.AQH)

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.CumeRating)
                        MediaBroadcastWorksheetMarketDetail.PrimaryCume = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.CUME)
                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = RadioWorksheetRatingDatas.Average(Function(Entity) Entity.Population)

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = Math.Round(MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating, 1, MidpointRounding.AwayFromZero)
                        MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = Math.Round(MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating, 1, MidpointRounding.AwayFromZero)
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = Math.Round(MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating, 1, MidpointRounding.AwayFromZero)

                        If MediaBroadcastWorksheetMarketDetail.PrimaryCume > MediaBroadcastWorksheetMarketDetail.PrimaryUniverse Then

                            MediaBroadcastWorksheetMarketDetail.PrimaryCume = MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                        End If

                    End If

                Else

                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = 0

                    End If

                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0

                    Else

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryAQH = 0

                    End If

                    MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = 0
                    MediaBroadcastWorksheetMarketDetail.PrimaryCume = 0
                    MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0

                End If

                'TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                MediaBroadcastWorksheetMarketDetail.PrimaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating
                MediaBroadcastWorksheetMarketDetail.PrimaryCPP = If(MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = 0, 0, MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating)

                If MediaBroadcastWorksheetMarketDetail.Vendor.IsComboRadioStation = False Then

                    MediaBroadcastWorksheetMarketDetail.PrimaryReach = CalculateRadioReach(MediaBroadcastWorksheetMarketDetail.PrimaryAQH, MediaBroadcastWorksheetMarketDetail.PrimaryCume,
                                                                                           TotalSpots, MediaBroadcastWorksheetMarketDetail.PrimaryUniverse, MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating,
                                                                                           MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating)

                End If

                MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CalculateRadioFrequency(MediaBroadcastWorksheetMarketDetail.PrimaryGRP, MediaBroadcastWorksheetMarketDetail.PrimaryReach)

                MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = MediaBroadcastWorksheetMarketDetail.PrimaryAQH * TotalSpots

            End If

        End Sub
        Public Sub Edit_RatingsServiceChanged(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel)

            MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos.Clear()

        End Sub
        Public Sub Edit_CountryChanged(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel)

            MediaBroadcastWorksheetEditViewModel.WorksheetSecondaryDemos.Clear()

            Edit_LoadDemoSource(MediaBroadcastWorksheetEditViewModel)

        End Sub
        Private Function GetMediaPlanComments(MediaTypeCode As String, MediaPlanID As Integer) As String

            Dim MediaPlanComments As String = String.Empty
            Dim NoteList As Generic.List(Of String) = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                If MediaTypeCode = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.T.ToString Then

                    NoteList = (From Entity In AdvantageFramework.Database.Procedures.MediaPlanDetail.LoadByMediaPlanID(DbContext, MediaPlanID)
                                Where Entity.SalesClassType = "T"
                                Select Entity.Notes).ToList

                ElseIf MediaTypeCode = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.R.ToString Then

                    NoteList = (From Entity In AdvantageFramework.Database.Procedures.MediaPlanDetail.LoadByMediaPlanID(DbContext, MediaPlanID)
                                Where Entity.SalesClassType = "R"
                                Select Entity.Notes).ToList

                End If

                For Each Note In NoteList.Where(Function(Entity) String.IsNullOrWhiteSpace(Entity) = False)

                    MediaPlanComments += Note & vbCrLf

                Next

            End Using

            GetMediaPlanComments = MediaPlanComments

        End Function
        Private Sub Edit_LoadDefaultMatchingSettings(DbContext As AdvantageFramework.Database.DbContext, ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel,
                                                     MediaTypeCode As String, ClientCode As String)

            'objects
            Dim InvoiceMatchingSetting As AdvantageFramework.Database.Entities.InvoiceMatchingSetting = Nothing

            MediaBroadcastWorksheetEditViewModel.MediaBroadcastWorksheetSpotMatchingSettings.Clear()

            InvoiceMatchingSetting = (From Entity In AdvantageFramework.Database.Procedures.InvoiceMatchingSetting.Load(DbContext)
                                      Where Entity.MediaTypeCode = MediaTypeCode AndAlso
                                            Entity.ClientCode = ClientCode
                                      Select Entity).SingleOrDefault

            If InvoiceMatchingSetting Is Nothing Then

                InvoiceMatchingSetting = (From Entity In AdvantageFramework.Database.Procedures.InvoiceMatchingSetting.Load(DbContext)
                                          Where Entity.MediaTypeCode = MediaTypeCode AndAlso
                                                Entity.ClientCode Is Nothing
                                          Select Entity).SingleOrDefault

            End If

            If InvoiceMatchingSetting IsNot Nothing Then

                MediaBroadcastWorksheetEditViewModel.MediaBroadcastWorksheetSpotMatchingSettings.Add(New AdvantageFramework.DTO.Media.SpotMatchingSetting(InvoiceMatchingSetting))

            End If

        End Sub
        Private Sub Edit_LoadMatchingSettings(DbContext As AdvantageFramework.Database.DbContext, ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, MediaTypeCode As String, ClientCode As String)

            'objects
            Dim MediaBroadcastWorksheetSpotMatchingSetting As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSpotMatchingSetting = Nothing
            Dim InvoiceMatchingSetting As AdvantageFramework.Database.Entities.InvoiceMatchingSetting = Nothing

            MediaBroadcastWorksheetSpotMatchingSetting = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetSpotMatchingSetting.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetEditViewModel.Worksheet.ID)

            If MediaBroadcastWorksheetSpotMatchingSetting IsNot Nothing Then

                MediaBroadcastWorksheetEditViewModel.MediaBroadcastWorksheetSpotMatchingSettings.Add(New AdvantageFramework.DTO.Media.SpotMatchingSetting(MediaBroadcastWorksheetSpotMatchingSetting))

            Else

                Edit_LoadDefaultMatchingSettings(DbContext, MediaBroadcastWorksheetEditViewModel, MediaTypeCode, ClientCode)

            End If

        End Sub
        Public Sub Edit_RestoreDefaultMatchingSettings(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel, MediaTypeCode As String, ClientCode As String)

            Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                Edit_LoadDefaultMatchingSettings(DbContext, MediaBroadcastWorksheetEditViewModel, MediaTypeCode, ClientCode)

            End Using

        End Sub
        Public Sub Edit_LoadDemoSource(ByRef MediaBroadcastWorksheetEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetEditViewModel)

            If MediaBroadcastWorksheetEditViewModel.Worksheet IsNot Nothing Then

                If MediaBroadcastWorksheetEditViewModel.Worksheet.CountryID = AdvantageFramework.DTO.Countries.UnitedStates Then

                    MediaBroadcastWorksheetEditViewModel.RatingsServiceList = (From Entity In AdvantageFramework.EnumUtilities.LoadEnumObjects(GetType(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID))
                                                                               Where (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen)) OrElse
                                                                                     (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore) AndAlso Me.Session.IsComscoreSetup)
                                                                               Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

                ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.CountryID = AdvantageFramework.DTO.Countries.Canada Then

                    MediaBroadcastWorksheetEditViewModel.RatingsServiceList = (From Entity In AdvantageFramework.EnumUtilities.LoadEnumObjects(GetType(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID))
                                                                               Where Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Numeris)
                                                                               Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

                ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.CountryID = AdvantageFramework.DTO.Countries.Australia Then

                    MediaBroadcastWorksheetEditViewModel.RatingsServiceList = (From Entity In AdvantageFramework.EnumUtilities.LoadEnumObjects(GetType(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID))
                                                                               Where Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.OzTAM)
                                                                               Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

                ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.CountryID = AdvantageFramework.DTO.Countries.PuertoRico Then

                    MediaBroadcastWorksheetEditViewModel.RatingsServiceList = (From Entity In AdvantageFramework.EnumUtilities.LoadEnumObjects(GetType(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID))
                                                                               Where Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.NielsenPuertoRico)
                                                                               Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

                Else

                    MediaBroadcastWorksheetEditViewModel.RatingsServiceList = (From Entity In AdvantageFramework.EnumUtilities.LoadEnumObjects(GetType(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID))
                                                                               Where (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen)) OrElse
                                                                                     (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Numeris)) OrElse
                                                                                     (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore) AndAlso Me.Session.IsComscoreSetup)
                                                                               Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

                End If

            Else

                MediaBroadcastWorksheetEditViewModel.RatingsServiceList = (From Entity In AdvantageFramework.EnumUtilities.LoadEnumObjects(GetType(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID))
                                                                           Where (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen)) OrElse
                                                                                 (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Numeris)) OrElse
                                                                                 (Entity.Code = CStr(AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore) AndAlso Me.Session.IsComscoreSetup)
                                                                           Select New AdvantageFramework.DTO.ComboBoxItem(Entity)).ToList

            End If

        End Sub
        Public Sub Edit_GetTVRatingAndShareData(DbContext As AdvantageFramework.Database.DbContext, MediaDemographicID As Integer,
                                                PeriodStart As Date, PeriodEnd As Date, ByRef MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail))

            'objects
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim NPRStationID As Integer = 0
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim TotalSpots As Integer = 0
            Dim FirstMediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail = Nothing
            Dim TVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing

            Try

                FirstMediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetails.FirstOrDefault

            Catch ex As Exception
                FirstMediaBroadcastWorksheetMarketDetail = Nothing
            End Try

            If FirstMediaBroadcastWorksheetMarketDetail IsNot Nothing AndAlso FirstMediaBroadcastWorksheetMarketDetail.Vendor IsNot Nothing Then

                If FirstMediaBroadcastWorksheetMarketDetail.Vendor.NPRStationID.HasValue Then

                    NPRStationID = FirstMediaBroadcastWorksheetMarketDetail.Vendor.NPRStationID.Value

                End If

            End If

            If NPRStationID <> 0 Then

                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                If MediaDemographic IsNot Nothing Then

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                Else

                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                End If

                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails

                    MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(MediaBroadcastWorksheetMarketDetail))

                Next

                TVWorksheetRatingAndShareDataList = GetNielsenTVPuertoRicoRatings(PeriodStart, PeriodEnd, NPRStationID, MediaSpotTVResearchDaytimeTypes, MediaDemographicID, Nothing)

                TVWorksheetRatingAndShareDataList = TVWorksheetRatingAndShareDataList.Where(Function(DL) DL.MediaDemoID = MediaDemographic.ID).ToList

                For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails

                    Try

                        TVWorksheetRatingAndShareData = TVWorksheetRatingAndShareDataList.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetail.ID)

                    Catch ex As Exception
                        TVWorksheetRatingAndShareData = Nothing
                    End Try

                    If TVWorksheetRatingAndShareData IsNot Nothing Then

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = TVWorksheetRatingAndShareData.Rating
                            MediaBroadcastWorksheetMarketDetail.PrimaryRating = TVWorksheetRatingAndShareData.Rating

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = TVWorksheetRatingAndShareData.Share
                            MediaBroadcastWorksheetMarketDetail.PrimaryShare = TVWorksheetRatingAndShareData.Share

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = TVWorksheetRatingAndShareData.HPUT

                        If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookProgram = TVWorksheetRatingAndShareData.ProgramName
                            MediaBroadcastWorksheetMarketDetail.Program = TVWorksheetRatingAndShareData.ProgramName

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = TVWorksheetRatingAndShareData.Impressions
                            MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = TVWorksheetRatingAndShareData.Impressions

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = TVWorksheetRatingAndShareData.Universe
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                        If MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions > MediaBroadcastWorksheetMarketDetail.PrimaryUniverse Then

                            MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = MediaBroadcastWorksheetMarketDetail.PrimaryUniverse

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                        If MediaBroadcastWorksheetMarketDetail.BookProgram <> MediaBroadcastWorksheetMarketDetail.Program Then

                            MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                            MediaBroadcastWorksheetMarketDetail.Program = String.Empty

                        End If

                        If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                        Else

                            MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                            MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                        End If

                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                    End If

                    TotalSpots = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) Entity.Spots).Sum

                    MediaBroadcastWorksheetMarketDetail.PrimaryGRP = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryRating
                    MediaBroadcastWorksheetMarketDetail.PrimaryCPP = If(MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0, 0, MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryRating)

                    MediaBroadcastWorksheetMarketDetail.PrimaryReach = CalculateTVReach(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions, MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions,
                                                                                    TotalSpots, MediaBroadcastWorksheetMarketDetail.PrimaryUniverse, MediaBroadcastWorksheetMarketDetail.PrimaryRating, MediaBroadcastWorksheetMarketDetail.BookPrimaryRating)
                    MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CalculateTVFrequency(MediaBroadcastWorksheetMarketDetail.PrimaryGRP, MediaBroadcastWorksheetMarketDetail.PrimaryReach)

                    MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = TotalSpots * MediaBroadcastWorksheetMarketDetail.PrimaryImpressions
                    MediaBroadcastWorksheetMarketDetail.PrimaryCPM = If(MediaBroadcastWorksheetMarketDetail.PrimaryImpressions <> 0, (MediaBroadcastWorksheetMarketDetail.DefaultRate / MediaBroadcastWorksheetMarketDetail.PrimaryImpressions) * 1000, 0)

                Next

            End If

        End Sub

#End Region

#Region "  Copy "

        Public Function Copy_Load(MediaBroadcastWorksheetID As Integer, CopyWithNewCDP As Boolean) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetCopyViewModel

            'objects
            Dim MediaBroadcastWorksheetCopyViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetCopyViewModel = Nothing
            Dim Market As AdvantageFramework.DTO.Market = Nothing
            Dim Markets As Generic.List(Of AdvantageFramework.DTO.Market) = Nothing
            Dim WorksheetMarketVendorScheduleCopyTo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorScheduleCopyTo = Nothing
            Dim WorksheetMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket) = Nothing

            MediaBroadcastWorksheetCopyViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetCopyViewModel

            MediaBroadcastWorksheetCopyViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetCopyViewModel.CopyWithNewCDP = CopyWithNewCDP
                MediaBroadcastWorksheetCopyViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                Include("Division").
                                                                                                                                                Include("Product").
                                                                                                                                                Include("SalesClass").
                                                                                                                                                Include("Campaign").
                                                                                                                                                Include("MediaPlan").
                                                                                                                                                Include("PrimaryMediaDemographic").
                                                                                                                                                Include("Country").
                                                                                                                                                Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault



                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    If CopyWithNewCDP Then

                        MediaBroadcastWorksheetCopyViewModel.WorksheetCopyCDPs = AdvantageFramework.Database.Procedures.Product.LoadAllActiveByUserCode(DbContext, SecurityDbContext, Me.Session.UserCode).
                                                                                                                                Include("Office").
                                                                                                                                Include("Client").
                                                                                                                                Include("Division").
                                                                                                                                Where(Function(Entity) Entity.Client.IsActive = 1 AndAlso Entity.Division.IsActive = 1).ToList.
                                                                                                                                Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetCopyCDP(Entity)).ToList

                    Else

                        MediaBroadcastWorksheetCopyViewModel.WorksheetCopyCDPs = New List(Of DTO.Media.MediaBroadcastWorksheet.WorksheetCopyCDP)

                    End If

                End Using

            End Using

            Copy_Load = MediaBroadcastWorksheetCopyViewModel

        End Function
        Public Sub Copy_WorksheetCopyCDPsSelectionChanged(ByRef MediaBroadcastWorksheetCopyViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetCopyViewModel,
                                                          SelectedWorksheetCopyCDP As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetCopyCDP)

            MediaBroadcastWorksheetCopyViewModel.SelectedWorksheetCopyCDP = SelectedWorksheetCopyCDP

        End Sub
        Public Function Copy_Copy(MediaBroadcastWorksheetCopyViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetCopyViewModel,
                                  ByRef ErrorMessage As String) As Boolean

            'objects
            Dim Copied As Boolean = False
            Dim CopyFromMBW As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim MediaBroadcastWorksheets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheet) = Nothing
            Dim NewMediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim NewMediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim NewMediaBroadcastWorksheetMarketSubmarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket = Nothing
            Dim NewMediaBroadcastWorksheetMarketDetailSubmarketDemo As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailSubmarketDemo = Nothing
            Dim NewMediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail = Nothing
            Dim NewMediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing
            Dim NewMediaBroadcastWorksheetMarketGoal As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal = Nothing
            Dim NewMediaBroadcastWorksheetMarketGoalDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate = Nothing
            Dim NewMediaBroadcastWorksheetMarketNielsenTVBook As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenTVBook = Nothing
            Dim NewMediaBroadcastWorksheetMarketRevision As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketRevision = Nothing
            Dim NewMediaBroadcastWorksheetSecondaryDemo As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSecondaryDemo = Nothing
            Dim OrginalName As String = String.Empty
            Dim NameCounter As Integer = 1
            Dim MaxRevisionNumber As Integer = 0
            Dim NewLineNumber As Integer = 1
            Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim DetailDates As Hashtable = Nothing
            Dim DateCounter As Integer = 1
            Dim DateColumnName As String = String.Empty
            Dim DetailDate As Date = Date.MinValue
            Dim NewMediaBroadcastWorksheetMarketSubmarkets As Hashtable = Nothing
            Dim WorksheetMarketSubmarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket = Nothing
            Dim MediaBroadcastWorksheetMarketSubmarkets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket) = Nothing

            If MediaBroadcastWorksheetCopyViewModel.Worksheet IsNot Nothing Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()
                    DbContext.Configuration.AutoDetectChangesEnabled = False

                    CopyFromMBW = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetCopyViewModel.Worksheet.ID)

                    If CopyFromMBW IsNot Nothing Then

                        NewMediaBroadcastWorksheet = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheet

                        NewMediaBroadcastWorksheet.DbContext = DbContext

                        NewMediaBroadcastWorksheet.MediaTypeCode = CopyFromMBW.MediaTypeCode
                        NewMediaBroadcastWorksheet.Name = CopyFromMBW.Name

                        MediaBroadcastWorksheets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).ToList

                        OrginalName = NewMediaBroadcastWorksheet.Name

                        If OrginalName.Length > 100 Then

                            OrginalName = OrginalName.Substring(0, 96)

                        ElseIf OrginalName.Length + 4 > 100 Then

                            OrginalName = OrginalName.Substring(0, 95)

                        End If

                        Do While True

                            NewMediaBroadcastWorksheet.Name = OrginalName & " (" & NameCounter & ")"

                            If MediaBroadcastWorksheets.Any(Function(Entity) Entity.Name = NewMediaBroadcastWorksheet.Name) = False Then

                                Exit Do

                            End If

                            NameCounter += 1

                        Loop

                        If NewMediaBroadcastWorksheet.Name.Length > 100 Then

                            NewMediaBroadcastWorksheet.Name = NewMediaBroadcastWorksheet.Name.Substring(0, 99)

                        End If

                        If MediaBroadcastWorksheetCopyViewModel.SelectedWorksheetCopyCDP IsNot Nothing Then

                            NewMediaBroadcastWorksheet.ClientCode = MediaBroadcastWorksheetCopyViewModel.SelectedWorksheetCopyCDP.ClientCode
                            NewMediaBroadcastWorksheet.DivisionCode = MediaBroadcastWorksheetCopyViewModel.SelectedWorksheetCopyCDP.DivisionCode
                            NewMediaBroadcastWorksheet.ProductCode = MediaBroadcastWorksheetCopyViewModel.SelectedWorksheetCopyCDP.ProductCode

                        Else

                            NewMediaBroadcastWorksheet.ClientCode = CopyFromMBW.ClientCode
                            NewMediaBroadcastWorksheet.DivisionCode = CopyFromMBW.DivisionCode
                            NewMediaBroadcastWorksheet.ProductCode = CopyFromMBW.ProductCode

                        End If

                        NewMediaBroadcastWorksheet.SalesClassCode = CopyFromMBW.SalesClassCode
                        NewMediaBroadcastWorksheet.CampaignID = CopyFromMBW.CampaignID
                        NewMediaBroadcastWorksheet.StartDate = CopyFromMBW.StartDate
                        NewMediaBroadcastWorksheet.EndDate = CopyFromMBW.EndDate
                        NewMediaBroadcastWorksheet.MediaBroadcastWorksheetDateTypeID = CopyFromMBW.MediaBroadcastWorksheetDateTypeID
                        NewMediaBroadcastWorksheet.MediaCalendarTypeID = CopyFromMBW.MediaCalendarTypeID
                        NewMediaBroadcastWorksheet.MediaPlanID = CopyFromMBW.MediaPlanID
                        NewMediaBroadcastWorksheet.IsInactive = CopyFromMBW.IsInactive
                        NewMediaBroadcastWorksheet.DefaultToLatestSharebook = CopyFromMBW.DefaultToLatestSharebook
                        NewMediaBroadcastWorksheet.ArePiggybacksOK = CopyFromMBW.ArePiggybacksOK
                        NewMediaBroadcastWorksheet.ProrateSecondaryDemosToPrimary = CopyFromMBW.ProrateSecondaryDemosToPrimary
                        NewMediaBroadcastWorksheet.PrimaryMediaDemographicID = CopyFromMBW.PrimaryMediaDemographicID
                        NewMediaBroadcastWorksheet.Length = CopyFromMBW.Length
                        NewMediaBroadcastWorksheet.RatingsServiceID = CopyFromMBW.RatingsServiceID
                        NewMediaBroadcastWorksheet.IsGross = CopyFromMBW.IsGross
                        NewMediaBroadcastWorksheet.CountryID = CopyFromMBW.CountryID

                        NewMediaBroadcastWorksheet.CreatedByUserCode = Me.Session.UserCode
                        NewMediaBroadcastWorksheet.CreatedDate = Now

                        DbContext.MediaBroadcastWorksheets.Add(NewMediaBroadcastWorksheet)

                        For Each CopyFromMBWM In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, CopyFromMBW.ID)

                            NewMediaBroadcastWorksheetMarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket

                            NewMediaBroadcastWorksheetMarket.DbContext = DbContext

                            NewMediaBroadcastWorksheetMarket.MediaBroadcastWorksheet = NewMediaBroadcastWorksheet
                            NewMediaBroadcastWorksheetMarket.MarketCode = CopyFromMBWM.MarketCode
                            NewMediaBroadcastWorksheetMarket.BuyerEmployeeCode = CopyFromMBWM.BuyerEmployeeCode
                            NewMediaBroadcastWorksheetMarket.SharebookNielsenTVBookID = CopyFromMBWM.SharebookNielsenTVBookID
                            NewMediaBroadcastWorksheetMarket.HUTPUTNielsenTVBookID = CopyFromMBWM.HUTPUTNielsenTVBookID
                            NewMediaBroadcastWorksheetMarket.SecondaryMediaDemographicID = CopyFromMBWM.SecondaryMediaDemographicID
                            NewMediaBroadcastWorksheetMarket.IsCable = CopyFromMBWM.IsCable
                            NewMediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID = CopyFromMBWM.MediaBroadcastWorksheetMarketTVGeographyID
                            NewMediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID = CopyFromMBWM.MediaBroadcastWorksheetMarketRadioGeographyID
                            NewMediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID = CopyFromMBWM.MediaBroadcastWorksheetMarketRadioEthnicityID
                            NewMediaBroadcastWorksheetMarket.NeilsenRadioPeriodID1 = CopyFromMBWM.NeilsenRadioPeriodID1
                            NewMediaBroadcastWorksheetMarket.NeilsenRadioPeriodID2 = CopyFromMBWM.NeilsenRadioPeriodID2
                            NewMediaBroadcastWorksheetMarket.NeilsenRadioPeriodID3 = CopyFromMBWM.NeilsenRadioPeriodID3
                            NewMediaBroadcastWorksheetMarket.NeilsenRadioPeriodID4 = CopyFromMBWM.NeilsenRadioPeriodID4
                            NewMediaBroadcastWorksheetMarket.NeilsenRadioPeriodID5 = CopyFromMBWM.NeilsenRadioPeriodID5
                            NewMediaBroadcastWorksheetMarket.Length = CopyFromMBWM.Length
                            NewMediaBroadcastWorksheetMarket.CreateOrdersByWeek = False

                            If MediaBroadcastWorksheetCopyViewModel.SelectedWorksheetCopyCDP Is Nothing Then

                                NewMediaBroadcastWorksheetMarket.GoalTotalGRP = CopyFromMBWM.GoalTotalGRP
                                NewMediaBroadcastWorksheetMarket.GoalTotalBudgetAmount = CopyFromMBWM.GoalTotalBudgetAmount

                            End If

                            NewMediaBroadcastWorksheetMarket.CreatedByUserCode = Me.Session.UserCode
                            NewMediaBroadcastWorksheetMarket.CreatedDate = Now

                            DbContext.MediaBroadcastWorksheetMarkets.Add(NewMediaBroadcastWorksheetMarket)

                            If MediaBroadcastWorksheetCopyViewModel.Worksheet.DoesWorksheetAllowSubmarkets Then

                                NewMediaBroadcastWorksheetMarketSubmarkets = New Hashtable

                                MediaBroadcastWorksheetMarketSubmarkets = DbContext.GetQuery(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = CopyFromMBWM.ID).ToList

                                For Each CopyFromMBWMS In MediaBroadcastWorksheetMarketSubmarkets

                                    NewMediaBroadcastWorksheetMarketSubmarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket

                                    NewMediaBroadcastWorksheetMarketSubmarket.DbContext = DbContext

                                    NewMediaBroadcastWorksheetMarketSubmarket.MediaBroadcastWorksheetMarket = NewMediaBroadcastWorksheetMarket
                                    NewMediaBroadcastWorksheetMarketSubmarket.MarketCode = CopyFromMBWMS.MarketCode
                                    NewMediaBroadcastWorksheetMarketSubmarket.Order = CopyFromMBWMS.Order

                                    DbContext.MediaBroadcastWorksheetMarketSubmarkets.Add(NewMediaBroadcastWorksheetMarketSubmarket)

                                    NewMediaBroadcastWorksheetMarketSubmarkets(CopyFromMBWMS.ID) = NewMediaBroadcastWorksheetMarketSubmarket

                                Next

                            End If

                            If MediaBroadcastWorksheetCopyViewModel.UseLatestRevision Then

                                If AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, CopyFromMBWM.ID).Any Then

                                    MaxRevisionNumber = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, CopyFromMBWM.ID).Select(Function(Entity) Entity.RevisionNumber).Max()

                                Else

                                    MaxRevisionNumber = 0

                                End If

                            Else

                                MaxRevisionNumber = 0

                            End If

                            DetailDates = New Hashtable

                            DateCounter = 1

                            For Each DetailDate In GetWorksheetDates(NewMediaBroadcastWorksheet.MediaBroadcastWorksheetDateTypeID, NewMediaBroadcastWorksheet.MediaCalendarTypeID,
                                                                     NewMediaBroadcastWorksheet.StartDate, NewMediaBroadcastWorksheet.EndDate, NewMediaBroadcastWorksheet.UseOldCalendarDateCreation)

                                DetailDates(DetailDate) = "Date" & DateCounter

                                DateCounter += 1

                            Next

                            MediaBroadcastWorksheetMarketDetails = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, CopyFromMBWM.ID).Where(Function(Entity) Entity.RevisionNumber = MaxRevisionNumber).ToList

                            For Each VendorCode In MediaBroadcastWorksheetMarketDetails.Select(Function(Entity) Entity.VendorCode).Distinct.ToList

                                NewLineNumber = 1

                                For Each CopyFromMBWMD In MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.VendorCode = VendorCode).OrderBy(Function(Entity) Entity.LineNumber).ToList

                                    NewMediaBroadcastWorksheetMarketDetail = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail

                                    NewMediaBroadcastWorksheetMarketDetail.DbContext = DbContext

                                    NewMediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarket = NewMediaBroadcastWorksheetMarket
                                    NewMediaBroadcastWorksheetMarketDetail.OnHold = CopyFromMBWMD.OnHold
                                    NewMediaBroadcastWorksheetMarketDetail.LineNumber = NewLineNumber
                                    NewMediaBroadcastWorksheetMarketDetail.MakegoodNumber = 0
                                    NewMediaBroadcastWorksheetMarketDetail.MakegoodDate = Date.MinValue
                                    NewMediaBroadcastWorksheetMarketDetail.MakegoodSpots = 0
                                    NewMediaBroadcastWorksheetMarketDetail.MadegoodNumber = 0
                                    NewMediaBroadcastWorksheetMarketDetail.RevisionNumber = 0
                                    NewMediaBroadcastWorksheetMarketDetail.VendorCode = CopyFromMBWMD.VendorCode
                                    NewMediaBroadcastWorksheetMarketDetail.CableNetworkStationCode = CopyFromMBWMD.CableNetworkStationCode
                                    NewMediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode = CopyFromMBWMD.CableNetworkNielsenTVStationCode
                                    NewMediaBroadcastWorksheetMarketDetail.BookProgram = CopyFromMBWMD.BookProgram

                                    If CopyFromMBW.MediaTypeCode = "T" Then

                                        NewMediaBroadcastWorksheetMarketDetail.Program = CopyFromMBWMD.Program

                                    Else

                                        NewMediaBroadcastWorksheetMarketDetail.Program = String.Empty

                                    End If

                                    NewMediaBroadcastWorksheetMarketDetail.DaypartID = CopyFromMBWMD.DaypartID
                                    NewMediaBroadcastWorksheetMarketDetail.Product = CopyFromMBWMD.Product
                                    NewMediaBroadcastWorksheetMarketDetail.Piggyback = CopyFromMBWMD.Piggyback
                                    NewMediaBroadcastWorksheetMarketDetail.Length = CopyFromMBWMD.Length
                                    NewMediaBroadcastWorksheetMarketDetail.Days = CopyFromMBWMD.Days
                                    NewMediaBroadcastWorksheetMarketDetail.Sunday = CopyFromMBWMD.Sunday
                                    NewMediaBroadcastWorksheetMarketDetail.Monday = CopyFromMBWMD.Monday
                                    NewMediaBroadcastWorksheetMarketDetail.Tuesday = CopyFromMBWMD.Tuesday
                                    NewMediaBroadcastWorksheetMarketDetail.Wednesday = CopyFromMBWMD.Wednesday
                                    NewMediaBroadcastWorksheetMarketDetail.Thursday = CopyFromMBWMD.Thursday
                                    NewMediaBroadcastWorksheetMarketDetail.Friday = CopyFromMBWMD.Friday
                                    NewMediaBroadcastWorksheetMarketDetail.Saturday = CopyFromMBWMD.Saturday
                                    NewMediaBroadcastWorksheetMarketDetail.StartTime = CopyFromMBWMD.StartTime
                                    NewMediaBroadcastWorksheetMarketDetail.EndTime = CopyFromMBWMD.EndTime
                                    NewMediaBroadcastWorksheetMarketDetail.StartHour = CopyFromMBWMD.StartHour
                                    NewMediaBroadcastWorksheetMarketDetail.EndHour = CopyFromMBWMD.EndHour
                                    NewMediaBroadcastWorksheetMarketDetail.Comments = CopyFromMBWMD.Comments
                                    NewMediaBroadcastWorksheetMarketDetail.Bookend = CopyFromMBWMD.Bookend
                                    NewMediaBroadcastWorksheetMarketDetail.ValueAdded = CopyFromMBWMD.ValueAdded

                                    If MediaBroadcastWorksheetCopyViewModel.CopyRates Then

                                        NewMediaBroadcastWorksheetMarketDetail.DefaultRate = CopyFromMBWMD.DefaultRate

                                    Else

                                        NewMediaBroadcastWorksheetMarketDetail.DefaultRate = 0

                                    End If

                                    NewMediaBroadcastWorksheetMarketDetail.OrderComments = CopyFromMBWMD.OrderComments
                                    NewMediaBroadcastWorksheetMarketDetail.OverridePost = CopyFromMBWMD.OverridePost
                                    NewMediaBroadcastWorksheetMarketDetail.BookPrimaryRating = CopyFromMBWMD.BookPrimaryRating
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryRating = CopyFromMBWMD.PrimaryRating
                                    NewMediaBroadcastWorksheetMarketDetail.BookPrimaryShare = CopyFromMBWMD.BookPrimaryShare
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryShare = CopyFromMBWMD.PrimaryShare
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryHPUT = CopyFromMBWMD.PrimaryHPUT
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryCPP = CopyFromMBWMD.PrimaryCPP
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryGRP = CopyFromMBWMD.PrimaryGRP
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryReach = CopyFromMBWMD.PrimaryReach
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryFrequency = CopyFromMBWMD.PrimaryFrequency
                                    NewMediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = CopyFromMBWMD.BookPrimaryImpressions
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryImpressions = CopyFromMBWMD.PrimaryImpressions
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = CopyFromMBWMD.PrimaryGrossImpressions
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryUniverse = CopyFromMBWMD.PrimaryUniverse
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = CopyFromMBWMD.PrimaryCumeImpressions
                                    NewMediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = CopyFromMBWMD.BookPrimaryAQHRating
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = CopyFromMBWMD.PrimaryAQHRating
                                    NewMediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = CopyFromMBWMD.BookPrimaryAQH
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryAQH = CopyFromMBWMD.PrimaryAQH
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = CopyFromMBWMD.PrimaryCumeRating
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryCume = CopyFromMBWMD.PrimaryCume
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryCPM = CopyFromMBWMD.PrimaryCPM
                                    NewMediaBroadcastWorksheetMarketDetail.BookSecondaryRating = CopyFromMBWMD.BookSecondaryRating
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryRating = CopyFromMBWMD.SecondaryRating
                                    NewMediaBroadcastWorksheetMarketDetail.BookSecondaryShare = CopyFromMBWMD.BookSecondaryShare
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryShare = CopyFromMBWMD.SecondaryShare
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryHPUT = CopyFromMBWMD.SecondaryHPUT
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryCPP = CopyFromMBWMD.SecondaryCPP
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryGRP = CopyFromMBWMD.SecondaryGRP
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryReach = CopyFromMBWMD.SecondaryReach
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryFrequency = CopyFromMBWMD.SecondaryFrequency
                                    NewMediaBroadcastWorksheetMarketDetail.BookSecondaryImpressions = CopyFromMBWMD.BookSecondaryImpressions
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryImpressions = CopyFromMBWMD.SecondaryImpressions
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryGrossImpressions = CopyFromMBWMD.SecondaryGrossImpressions
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryUniverse = CopyFromMBWMD.SecondaryUniverse
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryCumeImpressions = CopyFromMBWMD.SecondaryCumeImpressions
                                    NewMediaBroadcastWorksheetMarketDetail.BookSecondaryAQHRating = CopyFromMBWMD.BookSecondaryAQHRating
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryAQHRating = CopyFromMBWMD.SecondaryAQHRating
                                    NewMediaBroadcastWorksheetMarketDetail.BookSecondaryAQH = CopyFromMBWMD.BookSecondaryAQH
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryAQH = CopyFromMBWMD.SecondaryAQH
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryCumeRating = CopyFromMBWMD.SecondaryCumeRating
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryCume = CopyFromMBWMD.SecondaryCume
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryCPM = CopyFromMBWMD.SecondaryCPM
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryVendorSubmittedRating = CopyFromMBWMD.PrimaryVendorSubmittedRating
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryVendorSubmittedShare = CopyFromMBWMD.PrimaryVendorSubmittedShare
                                    NewMediaBroadcastWorksheetMarketDetail.PrimaryVendorSubmittedImpressions = CopyFromMBWMD.PrimaryVendorSubmittedImpressions
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryVendorSubmittedRating = CopyFromMBWMD.SecondaryVendorSubmittedRating
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryVendorSubmittedShare = CopyFromMBWMD.SecondaryVendorSubmittedShare
                                    NewMediaBroadcastWorksheetMarketDetail.SecondaryVendorSubmittedImpressions = CopyFromMBWMD.SecondaryVendorSubmittedImpressions

                                    NewMediaBroadcastWorksheetMarketDetail.CreatedByUserCode = Me.Session.UserCode
                                    NewMediaBroadcastWorksheetMarketDetail.CreatedDate = Now

                                    DbContext.MediaBroadcastWorksheetMarketDetails.Add(NewMediaBroadcastWorksheetMarketDetail)

                                    DateCounter = 1

                                    For Each CopyFromMBWMDD In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketDetailID(DbContext, CopyFromMBWMD.ID).OrderBy(Function(Entity) Entity.Date).ToList

                                        NewMediaBroadcastWorksheetMarketDetailDate = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate

                                        NewMediaBroadcastWorksheetMarketDetailDate.DbContext = DbContext

                                        NewMediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail = NewMediaBroadcastWorksheetMarketDetail

                                        DetailDate = Date.MinValue
                                        DateColumnName = "Date" & DateCounter

                                        Try

                                            For Each DDate In DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                                                If DetailDates(DDate) = DateColumnName Then

                                                    DetailDate = DDate
                                                    Exit For

                                                End If

                                            Next

                                        Catch ex As Exception
                                            DetailDate = Date.MinValue
                                        End Try

                                        If DetailDate = Date.MinValue Then

                                            NewMediaBroadcastWorksheetMarketDetailDate.[Date] = CopyFromMBWMDD.[Date]

                                        Else

                                            NewMediaBroadcastWorksheetMarketDetailDate.[Date] = DetailDate

                                        End If

                                        If MediaBroadcastWorksheetCopyViewModel.CopyRates Then

                                            NewMediaBroadcastWorksheetMarketDetailDate.Rate = CopyFromMBWMDD.Rate

                                        Else

                                            NewMediaBroadcastWorksheetMarketDetailDate.Rate = 0

                                        End If

                                        If MediaBroadcastWorksheetCopyViewModel.CopySpots Then

                                            NewMediaBroadcastWorksheetMarketDetailDate.Spots = CopyFromMBWMDD.Spots

                                        Else

                                            NewMediaBroadcastWorksheetMarketDetailDate.Spots = 0

                                        End If

                                        NewMediaBroadcastWorksheetMarketDetailDate.IsHiatus = CopyFromMBWMDD.IsHiatus
                                        NewMediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)
                                        NewMediaBroadcastWorksheetMarketDetailDate.LinkID = Nothing
                                        NewMediaBroadcastWorksheetMarketDetailDate.LinkLineID = Nothing
                                        NewMediaBroadcastWorksheetMarketDetailDate.OrderNumber = Nothing
                                        NewMediaBroadcastWorksheetMarketDetailDate.OrderLineNumber = Nothing
                                        NewMediaBroadcastWorksheetMarketDetailDate.AllowSpotsToBeEntered = CopyFromMBWMDD.AllowSpotsToBeEntered

                                        DbContext.MediaBroadcastWorksheetMarketDetailDates.Add(NewMediaBroadcastWorksheetMarketDetailDate)

                                        DateCounter += 1

                                    Next

                                    If MediaBroadcastWorksheetCopyViewModel.Worksheet.DoesWorksheetAllowSubmarkets Then

                                        For Each CopyFromMBWMS In MediaBroadcastWorksheetMarketSubmarkets

                                            If NewMediaBroadcastWorksheetMarketSubmarkets.ContainsKey(CopyFromMBWMS.ID) Then

                                                WorksheetMarketSubmarket = NewMediaBroadcastWorksheetMarketSubmarkets(CopyFromMBWMS.ID)

                                                For Each CopyFromMBWMDSD In DbContext.GetQuery(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailSubmarketDemo).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = CopyFromMBWMD.ID AndAlso
                                                                                                                                                                                                                Entity.MediaBroadcastWorksheetMarketSubmarketID = CopyFromMBWMS.ID).ToList

                                                    NewMediaBroadcastWorksheetMarketDetailSubmarketDemo = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailSubmarketDemo

                                                    NewMediaBroadcastWorksheetMarketDetailSubmarketDemo.DbContext = DbContext

                                                    NewMediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarket = WorksheetMarketSubmarket
                                                    NewMediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketDetail = NewMediaBroadcastWorksheetMarketDetail
                                                    NewMediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaDemographicID = CopyFromMBWMDSD.MediaDemographicID
                                                    NewMediaBroadcastWorksheetMarketDetailSubmarketDemo.BookRating = CopyFromMBWMDSD.BookRating
                                                    NewMediaBroadcastWorksheetMarketDetailSubmarketDemo.Rating = CopyFromMBWMDSD.Rating
                                                    NewMediaBroadcastWorksheetMarketDetailSubmarketDemo.BookImpressions = CopyFromMBWMDSD.BookImpressions
                                                    NewMediaBroadcastWorksheetMarketDetailSubmarketDemo.Impressions = CopyFromMBWMDSD.Impressions

                                                    DbContext.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Add(NewMediaBroadcastWorksheetMarketDetailSubmarketDemo)

                                                Next

                                            End If

                                        Next

                                    End If

                                    NewLineNumber += 1

                                Next

                            Next

                            If MediaBroadcastWorksheetCopyViewModel.SelectedWorksheetCopyCDP Is Nothing Then

                                For Each CopyFromMBWMG In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.LoadByMediaBroadcastWorksheetMarketID(DbContext, CopyFromMBWM.ID)

                                    NewMediaBroadcastWorksheetMarketGoal = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal

                                    NewMediaBroadcastWorksheetMarketGoal.DbContext = DbContext

                                    NewMediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarket = NewMediaBroadcastWorksheetMarket
                                    NewMediaBroadcastWorksheetMarketGoal.RowIndex = CopyFromMBWMG.RowIndex
                                    NewMediaBroadcastWorksheetMarketGoal.DaypartID = CopyFromMBWMG.DaypartID
                                    NewMediaBroadcastWorksheetMarketGoal.Length = CopyFromMBWMG.Length
                                    NewMediaBroadcastWorksheetMarketGoal.GRP = CopyFromMBWMG.GRP
                                    NewMediaBroadcastWorksheetMarketGoal.CPP = CopyFromMBWMG.CPP
                                    NewMediaBroadcastWorksheetMarketGoal.BudgetAmount = CopyFromMBWMG.BudgetAmount
                                    NewMediaBroadcastWorksheetMarketGoal.BudgetPercentage = CopyFromMBWMG.BudgetPercentage
                                    NewMediaBroadcastWorksheetMarketGoal.WasRateImported = CopyFromMBWMG.WasRateImported

                                    NewMediaBroadcastWorksheetMarketGoal.CreatedByUserCode = Me.Session.UserCode
                                    NewMediaBroadcastWorksheetMarketGoal.CreatedDate = Now

                                    DbContext.MediaBroadcastWorksheetMarketGoals.Add(NewMediaBroadcastWorksheetMarketGoal)

                                    For Each CopyFromMBWMGD In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoalDate.LoadByMediaBroadcastWorksheetMarketGoalID(DbContext, CopyFromMBWMG.ID)

                                        NewMediaBroadcastWorksheetMarketGoalDate = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate

                                        NewMediaBroadcastWorksheetMarketGoalDate.DbContext = DbContext

                                        NewMediaBroadcastWorksheetMarketGoalDate.MediaBroadcastWorksheetMarketGoal = NewMediaBroadcastWorksheetMarketGoal
                                        NewMediaBroadcastWorksheetMarketGoalDate.[Date] = CopyFromMBWMGD.[Date]
                                        NewMediaBroadcastWorksheetMarketGoalDate.Rate = CopyFromMBWMGD.Rate
                                        NewMediaBroadcastWorksheetMarketGoalDate.GRP = CopyFromMBWMGD.GRP
                                        NewMediaBroadcastWorksheetMarketGoalDate.IsHiatus = CopyFromMBWMGD.IsHiatus

                                        DbContext.MediaBroadcastWorksheetMarketGoalDates.Add(NewMediaBroadcastWorksheetMarketGoalDate)

                                    Next

                                Next

                            End If

                            For Each CopyFromMBWMNTVB In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenTVBook.LoadByMediaBroadcastWorksheetMarketID(DbContext, CopyFromMBWM.ID)

                                NewMediaBroadcastWorksheetMarketNielsenTVBook = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenTVBook

                                NewMediaBroadcastWorksheetMarketNielsenTVBook.DbContext = DbContext

                                NewMediaBroadcastWorksheetMarketNielsenTVBook.MediaBroadcastWorksheetMarket = NewMediaBroadcastWorksheetMarket
                                NewMediaBroadcastWorksheetMarketNielsenTVBook.NielsenTVBookID = CopyFromMBWMNTVB.NielsenTVBookID

                                DbContext.MediaBroadcastWorksheetMarketNielsenTVBooks.Add(NewMediaBroadcastWorksheetMarketNielsenTVBook)

                            Next

                            NewMediaBroadcastWorksheetMarketRevision = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketRevision

                            NewMediaBroadcastWorksheetMarketRevision.DbContext = DbContext

                            NewMediaBroadcastWorksheetMarketRevision.MediaBroadcastWorksheetMarket = NewMediaBroadcastWorksheetMarket
                            NewMediaBroadcastWorksheetMarketRevision.RevisionNumber = 0
                            NewMediaBroadcastWorksheetMarketRevision.Comment = "Copied from " & MediaBroadcastWorksheetCopyViewModel.Worksheet.Name
                            NewMediaBroadcastWorksheetMarketRevision.CreatedByUserCode = Me.Session.UserCode
                            NewMediaBroadcastWorksheetMarketRevision.CreatedDate = Now

                            DbContext.MediaBroadcastWorksheetMarketRevisions.Add(NewMediaBroadcastWorksheetMarketRevision)

                        Next

                        For Each CopyFromMBWSD In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetSecondaryDemo.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetCopyViewModel.Worksheet.ID)

                            NewMediaBroadcastWorksheetSecondaryDemo = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetSecondaryDemo

                            NewMediaBroadcastWorksheetSecondaryDemo.DbContext = DbContext

                            NewMediaBroadcastWorksheetSecondaryDemo.MediaBroadcastWorksheet = NewMediaBroadcastWorksheet
                            NewMediaBroadcastWorksheetSecondaryDemo.MediaDemographicID = CopyFromMBWSD.MediaDemographicID

                            DbContext.MediaBroadcastWorksheetSecondaryDemos.Add(NewMediaBroadcastWorksheetSecondaryDemo)

                        Next

                        DbContext.SaveChanges()

                        Copied = True

                    End If

                End Using

            End If

            Copy_Copy = Copied

        End Function

#End Region

#Region "  Market Edit "

        Public Function MarketEdit_Load(MediaBroadcastWorksheetID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel = Nothing
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim NielsenRadioController As AdvantageFramework.Controller.Media.NielsenRadioController = Nothing
            Dim NielsenMarketNumbers As Generic.List(Of Integer) = Nothing
            Dim NielsenRadioPeriodIDs As Generic.List(Of Integer) = Nothing
            Dim Markets As Generic.List(Of AdvantageFramework.DTO.Market) = Nothing

            MediaBroadcastWorksheetMarketEditViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel

            MediaBroadcastWorksheetMarketEditViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    MediaBroadcastWorksheetMarketEditViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                          Include("Division").
                                                                                                                                                          Include("Product").
                                                                                                                                                          Include("SalesClass").
                                                                                                                                                          Include("Campaign").
                                                                                                                                                          Include("MediaPlan").
                                                                                                                                                          Include("PrimaryMediaDemographic").
                                                                                                                                                          Include("Country").Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                    MediaBroadcastWorksheetMarketEditViewModel.WorksheetSecondaryDemos = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetSecondaryDemo.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetSecondaryDemo(Entity)).ToList

                    If DbContext.MediaBuyers.Any(Function(Entity) Entity.EmployeeCode = Me.Session.User.EmployeeCode AndAlso Entity.IsInactive = False) Then

                        MediaBroadcastWorksheetMarketEditViewModel.IsLoggedInUserInMediaBuyer = True

                    End If

                    If MediaBroadcastWorksheetMarketEditViewModel.IsLoggedInUserInMediaBuyer Then

                        Try

                            Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                                MediaBroadcastWorksheetMarketEditViewModel.AutoPlaceBuyerOnMarket = AdvantageFramework.Agency.LoadMediaAutoBuyer(DataContext)

                            End Using

                        Catch ex As Exception

                        End Try

                    End If

                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.CountryID = AdvantageFramework.DTO.Countries.UnitedStates Then

                        Markets = AdvantageFramework.Database.Procedures.Market.LoadAllActive(DbContext).Where(Function(Entity) Entity.CountryID Is Nothing OrElse Entity.CountryID = MediaBroadcastWorksheetMarketEditViewModel.Worksheet.CountryID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Market(Entity)).ToList

                    Else

                        Markets = AdvantageFramework.Database.Procedures.Market.LoadAllActive(DbContext).Where(Function(Entity) Entity.CountryID = MediaBroadcastWorksheetMarketEditViewModel.Worksheet.CountryID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Market(Entity)).ToList

                    End If

                    MediaBroadcastWorksheetMarketEditViewModel.Markets = Markets.Where(Function(Entity) Entity.IsInactive = False).ToList
                    MediaBroadcastWorksheetMarketEditViewModel.BuyerEmployees = AdvantageFramework.Database.Procedures.MediaBuyer.LoadAllActive(DbContext).Include("Employee").ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.BuyerEmployee(Entity)).ToList

                    MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetID).Include("Market").Include("BuyerEmployee").ToList.
                                                                                                                                                                                       Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).ToList

                End Using

            End Using

            If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio AndAlso Me.Session.IsNielsenSetup Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, String.Empty)

                        NielsenDbContext.Database.Connection.Open()

                        If AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext) Then

                            NielsenMarketNumbers = NielsenDbContext.Database.SqlQuery(Of Integer)(String.Format("EXEC advsp_hosted_spotradio_get_market_numbers '{0}'", Session.NielsenClientCodeForHosted)).ToList
                            NielsenRadioPeriodIDs = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.DTO.Nielsen.ClientNielsenRadioPeriod)(String.Format("EXEC advsp_nielsen_spot_radio_get_client_periods '{0}'", Session.NielsenClientCodeForHosted)).ToList.Select(Function(Entity) Entity.NielsenRadioPeriodID).ToList

                        Else


                            NielsenMarketNumbers = (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadValidated(NielsenDbContext)
                                                    Select Entity.NielsenRadioMarketNumber).Distinct.ToList

                        End If

                        MediaBroadcastWorksheetMarketEditViewModel.NielsenRadioMarkets = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenRadioMarket)

                        For Each Market In Markets.Where(Function(Entity) String.IsNullOrWhiteSpace(Entity.NielsenRadioCode) = False).ToList

                            If NielsenMarketNumbers.Contains(CInt(Market.NielsenRadioCode)) OrElse
                                    (Market.NielsenBlackRadioCode IsNot Nothing AndAlso NielsenMarketNumbers.Contains(CInt(Market.NielsenBlackRadioCode))) OrElse
                                    (Market.NielsenHispanicRadioCode IsNot Nothing AndAlso NielsenMarketNumbers.Contains(CInt(Market.NielsenHispanicRadioCode))) Then

                                MediaBroadcastWorksheetMarketEditViewModel.NielsenRadioMarkets.Add(New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenRadioMarket(Market))

                            End If

                        Next

                        For Each Market In Markets.Where(Function(Entity) Entity.EastlanRadioCode.HasValue).ToList

                            If MediaBroadcastWorksheetMarketEditViewModel.NielsenRadioMarkets.Any(Function(Entity) Entity.MarketCode = Market.Code) = False Then

                                If NielsenMarketNumbers.Contains(CInt(Market.EastlanRadioCode.Value)) OrElse
                                        (Market.EastlanBlackRadioCode.HasValue AndAlso NielsenMarketNumbers.Contains(CInt(Market.EastlanBlackRadioCode.Value))) OrElse
                                        (Market.EastlanHispanicRadioCode.HasValue AndAlso NielsenMarketNumbers.Contains(CInt(Market.EastlanHispanicRadioCode.Value))) Then

                                    MediaBroadcastWorksheetMarketEditViewModel.NielsenRadioMarkets.Add(New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenRadioMarket(Market))

                                End If

                            End If

                        Next

                        For Each NielsenRadioMarket In MediaBroadcastWorksheetMarketEditViewModel.NielsenRadioMarkets

                            If String.IsNullOrWhiteSpace(NielsenRadioMarket.NielsenRadioCode) = False Then

                                If NielsenRadioPeriodIDs IsNot Nothing Then

                                    NielsenRadioMarket.IsNielsenPMM = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True AndAlso NielsenRadioPeriodIDs.Contains(Entity.ID)).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.NielsenRadioCode AndAlso
                                                                                                                                                                                                                                  (Entity.NielsenRadioReportTypeCode = 5 OrElse
                                                                                                                                                                                                                                   Entity.NielsenRadioReportTypeCode = 7 OrElse
                                                                                                                                                                                                                                   Entity.NielsenRadioReportTypeCode = 8 OrElse
                                                                                                                                                                                                                                   Entity.NielsenRadioReportTypeCode = 9))

                                Else

                                    NielsenRadioMarket.IsNielsenPMM = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.NielsenRadioCode AndAlso
                                                                                                                                                                                (Entity.NielsenRadioReportTypeCode = 5 OrElse
                                                                                                                                                                                 Entity.NielsenRadioReportTypeCode = 7 OrElse
                                                                                                                                                                                 Entity.NielsenRadioReportTypeCode = 8 OrElse
                                                                                                                                                                                 Entity.NielsenRadioReportTypeCode = 9))

                                End If

                            ElseIf NielsenRadioMarket.EastlanRadioCode.HasValue Then

                                If NielsenRadioPeriodIDs IsNot Nothing Then

                                    NielsenRadioMarket.IsEastlanPMM = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True AndAlso NielsenRadioPeriodIDs.Contains(Entity.ID)).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.EastlanRadioCode.Value AndAlso
                                                                                                                                                                                                                                  (Entity.NielsenRadioReportTypeCode = 5 OrElse
                                                                                                                                                                                                                                   Entity.NielsenRadioReportTypeCode = 7 OrElse
                                                                                                                                                                                                                                   Entity.NielsenRadioReportTypeCode = 8 OrElse
                                                                                                                                                                                                                                   Entity.NielsenRadioReportTypeCode = 9))

                                Else

                                    NielsenRadioMarket.IsEastlanPMM = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.EastlanRadioCode.Value AndAlso
                                                                                                                                                                                (Entity.NielsenRadioReportTypeCode = 5 OrElse
                                                                                                                                                                                 Entity.NielsenRadioReportTypeCode = 7 OrElse
                                                                                                                                                                                 Entity.NielsenRadioReportTypeCode = 8 OrElse
                                                                                                                                                                                 Entity.NielsenRadioReportTypeCode = 9))

                                End If

                            End If

                            If String.IsNullOrWhiteSpace(NielsenRadioMarket.NielsenBlackRadioCode) = False Then

                                If NielsenRadioPeriodIDs IsNot Nothing Then

                                    NielsenRadioMarket.HasNielsenBlackMarketBooks = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True AndAlso NielsenRadioPeriodIDs.Contains(Entity.ID)).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.NielsenBlackRadioCode)

                                Else

                                    NielsenRadioMarket.HasNielsenBlackMarketBooks = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.NielsenBlackRadioCode)

                                End If

                            Else

                                NielsenRadioMarket.HasNielsenBlackMarketBooks = False

                            End If

                            If NielsenRadioMarket.EastlanBlackRadioCode.HasValue Then

                                If NielsenRadioPeriodIDs IsNot Nothing Then

                                    NielsenRadioMarket.HasEastlanBlackMarketBooks = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True AndAlso NielsenRadioPeriodIDs.Contains(Entity.ID)).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.EastlanBlackRadioCode.Value)

                                Else

                                    NielsenRadioMarket.HasEastlanBlackMarketBooks = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.EastlanBlackRadioCode.Value)

                                End If

                            Else

                                NielsenRadioMarket.HasEastlanBlackMarketBooks = False

                            End If

                            If String.IsNullOrWhiteSpace(NielsenRadioMarket.NielsenHispanicRadioCode) = False Then

                                If NielsenRadioPeriodIDs IsNot Nothing Then

                                    NielsenRadioMarket.HasNielsenHispanicMarketBooks = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True AndAlso NielsenRadioPeriodIDs.Contains(Entity.ID)).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.NielsenHispanicRadioCode)

                                Else

                                    NielsenRadioMarket.HasNielsenHispanicMarketBooks = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.NielsenHispanicRadioCode)

                                End If

                            Else

                                NielsenRadioMarket.HasNielsenHispanicMarketBooks = False

                            End If

                            If NielsenRadioMarket.EastlanHispanicRadioCode.HasValue Then

                                If NielsenRadioPeriodIDs IsNot Nothing Then

                                    NielsenRadioMarket.HasEastlanHispanicMarketBooks = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True AndAlso NielsenRadioPeriodIDs.Contains(Entity.ID)).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.EastlanHispanicRadioCode.Value)

                                Else

                                    NielsenRadioMarket.HasEastlanHispanicMarketBooks = NielsenDbContext.NielsenRadioPeriods.Where(Function(Entity) Entity.Validated = True).Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarket.EastlanHispanicRadioCode.Value)

                                End If

                            Else

                                NielsenRadioMarket.HasEastlanHispanicMarketBooks = False

                            End If

                        Next

                    End Using

                End Using

            End If

            If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Me.Session)

                MediaBroadcastWorksheetMarketEditViewModel.NielsenTVBooks = ShareHPUTBookController.GetRepositoryAllNielsenTVBooks.OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ToList

            ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                NielsenRadioController = New AdvantageFramework.Controller.Media.NielsenRadioController(Me.Session)

                MediaBroadcastWorksheetMarketEditViewModel.NielsenRadioPeriods = NielsenRadioController.LoadAllNieslenRadioPeriods.OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

            End If

            MediaBroadcastWorksheetMarketEditViewModel.IsNewRow = False
            MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled = False
            MediaBroadcastWorksheetMarketEditViewModel.CancelEnabled = False
            MediaBroadcastWorksheetMarketEditViewModel.HasDataBeenEnteredInAnyMarketSchedules = (MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets IsNot Nothing AndAlso MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Any(Function(Entity) Entity.HasData = True))

            MarketEdit_Load = MediaBroadcastWorksheetMarketEditViewModel

        End Function
        Public Function MarketEdit_Save(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel) As Boolean

            'objects
            Dim Saved As Boolean = True
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim MediaBroadcastWorksheetMarkets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket) = Nothing
            Dim MediaBroadcastWorksheetID As Integer = 0
            Dim RefreshNielsenData As Boolean = False
            Dim MaxRevisionNumber As Integer = 0
            Dim NielsenRadioMarketNumber As Integer = 0
            Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim MBWMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Configuration.AutoDetectChangesEnabled = False

                MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketEditViewModel.MediaBroadcastWorksheetID

                MediaBroadcastWorksheetMarkets = DbContext.MediaBroadcastWorksheetMarkets.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).ToList

                For Each WorksheetMarket In MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets

                    RefreshNielsenData = False
                    MediaBroadcastWorksheetMarket = MediaBroadcastWorksheetMarkets.SingleOrDefault(Function(Entity) Entity.ID = WorksheetMarket.ID)

                    If MediaBroadcastWorksheetMarket IsNot Nothing Then

                        MediaBroadcastWorksheetMarket.DbContext = DbContext

                        If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                            If WorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) OrElse
                                    WorksheetMarket.HUTPUTNielsenTVBookID.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.HUTPUTNielsenTVBookID.GetValueOrDefault(0) Then

                                RefreshNielsenData = True

                            End If

                            If WorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.GetValueOrDefault(0) Then

                                RefreshNielsenData = True

                            End If

                            If MediaBroadcastWorksheetMarket.PeriodStart.HasValue AndAlso MediaBroadcastWorksheetMarket.PeriodEnd.HasValue AndAlso
                                    WorksheetMarket.PeriodStart.GetValueOrDefault("01/01/2000") <> MediaBroadcastWorksheetMarket.PeriodStart.GetValueOrDefault("01/01/2000") OrElse
                                    WorksheetMarket.PeriodEnd.GetValueOrDefault("01/01/2000") <> MediaBroadcastWorksheetMarket.PeriodEnd.GetValueOrDefault("01/01/2000") Then

                                RefreshNielsenData = True

                            End If

                        ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                            If WorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) OrElse
                                    WorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0) OrElse
                                    WorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0) OrElse
                                    WorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0) OrElse
                                    WorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0) Then

                                RefreshNielsenData = True

                            End If

                            If WorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.GetValueOrDefault(0) OrElse
                                    WorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID.GetValueOrDefault(0) <> MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID.GetValueOrDefault(0) Then

                                RefreshNielsenData = True

                            End If

                        End If

                        WorksheetMarket.SaveToEntity(MediaBroadcastWorksheetMarket)

                        MediaBroadcastWorksheetMarket.ModifiedByUserCode = Me.Session.UserCode
                        MediaBroadcastWorksheetMarket.ModifiedDate = Now

                        If RefreshNielsenData = True AndAlso MediaBroadcastWorksheetMarketEditViewModel.Worksheet.PrimaryMediaDemographicID.HasValue AndAlso
                                ((Me.Session.IsNielsenSetup AndAlso MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen) OrElse
                                 (Me.Session.IsNielsenPuertoRicoSetup AndAlso MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico)) Then

                            If DbContext.MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).Any Then

                                MaxRevisionNumber = DbContext.MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).Select(Function(Entity) Entity.RevisionNumber).Max

                            Else

                                MaxRevisionNumber = 0

                            End If

                            MediaBroadcastWorksheetMarketDetails = DbContext.MediaBroadcastWorksheetMarketDetails.Include("Vendor").
                                                                                                                  Include("MediaBroadcastWorksheetMarketDetailDates").
                                                                                                                  Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID AndAlso
                                                                                                                                         Entity.RevisionNumber = MaxRevisionNumber).ToList

                            For Each VendorCode In MediaBroadcastWorksheetMarketDetails.Select(Function(Entity) Entity.VendorCode).Distinct.ToList

                                Try

                                    MBWMarketDetails = MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.VendorCode = VendorCode AndAlso
                                                                                                                   String.IsNullOrWhiteSpace(Entity.Days) = False AndAlso
                                                                                                                   String.IsNullOrWhiteSpace(Entity.StartTime) = False AndAlso
                                                                                                                   String.IsNullOrWhiteSpace(Entity.EndTime) = False).ToList

                                Catch ex As Exception
                                    MBWMarketDetails = Nothing
                                End Try

                                If MBWMarketDetails IsNot Nothing AndAlso MBWMarketDetails.Count > 0 Then

                                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                        If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                                            If MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                                                If MediaBroadcastWorksheetMarket.IsCable AndAlso
                                                        MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                                                    Edit_GetTVCableRatingAndShareData(DbContext, MediaBroadcastWorksheetMarketEditViewModel.Worksheet.PrimaryMediaDemographicID.Value, MediaBroadcastWorksheetMarket.Market.NielsenTVCode,
                                                                                      MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.Value, MediaBroadcastWorksheetMarket.HUTPUTNielsenTVBookID,
                                                                                      MBWMarketDetails)

                                                Else

                                                    Edit_GetTVRatingAndShareData(DbContext, MediaBroadcastWorksheetMarketEditViewModel.Worksheet.PrimaryMediaDemographicID.Value, MediaBroadcastWorksheetMarket.Market.NielsenTVCode,
                                                                                 MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.Value, MediaBroadcastWorksheetMarket.HUTPUTNielsenTVBookID,
                                                                                 MBWMarketDetails)

                                                End If

                                            Else

                                                For Each MediaBroadcastWorksheetMarketDetail In MBWMarketDetails

                                                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                                                    Else

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                                                        MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                                                    End If

                                                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                                                    Else

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                                                        MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                                                    End If

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                                                    MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                                                    MediaBroadcastWorksheetMarketDetail.Program = String.Empty

                                                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                                                    Else

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                                                        MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                                                    End If

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryGRP = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryCPP = 0

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryReach = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = 0

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryCPM = 0

                                                Next

                                            End If

                                        ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                                            If MediaBroadcastWorksheetMarket.PeriodStart.HasValue AndAlso MediaBroadcastWorksheetMarket.PeriodEnd.HasValue Then

                                                Edit_GetTVRatingAndShareData(DbContext, MediaBroadcastWorksheetMarketEditViewModel.Worksheet.PrimaryMediaDemographicID.Value, MediaBroadcastWorksheetMarket.PeriodStart.Value,
                                                                             MediaBroadcastWorksheetMarket.PeriodEnd.Value, MBWMarketDetails)

                                            Else

                                                For Each MediaBroadcastWorksheetMarketDetail In MBWMarketDetails

                                                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryRating <> MediaBroadcastWorksheetMarketDetail.PrimaryRating Then

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0

                                                    Else

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = 0
                                                        MediaBroadcastWorksheetMarketDetail.PrimaryRating = 0

                                                    End If

                                                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryShare <> MediaBroadcastWorksheetMarketDetail.PrimaryShare Then

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0

                                                    Else

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = 0
                                                        MediaBroadcastWorksheetMarketDetail.PrimaryShare = 0

                                                    End If

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = 0

                                                    MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                                                    MediaBroadcastWorksheetMarketDetail.Program = String.Empty

                                                    If MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions <> MediaBroadcastWorksheetMarketDetail.PrimaryImpressions Then

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0

                                                    Else

                                                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = 0
                                                        MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = 0

                                                    End If

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = 0

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryGRP = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryCPP = 0

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryReach = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = 0

                                                    MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryCPM = 0

                                                Next

                                            End If

                                        End If

                                    ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                        If MediaBroadcastWorksheetMarket.NeilsenRadioPeriodID1.HasValue Then

                                            If MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen AndAlso
                                                    String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarket.Market.NielsenRadioCode) = False Then

                                                NielsenRadioMarketNumber = CInt(MediaBroadcastWorksheetMarket.Market.NielsenRadioCode)

                                            ElseIf MediaBroadcastWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan AndAlso
                                                    MediaBroadcastWorksheetMarket.Market.EastlanRadioCode.GetValueOrDefault(0) > 0 Then

                                                NielsenRadioMarketNumber = CInt(MediaBroadcastWorksheetMarket.Market.EastlanRadioCode.GetValueOrDefault(0))

                                            End If

                                            If NielsenRadioMarketNumber > 0 Then

                                                Edit_GetRadioRatingAndShareData(DbContext, MediaBroadcastWorksheetMarketEditViewModel.Worksheet.PrimaryMediaDemographicID.Value,
                                                                                NielsenRadioMarketNumber, MediaBroadcastWorksheetMarket, MBWMarketDetails)

                                            End If

                                        Else

                                            For Each MediaBroadcastWorksheetMarketDetail In MBWMarketDetails

                                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0

                                                Else

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = 0

                                                End If

                                                If MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH <> MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating Then

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0

                                                Else

                                                    MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = 0
                                                    MediaBroadcastWorksheetMarketDetail.PrimaryAQH = 0

                                                End If

                                                MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryCume = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = 0

                                                MediaBroadcastWorksheetMarketDetail.PrimaryGRP = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryCPP = 0

                                                MediaBroadcastWorksheetMarketDetail.PrimaryReach = 0
                                                MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = 0

                                                MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = 0

                                            Next

                                        End If

                                        'ElseIf MediaBroadcastWorksheetEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                                        '	Edit_GetRatingAndShareData(DbContext, MediaBroadcastWorksheetEditViewModel.Worksheet.PrimaryMediaDemographicID.Value, MediaBroadcastWorksheetMarket.Market.NielsenTVDMACode,
                                        '							   MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.Value, MediaBroadcastWorksheetMarket.HUTPUTNielsenTVBookID, MediaBroadcastWorksheetMarketDetail)

                                    End If

                                End If

                            Next

                        End If

                    End If

                Next

                DbContext.Configuration.AutoDetectChangesEnabled = True

                DbContext.SaveChanges()

            End Using

            MarketEdit_Save = Saved

        End Function
        Public Function MarketEdit_Add(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                       WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket,
                                       ByRef ErrorMessage As String) As Boolean

            'objects
            Dim IsValid As Boolean = True
            Dim Added As Boolean = False
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim MediaBroadcastWorksheetMarketRevision As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketRevision = Nothing
            Dim Market As AdvantageFramework.Database.Entities.Market = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                MediaBroadcastWorksheetMarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket

                If MediaBroadcastWorksheetMarket.IsEntityBeingAdded() Then

                    MediaBroadcastWorksheetMarket.DbContext = DbContext

                    WorksheetMarket.SaveToEntity(MediaBroadcastWorksheetMarket)

                    MediaBroadcastWorksheetMarket.CreatedByUserCode = Me.Session.UserCode
                    MediaBroadcastWorksheetMarket.CreatedDate = Now

                    Try

                        DbContext.MediaBroadcastWorksheetMarkets.Add(MediaBroadcastWorksheetMarket)

                        ErrorMessage = MediaBroadcastWorksheetMarket.ValidateEntity(IsValid)

                        If IsValid Then

                            MediaBroadcastWorksheetMarketRevision = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketRevision

                            MediaBroadcastWorksheetMarketRevision.MediaBroadcastWorksheetMarket = MediaBroadcastWorksheetMarket
                            MediaBroadcastWorksheetMarketRevision.RevisionNumber = 0
                            MediaBroadcastWorksheetMarketRevision.Comment = ""
                            MediaBroadcastWorksheetMarketRevision.CreatedByUserCode = Me.Session.UserCode
                            MediaBroadcastWorksheetMarketRevision.CreatedDate = Now

                            DbContext.MediaBroadcastWorksheetMarketRevisions.Add(MediaBroadcastWorksheetMarketRevision)

                            DbContext.SaveChanges()

                            WorksheetMarket.ID = MediaBroadcastWorksheetMarket.ID

                            Market = AdvantageFramework.Database.Procedures.Market.LoadByCode(DbContext, MediaBroadcastWorksheetMarket.MarketCode)

                            If Market IsNot Nothing Then

                                WorksheetMarket.MarketNielsenRadioCode = Market.NielsenRadioCode
                                WorksheetMarket.MarketNielsenTVCode = Market.NielsenTVCode
                                WorksheetMarket.MarketNielsenTVDMACode = Market.NielsenTVDMACode
                                WorksheetMarket.MarketComscoreMarketNumber = Market.ComscoreMarketNumber
                                WorksheetMarket.MarketComscoreNewMarketNumber = Market.ComscoreNewMarketNumber

                            End If

                            Added = True
                            MediaBroadcastWorksheetMarketEditViewModel.HasMarketsModified = True

                        End If

                    Catch ex As SqlClient.SqlException
                        Added = False
                        ErrorMessage = ex.Message
                    End Try

                End If

            End Using

            MarketEdit_Add = Added

        End Function
        Public Function MarketEdit_Delete(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                          ByRef ErrorMessage As String) As Boolean

            'objects
            Dim Deleted As Boolean = False
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                MediaBroadcastWorksheetMarket = DbContext.MediaBroadcastWorksheetMarkets.Find(MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.ID)

                If MediaBroadcastWorksheetMarket IsNot Nothing Then

                    For Each MediaBroadcastWorksheetMarketDetail In DbContext.MediaBroadcastWorksheetMarketDetails.Include("MediaBroadcastWorksheetMarketDetailDates").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).ToList

                        For Each MediaBroadcastWorksheetMarketDetailDate In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.ToList

                            DbContext.MediaBroadcastWorksheetMarketDetailDates.Remove(MediaBroadcastWorksheetMarketDetailDate)

                        Next

                        DbContext.MediaBroadcastWorksheetMarketDetails.Remove(MediaBroadcastWorksheetMarketDetail)

                    Next

                    For Each MediaRFPHeader In DbContext.MediaRFPHeaders.Include("MediaRFPAvailLines").
                                                                         Include("MediaRFPAvailLines.MediaRFPAvailLineSpots").
                                                                         Include("MediaRFPAvailLines.MediaRFPDemos").
                                                                         Include("MediaRFPHeaderStatuses").
                                                                         Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).ToList

                        For Each MediaRFPHeaderStatus In MediaRFPHeader.MediaRFPHeaderStatuses.ToList

                            DbContext.MediaRFPHeaderStatuses.Remove(MediaRFPHeaderStatus)

                        Next

                        For Each MediaRFPAvailLine In MediaRFPHeader.MediaRFPAvailLines.ToList

                            For Each MediaRFPAvailLineSpot In MediaRFPAvailLine.MediaRFPAvailLineSpots.ToList

                                DbContext.MediaRFPAvailLineSpots.Remove(MediaRFPAvailLineSpot)

                            Next

                            For Each MediaRFPDemo In MediaRFPAvailLine.MediaRFPDemos.ToList

                                DbContext.MediaRFPDemos.Remove(MediaRFPDemo)

                            Next

                            DbContext.MediaRFPAvailLines.Remove(MediaRFPAvailLine)

                        Next

                        DbContext.MediaRFPHeaders.Remove(MediaRFPHeader)

                    Next

                    For Each MediaBroadcastWorksheetMarketGoal In DbContext.MediaBroadcastWorksheetMarketGoals.Include("MediaBroadcastWorksheetMarketGoalDates").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).ToList

                        For Each MediaBroadcastWorksheetMarketGoalDate In MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.ToList

                            DbContext.MediaBroadcastWorksheetMarketGoalDates.Remove(MediaBroadcastWorksheetMarketGoalDate)

                        Next

                        DbContext.MediaBroadcastWorksheetMarketGoals.Remove(MediaBroadcastWorksheetMarketGoal)

                    Next

                    For Each MediaBroadcastWorksheetMarketNielsenTVBook In DbContext.MediaBroadcastWorksheetMarketNielsenTVBooks.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).ToList

                        DbContext.MediaBroadcastWorksheetMarketNielsenTVBooks.Remove(MediaBroadcastWorksheetMarketNielsenTVBook)

                    Next

                    For Each MediaBroadcastWorksheetMarketNielsenRadioPeriod In DbContext.MediaBroadcastWorksheetMarketNielsenRadioPeriods.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).ToList

                        DbContext.MediaBroadcastWorksheetMarketNielsenRadioPeriods.Remove(MediaBroadcastWorksheetMarketNielsenRadioPeriod)

                    Next

                    For Each MediaBroadcastWorksheetMarketRevision In DbContext.MediaBroadcastWorksheetMarketRevisions.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).ToList

                        DbContext.MediaBroadcastWorksheetMarketRevisions.Remove(MediaBroadcastWorksheetMarketRevision)

                    Next

                    For Each MediaBroadcastWorksheetMarketSubmarket In DbContext.MediaBroadcastWorksheetMarketSubmarkets.Include("MediaBroadcastWorksheetMarketDetailSubmarketDemos").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID).ToList

                        If MediaBroadcastWorksheetMarketSubmarket.MediaBroadcastWorksheetMarketDetailSubmarketDemos IsNot Nothing AndAlso MediaBroadcastWorksheetMarketSubmarket.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Count > 0 Then

                            For Each MediaBroadcastWorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketSubmarket.MediaBroadcastWorksheetMarketDetailSubmarketDemos.ToList

                                DbContext.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Remove(MediaBroadcastWorksheetMarketDetailSubmarketDemo)

                            Next

                        End If

                        DbContext.MediaBroadcastWorksheetMarketSubmarkets.Remove(MediaBroadcastWorksheetMarketSubmarket)

                    Next

                    DbContext.MediaBroadcastWorksheetMarkets.Remove(MediaBroadcastWorksheetMarket)

                    DbContext.Configuration.AutoDetectChangesEnabled = True

                    DbContext.SaveChanges()

                    If MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Remove(MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket) Then

                        Deleted = True
                        MediaBroadcastWorksheetMarketEditViewModel.HasMarketsModified = True
                        MediaBroadcastWorksheetMarketEditViewModel.HasDataBeenEnteredInAnyMarketSchedules = (MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets IsNot Nothing AndAlso MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Any(Function(Entity) Entity.HasData = True))

                    End If

                Else

                    ErrorMessage &= System.Environment.NewLine & "This worksheet market is no longer valid in the system."

                End If

            End Using

            MarketEdit_Delete = Deleted

        End Function
        Public Sub MarketEdit_CancelNewItemRow(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel)

            MediaBroadcastWorksheetMarketEditViewModel.IsNewRow = False
            MediaBroadcastWorksheetMarketEditViewModel.CancelEnabled = False
            MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled = (MediaBroadcastWorksheetMarketEditViewModel.HasASelectedWorksheetMarket) ' AndAlso MediaBroadcastWorksheetMarketEditViewModel.IsCanadianWorksheet = False)

            If MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled AndAlso MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket IsNot Nothing Then

                MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled = (MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            End If

            MediaBroadcastWorksheetMarketEditViewModel.Books_AddEnabled = (MediaBroadcastWorksheetMarketEditViewModel.HasASelectedWorksheetMarket AndAlso
                                                                           MarketEdit_DoesMarketHaveRatingsSourceData(MediaBroadcastWorksheetMarketEditViewModel) AndAlso
                                                                           MediaBroadcastWorksheetMarketEditViewModel.HasPrimaryDemographic)
            MediaBroadcastWorksheetMarketEditViewModel.Books_CopyToEnabled = MediaBroadcastWorksheetMarketEditViewModel.Books_AddEnabled

        End Sub
        Public Function MarketEdit_GetRepositoryMarkets(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel) As Generic.List(Of AdvantageFramework.DTO.Market)

            'objects
            Dim Markets As Generic.List(Of AdvantageFramework.DTO.Market) = Nothing

            'If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType <> AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

            '	Markets = (From Market In MediaBroadcastWorksheetMarketEditViewModel.Markets
            '			   Where MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Any(Function(Entity) Entity.MarketCode = Market.Code) = False
            '			   Select Market).ToList

            'Else

            Markets = MediaBroadcastWorksheetMarketEditViewModel.Markets.ToList

            'End If

            MarketEdit_GetRepositoryMarkets = Markets

        End Function
        Public Function MarketEdit_GetRepositoryDefaultShareBook(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                                 MarketCode As String, IsCable As Boolean, MediaBroadcastWorksheetMarketTVGeographyID As Integer) As Nullable(Of Integer)

            'objects
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim DefaultSharebookID As Nullable(Of Integer) = Nothing
            Dim NielsenTVBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing

            NielsenTVBooks = Me.MarketEdit_GetRepositorySharebooks(MediaBroadcastWorksheetMarketEditViewModel, MarketCode, IsCable, MediaBroadcastWorksheetMarketTVGeographyID)

            If NielsenTVBooks IsNot Nothing AndAlso NielsenTVBooks.Count > 0 Then

                NielsenTVBook = (From Entity In NielsenTVBooks
                                 Where Entity.Stream.Contains("-H") = False AndAlso
                                       Entity.Stream.Contains("-B") = False AndAlso
                                       Entity.Stream.Contains("-A") = False AndAlso
                                       Entity.Stream.Contains("-OL") = False
                                 Select Entity).OrderByDescending(Function(Entity) Entity.Year).ThenByDescending(Function(Entity) Entity.Month).FirstOrDefault

                If NielsenTVBook IsNot Nothing Then

                    DefaultSharebookID = NielsenTVBook.ID

                End If

            End If

            MarketEdit_GetRepositoryDefaultShareBook = DefaultSharebookID

        End Function
        Public Function MarketEdit_GetRepositorySharebooks(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                           MarketCode As String, IsCable As Boolean, MediaBroadcastWorksheetMarketTVGeographyID As Integer, Optional ShareBookID As Nullable(Of Integer) = Nothing) As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            'objects
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim Market As AdvantageFramework.DTO.Market = Nothing

            If String.IsNullOrWhiteSpace(MarketCode) = False AndAlso MediaBroadcastWorksheetMarketEditViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) > 0 Then

                Market = MediaBroadcastWorksheetMarketEditViewModel.Markets.SingleOrDefault(Function(Entity) Entity.Code = MarketCode)

                If Market IsNot Nothing Then

                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                        NielsenTVBooks = GetNielsenTVBooks(Market.Code, Market.NielsenTVCode, IsCable, MediaBroadcastWorksheetMarketTVGeographyID, ShareBookID) ', False)

                    ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                        NielsenTVBooks = GetComscoreTVBooks()

                    End If

                Else

                    NielsenTVBooks = New List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

                End If

            Else

                NielsenTVBooks = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            End If

            MarketEdit_GetRepositorySharebooks = NielsenTVBooks

        End Function
        Public Function MarketEdit_GetRepositoryHUTPUTBooks(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                            MarketCode As String, IsCable As Boolean, MediaBroadcastWorksheetMarketTVGeographyID As Integer, SharebookNielsenTVBookID As Nullable(Of Integer)) As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            'objects
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing

            If SharebookNielsenTVBookID.HasValue Then

                NielsenTVBooks = MarketEdit_GetRepositorySharebooks(MediaBroadcastWorksheetMarketEditViewModel, MarketCode, IsCable, MediaBroadcastWorksheetMarketTVGeographyID, SharebookNielsenTVBookID)

                NielsenTVBooks = NielsenTVBooks.Where(Function(Entity) Entity.ID <> SharebookNielsenTVBookID.Value).ToList

            Else

                NielsenTVBooks = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            End If

            MarketEdit_GetRepositoryHUTPUTBooks = NielsenTVBooks

        End Function
        Public Function MarketEdit_GetRepositoryTVBooks(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel) As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            'objects
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing

            ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Me.Session)

            If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                NielsenTVBooks = ShareHPUTBookController.GetRepositoryAllNielsenTVBooks().OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ThenBy(Function(NB) NB.ReportingService).ToList

            ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                NielsenTVBooks = ShareHPUTBookController.GetRepositoryAllComscoreTVBooks().OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ToList

            End If

            MarketEdit_GetRepositoryTVBooks = NielsenTVBooks

        End Function
        Public Function MarketEdit_GetRepositoryAllNielsenRadioPeriods(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel) As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            'objects
            Dim NielsenRadioController As AdvantageFramework.Controller.Media.NielsenRadioController = Nothing
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing

            NielsenRadioController = New AdvantageFramework.Controller.Media.NielsenRadioController(Me.Session)

            NielsenRadioPeriods = NielsenRadioController.LoadAllNieslenRadioPeriods.OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

            MarketEdit_GetRepositoryAllNielsenRadioPeriods = NielsenRadioPeriods

        End Function
        Public Function MarketEdit_GetRepositoryNielsenRadioPeriods(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                                    MarketCode As String, Ethnicity As Integer, GeoIndicator As Short,
                                                                    ExternalRadioSource As AdvantageFramework.Nielsen.Database.Entities.RadioSource,
                                                                    ExcludeNielsenRadioPeriodIDs As Generic.List(Of Integer)) As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            'objects
            Dim NielsenRadioController As AdvantageFramework.Controller.Media.NielsenRadioController = Nothing
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing
            Dim Market As AdvantageFramework.DTO.Market = Nothing

            If String.IsNullOrWhiteSpace(MarketCode) = False Then

                Market = MediaBroadcastWorksheetMarketEditViewModel.Markets.SingleOrDefault(Function(Entity) Entity.Code = MarketCode)

                If Market IsNot Nothing Then

                    NielsenRadioController = New AdvantageFramework.Controller.Media.NielsenRadioController(Me.Session)

                    If ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen AndAlso String.IsNullOrWhiteSpace(Market.NielsenRadioCode) = False Then

                        If Ethnicity = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.All Then

                            NielsenRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(Market.NielsenRadioCode, Ethnicity, GeoIndicator, ExcludeNielsenRadioPeriodIDs, ExternalRadioSource).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

                        ElseIf Ethnicity = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Black Then

                            NielsenRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(Market.NielsenBlackRadioCode, Ethnicity, GeoIndicator, ExcludeNielsenRadioPeriodIDs, ExternalRadioSource).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

                        ElseIf Ethnicity = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Hispanic Then

                            NielsenRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(Market.NielsenHispanicRadioCode, Ethnicity, GeoIndicator, ExcludeNielsenRadioPeriodIDs, ExternalRadioSource).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

                        End If

                    ElseIf ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan AndAlso Market.EastlanRadioCode.HasValue Then

                        If Ethnicity = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.All Then

                            NielsenRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(Market.EastlanRadioCode.Value, Ethnicity, GeoIndicator, ExcludeNielsenRadioPeriodIDs, ExternalRadioSource).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

                        ElseIf Ethnicity = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Black Then

                            NielsenRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(Market.EastlanBlackRadioCode.Value, Ethnicity, GeoIndicator, ExcludeNielsenRadioPeriodIDs, ExternalRadioSource).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

                        ElseIf Ethnicity = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Hispanic Then

                            NielsenRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(Market.EastlanHispanicRadioCode.Value, Ethnicity, GeoIndicator, ExcludeNielsenRadioPeriodIDs, ExternalRadioSource).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

                        End If

                    Else

                        NielsenRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

                    End If

                Else

                    NielsenRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

                End If

            Else

                NielsenRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            End If

            MarketEdit_GetRepositoryNielsenRadioPeriods = NielsenRadioPeriods

        End Function
        Public Function MarketEdit_GetRepositoryMarketTVGeography(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel, MarketCode As String) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim Market As AdvantageFramework.DTO.Market = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies), False)

            If String.IsNullOrWhiteSpace(MarketCode) = False Then

                Market = MediaBroadcastWorksheetMarketEditViewModel.Markets.SingleOrDefault(Function(Entity) Entity.Code = MarketCode)

                If Market IsNot Nothing AndAlso String.IsNullOrWhiteSpace(Market.NielsenTVCode) = False Then

                    If Session.IsNielsenSetup Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                            DbContext.Database.Connection.Open()

                            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                NielsenDbContext.Database.Connection.Open()

                                If AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext) Then

                                    If NielsenDbContext.Database.SqlQuery(Of Object)(String.Format("EXEC dbo.advsp_hosted_ncc_tv_market_syscodes '{0}', {1}", Session.NielsenClientCodeForHosted, Market.NielsenTVCode)).Count = 0 Then

                                        DataTable.Rows.RemoveAt(1)

                                    End If

                                Else

                                    If NielsenDbContext.Database.SqlQuery(Of Object)(String.Format("EXEC dbo.advsp_ncc_tv_market_syscodes {0}", Market.NielsenTVCode)).Count = 0 Then

                                        DataTable.Rows.RemoveAt(1)

                                    End If

                                End If

                            End Using

                        End Using

                    Else

                        DataTable.Rows.RemoveAt(1)

                    End If

                Else

                    DataTable.Rows.RemoveAt(1)

                End If

            End If

            MarketEdit_GetRepositoryMarketTVGeography = DataTable

        End Function
        Public Function MarketEdit_GetRepositoryMarketRadioGeography(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                                     ExternalRadioSource As AdvantageFramework.Nielsen.Database.Entities.RadioSource) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioGeographies), False)

            If MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket IsNot Nothing Then

                If ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                    DataTable.Rows.RemoveAt(2)
                    DataTable.Rows.RemoveAt(1)

                End If

            End If

            MarketEdit_GetRepositoryMarketRadioGeography = DataTable

        End Function
        Public Function MarketEdit_GetRepositoryMarketRadioEthnicity(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                                     ExternalRadioSource As AdvantageFramework.Nielsen.Database.Entities.RadioSource) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), False)

            If MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket IsNot Nothing Then

                If ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                    If MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket.HasNielsenHispanicMarketBooks = False Then

                        DataTable.Rows.RemoveAt(2)

                    End If

                    If MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket.HasNielsenBlackMarketBooks = False Then

                        DataTable.Rows.RemoveAt(1)

                    End If

                ElseIf ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                    If MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket.HasEastlanHispanicMarketBooks = False Then

                        DataTable.Rows.RemoveAt(2)

                    End If

                    If MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket.HasEastlanBlackMarketBooks = False Then

                        DataTable.Rows.RemoveAt(1)

                    End If

                End If

            Else

                DataTable.Rows.RemoveAt(2)
                DataTable.Rows.RemoveAt(1)

            End If

            MarketEdit_GetRepositoryMarketRadioEthnicity = DataTable

        End Function
        Public Function MarketEdit_GetRepositoryMarketDescription(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                                  MarketCode As String) As String

            'objects
            Dim MarketDescription As String = String.Empty
            Dim Market As AdvantageFramework.DTO.Market = Nothing

            Market = MediaBroadcastWorksheetMarketEditViewModel.Markets.FirstOrDefault(Function(Entity) Entity.Code = MarketCode)

            If Market IsNot Nothing Then

                MarketDescription = Market.Description

            End If

            MarketEdit_GetRepositoryMarketDescription = MarketDescription

        End Function
        Public Function MarketEdit_GetRepositoryBuyerEmployeeName(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                                  BuyerEmployeeCode As String) As String

            'objects
            Dim BuyerEmployeeName As String = String.Empty
            Dim BuyerEmployee As AdvantageFramework.DTO.Media.BuyerEmployee = Nothing

            BuyerEmployee = MediaBroadcastWorksheetMarketEditViewModel.BuyerEmployees.FirstOrDefault(Function(Entity) Entity.Code = BuyerEmployeeCode)

            If BuyerEmployee IsNot Nothing Then

                BuyerEmployeeName = BuyerEmployee.Name

            End If

            MarketEdit_GetRepositoryBuyerEmployeeName = BuyerEmployeeName

        End Function
        Public Function MarketEdit_GetRepositoryExternalRadioSource(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                                    MarketCode As String) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing
            Dim Market As AdvantageFramework.DTO.Market = Nothing
            Dim NielsenRadioController As AdvantageFramework.Controller.Media.NielsenRadioController = Nothing
            Dim AllNielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing
            Dim EastlanRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.Nielsen.Database.Entities.RadioSource), False)

            DataTable.Rows.RemoveAt(2)

            If Me.Session.IsNielsenSetup Then

                If String.IsNullOrWhiteSpace(MarketCode) = False Then

                    Market = MediaBroadcastWorksheetMarketEditViewModel.Markets.SingleOrDefault(Function(Entity) Entity.Code = MarketCode)

                    If Market IsNot Nothing Then

                        NielsenRadioController = New AdvantageFramework.Controller.Media.NielsenRadioController(Me.Session)

                        If String.IsNullOrWhiteSpace(Market.NielsenRadioCode) = False Then

                            NielsenRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(Market.NielsenRadioCode)

                        Else

                            NielsenRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

                        End If

                        If Market.EastlanRadioCode.GetValueOrDefault(0) > 0 Then

                            EastlanRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(Market.EastlanRadioCode.GetValueOrDefault(0))

                        Else

                            EastlanRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

                        End If

                    Else

                        NielsenRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)
                        EastlanRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

                    End If

                Else

                    NielsenRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)
                    EastlanRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

                End If

                AllNielsenRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

                If NielsenRadioPeriods IsNot Nothing AndAlso NielsenRadioPeriods.Count > 0 Then

                    AllNielsenRadioPeriods.AddRange(NielsenRadioPeriods)

                End If

                If EastlanRadioPeriods IsNot Nothing AndAlso EastlanRadioPeriods.Count > 0 Then

                    AllNielsenRadioPeriods.AddRange(EastlanRadioPeriods)

                End If

                If AllNielsenRadioPeriods IsNot Nothing AndAlso AllNielsenRadioPeriods.Count > 0 Then

                    If AllNielsenRadioPeriods.Any(Function(Entity) Entity.Source = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan) = False Then

                        DataTable.Rows.RemoveAt(1)

                    End If

                    If DataTable.Rows.Count > 1 Then

                        If AllNielsenRadioPeriods.Any(Function(Entity) Entity.Source = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen) = False Then

                            DataTable.Rows.RemoveAt(0)

                        End If

                    End If

                Else

                    DataTable.Rows.RemoveAt(1)

                End If

            Else

                DataTable.Rows.RemoveAt(1)

            End If

            MarketEdit_GetRepositoryExternalRadioSource = DataTable

        End Function
        Public Sub MarketEdit_SharebookChanged(ByRef MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                               SharebookNielsenTVBookID As Nullable(Of Integer),
                                               ByRef SelectedWorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket)

            If SharebookNielsenTVBookID Is Nothing Then

                SelectedWorksheetMarket.HUTPUTNielsenTVBookID = Nothing

            End If

            If SharebookNielsenTVBookID.HasValue AndAlso SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso
                    SharebookNielsenTVBookID.Value = SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value Then

                SelectedWorksheetMarket.HUTPUTNielsenTVBookID = Nothing

            End If

        End Sub
        Public Sub MarketEdit_MarketSelectionChanged(ByRef MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                     IsNewItemRow As Boolean,
                                                     SelectedWorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket)

            MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket = SelectedWorksheetMarket

            If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket IsNot Nothing Then

                    MarketEdit_SelectNielsenRadioMarket(MediaBroadcastWorksheetMarketEditViewModel, MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.MarketCode, MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.ExternalRadioSource)

                Else

                    MarketEdit_SelectNielsenRadioMarket(MediaBroadcastWorksheetMarketEditViewModel, String.Empty, AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen)

                End If

            End If

            MediaBroadcastWorksheetMarketEditViewModel.IsNewRow = IsNewItemRow
            MediaBroadcastWorksheetMarketEditViewModel.CancelEnabled = IsNewItemRow
            MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled = (Not IsNewItemRow) ' AndAlso MediaBroadcastWorksheetMarketEditViewModel.IsCanadianWorksheet = False)

            MediaBroadcastWorksheetMarketEditViewModel.Books_AddEnabled = (Not IsNewItemRow AndAlso
                                                                           MarketEdit_DoesMarketHaveRatingsSourceData(MediaBroadcastWorksheetMarketEditViewModel) AndAlso
                                                                           MediaBroadcastWorksheetMarketEditViewModel.HasPrimaryDemographic)
            MediaBroadcastWorksheetMarketEditViewModel.Books_CopyToEnabled = MediaBroadcastWorksheetMarketEditViewModel.Books_AddEnabled

            If MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled AndAlso MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket Is Nothing Then

                MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled = False

            ElseIf MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled AndAlso MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket IsNot Nothing Then

                MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled = (MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            End If

            If MediaBroadcastWorksheetMarketEditViewModel.Books_AddEnabled AndAlso MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket Is Nothing Then

                MediaBroadcastWorksheetMarketEditViewModel.Books_AddEnabled = False

            End If

            If MediaBroadcastWorksheetMarketEditViewModel.Books_CopyToEnabled AndAlso MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket Is Nothing Then

                MediaBroadcastWorksheetMarketEditViewModel.Books_CopyToEnabled = False

            End If

        End Sub
        Public Sub MarketEdit_SelectNielsenRadioMarket(ByRef MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                       MarketCode As String,
                                                       ExternalRadioSource As AdvantageFramework.Nielsen.Database.Entities.RadioSource)

            'objects
            Dim Market As AdvantageFramework.DTO.Market = Nothing

            If String.IsNullOrWhiteSpace(MarketCode) = False Then

                Market = MediaBroadcastWorksheetMarketEditViewModel.Markets.FirstOrDefault(Function(Entity) Entity.Code = MarketCode)

            End If

            If Market IsNot Nothing Then

                If ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                    If String.IsNullOrWhiteSpace(Market.NielsenRadioCode) = False Then

                        MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket = MediaBroadcastWorksheetMarketEditViewModel.NielsenRadioMarkets.SingleOrDefault(Function(Entity) Entity.NielsenRadioCode = Market.NielsenRadioCode)

                    Else

                        MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket = Nothing

                    End If

                ElseIf ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                    If Market.EastlanRadioCode.HasValue Then

                        MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket = MediaBroadcastWorksheetMarketEditViewModel.NielsenRadioMarkets.SingleOrDefault(Function(Entity) Entity.EastlanRadioCode.GetValueOrDefault(0) = Market.EastlanRadioCode.GetValueOrDefault(0))

                    Else

                        MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket = Nothing

                    End If

                Else

                    MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket = Nothing

                End If

            Else

                MediaBroadcastWorksheetMarketEditViewModel.SelectedNielsenRadioMarket = Nothing

            End If

        End Sub
        Public Sub MarketEdit_LoadMarketNielsenData(ByRef MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                    MarketCode As String,
                                                    ByRef SelectedWorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket)

            'objects
            Dim Market As AdvantageFramework.DTO.Market = Nothing

            If String.IsNullOrWhiteSpace(MarketCode) = False Then

                Market = MediaBroadcastWorksheetMarketEditViewModel.Markets.FirstOrDefault(Function(Entity) Entity.Code = MarketCode)

            End If

            If Market IsNot Nothing Then

                SelectedWorksheetMarket.MarketNielsenRadioCode = Market.NielsenRadioCode
                SelectedWorksheetMarket.MarketNielsenBlackRadioCode = Market.NielsenBlackRadioCode
                SelectedWorksheetMarket.MarketNielsenHispanicRadioCode = Market.NielsenHispanicRadioCode
                SelectedWorksheetMarket.MarketNielsenTVCode = Market.NielsenTVCode
                SelectedWorksheetMarket.MarketNielsenTVDMACode = Market.NielsenTVDMACode
                SelectedWorksheetMarket.MarketEastlanRadioCode = Market.EastlanRadioCode
                SelectedWorksheetMarket.MarketEastlanBlackRadioCode = Market.EastlanBlackRadioCode
                SelectedWorksheetMarket.MarketEastlanHispanicRadioCode = Market.EastlanHispanicRadioCode
                SelectedWorksheetMarket.MarketComscoreMarketNumber = Market.ComscoreMarketNumber
                SelectedWorksheetMarket.MarketComscoreNewMarketNumber = Market.ComscoreNewMarketNumber

            Else

                SelectedWorksheetMarket.MarketNielsenRadioCode = String.Empty
                SelectedWorksheetMarket.MarketNielsenBlackRadioCode = String.Empty
                SelectedWorksheetMarket.MarketNielsenHispanicRadioCode = String.Empty
                SelectedWorksheetMarket.MarketNielsenTVCode = String.Empty
                SelectedWorksheetMarket.MarketNielsenTVDMACode = String.Empty
                SelectedWorksheetMarket.MarketEastlanRadioCode = Nothing
                SelectedWorksheetMarket.MarketEastlanBlackRadioCode = Nothing
                SelectedWorksheetMarket.MarketEastlanHispanicRadioCode = Nothing
                SelectedWorksheetMarket.MarketComscoreMarketNumber = Nothing
                SelectedWorksheetMarket.MarketComscoreNewMarketNumber = Nothing
                '
            End If

        End Sub
        Public Sub MarketEdit_InitNewRowEvent(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel)

            MediaBroadcastWorksheetMarketEditViewModel.IsNewRow = True
            MediaBroadcastWorksheetMarketEditViewModel.CancelEnabled = True
            MediaBroadcastWorksheetMarketEditViewModel.DeleteEnabled = False
            MediaBroadcastWorksheetMarketEditViewModel.Books_AddEnabled = False
            MediaBroadcastWorksheetMarketEditViewModel.Books_CopyToEnabled = False

        End Sub
        Public Function MarketEdit_ValidateEntity(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                  WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket, ByRef IsValid As Boolean) As String

            'objects
            Dim ErrorText As String = String.Empty
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                MediaBroadcastWorksheetMarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket

                WorksheetMarket.SaveToEntity(MediaBroadcastWorksheetMarket)

                MediaBroadcastWorksheetMarket.DbContext = DbContext

                ErrorText = MarketDetails_ValidateDTO(WorksheetMarket, IsValid)

                'ErrorText = MediaBroadcastWorksheetMarket.ValidateEntity(IsValid)

                WorksheetMarket.SetEntityError(ErrorText)

                If IsValid Then

                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Methods.MediaTypes.SpotTV Then

                        If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen AndAlso
                                AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, WorksheetMarket.MediaBroadcastWorksheetID).Any(Function(Entity) Entity.ID <> WorksheetMarket.ID AndAlso
                                                                                                                                                                                                                Entity.MarketCode = WorksheetMarket.MarketCode AndAlso
                                                                                                                                                                                                                Entity.IsCable = WorksheetMarket.IsCable) Then

                            IsValid = False
                            ErrorText = "Cannot enter a duplicate market."

                            WorksheetMarket.SetEntityError(ErrorText)

                        ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico AndAlso
                                AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, WorksheetMarket.MediaBroadcastWorksheetID).Any(Function(Entity) Entity.ID <> WorksheetMarket.ID AndAlso
                                                                                                                                                                                                                Entity.MarketCode = WorksheetMarket.MarketCode) Then

                            IsValid = False
                            ErrorText = "Cannot enter a duplicate market."

                            WorksheetMarket.SetEntityError(ErrorText)

                        End If

                    ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Methods.MediaTypes.SpotRadio Then

                        If AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetID(DbContext, WorksheetMarket.MediaBroadcastWorksheetID).Any(Function(Entity) Entity.ID <> WorksheetMarket.ID AndAlso
                                                                                                                                                                                                           Entity.MarketCode = WorksheetMarket.MarketCode AndAlso
                                                                                                                                                                                                           Entity.MediaBroadcastWorksheetMarketRadioEthnicityID = WorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID) Then

                            IsValid = False
                            ErrorText = "Cannot enter a duplicate market."

                            WorksheetMarket.SetEntityError(ErrorText)

                        End If

                    End If

                End If

            End Using

            MarketEdit_ValidateEntity = ErrorText

        End Function
        'Public Function MarketEdit_ValidateProperty(WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket, FieldName As String, ByRef IsValid As Boolean, ByRef Value As Object) As String

        '    'objects
        '    Dim ErrorText As String = String.Empty
        '    'Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing

        '    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

        '        Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

        '            'MediaBroadcastWorksheetMarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket

        '            'WorksheetMarket.SaveToEntity(MediaBroadcastWorksheetMarket)

        '            'MediaBroadcastWorksheetMarket.DbContext = DbContext

        '            ErrorText = ValidateCustomProperties(DbContext, DataContext, WorksheetMarket, FieldName, IsValid, Value)

        '            'ErrorText = MediaBroadcastWorksheetMarket.ValidateEntityProperty(FieldName, IsValid, Value)

        '            WorksheetMarket.SetPropertyError(FieldName, ErrorText)

        '        End Using

        '    End Using

        '    MarketEdit_ValidateProperty = ErrorText

        'End Function
        Public Sub MarketEdit_UserEntryChanged(ByRef MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel)

            MediaBroadcastWorksheetMarketEditViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketEditViewModel.HasMarketsModified = True

        End Sub
        Public Sub MarketEdit_ClearChanged(ByRef MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel)

            MediaBroadcastWorksheetMarketEditViewModel.SaveEnabled = False

        End Sub
        Public Sub MarketEdit_LoadMarketsFromMediaPlan(ByRef MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                       ByRef ErrorMessage As String)

            'objects
            Dim MediaPlanID As Integer = 0
            Dim MediaPlan As AdvantageFramework.Database.Entities.MediaPlan = Nothing
            Dim MediaPlanDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaPlanDetail) = Nothing
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim MediaBroadcastWorksheetMarkets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket) = Nothing
            Dim WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket = Nothing
            Dim SalesClassType As String = String.Empty
            Dim CampaignID As Integer = 0

            MediaPlanID = MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaPlanID.GetValueOrDefault(0)

            If MediaPlanID > 0 Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                        SalesClassType = DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.T.ToString

                    ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                        SalesClassType = DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.R.ToString

                        'ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                        '	SalesClassType = "T"

                    End If

                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.CampaignID.GetValueOrDefault(0) > 0 Then

                        CampaignID = MediaBroadcastWorksheetMarketEditViewModel.Worksheet.CampaignID.GetValueOrDefault(0)

                        MediaPlanDetails = New Generic.List(Of AdvantageFramework.Database.Entities.MediaPlanDetail)

                        For Each MediaPlanDetail In AdvantageFramework.Database.Procedures.MediaPlanDetail.LoadByMediaPlanID(DbContext, MediaPlanID).Include("MediaPlanDetailLevelLineTags") _
                                                                                                                                                    .Include("MediaPlanDetailLevels") _
                                                                                                                                                    .Where(Function(Entity) Entity.SalesClassType = SalesClassType).ToList

                            If MediaPlanDetail.MediaPlanDetailLevels.Any(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Campaign) AndAlso
                                    MediaPlanDetail.MediaPlanDetailLevelLineTags.Any(Function(Entity) Entity.CampaignID.GetValueOrDefault(0) = CampaignID) Then

                                MediaPlanDetails.Add(MediaPlanDetail)

                            ElseIf MediaPlanDetail.CampaignID.HasValue Then

                                If MediaPlanDetail.CampaignID.Value = CampaignID Then

                                    MediaPlanDetails.Add(MediaPlanDetail)

                                End If

                            Else

                                MediaPlanDetails.Add(MediaPlanDetail)

                            End If

                        Next

                    Else

                        MediaPlanDetails = AdvantageFramework.Database.Procedures.MediaPlanDetail.LoadByMediaPlanID(DbContext, MediaPlanID).Include("MediaPlanDetailLevelLineTags").Where(Function(Entity) Entity.SalesClassType = SalesClassType).ToList

                    End If

                    If MediaPlanDetails.SelectMany(Function(Entity) Entity.MediaPlanDetailLevelLineTags).Where(Function(Entity) Entity.MarketCode IsNot Nothing).Select(Function(Entity) Entity.MarketCode).Distinct.Any Then

                        MediaBroadcastWorksheetMarkets = New Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket)

                        For Each MediaPlanDetail In MediaPlanDetails

                            For Each MarketCode In MediaPlanDetail.MediaPlanDetailLevelLineTags.Where(Function(Entity) Entity.MarketCode IsNot Nothing).Select(Function(Entity) Entity.MarketCode).Distinct

                                If MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Any(Function(Entity) Entity.MarketCode = MarketCode AndAlso Entity.IsCable = MediaPlanDetail.IsCable) = False AndAlso
                                        MediaBroadcastWorksheetMarkets.Any(Function(Entity) Entity.MarketCode = MarketCode AndAlso Entity.IsCable = MediaPlanDetail.IsCable) = False Then

                                    MediaBroadcastWorksheetMarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket

                                    MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketEditViewModel.Worksheet.ID
                                    MediaBroadcastWorksheetMarket.MarketCode = MarketCode
                                    MediaBroadcastWorksheetMarket.BuyerEmployeeCode = MediaPlanDetail.BuyerEmployeeCode

                                    MediaBroadcastWorksheetMarket.IsCable = MediaPlanDetail.IsCable

                                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                        MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.DMA

                                    ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                        MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioGeographies.Metro
                                        MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.All

                                    End If

                                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                        MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID = MarketEdit_GetRepositoryDefaultShareBook(MediaBroadcastWorksheetMarketEditViewModel,
                                                                                                                                          MediaBroadcastWorksheetMarket.MarketCode,
                                                                                                                                          MediaBroadcastWorksheetMarket.IsCable,
                                                                                                                                          MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID)

                                    End If

                                    MediaBroadcastWorksheetMarket.Length = MediaBroadcastWorksheetMarketEditViewModel.Worksheet.Length

                                    MediaBroadcastWorksheetMarket.CreatedByUserCode = Me.Session.UserCode
                                    MediaBroadcastWorksheetMarket.CreatedDate = Now

                                    DbContext.MediaBroadcastWorksheetMarkets.Add(MediaBroadcastWorksheetMarket)

                                    MediaBroadcastWorksheetMarkets.Add(MediaBroadcastWorksheetMarket)

                                End If

                            Next

                        Next

                        DbContext.SaveChanges()

                        MediaBroadcastWorksheetMarketEditViewModel.HasMarketsModified = True

                        For Each MediaBroadcastWorksheetMarket In MediaBroadcastWorksheetMarkets

                            DbContext.Entry(MediaBroadcastWorksheetMarket).Reference("Market").Load()
                            DbContext.Entry(MediaBroadcastWorksheetMarket).Reference("BuyerEmployee").Load()
                            'DbContext.Entry(MediaBroadcastWorksheetMarket).Collection("MediaBroadcastWorksheetMarketDetails").Load()

                            'For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketDetails

                            '    DbContext.Entry(MediaBroadcastWorksheetMarketDetail).Collection("MediaBroadcastWorksheetMarketDetailDates").Load()

                            'Next

                            WorksheetMarket = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, MediaBroadcastWorksheetMarket)

                            MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Add(WorksheetMarket)

                        Next

                    Else

                        ErrorMessage = "No markets are attached to the media plan."

                    End If

                End Using

            End If

            MediaBroadcastWorksheetMarketEditViewModel.SaveEnabled = False

        End Sub
        Public Function MarketEdit_CheckForMarketCode(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                      MarketCode As String) As Boolean

            'objects
            Dim HasMarket As Boolean = False

            HasMarket = (MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Where(Function(Entity) Entity.MarketCode = MarketCode).Count() > 1)

            MarketEdit_CheckForMarketCode = HasMarket

        End Function
        Public Function MarketEdit_CheckForMarketCodeAndCable(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel,
                                                              MarketCode As String, IsCable As Boolean) As Boolean

            'objects
            Dim HasMarket As Boolean = False

            HasMarket = (MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Where(Function(Entity) Entity.MarketCode = MarketCode AndAlso Entity.IsCable = IsCable).Count() >= 1)

            MarketEdit_CheckForMarketCodeAndCable = HasMarket

        End Function
        Private Function MarketEdit_DoesMarketHaveRatingsSourceData(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel) As Boolean

            'objects
            Dim MarketHasRatingsData As Boolean = False
            Dim NielsenMarketNumber As Integer = 0

            If MediaBroadcastWorksheetMarketEditViewModel.HasASelectedWorksheetMarket Then

                If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                        Integer.TryParse(MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.MarketNielsenTVCode, NielsenMarketNumber)

                    ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                        Integer.TryParse(MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.GetValueOrDefault(0), NielsenMarketNumber)

                    End If

                ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    Integer.TryParse(MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode, NielsenMarketNumber)

                    'ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                    '	Integer.TryParse(MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.MarketNielsenTVDMACode, NielsenMarketNumber)

                End If

                If NielsenMarketNumber > 0 Then

                    If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                        If MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                            MarketHasRatingsData = GetNielsenTVBooks(MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.MarketCode, NielsenMarketNumber,
                                                                     MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.IsCable,
                                                                     MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID).Any()

                        ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                            MarketHasRatingsData = GetComscoreTVBooks.Any()

                        End If

                    ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                        MarketHasRatingsData = MediaBroadcastWorksheetMarketEditViewModel.NielsenRadioPeriods.Any(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenMarketNumber)

                        'ElseIf MediaBroadcastWorksheetMarketEditViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                        '	MarketHasNielsenData = False

                    End If

                End If

            End If

            MarketEdit_DoesMarketHaveRatingsSourceData = MarketHasRatingsData

        End Function
        Public Function MarketEdit_HasMediaRFPAvailLines(MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel) As Boolean

            'objects
            Dim HasMediaRFPAvailLines As Boolean = False
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                MediaBroadcastWorksheetMarket = DbContext.MediaBroadcastWorksheetMarkets.Find(MediaBroadcastWorksheetMarketEditViewModel.SelectedWorksheetMarket.ID)

                If MediaBroadcastWorksheetMarket IsNot Nothing Then

                    HasMediaRFPAvailLines = DbContext.MediaBroadcastWorksheetMarketDetails.Include("MediaRFPAvailLines").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarket.ID AndAlso Entity.MediaRFPAvailLines.Count > 0).Any

                End If

            End Using

            MarketEdit_HasMediaRFPAvailLines = HasMediaRFPAvailLines

        End Function
        Public Function MarketEdit_GetRepositoryPeriodEnd() As Nullable(Of Date)

            'objects
            Dim NPRUniverse As AdvantageFramework.Database.Entities.NPRUniverse = Nothing
            Dim PeriodEnd As Nullable(Of Date) = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                NPRUniverse = (From Entity In DbContext.GetQuery(Of AdvantageFramework.Database.Entities.NPRUniverse)
                               Select Entity).OrderByDescending(Function(Entity) Entity.Date).FirstOrDefault

                If NPRUniverse IsNot Nothing Then

                    PeriodEnd = NPRUniverse.Date

                End If

            End Using

            MarketEdit_GetRepositoryPeriodEnd = PeriodEnd

        End Function

#End Region

#Region "  Market Submarkets "

        Public Function MarketSubmarkets_Load(MediaBroadcastWorksheetMarketID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel = Nothing
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim Markets As Generic.List(Of AdvantageFramework.Database.Entities.Market) = Nothing
            'Dim Market As AdvantageFramework.Database.Entities.Market = Nothing
            Dim MediaBroadcastWorksheetMarketSubmarkets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket) = Nothing
            Dim MediaBroadcastWorksheetMarketSubmarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket = Nothing
            Dim WorksheetMarketSubmarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket = Nothing

            MediaBroadcastWorksheetMarketSubmarketsViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketSubmarketsViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

                MediaBroadcastWorksheetMarket = DbContext.MediaBroadcastWorksheetMarkets.Find(MediaBroadcastWorksheetMarketID)

                Markets = DbContext.Markets.Where(Function(Entity) Entity.CountryID = MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.CountryID).ToList

                MediaBroadcastWorksheetMarketSubmarketsViewModel.CountryID = MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.CountryID

                'Try

                '    Market = Markets.SingleOrDefault(Function(Entity) Entity.Code = MediaBroadcastWorksheetMarket.MarketCode)

                'Catch ex As Exception
                '    Market = Nothing
                'End Try

                'If Market IsNot Nothing Then

                '    Markets.Remove(Market)

                'End If

                MediaBroadcastWorksheetMarketSubmarkets = DbContext.MediaBroadcastWorksheetMarketSubmarkets.Include("Market").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).ToList

                MediaBroadcastWorksheetMarketSubmarketsViewModel.Markets = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket)

                MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket)
                MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket)

                For Each Market In Markets

                    Try

                        MediaBroadcastWorksheetMarketSubmarket = MediaBroadcastWorksheetMarketSubmarkets.SingleOrDefault(Function(Entity) Entity.MarketCode = Market.Code)

                    Catch ex As Exception
                        MediaBroadcastWorksheetMarketSubmarket = Nothing
                    End Try

                    If MediaBroadcastWorksheetMarketSubmarket IsNot Nothing Then

                        WorksheetMarketSubmarket = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket(MediaBroadcastWorksheetMarketSubmarket)

                        MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Add(WorksheetMarketSubmarket)

                    ElseIf Market.IsInactive = 0 OrElse Market.IsInactive Is Nothing Then

                        WorksheetMarketSubmarket = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket(Market)

                        MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets.Add(WorksheetMarketSubmarket)

                    End If

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.Markets.Add(WorksheetMarketSubmarket)

                Next

            End Using

            MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets = MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.OrderBy(Function(Entity) Entity.Order).ToList

            MarketSubmarkets_RefreshAllEnabled(MediaBroadcastWorksheetMarketSubmarketsViewModel)

            MarketSubmarkets_Load = MediaBroadcastWorksheetMarketSubmarketsViewModel

        End Function
        Public Function MarketSubmarkets_Save(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel,
                                              ByRef ErrorMessage As String) As Boolean

            Dim Saved As Boolean = False
            Dim DbTransaction As System.Data.Entity.DbContextTransaction = Nothing
            Dim WorksheetMarketSubmarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket = Nothing
            Dim MediaBroadcastWorksheetMarketSubmarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket = Nothing
            Dim WorksheetMarketID As Integer = 0
            'Dim MaxRevisionNumber As Integer = 0
            Dim MediaDemographicID As Integer = 0
            Dim MediaDemographicIDs As Generic.List(Of Integer) = Nothing
            Dim WorksheetMarketDetailIDs As Generic.List(Of Integer) = Nothing
            Dim WorksheetMarketDetailID As Integer = 0
            Dim MediaBroadcastWorksheetMarketSubmarkets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket) = Nothing
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing

            MediaBroadcastWorksheetMarketSubmarkets = New Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket)

            Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                Try

                    DbTransaction = DbContext.Database.BeginTransaction

                    WorksheetMarketID = MediaBroadcastWorksheetMarketSubmarketsViewModel.MediaBroadcastWorksheetMarketID

                    'If DbContext.MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).Any Then

                    '    MaxRevisionNumber = DbContext.MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).Select(Function(Entity) Entity.RevisionNumber).Max

                    'Else

                    '    MaxRevisionNumber = 0

                    'End If

                    WorksheetMarketDetailIDs = DbContext.MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).Select(Function(Entity) Entity.ID).Distinct.ToList

                    For Each WorksheetMarketSubmarket In MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets

                        If WorksheetMarketSubmarket.ID = 0 Then

                            MediaBroadcastWorksheetMarketSubmarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket

                            MediaBroadcastWorksheetMarketSubmarket.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketSubmarketsViewModel.MediaBroadcastWorksheetMarketID
                            MediaBroadcastWorksheetMarketSubmarket.MarketCode = WorksheetMarketSubmarket.MarketCode
                            MediaBroadcastWorksheetMarketSubmarket.Order = WorksheetMarketSubmarket.Order

                            DbContext.MediaBroadcastWorksheetMarketSubmarkets.Add(MediaBroadcastWorksheetMarketSubmarket)

                            MediaBroadcastWorksheetMarketSubmarkets.Add(MediaBroadcastWorksheetMarketSubmarket)

                        Else

                            MediaBroadcastWorksheetMarketSubmarket = DbContext.MediaBroadcastWorksheetMarketSubmarkets.Find(WorksheetMarketSubmarket.ID)

                            MediaBroadcastWorksheetMarketSubmarket.Order = WorksheetMarketSubmarket.Order

                        End If

                    Next

                    For Each WorksheetMarketSubmarket In MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets

                        If WorksheetMarketSubmarket.ID > 0 Then

                            MediaBroadcastWorksheetMarketSubmarket = DbContext.MediaBroadcastWorksheetMarketSubmarkets.Find(WorksheetMarketSubmarket.ID)

                            For Each MediaBroadcastWorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketSubmarket.MediaBroadcastWorksheetMarketDetailSubmarketDemos.ToList

                                DbContext.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Remove(MediaBroadcastWorksheetMarketDetailSubmarketDemo)

                            Next

                            DbContext.MediaBroadcastWorksheetMarketSubmarkets.Remove(MediaBroadcastWorksheetMarketSubmarket)

                        End If

                    Next

                    DbContext.Configuration.AutoDetectChangesEnabled = True
                    DbContext.SaveChanges()

                    DbTransaction.Commit()

                    Saved = True

                Catch ex As Exception
                    DbTransaction.Rollback()
                    ErrorMessage = "Failed trying to save data to the database. Please contact software support."
                    ErrorMessage += System.Environment.NewLine & ex.Message
                    Saved = False
                End Try

                Try

                    If Saved Then

                        If MediaBroadcastWorksheetMarketSubmarkets IsNot Nothing AndAlso MediaBroadcastWorksheetMarketSubmarkets.Count > 0 Then

                            MediaDemographicIDs = New Generic.List(Of Integer)

                            MediaBroadcastWorksheetMarket = DbContext.MediaBroadcastWorksheetMarkets.Find(WorksheetMarketID)

                            If MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) > 0 Then

                                MediaDemographicIDs.Add(MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.PrimaryMediaDemographicID.GetValueOrDefault(0))

                            End If

                            For Each MediaDemographicID In DbContext.MediaBroadcastWorksheetSecondaryDemos.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.ID).Select(Function(Entity) Entity.MediaDemographicID).ToList

                                MediaDemographicIDs.Add(MediaDemographicID)

                            Next

                            WorksheetMarketDetailIDs = DbContext.MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).Select(Function(Entity) Entity.ID).ToList

                            For Each MediaBroadcastWorksheetMarketSubmarket In MediaBroadcastWorksheetMarketSubmarkets

                                If MediaBroadcastWorksheetMarketSubmarket.ID > 0 Then

                                    For Each MediaDemographicID In MediaDemographicIDs

                                        For Each WorksheetMarketDetailID In WorksheetMarketDetailIDs

                                            DbContext.Database.ExecuteSqlCommand(String.Format("INSERT INTO dbo.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_SUBMARKET_DEMO([MEDIA_BROADCAST_WORKSHEET_MARKET_SUBMARKET_ID], [MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_ID], [MEDIA_DEMO_ID], [BOOK_RATING], [RATING], [BOOK_IMPRESSIONS], [IMPRESSIONS]) 
                                                                                                VALUES({0}, {1}, {2}, 0, 0, 0, 0)", MediaBroadcastWorksheetMarketSubmarket.ID, WorksheetMarketDetailID, MediaDemographicID))

                                        Next

                                    Next

                                End If

                            Next

                        End If

                    End If

                Catch ex As Exception

                End Try

            End Using

            MarketSubmarkets_Save = Saved

        End Function
        Public Sub MarketSubmarkets_AvailableMarketsSelectedChanged(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel,
                                                                    AvailableMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket))

            If AvailableMarkets IsNot Nothing Then

                If AvailableMarkets.Count > 0 Then

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.AddEnabled = True

                Else

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.AddEnabled = False

                End If

            Else

                MediaBroadcastWorksheetMarketSubmarketsViewModel.AddEnabled = False

            End If

        End Sub
        Public Sub MarketSubmarkets_SelectedMarketsSelectedChanged(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel,
                                                                   SelectedMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket))

            If SelectedMarkets IsNot Nothing Then

                If SelectedMarkets.Count > 0 Then

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.RemoveEnabled = True

                    If SelectedMarkets.Count = 1 Then

                        MediaBroadcastWorksheetMarketSubmarketsViewModel.MoveUpEnabled = True
                        MediaBroadcastWorksheetMarketSubmarketsViewModel.MoveDownEnabled = True

                    Else

                        MediaBroadcastWorksheetMarketSubmarketsViewModel.RemoveEnabled = False

                        MediaBroadcastWorksheetMarketSubmarketsViewModel.MoveUpEnabled = False
                        MediaBroadcastWorksheetMarketSubmarketsViewModel.MoveDownEnabled = False

                    End If

                Else

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.RemoveEnabled = False

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.MoveUpEnabled = False
                    MediaBroadcastWorksheetMarketSubmarketsViewModel.MoveDownEnabled = False

                End If

            Else

                MediaBroadcastWorksheetMarketSubmarketsViewModel.RemoveEnabled = False

                MediaBroadcastWorksheetMarketSubmarketsViewModel.MoveUpEnabled = False
                MediaBroadcastWorksheetMarketSubmarketsViewModel.MoveDownEnabled = False

            End If

        End Sub
        Public Sub MarketSubmarkets_AddMarkets(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel,
                                                AvailableMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket))

            If AvailableMarkets IsNot Nothing AndAlso AvailableMarkets.Count > 0 Then

                For Each AvailableMarket In AvailableMarkets

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets.Remove(AvailableMarket)
                    MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Add(AvailableMarket)

                Next

            End If

            MarketSubmarkets_SetOrderOnSelectedMarkets(MediaBroadcastWorksheetMarketSubmarketsViewModel)
            MarketSubmarkets_RefreshAllEnabled(MediaBroadcastWorksheetMarketSubmarketsViewModel)

        End Sub
        Public Sub MarketSubmarkets_AddAllMarkets(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel)

            For Each AvailableMarket In MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets.ToList

                MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets.Remove(AvailableMarket)
                MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Add(AvailableMarket)

            Next

            MarketSubmarkets_SetOrderOnSelectedMarkets(MediaBroadcastWorksheetMarketSubmarketsViewModel)
            MarketSubmarkets_RefreshAllEnabled(MediaBroadcastWorksheetMarketSubmarketsViewModel)

        End Sub
        Public Sub MarketSubmarkets_RemoveMarkets(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel,
                                                   SelectedMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket))

            If SelectedMarkets IsNot Nothing AndAlso SelectedMarkets.Count > 0 Then

                For Each SelectedMarket In SelectedMarkets

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Remove(SelectedMarket)
                    MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets.Add(SelectedMarket)

                Next

            End If

            MarketSubmarkets_SetOrderOnSelectedMarkets(MediaBroadcastWorksheetMarketSubmarketsViewModel)
            MarketSubmarkets_RefreshAllEnabled(MediaBroadcastWorksheetMarketSubmarketsViewModel)

        End Sub
        Public Sub MarketSubmarkets_RemoveAllMarkets(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel)

            For Each SelectedMarket In MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.ToList

                MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Remove(SelectedMarket)
                MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets.Add(SelectedMarket)

            Next

            MarketSubmarkets_SetOrderOnSelectedMarkets(MediaBroadcastWorksheetMarketSubmarketsViewModel)
            MarketSubmarkets_RefreshAllEnabled(MediaBroadcastWorksheetMarketSubmarketsViewModel)

        End Sub
        Public Sub MarketSubmarkets_MoveUpMarkets(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel,
                                                  SelectedMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket)

            'objects
            Dim Index As Integer = 0

            If MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Contains(SelectedMarket) Then

                Index = MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.IndexOf(SelectedMarket)

                MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Remove(SelectedMarket)

                If Index > 0 Then

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Insert(Index - 1, SelectedMarket)

                Else

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Insert(0, SelectedMarket)

                End If

                MarketSubmarkets_SetOrderOnSelectedMarkets(MediaBroadcastWorksheetMarketSubmarketsViewModel)

            End If

            MarketSubmarkets_SetOrderOnSelectedMarkets(MediaBroadcastWorksheetMarketSubmarketsViewModel)

        End Sub
        Public Sub MarketSubmarkets_MoveDownMarkets(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel,
                                                    SelectedMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket)

            'objects
            Dim Index As Integer = 0

            If MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Contains(SelectedMarket) Then

                Index = MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.IndexOf(SelectedMarket)

                MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Remove(SelectedMarket)

                If Index < MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Count - 1 Then

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Insert(Index + 1, SelectedMarket)

                Else

                    MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Insert(MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Count, SelectedMarket)

                End If

                MarketSubmarkets_SetOrderOnSelectedMarkets(MediaBroadcastWorksheetMarketSubmarketsViewModel)

            End If

        End Sub
        Public Sub MarketSubmarkets_AddMarketGroup(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel,
                                                   MarketGroupID As Integer)

            'objects
            Dim MarketGroupMarkets As Generic.List(Of AdvantageFramework.Database.Entities.MarketGroupMarket) = Nothing
            Dim WorksheetMarketSubmarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket = Nothing

            If MarketGroupID > 0 Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    MarketGroupMarkets = DbContext.MarketGroupMarkets.Where(Function(Entity) Entity.MarketGroupID = MarketGroupID).ToList

                End Using

                For Each MarketGroupMarket In MarketGroupMarkets.OrderBy(Function(Entity) Entity.Order).ToList

                    If MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Any(Function(Entity) Entity.MarketCode = MarketGroupMarket.MarketCode) = False Then

                        WorksheetMarketSubmarket = Nothing

                        Try

                            WorksheetMarketSubmarket = MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets.SingleOrDefault(Function(Entity) Entity.MarketCode = MarketGroupMarket.MarketCode)

                        Catch ex As Exception
                            WorksheetMarketSubmarket = Nothing
                        End Try

                        If WorksheetMarketSubmarket IsNot Nothing Then

                            MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets.Remove(WorksheetMarketSubmarket)
                            MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Add(WorksheetMarketSubmarket)

                        End If

                    End If

                Next

            End If

            MarketSubmarkets_SetOrderOnSelectedMarkets(MediaBroadcastWorksheetMarketSubmarketsViewModel)
            MarketSubmarkets_RefreshAllEnabled(MediaBroadcastWorksheetMarketSubmarketsViewModel)

        End Sub

        Private Sub MarketSubmarkets_SetOrderOnSelectedMarkets(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel)

            For Each SelectedMarket In MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets

                SelectedMarket.Order = MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.IndexOf(SelectedMarket)

            Next

        End Sub
        Private Sub MarketSubmarkets_RefreshAllEnabled(ByRef MediaBroadcastWorksheetMarketSubmarketsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsViewModel)

            If MediaBroadcastWorksheetMarketSubmarketsViewModel.AvailableMarkets.Count = 0 Then

                MediaBroadcastWorksheetMarketSubmarketsViewModel.AddAllEnabled = False

            Else

                MediaBroadcastWorksheetMarketSubmarketsViewModel.AddAllEnabled = True

            End If

            If MediaBroadcastWorksheetMarketSubmarketsViewModel.SelectedMarkets.Count = 0 Then

                MediaBroadcastWorksheetMarketSubmarketsViewModel.RemoveAllEnabled = False

            Else

                MediaBroadcastWorksheetMarketSubmarketsViewModel.RemoveAllEnabled = True

            End If

        End Sub

#End Region

#Region "  Market Submarkets - Add Market Group "

        Public Function MarketSubmarketsAddMarketGroup_Load(MediaBroadcastWorksheetMarketID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsAddMarketGroupViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketSubmarketsAddMarketGroupViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsAddMarketGroupViewModel = Nothing
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing

            MediaBroadcastWorksheetMarketSubmarketsAddMarketGroupViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketSubmarketsAddMarketGroupViewModel

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketSubmarketsAddMarketGroupViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

                MediaBroadcastWorksheetMarket = DbContext.MediaBroadcastWorksheetMarkets.Find(MediaBroadcastWorksheetMarketID)

                MediaBroadcastWorksheetMarketSubmarketsAddMarketGroupViewModel.MarketGroups = DbContext.MarketGroups.Where(Function(Entity) Entity.MediaType = MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.MediaTypeCode _
                                                                                                                                            AndAlso Entity.CountryID = MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.CountryID).ToList.
                                                                                                                     Select(Function(Entity) New AdvantageFramework.DTO.Maintenance.Media.MarketGroup.MarketGroup(Entity)).ToList



            End Using

            MarketSubmarketsAddMarketGroup_Load = MediaBroadcastWorksheetMarketSubmarketsAddMarketGroupViewModel

        End Function

#End Region

#Region "  Market Goals "

        Public Function MarketGoals_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel = Nothing
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing

            MediaBroadcastWorksheetMarketGoalsViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel

            MediaBroadcastWorksheetMarketGoalsViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID
            'MediaBroadcastWorksheetMarketGoalsViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                       Include("Division").
                                                                                                                                                       Include("Product").
                                                                                                                                                       Include("SalesClass").
                                                                                                                                                       Include("Campaign").
                                                                                                                                                       Include("MediaPlan").
                                                                                                                                                       Include("PrimaryMediaDemographic").
                                                                                                                                                       Include("Country").Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                If MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    MediaBroadcastWorksheetMarketGoalsViewModel.Dayparts = AdvantageFramework.Database.Procedures.Daypart.LoadAllActive(DbContext).Where(Function(Entity) Entity.DaypartTypeID = 1).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Daypart(Entity)).ToList

                ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    MediaBroadcastWorksheetMarketGoalsViewModel.Dayparts = AdvantageFramework.Database.Procedures.Daypart.LoadAllActive(DbContext).Where(Function(Entity) Entity.DaypartTypeID = 2).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Daypart(Entity)).ToList

                    'ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                    '	MediaBroadcastWorksheetMarketGoalsViewModel.Dayparts = AdvantageFramework.Database.Procedures.Daypart.LoadAllActive(DbContext).Where(Function(Entity) Entity.DaypartTypeID = 1).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Daypart(Entity)).ToList

                End If

                MediaBroadcastWorksheetMarketGoalsViewModel.WorksheetMarkets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                                    Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                                    Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).ToList

                MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket = MediaBroadcastWorksheetMarketGoalsViewModel.WorksheetMarkets.SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketID)

                MarketGoals_GetGoalDates(MediaBroadcastWorksheetMarketGoalsViewModel)

                MarketGoals_CreateDataTableDefaultSchema(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_CreateDataTableDynamicSchema(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_LoadDataEntryRows(MediaBroadcastWorksheetMarketGoalsViewModel)

                MarketGoals_CreateHiatusDataTableDefaultSchema(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_CreateHiatusDataTableDefaultRows(MediaBroadcastWorksheetMarketGoalsViewModel)

                MarketGoals_CreateCPPDataTableDefaultSchema(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_CreateCPPDataTableDefaultRows(MediaBroadcastWorksheetMarketGoalsViewModel)

                MarketGoals_CheckForMediaPlanImport(MediaBroadcastWorksheetMarketGoalsViewModel)

                MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.GoalTotalGRP
                MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.GoalTotalBudgetAmount

                MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

                MediaBroadcastWorksheetMarketGoalsViewModel.DemoName = String.Empty

                DbContext.Database.Connection.Close()

            End Using

            MediaBroadcastWorksheetMarketGoalsViewModel.MediaPlan_LoadGoalsEnabled = MarketGoals_HasMarketAndCampaignInMediaPlan(MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = False
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = False
            MediaBroadcastWorksheetMarketGoalsViewModel.AddEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.DeleteEnabled = False
            MediaBroadcastWorksheetMarketGoalsViewModel.CopyEnabled = False

            MarketGoals_Load = MediaBroadcastWorksheetMarketGoalsViewModel

        End Function
        Public Sub MarketGoals_Save(MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim Daypart As AdvantageFramework.DTO.Daypart = Nothing
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim MediaBroadcastWorksheetMarketGoal As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal = Nothing
            Dim MediaBroadcastWorksheetMarketGoalDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate = Nothing
            Dim WorksheetMarketGoalID As Integer = 0
            Dim WorksheetMarketGoalRows As Hashtable = Nothing
            Dim CPPDataRow As System.Data.DataRow = Nothing
            Dim MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel = Nothing
            Dim DateColumnName As String = String.Empty

            WorksheetMarketGoalRows = New Hashtable

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                MediaBroadcastWorksheetMarket = DbContext.MediaBroadcastWorksheetMarkets.Find(MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.ID)

                MediaBroadcastWorksheetMarketDetailsViewModel = MarketDetails_Load(MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetID, MediaBroadcastWorksheetMarket.ID)

                MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.GoalTotalGRP = MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs
                MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.GoalTotalBudgetAmount = MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.GoalTotalGRP = MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs
                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.GoalTotalBudgetAmount = MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget

                MediaBroadcastWorksheetMarket.GoalTotalGRP = MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs
                MediaBroadcastWorksheetMarket.GoalTotalBudgetAmount = MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget

                MediaBroadcastWorksheetMarket.ModifiedByUserCode = Me.Session.UserCode
                MediaBroadcastWorksheetMarket.ModifiedDate = Now

                For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                    MediaBroadcastWorksheetMarketGoal = Nothing
                    CPPDataRow = Nothing

                    CPPDataRow = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketGoalsCPPColumns.DataTableID.ToString) = DataRow(MarketGoalsColumns.ID.ToString))

                    WorksheetMarketGoalID = DataRow(MarketGoalsColumns.WorksheetMarketGoalID.ToString)

                    If WorksheetMarketGoalID > 0 Then

                        MediaBroadcastWorksheetMarketGoal = DbContext.MediaBroadcastWorksheetMarketGoals.Find(WorksheetMarketGoalID)

                    End If

                    If MediaBroadcastWorksheetMarketGoal Is Nothing Then

                        MediaBroadcastWorksheetMarketGoal = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal

                        MediaBroadcastWorksheetMarketGoal.CreatedByUserCode = Me.Session.UserCode
                        MediaBroadcastWorksheetMarketGoal.CreatedDate = Now

                        DbContext.MediaBroadcastWorksheetMarketGoals.Add(MediaBroadcastWorksheetMarketGoal)

                    Else

                        MediaBroadcastWorksheetMarketGoal.ModifiedByUserCode = Me.Session.UserCode
                        MediaBroadcastWorksheetMarketGoal.ModifiedDate = Now

                        'DbContext.UpdateObject(MediaBroadcastWorksheetMarketGoal)

                    End If

                    MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.ID
                    MediaBroadcastWorksheetMarketGoal.RowIndex = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.IndexOf(DataRow)

                    Daypart = MediaBroadcastWorksheetMarketGoalsViewModel.Dayparts.SingleOrDefault(Function(Entity) Entity.Code = DataRow(MarketGoalsColumns.Daypart.ToString))

                    If Daypart IsNot Nothing Then

                        MediaBroadcastWorksheetMarketGoal.DaypartID = Daypart.ID

                    Else

                        MediaBroadcastWorksheetMarketGoal.DaypartID = Nothing

                    End If

                    MediaBroadcastWorksheetMarketGoal.Length = DataRow(MarketGoalsColumns.Length.ToString)
                    MediaBroadcastWorksheetMarketGoal.GRP = DataRow(MarketGoalsColumns.GRP.ToString)
                    MediaBroadcastWorksheetMarketGoal.CPP = DataRow(MarketGoalsColumns.CPP.ToString)
                    MediaBroadcastWorksheetMarketGoal.BudgetAmount = DataRow(MarketGoalsColumns.Budget.ToString)
                    MediaBroadcastWorksheetMarketGoal.BudgetPercentage = DataRow(MarketGoalsColumns.Percentage.ToString)
                    MediaBroadcastWorksheetMarketGoal.WasRateImported = DataRow(MarketGoalsColumns.WasRateImported.ToString)

                    WorksheetMarketGoalRows(MediaBroadcastWorksheetMarketGoal) = DataRow

                    For Each GoalDate In MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                        MediaBroadcastWorksheetMarketGoalDate = Nothing

                        If MediaBroadcastWorksheetMarketGoal.ID <> 0 Then

                            MediaBroadcastWorksheetMarketGoalDate = DbContext.MediaBroadcastWorksheetMarketGoalDates.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketGoalID = MediaBroadcastWorksheetMarketGoal.ID AndAlso Entity.Date = GoalDate)

                        End If

                        If MediaBroadcastWorksheetMarketGoalDate Is Nothing Then

                            MediaBroadcastWorksheetMarketGoalDate = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate

                            DbContext.MediaBroadcastWorksheetMarketGoalDates.Add(MediaBroadcastWorksheetMarketGoalDate)

                            MediaBroadcastWorksheetMarketGoalDate.Date = GoalDate

                        Else

                            'DbContext.UpdateObject(MediaBroadcastWorksheetMarketGoalDate)

                        End If

                        MediaBroadcastWorksheetMarketGoalDate.GRP = DataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate))
                        MediaBroadcastWorksheetMarketGoalDate.IsHiatus = MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate))

                        If CPPDataRow IsNot Nothing Then

                            MediaBroadcastWorksheetMarketGoalDate.Rate = CPPDataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate))

                        End If

                        MediaBroadcastWorksheetMarketGoalDate.MediaBroadcastWorksheetMarketGoal = MediaBroadcastWorksheetMarketGoal

                        If MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0).RowState = System.Data.DataRowState.Modified Then

                            DateColumnName = String.Empty

                            Try

                                DateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(GoalDate)

                            Catch ex As Exception
                                DateColumnName = String.Empty
                            End Try

                            If String.IsNullOrWhiteSpace(DateColumnName) = False Then

                                If MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(DateColumnName) <> MediaBroadcastWorksheetMarketGoalDate.IsHiatus Then

                                    MarketDetails_HiatusValueChanged(MediaBroadcastWorksheetMarketDetailsViewModel, DateColumnName)

                                End If

                            End If

                        End If

                    Next

                Next

                MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.AcceptChanges()

                For Each MediaBroadcastWorksheetMarketGoal In DbContext.MediaBroadcastWorksheetMarketGoals.Include("MediaBroadcastWorksheetMarketGoalDates").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.ID).ToList

                    If MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Any(Function(DR) DR(MarketGoalsColumns.WorksheetMarketGoalID.ToString) = MediaBroadcastWorksheetMarketGoal.ID) = False Then

                        For Each MediaBroadcastWorksheetMarketGoalDate In MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.ToList

                            DbContext.MediaBroadcastWorksheetMarketGoalDates.Remove(MediaBroadcastWorksheetMarketGoalDate)

                        Next

                        DbContext.MediaBroadcastWorksheetMarketGoals.Remove(MediaBroadcastWorksheetMarketGoal)

                    End If

                Next

                DbContext.Configuration.AutoDetectChangesEnabled = True

                DbContext.SaveChanges()

                For Each MediaBroadcastWorksheetMarketGoal In WorksheetMarketGoalRows.Keys.OfType(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal)

                    DataRow = WorksheetMarketGoalRows(MediaBroadcastWorksheetMarketGoal)

                    DataRow(MarketGoalsColumns.WorksheetMarketGoalID.ToString) = MediaBroadcastWorksheetMarketGoal.ID

                Next

                If MediaBroadcastWorksheetMarketDetailsViewModel.SaveEnabled Then

                    MarketDetails_Save(MediaBroadcastWorksheetMarketDetailsViewModel)

                End If

                DbContext.Database.Connection.Close()

            End Using

            MediaBroadcastWorksheetMarketGoalsViewModel.HasGoalsBeenModified = True

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = False
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = False

        End Sub
        Public Sub MarketGoals_AddNewDataEntryRow(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim CPPDataRow As System.Data.DataRow = Nothing

            DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.NewRow()

            DataRow(MarketGoalsColumns.WorksheetMarketGoalID.ToString) = 0
            DataRow(MarketGoalsColumns.Daypart.ToString) = ""

            If MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.Length > 0 AndAlso MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.Length > 0 Then

                DataRow(MarketGoalsColumns.Length.ToString) = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.Length

            ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.Length > 0 AndAlso MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.Length = 0 Then

                DataRow(MarketGoalsColumns.Length.ToString) = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.Length

            ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.Length = 0 AndAlso MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.Length > 0 Then

                DataRow(MarketGoalsColumns.Length.ToString) = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.Length

            Else

                DataRow(MarketGoalsColumns.Length.ToString) = 0

            End If

            DataRow(MarketGoalsColumns.GRP.ToString) = 0
            DataRow(MarketGoalsColumns.CPP.ToString) = 0
            DataRow(MarketGoalsColumns.Budget.ToString) = 0
            DataRow(MarketGoalsColumns.Percentage.ToString) = 0
            DataRow(MarketGoalsColumns.WasRateImported.ToString) = False

            MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Add(DataRow)

            CPPDataRow = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.NewRow()

            CPPDataRow(MarketGoalsCPPColumns.DataTableID.ToString) = DataRow(MarketGoalsColumns.ID.ToString)

            MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows.Add(CPPDataRow)

            If MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageChecked = False Then

                MarketGoals_RefreshPercentage(MediaBroadcastWorksheetMarketGoalsViewModel)

                MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

            End If

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_DeleteDataEntryRow(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, RowIndexes() As Integer)

            For Each RowIndex In RowIndexes.OrderByDescending(Function(RI) RI)

                MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.RemoveAt(RowIndex)
                MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows.RemoveAt(RowIndex)

            Next

            If MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageChecked = False Then

                MarketGoals_RefreshPercentage(MediaBroadcastWorksheetMarketGoalsViewModel)

                MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

            End If

            MarketGoals_CheckForMediaPlanImport(MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.DeleteEnabled = (MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Count > 0)
            MediaBroadcastWorksheetMarketGoalsViewModel.CopyEnabled = (MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Count > 0)

        End Sub
        Public Sub MarketGoals_CopyDataEntryRow(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, RowIndexes() As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim CPPDataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.BeginLoadData()

            For Each RowIndex In RowIndexes.OrderByDescending(Function(RI) RI)

                DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Add(MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex).ItemArray)

                DataRow(MarketGoalsColumns.ID.ToString) = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Max(Function(DR) DR(MarketGoalsColumns.ID.ToString)) + 1
                DataRow(MarketGoalsColumns.WorksheetMarketGoalID.ToString) = 0

                CPPDataRow = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.NewRow()

                CPPDataRow(MarketGoalsCPPColumns.DataTableID.ToString) = DataRow(MarketGoalsColumns.ID.ToString)

                MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows.Add(CPPDataRow)

            Next

            MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.EndLoadData()

            If MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageChecked = False Then

                MarketGoals_RefreshPercentage(MediaBroadcastWorksheetMarketGoalsViewModel)

            End If

            MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
            MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.DeleteEnabled = (MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Count > 0)
            MediaBroadcastWorksheetMarketGoalsViewModel.CopyEnabled = (MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Count > 0)

        End Sub
        Public Sub MarketGoals_HiatusValueChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                                  ColumnName As String, RecalculateGRP As Boolean)

            'objects
            Dim IsHiatus As Boolean = False

            IsHiatus = Not MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(ColumnName)

            MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(ColumnName) = IsHiatus

            If IsHiatus Then

                If RecalculateGRP Then

                    For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                        DataRow(ColumnName) = 0

                        MarketGoals_GRPValueChanged(MediaBroadcastWorksheetMarketGoalsViewModel, MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.IndexOf(DataRow))

                    Next

                End If

            Else

                For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                    MarketGoals_GRPValueChanged(MediaBroadcastWorksheetMarketGoalsViewModel, MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.IndexOf(DataRow))

                Next

            End If

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_GoalDateValueChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim GoalDate As Date = Date.MinValue
            Dim GoalDateColumn As String = String.Empty
            Dim GRP As Decimal = 0

            DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex)

            For Each GoalDate In MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                GoalDateColumn = MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate)

                If MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(GoalDateColumn) = False Then

                    GRP += DataRow(GoalDateColumn)

                End If

            Next

            DataRow(MarketGoalsColumns.GRP.ToString) = GRP

            DataRow(MarketGoalsColumns.Budget.ToString) = GRP * DataRow(MarketGoalsColumns.CPP.ToString)

            MarketGoals_RefreshPercentage(MediaBroadcastWorksheetMarketGoalsViewModel)

            MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
            MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_LengthValueChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_GoalValueChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, RowIndex As Integer)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_GRPValueChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim TotalGRP As Decimal = 0
            Dim GRP As Decimal = 0
            Dim DateCounter As Integer = 0
            Dim GoalDate As Date = Date.MinValue
            Dim GoalDateColumn As String = String.Empty
            Dim CPP As Decimal = 0

            DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex)

            TotalGRP = DataRow(MarketGoalsColumns.GRP.ToString)

            For Each DataColumn In MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Columns.OfType(Of System.Data.DataColumn)

                If MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(DataColumn) = False Then

                    DateCounter += 1

                End If

            Next

            If DateCounter > 0 Then

                'GRP = TotalGRP / DateCounter

                For Each GoalDate In MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    GoalDateColumn = MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate)

                    If MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(GoalDateColumn) = False Then

                        GRP = Math.Round((TotalGRP / DateCounter), 1)

                        DataRow(GoalDateColumn) = GRP

                        TotalGRP -= GRP
                        DateCounter -= 1

                    End If

                Next

            End If

            GRP = DataRow(MarketGoalsColumns.GRP.ToString)
            CPP = DataRow(MarketGoalsColumns.CPP.ToString)

            DataRow(MarketGoalsColumns.Budget.ToString) = GRP * CPP

            MarketGoals_RefreshPercentage(MediaBroadcastWorksheetMarketGoalsViewModel)

            MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
            MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_CPPValueChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim GRP As Decimal = 0
            Dim CPP As Decimal = 0

            DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex)

            GRP = DataRow(MarketGoalsColumns.GRP.ToString)
            CPP = DataRow(MarketGoalsColumns.CPP.ToString)

            DataRow(MarketGoalsColumns.Budget.ToString) = GRP * CPP

            MarketGoals_RefreshPercentage(MediaBroadcastWorksheetMarketGoalsViewModel)

            MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
            MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_BudgetValueChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim Budget As Decimal = 0
            Dim CPP As Decimal = 0
            Dim GRP As Decimal = 0

            DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex)

            Budget = DataRow(MarketGoalsColumns.Budget.ToString)
            GRP = DataRow(MarketGoalsColumns.GRP.ToString)
            CPP = DataRow(MarketGoalsColumns.CPP.ToString)

            If CPP = 0 AndAlso GRP <> 0 AndAlso Budget <> 0 Then

                DataRow(MarketGoalsColumns.CPP.ToString) = Budget / GRP

            ElseIf CPP <> 0 Then

                DataRow(MarketGoalsColumns.GRP.ToString) = Budget / CPP

            End If

            MarketGoals_RefreshPercentage(MediaBroadcastWorksheetMarketGoalsViewModel)

            MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
            MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_PercentageValueChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim Percentage As Decimal = 0
            Dim Budget As Decimal = 0
            Dim GRP As Decimal = 0
            Dim DateGRP As Decimal = 0
            Dim TotalGRP As Decimal = 0
            Dim DateCounter As Integer = 0
            Dim GoalDate As Date = Date.MinValue
            Dim GoalDateColumn As String = String.Empty
            Dim DoCalculation As Boolean = False

            DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex)

            Percentage = DataRow(MarketGoalsColumns.Percentage.ToString)
            Budget = DataRow(MarketGoalsColumns.Budget.ToString)
            GRP = DataRow(MarketGoalsColumns.GRP.ToString)

            If MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs > 0 Then

                GRP = MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs * Percentage

                DataRow(MarketGoalsColumns.GRP.ToString) = GRP

                DoCalculation = True

                TotalGRP = DataRow(MarketGoalsColumns.GRP.ToString)

                For Each DataColumn In MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Columns.OfType(Of System.Data.DataColumn)

                    If MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(DataColumn) = False Then

                        DateCounter += 1

                    End If

                Next

                If DateCounter > 0 Then

                    'GRP = TotalGRP / DateCounter

                    For Each GoalDate In MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                        GoalDateColumn = MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate)

                        If MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(GoalDateColumn) = False Then

                            DateGRP = Math.Round((TotalGRP / DateCounter), 1)

                            DataRow(GoalDateColumn) = DateGRP

                            TotalGRP -= DateGRP
                            DateCounter -= 1

                        End If

                    Next

                End If

            End If

            If MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget > 0 Then

                Budget = MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget * Percentage

                DataRow(MarketGoalsColumns.Budget.ToString) = Budget

                DoCalculation = True

            End If

            If DoCalculation Then

                If GRP <> 0 AndAlso Budget <> 0 Then

                    DataRow(MarketGoalsColumns.CPP.ToString) = Budget / GRP

                End If

                MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
                MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

            End If

            MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
            MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

        End Sub
        Public Sub MarketGoals_TotalGRPsChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, TotalGRPs As Decimal)

            MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs = TotalGRPs

            MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)

            If MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget > 0 OrElse MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs > 0 Then

                MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageEnabled = True

            Else

                MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageEnabled = False
                MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageChecked = False

            End If

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_TotalBudgetChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, TotalBudget As Decimal)

            MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget = TotalBudget

            MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

            If MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget > 0 OrElse MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs > 0 Then

                MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageEnabled = True

            Else

                MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageEnabled = False
                MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageChecked = False

            End If

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_EnterByPercentageChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, EnterByPercentage As Boolean)

            MediaBroadcastWorksheetMarketGoalsViewModel.EnterByPercentageChecked = EnterByPercentage

        End Sub
        Public Sub MarketGoals_ValidateAllDataRows(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DaypartCode As String = String.Empty
            Dim Length As Integer = 0
            Dim RowIndex As Integer = 0

            For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.GetErrors()

                DataRow.ClearErrors()

            Next

            For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).ToList

                RowIndex = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.IndexOf(DataRow)

                Length = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.Length.ToString)
                DaypartCode = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.Daypart.ToString)

                MarketGoals_ValidateDataRow(MediaBroadcastWorksheetMarketGoalsViewModel, RowIndex, DaypartCode, Length)

            Next

        End Sub
        Public Sub MarketGoals_ValidateDataRow(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, RowIndex As Integer,
                                               DaypartCode As String, Length As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim HasDuplciate As Boolean = False

            If String.IsNullOrWhiteSpace(DaypartCode) = False Then

                For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).ToList

                    If MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.IndexOf(DataRow) <> RowIndex Then

                        If DataRow(MarketDetailsColumns.Daypart.ToString) = DaypartCode AndAlso DataRow(MarketDetailsColumns.Length.ToString) = Length Then

                            DataRow.SetColumnError(MarketDetailsColumns.Daypart.ToString, "Duplicate daypart\length entry is not allowed.")
                            DataRow.RowError = "Duplicate daypart\length entry is not allowed."

                            HasDuplciate = True

                        End If

                    End If

                Next

            End If

            If HasDuplciate Then

                MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex).SetColumnError(MarketDetailsColumns.Daypart.ToString, "Duplicate daypart\length entry is not allowed.")
                MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(RowIndex).RowError = "Duplicate daypart\length entry is not allowed."

            End If

        End Sub
        Public Sub MarketGoals_DaypartValueChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_SelectedChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                               HasASelectedRow As Boolean, RowIndexes As Generic.List(Of Integer))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim DaypartCode As String = String.Empty

            MediaBroadcastWorksheetMarketGoalsViewModel.DeleteEnabled = HasASelectedRow
            MediaBroadcastWorksheetMarketGoalsViewModel.CopyEnabled = HasASelectedRow

        End Sub
        Public Sub MarketGoals_UserEntryChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = True
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = True

        End Sub
        Public Sub MarketGoals_ClearChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = False
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = False

        End Sub
        Public Sub MarketGoals_SelectedWorksheetMarketChanged(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel, WorksheetMarketID As Integer)

            MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket = Nothing

            If WorksheetMarketID > 0 Then

                MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket = MediaBroadcastWorksheetMarketGoalsViewModel.WorksheetMarkets.SingleOrDefault(Function(Entity) Entity.ID = WorksheetMarketID)

            End If

            MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows.Clear()
            MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows.Clear()
            MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Clear()

            If MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                MarketGoals_LoadDataEntryRows(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_CreateHiatusDataTableDefaultRows(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_CreateCPPDataTableDefaultRows(MediaBroadcastWorksheetMarketGoalsViewModel)

                MarketGoals_CheckForMediaPlanImport(MediaBroadcastWorksheetMarketGoalsViewModel)

                MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.GoalTotalGRP
                MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.GoalTotalBudgetAmount

                MarketGoals_CalculateVarianceGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
                MarketGoals_CalculateVarianceBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

            End If

            MediaBroadcastWorksheetMarketGoalsViewModel.MediaPlan_LoadGoalsEnabled = MarketGoals_HasMarketAndCampaignInMediaPlan(MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.SaveEnabled = False
            MediaBroadcastWorksheetMarketGoalsViewModel.CancelEnabled = False

        End Sub
        Public Function MarketGoals_CalculateCPPTotal(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                                      FilterString As String) As Decimal

            'objects
            Dim CPPTotal As Decimal = 0
            Dim Budget As Decimal = 0
            Dim GRP As Decimal = 0
            Dim FilteredDataView As System.Data.DataView = Nothing
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            FilteredDataView = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.AsDataView

            FilteredDataView.RowFilter = FilterString

            FilteredDataTable = FilteredDataView.ToTable()

            Budget = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Sum(Function(DR) CDec(DR(AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController.MarketGoalsColumns.Budget.ToString)))
            GRP = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Sum(Function(DR) CDec(DR(AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController.MarketGoalsColumns.GRP.ToString)))

            If GRP <> 0 Then

                CPPTotal = Budget / GRP

            Else

                CPPTotal = 0

            End If

            MarketGoals_CalculateCPPTotal = CPPTotal

        End Function
        Public Function MarketGoals_CalculateBudgetByDate(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                                          DateColumn As String, FilterString As String) As Decimal

            'objects
            Dim BudgetByDateTotal As Decimal = 0
            Dim FilteredDataView As System.Data.DataView = Nothing
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            FilteredDataView = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.AsDataView

            FilteredDataView.RowFilter = FilterString

            FilteredDataTable = FilteredDataView.ToTable()

            For Each DataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow)

                BudgetByDateTotal += (MarketGoals_GetCPPByDataRowAndDate(MediaBroadcastWorksheetMarketGoalsViewModel, DataRow, DateColumn) * DataRow(DateColumn))

            Next

            MarketGoals_CalculateBudgetByDate = BudgetByDateTotal

        End Function
        Public Function MarketGoals_CalculateWeeklyCPP(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                                       DateColumn As String, FilterString As String) As Decimal

            'objects
            Dim WeeklyCPP As Decimal = 0
            Dim FilteredDataView As System.Data.DataView = Nothing
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim GRP As Decimal = 0
            Dim BudgetByDateTotal As Decimal = 0

            BudgetByDateTotal = MarketGoals_CalculateBudgetByDate(MediaBroadcastWorksheetMarketGoalsViewModel, DateColumn, FilterString)

            FilteredDataView = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.AsDataView

            FilteredDataView.RowFilter = FilterString

            FilteredDataTable = FilteredDataView.ToTable()

            For Each DataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                GRP += DataRow(DateColumn)

            Next

            If GRP <> 0 Then

                WeeklyCPP = (BudgetByDateTotal / GRP)

            Else

                WeeklyCPP = 0

            End If

            MarketGoals_CalculateWeeklyCPP = WeeklyCPP

        End Function
        Public Function MarketGoals_CalculateTotalGRPs(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel) As Decimal

            'objects
            Dim TotalGRPs As Decimal = 0

            For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                TotalGRPs += DataRow(MarketGoalsColumns.GRP.ToString)

            Next

            MarketGoals_TotalGRPsChanged(MediaBroadcastWorksheetMarketGoalsViewModel, TotalGRPs)

            MarketGoals_CalculateTotalGRPs = TotalGRPs

        End Function
        Public Function MarketGoals_CalculateTotalBudget(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel) As Decimal

            'objects
            Dim TotalBudget As Decimal = 0

            For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                TotalBudget += DataRow(MarketGoalsColumns.Budget.ToString)

            Next

            MarketGoals_TotalBudgetChanged(MediaBroadcastWorksheetMarketGoalsViewModel, TotalBudget)

            MarketGoals_CalculateTotalBudget = TotalBudget

        End Function
        Public Function MarketGoals_LoadMediaPlanEstimates(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel) As Generic.List(Of AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate)

            'objects
            Dim MediaPlanEstimates As Generic.List(Of AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate) = Nothing
            Dim MediaPlanID As Integer = 0
            Dim MediaPlan As AdvantageFramework.MediaPlanning.Classes.MediaPlan = Nothing
            Dim WorksheetMarketCode As String = String.Empty
            Dim WorksheetIsCable As Boolean = False
            Dim WorksheetCampaignID As Integer = 0
            Dim SalesClassType As String = String.Empty

            MediaPlanEstimates = New Generic.List(Of AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate)

            MediaPlanID = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaPlanID.GetValueOrDefault(0)

            If MediaPlanID > 0 AndAlso MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                WorksheetMarketCode = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.MarketCode
                WorksheetIsCable = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.IsCable
                WorksheetCampaignID = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.CampaignID.GetValueOrDefault(0)

                If MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    SalesClassType = DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.T.ToString

                ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    SalesClassType = DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.R.ToString

                    'ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                    '	SalesClassType = "T"

                End If

                MediaPlan = New AdvantageFramework.MediaPlanning.Classes.MediaPlan(Me.Session.ConnectionString, Me.Session.UserCode, MediaPlanID)

                MediaPlan.DbContext.Database.Connection.Open()

                For Each MediaPlanEstimate In MediaPlan.MediaPlanEstimates.Values.OfType(Of AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate).Where(Function(Entity) Entity.SalesClassType = SalesClassType AndAlso Entity.IsCable = WorksheetIsCable).OrderBy(Function(Entity) Entity.OrderNumber).ToList

                    If MarketGoals_HasMarketAndCampaignInMediaEstimate(MediaBroadcastWorksheetMarketGoalsViewModel, MediaPlanEstimate, WorksheetMarketCode, WorksheetCampaignID) Then

                        MediaPlanEstimates.Add(MediaPlanEstimate)

                    End If

                Next

            End If

            MarketGoals_LoadMediaPlanEstimates = MediaPlanEstimates

        End Function
        Public Sub MarketGoals_ImportMediaPlanData(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                                   MediaPlanEstimate As AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate,
                                                   ByRef UserMessage As String)

            'objects
            Dim MediaPlanID As Integer = 0
            Dim SalesClassType As String = String.Empty
            Dim MediaPlan As AdvantageFramework.MediaPlanning.Classes.MediaPlan = Nothing
            Dim MarketMPDLevel As AdvantageFramework.Database.Entities.MediaPlanDetailLevel = Nothing
            Dim DaypartMPDLevel As AdvantageFramework.Database.Entities.MediaPlanDetailLevel = Nothing
            Dim LengthMPDLevel As AdvantageFramework.Database.Entities.MediaPlanDetailLevel = Nothing
            Dim CampaignMPDLevel As AdvantageFramework.Database.Entities.MediaPlanDetailLevel = Nothing
            Dim MediaPlanDetailLevelLine As AdvantageFramework.Database.Entities.MediaPlanDetailLevelLine = Nothing
            Dim CampaignMPDLevelLine As AdvantageFramework.Database.Entities.MediaPlanDetailLevelLine = Nothing
            Dim RowIndexes As Generic.List(Of Integer) = Nothing
            Dim WorksheetMarketCode As String = String.Empty
            Dim WorksheetIsCable As Boolean = False
            Dim DaypartCode As String = String.Empty
            Dim Length As Integer = 0
            Dim DaypartID As Integer = 0
            Dim DataRow As System.Data.DataRow = Nothing
            Dim GRPColumn As AdvantageFramework.MediaPlanning.DataAreaDataColumns = MediaPlanning.DataAreaDataColumns.Demo1
            Dim Demo1MPDField As AdvantageFramework.Database.Entities.MediaPlanDetailField = Nothing
            Dim Demo2MPDField As AdvantageFramework.Database.Entities.MediaPlanDetailField = Nothing
            Dim HasGRPColumn As Boolean = False
            Dim GRP As Decimal = 0
            Dim CPP As Decimal = 0
            Dim BudgetAmount As Decimal = 0
            Dim EndDate As Date = Date.MinValue
            Dim TotalGRP As Decimal = 0
            Dim CPPDataRow As System.Data.DataRow = Nothing
            Dim MPDLLDCounter As Integer = 0
            Dim HasEstimateWithMarket As Boolean = False
            Dim WorksheetCampaignID As Integer = 0
            Dim GoalDates As Generic.List(Of Date) = Nothing
            Dim FoundHiatusWeek As Boolean = False
            Dim GoalDate As Date = Date.MinValue

            MediaPlanID = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaPlanID.GetValueOrDefault(0)

            If MediaPlanID > 0 AndAlso MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso MediaPlanEstimate IsNot Nothing Then

                WorksheetMarketCode = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.MarketCode
                WorksheetIsCable = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.IsCable
                WorksheetCampaignID = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.CampaignID.GetValueOrDefault(0)

                If MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    SalesClassType = DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.T.ToString

                ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    SalesClassType = DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.R.ToString

                    'ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                    '	SalesClassType = "T"

                End If

                'MediaPlan = New AdvantageFramework.MediaPlanning.Classes.MediaPlan(Me.Session.ConnectionString, Me.Session.UserCode, MediaPlanID)

                'MediaPlan.DbContext.Database.Connection.Open()

                'For Each MediaPlanEstimate In MediaPlan.MediaPlanEstimates.Values.OfType(Of AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate).Where(Function(Entity) Entity.SalesClassType = SalesClassType AndAlso Entity.IsCable = WorksheetIsCable).OrderBy(Function(Entity) Entity.OrderNumber).ToList

                '    If MarketGoals_HasMarketAndCampaignInMediaEstimate(MediaBroadcastWorksheetMarketGoalsViewModel, MediaPlanEstimate, WorksheetMarketCode, WorksheetCampaignID) Then

                '        HasEstimateWithMarket = True
                '        Exit For

                '    End If

                'Next

                ' If HasEstimateWithMarket AndAlso MediaPlanEstimate IsNot Nothing Then

                If (MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast AndAlso MediaPlanEstimate.IsCalendarMonth = False) OrElse
                            (MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Calendar AndAlso MediaPlanEstimate.IsCalendarMonth = True) Then

                    MarketGoals_DeleteDataEntryRow(MediaBroadcastWorksheetMarketGoalsViewModel, MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Select(Function(DR) DR.Table.Rows.IndexOf(DR)).ToArray)

                    RowIndexes = New Generic.List(Of Integer)

                    If MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Market).Any Then

                        MarketMPDLevel = MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Market).OrderBy(Function(Entity) Entity.OrderNumber).FirstOrDefault

                    End If

                    If MarketMPDLevel IsNot Nothing Then

                        For Each MediaPlanDetailLevelLine In MarketMPDLevel.MediaPlanDetailLevelLines

                            If MediaPlanDetailLevelLine.MediaPlanDetailLevelLineTags.Any(Function(Entity) Entity.MarketCode = WorksheetMarketCode) Then

                                RowIndexes.Add(MediaPlanDetailLevelLine.RowIndex)

                            End If

                        Next

                    End If

                    If MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Campaign).Any Then

                        CampaignMPDLevel = MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Campaign).OrderBy(Function(Entity) Entity.OrderNumber).FirstOrDefault

                    End If

                    If CampaignMPDLevel IsNot Nothing AndAlso WorksheetCampaignID > 0 Then

                        For Each RowIndex In RowIndexes.ToList

                            CampaignMPDLevelLine = CampaignMPDLevel.MediaPlanDetailLevelLines.SingleOrDefault(Function(Entity) Entity.RowIndex = RowIndex)

                            If CampaignMPDLevelLine IsNot Nothing Then

                                If CampaignMPDLevelLine.MediaPlanDetailLevelLineTags.Any(Function(Entity) Entity.CampaignID.GetValueOrDefault(0) = WorksheetCampaignID) = False Then

                                    RowIndexes.Remove(RowIndex)

                                End If

                            End If

                        Next

                    End If

                    If MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Daypart).Any Then

                        DaypartMPDLevel = MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Daypart).OrderBy(Function(Entity) Entity.OrderNumber).FirstOrDefault

                    End If

                    If MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.MappingType = AdvantageFramework.MediaPlanning.MappingTypes.Length).Any Then

                        LengthMPDLevel = MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.MappingType = AdvantageFramework.MediaPlanning.MappingTypes.Length).OrderBy(Function(Entity) Entity.OrderNumber).FirstOrDefault

                    End If

                    If RowIndexes.Count > 0 Then

                        GoalDates = MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD).ToList

                        Demo1MPDField = MediaPlanEstimate.MediaPlanDetailFields.FirstOrDefault(Function(Entity) Entity.FieldID = AdvantageFramework.MediaPlanning.DataAreaDataColumns.Demo1.ToString)
                        Demo2MPDField = MediaPlanEstimate.MediaPlanDetailFields.FirstOrDefault(Function(Entity) Entity.FieldID = AdvantageFramework.MediaPlanning.DataAreaDataColumns.Demo2.ToString)

                        If Demo1MPDField IsNot Nothing AndAlso Demo2MPDField IsNot Nothing Then

                            If Demo1MPDField.IsVisible AndAlso Demo2MPDField.IsVisible Then

                                If Demo1MPDField.AreaIndex <= Demo2MPDField.AreaIndex Then

                                    GRPColumn = MediaPlanning.DataAreaDataColumns.Demo1

                                Else

                                    GRPColumn = MediaPlanning.DataAreaDataColumns.Demo2

                                End If

                                HasGRPColumn = True

                            ElseIf Demo1MPDField.IsVisible = False AndAlso Demo2MPDField.IsVisible Then

                                GRPColumn = MediaPlanning.DataAreaDataColumns.Demo2

                                HasGRPColumn = True

                            ElseIf Demo1MPDField.IsVisible AndAlso Demo2MPDField.IsVisible = False Then

                                GRPColumn = MediaPlanning.DataAreaDataColumns.Demo1

                                HasGRPColumn = True

                            End If

                        ElseIf Demo1MPDField IsNot Nothing AndAlso Demo2MPDField Is Nothing Then

                            If Demo1MPDField.IsVisible Then

                                GRPColumn = MediaPlanning.DataAreaDataColumns.Demo1

                                HasGRPColumn = True

                            End If

                        ElseIf Demo1MPDField Is Nothing AndAlso Demo2MPDField IsNot Nothing Then

                            If Demo2MPDField.IsVisible Then

                                GRPColumn = MediaPlanning.DataAreaDataColumns.Demo2

                                HasGRPColumn = True

                            End If

                        End If

                        For Each RowIndex In RowIndexes.OrderBy(Function(RI) RI)

                            DaypartCode = String.Empty
                            Length = 0
                            MediaPlanDetailLevelLine = Nothing
                            DataRow = Nothing

                            If DaypartMPDLevel IsNot Nothing Then

                                MediaPlanDetailLevelLine = DaypartMPDLevel.MediaPlanDetailLevelLines.FirstOrDefault(Function(Entity) Entity.RowIndex = RowIndex)

                                If MediaPlanDetailLevelLine IsNot Nothing AndAlso MediaPlanDetailLevelLine.MediaPlanDetailLevelLineTags.Count > 0 Then

                                    DaypartID = MediaPlanDetailLevelLine.MediaPlanDetailLevelLineTags.FirstOrDefault.DaypartID.GetValueOrDefault(0)

                                    If DaypartID > 0 AndAlso MediaBroadcastWorksheetMarketGoalsViewModel.Dayparts.Any(Function(Entity) Entity.ID = DaypartID) Then

                                        DaypartCode = MediaBroadcastWorksheetMarketGoalsViewModel.Dayparts.FirstOrDefault(Function(Entity) Entity.ID = DaypartID).Code

                                    End If

                                End If

                            End If

                            MediaPlanDetailLevelLine = Nothing

                            If LengthMPDLevel IsNot Nothing Then

                                MediaPlanDetailLevelLine = LengthMPDLevel.MediaPlanDetailLevelLines.FirstOrDefault(Function(Entity) Entity.RowIndex = RowIndex)

                                If MediaPlanDetailLevelLine IsNot Nothing AndAlso String.IsNullOrWhiteSpace(MediaPlanDetailLevelLine.Description) = False AndAlso IsNumeric(MediaPlanDetailLevelLine.Description) Then

                                    Length = CInt(MediaPlanDetailLevelLine.Description)

                                End If

                            End If

                            If String.IsNullOrWhiteSpace(DaypartCode) = False Then

                                DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).FirstOrDefault(Function(DR) DR(MarketDetailsColumns.Daypart.ToString) = DaypartCode AndAlso DR(MarketDetailsColumns.Length.ToString) = Length)

                            End If

                            If DataRow Is Nothing Then

                                MarketGoals_AddNewDataEntryRow(MediaBroadcastWorksheetMarketGoalsViewModel)

                                DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Count - 1)
                                CPPDataRow = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows(MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows.Count - 1)

                                DataRow(MarketDetailsColumns.Daypart.ToString) = DaypartCode
                                DataRow(MarketDetailsColumns.Length.ToString) = Length

                            End If

                            If DataRow IsNot Nothing Then

                                If HasGRPColumn Then

                                    If MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaBroadcastWorksheetDateTypeID = DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                                        TotalGRP = 0
                                        BudgetAmount = 0

                                        For Each StartDate In GoalDates

                                            If GoalDates.IndexOf(StartDate) = 0 Then

                                                If GoalDates.Count > 1 Then

                                                    EndDate = GoalDates(1).AddDays(-1)

                                                Else

                                                    EndDate = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.EndDate

                                                End If

                                            ElseIf GoalDates.IndexOf(StartDate) = GoalDates.Count - 1 Then

                                                EndDate = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.EndDate

                                            Else

                                                EndDate = StartDate.AddDays(6)

                                            End If

                                            GRP = 0
                                            MPDLLDCounter = 0
                                            CPP = 0

                                            For Each MPDLLD In MediaPlanEstimate.MediaPlanDetailLevelLineDatas.Where(Function(Entity) Entity.RowIndex = RowIndex AndAlso Entity.StartDate >= StartDate AndAlso Entity.StartDate <= EndDate)

                                                If GRPColumn = MediaPlanning.DataAreaDataColumns.Demo1 Then

                                                    GRP += MPDLLD.Demo1.GetValueOrDefault(0)
                                                    TotalGRP += MPDLLD.Demo1.GetValueOrDefault(0)

                                                ElseIf GRPColumn = MediaPlanning.DataAreaDataColumns.Demo2 Then

                                                    GRP += MPDLLD.Demo2.GetValueOrDefault(0)
                                                    TotalGRP += MPDLLD.Demo2.GetValueOrDefault(0)

                                                End If

                                                BudgetAmount += MPDLLD.Dollars.GetValueOrDefault(0)
                                                CPP += MPDLLD.Rate.GetValueOrDefault(0)

                                                MPDLLDCounter += 1

                                            Next

                                            If MPDLLDCounter > 0 Then

                                                CPPDataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(StartDate)) = CPP / MPDLLDCounter

                                            Else

                                                CPPDataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(StartDate)) = 0

                                            End If

                                            DataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(StartDate)) = GRP

                                        Next

                                        DataRow(MarketGoalsColumns.GRP.ToString) = TotalGRP
                                        DataRow(MarketGoalsColumns.Budget.ToString) = BudgetAmount

                                        If TotalGRP <> 0 Then

                                            DataRow(MarketGoalsColumns.CPP.ToString) = BudgetAmount / TotalGRP

                                        Else

                                            DataRow(MarketGoalsColumns.CPP.ToString) = 0

                                        End If

                                    Else

                                        TotalGRP = 0
                                        BudgetAmount = 0

                                        For Each StartDate In GoalDates

                                            GRP = 0
                                            CPP = 0

                                            For Each MPDLLD In MediaPlanEstimate.MediaPlanDetailLevelLineDatas.Where(Function(Entity) Entity.RowIndex = RowIndex AndAlso Entity.StartDate = StartDate)

                                                If GRPColumn = MediaPlanning.DataAreaDataColumns.Demo1 Then

                                                    GRP += MPDLLD.Demo1.GetValueOrDefault(0)
                                                    TotalGRP += MPDLLD.Demo1.GetValueOrDefault(0)

                                                ElseIf GRPColumn = MediaPlanning.DataAreaDataColumns.Demo2 Then

                                                    GRP += MPDLLD.Demo2.GetValueOrDefault(0)
                                                    TotalGRP += MPDLLD.Demo2.GetValueOrDefault(0)

                                                End If

                                                BudgetAmount += MPDLLD.Dollars.GetValueOrDefault(0)
                                                CPP += MPDLLD.Rate.GetValueOrDefault(0)

                                            Next

                                            DataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(StartDate)) = GRP
                                            CPPDataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(StartDate)) = CPP

                                        Next

                                        DataRow(MarketGoalsColumns.GRP.ToString) = TotalGRP
                                        DataRow(MarketGoalsColumns.Budget.ToString) = BudgetAmount

                                        If TotalGRP <> 0 Then

                                            DataRow(MarketGoalsColumns.CPP.ToString) = BudgetAmount / TotalGRP

                                        Else

                                            DataRow(MarketGoalsColumns.CPP.ToString) = 0

                                        End If

                                    End If

                                    DataRow(MarketGoalsColumns.WasRateImported.ToString) = True

                                End If

                                For Each GoalDate In GoalDates

                                    MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate)) = False

                                Next

                                If MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaBroadcastWorksheetDateTypeID = DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                                    If MediaPlanEstimate.HiatusWeeks IsNot Nothing AndAlso MediaPlanEstimate.HiatusWeeks.Count > 0 Then

                                        For Each HiatusWeek In MediaPlanEstimate.HiatusWeeks

                                            FoundHiatusWeek = False
                                            GoalDate = Date.MinValue

                                            For Each GoalDate In GoalDates

                                                If GoalDate >= HiatusWeek AndAlso GoalDate <= HiatusWeek.AddDays(6) Then

                                                    FoundHiatusWeek = True
                                                    Exit For

                                                End If

                                            Next

                                            If FoundHiatusWeek Then

                                                MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate)) = True

                                            End If

                                        Next

                                    End If

                                End If

                            End If

                        Next

                        MarketGoals_RefreshPercentage(MediaBroadcastWorksheetMarketGoalsViewModel)

                        MarketGoals_CalculateTotalGRPs(MediaBroadcastWorksheetMarketGoalsViewModel)
                        MarketGoals_CalculateTotalBudget(MediaBroadcastWorksheetMarketGoalsViewModel)

                        MarketGoals_CheckForMediaPlanImport(MediaBroadcastWorksheetMarketGoalsViewModel)

                    End If

                Else

                    UserMessage = "Media plan estimate is not in the same format calednar format as this worksheet.  No data will be imported."

                End If

                'End If

            End If

        End Sub
        Public Sub MarketGoals_RefreshPercentage(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim TotalGRPs As Decimal = 0
            Dim TotalPercentage As Integer = 0

            TotalGRPs = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Sum(Function(DR) DR(MarketGoalsColumns.GRP.ToString))

            For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                If TotalGRPs = 0 Then

                    DataRow(MarketGoalsColumns.Percentage.ToString) = FormatNumber(0, 2)

                Else

                    If DataRow(MarketGoalsColumns.GRP.ToString) <> 0 Then

                        TotalPercentage += Math.Round(DataRow(MarketGoalsColumns.GRP.ToString) / TotalGRPs, 2) * 100

                    End If

                    DataRow(MarketGoalsColumns.Percentage.ToString) = FormatNumber(Math.Round(DataRow(MarketGoalsColumns.GRP.ToString) / TotalGRPs, 2), 2)

                End If

            Next

            If TotalPercentage < 100 AndAlso TotalPercentage > 0 Then

                Do Until TotalPercentage = 100

                    For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) DR(MarketGoalsColumns.GRP.ToString))

                        DataRow(MarketGoalsColumns.Percentage.ToString) += 0.01

                        TotalPercentage += 1

                        If TotalPercentage = 100 Then

                            Exit For

                        End If

                    Next

                Loop

            ElseIf TotalPercentage > 100 Then

                Do Until TotalPercentage = 100

                    For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) DR(MarketGoalsColumns.GRP.ToString))

                        DataRow(MarketGoalsColumns.Percentage.ToString) -= 0.01

                        TotalPercentage -= 1

                        If TotalPercentage = 100 Then

                            Exit For

                        End If

                    Next

                Loop

            End If

        End Sub
        Public Sub MarketGoals_CalculateVarianceGRPs(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim TotalGRPs As Decimal = 0

            TotalGRPs = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Sum(Function(DR) CDec(DR(MarketGoalsColumns.GRP.ToString)))

            MediaBroadcastWorksheetMarketGoalsViewModel.VarianceGRPs = TotalGRPs - MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs

        End Sub
        Public Sub MarketGoals_CalculateVarianceBudget(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim TotalBudget As Decimal = 0

            TotalBudget = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Sum(Function(DR) CDec(DR(MarketGoalsColumns.Budget.ToString)))

            MediaBroadcastWorksheetMarketGoalsViewModel.VarianceBudget = TotalBudget - MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget

        End Sub
        Private Function MarketGoals_GetCPPByDataRowAndDate(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                                            DataRow As System.Data.DataRow, DateColumn As String) As Decimal

            'objects
            Dim CPPDataRow As System.Data.DataRow = Nothing
            Dim CPP As Decimal = 0

            CPPDataRow = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketGoalsCPPColumns.DataTableID.ToString) = DataRow(MarketGoalsColumns.ID.ToString))

            If CPPDataRow IsNot Nothing AndAlso DataRow(MarketGoalsColumns.WasRateImported.ToString) = True Then

                CPP = CPPDataRow(DateColumn)

            Else

                CPP = DataRow(MarketGoalsColumns.CPP.ToString)

            End If

            MarketGoals_GetCPPByDataRowAndDate = CPP

        End Function
        Private Sub MarketGoals_GetGoalDates(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DateCounter As Integer = 1
            Dim GoalDate As Date = Date.MinValue

            MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates = New Hashtable

            For Each GoalDate In GetWorksheetDates(MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet, MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.UseOldCalendarDateCreation)

                MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate) = "Date" & DateCounter

                DateCounter += 1

            Next

        End Sub
        Private Sub MarketGoals_LoadDataEntryRows(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim SelectedWorksheetMarketGoals As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoal) = Nothing
            Dim SelectedWorksheetMarketGoalDates As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalDate) = Nothing
            Dim WorksheetMarketGoal As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoal = Nothing
            Dim WorksheetMarketGoalDate As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalDate = Nothing
            Dim SelectedWorksheetMarketID As Integer = 0

            SelectedWorksheetMarketID = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.ID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                SelectedWorksheetMarketGoals = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Include("Daypart").
                                                                                                                        Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = SelectedWorksheetMarketID).ToList.
                                                                                                                        Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoal(Entity)).ToList

                MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.BeginLoadData()

                For Each WorksheetMarketGoal In SelectedWorksheetMarketGoals.OrderBy(Function(Entity) Entity.RowIndex)

                    SelectedWorksheetMarketGoalDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoalDate.Load(DbContext).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketGoalID = WorksheetMarketGoal.ID).ToList.
                                                                                                                                                    Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalDate(Entity)).ToList

                    DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.NewRow()

                    DataRow(MarketGoalsColumns.WorksheetMarketGoalID.ToString) = WorksheetMarketGoal.ID
                    DataRow(MarketGoalsColumns.Daypart.ToString) = WorksheetMarketGoal.DaypartCode
                    DataRow(MarketGoalsColumns.Length.ToString) = WorksheetMarketGoal.Length
                    DataRow(MarketGoalsColumns.GRP.ToString) = WorksheetMarketGoal.GRP
                    DataRow(MarketGoalsColumns.CPP.ToString) = WorksheetMarketGoal.CPP
                    DataRow(MarketGoalsColumns.Budget.ToString) = WorksheetMarketGoal.BudgetAmount
                    DataRow(MarketGoalsColumns.Percentage.ToString) = WorksheetMarketGoal.BudgetPercentage
                    DataRow(MarketGoalsColumns.WasRateImported.ToString) = WorksheetMarketGoal.WasRateImported

                    For Each WorksheetMarketGoalDate In SelectedWorksheetMarketGoalDates

                        DataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(WorksheetMarketGoalDate.Date)) = WorksheetMarketGoalDate.GRP

                    Next

                    MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Add(DataRow)

                Next

                MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.EndLoadData()

                DbContext.Database.Connection.Close()

            End Using

        End Sub
        Private Sub MarketGoals_CreateDataTableDynamicSchema(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim GoalDate As Date = Date.MinValue

            For Each GoalDate In MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate))

                DataColumn.ExtendedProperties.Add("Date", GoalDate)

                DataColumn.Caption = GoalDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Decimal)
                DataColumn.DefaultValue = 0

            Next

        End Sub
        Private Sub MarketGoals_CreateDataTableDefaultSchema(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing

            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MarketGoalsColumns.ID.ToString)

            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False
            MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}
            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MarketGoalsColumns.WorksheetMarketGoalID.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MarketGoalsColumns.Daypart.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = ""
            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MarketGoalsColumns.Length.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Short)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MarketGoalsColumns.GRP.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MarketGoalsColumns.CPP.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MarketGoalsColumns.Budget.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MarketGoalsColumns.Percentage.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Columns.Add(MarketGoalsColumns.WasRateImported.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Boolean)
            DataColumn.DefaultValue = False

        End Sub
        Private Sub MarketGoals_CreateHiatusDataTableDefaultRows(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim MediaBroadcastWorksheetMarketGoalIDs() As Integer = Nothing
            Dim SelectedWorksheetMarketGoalDates As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalDate) = Nothing
            Dim GoalDate As Date = Date.MinValue
            Dim SelectedWorksheetMarketID As Integer = 0

            If MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                SelectedWorksheetMarketID = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.ID

            End If

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketGoalIDs = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = SelectedWorksheetMarketID).Select(Function(Entity) Entity.ID).ToArray

                SelectedWorksheetMarketGoalDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoalDate.Load(DbContext).Where(Function(Entity) MediaBroadcastWorksheetMarketGoalIDs.Contains(Entity.MediaBroadcastWorksheetMarketGoalID) = True).ToList.
                                                                                                                                                Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalDate(Entity)).ToList

                DbContext.Database.Connection.Close()

            End Using

            MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.NewRow()

            For Each GoalDate In MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                If SelectedWorksheetMarketGoalDates.Any(Function(Entity) Entity.Date = GoalDate AndAlso Entity.IsHiatus = True) Then

                    DataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate)) = True

                Else

                    DataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate)) = False

                End If

            Next

            MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows.Add(DataRow)

            MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.EndLoadData()

            MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.AcceptChanges()

        End Sub
        Private Sub MarketGoals_CreateHiatusDataTableDefaultSchema(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim GoalDate As Date = Date.MinValue

            For Each GoalDate In MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Columns.Add(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate), GetType(Boolean))

                DataColumn.ExtendedProperties.Add("Date", GoalDate)

                DataColumn.Caption = GoalDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DefaultValue = False

            Next

        End Sub
        Private Sub MarketGoals_CreateCPPDataTableDefaultRows(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim DataTableDataRow As System.Data.DataRow = Nothing
            Dim MediaBroadcastWorksheetMarketGoalIDs() As Integer = Nothing
            Dim SelectedWorksheetMarketGoalDates As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalDate) = Nothing
            Dim GoalDate As Date = Date.MinValue
            Dim SelectedWorksheetMarketID As Integer = 0
            Dim MediaBroadcastWorksheetMarketGoalDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate = Nothing

            If MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                SelectedWorksheetMarketID = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.ID

            End If

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.BeginLoadData()

                For Each MediaBroadcastWorksheetMarketGoal In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = SelectedWorksheetMarketID).ToList

                    DataRow = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.NewRow()

                    DataTableDataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketGoalsColumns.WorksheetMarketGoalID.ToString) = MediaBroadcastWorksheetMarketGoal.ID)

                    If DataTableDataRow IsNot Nothing Then

                        DataRow(MarketGoalsCPPColumns.DataTableID.ToString) = DataTableDataRow(MarketGoalsColumns.ID.ToString)

                    End If

                    For Each GoalDate In MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                        MediaBroadcastWorksheetMarketGoalDate = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoalDate.LoadByMediaBroadcastWorksheetMarketGoalID(DbContext, MediaBroadcastWorksheetMarketGoal.ID).SingleOrDefault(Function(Entity) Entity.Date = GoalDate)

                        If MediaBroadcastWorksheetMarketGoalDate IsNot Nothing Then

                            DataRow(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate)) = MediaBroadcastWorksheetMarketGoalDate.Rate

                        End If

                    Next

                    MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows.Add(DataRow)

                Next

                MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.EndLoadData()

            End Using

        End Sub
        Private Sub MarketGoals_CreateCPPDataTableDefaultSchema(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim GoalDate As Date = Date.MinValue

            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Columns.Add(MarketGoalsCPPColumns.ID.ToString)

            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False
            MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}
            '=============
            DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Columns.Add(MarketGoalsCPPColumns.DataTableID.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0

            For Each GoalDate In MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                DataColumn = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Columns.Add(MediaBroadcastWorksheetMarketGoalsViewModel.GoalDates(GoalDate), GetType(Decimal))

                DataColumn.ExtendedProperties.Add("Date", GoalDate)

                DataColumn.Caption = GoalDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DefaultValue = 0

            Next

        End Sub
        Private Function MarketGoals_HasMarketAndCampaignInMediaPlan(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel) As Boolean

            'objects
            Dim HasMarketInMediaPlan As Boolean = False
            Dim MediaPlanID As Integer = 0
            Dim MediaPlanDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaPlanDetail) = Nothing
            Dim SalesClassType As String = String.Empty
            Dim MediaPlan As AdvantageFramework.MediaPlanning.Classes.MediaPlan = Nothing
            Dim MediaPlanEstimate As AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate = Nothing
            Dim MarketMPDLevel As AdvantageFramework.Database.Entities.MediaPlanDetailLevel = Nothing
            Dim WorksheetMarketCode As String = String.Empty
            Dim WorksheetIsCable As Boolean = False

            MediaPlanID = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaPlanID.GetValueOrDefault(0)

            If MediaPlanID > 0 AndAlso MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                WorksheetMarketCode = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.MarketCode
                WorksheetIsCable = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket.IsCable

                If MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    SalesClassType = DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.T.ToString


                ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    SalesClassType = DTO.Media.MediaBroadcastWorksheet.MediaTypeCodes.R.ToString

                    'ElseIf MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                    '	SalesClassType = "T"

                End If

                MediaPlan = New AdvantageFramework.MediaPlanning.Classes.MediaPlan(Me.Session.ConnectionString, Me.Session.UserCode, MediaPlanID)

                MediaPlan.DbContext.Database.Connection.Open()

                For Each MediaPlanEstimate In MediaPlan.MediaPlanEstimates.Values.OfType(Of AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate).Where(Function(Entity) Entity.SalesClassType = SalesClassType AndAlso Entity.IsCable = WorksheetIsCable).ToList

                    If MarketGoals_HasMarketAndCampaignInMediaEstimate(MediaBroadcastWorksheetMarketGoalsViewModel, MediaPlanEstimate,
                                                                       WorksheetMarketCode, MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.CampaignID.GetValueOrDefault(0)) Then

                        HasMarketInMediaPlan = True
                        Exit For

                    End If

                Next

            End If

            MarketGoals_HasMarketAndCampaignInMediaPlan = HasMarketInMediaPlan

        End Function
        Private Function MarketGoals_HasMarketAndCampaignInMediaEstimate(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                                                         MediaPlanEstimate As AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate, WorksheetMarketCode As String, CampaignID As Integer) As Boolean

            'objects
            Dim HasMarketAndCampaignInMediaEstimate As Boolean = False
            Dim HasMarketInMediaEstimate As Boolean = False
            Dim HasCampaignInMediaEstimate As Boolean = False
            Dim MarketMPDLevel As AdvantageFramework.Database.Entities.MediaPlanDetailLevel = Nothing
            Dim CampaignMPDLevel As AdvantageFramework.Database.Entities.MediaPlanDetailLevel = Nothing

            If MediaPlanEstimate IsNot Nothing Then

                If (MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast AndAlso MediaPlanEstimate.IsCalendarMonth = False) OrElse
                            (MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Calendar AndAlso MediaPlanEstimate.IsCalendarMonth = True) Then

                    If MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Market).Any Then

                        MarketMPDLevel = MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Market).OrderBy(Function(Entity) Entity.OrderNumber).FirstOrDefault

                    End If

                    If MarketMPDLevel IsNot Nothing Then

                        For Each MediaPlanDetailLevelLine In MarketMPDLevel.MediaPlanDetailLevelLines

                            If MediaPlanDetailLevelLine.MediaPlanDetailLevelLineTags.Any(Function(Entity) Entity.MarketCode = WorksheetMarketCode) Then

                                HasMarketInMediaEstimate = True
                                Exit For

                            End If

                        Next

                    End If

                    If HasMarketInMediaEstimate Then

                        If CampaignID > 0 Then

                            If MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Campaign).Any Then

                                CampaignMPDLevel = MediaPlanEstimate.MediaPlanDetailLevels.Where(Function(Entity) Entity.TagType = AdvantageFramework.MediaPlanning.TagTypes.Campaign).OrderBy(Function(Entity) Entity.OrderNumber).FirstOrDefault

                                If CampaignMPDLevel IsNot Nothing Then

                                    For Each MediaPlanDetailLevelLine In CampaignMPDLevel.MediaPlanDetailLevelLines

                                        If MediaPlanDetailLevelLine.MediaPlanDetailLevelLineTags.Any(Function(Entity) Entity.CampaignID.GetValueOrDefault(0) = CampaignID) Then

                                            HasCampaignInMediaEstimate = True
                                            Exit For

                                        End If

                                    Next

                                End If

                            ElseIf MediaPlanEstimate.CampaignID.HasValue Then

                                If MediaPlanEstimate.CampaignID.Value = CampaignID Then

                                    HasCampaignInMediaEstimate = True

                                End If

                            Else

                                HasCampaignInMediaEstimate = True

                            End If

                        Else

                            HasCampaignInMediaEstimate = True

                        End If

                    End If

                    HasMarketAndCampaignInMediaEstimate = (HasMarketInMediaEstimate AndAlso HasCampaignInMediaEstimate)

                End If

            End If

            MarketGoals_HasMarketAndCampaignInMediaEstimate = HasMarketAndCampaignInMediaEstimate

        End Function
        Private Sub MarketGoals_CheckForMediaPlanImport(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            MediaBroadcastWorksheetMarketGoalsViewModel.HasBeenImportFromMediaPlan = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Any(Function(DR) CBool(DR(MarketGoalsColumns.WasRateImported.ToString)) = True)

        End Sub
        Public Function MarketGoals_LoadMarketSelection(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel) As IEnumerable

            MarketGoals_LoadMarketSelection = LoadMarketSelection(MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType, MediaBroadcastWorksheetMarketGoalsViewModel.WorksheetMarkets)

        End Function
        Public Function MarketGoals_LoadWorksheetFullName(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel) As String

            MarketGoals_LoadWorksheetFullName = LoadWorksheetFullName(MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet.MediaType, MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet, MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket)

        End Function

#End Region

#Region "  Market Goals Copy To "

        Public Function MarketGoalsCopyTo_Load(MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyToViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketGoalsCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyToViewModel = Nothing

            MediaBroadcastWorksheetMarketGoalsCopyToViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyToViewModel

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketGoalsCopyToViewModel.Worksheet = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet

                MediaBroadcastWorksheetMarketGoalsCopyToViewModel.CopyFromWorksheetMarket = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket

                MediaBroadcastWorksheetMarketGoalsCopyToViewModel.CopyToMarkets = MediaBroadcastWorksheetMarketGoalsViewModel.WorksheetMarkets.Where(Function(Entity) Entity.ID <> MediaBroadcastWorksheetMarketGoalsCopyToViewModel.CopyFromWorksheetMarket.ID).
                                                                                                                                               Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalsCopy(Entity)).ToList

            End Using

            MarketGoalsCopyTo_Load = MediaBroadcastWorksheetMarketGoalsCopyToViewModel

        End Function
        Public Sub MarketGoalsCopyTo_SelectDeselectAll(ByRef MediaBroadcastWorksheetMarketGoalsCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyToViewModel,
                                                       SelectAll As Boolean)

            For Each CopyToMarket In MediaBroadcastWorksheetMarketGoalsCopyToViewModel.CopyToMarkets

                CopyToMarket.Selected = SelectAll

            Next

        End Sub
        Public Function MarketGoalsCopyTo_GetRepositoryMarketRadioEthnicity(MediaBroadcastWorksheetMarketGoalsCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyToViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), False)

            MarketGoalsCopyTo_GetRepositoryMarketRadioEthnicity = DataTable

        End Function
        Public Function MarketGoalsCopyTo_CheckAllSelectedMarkets(ByRef MediaBroadcastWorksheetMarketGoalsCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyToViewModel,
                                                                  ByRef Message As String) As Boolean

            'objects
            Dim AllMarketsClear As Boolean = True

            Message = "Goals already exist in these market(s) and will be overidden:" & System.Environment.NewLine & System.Environment.NewLine

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                For Each CopyToMarket In MediaBroadcastWorksheetMarketGoalsCopyToViewModel.CopyToMarkets.Where(Function(Entity) Entity.Selected = True)

                    If AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.LoadByMediaBroadcastWorksheetMarketID(DbContext, CopyToMarket.MediaBroadcastWorksheetMarketID).Any Then

                        AllMarketsClear = False
                        Message &= CopyToMarket.MarketDescription & System.Environment.NewLine

                    End If

                Next

            End Using

            Message &= System.Environment.NewLine & System.Environment.NewLine & "Would you like to continue?"

            MarketGoalsCopyTo_CheckAllSelectedMarkets = AllMarketsClear

        End Function
        Public Sub MarketGoalsCopyTo_CopyTo(ByRef MediaBroadcastWorksheetMarketGoalsCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyToViewModel,
                                            ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NewDataRow As System.Data.DataRow = Nothing
            Dim CPPDataRow As System.Data.DataRow = Nothing
            Dim CopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel = Nothing

            For Each CopyToMarket In MediaBroadcastWorksheetMarketGoalsCopyToViewModel.CopyToMarkets.Where(Function(Entity) Entity.Selected = True)

                CopyToViewModel = MarketGoals_Load(MediaBroadcastWorksheetMarketGoalsViewModel.MediaBroadcastWorksheetID, CopyToMarket.MediaBroadcastWorksheetMarketID)

                CopyToViewModel.DataTable.BeginLoadData()
                CopyToViewModel.CPPDataTable.BeginLoadData()

                CopyToViewModel.DataTable.Clear()
                CopyToViewModel.CPPDataTable.Clear()

                For Each DataRow In MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).ToList

                    NewDataRow = CopyToViewModel.DataTable.Rows.Add(DataRow.ItemArray)

                    NewDataRow(MarketGoalsColumns.ID.ToString) = CopyToViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Max(Function(DR) DR(MarketGoalsColumns.ID.ToString)) + 1
                    NewDataRow(MarketGoalsColumns.WorksheetMarketGoalID.ToString) = 0
                    NewDataRow(MarketGoalsColumns.WasRateImported.ToString) = False

                    CPPDataRow = CopyToViewModel.CPPDataTable.NewRow()

                    CPPDataRow(MarketGoalsCPPColumns.DataTableID.ToString) = NewDataRow(MarketGoalsColumns.ID.ToString)

                    CopyToViewModel.CPPDataTable.Rows.Add(CPPDataRow)

                Next

                For Each DataColumn In MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                    If CopyToViewModel.HiatusDataTable.Columns.Contains(DataColumn.ColumnName) Then

                        CopyToViewModel.HiatusDataTable.Rows(0)(DataColumn.ColumnName) = MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(DataColumn.ColumnName)

                    End If

                Next

                CopyToViewModel.CPPDataTable.EndLoadData()
                CopyToViewModel.DataTable.EndLoadData()

                CopyToViewModel.TotalGRPs = MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs
                CopyToViewModel.TotalBudget = MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget

                MarketGoals_Save(CopyToViewModel)

            Next

        End Sub

#End Region

#Region "  Market Goals Copy From "

        Public Function MarketGoalsCopyFrom_Load(MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyFromViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketGoalsCopyFromViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyFromViewModel = Nothing

            MediaBroadcastWorksheetMarketGoalsCopyFromViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyFromViewModel

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketGoalsCopyFromViewModel.Worksheet = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet

                MediaBroadcastWorksheetMarketGoalsCopyFromViewModel.CopyToWorksheetMarket = MediaBroadcastWorksheetMarketGoalsViewModel.SelectedWorksheetMarket

                MediaBroadcastWorksheetMarketGoalsCopyFromViewModel.CopyFromMarkets = MediaBroadcastWorksheetMarketGoalsViewModel.WorksheetMarkets.Where(Function(Entity) Entity.ID <> MediaBroadcastWorksheetMarketGoalsCopyFromViewModel.CopyToWorksheetMarket.ID).
                                                                                                                                                   Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalsCopy(Entity)).ToList

            End Using

            MarketGoalsCopyFrom_Load = MediaBroadcastWorksheetMarketGoalsCopyFromViewModel

        End Function
        Public Sub MarketGoalsCopyFrom_SelectDeselectAll(ByRef MediaBroadcastWorksheetMarketGoalsCopyFromViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyFromViewModel,
                                                       SelectAll As Boolean)

            For Each CopyFromMarket In MediaBroadcastWorksheetMarketGoalsCopyFromViewModel.CopyFromMarkets

                CopyFromMarket.Selected = SelectAll

            Next

        End Sub
        Public Function MarketGoalsCopyFrom_GetRepositoryMarketRadioEthnicity(MediaBroadcastWorksheetMarketGoalsCopyFromViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyFromViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), False)

            MarketGoalsCopyFrom_GetRepositoryMarketRadioEthnicity = DataTable

        End Function
        Public Function MarketGoalsCopyFrom_CheckCurrentMarket(ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                                               ByRef Message As String) As Boolean

            'objects
            Dim MarketClear As Boolean = True

            Message = "Goals already exist for this market and will be overidden, would you like to continue?" & System.Environment.NewLine & System.Environment.NewLine

            If MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Count > 0 Then

                MarketClear = False

            End If

            MarketGoalsCopyFrom_CheckCurrentMarket = MarketClear

        End Function
        Public Sub MarketGoalsCopyFrom_CopyFrom(ByRef MediaBroadcastWorksheetMarketGoalsCopyFromViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsCopyFromViewModel,
                                                ByRef MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NewDataRow As System.Data.DataRow = Nothing
            Dim CPPDataRow As System.Data.DataRow = Nothing
            Dim CopyFromViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel = Nothing
            Dim CopyFromMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalsCopy = Nothing

            CopyFromMarket = MediaBroadcastWorksheetMarketGoalsCopyFromViewModel.CopyFromMarkets.SingleOrDefault(Function(Entity) Entity.Selected = True)

            If CopyFromMarket IsNot Nothing Then

                CopyFromViewModel = MarketGoals_Load(MediaBroadcastWorksheetMarketGoalsViewModel.MediaBroadcastWorksheetID, CopyFromMarket.MediaBroadcastWorksheetMarketID)

                MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.BeginLoadData()
                MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.BeginLoadData()
                MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.BeginLoadData()

                MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Clear()
                MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Clear()

                For Each DataRow In CopyFromViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).ToList

                    NewDataRow = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.Add(DataRow.ItemArray)

                    NewDataRow(MarketGoalsColumns.ID.ToString) = MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Max(Function(DR) DR(MarketGoalsColumns.ID.ToString)) + 1
                    NewDataRow(MarketGoalsColumns.WorksheetMarketGoalID.ToString) = 0

                    CPPDataRow = MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.NewRow()

                    CPPDataRow(MarketGoalsCPPColumns.DataTableID.ToString) = NewDataRow(MarketGoalsColumns.ID.ToString)

                    MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.Rows.Add(CPPDataRow)

                Next

                For Each DataColumn In CopyFromViewModel.HiatusDataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                    If MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Columns.Contains(DataColumn.ColumnName) Then

                        MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.Rows(0)(DataColumn.ColumnName) = CopyFromViewModel.HiatusDataTable.Rows(0)(DataColumn.ColumnName)

                    End If

                Next

                MediaBroadcastWorksheetMarketGoalsViewModel.HiatusDataTable.EndLoadData()
                MediaBroadcastWorksheetMarketGoalsViewModel.CPPDataTable.EndLoadData()
                MediaBroadcastWorksheetMarketGoalsViewModel.DataTable.EndLoadData()

                MediaBroadcastWorksheetMarketGoalsViewModel.TotalGRPs = CopyFromViewModel.TotalGRPs
                MediaBroadcastWorksheetMarketGoalsViewModel.TotalBudget = CopyFromViewModel.TotalBudget

            End If

        End Sub

#End Region

#Region "  Market Goals Select Media Plan Estimate "

        Public Function MarketGoalsSelectMediaPlanEstimate_Load(MediaBroadcastWorksheetMarketGoalsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsViewModel,
                                                                MediaPlanEstimates As Generic.List(Of AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate)) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel = Nothing

            MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel.Worksheet = MediaBroadcastWorksheetMarketGoalsViewModel.Worksheet

                MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel.WorksheetMarketGoalsMediaPlanEstimates = MediaPlanEstimates.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalsMediaPlanEstimate(Entity)).ToList

            End Using

            MarketGoalsSelectMediaPlanEstimate_Load = MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel

        End Function
        Public Function MarketGoalsSelectMediaPlanEstimate_Select(ByRef MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel,
                                                                  MediaPlanEstimates As Generic.List(Of AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate)) As AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate

            'objects
            Dim MediaPlanEstimate As AdvantageFramework.MediaPlanning.Classes.MediaPlanEstimate = Nothing
            Dim WorksheetMarketGoalsMediaPlanEstimate As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketGoalsMediaPlanEstimate = Nothing

            WorksheetMarketGoalsMediaPlanEstimate = MediaBroadcastWorksheetMarketGoalsSelectMediaPlanEstimateViewModel.WorksheetMarketGoalsMediaPlanEstimates.SingleOrDefault(Function(Entity) Entity.Selected = True)

            If WorksheetMarketGoalsMediaPlanEstimate IsNot Nothing Then

                Try

                    MediaPlanEstimate = MediaPlanEstimates.SingleOrDefault(Function(Entity) Entity.ID = WorksheetMarketGoalsMediaPlanEstimate.EstimateID)

                Catch ex As Exception
                    MediaPlanEstimate = Nothing
                End Try

            End If

            MarketGoalsSelectMediaPlanEstimate_Select = MediaPlanEstimate

        End Function

#End Region

#Region "  Market Details "

        Public Function MarketDetails_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel = Nothing
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim SelectedMediaBroadcastWorksheetMarketID As Integer = 0
            Dim DataTable As System.Data.DataTable = Nothing
            Dim GridAdvantage As AdvantageFramework.Database.Entities.GridAdvantage = Nothing
            Dim MaxRevisionNumber As Integer = 0
            Dim MediaBroadcastWorksheetPrintOptions As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetPrintOptions = Nothing
            Dim SubmarketMarketCodes() As String = Nothing
            Dim UniverseYear As Integer = 0
            Dim CanadaUniverses As Generic.List(Of AdvantageFramework.Database.Entities.CanadaUniverse) = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel

            MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketDetailsViewModel.IsNielsenSetup = Me.Session.IsNielsenSetup

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    'MediaBroadcastWorksheetMarketDetailsViewModel.Vendors = AdvantageFramework.Database.Procedures.Vendor.Load(DbContext).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Vendor(Entity)).ToList

                    MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                             Include("Division").
                                                                                                                                                             Include("Product").
                                                                                                                                                             Include("SalesClass").
                                                                                                                                                             Include("Campaign").
                                                                                                                                                             Include("MediaPlan").
                                                                                                                                                             Include("PrimaryMediaDemographic").
                                                                                                                                                             Include("Country").Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                             Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.Dayparts = AdvantageFramework.Database.Procedures.Daypart.LoadAllActive(DbContext).Where(Function(Entity) Entity.DaypartTypeID = 1).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Daypart(Entity)).ToList

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.Dayparts = AdvantageFramework.Database.Procedures.Daypart.LoadAllActive(DbContext).Where(Function(Entity) Entity.DaypartTypeID = 2).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Daypart(Entity)).ToList

                        'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                        '	MediaBroadcastWorksheetMarketDetailsViewModel.Dayparts = AdvantageFramework.Database.Procedures.Daypart.LoadAllActive(DbContext).Where(Function(Entity) Entity.DaypartTypeID = 1).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Daypart(Entity)).ToList

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                        If Me.Session.IsNielsenSetup Then

                            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                NielsenDbContext.Database.Connection.Open()

                                If AdvantageFramework.Nielsen.Database.Procedures.NCCTVCablenet.Load(NielsenDbContext).Any Then

                                    MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations = AdvantageFramework.Nielsen.Database.Procedures.NCCTVCablenet.Load(NielsenDbContext).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CableNetworkStation(Entity, False)).ToList

                                Else

                                    MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations = AdvantageFramework.Database.Procedures.CableNetworkStation.Load(DbContext).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CableNetworkStation(Entity)).ToList

                                End If

                            End Using

                        Else

                            MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations = AdvantageFramework.Database.Procedures.CableNetworkStation.Load(DbContext).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CableNetworkStation(Entity)).ToList

                        End If

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore AndAlso Me.Session.IsComscoreSetup Then

                        If Me.Session.IsNielsenSetup Then

                            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                NielsenDbContext.Database.Connection.Open()

                                If AdvantageFramework.Nielsen.Database.Procedures.NCCTVCablenet.Load(NielsenDbContext).Any Then

                                    MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations = AdvantageFramework.Nielsen.Database.Procedures.NCCTVCablenet.LoadWithComscoreStationCode(NielsenDbContext).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CableNetworkStation(Entity, True)).ToList

                                Else

                                    MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CableNetworkStation)

                                End If

                            End Using

                        Else

                            MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CableNetworkStation)

                        End If
                        'old
                        'MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadCableNetworks(DbContext).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CableNetworkStation(Entity)).ToList

                    End If

                    GridAdvantage = AdvantageFramework.Database.Procedures.GridAdvantage.LoadByGridTypeAndUserCodeAndGridSubtype(DataContext, Database.Entities.GridAdvantageType.MediaBroadcastWorksheet, Me.Session.UserCode, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType)

                    If GridAdvantage IsNot Nothing Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.GridAdvantage = New DTO.GridAdvantage(GridAdvantage)

                    Else

                        MediaBroadcastWorksheetMarketDetailsViewModel.GridAdvantage = New DTO.GridAdvantage

                        MediaBroadcastWorksheetMarketDetailsViewModel.GridAdvantage.UserCode = Me.Session.UserCode
                        MediaBroadcastWorksheetMarketDetailsViewModel.GridAdvantage.GridType = Database.Entities.GridAdvantageType.MediaBroadcastWorksheet
                        MediaBroadcastWorksheetMarketDetailsViewModel.GridAdvantage.GridSubtype = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType

                    End If

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                          Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                          Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).ToList

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetSecondaryDemo.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.ID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetSecondaryDemo(Entity)).ToList

                    If MediaBroadcastWorksheetMarketID = 0 Then

                        If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets.Count > 0 Then

                            SelectedMediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets.FirstOrDefault.ID

                        End If

                    Else

                        SelectedMediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

                    End If

                    If SelectedMediaBroadcastWorksheetMarketID > 0 Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets.SingleOrDefault(Function(Entity) Entity.ID = SelectedMediaBroadcastWorksheetMarketID)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID.HasValue Then

                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos.SingleOrDefault(Function(Entity) Entity.MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID.Value)

                        End If

                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketShowVendorDemo = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ShowVendorDemos

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID).Select(Function(Entity) Entity.RevisionNumber).Distinct.ToList

                        If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers.Count > 0 Then

                            MaxRevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers.Max

                        Else

                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers.Add(0)

                            MaxRevisionNumber = 0

                        End If

                    End If

                    MediaBroadcastWorksheetPrintOptions = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetPrintOptions.LoadByUserCode(DbContext, Me.Session.UserCode)

                    If MediaBroadcastWorksheetPrintOptions IsNot Nothing Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetPrintOptions = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetPrintOptions(MediaBroadcastWorksheetPrintOptions)

                    Else

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetPrintOptions = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetPrintOptions(Me.Session.UserCode)

                    End If

                    MediaBroadcastWorksheetMarketDetailsViewModel.UserHasAccessToMediaTraffic = AdvantageFramework.Security.DoesUserHaveAccessToModule(Me.Session, AdvantageFramework.Security.Modules.Media_MediaBroadcastWorksheet_Actions_MediaTraffic)

                    MediaBroadcastWorksheetMarketDetailsViewModel.HideHiatusDates = AdvantageFramework.Security.LoadUserSetting(Me.Session, Me.Session.User.ID, AdvantageFramework.Security.UserSettings.MediaBroadcastWorksheet_HideHiatusDates)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets = DbContext.MediaBroadcastWorksheetMarketSubmarkets.Include("Market").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket(Entity)).ToList

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.OrderBy(Function(Entity) Entity.Order).ToList

                        MarketDetails_LoadWorksheetMarketDetailSubmarketDemoColumnNames(MediaBroadcastWorksheetMarketDetailsViewModel)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.IsCanadianWorksheet Then

                            SubmarketMarketCodes = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.Select(Function(Entity) Entity.MarketCode).Distinct.ToArray
                            UniverseYear = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate.Year

                            CanadaUniverses = DbContext.CanadaUniverses.Where(Function(Entity) Entity.Year = UniverseYear AndAlso SubmarketMarketCodes.Contains(Entity.MarketCode)).ToList

                            MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverses = CanadaUniverses.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverse(Entity)).ToList

                        Else

                            MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverses = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverse)

                        End If

                    Else

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket)
                        MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverses = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverse)

                    End If

                    DbContext.Database.Connection.Close()

                End Using

            End Using

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                MarketDetails_LoadWorksheetMarketNielsenTVBooks(MediaBroadcastWorksheetMarketDetailsViewModel)

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                MarketDetails_LoadWorksheetMarketNielsenRadioPeriods(MediaBroadcastWorksheetMarketDetailsViewModel)

                'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then


            End If

            MarketDetails_GetDetailDates(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.DateSelections = New Generic.List(Of AdvantageFramework.DTO.ComboBoxItem)

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DDate) DDate)

                MediaBroadcastWorksheetMarketDetailsViewModel.DateSelections.Add(New DTO.ComboBoxItem(DetailDate.ToShortDateString, MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)))

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.StartDateSelection = MediaBroadcastWorksheetMarketDetailsViewModel.DateSelections(0).Value

            MediaBroadcastWorksheetMarketDetailsViewModel.EndDateSelection = MediaBroadcastWorksheetMarketDetailsViewModel.DateSelections.Last.Value

            MarketDetails_CreateDataTableSchema(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataView.Sort = "VendorCode"

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                MarketDetails_LoadDataEntryRows(MediaBroadcastWorksheetMarketDetailsViewModel, MaxRevisionNumber)
                MarketDetails_LoadOrderedLineNumbers(MediaBroadcastWorksheetMarketDetailsViewModel)
                MarketDetails_RefreshMakegoodStatus(MediaBroadcastWorksheetMarketDetailsViewModel)

            End If

            MarketDetails_CreateHiatusDataTableDefaultSchema(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_CreateHiatusDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, MaxRevisionNumber)

            MarketDetails_CreateRowTotalsDataTableDefaultSchema(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_CreateRowTotalsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_CreateSummaryDataTablesDefaultSchema(MediaBroadcastWorksheetMarketDetailsViewModel)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen OrElse
                        MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                    MarketDetails_LoadNielsenTVBooks(MediaBroadcastWorksheetMarketDetailsViewModel)
                    MarketDetails_LoadShareBooks(MediaBroadcastWorksheetMarketDetailsViewModel)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                        MarketDetails_LoadHUTPUTBooks(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID)

                    Else

                        MarketDetails_LoadHUTPUTBooks(MediaBroadcastWorksheetMarketDetailsViewModel, Nothing)

                    End If

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                    'marketdetails_get

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                MarketDetails_LoadNielsenRadioPeriods(MediaBroadcastWorksheetMarketDetailsViewModel)

                'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then



            End If

            MarketDetails_CreateMeasurementTrendsDataTableSchema(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_CreateMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, True)

            MarketDetails_LoadStations(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_ClearChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_DeleteEnabled = False
            MediaBroadcastWorksheetMarketDetailsViewModel.CreateOrdersEnabled = MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber
            MediaBroadcastWorksheetMarketDetailsViewModel.CreateOrders_SelectedLinesOnlyEnabled = False
            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_CopyEnabled = False
            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_AutoFillEnabled = False

            MarketDetails_Load = MediaBroadcastWorksheetMarketDetailsViewModel

        End Function
        Public Sub MarketDetails_Save(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim Daypart As AdvantageFramework.DTO.Daypart = Nothing
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim MediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim WorksheetMarketDetailID As Integer = 0
            Dim VendorCodes() As String = Nothing
            Dim WorksheetMarketDetailRows As Hashtable = Nothing
            Dim GridAdvantage As AdvantageFramework.Database.Entities.GridAdvantage = Nothing
            Dim WorksheetMarketID As Integer = 0
            Dim RowID As Integer = 0
            Dim RevisionNumber As Integer = -1
            Dim OrderNumbers As Generic.List(Of Integer) = Nothing
            Dim MakegoodDataRow As System.Data.DataRow = Nothing
            Dim MediaBroadcastWorksheetMarketDetailSubmarketDemo As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailSubmarketDemo = Nothing
            Dim WorksheetMarketDetailSubmarketDemos As Hashtable = Nothing
            Dim WorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing
            Dim OriginalMediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing
            Dim VendorCode As String = Nothing
            Dim LineNumber As Integer = 0
            Dim MakegoodNumber As Integer = 0

            WorksheetMarketDetailRows = New Hashtable
            WorksheetMarketDetailSubmarketDemos = New Hashtable

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                WorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID
                RevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber

                MediaBroadcastWorksheetMarket = DbContext.MediaBroadcastWorksheetMarkets.Find(WorksheetMarketID)

                'DbContext.UpdateObject(MediaBroadcastWorksheetMarket)

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID = Nothing

                End If

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ShowVendorDemos = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketShowVendorDemo

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SaveToEntity(MediaBroadcastWorksheetMarket)

                MediaBroadcastWorksheetMarket.ModifiedByUserCode = Me.Session.UserCode
                MediaBroadcastWorksheetMarket.ModifiedDate = Now

                For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                    MediaBroadcastWorksheetMarketDetail = Nothing
                    OrderNumbers = Nothing

                    If DataRow.RowState <> System.Data.DataRowState.Unchanged Then

                        OrderNumbers = New Generic.List(Of Integer)

                        WorksheetMarketDetailID = DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString)

                        If WorksheetMarketDetailID > 0 Then

                            MediaBroadcastWorksheetMarketDetail = DbContext.MediaBroadcastWorksheetMarketDetails.Find(WorksheetMarketDetailID)

                        End If

                        If MediaBroadcastWorksheetMarketDetail Is Nothing Then

                            MediaBroadcastWorksheetMarketDetail = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail

                            MediaBroadcastWorksheetMarketDetail.CreatedByUserCode = Me.Session.UserCode
                            MediaBroadcastWorksheetMarketDetail.CreatedDate = Now

                            DbContext.MediaBroadcastWorksheetMarketDetails.Add(MediaBroadcastWorksheetMarketDetail)

                        Else

                            MediaBroadcastWorksheetMarketDetail.ModifiedByUserCode = Me.Session.UserCode
                            MediaBroadcastWorksheetMarketDetail.ModifiedDate = Now

                            'DbContext.UpdateObject(MediaBroadcastWorksheetMarketDetail)

                        End If

                        MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketID = WorksheetMarketID
                        MediaBroadcastWorksheetMarketDetail.OnHold = DataRow(MarketDetailsColumns.OnHold.ToString)
                        MediaBroadcastWorksheetMarketDetail.LineNumber = DataRow(MarketDetailsColumns.LineNumber.ToString)
                        MediaBroadcastWorksheetMarketDetail.MakegoodNumber = DataRow(MarketDetailsColumns.MakegoodNumber.ToString)
                        MediaBroadcastWorksheetMarketDetail.MakegoodDate = DataRow(MarketDetailsColumns.MakegoodDate.ToString)
                        MediaBroadcastWorksheetMarketDetail.MakegoodSpots = DataRow(MarketDetailsColumns.MakegoodSpots.ToString)
                        MediaBroadcastWorksheetMarketDetail.MadegoodNumber = DataRow(MarketDetailsColumns.MadegoodNumber.ToString)
                        MediaBroadcastWorksheetMarketDetail.RevisionNumber = DataRow(MarketDetailsColumns.RevisionNumber.ToString)

                        Daypart = MediaBroadcastWorksheetMarketDetailsViewModel.Dayparts.SingleOrDefault(Function(Entity) Entity.Code = DataRow(MarketDetailsColumns.Daypart.ToString))

                        If Daypart IsNot Nothing Then

                            MediaBroadcastWorksheetMarketDetail.DaypartID = Daypart.ID

                        Else

                            MediaBroadcastWorksheetMarketDetail.DaypartID = Nothing

                        End If

                        MediaBroadcastWorksheetMarketDetail.VendorCode = If(DataRow(MarketDetailsColumns.VendorCode.ToString) = String.Empty, Nothing, DataRow(MarketDetailsColumns.VendorCode.ToString))
                        MediaBroadcastWorksheetMarketDetail.CableNetworkStationCode = DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)
                        MediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode = If(IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) OrElse DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = 0, Nothing, DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString))
                        MediaBroadcastWorksheetMarketDetail.BookProgram = DataRow(MarketDetailsColumns.BookProgram.ToString)
                        MediaBroadcastWorksheetMarketDetail.Program = DataRow(MarketDetailsColumns.Program.ToString)
                        MediaBroadcastWorksheetMarketDetail.Product = DataRow(MarketDetailsColumns.Product.ToString)
                        MediaBroadcastWorksheetMarketDetail.Piggyback = DataRow(MarketDetailsColumns.Piggyback.ToString)
                        MediaBroadcastWorksheetMarketDetail.Length = DataRow(MarketDetailsColumns.Length.ToString)

                        DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                        DaysAndTime.SaveToEntity(MediaBroadcastWorksheetMarketDetail)

                        MediaBroadcastWorksheetMarketDetail.StartTime = If(DataRow(MarketDetailsColumns.StartTime.ToString) Is DBNull.Value OrElse String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.StartTime.ToString)), String.Empty, CDate(DataRow(MarketDetailsColumns.StartTime.ToString)).ToString("hh:mm tt"))
                        MediaBroadcastWorksheetMarketDetail.EndTime = If(DataRow(MarketDetailsColumns.EndTime.ToString) Is DBNull.Value OrElse String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.EndTime.ToString)), String.Empty, CDate(DataRow(MarketDetailsColumns.EndTime.ToString)).ToString("hh:mm tt"))
                        MediaBroadcastWorksheetMarketDetail.Comments = DataRow(MarketDetailsColumns.Comments.ToString)
                        MediaBroadcastWorksheetMarketDetail.Bookend = DataRow(MarketDetailsColumns.Bookend.ToString)
                        MediaBroadcastWorksheetMarketDetail.ValueAdded = DataRow(MarketDetailsColumns.ValueAdded.ToString)
                        MediaBroadcastWorksheetMarketDetail.DefaultRate = DataRow(MarketDetailsColumns.DefaultRate.ToString)
                        MediaBroadcastWorksheetMarketDetail.OrderComments = DataRow(MarketDetailsColumns.OrderComments.ToString)
                        MediaBroadcastWorksheetMarketDetail.OverridePost = DataRow(MarketDetailsColumns.OverridePost.ToString)
                        MediaBroadcastWorksheetMarketDetail.OverridePostImpressions = DataRow(MarketDetailsColumns.OverridePostImpressions.ToString)
                        MediaBroadcastWorksheetMarketDetail.OverridePostAQH = DataRow(MarketDetailsColumns.OverridePostAQH.ToString)
                        MediaBroadcastWorksheetMarketDetail.RowSource = DataRow(MarketDetailsColumns.RowSource.ToString)

                        MediaBroadcastWorksheetMarketDetail.BookPrimaryRating = DataRow(MarketDetailsColumns.BookPrimaryRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryRating = DataRow(MarketDetailsColumns.PrimaryRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.BookPrimaryShare = DataRow(MarketDetailsColumns.BookPrimaryShare.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryShare = DataRow(MarketDetailsColumns.PrimaryShare.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryHPUT = DataRow(MarketDetailsColumns.PrimaryHPUT.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryGRP = DataRow(MarketDetailsColumns.PrimaryGRP.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryCPP = DataRow(MarketDetailsColumns.PrimaryCPP.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryReach = DataRow(MarketDetailsColumns.PrimaryReach.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryFrequency = DataRow(MarketDetailsColumns.PrimaryFrequency.ToString)
                        MediaBroadcastWorksheetMarketDetail.BookPrimaryImpressions = DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryImpressions = DataRow(MarketDetailsColumns.PrimaryImpressions.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryGrossImpressions = DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryUniverse = DataRow(MarketDetailsColumns.PrimaryUniverse.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeImpressions = DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString)
                        MediaBroadcastWorksheetMarketDetail.BookPrimaryAQHRating = DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryAQHRating = DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.BookPrimaryAQH = DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryAQH = DataRow(MarketDetailsColumns.PrimaryAQH.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryCumeRating = DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryCume = DataRow(MarketDetailsColumns.PrimaryCume.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryCPM = DataRow(MarketDetailsColumns.PrimaryCPM.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryVendorSubmittedRating = DataRow(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryVendorSubmittedShare = DataRow(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString)
                        MediaBroadcastWorksheetMarketDetail.PrimaryVendorSubmittedImpressions = DataRow(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString)

                        MediaBroadcastWorksheetMarketDetail.BookSecondaryRating = DataRow(MarketDetailsColumns.BookSecondaryRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryRating = DataRow(MarketDetailsColumns.SecondaryRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.BookSecondaryShare = DataRow(MarketDetailsColumns.BookSecondaryShare.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryShare = DataRow(MarketDetailsColumns.SecondaryShare.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryHPUT = DataRow(MarketDetailsColumns.SecondaryHPUT.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryGRP = DataRow(MarketDetailsColumns.SecondaryGRP.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryCPP = DataRow(MarketDetailsColumns.SecondaryCPP.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryReach = DataRow(MarketDetailsColumns.SecondaryReach.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryFrequency = DataRow(MarketDetailsColumns.SecondaryFrequency.ToString)
                        MediaBroadcastWorksheetMarketDetail.BookSecondaryImpressions = DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryImpressions = DataRow(MarketDetailsColumns.SecondaryImpressions.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryGrossImpressions = DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryUniverse = DataRow(MarketDetailsColumns.SecondaryUniverse.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryCumeImpressions = DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString)
                        MediaBroadcastWorksheetMarketDetail.BookSecondaryAQHRating = DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryAQHRating = DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.BookSecondaryAQH = DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryAQH = DataRow(MarketDetailsColumns.SecondaryAQH.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryCumeRating = DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryCume = DataRow(MarketDetailsColumns.SecondaryCume.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryCPM = DataRow(MarketDetailsColumns.SecondaryCPM.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryVendorSubmittedRating = DataRow(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryVendorSubmittedShare = DataRow(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString)
                        MediaBroadcastWorksheetMarketDetail.SecondaryVendorSubmittedImpressions = DataRow(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString)

                        WorksheetMarketDetailRows(MediaBroadcastWorksheetMarketDetail) = DataRow

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                            MediaBroadcastWorksheetMarketDetailDate = Nothing

                            If MediaBroadcastWorksheetMarketDetail.ID <> 0 Then

                                MediaBroadcastWorksheetMarketDetailDate = DbContext.MediaBroadcastWorksheetMarketDetailDates.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetail.ID AndAlso Entity.Date = DetailDate)

                            End If

                            If MediaBroadcastWorksheetMarketDetailDate Is Nothing Then

                                MediaBroadcastWorksheetMarketDetailDate = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate

                                DbContext.MediaBroadcastWorksheetMarketDetailDates.Add(MediaBroadcastWorksheetMarketDetailDate)

                                MediaBroadcastWorksheetMarketDetailDate.Date = DetailDate
                                MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

                            Else

                                'DbContext.UpdateObject(MediaBroadcastWorksheetMarketDetailDate)

                            End If

                            MediaBroadcastWorksheetMarketDetailDate.Spots = DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))
                            MediaBroadcastWorksheetMarketDetailDate.Rate = DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate))
                            MediaBroadcastWorksheetMarketDetailDate.IsHiatus = MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))
                            MediaBroadcastWorksheetMarketDetailDate.AllowSpotsToBeEntered = DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(DetailDate))

                            If MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable IsNot Nothing AndAlso DataRow(MarketDetailsColumns.MakegoodNumber.ToString) > 0 Then

                                MakegoodDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Select("VendorCode = '" & DataRow(MarketDetailsColumns.VendorCode.ToString) & "' AND LineNumber = " & DataRow(MarketDetailsColumns.LineNumber.ToString) & " AND MakegoodNumber = " & DataRow(MarketDetailsColumns.MakegoodNumber.ToString)).FirstOrDefault

                                If MakegoodDataRow IsNot Nothing Then

                                    MediaBroadcastWorksheetMarketDetailDate.MakegoodSpots = MakegoodDataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))

                                End If

                            ElseIf WorksheetMarketDetailID = 0 Then

                                VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString)
                                LineNumber = DataRow(MarketDetailsColumns.LineNumber.ToString)
                                MakegoodNumber = DataRow(MarketDetailsColumns.MakegoodNumber.ToString)

                                OriginalMediaBroadcastWorksheetMarketDetailDate = DbContext.MediaBroadcastWorksheetMarketDetailDates.Where(Function(DD) DD.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketID = WorksheetMarketID AndAlso
                                                                                                                                                        DD.MediaBroadcastWorksheetMarketDetail.VendorCode = VendorCode AndAlso
                                                                                                                                                        DD.MediaBroadcastWorksheetMarketDetail.LineNumber = LineNumber AndAlso
                                                                                                                                                        DD.MediaBroadcastWorksheetMarketDetail.MakegoodNumber = MakegoodNumber AndAlso
                                                                                                                                                        DD.MediaBroadcastWorksheetMarketDetail.RevisionNumber = (RevisionNumber - 1) AndAlso
                                                                                                                                                        DD.Date = DetailDate).SingleOrDefault

                                If OriginalMediaBroadcastWorksheetMarketDetailDate IsNot Nothing Then

                                    MediaBroadcastWorksheetMarketDetailDate.MakegoodSpots = OriginalMediaBroadcastWorksheetMarketDetailDate.MakegoodSpots

                                End If

                            End If

                            MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(DetailDate))

                            'If DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified) AndAlso
                            '        MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered) Then

                            '    MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

                            'End If

                            If MediaBroadcastWorksheetMarketDetailDate.OrderNumber.GetValueOrDefault(0) > 0 AndAlso MediaBroadcastWorksheetMarketDetailDate.OrderLineNumber.GetValueOrDefault(0) > 0 Then

                                If OrderNumbers.Contains(MediaBroadcastWorksheetMarketDetailDate.OrderNumber.GetValueOrDefault(0)) = False Then

                                    OrderNumbers.Add(MediaBroadcastWorksheetMarketDetailDate.OrderNumber.GetValueOrDefault(0))

                                End If

                                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                    Try

                                        DbContext.Database.ExecuteSqlCommand(Entity.TransactionalBehavior.DoNotEnsureTransaction, String.Format("UPDATE dbo.TV_DETAIL SET REMARKS = '{0}' WHERE ORDER_NBR = {1} AND LINE_NBR = {2} AND ACTIVE_REV = 1", MediaBroadcastWorksheetMarketDetail.Comments.Replace("'", "''"), MediaBroadcastWorksheetMarketDetailDate.OrderNumber.GetValueOrDefault(0), MediaBroadcastWorksheetMarketDetailDate.OrderLineNumber.GetValueOrDefault(0)))

                                    Catch ex As Exception

                                    End Try

                                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                    Try

                                        DbContext.Database.ExecuteSqlCommand(Entity.TransactionalBehavior.DoNotEnsureTransaction, String.Format("UPDATE dbo.RADIO_DETAIL SET REMARKS = '{0}' WHERE ORDER_NBR = {1} AND LINE_NBR = {2} AND ACTIVE_REV = 1", MediaBroadcastWorksheetMarketDetail.Comments.Replace("'", "''"), MediaBroadcastWorksheetMarketDetailDate.OrderNumber.GetValueOrDefault(0), MediaBroadcastWorksheetMarketDetailDate.OrderLineNumber.GetValueOrDefault(0)))

                                    Catch ex As Exception

                                    End Try

                                End If

                            End If

                            MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetail

                        Next

                        If OrderNumbers IsNot Nothing AndAlso OrderNumbers.Count > 0 Then

                            For Each OrderNumber In OrderNumbers

                                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                    Try

                                        DbContext.Database.ExecuteSqlCommand(Entity.TransactionalBehavior.DoNotEnsureTransaction, String.Format("UPDATE dbo.TV_HDR SET ORDER_COMMENT = '{0}' WHERE ORDER_NBR = {1}", MediaBroadcastWorksheetMarketDetail.OrderComments.Replace("'", "''"), OrderNumber))

                                    Catch ex As Exception

                                    End Try

                                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                    Try

                                        DbContext.Database.ExecuteSqlCommand(Entity.TransactionalBehavior.DoNotEnsureTransaction, String.Format("UPDATE dbo.RADIO_HDR SET ORDER_COMMENT = '{0}' WHERE ORDER_NBR = {1}", MediaBroadcastWorksheetMarketDetail.OrderComments.Replace("'", "''"), OrderNumber))

                                    Catch ex As Exception

                                    End Try

                                End If

                            Next

                        End If

                        If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                            RowID = DataRow(MarketDetailsColumns.ID.ToString)

                            For Each WorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.RowID = RowID).ToList

                                MediaBroadcastWorksheetMarketDetailSubmarketDemo = Nothing

                                If WorksheetMarketDetailSubmarketDemo.ID > 0 Then

                                    MediaBroadcastWorksheetMarketDetailSubmarketDemo = DbContext.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Find(WorksheetMarketDetailSubmarketDemo.ID)

                                End If

                                If MediaBroadcastWorksheetMarketDetailSubmarketDemo Is Nothing Then

                                    MediaBroadcastWorksheetMarketDetailSubmarketDemo = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailSubmarketDemo

                                    MediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID = WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID
                                    MediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaDemographicID = WorksheetMarketDetailSubmarketDemo.MediaDemographicID

                                    DbContext.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Add(MediaBroadcastWorksheetMarketDetailSubmarketDemo)

                                End If

                                MediaBroadcastWorksheetMarketDetailSubmarketDemo.BookRating = WorksheetMarketDetailSubmarketDemo.BookRating
                                MediaBroadcastWorksheetMarketDetailSubmarketDemo.Rating = WorksheetMarketDetailSubmarketDemo.Rating
                                MediaBroadcastWorksheetMarketDetailSubmarketDemo.BookImpressions = 0 'WorksheetMarketDetailSubmarketDemo.BookImpressions
                                MediaBroadcastWorksheetMarketDetailSubmarketDemo.Impressions = 0 'WorksheetMarketDetailSubmarketDemo.Impressions

                                MediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetail

                                WorksheetMarketDetailSubmarketDemos(MediaBroadcastWorksheetMarketDetailSubmarketDemo) = WorksheetMarketDetailSubmarketDemo

                            Next

                        End If

                    End If

                Next

                For Each MediaBroadcastWorksheetMarketDetail In DbContext.MediaBroadcastWorksheetMarketDetails.Include("MediaBroadcastWorksheetMarketDetailDates").Include("MediaRFPAvailLines").Include("MediaBroadcastWorksheetMarketDetailSubmarketDemos").
                                                                                                               Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID AndAlso
                                                                                                                                      Entity.RevisionNumber = RevisionNumber).ToList

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Any(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = MediaBroadcastWorksheetMarketDetail.VendorCode AndAlso
                                                                                                                                    DR(MarketDetailsColumns.LineNumber.ToString) = MediaBroadcastWorksheetMarketDetail.LineNumber AndAlso
                                                                                                                                    DR(MarketDetailsColumns.MakegoodNumber.ToString) = MediaBroadcastWorksheetMarketDetail.MakegoodNumber AndAlso
                                                                                                                                    DR(MarketDetailsColumns.MadegoodNumber.ToString) = MediaBroadcastWorksheetMarketDetail.MadegoodNumber) = False OrElse
                        MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Any(Function(DR) DR(MarketDetailsColumns.WorksheetMarketDetailID.ToString) = MediaBroadcastWorksheetMarketDetail.ID) = False Then

                        For Each MediaBroadcastWorksheetMarketDetailDate In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.ToList

                            DbContext.MediaBroadcastWorksheetMarketDetailDates.Remove(MediaBroadcastWorksheetMarketDetailDate)

                        Next

                        For Each MediaBroadcastWorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailSubmarketDemos.ToList

                            DbContext.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Remove(MediaBroadcastWorksheetMarketDetailSubmarketDemo)

                        Next

                        For Each MediaRFPAvailLine In MediaBroadcastWorksheetMarketDetail.MediaRFPAvailLines.ToList

                            MediaRFPAvailLine.MediaBroadcastWorksheetMarketDetailID = Nothing
                            MediaRFPAvailLine.Status = AdvantageFramework.Database.Entities.MediaRFPAvailLineStatus.H.ToString
                            DbContext.Entry(MediaRFPAvailLine).State = Entity.EntityState.Modified

                        Next

                        DbContext.MediaBroadcastWorksheetMarketDetails.Remove(MediaBroadcastWorksheetMarketDetail)

                    End If

                Next

                DbContext.Configuration.AutoDetectChangesEnabled = True

                DbContext.SaveChanges()

                MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable = Nothing

                'If MediaBroadcastWorksheetMarketDetailsViewModel.IsInAcceptMakegoodMode Then

                '    With MediaBroadcastWorksheetMarketDetailsViewModel

                '        AdvantageFramework.MediaManager.AddUpdateOrderStatus(.MakegoodMediaType, .MakegoodOrderNumber, Me.Session.ConnectionString, Me.Session.UserCode, Me.Session.EmployeeName, Database.Entities.OrderStatusType.MakegoodOfferAccepted)

                '        DbContext.Database.ExecuteSqlCommand(String.Format("exec dbo.advsp_makegood_staging_delete_by_order {0}", .MakegoodOrderNumber))

                '        Using SecurityDbContext As New AdvantageFramework.Security.Database.DbContext(Session.ConnectionString, Session.UserCode)

                '            MarketDetails_AddAlertComment(DbContext, SecurityDbContext, .MakegoodOrderNumber, .MakegoodMediaType, "Makegood offer accepted." & Space(2) & .AcceptMakegoodComment)

                '        End Using

                '    End With

                '    MediaBroadcastWorksheetMarketDetailsViewModel.IsInAcceptMakegoodMode = False

                'End If

                Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.GridAdvantage.ID > 0 Then

                        GridAdvantage = AdvantageFramework.Database.Procedures.GridAdvantage.LoadByGridAdvantageID(DataContext, MediaBroadcastWorksheetMarketDetailsViewModel.GridAdvantage.ID)

                    End If

                    If GridAdvantage IsNot Nothing Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.GridAdvantage.SaveToEntity(GridAdvantage)

                        AdvantageFramework.Database.Procedures.GridAdvantage.Update(DataContext, GridAdvantage)

                    Else

                        GridAdvantage = New AdvantageFramework.Database.Entities.GridAdvantage
                        GridAdvantage.DataContext = DataContext

                        MediaBroadcastWorksheetMarketDetailsViewModel.GridAdvantage.SaveToEntity(GridAdvantage)

                        AdvantageFramework.Database.Procedures.GridAdvantage.Insert(DataContext, GridAdvantage)

                    End If

                End Using

                For Each MediaBroadcastWorksheetMarketDetail In WorksheetMarketDetailRows.Keys.OfType(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail)

                    DataRow = WorksheetMarketDetailRows(MediaBroadcastWorksheetMarketDetail)

                    DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString) = MediaBroadcastWorksheetMarketDetail.ID

                Next

                For Each MediaBroadcastWorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos.Keys.OfType(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailSubmarketDemo)

                    WorksheetMarketDetailSubmarketDemo = WorksheetMarketDetailSubmarketDemos(MediaBroadcastWorksheetMarketDetailSubmarketDemo)

                    WorksheetMarketDetailSubmarketDemo.ID = MediaBroadcastWorksheetMarketDetailSubmarketDemo.ID
                    WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketDetailID

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.AcceptChanges()

                DbContext.Database.Connection.Close()

            End Using

            'MarketDetails_LoadDataEntryRows(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_ClearChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_UpdateDetailDatesOrderStatus(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                              MediaBroadcastWorksheetMarketCreateOrdersViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel,
                                                              RevisionNumber As Integer, RowIndexes As Generic.List(Of Integer))

            'objects
            Dim MediaBroadcastWorsheetMarketDetailIDs As Generic.List(Of Integer) = Nothing
            Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing

            MediaBroadcastWorsheetMarketDetailIDs = New Generic.List(Of Integer)

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                If RowIndexes.Contains(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow)) Then

                    MediaBroadcastWorsheetMarketDetailIDs.Add(DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString))

                End If

            Next

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketDetails = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID).Include("MediaBroadcastWorksheetMarketDetailDates") _
                                                                                                                                 .Where(Function(Entity) Entity.RevisionNumber = RevisionNumber).ToList

                For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) MediaBroadcastWorsheetMarketDetailIDs.Contains(Entity.ID)).ToList

                    For Each MediaBroadcastWorksheetMarketDetailDate In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.ToList

                        If MediaBroadcastWorksheetMarketDetailDate.Date >= MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate AndAlso
                                MediaBroadcastWorksheetMarketDetailDate.Date <= MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate Then

                            If MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified AndAlso
                                    MediaBroadcastWorksheetMarketDetailDate.OrderNumber.HasValue = False Then

                                MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered
                                DbContext.UpdateObject(MediaBroadcastWorksheetMarketDetailDate)

                            End If

                        End If

                    Next

                Next

                DbContext.SaveChanges()

            End Using

        End Sub
        Public Sub MarketDetails_SaveCreateOrderOptionsAfterCreatingOrders(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, CreateOrdersByWeek As Boolean)

            'objects
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                MediaBroadcastWorksheetMarket = DbContext.MediaBroadcastWorksheetMarkets.Find(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID)

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.CreateOrdersByWeek = CreateOrdersByWeek

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SaveToEntity(MediaBroadcastWorksheetMarket)

                DbContext.Configuration.AutoDetectChangesEnabled = True

                DbContext.SaveChanges()

            End Using

        End Sub
        Public Sub MarketDetails_AddNewDataEntryRow(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                    VendorCode As String)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim Vendor As AdvantageFramework.Database.Entities.Vendor = Nothing
            Dim VendorDataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.NewRow()

            DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString) = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                    DataRow(MarketDetailsColumns.DaysAndTime.ToString) = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.TVPuertoRico)

                Else

                    DataRow(MarketDetailsColumns.DaysAndTime.ToString) = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.TV)

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DataRow(MarketDetailsColumns.DaysAndTime.ToString) = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.Radio)

                'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                '	DataRow(MarketDetailsColumns.DaysAndTime.ToString) = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.TV)

            End If

            DataRow(MarketDetailsColumns.OnHold.ToString) = False
            DataRow(MarketDetailsColumns.LineNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode).
                                                                                                                                                            Max(Function(DR) CInt(DR(MarketDetailsColumns.LineNumber.ToString))) + 1
            DataRow(MarketDetailsColumns.MakegoodNumber.ToString) = 0
            DataRow(MarketDetailsColumns.MakegoodDate.ToString) = Date.MinValue
            DataRow(MarketDetailsColumns.MakegoodSpots.ToString) = 0
            DataRow(MarketDetailsColumns.MadegoodNumber.ToString) = 0
            DataRow(MarketDetailsColumns.RevisionNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber
            DataRow(MarketDetailsColumns.VendorCode.ToString) = VendorCode

            If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Any(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode) Then

                VendorDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).FirstOrDefault(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode)

                DataRow(MarketDetailsColumns.VendorName.ToString) = VendorDataRow(MarketDetailsColumns.VendorName.ToString)

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = VendorDataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)
                    DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = VendorDataRow(MarketDetailsColumns.VendorIsCableSystem.ToString)
                    DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = False
                    DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = 0
                    DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = VendorDataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = 0
                    DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = False
                    DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = VendorDataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString)
                    DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = VendorDataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString)
                    DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = 0

                    'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                    '	DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = 0
                    '	DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = False
                    '	DataRow(MarketDetailsColumns.VendorNielsenRadioStationComboID.ToString) = 0
                    '	DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = VendorDataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                End If

            Else

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    Vendor = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, VendorCode)

                    If Vendor IsNot Nothing Then

                        DataRow(MarketDetailsColumns.VendorName.ToString) = Vendor.Name

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                                DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = Vendor.NielsenTVStationCode.GetValueOrDefault(0)

                            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                                DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = Vendor.ComscoreTVStationID.GetValueOrDefault(0)

                            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                                DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = Vendor.NPRStationID.GetValueOrDefault(0)

                            End If

                            DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = Vendor.IsCableSystem
                            DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = False
                            DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = 0
                            DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = If(Vendor.IsCableSystem, Vendor.NCCTVSyscodeID.GetValueOrDefault(0), 0)

                        ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                            DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = 0
                            DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = False
                            DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = Vendor.IsComboRadioStation

                            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                                DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = Vendor.NielsenRadioStationComboID.GetValueOrDefault(0)

                            Else

                                DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = Vendor.EastlanRadioStationComboID.GetValueOrDefault(0)

                            End If

                            DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = 0

                            'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                            '	DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = 0
                            '	DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = False
                            '	DataRow(MarketDetailsColumns.VendorNielsenRadioStationComboID.ToString) = 0
                            '	DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = Vendor.NCCTVSyscodeID.GetValueOrDefault(0)

                        End If

                    End If

                End Using

            End If

            DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString) = String.Empty
            DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = System.DBNull.Value
            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Daypart.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Product.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Piggyback.ToString) = String.Empty

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.Length > 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.Length > 0 Then

                DataRow(MarketDetailsColumns.Length.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.Length

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.Length > 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.Length = 0 Then

                DataRow(MarketDetailsColumns.Length.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.Length

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.Length = 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.Length > 0 Then

                DataRow(MarketDetailsColumns.Length.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.Length

            Else

                DataRow(MarketDetailsColumns.Length.ToString) = 0

            End If

            DataRow(MarketDetailsColumns.Days.ToString) = String.Empty
            DataRow(MarketDetailsColumns.StartTime.ToString) = String.Empty
            DataRow(MarketDetailsColumns.EndTime.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Comments.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Bookend.ToString) = False
            DataRow(MarketDetailsColumns.ValueAdded.ToString) = False
            DataRow(MarketDetailsColumns.DefaultRate.ToString) = 0
            DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            If VendorDataRow IsNot Nothing Then

                DataRow(MarketDetailsColumns.OrderComments.ToString) = VendorDataRow(MarketDetailsColumns.OrderComments.ToString)

            Else

                DataRow(MarketDetailsColumns.OrderComments.ToString) = String.Empty

            End If

            DataRow(MarketDetailsColumns.OverridePost.ToString) = False
            DataRow(MarketDetailsColumns.OverridePostImpressions.ToString) = False
            DataRow(MarketDetailsColumns.OverridePostAQH.ToString) = False

            DataRow(MarketDetailsColumns.RowSource.ToString) = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RowSources.ManualEntry

            DataRow(MarketDetailsColumns.TotalSpots.ToString) = 0
            DataRow(MarketDetailsColumns.TotalDollars.ToString) = 0
            DataRow(MarketDetailsColumns.TotalNet.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCPP.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryGRP.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryReach.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCume.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCPM.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString) = 0

            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0
            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCPP.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryGRP.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryReach.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = 0
            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = 0
            DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCume.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCPM.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString) = 0

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = 0
                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)) = 0
                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(DetailDate)) = True
                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(DetailDate)) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Add(DataRow)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                MarketDetails_AddNewWorksheetMarketDetailSubmarketDemos(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.ID.ToString))

            End If

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_DeleteDataEntryRow(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes() As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim MakegoodReferenceDataRow As System.Data.DataRow = Nothing
            Dim VendorCode As String = String.Empty
            Dim LineNumber As Integer = 0
            Dim MadegoodNumber As Integer = 0
            Dim MediaBroadcastWorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate) = Nothing
            Dim BroadcastWorksheetMarketDetailID As Integer = 0
            Dim MakegoodDataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = Nothing
            Dim MakegoodNumber As Integer = 0
            Dim RowID As Integer = 0

            Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                For Each RowIndex In RowIndexes.OrderByDescending(Function(RI) RI)

                    MakegoodReferenceDataRow = Nothing

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                    RowID = DataRow(MarketDetailsColumns.ID.ToString)
                    VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString)
                    LineNumber = DataRow(MarketDetailsColumns.LineNumber.ToString)
                    MakegoodNumber = DataRow(MarketDetailsColumns.MakegoodNumber.ToString)
                    MadegoodNumber = DataRow(MarketDetailsColumns.MadegoodNumber.ToString)

                    If MadegoodNumber > 0 Then

                        'VendorCode = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.VendorCode.ToString)
                        'LineNumber = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.LineNumber.ToString)
                        'MadegoodNumber = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.MadegoodNumber.ToString)
                        'MakegoodDate = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.MakegoodDate.ToString)
                        'MakegoodSpots = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.MakegoodSpots.ToString)

                        MakegoodReferenceDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode AndAlso
                                                                                                                                                                            DR(MarketDetailsColumns.LineNumber.ToString) = LineNumber AndAlso
                                                                                                                                                                            DR(MarketDetailsColumns.MakegoodNumber.ToString) = MadegoodNumber)

                        If MakegoodReferenceDataRow IsNot Nothing Then

                            BroadcastWorksheetMarketDetailID = DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString)

                            If BroadcastWorksheetMarketDetailID <> 0 Then

                                MediaBroadcastWorksheetMarketDetailDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketDetailID(DbContext, BroadcastWorksheetMarketDetailID).ToList

                                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                                    If MediaBroadcastWorksheetMarketDetailDates.Where(Function(DD) DD.Date = DetailDate).Count = 1 Then

                                        MakegoodReferenceDataRow(ColumnName) += MediaBroadcastWorksheetMarketDetailDates.Where(Function(DD) DD.Date = DetailDate).First.MakegoodSpots

                                    End If

                                Next

                            Else

                                MakegoodDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Select("VendorCode = '" & VendorCode & "' AND LineNumber = " & LineNumber & " AND MakegoodNumber = " & MakegoodNumber).FirstOrDefault

                                If MakegoodDataRow IsNot Nothing Then

                                    For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                                        MakegoodReferenceDataRow(ColumnName) += MakegoodDataRow(ColumnName)

                                    Next

                                    MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Rows.Remove(MakegoodDataRow)

                                End If

                            End If

                        End If

                        'If MakegoodReferenceDataRow IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.ContainsKey(MakegoodDate) Then

                        '    MakegoodReferenceDataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(MakegoodDate)) += MakegoodSpots
                        '    MakegoodReferenceDataRow(MarketDetailsColumns.TotalSpots.ToString) += MakegoodSpots

                        MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(MakegoodReferenceDataRow))

                        'End If

                    ElseIf MakegoodNumber > 0 Then

                        'VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString)
                        'LineNumber = DataRow(MarketDetailsColumns.LineNumber.ToString)
                        'MakegoodNumber = DataRow(MarketDetailsColumns.MakegoodNumber.ToString)
                        'MakegoodDate = DataRow(MarketDetailsColumns.MakegoodDate.ToString)
                        'MakegoodSpots = DataRow(MarketDetailsColumns.MakegoodSpots.ToString)

                        MakegoodReferenceDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode AndAlso
                                                                                                                                                                            DR(MarketDetailsColumns.LineNumber.ToString) = LineNumber AndAlso
                                                                                                                                                                            DR(MarketDetailsColumns.MakegoodNumber.ToString) = 0)

                        If MakegoodReferenceDataRow IsNot Nothing Then

                            BroadcastWorksheetMarketDetailID = DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString)

                            If BroadcastWorksheetMarketDetailID <> 0 Then

                                MediaBroadcastWorksheetMarketDetailDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketDetailID(DbContext, BroadcastWorksheetMarketDetailID).ToList

                                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                                    If MediaBroadcastWorksheetMarketDetailDates.Where(Function(DD) DD.Date = DetailDate).Count = 1 Then

                                        MakegoodReferenceDataRow(ColumnName) += MediaBroadcastWorksheetMarketDetailDates.Where(Function(DD) DD.Date = DetailDate).First.MakegoodSpots

                                    End If

                                Next

                            Else

                                MakegoodDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Select("VendorCode = '" & VendorCode & "' AND LineNumber = " & LineNumber & " AND MakegoodNumber = " & MakegoodNumber).FirstOrDefault

                                If MakegoodDataRow IsNot Nothing Then

                                    For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                                        MakegoodReferenceDataRow(ColumnName) += MakegoodDataRow(ColumnName)

                                    Next

                                    MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Rows.Remove(MakegoodDataRow)

                                End If

                            End If

                        End If

                        'If MakegoodReferenceDataRow IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.ContainsKey(MakegoodDate) Then

                        '    MakegoodReferenceDataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(MakegoodDate)) += MakegoodSpots
                        '    MakegoodReferenceDataRow(MarketDetailsColumns.TotalSpots.ToString) += MakegoodSpots

                        MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(MakegoodReferenceDataRow))

                        'End If

                    End If

                    If MakegoodReferenceDataRow IsNot Nothing Then

                        MakegoodReferenceDataRow(MarketDetailsColumns.TotalSpots.ToString) = 0

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                            MakegoodReferenceDataRow(MarketDetailsColumns.TotalSpots.ToString) += MakegoodReferenceDataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))

                        Next

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                        If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Any(Function(Entity) Entity.RowID = RowID) Then

                            For Each WorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.RowID = RowID).ToList

                                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Remove(WorksheetMarketDetailSubmarketDemo)

                            Next

                        End If

                    End If

                Next

            End Using

            For Each RowIndex In RowIndexes.OrderByDescending(Function(RI) RI)

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.RemoveAt(RowIndex)

            Next

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)

        End Sub
        Public Sub MarketDetails_CopyDataEntryRows(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                   RowIndexes() As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NewDataRow As System.Data.DataRow = Nothing
            Dim IsMakegoodRow As Boolean = False
            Dim MaxRowIndex As Integer = -1
            Dim NewWorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            MaxRowIndex = RowIndexes.Max + 1

            For Each RowIndex In RowIndexes.OrderBy(Function(RI) RI)

                NewDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.NewRow()

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                For Each DataColumn In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                    If DataColumn.ColumnName <> MarketDetailsColumns.ID.ToString AndAlso
                            DataColumn.ColumnName <> MarketDetailsColumns.WorksheetMarketDetailID.ToString AndAlso
                            DataColumn.ColumnName <> MarketDetailsColumns.DaysAndTime.ToString AndAlso
                            DataColumn.ColumnName <> MarketDetailsColumns.OrderStatus.ToString AndAlso
                            DataColumn.ColumnName.StartsWith("OrderStatus") = False Then

                        NewDataRow(DataColumn) = DataRow(DataColumn)

                        If DataColumn.ColumnName = MarketDetailsColumns.MakegoodNumber.ToString Then

                            If DataRow(MarketDetailsColumns.MakegoodNumber.ToString) > 0 Then

                                IsMakegoodRow = True

                            End If

                        End If

                    ElseIf DataColumn.ColumnName = MarketDetailsColumns.DaysAndTime.ToString Then

                        NewDataRow(DataColumn) = CType(DataRow(DataColumn), AdvantageFramework.DTO.DaysAndTime).Clone

                    End If

                Next

                If IsMakegoodRow Then

                    NewDataRow(MarketDetailsColumns.MakegoodNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString) AndAlso
                                                                                                                                                                                              DR(MarketDetailsColumns.LineNumber.ToString) = NewDataRow(MarketDetailsColumns.LineNumber.ToString)).
                                                                                                                                                                           Max(Function(DR) CInt(DR(MarketDetailsColumns.MakegoodNumber.ToString))) + 1

                Else

                    NewDataRow(MarketDetailsColumns.LineNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString)).
                                                                                                                                                                       Max(Function(DR) CInt(DR(MarketDetailsColumns.LineNumber.ToString))) + 1

                End If

                NewDataRow(MarketDetailsColumns.RevisionNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.InsertAt(NewDataRow, MaxRowIndex)

                If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Any(Function(Entity) Entity.RowID = DataRow(MarketDetailsColumns.ID.ToString)) Then

                        For Each WorksheetMarketSubmarket In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.ToList

                            For Each WorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.RowID = DataRow(MarketDetailsColumns.ID.ToString) AndAlso
                                                                                                                                                                                    Entity.MediaBroadcastWorksheetMarketSubmarketID = WorksheetMarketSubmarket.ID).ToList

                                NewWorksheetMarketDetailSubmarketDemo = WorksheetMarketDetailSubmarketDemo.CopyWithNewRowID(NewDataRow(MarketDetailsColumns.ID.ToString))

                                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Add(NewWorksheetMarketDetailSubmarketDemo)

                                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.Add(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketCacheTemplate, WorksheetMarketSubmarket.Order, NewWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID, NewWorksheetMarketDetailSubmarketDemo.MediaDemographicID, NewWorksheetMarketDetailSubmarketDemo.RowID), NewWorksheetMarketDetailSubmarketDemo)

                            Next

                        Next

                    End If

                End If

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)

        End Sub
        Public Sub MarketDetails_CreateRevisions(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                 RevisionComment As String)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim RevisionNumber As Integer = -1
            Dim PreviousRevisionNumber As Integer = -1
            Dim WorksheetMarketID As Integer = 0
            Dim MediaBroadcastWorksheetMarketRevision As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketRevision = Nothing
            Dim PreviousMediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim MediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing

            MarketDetails_Save(MediaBroadcastWorksheetMarketDetailsViewModel)

            PreviousRevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Max(Function(DR) CInt(DR(MarketDetailsColumns.RevisionNumber.ToString)))
            RevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Max(Function(DR) CInt(DR(MarketDetailsColumns.RevisionNumber.ToString))) + 1

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                MediaBroadcastWorksheetMarketRevision = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketRevision

                MediaBroadcastWorksheetMarketRevision.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID
                MediaBroadcastWorksheetMarketRevision.RevisionNumber = RevisionNumber
                MediaBroadcastWorksheetMarketRevision.Comment = RevisionComment
                MediaBroadcastWorksheetMarketRevision.CreatedByUserCode = Me.Session.UserCode
                MediaBroadcastWorksheetMarketRevision.CreatedDate = Now

                DbContext.MediaBroadcastWorksheetMarketRevisions.Add(MediaBroadcastWorksheetMarketRevision)

                DbContext.Configuration.AutoDetectChangesEnabled = True

                DbContext.SaveChanges()

            End Using

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).ToList

                DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString) = 0
                DataRow(MarketDetailsColumns.RevisionNumber.ToString) = RevisionNumber

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(DetailDate)) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

                Next

                For Each WorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.RowID = DataRow(MarketDetailsColumns.ID.ToString)).ToList

                    WorksheetMarketDetailSubmarketDemo.ID = 0
                    WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketDetailID = 0

                Next

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers.Add(RevisionNumber)

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber = RevisionNumber

            MarketDetails_Save(MediaBroadcastWorksheetMarketDetailsViewModel)

            WorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                PreviousMediaBroadcastWorksheetMarketDetails = DbContext.MediaBroadcastWorksheetMarketDetails.Include("MediaBroadcastWorksheetMarketDetailDates").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID AndAlso Entity.RevisionNumber = PreviousRevisionNumber).ToList
                MediaBroadcastWorksheetMarketDetails = DbContext.MediaBroadcastWorksheetMarketDetails.Include("MediaBroadcastWorksheetMarketDetailDates").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID AndAlso Entity.RevisionNumber = RevisionNumber).ToList

                For Each PrevMBWMD In PreviousMediaBroadcastWorksheetMarketDetails

                    MediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetails.SingleOrDefault(Function(Entity) Entity.VendorCode = PrevMBWMD.VendorCode AndAlso Entity.LineNumber = PrevMBWMD.LineNumber AndAlso Entity.MakegoodNumber = PrevMBWMD.MakegoodNumber)

                    For Each PreMBWMDD In PrevMBWMD.MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.OrderNumber.HasValue).ToList

                        MediaBroadcastWorksheetMarketDetailDate = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.SingleOrDefault(Function(Entity) Entity.Date = PreMBWMDD.Date)

                        MediaBroadcastWorksheetMarketDetailDate.LinkID = PreMBWMDD.LinkID
                        MediaBroadcastWorksheetMarketDetailDate.LinkLineID = PreMBWMDD.LinkLineID
                        MediaBroadcastWorksheetMarketDetailDate.OrderNumber = PreMBWMDD.OrderNumber
                        MediaBroadcastWorksheetMarketDetailDate.OrderLineNumber = PreMBWMDD.OrderLineNumber
                        MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered

                    Next

                Next

                DbContext.Configuration.AutoDetectChangesEnabled = True

                DbContext.SaveChanges()

            End Using


            MarketDetails_ChangeRevisionNumber(MediaBroadcastWorksheetMarketDetailsViewModel, RevisionNumber)

        End Sub
        Public Sub MarketDetails_DeleteRevision(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, RevisionNumber As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim MediaBroadcastWorksheetMarketRevision As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketRevision = Nothing
            Dim MediaBroadcastWorksheetMarketID As Integer = 0

            MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                For Each MediaBroadcastWorksheetMarketDetail In DbContext.MediaBroadcastWorksheetMarketDetails.Include("MediaBroadcastWorksheetMarketDetailDates").Include("MediaRFPAvailLines").Include("MediaBroadcastWorksheetMarketDetailSubmarketDemos").
                                                                                                               Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso
                                                                                                                                      Entity.RevisionNumber = RevisionNumber).ToList

                    For Each MediaBroadcastWorksheetMarketDetailDate In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.ToList

                        DbContext.MediaBroadcastWorksheetMarketDetailDates.Remove(MediaBroadcastWorksheetMarketDetailDate)

                    Next

                    For Each MediaBroadcastWorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailSubmarketDemos.ToList

                        DbContext.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Remove(MediaBroadcastWorksheetMarketDetailSubmarketDemo)

                    Next

                    For Each MediaRFPAvailLine In MediaBroadcastWorksheetMarketDetail.MediaRFPAvailLines.ToList

                        MediaRFPAvailLine.MediaBroadcastWorksheetMarketDetailID = Nothing
                        MediaRFPAvailLine.Status = AdvantageFramework.Database.Entities.MediaRFPAvailLineStatus.H.ToString
                        DbContext.Entry(MediaRFPAvailLine).State = Entity.EntityState.Modified

                    Next

                    DbContext.MediaBroadcastWorksheetMarketDetails.Remove(MediaBroadcastWorksheetMarketDetail)

                Next

                MediaBroadcastWorksheetMarketRevision = DbContext.MediaBroadcastWorksheetMarketRevisions.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso
                                                                                                                                          Entity.RevisionNumber = RevisionNumber)

                DbContext.MediaBroadcastWorksheetMarketRevisions.Remove(MediaBroadcastWorksheetMarketRevision)

                DbContext.Configuration.AutoDetectChangesEnabled = True

                DbContext.SaveChanges()

            End Using

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers.Remove(RevisionNumber)

            MarketDetails_ChangeRevisionNumber(MediaBroadcastWorksheetMarketDetailsViewModel, RevisionNumber - 1)

        End Sub
        Public Sub MarketDetails_HiatusValueChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                    ColumnName As String)

            'objects
            Dim IsHiatus As Boolean = False

            IsHiatus = Not MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(ColumnName)

            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(ColumnName) = IsHiatus

            If IsHiatus Then

                For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                    If DataRow(ColumnName) <> 0 Then

                        MarketDetails_MarketDetailDateValueChanged(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow), ColumnName)

                    End If

                    DataRow(ColumnName) = 0

                    If DataRow.RowState = DataRowState.Unchanged Then

                        DataRow.SetModified()

                    End If

                Next

                MarketDetails_RefreshRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)

                For RowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

                Next

            Else

                For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                    If DataRow.RowState = DataRowState.Unchanged Then

                        DataRow.SetModified()

                    End If

                Next

            End If

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_MarketDetailDateValueChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                              RowIndex As Integer, ColumnName As String, Optional RefreshTotals As Boolean = True)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim OrderStatusColumnName As String = String.Empty
            Dim SpotsColumnName As String = String.Empty
            Dim WorksheetMarketDetailDateOrderStatuses As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus) = Nothing

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Contains(ColumnName.Replace("Date", "OrderStatus")) Then

                If DataRow(ColumnName.Replace("Date", "OrderStatus")) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered) OrElse
                        DataRow(ColumnName.Replace("Date", "OrderStatus")) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial) Then

                    DataRow(ColumnName.Replace("Date", "OrderStatus")) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

                End If

            End If

            WorksheetMarketDetailDateOrderStatuses = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus)

            For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)
                SpotsColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(OrderStatusDate)

                WorksheetMarketDetailDateOrderStatuses.Add(New Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus With {.Spots = DataRow(SpotsColumnName),
                                                                                                                                                .OrderStatus = DataRow(OrderStatusColumnName)})

            Next

            If WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) Then

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            ElseIf WorksheetMarketDetailDateOrderStatuses.Any(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified) Then

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

            ElseIf WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered OrElse
                                                                               (Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered AndAlso
                                                                                Entity.Spots = 0)) Then

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered)

            Else

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial)

            End If

            If RefreshTotals Then

                MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
                MarketDetails_RefreshRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)

            End If

            If DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) Then

                MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow)}))
                MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow)}))

                MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            End If

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_OnHoldValueChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_RefreshRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, String.Empty)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_RateChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                             RowIndex As Integer, ColumnName As String, RefreshTotals As Boolean, Optional ByVal MediaCalendars As Generic.List(Of AdvantageFramework.Database.Entities.MediaCalendar) = Nothing)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim OrderStatusColumnName As String = String.Empty
            Dim SpotsColumnName As String = String.Empty
            Dim WorksheetMarketDetailDateOrderStatuses As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus) = Nothing
            Dim DateThatIsBeingChanged As Date = Date.MinValue
            Dim DateThatIsBeingChangedMediaCalendar As AdvantageFramework.Database.Entities.MediaCalendar = Nothing
            Dim DatesToModify As Generic.List(Of Date) = Nothing

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.CreateOrdersByWeek = False Then

                DatesToModify = New Generic.List(Of Date)

                If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Contains(ColumnName.Replace("Rate", "OrderStatus")) Then

                    DateThatIsBeingChanged = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(ColumnName).ExtendedProperties("RateDate")

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        DbContext.Database.Connection.Open()

                        If MediaCalendars Is Nothing Then

                            DateThatIsBeingChangedMediaCalendar = DbContext.MediaCalendars.SingleOrDefault(Function(Entity) Entity.Date = DateThatIsBeingChanged)

                        Else

                            DateThatIsBeingChangedMediaCalendar = MediaCalendars.SingleOrDefault(Function(Entity) Entity.Date = DateThatIsBeingChanged)

                        End If

                        If DateThatIsBeingChangedMediaCalendar IsNot Nothing Then

                            If MediaCalendars Is Nothing Then

                                MediaCalendars = DbContext.MediaCalendars.Where(Function(Entity) Entity.BroadcastMonth = DateThatIsBeingChangedMediaCalendar.BroadcastMonth AndAlso Entity.BroadcastYear = DateThatIsBeingChangedMediaCalendar.BroadcastYear).ToList

                            Else

                                MediaCalendars = MediaCalendars.Where(Function(Entity) Entity.BroadcastMonth = DateThatIsBeingChangedMediaCalendar.BroadcastMonth AndAlso Entity.BroadcastYear = DateThatIsBeingChangedMediaCalendar.BroadcastYear).ToList

                            End If

                            For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                                If MediaCalendars.Any(Function(Entity) Entity.Date = OrderStatusDate) Then

                                    DatesToModify.Add(OrderStatusDate)

                                End If

                            Next

                        End If

                    End Using

                End If

                For Each OrderStatusDate In DatesToModify

                    OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Contains(OrderStatusColumnName) Then

                        If DataRow(OrderStatusColumnName) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered) OrElse
                                DataRow(OrderStatusColumnName) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial) Then

                            DataRow(OrderStatusColumnName) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

                        End If

                    End If

                Next

            Else

                If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Contains(ColumnName.Replace("Rate", "OrderStatus")) Then

                    If DataRow(ColumnName.Replace("Rate", "OrderStatus")) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered) OrElse
                            DataRow(ColumnName.Replace("Rate", "OrderStatus")) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial) Then

                        DataRow(ColumnName.Replace("Rate", "OrderStatus")) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

                    End If

                End If

            End If

            WorksheetMarketDetailDateOrderStatuses = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus)

            For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)
                SpotsColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(OrderStatusDate)

                WorksheetMarketDetailDateOrderStatuses.Add(New Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus With {.Spots = DataRow(SpotsColumnName),
                                                                                                                                                .OrderStatus = DataRow(OrderStatusColumnName)})

            Next

            If WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) Then

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            ElseIf WorksheetMarketDetailDateOrderStatuses.Any(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified) Then

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

            ElseIf WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered OrElse
                                                                               (Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered AndAlso
                                                                                Entity.Spots = 0)) Then

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered)

            Else

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial)

            End If

            If RefreshTotals Then

                MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
                MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)

            End If

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_DefaultRateChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                    RowIndex As Integer)

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_DaypartChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                RowIndex As Integer)

            MarketDetails_LoadSummaryDataTables(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_MarketDetailChanged(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_MarketDetailValueChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_LengthChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                               RowIndex As Integer)

            MarketDetails_LoadSummaryDataTables(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_MarketDetailChanged(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_MarketDetailValueChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_DefaultRateChanging(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                    RowIndex As Integer, NewDefaultRate As Decimal, OldDefaultRate As Decimal)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim RateColumnName As String = String.Empty
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim MediaCalendars As Generic.List(Of AdvantageFramework.Database.Entities.MediaCalendar) = Nothing

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            StartDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate
            EndDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.EndDate

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaCalendars = (From Entity In DbContext.MediaCalendars
                                  Where Entity.Date >= StartDate AndAlso
                                        Entity.Date <= EndDate
                                  Select Entity).ToList

            End Using

            For Each RateDate In MediaBroadcastWorksheetMarketDetailsViewModel.RateDates.Keys.OfType(Of Date).OrderBy(Function(RD) RD)

                RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(RateDate)

                If DataRow(RateColumnName) = OldDefaultRate Then

                    DataRow(RateColumnName) = NewDefaultRate

                    MarketDetails_RateChanged(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex, RateColumnName, False, MediaCalendars)

                End If

            Next

        End Sub
        Public Sub MarketDetails_MarketDetailValueChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_MarketDetailChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                     RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim OrderStatusColumnName As String = String.Empty
            Dim SpotsColumnName As String = String.Empty
            Dim WorksheetMarketDetailDateOrderStatuses As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus) = Nothing

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)

                If DataRow(OrderStatusColumnName) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered) OrElse
                        DataRow(OrderStatusColumnName) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial) Then

                    DataRow(OrderStatusColumnName) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

                End If

            Next

            WorksheetMarketDetailDateOrderStatuses = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus)

            For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)
                SpotsColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(OrderStatusDate)

                WorksheetMarketDetailDateOrderStatuses.Add(New Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus With {.Spots = DataRow(SpotsColumnName),
                                                                                                                                                .OrderStatus = DataRow(OrderStatusColumnName)})

            Next

            If WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) Then

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            ElseIf WorksheetMarketDetailDateOrderStatuses.Any(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified) Then

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

            ElseIf WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered OrElse
                                                                               (Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered AndAlso
                                                                                Entity.Spots = 0)) Then

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered)

            Else

                DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial)

            End If

        End Sub
        Public Function MarketDetails_CheckShareValueAfterRatingChange(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                       Rating As Decimal, RowIndex As Integer, IsPrimary As Boolean) As Boolean

            'objects
            Dim IsValidValue As Boolean = False
            Dim DataRow As System.Data.DataRow = Nothing
            Dim Share As Decimal = 0

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If IsPrimary Then

                Share = CalculateShare(Rating, DataRow(MarketDetailsColumns.PrimaryHPUT.ToString))

            Else

                Share = CalculateShare(Rating, DataRow(MarketDetailsColumns.SecondaryHPUT.ToString))

            End If

            If Share > 99.99 Then

                IsValidValue = False

            Else

                IsValidValue = True

            End If

            MarketDetails_CheckShareValueAfterRatingChange = IsValidValue

        End Function
        Public Sub MarketDetails_PrimaryAQHRatingChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                         RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 Then

                DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = CalculateAQHFromOverrideAQHRating(DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString), DataRow(MarketDetailsColumns.PrimaryUniverse.ToString))

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
            MarketDetails_RefreshRatingRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_PrimaryRatingChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                      RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim CalculateProrateSecondary As Boolean = False

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 Then

                If DataRow(MarketDetailsColumns.PrimaryRating.ToString) <> DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.ProrateSecondaryDemosToPrimary AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetSecondaryDemo Then

                    CalculateProrateSecondary = True

                End If

                If DataRow(MarketDetailsColumns.PrimaryRating.ToString) <> DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) Then

                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = CalculateShare(DataRow(MarketDetailsColumns.PrimaryRating.ToString), DataRow(MarketDetailsColumns.PrimaryHPUT.ToString))

                Else

                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = DataRow(MarketDetailsColumns.BookPrimaryShare.ToString)

                End If

                If CalculateProrateSecondary Then

                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = MarketDetails_CalculateProrateSecondaryRating(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.BookSecondaryRating.ToString), DataRow(MarketDetailsColumns.BookPrimaryRating.ToString), DataRow(MarketDetailsColumns.PrimaryRating.ToString))
                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = MarketDetails_CalculateProrateSecondaryShare(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.BookSecondaryShare.ToString), DataRow(MarketDetailsColumns.BookPrimaryShare.ToString), DataRow(MarketDetailsColumns.PrimaryShare.ToString))

                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = CalculateImpressionsFromOverrideRating(DataRow(MarketDetailsColumns.SecondaryRating.ToString), DataRow(MarketDetailsColumns.SecondaryUniverse.ToString))

                End If

                DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = CalculateImpressionsFromOverrideRating(DataRow(MarketDetailsColumns.PrimaryRating.ToString), DataRow(MarketDetailsColumns.PrimaryUniverse.ToString))

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
            MarketDetails_RefreshRatingRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_PrimaryShareChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                     RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim CalculateProrateSecondary As Boolean = False

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 Then

                If DataRow(MarketDetailsColumns.PrimaryShare.ToString) <> DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.ProrateSecondaryDemosToPrimary AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetSecondaryDemo Then

                    CalculateProrateSecondary = True

                End If

                DataRow(MarketDetailsColumns.PrimaryRating.ToString) = CalculateRating(DataRow(MarketDetailsColumns.PrimaryShare.ToString), DataRow(MarketDetailsColumns.PrimaryHPUT.ToString))

                If CalculateProrateSecondary Then

                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = MarketDetails_CalculateProrateSecondaryRating(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.BookSecondaryRating.ToString), DataRow(MarketDetailsColumns.BookPrimaryRating.ToString), DataRow(MarketDetailsColumns.PrimaryRating.ToString))
                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = MarketDetails_CalculateProrateSecondaryShare(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.BookSecondaryShare.ToString), DataRow(MarketDetailsColumns.BookPrimaryShare.ToString), DataRow(MarketDetailsColumns.PrimaryShare.ToString))

                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = CalculateImpressionsFromOverrideRating(DataRow(MarketDetailsColumns.SecondaryRating.ToString), DataRow(MarketDetailsColumns.SecondaryUniverse.ToString))

                End If

                DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = CalculateImpressionsFromOverrideRating(DataRow(MarketDetailsColumns.PrimaryRating.ToString), DataRow(MarketDetailsColumns.PrimaryUniverse.ToString))

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_SecondaryAQHRatingChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                           RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 Then

                DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = CalculateAQHFromOverrideAQHRating(DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString), DataRow(MarketDetailsColumns.SecondaryUniverse.ToString))

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_SecondaryRatingChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                        RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 Then

                DataRow(MarketDetailsColumns.SecondaryShare.ToString) = CalculateShare(DataRow(MarketDetailsColumns.SecondaryRating.ToString), DataRow(MarketDetailsColumns.SecondaryHPUT.ToString))

                DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = CalculateImpressionsFromOverrideRating(DataRow(MarketDetailsColumns.SecondaryRating.ToString), DataRow(MarketDetailsColumns.SecondaryUniverse.ToString))

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_SecondaryShareChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                       RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 Then

                DataRow(MarketDetailsColumns.SecondaryRating.ToString) = CalculateRating(DataRow(MarketDetailsColumns.SecondaryShare.ToString), DataRow(MarketDetailsColumns.SecondaryHPUT.ToString))

                DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = CalculateImpressionsFromOverrideRating(DataRow(MarketDetailsColumns.SecondaryRating.ToString), DataRow(MarketDetailsColumns.SecondaryUniverse.ToString))

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_UndoRaitingAndShareOverride(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                             RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                DataRow(MarketDetailsColumns.PrimaryRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryRating.ToString)
                DataRow(MarketDetailsColumns.PrimaryShare.ToString) = DataRow(MarketDetailsColumns.BookPrimaryShare.ToString)
                DataRow(MarketDetailsColumns.SecondaryRating.ToString) = DataRow(MarketDetailsColumns.BookSecondaryRating.ToString)
                DataRow(MarketDetailsColumns.SecondaryShare.ToString) = DataRow(MarketDetailsColumns.BookSecondaryShare.ToString)

                DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString)
                DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString)

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString)
                DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString)

                DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString)
                DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString)

            End If

            MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))
            MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_RefreshRatingRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

        End Sub
        Public Sub MarketDetails_UndoProgramOverride(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                     RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            DataRow(MarketDetailsColumns.Program.ToString) = DataRow(MarketDetailsColumns.BookProgram.ToString)

            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

        End Sub
        Public Sub MarketDetails_ProgramChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                RowIndex As Integer)

            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_PrimaryImpressionsChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                           RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim CalculateProrateSecondary As Boolean = False

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 Then

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                DataRow(MarketDetailsColumns.PrimaryRating.ToString) = CalculateRatingFromOverrideImpressions(DataRow(MarketDetailsColumns.PrimaryImpressions.ToString), DataRow(MarketDetailsColumns.PrimaryUniverse.ToString))

                If DataRow(MarketDetailsColumns.PrimaryRating.ToString) <> DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.ProrateSecondaryDemosToPrimary AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetSecondaryDemo Then

                    CalculateProrateSecondary = True

                End If

                If DataRow(MarketDetailsColumns.PrimaryRating.ToString) <> DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) Then

                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = CalculateShare(DataRow(MarketDetailsColumns.PrimaryRating.ToString), DataRow(MarketDetailsColumns.PrimaryHPUT.ToString))

                Else

                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = DataRow(MarketDetailsColumns.BookPrimaryShare.ToString)

                End If

                If CalculateProrateSecondary Then

                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = MarketDetails_CalculateProrateSecondaryRating(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.BookSecondaryRating.ToString), DataRow(MarketDetailsColumns.BookPrimaryRating.ToString), DataRow(MarketDetailsColumns.PrimaryRating.ToString))
                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = MarketDetails_CalculateProrateSecondaryShare(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.BookSecondaryShare.ToString), DataRow(MarketDetailsColumns.BookPrimaryShare.ToString), DataRow(MarketDetailsColumns.PrimaryShare.ToString))

                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = CalculateImpressionsFromOverrideRating(DataRow(MarketDetailsColumns.SecondaryRating.ToString), DataRow(MarketDetailsColumns.SecondaryUniverse.ToString))

                End If

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            'MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)
            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.BeginLoadData()

            MarketDetails_RefreshRowTotals_TotalImpressions(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.EndLoadData()

            MarketDetails_LoadSummaryDataTables(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_SecondaryImpressionsChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                             RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 Then

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                DataRow(MarketDetailsColumns.SecondaryRating.ToString) = CalculateRatingFromOverrideImpressions(DataRow(MarketDetailsColumns.SecondaryImpressions.ToString), DataRow(MarketDetailsColumns.SecondaryUniverse.ToString))

                If DataRow(MarketDetailsColumns.SecondaryRating.ToString) <> DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) Then

                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = CalculateShare(DataRow(MarketDetailsColumns.SecondaryRating.ToString), DataRow(MarketDetailsColumns.SecondaryHPUT.ToString))

                Else

                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = DataRow(MarketDetailsColumns.BookSecondaryShare.ToString)

                End If

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)
            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_PrimaryAQHChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                   RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 Then

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = CalculateAQHRatingFromOverrideAQH(DataRow(MarketDetailsColumns.PrimaryAQH.ToString), DataRow(MarketDetailsColumns.PrimaryUniverse.ToString))

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            'MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)
            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.BeginLoadData()

            MarketDetails_RefreshRowTotals_TotalImpressions(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.EndLoadData()

            MarketDetails_LoadSummaryDataTables(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_SecondaryAQHChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                     RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 Then

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = CalculateAQHRatingFromOverrideAQH(DataRow(MarketDetailsColumns.SecondaryAQH.ToString), DataRow(MarketDetailsColumns.SecondaryUniverse.ToString))

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)
            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_CableNetworkStationChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                            RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim CableNetworkNielsenTVStationCode As Integer = 0
            Dim CableNetworkStationCode As String = String.Empty

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString) IsNot System.DBNull.Value Then

                CableNetworkStationCode = DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)

            End If

            If String.IsNullOrWhiteSpace(CableNetworkStationCode) = False AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations.Any(Function(Entity) Entity.Code = CableNetworkStationCode) Then

                CableNetworkNielsenTVStationCode = MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations.SingleOrDefault(Function(Entity) Entity.Code = CableNetworkStationCode).NielsenTVStationCode

            End If

            If CableNetworkNielsenTVStationCode <> 0 Then

                DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = CableNetworkNielsenTVStationCode

            Else

                DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = System.DBNull.Value

            End If

            MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))
            MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))

            MarketDetails_RefreshRatingRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
            'MarketDetails_RefreshsMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_StartTimeChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                  RowIndex As Integer)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_EndTimeChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                RowIndex As Integer)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_MarketDetailDateValueChanging(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                               RowIndex As Integer, ColumnName As String, Bookend As Boolean, DateValue As Integer, ByRef WarnUser As Boolean)

            If Bookend Then

                If DateValue Mod 2 <> 0 Then

                    WarnUser = True

                End If

            Else

                WarnUser = False

            End If

        End Sub
        Public Sub MarketDetails_BookendValueChanging(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                      RowIndex As Integer, Bookend As Boolean, ByRef WarnUser As Boolean)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty

            If Bookend Then

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                    If CInt(DataRow(ColumnName)) Mod 2 <> 0 Then

                        WarnUser = True
                        Exit For

                    End If

                Next

            Else

                WarnUser = False

            End If

        End Sub
        Public Sub MarketDetails_ClearMarketDetailDateValues(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                             RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                If CInt(DataRow(ColumnName)) Mod 2 <> 0 Then

                    DataRow(ColumnName) = 0

                    MarketDetails_RefreshRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)

                End If

            Next

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_SelectedRowChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                    SelectedRowCount As Integer, RowIndexes() As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim AnySelectedLinesHaveOrders As Boolean = False
            Dim AnySelectedMakegoodRows As Boolean = False
            Dim AnySelectedMadegoodRows As Boolean = False
            Dim AllVendorNames As Generic.List(Of String) = Nothing
            Dim SelectedVendorNames As Generic.List(Of String) = Nothing
            Dim AnyVendorMakegoodAvailable As Boolean = False
            Dim LineNumberRowCount As Integer = 0

            'AnyRowsHaveOrders = MarketDetails_AnyRowsHaveOrders(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.CreateOrdersEnabled = MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber

            If MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber Then

                MediaBroadcastWorksheetMarketDetailsViewModel.CreateOrders_SelectedLinesOnlyEnabled = (SelectedRowCount > 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber = 0)

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.CreateOrders_SelectedLinesOnlyEnabled = False

            End If

            AllVendorNames = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.AsEnumerable().Select(Function(s) s.Field(Of String)(MarketDetailsColumns.VendorName.ToString)).Distinct.ToList

            SelectedVendorNames = New Generic.List(Of String)

            For Each RowIndex In RowIndexes.OrderBy(Function(RI) RI)

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketVendorOrderedLines.Any(Function(Entity) Entity.VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString) AndAlso
                                                                                                                                Entity.LineNumber = DataRow(MarketDetailsColumns.LineNumber.ToString) AndAlso
                                                                                                                                Entity.MakegoodNumber = DataRow(MarketDetailsColumns.MakegoodNumber.ToString) AndAlso
                                                                                                                                Entity.MadegoodNumber = DataRow(MarketDetailsColumns.MadegoodNumber.ToString)) Then

                    AnySelectedLinesHaveOrders = True

                End If

                If DataRow(MarketDetailsColumns.MadegoodNumber.ToString) > 0 Then

                    AnySelectedMadegoodRows = True

                End If

                If DataRow(MarketDetailsColumns.MakegoodNumber.ToString) > 0 Then

                    AnySelectedMakegoodRows = True

                End If

                If Not SelectedVendorNames.Contains(DataRow(MarketDetailsColumns.VendorName.ToString)) Then

                    SelectedVendorNames.Add(DataRow(MarketDetailsColumns.VendorName.ToString))

                End If

                'If AnySelectedMakegoodRows = True AndAlso AnySelectedLinesHaveOrders = True AndAlso AnySelectedMadegoodRows = True Then

                '    Exit For

                'End If

                If SelectedRowCount = 1 Then

                    LineNumberRowCount = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Select("VendorCode = '" & DataRow(MarketDetailsColumns.VendorCode.ToString) & "' AND LineNumber = " & DataRow(MarketDetailsColumns.LineNumber.ToString)).Count

                End If

            Next

            If (From Entity In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses
                Where Entity.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferSubmitted AndAlso
                      SelectedVendorNames.Contains(Entity.VendorName)).Any Then

                MediaBroadcastWorksheetMarketDetailsViewModel.CreateOrders_SelectedLinesOnlyEnabled = MediaBroadcastWorksheetMarketDetailsViewModel.IsInAcceptMakegoodMode

            End If

            'If (From Entity In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses
            '    Where Entity.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferSubmitted AndAlso
            '          AllVendorNames.Contains(Entity.VendorName)).Any Then

            '    MediaBroadcastWorksheetMarketDetailsViewModel.CreateOrdersEnabled = MediaBroadcastWorksheetMarketDetailsViewModel.IsInAcceptMakegoodMode

            'End If

            'MediaBroadcastWorksheetMarketDetailsViewModel.VendorMakegoodAvailable = SelectedVendorNames.Count = 1 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber AndAlso
            '                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(VMS) SelectedVendorNames.Contains(VMS.VendorName) AndAlso
            '                                                                                                                                          VMS.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferSubmitted).Any AndAlso
            '                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(VMS) SelectedVendorNames.Contains(VMS.VendorName) AndAlso
            '                                                                                                                                          (VMS.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferAccepted OrElse
            '                                                                                                                                           VMS.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferRejected)).Count = 0

            MediaBroadcastWorksheetMarketDetailsViewModel.VendorMakegoodAvailable = SelectedVendorNames.Count = 1 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(VMS) SelectedVendorNames.Contains(VMS.VendorName) AndAlso
                                                                                                                                                      VMS.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferSubmitted).Any AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(VMS) SelectedVendorNames.Contains(VMS.VendorName)).OrderByDescending(Function(S) S.Date).First.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferSubmitted

            'If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(VMS) SelectedVendorNames.Contains(VMS.VendorName) AndAlso
            '                                                                                                                 VMS.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferSubmitted).Any AndAlso
            '    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(VMS) SelectedVendorNames.Contains(VMS.VendorName) AndAlso
            '                                                                                                                  (VMS.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferAccepted OrElse
            '                                                                                                                  VMS.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferRejected)).Count = 0 Then

            '    AnyVendorMakegoodAvailable = True

            'End If

            If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(VMS) SelectedVendorNames.Contains(VMS.VendorName) AndAlso
                                                                                                                             VMS.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferSubmitted).Any AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(VMS) SelectedVendorNames.Contains(VMS.VendorName)).OrderByDescending(Function(S) S.Date).First.Status = Database.Entities.Methods.OrderStatusType.MakegoodOfferSubmitted Then

                AnyVendorMakegoodAvailable = True

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_AddEnabled = Not AnyVendorMakegoodAvailable AndAlso (SelectedRowCount = 1 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber)
            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_DeleteEnabled = Not AnyVendorMakegoodAvailable AndAlso (SelectedRowCount > 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso
                                                                                           MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber AndAlso AnySelectedLinesHaveOrders = False)
            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_AutoFillEnabled = Not AnyVendorMakegoodAvailable AndAlso (SelectedRowCount > 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso
                                                                                             MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber)
            'MediaBroadcastWorksheetMarketDetailsViewModel.Details_CreateRevisionEnabled = (SelectedRowCount > 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber)

            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_CopyEnabled = Not AnyVendorMakegoodAvailable AndAlso (SelectedRowCount > 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso
                                                                                         MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber AndAlso AnySelectedMakegoodRows = False AndAlso AnySelectedMadegoodRows = False)

            MediaBroadcastWorksheetMarketDetailsViewModel.AnySelectedLinesHaveOrders = AnySelectedLinesHaveOrders

            'If MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket Then

            '	MarketDetails_RefreshsMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            'End If

            MediaBroadcastWorksheetMarketDetailsViewModel.EditVendorEnabled = (SelectedRowCount = 1 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket)

            MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodViewDetailsEnabled = (SelectedRowCount = 1 AndAlso LineNumberRowCount > 1)

        End Sub
        Public Function MarketDetails_SelectedRowVendorName(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex As Integer) As String

            'objects
            Dim VendorName As String = String.Empty

            If RowIndex > -1 Then

                VendorName = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.VendorName.ToString)

            End If

            MarketDetails_SelectedRowVendorName = VendorName

        End Function
        Public Sub MarketDetails_SetDays(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                         RowIndex As Integer, ByRef EnteredDays As String, ByRef IsValid As Boolean, RefreshRatingsAndTotalAmounts As Boolean)

            'objects
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim DaysAndTimeController As AdvantageFramework.Controller.DaysAndTimeController = Nothing

            DaysAndTimeController = New AdvantageFramework.Controller.DaysAndTimeController(Me.Session)

            DaysAndTime = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.DaysAndTime.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                DaysAndTime.IsUsing3rdPartyData = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DaysAndTime.IsUsing3rdPartyData = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.HasValue

            End If

            DaysAndTimeController.ParseDays(DaysAndTime, EnteredDays, IsValid)

            If IsValid Then

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex).SetColumnError(MarketDetailsColumns.Days.ToString, String.Empty)

                If RefreshRatingsAndTotalAmounts Then

                    MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))
                    MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))

                    MarketDetails_RefreshRatingRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)
                    MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
                    'MarketDetails_RefreshsMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

                End If

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex).SetColumnError(MarketDetailsColumns.Days.ToString, "Invalid Days Entry")

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.DaysAndTime.ToString) = DaysAndTime

        End Sub
        Public Sub MarketDetails_SetStartTime(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                              RowIndex As Integer, ByRef Time As String, ByRef IsValid As Boolean, RefreshRatingsAndTotalAmounts As Boolean)

            'objects
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim DaysAndTimeController As AdvantageFramework.Controller.DaysAndTimeController = Nothing
            Dim IsEntityValid As Boolean = True

            DaysAndTimeController = New AdvantageFramework.Controller.DaysAndTimeController(Me.Session)

            DaysAndTime = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.DaysAndTime.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                DaysAndTime.IsUsing3rdPartyData = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DaysAndTime.IsUsing3rdPartyData = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.HasValue

            End If

            If Time IsNot Nothing Then

                Time = Time.Trim

            End If

            DaysAndTimeController.ParseTime(DaysAndTime, True, Time, IsValid)

            If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.EndTime.ToString) Is System.DBNull.Value OrElse
                    String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.EndTime.ToString)) Then

                DaysAndTime.EndTime = String.Empty

            Else

                DaysAndTime.EndTime = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.EndTime.ToString)

            End If

            If IsValid Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        Me.ValidateDTO(DbContext, DataContext, DaysAndTime, IsEntityValid)

                    End Using

                End Using

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex).SetColumnError(MarketDetailsColumns.StartTime.ToString, DaysAndTime.LoadErrorText(AdvantageFramework.DTO.DaysAndTime.Properties.StartTime.ToString))
                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex).SetColumnError(MarketDetailsColumns.EndTime.ToString, DaysAndTime.LoadErrorText(AdvantageFramework.DTO.DaysAndTime.Properties.EndTime.ToString))

                If IsEntityValid Then

                    If RefreshRatingsAndTotalAmounts Then

                        MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))
                        MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))

                        MarketDetails_RefreshRatingRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)
                        MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
                        'MarketDetails_RefreshsMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

                    End If

                End If

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex).SetColumnError(MarketDetailsColumns.StartTime.ToString, "Invalid Time Entry")

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.DaysAndTime.ToString) = DaysAndTime

        End Sub
        Public Sub MarketDetails_SetEndTime(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                            RowIndex As Integer, ByRef Time As String, ByRef IsValid As Boolean, RefreshRatingsAndTotalAmounts As Boolean)

            'objects
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim DaysAndTimeController As AdvantageFramework.Controller.DaysAndTimeController = Nothing
            Dim IsEntityValid As Boolean = True

            DaysAndTimeController = New AdvantageFramework.Controller.DaysAndTimeController(Me.Session)

            DaysAndTime = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.DaysAndTime.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                DaysAndTime.IsUsing3rdPartyData = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DaysAndTime.IsUsing3rdPartyData = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.HasValue

            End If

            If Time IsNot Nothing Then

                Time = Time.Trim

            End If

            DaysAndTimeController.ParseTime(DaysAndTime, False, Time, IsValid)

            If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.StartTime.ToString) Is System.DBNull.Value OrElse
                    String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.StartTime.ToString)) Then

                DaysAndTime.StartTime = String.Empty

            Else

                DaysAndTime.StartTime = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.StartTime.ToString)

            End If

            If IsValid Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        Me.ValidateDTO(DbContext, DataContext, DaysAndTime, IsEntityValid)

                    End Using

                End Using

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex).SetColumnError(MarketDetailsColumns.StartTime.ToString, DaysAndTime.LoadErrorText(AdvantageFramework.DTO.DaysAndTime.Properties.StartTime.ToString))
                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex).SetColumnError(MarketDetailsColumns.EndTime.ToString, DaysAndTime.LoadErrorText(AdvantageFramework.DTO.DaysAndTime.Properties.EndTime.ToString))

                If IsEntityValid Then

                    If RefreshRatingsAndTotalAmounts Then

                        MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))
                        MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({RowIndex}))

                        MarketDetails_RefreshRatingRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)
                        MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
                        'MarketDetails_RefreshsMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

                    End If

                End If

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex).SetColumnError(MarketDetailsColumns.EndTime.ToString, "Invalid Time Entry")

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.DaysAndTime.ToString) = DaysAndTime

        End Sub
        Public Sub MarketDetails_SelectedWorksheetMarketChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, WorksheetMarketID As Integer)

            'objects
            Dim MaxRevisionNumber As Integer = 0
            Dim SecondaryMediaDemographicID As Nullable(Of Integer) = Nothing
            Dim SubmarketMarketCodes() As String = Nothing
            Dim UniverseYear As Integer = 0
            Dim CanadaUniverses As Generic.List(Of AdvantageFramework.Database.Entities.CanadaUniverse) = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket = Nothing
            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo = Nothing
            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketShowVendorDemo = False
            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets = New Generic.List(Of DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket)

            If WorksheetMarketID > 0 Then

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets.SingleOrDefault(Function(Entity) Entity.ID = WorksheetMarketID)

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows.Clear()
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Clear()
            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers.Clear()

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                    MarketDetails_RefreshWorksheetMarkets(MediaBroadcastWorksheetMarketDetailsViewModel)

                Else

                    MarketDetails_LoadNielsenTVBooks(MediaBroadcastWorksheetMarketDetailsViewModel)

                    MarketDetails_LoadWorksheetMarketNielsenTVBooks(MediaBroadcastWorksheetMarketDetailsViewModel)

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                MarketDetails_LoadNielsenRadioPeriods(MediaBroadcastWorksheetMarketDetailsViewModel)

                MarketDetails_LoadWorksheetMarketNielsenRadioPeriods(MediaBroadcastWorksheetMarketDetailsViewModel)

                'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then



            End If

            MarketDetails_ClearMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, -1)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID).Select(Function(Entity) Entity.RevisionNumber).Distinct.ToList

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers.Count > 0 Then

                        MaxRevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers.Max

                    Else

                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumbers.Add(0)

                        MaxRevisionNumber = 0

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets = DbContext.MediaBroadcastWorksheetMarketSubmarkets.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket(Entity)).ToList

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.OrderBy(Function(Entity) Entity.Order).ToList

                        MarketDetails_LoadWorksheetMarketDetailSubmarketDemoColumnNames(MediaBroadcastWorksheetMarketDetailsViewModel)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.IsCanadianWorksheet Then

                            SubmarketMarketCodes = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.Select(Function(Entity) Entity.MarketCode).Distinct.ToArray
                            UniverseYear = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate.Year

                            CanadaUniverses = DbContext.CanadaUniverses.Where(Function(Entity) Entity.Year = UniverseYear AndAlso SubmarketMarketCodes.Contains(Entity.MarketCode)).ToList

                            MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverses = CanadaUniverses.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverse(Entity)).ToList

                        Else

                            MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverses = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverse)

                        End If

                    Else

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket)
                        MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverses = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverse)

                    End If

                End Using

                MarketDetails_LoadDataEntryRows(MediaBroadcastWorksheetMarketDetailsViewModel, MaxRevisionNumber)
                MarketDetails_LoadOrderedLineNumbers(MediaBroadcastWorksheetMarketDetailsViewModel)
                MarketDetails_CreateHiatusDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, MaxRevisionNumber)
                MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, True)

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    MarketDetails_LoadShareBooks(MediaBroadcastWorksheetMarketDetailsViewModel)
                    MarketDetails_LoadHUTPUTBooks(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID)

                End If

                MarketDetails_LoadStations(MediaBroadcastWorksheetMarketDetailsViewModel)
                MarketDetails_CreateMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, False)

                SecondaryMediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID

                If SecondaryMediaDemographicID.HasValue Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos.SingleOrDefault(Function(Entity) Entity.MediaDemographicID = SecondaryMediaDemographicID.Value)

                End If

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketShowVendorDemo = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ShowVendorDemos

            End If

            MarketDetails_ClearChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_ChangeRevisionNumber(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, RevisionNumber As Integer)

            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows.Clear()
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Clear()

            MarketDetails_ClearMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, -1)

            MarketDetails_LoadDataEntryRows(MediaBroadcastWorksheetMarketDetailsViewModel, RevisionNumber)
            MarketDetails_CreateHiatusDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, RevisionNumber)
            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, True)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                MarketDetails_LoadShareBooks(MediaBroadcastWorksheetMarketDetailsViewModel)
                MarketDetails_LoadHUTPUTBooks(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID)

            End If

            MarketDetails_LoadStations(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_CreateMeasurementTrendsDataTableDefaultRows(MediaBroadcastWorksheetMarketDetailsViewModel, False)

            MarketDetails_ClearChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

            If MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber = False AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID.HasValue Then

                MarketDetails_SelectedWorksheetMarketSecondaryDemoChanged(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID.Value)

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_AddEnabled = False
            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_DeleteEnabled = False
            MediaBroadcastWorksheetMarketDetailsViewModel.CreateOrdersEnabled = MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber
            MediaBroadcastWorksheetMarketDetailsViewModel.CreateOrders_SelectedLinesOnlyEnabled = False
            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_CopyEnabled = False
            MediaBroadcastWorksheetMarketDetailsViewModel.AnySelectedLinesHaveOrders = False
            MediaBroadcastWorksheetMarketDetailsViewModel.ScheduleDetails_AutoFillEnabled = False

        End Sub
        Public Sub MarketDetails_SelectedWorksheetMarketSecondaryDemoChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, MediaDemographicID As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim CalculateProrateSecondary As Boolean = False
            Dim RowIndexes As Generic.List(Of Integer) = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo = Nothing
            'MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID = Nothing

            If MediaDemographicID > 0 Then

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos.SingleOrDefault(Function(Entity) Entity.MediaDemographicID = MediaDemographicID)
                'MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID = MediaDemographicID

            End If

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                RowIndexes = New Generic.List(Of Integer)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    RowIndexes.Add(DataTableRowIndex)

                Next

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                    MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                    MarketDetails_LoadComscoreRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes, True)

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                    MarketDetails_LoadNielsenPuertoRicoRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

                End If

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(DataTableRowIndex)

                    CalculateProrateSecondary = False

                    If (DataRow(MarketDetailsColumns.PrimaryRating.ToString) <> DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) OrElse
                            DataRow(MarketDetailsColumns.PrimaryShare.ToString) <> DataRow(MarketDetailsColumns.BookPrimaryShare.ToString)) AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.ProrateSecondaryDemosToPrimary AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetSecondaryDemo Then

                        CalculateProrateSecondary = True

                    End If

                    MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

                    If CalculateProrateSecondary Then

                        DataRow(MarketDetailsColumns.SecondaryRating.ToString) = MarketDetails_CalculateProrateSecondaryRating(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.BookSecondaryRating.ToString), DataRow(MarketDetailsColumns.BookPrimaryRating.ToString), DataRow(MarketDetailsColumns.PrimaryRating.ToString))
                        DataRow(MarketDetailsColumns.SecondaryShare.ToString) = MarketDetails_CalculateProrateSecondaryShare(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.BookSecondaryShare.ToString), DataRow(MarketDetailsColumns.BookPrimaryShare.ToString), DataRow(MarketDetailsColumns.PrimaryShare.ToString))

                    End If

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowSecondaryDemos = False

            End If

        End Sub
        Public Sub MarketDetails_SelectedWorksheetMarketShowVendorDemoChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, ShowVendorDemo As Boolean)

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketShowVendorDemo = ShowVendorDemo

        End Sub
        Public Sub MarketDetails_ShowPrimaryDemosChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, ShowPrimaryDemos As Boolean)

            MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowPrimaryDemos = ShowPrimaryDemos

        End Sub
        Public Sub MarketDetails_ShowSecondaryDemosChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, ShowSecondaryDemos As Boolean)

            MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowSecondaryDemos = ShowSecondaryDemos

        End Sub
        Public Sub MarketDetails_ChooseColumnsChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, ChooseColumns As Boolean)

            MediaBroadcastWorksheetMarketDetailsViewModel.GridOptions_ChooseColumns = ChooseColumns

        End Sub
        Public Sub MarketDetails_RefreshWorksheetMarkets(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim MediaBroadcastWorksheetID As Integer = 0
            Dim SelectedWorksheetMarketID As Integer = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                SelectedWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

            End If

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID

                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                                      Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                                      Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).ToList

                DbContext.Database.Connection.Close()

            End Using

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket = Nothing

            If SelectedWorksheetMarketID > 0 Then

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets.SingleOrDefault(Function(Entity) Entity.ID = SelectedWorksheetMarketID)

            End If

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket Is Nothing Then

                MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows.Clear()
                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Clear()

            End If

        End Sub
        Public Sub MarketDetails_UserEntryChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.SaveEnabled = True

            MediaBroadcastWorksheetMarketDetailsViewModel.CreateRevisionEnabled = (MediaBroadcastWorksheetMarketDetailsViewModel.SaveEnabled = False AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count > 0 AndAlso
                                                                                   MarketDetails_CheckOrderStatus(MediaBroadcastWorksheetMarketDetailsViewModel) <> AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

            MediaBroadcastWorksheetMarketDetailsViewModel.DeleteRevisionEnabled = (MediaBroadcastWorksheetMarketDetailsViewModel.SaveEnabled = False AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber > 0 AndAlso
                                                                                   MarketDetails_AnyRowsHaveOrders(MediaBroadcastWorksheetMarketDetailsViewModel) = False)

        End Sub
        Public Sub MarketDetails_ClearChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.SaveEnabled = False

            MediaBroadcastWorksheetMarketDetailsViewModel.CreateRevisionEnabled = (MediaBroadcastWorksheetMarketDetailsViewModel.SaveEnabled = False AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count > 0 AndAlso
                                                                                   MarketDetails_CheckOrderStatus(MediaBroadcastWorksheetMarketDetailsViewModel) <> AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)


            MediaBroadcastWorksheetMarketDetailsViewModel.DeleteRevisionEnabled = (MediaBroadcastWorksheetMarketDetailsViewModel.SaveEnabled = False AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.IsMaxRevisionNumber AndAlso
                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber > 0 AndAlso
                                                                                   MarketDetails_AnyRowsHaveOrders(MediaBroadcastWorksheetMarketDetailsViewModel) = False)

        End Sub
        Public Sub MarketDetails_FilterStringChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                     FilterString As String, DataTableFriendlyFilterString As String, RefreshGoals As Boolean)

            MediaBroadcastWorksheetMarketDetailsViewModel.FilterString = FilterString

            MediaBroadcastWorksheetMarketDetailsViewModel.DataView.RowFilter = DataTableFriendlyFilterString

            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RefreshGoals)

        End Sub
        Public Sub MarketDetails_LoadShareBooks(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks.Count > 0 Then

                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketShareBooks = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks.ToList

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketShareBooks = New List(Of DTO.Media.SpotTV.NielsenTVBook)

            End If

        End Sub
        Public Sub MarketDetails_LoadHUTPUTBooks(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                 SharebookNielsenTVBookID As Nullable(Of Integer))

            'objects
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim NielsenTVBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing
            Dim IsImpactBook As Boolean = False
            Dim Ethnicity As String = String.Empty
            Dim Exclusion As String = String.Empty

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks.Count > 0 Then

                'SharebookNielsenTVBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID

                If SharebookNielsenTVBookID.HasValue Then

                    NielsenTVBook = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks.Where(Function(Entity) Entity.ID = SharebookNielsenTVBookID.Value).FirstOrDefault

                    If NielsenTVBook IsNot Nothing AndAlso NielsenTVBook.ReportingService = "7" Then

                        IsImpactBook = True

                    End If

                    If NielsenTVBook IsNot Nothing Then

                        Ethnicity = NielsenTVBook.Ethnicity
                        Exclusion = NielsenTVBook.Exclusion

                    End If

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketHUTPUTBooks = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks.Where(Function(Entity) Entity.ID <> SharebookNielsenTVBookID.Value AndAlso
                                                                                                                                                                                                  ((Entity.ReportingService = "7" And IsImpactBook = True) OrElse
                                                                                                                                                                                                   (Entity.ReportingService <> "7" And IsImpactBook = False)) AndAlso
                                                                                                                                                                                                  Entity.Ethnicity = Ethnicity AndAlso
                                                                                                                                                                                                  Entity.Exclusion = Exclusion).ToList

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketHUTPUTBooks = New List(Of DTO.Media.SpotTV.NielsenTVBook)

                End If

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketHUTPUTBooks = New List(Of DTO.Media.SpotTV.NielsenTVBook)

            End If

        End Sub
        Public Sub MarketDetails_ShareBookSelectionChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                           SharebookNielsenTVBookID As Integer, RowIndex As Integer)

            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If SharebookNielsenTVBookID > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID = SharebookNielsenTVBookID
                    MarketDetails_LoadHUTPUTBooks(MediaBroadcastWorksheetMarketDetailsViewModel, SharebookNielsenTVBookID)

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID = Nothing
                    MarketDetails_LoadHUTPUTBooks(MediaBroadcastWorksheetMarketDetailsViewModel, Nothing)

                End If

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue = False OrElse
                        (MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue AndAlso
                         MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso
                         MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value) Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID = Nothing

                End If

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                    RowIndexes = New Generic.List(Of Integer)

                    For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                        RowIndexes.Add(DataTableRowIndex)

                    Next

                    MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)
                    MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

                    For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                        MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

                    Next

                Else

                    For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                        MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

                    Next

                End If

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

                MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            End If

        End Sub
        Public Sub MarketDetails_HUTPUTBookSelectionChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                            HUTPUTNielsenTVBookID As Integer, RowIndex As Integer)

            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If HUTPUTNielsenTVBookID > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID = HUTPUTNielsenTVBookID

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID = Nothing

                End If

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

                RowIndexes = New Generic.List(Of Integer)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    RowIndexes.Add(DataTableRowIndex)

                Next

                MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)
                MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

                MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            End If

        End Sub
        Public Sub MarketDetails_NielsenRadioBook1Changed(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                          NielsenRadioBookID As Integer, RowIndex As Integer)

            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If NielsenRadioBookID > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1 = NielsenRadioBookID

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5 = Nothing

                End If

                RowIndexes = New Generic.List(Of Integer)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    RowIndexes.Add(DataTableRowIndex)

                Next

                MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)
                MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

                Next

                MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            End If

        End Sub
        Public Sub MarketDetails_NielsenRadioBook2Changed(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                          NielsenRadioBookID As Integer, RowIndex As Integer)

            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If NielsenRadioBookID > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2 = NielsenRadioBookID

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5 = Nothing

                End If

                RowIndexes = New Generic.List(Of Integer)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    RowIndexes.Add(DataTableRowIndex)

                Next

                MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)
                MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

                Next

                MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            End If

        End Sub
        Public Sub MarketDetails_NielsenRadioBook3Changed(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                          NielsenRadioBookID As Integer, RowIndex As Integer)

            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If NielsenRadioBookID > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3 = NielsenRadioBookID

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5 = Nothing

                End If

                RowIndexes = New Generic.List(Of Integer)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    RowIndexes.Add(DataTableRowIndex)

                Next

                MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)
                MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

                Next

                MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            End If

        End Sub
        Public Sub MarketDetails_NielsenRadioBook4Changed(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                          NielsenRadioBookID As Integer, RowIndex As Integer)

            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If NielsenRadioBookID > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4 = NielsenRadioBookID

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4 = Nothing
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5 = Nothing

                End If

                RowIndexes = New Generic.List(Of Integer)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    RowIndexes.Add(DataTableRowIndex)

                Next

                MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)
                MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

                Next

                MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            End If

        End Sub
        Public Sub MarketDetails_NielsenRadioBook5Changed(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                          NielsenRadioBookID As Integer, RowIndex As Integer)

            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If NielsenRadioBookID > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5 = NielsenRadioBookID

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5 = Nothing

                End If

                RowIndexes = New Generic.List(Of Integer)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    RowIndexes.Add(DataTableRowIndex)

                Next

                MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)
                MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

                For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                    MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

                Next

                MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            End If

        End Sub
        Public Function MarketDetails_CreateImportOrderList(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                            MediaBroadcastWorksheetMarketCreateOrdersViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel,
                                                            RevisionNumber As Integer, RowIndexes As Generic.List(Of Integer)) As Generic.List(Of AdvantageFramework.Media.Classes.ImportOrder)

            'objects
            Dim ImportOrders As Generic.List(Of AdvantageFramework.Media.Classes.ImportOrder) = Nothing
            Dim ImportOrder As AdvantageFramework.Media.Classes.ImportOrder = Nothing
            Dim MediaBroadcastWorsheetMarketDetailIDs As Generic.List(Of Integer) = Nothing
            Dim WorksheetID As Integer = 0
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim WorksheetMarketOrderData As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderData = Nothing
            Dim WorksheetMarketOrderDatas As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderData) = Nothing
            Dim WorksheetMarketOrder As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrder = Nothing
            Dim WorksheetMarketOrders As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrder) = Nothing
            Dim WorksheetMarketOrderDates As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderDate) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing
            Dim BroadcastCalendarWeeks As Generic.List(Of AdvantageFramework.Classes.Media.BroadcastCalendarWeek) = Nothing
            Dim MonthWeeks As Generic.List(Of Integer) = Nothing
            Dim HiatusDates As Generic.List(Of Date) = Nothing
            Dim ImportOrderLineNumber As Integer = 0
            Dim SaveDataLineNumber As Integer = 0
            Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim VendorMediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate) = Nothing
            Dim OrderLineMediaBroadcastWorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate) = Nothing
            Dim CurrentRevisionMediaBroadcastWorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate) = Nothing
            Dim LastRowIndex As Integer = 0
            Dim VendorOrderLine As Integer = 1
            Dim MediaBroadcastWorksheetMarketDetailDateIDsList As Generic.List(Of Integer) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDateIDs() As Integer = Nothing
            Dim SavedVendorOrderLine As Integer = 0
            Dim UseProductAmounts As Boolean = False
            Dim ProductUsesNetAmount As Boolean = False
            Dim ProductRebateAmount As Decimal = 0
            Dim ProductMarkupAmount As Decimal = 0
            Dim ProductMediaOverrides As AdvantageFramework.Database.Entities.ProductMediaOverrides = Nothing
            Dim CommissionAmount As Decimal = 0
            Dim OrderLines As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderLine) = Nothing
            Dim OrderLine As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderLine = Nothing
            Dim UseVendorsRateType As Boolean = False

            MediaBroadcastWorsheetMarketDetailIDs = New Generic.List(Of Integer)

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                If DataRow(MarketDetailsColumns.OnHold.ToString) = False AndAlso RowIndexes.Contains(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow)) Then

                    MediaBroadcastWorsheetMarketDetailIDs.Add(DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString))

                End If

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.GenerateApproveMediaBroadcastWorsheetMarketDetailIDs = MediaBroadcastWorsheetMarketDetailIDs

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                BroadcastCalendarWeeks = DbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.BroadcastCalendarWeek)("EXEC dbo.advsp_broadcast_calendar_load").ToList

                HiatusDates = New Generic.List(Of Date)

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = True Then

                        HiatusDates.Add(DetailDate)

                    End If

                Next

                WorksheetMarketOrderDates = GetWorksheetDatesForOrder(DbContext, BroadcastCalendarWeeks, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet,
                                                                      MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD).ToList,
                                                                      MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate, MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate,
                                                                      MediaBroadcastWorksheetMarketCreateOrdersViewModel.CreateOrdersByWeek)

                WorksheetMarketOrderDatas = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderData)
                '=========================
                WorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.ID
                MediaBroadcastWorksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Campaign").Include("Product").FirstOrDefault(Function(Entity) Entity.ID = WorksheetID)

                Try

                    ProductMediaOverrides = AdvantageFramework.Database.Procedures.ProductMediaOverrides.LoadByClientDivisionProduct(DbContext, MediaBroadcastWorksheet.Product.ClientCode, MediaBroadcastWorksheet.Product.DivisionCode, MediaBroadcastWorksheet.Product.Code).SingleOrDefault(Function(Entity) Entity.MediaType = MediaBroadcastWorksheet.MediaTypeCode AndAlso Entity.SalesClassCode = MediaBroadcastWorksheet.SalesClassCode)

                Catch ex As Exception
                    ProductMediaOverrides = Nothing
                End Try

                If ProductMediaOverrides IsNot Nothing Then

                    If MediaBroadcastWorksheet.MediaTypeCode = "R" Then

                        If MediaBroadcastWorksheet.Product.RadioBillNet = 1 Then

                            ProductUsesNetAmount = True

                        Else

                            ProductUsesNetAmount = False

                        End If

                    ElseIf MediaBroadcastWorksheet.MediaTypeCode = "T" Then

                        If MediaBroadcastWorksheet.Product.TelevisionBillNet = 1 Then

                            ProductUsesNetAmount = True

                        Else

                            ProductUsesNetAmount = False

                        End If

                    End If

                    ProductRebateAmount = ProductMediaOverrides.RebatePercent.GetValueOrDefault(0)
                    ProductMarkupAmount = ProductMediaOverrides.MarkupPercent.GetValueOrDefault(0)

                Else

                    If MediaBroadcastWorksheet.MediaTypeCode = "R" Then

                        If MediaBroadcastWorksheet.Product.RadioBillNet = 1 Then

                            ProductUsesNetAmount = True
                            ProductRebateAmount = 0
                            ProductMarkupAmount = 0

                        Else

                            ProductUsesNetAmount = False
                            ProductRebateAmount = MediaBroadcastWorksheet.Product.RadioRebate.GetValueOrDefault(0)
                            ProductMarkupAmount = MediaBroadcastWorksheet.Product.RadioMarkup.GetValueOrDefault(0)

                        End If

                    ElseIf MediaBroadcastWorksheet.MediaTypeCode = "T" Then

                        If MediaBroadcastWorksheet.Product.TelevisionBillNet = 1 Then

                            ProductUsesNetAmount = True
                            ProductRebateAmount = 0
                            ProductMarkupAmount = 0

                        Else

                            ProductUsesNetAmount = False
                            ProductRebateAmount = MediaBroadcastWorksheet.Product.TelevisionRebate.GetValueOrDefault(0)
                            ProductMarkupAmount = MediaBroadcastWorksheet.Product.TelevisionMarkup.GetValueOrDefault(0)

                        End If

                    End If

                End If

                Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    UseVendorsRateType = AdvantageFramework.Agency.LoadVendorsRateTypeSetting(DataContext)

                End Using

                '=========================
                MediaBroadcastWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID)

                DbContext.TryAttach(MediaBroadcastWorksheetMarket)

                DbContext.Entry(MediaBroadcastWorksheetMarket).Reference("Market").Load()
                '=========================
                MediaBroadcastWorksheetMarketDetails = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarket.ID).Include("Daypart").Include("Vendor").Include("MediaBroadcastWorksheetMarketDetailDates") _
                                                                                                                                 .Where(Function(Entity) Entity.RevisionNumber <= RevisionNumber).ToList

                For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) MediaBroadcastWorsheetMarketDetailIDs.Contains(Entity.ID)).ToList

                    'MediaBroadcastWorksheetMarketDetailDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketDetailID(DbContext, MediaBroadcastWorksheetMarketDetail.ID).ToList

                    For Each WorksheetMarketOrderDate In WorksheetMarketOrderDates

                        WorksheetMarketOrderData = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketOrderData

                        WorksheetMarketOrderData.MediaBroadcastWorksheet = MediaBroadcastWorksheet
                        WorksheetMarketOrderData.MediaBroadcastWorksheetMarket = MediaBroadcastWorksheetMarket
                        WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetail
                        WorksheetMarketOrderData.WorksheetMarketOrderDate = WorksheetMarketOrderDate.Clone

                        For Each WorksheetMarketOrderDateData In WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas

                            MediaBroadcastWorksheetMarketDetailDate = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) WorksheetMarketOrderDateData.Date = Entity.Date).SingleOrDefault

                            If MediaBroadcastWorksheetMarketDetailDate IsNot Nothing Then

                                WorksheetMarketOrderDateData.MediaBroadcastWorksheetMarketDetailDates.Add(MediaBroadcastWorksheetMarketDetailDate)

                            End If

                        Next

                        WorksheetMarketOrderDatas.Add(WorksheetMarketOrderData)

                    Next

                Next

                ImportOrders = New Generic.List(Of AdvantageFramework.Media.Classes.ImportOrder)

                For Each WorksheetMarketOrderData In WorksheetMarketOrderDatas.OrderBy(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetail.VendorCode).ThenBy(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetail.LineNumber).ThenBy(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetail.MakegoodNumber).ThenBy(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetail.MadegoodNumber).ThenBy(Function(Entity) Entity.WorksheetMarketOrderDate.StartDate)

                    If MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.VendorCode = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.VendorCode AndAlso
                                                                                   Entity.LineNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.LineNumber AndAlso
                                                                                   Entity.MakegoodNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.MakegoodNumber AndAlso
                                                                                   Entity.MadegoodNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.MadegoodNumber AndAlso
                                                                                   Entity.RevisionNumber <= RevisionNumber).SelectMany(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) Entity.Date >= WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate AndAlso
                                                                                                                                                                                                                                Entity.Date <= WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate AndAlso
                                                                                                                                                                                                                                Entity.LinkID.HasValue AndAlso Entity.OrderNumber.HasValue).Any OrElse
                            WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.SelectMany(Function(WMODD) WMODD.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) Entity.IsHiatus = False AndAlso (Entity.Spots <> 0 OrElse Entity.MakegoodSpots <> 0)).Any Then

                        For Each DateRate In MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.VendorCode = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.VendorCode AndAlso
                                                                                                         Entity.LineNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.LineNumber AndAlso
                                                                                                         Entity.MakegoodNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.MakegoodNumber AndAlso
                                                                                                         Entity.MadegoodNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.MadegoodNumber).SelectMany(Function(WMODD) WMODD.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) Entity.Date >= WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate AndAlso
                                                                                                                                                                                                                                                                                                                Entity.Date <= WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate).Select(Function(Entity) Entity.Rate).Distinct

                            MediaBroadcastWorksheetMarketDetailDates = MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.VendorCode = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.VendorCode AndAlso
                                                                                                                                   Entity.LineNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.LineNumber AndAlso
                                                                                                                                   Entity.MakegoodNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.MakegoodNumber AndAlso
                                                                                                                                   Entity.MadegoodNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.MadegoodNumber).SelectMany(Function(WMODD) WMODD.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) Entity.Date >= WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate AndAlso
                                                                                                                                                                                                                                                                                                                                          Entity.Date <= WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate AndAlso
                                                                                                                                                                                                                                                                                                                                          Entity.Rate = DateRate).ToList

                            If MediaBroadcastWorksheetMarketDetailDates IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailDates.Count > 0 Then

                                OrderLines = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderLine)

                                For Each OrderLineNumber In MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) New With {.OrderNumber = Entity.OrderNumber.GetValueOrDefault(0),
                                                                                                                                       .LineNumber = Entity.OrderLineNumber.GetValueOrDefault(0)}).Distinct.ToList

                                    If OrderLines.Any(Function(Entity) Entity.OrderNumber = OrderLineNumber.OrderNumber AndAlso Entity.LineNumber = OrderLineNumber.LineNumber) = False Then

                                        OrderLines.Add(New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderLine With {.OrderNumber = OrderLineNumber.OrderNumber,
                                                                                                                                    .LineNumber = OrderLineNumber.LineNumber})

                                    End If

                                Next

                                If OrderLines.Count > 1 Then

                                    For Each OrderLine In OrderLines.ToList

                                        If OrderLine.OrderNumber = 0 AndAlso OrderLine.LineNumber = 0 Then

                                            OrderLines.Remove(OrderLine)

                                        End If

                                    Next

                                End If

                                For Each OrderLine In OrderLines

                                    OrderLineMediaBroadcastWorksheetMarketDetailDates = MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.OrderNumber.GetValueOrDefault(0) = OrderLine.OrderNumber AndAlso Entity.OrderLineNumber.GetValueOrDefault(0) = OrderLine.LineNumber).ToList
                                    CurrentRevisionMediaBroadcastWorksheetMarketDetailDates = MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetail.RevisionNumber = RevisionNumber).ToList

                                    ImportOrder = New AdvantageFramework.Media.Classes.ImportOrder

                                    ImportOrder.MediaPlanMarketCode = WorksheetMarketOrderData.MediaBroadcastWorksheetMarket.MarketCode
                                    ImportOrder.MediaPlanMarketDescription = WorksheetMarketOrderData.MediaBroadcastWorksheetMarket.Market.Description

                                    ImportOrder.ImportSource = AdvantageFramework.Media.ImportSource.BroadcastWorksheet
                                    ImportOrder.MediaPlanOrderDescription = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Vendor.Name & " - " & WorksheetMarketOrderData.MediaBroadcastWorksheet.Name

                                    If ImportOrder.MediaPlanOrderDescription.Length > 40 Then

                                        ImportOrder.MediaPlanOrderDescription = ImportOrder.MediaPlanOrderDescription.Substring(0, 40)

                                    End If

                                    ImportOrder.MediaType = WorksheetMarketOrderData.MediaBroadcastWorksheet.MediaTypeCode
                                    ImportOrder.SalesClassCode = WorksheetMarketOrderData.MediaBroadcastWorksheet.SalesClassCode
                                    ImportOrder.ClientPO = WorksheetMarketOrderData.MediaBroadcastWorksheetMarket.ID
                                    ImportOrder.ClientCode = WorksheetMarketOrderData.MediaBroadcastWorksheet.ClientCode
                                    ImportOrder.DivisionCode = WorksheetMarketOrderData.MediaBroadcastWorksheet.DivisionCode
                                    ImportOrder.ProductCode = WorksheetMarketOrderData.MediaBroadcastWorksheet.ProductCode
                                    ImportOrder.VendorCode = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.VendorCode

                                    If WorksheetMarketOrderData.MediaBroadcastWorksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast Then

                                        'If WorksheetMarketOrderData.MediaBroadcastWorksheet.MediaBroadcastWorksheetDateTypeID = DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                                        '    If MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.IsHiatus = False AndAlso Entity.Spots <> 0) OrElse Entity.OrderNumber.HasValue).Any Then

                                        '        ImportOrder.StartDate = MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.IsHiatus = False AndAlso Entity.Spots <> 0) OrElse Entity.OrderNumber.HasValue).Select(Function(Entity) Entity.Date).Min
                                        '        ImportOrder.EndDate = MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.IsHiatus = False AndAlso Entity.Spots <> 0) OrElse Entity.OrderNumber.HasValue).Select(Function(Entity) Entity.Date).Max.AddDays(6)

                                        '    Else

                                        '        ImportOrder.StartDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate
                                        '        ImportOrder.EndDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate

                                        '    End If

                                        'Else

                                        ImportOrder.StartDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate
                                        ImportOrder.EndDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate

                                        'End If

                                        If ImportOrder.StartDate < WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate Then

                                            ImportOrder.StartDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate

                                        End If

                                        If ImportOrder.EndDate > WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate Then

                                            ImportOrder.EndDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate

                                        End If

                                        If ImportOrder.StartDate < MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate Then

                                            ImportOrder.StartDate = MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate

                                        End If

                                        If ImportOrder.EndDate > MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate Then

                                            ImportOrder.EndDate = MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate

                                        End If

                                    Else

                                        ImportOrder.StartDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate
                                        ImportOrder.EndDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate

                                        If ImportOrder.StartDate < WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate Then

                                            ImportOrder.StartDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.StartDate

                                        End If

                                        If ImportOrder.EndDate > WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate Then

                                            ImportOrder.EndDate = WorksheetMarketOrderData.WorksheetMarketOrderDate.EndDate

                                        End If

                                        If ImportOrder.StartDate < MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate Then

                                            ImportOrder.StartDate = MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate

                                        End If

                                        If ImportOrder.EndDate > MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate Then

                                            ImportOrder.EndDate = MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate

                                        End If

                                    End If

                                    ImportOrder.UserCode = Me.Session.UserCode

                                    If WorksheetMarketOrderData.MediaBroadcastWorksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                                        ImportOrder.CalendarType = If(WorksheetMarketOrderData.MediaBroadcastWorksheet.MediaCalendarTypeID = 1, "CM", "BM")

                                    ElseIf WorksheetMarketOrderData.MediaBroadcastWorksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Daily Then

                                        ImportOrder.CalendarType = "DB"

                                    End If

                                    ImportOrder.MediaPlanRate = DateRate

                                    ImportOrder.OrderID = OrderLineMediaBroadcastWorksheetMarketDetailDates.Max(Function(Entity) Entity.LinkID)
                                    ImportOrder.LineNumber = OrderLineMediaBroadcastWorksheetMarketDetailDates.Max(Function(Entity) Entity.LinkLineID)
                                    ImportOrder.OrderNumber = OrderLineMediaBroadcastWorksheetMarketDetailDates.Max(Function(Entity) Entity.OrderNumber)
                                    ImportOrder.OrderLineNumber = OrderLineMediaBroadcastWorksheetMarketDetailDates.Max(Function(Entity) Entity.OrderLineNumber)

                                    If ImportOrder.OrderID.HasValue = False AndAlso ImportOrder.LineNumber.HasValue = False Then

                                        VendorMediaBroadcastWorksheetMarketDetails = MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.VendorCode = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.VendorCode).ToList

                                        For Each MediaBroadcastWorksheetMarketDetail In VendorMediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.RevisionNumber < RevisionNumber AndAlso
                                                                                                                                                          Entity.LineNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.LineNumber AndAlso
                                                                                                                                                          Entity.MakegoodNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.MakegoodNumber AndAlso
                                                                                                                                                          Entity.MadegoodNumber = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.MadegoodNumber).ToList

                                            If MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.Date >= ImportOrder.StartDate AndAlso
                                                                                                                                                   Entity.Date <= ImportOrder.EndDate AndAlso
                                                                                                                                                   Entity.Rate = ImportOrder.MediaPlanRate AndAlso
                                                                                                                                                   Entity.LinkID.GetValueOrDefault(0) > 0 AndAlso
                                                                                                                                                   Entity.OrderNumber.GetValueOrDefault(0) > 0 AndAlso
                                                                                                                                                   Entity.LinkLineID.GetValueOrDefault(0) > 0 AndAlso
                                                                                                                                                   Entity.OrderLineNumber.GetValueOrDefault(0) > 0).Any Then

                                                ImportOrder.OrderID = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.Date >= ImportOrder.StartDate AndAlso
                                                                                                                                                                          Entity.Date <= ImportOrder.EndDate AndAlso
                                                                                                                                                                          Entity.Rate = ImportOrder.MediaPlanRate AndAlso
                                                                                                                                                                          Entity.LinkID.GetValueOrDefault(0) > 0).Select(Function(Entity) Entity.LinkID.GetValueOrDefault(0)).Max

                                                ImportOrder.LineNumber = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.Date >= ImportOrder.StartDate AndAlso
                                                                                                                                                                             Entity.Date <= ImportOrder.EndDate AndAlso
                                                                                                                                                                             Entity.Rate = ImportOrder.MediaPlanRate AndAlso
                                                                                                                                                                             Entity.LinkLineID.GetValueOrDefault(0) > 0).Select(Function(Entity) Entity.LinkLineID.GetValueOrDefault(0)).Max

                                                ImportOrder.OrderNumber = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.Date >= ImportOrder.StartDate AndAlso
                                                                                                                                                                              Entity.Date <= ImportOrder.EndDate AndAlso
                                                                                                                                                                              Entity.Rate = ImportOrder.MediaPlanRate AndAlso
                                                                                                                                                                              Entity.OrderNumber.GetValueOrDefault(0) > 0).Select(Function(Entity) Entity.OrderNumber.GetValueOrDefault(0)).Max

                                                ImportOrder.OrderLineNumber = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.Date >= ImportOrder.StartDate AndAlso
                                                                                                                                                                                  Entity.Date <= ImportOrder.EndDate AndAlso
                                                                                                                                                                                  Entity.Rate = ImportOrder.MediaPlanRate AndAlso
                                                                                                                                                                                  Entity.OrderLineNumber.GetValueOrDefault(0) > 0).Select(Function(Entity) Entity.OrderLineNumber.GetValueOrDefault(0)).Max

                                            End If

                                            If ImportOrder.OrderID.HasValue AndAlso ImportOrder.OrderNumber.HasValue Then

                                                Exit For

                                            End If

                                        Next

                                        If ImportOrder.OrderID.HasValue = False AndAlso ImportOrder.OrderNumber.HasValue = False Then

                                            For Each MediaBroadcastWorksheetMarketDetail In VendorMediaBroadcastWorksheetMarketDetails

                                                For Each MediaBroadcastWorksheetMarketDetailDate In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates

                                                    If MediaBroadcastWorksheetMarketDetailDate.LinkID.GetValueOrDefault(0) > 0 AndAlso MediaBroadcastWorksheetMarketDetailDate.OrderNumber.GetValueOrDefault(0) > 0 Then

                                                        ImportOrder.OrderID = MediaBroadcastWorksheetMarketDetailDate.LinkID
                                                        ImportOrder.OrderNumber = MediaBroadcastWorksheetMarketDetailDate.OrderNumber

                                                        SaveDataLineNumber = 0
                                                        ImportOrderLineNumber = 0

                                                        If VendorMediaBroadcastWorksheetMarketDetails.SelectMany(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailDates).Any(Function(Entity) Entity.LinkLineID.GetValueOrDefault(0) > 0) Then

                                                            SaveDataLineNumber = VendorMediaBroadcastWorksheetMarketDetails.SelectMany(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) Entity.LinkLineID.GetValueOrDefault(0) > 0).Select(Function(Entity) Entity.LinkLineID).Max + 1

                                                        End If

                                                        If ImportOrders.Any(Function(Entity) Entity.VendorCode = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.VendorCode AndAlso
                                                                                             Entity.LineNumber.GetValueOrDefault(0) > 0) Then

                                                            ImportOrderLineNumber = ImportOrders.Where(Function(Entity) Entity.VendorCode = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.VendorCode AndAlso
                                                                                                                        Entity.LineNumber.GetValueOrDefault(0) > 0).Select(Function(Entity) Entity.LineNumber.GetValueOrDefault(0)).Max + 1

                                                        End If

                                                        If SaveDataLineNumber >= ImportOrderLineNumber AndAlso SaveDataLineNumber > 0 Then

                                                            ImportOrder.LineNumber = SaveDataLineNumber

                                                        ElseIf ImportOrderLineNumber > 0 Then

                                                            ImportOrder.LineNumber = ImportOrderLineNumber

                                                        End If

                                                        Exit For

                                                    End If

                                                Next

                                                If ImportOrder.OrderID.HasValue AndAlso ImportOrder.OrderNumber.HasValue Then

                                                    Exit For

                                                End If

                                            Next

                                        End If

                                    End If

                                    If ImportOrder.OrderID.HasValue AndAlso ImportOrder.LineNumber.HasValue AndAlso
                                            ImportOrder.OrderNumber.HasValue AndAlso ImportOrder.OrderLineNumber.HasValue Then

                                        ImportOrder.IsRevision = True

                                    End If

                                    ImportOrder.MediaPlanBuyer = WorksheetMarketOrderData.MediaBroadcastWorksheetMarket.BuyerEmployeeCode

                                    If WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Daypart IsNot Nothing Then

                                        ImportOrder.MediaPlanDaypart = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Daypart.Code

                                    End If

                                    ImportOrder.MediaPlanProgramming = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Program
                                    ImportOrder.MediaPlanLength = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Length

                                    ImportOrder.MediaPlanMonday = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Monday
                                    ImportOrder.MediaPlanTuesday = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Tuesday
                                    ImportOrder.MediaPlanWednesday = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Wednesday
                                    ImportOrder.MediaPlanThursday = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Thursday
                                    ImportOrder.MediaPlanFriday = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Friday
                                    ImportOrder.MediaPlanSaturday = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Saturday
                                    ImportOrder.MediaPlanSunday = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Sunday

                                    ImportOrder.MediaPlanStartTime = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.StartTime
                                    ImportOrder.MediaPlanEndTime = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.EndTime

                                    ImportOrder.MediaPlanRemarks = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Comments
                                    ImportOrder.MediaPlanOrderComment = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.OrderComments

                                    ImportOrder.MediaPlanRowIndex = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.ID

                                    If OrderLine.OrderNumber = 0 AndAlso OrderLine.LineNumber = 0 Then

                                        If CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Count = 0 Then

                                            ImportOrder.MediaPlanDetailLevelLineDataIDs = AdvantageFramework.StringUtilities.CreateCommaDelimitedString(OrderLineMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.IsHiatus = False AndAlso (Entity.Spots <> 0 OrElse Entity.MakegoodSpots <> 0)) OrElse Entity.OrderNumber.HasValue).Select(Function(Entity) Entity.ID).Distinct.ToList)

                                        Else

                                            If CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.IsHiatus = False AndAlso (Entity.Spots <> 0 OrElse Entity.MakegoodSpots <> 0)) OrElse Entity.OrderNumber.HasValue).Any Then

                                                ImportOrder.MediaPlanDetailLevelLineDataIDs = AdvantageFramework.StringUtilities.CreateCommaDelimitedString(CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.IsHiatus = False AndAlso (Entity.Spots <> 0 OrElse Entity.MakegoodSpots <> 0)) OrElse Entity.OrderNumber.HasValue).Select(Function(Entity) Entity.ID).Distinct.ToList)

                                                If CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.IsHiatus = False AndAlso Entity.MakegoodSpots <> 0).Any Then

                                                    ImportOrder.IsMakegood = True

                                                End If

                                            ElseIf OrderLineMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetail.RevisionNumber < RevisionNumber AndAlso ((Entity.IsHiatus = False AndAlso (Entity.Spots <> 0 OrElse Entity.MakegoodSpots <> 0)) OrElse Entity.OrderNumber.HasValue)).Any Then

                                                ImportOrder.MediaPlanDetailLevelLineDataIDs = AdvantageFramework.StringUtilities.CreateCommaDelimitedString(CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.IsHiatus = False) OrElse Entity.OrderNumber.HasValue).Select(Function(Entity) Entity.ID).Distinct.ToList)

                                            End If

                                        End If

                                    Else

                                        ImportOrder.MediaPlanDetailLevelLineDataIDs = AdvantageFramework.StringUtilities.CreateCommaDelimitedString(CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.IsHiatus = False AndAlso (Entity.Spots <> 0 OrElse Entity.MakegoodSpots <> 0)) AndAlso (Entity.OrderNumber.GetValueOrDefault(0) = 0 AndAlso Entity.OrderLineNumber.GetValueOrDefault(0) = 0)).Select(Function(Entity) Entity.ID).Distinct.ToList)

                                        If String.IsNullOrWhiteSpace(ImportOrder.MediaPlanDetailLevelLineDataIDs) Then

                                            ImportOrder.MediaPlanDetailLevelLineDataIDs = AdvantageFramework.StringUtilities.CreateCommaDelimitedString(CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.OrderNumber.GetValueOrDefault(0) = OrderLine.OrderNumber AndAlso Entity.OrderLineNumber.GetValueOrDefault(0) = OrderLine.LineNumber)).Select(Function(Entity) Entity.ID).Distinct.ToList)

                                        Else

                                            ImportOrder.MediaPlanDetailLevelLineDataIDs &= "," & AdvantageFramework.StringUtilities.CreateCommaDelimitedString(CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) (Entity.OrderNumber.GetValueOrDefault(0) = OrderLine.OrderNumber AndAlso Entity.OrderLineNumber.GetValueOrDefault(0) = OrderLine.LineNumber)).Select(Function(Entity) Entity.ID).Distinct.ToList)

                                        End If

                                        If String.IsNullOrWhiteSpace(ImportOrder.MediaPlanDetailLevelLineDataIDs) = False AndAlso ImportOrder.MediaPlanDetailLevelLineDataIDs.EndsWith(",") Then

                                            ImportOrder.MediaPlanDetailLevelLineDataIDs = ImportOrder.MediaPlanDetailLevelLineDataIDs.Substring(0, ImportOrder.MediaPlanDetailLevelLineDataIDs.Length - 1)

                                        End If

                                    End If

                                    If WorksheetMarketOrderData.MediaBroadcastWorksheet.Campaign IsNot Nothing Then

                                        ImportOrder.CampaignCode = WorksheetMarketOrderData.MediaBroadcastWorksheet.Campaign.Code
                                        ImportOrder.Campaign = WorksheetMarketOrderData.MediaBroadcastWorksheet.Campaign.Name

                                    End If

                                    ImportOrder.CableNetworkStationCode = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.CableNetworkStationCode
                                    ImportOrder.DaypartID = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.DaypartID
                                    ImportOrder.ValueAdded = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.ValueAdded
                                    ImportOrder.Bookend = WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Bookend

                                    ImportOrder.TotalSpots = 0

                                    If OrderLine.OrderNumber = 0 AndAlso OrderLine.LineNumber = 0 Then

                                        ImportOrder.TotalSpots = CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Select(Function(MBWMDD) MBWMDD.Spots).Sum

                                    Else

                                        ImportOrder.TotalSpots += CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.OrderNumber.GetValueOrDefault(0) = OrderLine.OrderNumber AndAlso Entity.OrderLineNumber.GetValueOrDefault(0) = OrderLine.LineNumber).Select(Function(MBWMDD) MBWMDD.Spots).Sum
                                        ImportOrder.TotalSpots += CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.OrderNumber.GetValueOrDefault(0) = 0 AndAlso Entity.OrderLineNumber.GetValueOrDefault(0) = 0).Select(Function(MBWMDD) MBWMDD.Spots).Sum

                                    End If

                                    ImportOrder.MediaNetAmount = DateRate * ImportOrder.TotalSpots
                                    ImportOrder.AddAmount = 0

                                    If WorksheetMarketOrderData.MediaBroadcastWorksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                                        ImportOrder.Units = "M"

                                        'If WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Count > 1 Then

                                        MonthWeeks = WorksheetMarketOrderData.WorksheetMarketOrderDate.MonthWeeks

                                        If MonthWeeks.Count > 0 Then

                                            If OrderLine.OrderNumber = 0 AndAlso OrderLine.LineNumber = 0 Then

                                                If CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Count = 0 Then

                                                    MediaBroadcastWorksheetMarketDetailDateIDs = OrderLineMediaBroadcastWorksheetMarketDetailDates.Select(Function(MBWMDD) MBWMDD.ID).ToArray

                                                Else

                                                    MediaBroadcastWorksheetMarketDetailDateIDs = CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Select(Function(MBWMDD) MBWMDD.ID).ToArray

                                                End If

                                            Else

                                                MediaBroadcastWorksheetMarketDetailDateIDsList = New Generic.List(Of Integer)

                                                MediaBroadcastWorksheetMarketDetailDateIDsList.AddRange(CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.OrderNumber.GetValueOrDefault(0) = OrderLine.OrderNumber AndAlso Entity.OrderLineNumber.GetValueOrDefault(0) = OrderLine.LineNumber).Select(Function(MBWMDD) MBWMDD.ID))
                                                MediaBroadcastWorksheetMarketDetailDateIDsList.AddRange(CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.OrderNumber.GetValueOrDefault(0) = 0 AndAlso Entity.OrderLineNumber.GetValueOrDefault(0) = 0).Select(Function(MBWMDD) MBWMDD.ID))

                                                MediaBroadcastWorksheetMarketDetailDateIDs = MediaBroadcastWorksheetMarketDetailDateIDsList.ToArray

                                            End If

                                            ImportOrder.Spots1 = WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Where(Function(WMODD) WMODD.Week = MonthWeeks(0)).SelectMany(Function(WMODD) WMODD.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) MediaBroadcastWorksheetMarketDetailDateIDs.Contains(Entity.ID)).Sum(Function(Entity) Entity.Spots)
                                            ImportOrder.Spots2 = If(MonthWeeks.Count >= 2, WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Where(Function(WMODD) WMODD.Week = MonthWeeks(1)).SelectMany(Function(WMODD) WMODD.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) MediaBroadcastWorksheetMarketDetailDateIDs.Contains(Entity.ID)).Sum(Function(Entity) Entity.Spots), Nothing)
                                            ImportOrder.Spots3 = If(MonthWeeks.Count >= 3, WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Where(Function(WMODD) WMODD.Week = MonthWeeks(2)).SelectMany(Function(WMODD) WMODD.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) MediaBroadcastWorksheetMarketDetailDateIDs.Contains(Entity.ID)).Sum(Function(Entity) Entity.Spots), Nothing)
                                            ImportOrder.Spots4 = If(MonthWeeks.Count >= 4, WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Where(Function(WMODD) WMODD.Week = MonthWeeks(3)).SelectMany(Function(WMODD) WMODD.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) MediaBroadcastWorksheetMarketDetailDateIDs.Contains(Entity.ID)).Sum(Function(Entity) Entity.Spots), Nothing)
                                            ImportOrder.Spots5 = If(MonthWeeks.Count >= 5, WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Where(Function(WMODD) WMODD.Week = MonthWeeks(4)).SelectMany(Function(WMODD) WMODD.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) MediaBroadcastWorksheetMarketDetailDateIDs.Contains(Entity.ID)).Sum(Function(Entity) Entity.Spots), Nothing)
                                            ImportOrder.Spots6 = If(MonthWeeks.Count >= 6, WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Where(Function(WMODD) WMODD.Week = MonthWeeks(5)).SelectMany(Function(WMODD) WMODD.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) MediaBroadcastWorksheetMarketDetailDateIDs.Contains(Entity.ID)).Sum(Function(Entity) Entity.Spots), Nothing)

                                        End If

                                        'ElseIf WorksheetMarketOrderData.WorksheetMarketOrderDate.WorksheetMarketOrderDateDatas.Count = 1 Then

                                        '    ImportOrder.Spots1 = CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Sum(Function(Entity) Entity.Spots)
                                        '    ImportOrder.Spots2 = 0
                                        '    ImportOrder.Spots3 = 0
                                        '    ImportOrder.Spots4 = 0
                                        '    ImportOrder.Spots5 = 0
                                        '    ImportOrder.Spots6 = 0

                                        ' End If

                                    Else

                                        ImportOrder.Units = "D"

                                    End If

                                    If ImportOrder.TotalSpots.GetValueOrDefault(0) = 0 AndAlso (ImportOrder.MediaNetAmount.GetValueOrDefault(0) <> 0 OrElse ImportOrder.AddAmount.GetValueOrDefault(0) <> 0) Then

                                        ImportOrder.TotalSpots = 1

                                    End If

                                    UseProductAmounts = False

                                    'If ImportOrder.IsRevision AndAlso ImportOrder.TotalSpots.GetValueOrDefault(0) = 0 Then

                                    '    ImportOrder.GrossRate = 0
                                    '    ImportOrder.NetRate = 0

                                    'Else

                                    If ImportOrder.IsRevision AndAlso ImportOrder.OrderNumber.GetValueOrDefault(0) > 0 Then

                                        MarketDetails_GetExistingOrderNetGross(DbContext, ImportOrder, MediaBroadcastWorksheet.MediaTypeCode)

                                    Else

                                        If UseVendorsRateType Then

                                            If WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Vendor.DefaultNetGross.GetValueOrDefault(0) = 0 Then

                                                ImportOrder.NetGross = 0

                                            Else

                                                ImportOrder.NetGross = 1

                                            End If

                                        Else

                                            If WorksheetMarketOrderData.MediaBroadcastWorksheet.IsGross Then

                                                ImportOrder.NetGross = 1

                                            Else

                                                ImportOrder.NetGross = 0

                                            End If

                                        End If

                                    End If

                                    If ImportOrder.NetGross = 1 Then

                                        If WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Vendor.Commission.HasValue = False OrElse
                                                    WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Vendor.Commission = 0 Then

                                            ImportOrder.GrossRate = FormatNumber(DateRate, 4)
                                            ImportOrder.NetRate = FormatNumber(ImportOrder.GrossRate * 0.85, 4)

                                            'ImportOrder.MarkupPercent = Nothing

                                        Else

                                            ImportOrder.GrossRate = FormatNumber(DateRate, 4)
                                            ImportOrder.NetRate = FormatNumber(ImportOrder.GrossRate * ((100 - WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Vendor.Commission.Value) / 100), 4)

                                            'ImportOrder.MarkupPercent = Nothing

                                        End If

                                    Else

                                        If WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Vendor.Markup.HasValue Then

                                            If WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Vendor.Markup = 0 Then

                                                ImportOrder.NetRate = FormatNumber(DateRate, 4)
                                                ImportOrder.GrossRate = FormatNumber(ImportOrder.NetRate, 4)

                                                'ImportOrder.MarkupPercent = Decimal.Round(0, 4)

                                            Else

                                                ImportOrder.NetRate = FormatNumber(DateRate, 4)
                                                ImportOrder.GrossRate = FormatNumber(ImportOrder.NetRate + (ImportOrder.NetRate * (WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Vendor.Markup.Value / 100)), 4)

                                                'ImportOrder.MarkupPercent = Decimal.Round(WorksheetMarketOrderData.MediaBroadcastWorksheetMarketDetail.Vendor.Markup.Value, 4)

                                            End If

                                        Else

                                            UseProductAmounts = True

                                        End If

                                        If UseProductAmounts Then

                                            If ProductUsesNetAmount Then

                                                ImportOrder.NetRate = FormatNumber(DateRate, 4)
                                                ImportOrder.GrossRate = FormatNumber(ImportOrder.NetRate, 4)

                                                'ImportOrder.MarkupPercent = Decimal.Round(0, 4)

                                            Else

                                                ImportOrder.NetRate = FormatNumber(DateRate, 4)

                                                CommissionAmount = ImportOrder.NetRate * (ProductMarkupAmount / 100)

                                                ImportOrder.GrossRate = FormatNumber(ImportOrder.NetRate + CommissionAmount, 4)

                                                'ImportOrder.MarkupPercent = Decimal.Round(ProductMarkupAmount, 4)

                                            End If

                                        End If

                                    End If

                                    'End If

                                    If ImportOrder.IsRevision = False OrElse (ImportOrder.IsRevision = True AndAlso
                                                                              CurrentRevisionMediaBroadcastWorksheetMarketDetailDates.Any(Function(Entity) Entity.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified OrElse
                                                                                                                                                           (Entity.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered AndAlso
                                                                                                                                                            Entity.IsHiatus = False AndAlso (Entity.Spots <> 0 OrElse Entity.MakegoodSpots <> 0)))) Then

                                        If ImportOrder.IsRevision OrElse ImportOrder.TotalSpots.GetValueOrDefault(0) <> 0 OrElse
                                                ImportOrder.MediaNetAmount.GetValueOrDefault(0) <> 0 OrElse ImportOrder.AddAmount.GetValueOrDefault(0) <> 0 OrElse ImportOrder.IsMakegood Then

                                            If ImportOrder.IsRevision AndAlso ImportOrder.TotalSpots.HasValue = False Then

                                                ImportOrder.TotalSpots = 0

                                            End If

                                            ImportOrders.Add(ImportOrder)

                                        End If

                                    End If

                                Next

                            End If

                        Next

                    End If

                Next

            End Using

            For Each ImportOrder In ImportOrders.Where(Function(Entity) Entity.IsRevision = True).ToList

                If String.IsNullOrWhiteSpace(ImportOrder.MediaPlanDetailLevelLineDataIDs) Then

                    ImportOrders.Remove(ImportOrder)

                End If

            Next

            For Each ImportOrder In ImportOrders

                If ImportOrder.OrderNumber.HasValue AndAlso ImportOrder.OrderLineNumber.HasValue AndAlso
                        ImportOrders.Where(Function(Entity) Entity.MediaPlanRowIndex = ImportOrder.MediaPlanRowIndex AndAlso
                                                            Entity.MediaPlanRate <> ImportOrder.MediaPlanRate AndAlso
                                                            Entity.OrderNumber.HasValue AndAlso
                                                            Entity.OrderLineNumber.HasValue AndAlso
                                                            Entity.OrderNumber = ImportOrder.OrderNumber AndAlso
                                                            Entity.OrderLineNumber = ImportOrder.OrderLineNumber).Any Then

                    ImportOrder.LineNumber = Nothing
                    ImportOrder.OrderLineNumber = Nothing
                    ImportOrder.IsRevision = False

                End If

            Next

            'For Each VendorCode In ImportOrders.Select(Function(Entity) Entity.VendorCode).Distinct.ToList

            '    MediaBroadcastWorksheetMarketDetailDates = MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.VendorCode = VendorCode).SelectMany(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailDates).ToList

            '    If MediaBroadcastWorksheetMarketDetailDates.Any(Function(Entity) Entity.VendorOrderLine.HasValue) Then

            '        VendorOrderLine = MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.VendorOrderLine.HasValue).Select(Function(Entity) Entity.VendorOrderLine.Value).Max + 1

            '    Else

            '        VendorOrderLine = 1

            '    End If

            '    For Each OrderRate In ImportOrders.Where(Function(Entity) Entity.VendorCode = VendorCode).Select(Function(Entity) Entity.MediaPlanRate).Distinct.ToList

            '        If MediaBroadcastWorksheetMarketDetailDates.Any(Function(Entity) Entity.VendorOrderLine.HasValue AndAlso Entity.Rate = OrderRate.Value) Then

            '            SavedVendorOrderLine = MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.VendorOrderLine.HasValue AndAlso Entity.Rate = OrderRate.Value).Select(Function(Entity) Entity.VendorOrderLine.Value).Max

            '            For Each ImportOrder In ImportOrders.Where(Function(Entity) Entity.VendorCode = VendorCode AndAlso Entity.MediaPlanRate = OrderRate).ToList

            '                ImportOrder.VendorOrderLine = SavedVendorOrderLine

            '            Next

            '        Else

            '            For Each ImportOrder In ImportOrders.Where(Function(Entity) Entity.VendorCode = VendorCode AndAlso Entity.MediaPlanRate = OrderRate).ToList

            '                ImportOrder.VendorOrderLine = VendorOrderLine

            '            Next

            '            VendorOrderLine += 1

            '        End If

            '    Next

            'Next

            MarketDetails_CreateImportOrderList = ImportOrders

        End Function
        Private Sub MarketDetails_GetExistingOrderNetGross(DbContext As AdvantageFramework.Database.DbContext, ByRef ImportOrder As AdvantageFramework.Media.Classes.ImportOrder, SalesClassCode As String)

            Dim IsGross As Boolean = False

            'If SalesClassCode = "R" OrElse
            '        SalesClassCode = "T" OrElse
            '        SalesClassCode = "M" Then

            '    IsGross = True

            'ElseIf SalesClassCode = "I" OrElse
            '        SalesClassCode = "N" OrElse
            '        SalesClassCode = "O" Then

            '    IsGross = False

            'End If

            If SalesClassCode = "M" Then

                Try


                    IsGross = DbContext.Database.SqlQuery(Of Boolean)(String.Format("SELECT CAST(ISNULL(NET_GROSS, 1) AS bit) FROM dbo.MAGAZINE_HEADER WHERE ORDER_NBR = {0}", ImportOrder.OrderNumber.GetValueOrDefault(0))).First

                Catch ex As Exception
                    IsGross = True
                End Try

            ElseIf SalesClassCode = "N" Then

                Try


                    IsGross = DbContext.Database.SqlQuery(Of Boolean)(String.Format("SELECT CAST(ISNULL(NET_GROSS, 1) AS bit) FROM dbo.NEWSPAPER_HEADER WHERE ORDER_NBR = {0}", ImportOrder.OrderNumber.GetValueOrDefault(0))).First

                Catch ex As Exception
                    IsGross = False
                End Try

            ElseIf SalesClassCode = "I" Then

                Try


                    IsGross = DbContext.Database.SqlQuery(Of Boolean)(String.Format("SELECT CAST(ISNULL(NET_GROSS, 1) AS bit) FROM dbo.INTERNET_HEADER WHERE ORDER_NBR = {0}", ImportOrder.OrderNumber.GetValueOrDefault(0))).First

                Catch ex As Exception
                    IsGross = False
                End Try

            ElseIf SalesClassCode = "O" Then

                Try


                    IsGross = DbContext.Database.SqlQuery(Of Boolean)(String.Format("SELECT CAST(ISNULL(NET_GROSS, 1) AS bit) FROM dbo.OUTDOOR_HEADER WHERE ORDER_NBR = {0}", ImportOrder.OrderNumber.GetValueOrDefault(0))).First

                Catch ex As Exception
                    IsGross = False
                End Try

            ElseIf SalesClassCode = "R" Then

                Try


                    IsGross = DbContext.Database.SqlQuery(Of Boolean)(String.Format("SELECT CAST(ISNULL(NET_GROSS, 1) AS bit) FROM dbo.RADIO_HDR WHERE ORDER_NBR = {0}", ImportOrder.OrderNumber.GetValueOrDefault(0))).First

                Catch ex As Exception
                    IsGross = True
                End Try

            ElseIf SalesClassCode = "T" Then

                Try


                    IsGross = DbContext.Database.SqlQuery(Of Boolean)(String.Format("SELECT CAST(ISNULL(NET_GROSS, 1) AS bit) FROM dbo.TV_HDR WHERE ORDER_NBR = {0}", ImportOrder.OrderNumber.GetValueOrDefault(0))).First

                Catch ex As Exception
                    IsGross = True
                End Try

            End If

            If IsGross Then

                ImportOrder.NetGross = 1

            Else

                ImportOrder.NetGross = 0

            End If

        End Sub
        Public Function MarketDetails_CheckOrderStatus(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                       VendorName As String) As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses

            'objects
            Dim OrderStatus As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered
            Dim DataRows As Generic.List(Of System.Data.DataRow) = Nothing
            Dim WorksheetMarketDetailDateOrderStatuses As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus) = Nothing
            Dim OrderStatusColumnName As String = String.Empty
            Dim SpotsColumnName As String = String.Empty

            DataRows = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CStr(DR(MarketDetailsColumns.VendorName.ToString)) = VendorName).ToList

            WorksheetMarketDetailDateOrderStatuses = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus)

            For Each DataRow In DataRows

                For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                    OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)
                    SpotsColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(OrderStatusDate)

                    WorksheetMarketDetailDateOrderStatuses.Add(New Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus With {.Spots = DataRow(SpotsColumnName),
                                                                                                                                                    .OrderStatus = DataRow(OrderStatusColumnName)})

                Next

            Next

            If WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) Then

                OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered

            ElseIf WorksheetMarketDetailDateOrderStatuses.Any(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified) Then

                OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified

            ElseIf WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered OrElse
                                                                               (Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered AndAlso
                                                                                Entity.Spots = 0)) Then

                OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered

            Else

                OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial

            End If

            MarketDetails_CheckOrderStatus = OrderStatus

        End Function
        Public Function MarketDetails_CheckOrderStatus(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses

            Dim OrderStatus As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered
            Dim DataRow As System.Data.DataRow = Nothing
            Dim OrderStatusColumnName As String = String.Empty
            Dim SpotsColumnName As String = String.Empty
            Dim WorksheetMarketDetailDateOrderStatuses As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus) = Nothing

            WorksheetMarketDetailDateOrderStatuses = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus)

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).ToList

                For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                    OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)
                    SpotsColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(OrderStatusDate)

                    WorksheetMarketDetailDateOrderStatuses.Add(New Classes.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateOrderStatus With {.Spots = DataRow(SpotsColumnName),
                                                                                                                                                    .OrderStatus = DataRow(OrderStatusColumnName)})

                Next

            Next

            If WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) Then

                OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered

            ElseIf WorksheetMarketDetailDateOrderStatuses.Any(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified) Then

                OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified

            ElseIf WorksheetMarketDetailDateOrderStatuses.All(Function(Entity) Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered OrElse
                                                                               (Entity.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered AndAlso
                                                                                Entity.Spots = 0)) Then

                OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered

            Else

                OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial

            End If

            MarketDetails_CheckOrderStatus = OrderStatus

        End Function
        Public Function MarketDetails_CalculateCPPGroupTotal(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                             VendorCode As String, IsPrimaryDemo As Boolean) As Decimal

            'objects
            Dim CPPGroupTotal As Decimal = 0
            Dim GRP As Decimal = 0
            Dim TotalDollars As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.DataView.Count > 0 Then

                If String.IsNullOrWhiteSpace(VendorCode) = False Then

                    TotalDollars = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                    Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                          CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                    Select CDec(DataRowView(MarketDetailsColumns.TotalDollars.ToString))).Sum()

                    If IsPrimaryDemo Then

                        GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                               Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                     CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                               Select CDec(DataRowView(MarketDetailsColumns.PrimaryGRP.ToString))).Sum()

                    Else

                        GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                               Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                     CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                               Select CDec(DataRowView(MarketDetailsColumns.SecondaryGRP.ToString))).Sum()

                    End If

                Else

                    TotalDollars = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                    Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                    Select CDec(DataRowView(MarketDetailsColumns.TotalDollars.ToString))).Sum()

                    If IsPrimaryDemo Then

                        GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                               Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                               Select CDec(DataRowView(MarketDetailsColumns.PrimaryGRP.ToString))).Sum()

                    Else

                        GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                               Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                               Select CDec(DataRowView(MarketDetailsColumns.SecondaryGRP.ToString))).Sum()

                    End If

                End If

            End If

            CPPGroupTotal = If(GRP = 0, 0, TotalDollars / GRP)

            MarketDetails_CalculateCPPGroupTotal = CPPGroupTotal

        End Function
        Public Function MarketDetails_CalculateGrossImpressionsTotal(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                     VendorCode As String, IsPrimaryDemo As Boolean) As Decimal

            'objects
            Dim GrossImpressionsTotal As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV OrElse
                    MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If String.IsNullOrWhiteSpace(VendorCode) = False Then

                    If IsPrimaryDemo Then

                        GrossImpressionsTotal = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                                 Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                                       CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                                 Select CDec(DataRowView(MarketDetailsColumns.PrimaryGrossImpressions.ToString))).Sum()

                    Else

                        GrossImpressionsTotal = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                                 Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                                       CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                                 Select CDec(DataRowView(MarketDetailsColumns.SecondaryGrossImpressions.ToString))).Sum()

                    End If

                Else

                    If IsPrimaryDemo Then

                        GrossImpressionsTotal = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                                 Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                                 Select CDec(DataRowView(MarketDetailsColumns.PrimaryGrossImpressions.ToString))).Sum()

                    Else

                        GrossImpressionsTotal = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                                 Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                                 Select CDec(DataRowView(MarketDetailsColumns.SecondaryGrossImpressions.ToString))).Sum()

                    End If

                End If

            End If

            MarketDetails_CalculateGrossImpressionsTotal = GrossImpressionsTotal

        End Function
        Public Function MarketDetails_CalculateReachTotal(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                          VendorCode As String, IsPrimaryDemo As Boolean, DateColumnName As String) As Double

            'objects
            Dim ReachTotal As Double = 0
            Dim CumeImpressionsValues As Generic.List(Of Long) = Nothing
            Dim CumesValues As Generic.List(Of Long) = Nothing
            Dim AllReachValuesList As Generic.List(Of Double) = Nothing
            Dim AllReachValues() As Double = Nothing
            Dim TotalSpots As Integer = 0
            Dim DataRowViewList As Generic.List(Of System.Data.DataRowView) = Nothing
            Dim Impressions As Long = 0
            Dim RowSpots As Integer = 0
            Dim TotalImpressions As Long = 0
            Dim TotalSpotImpressions As Long = 0
            Dim TotalRating As Decimal = 0
            Dim Universe As Long = 0
            Dim TotalAQH As Long = 0
            Dim AQH As Long = 0
            Dim BookRating As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If String.IsNullOrWhiteSpace(VendorCode) = False Then

                    DataRowViewList = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.OfType(Of System.Data.DataRowView).Where(Function(DRV) CStr(DRV(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                                                                                                                                    CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).ToList

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 AndAlso
                            DataRowViewList.Any(Function(DRV) DRV(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) <> 0 OrElse
                                                              (IsDBNull(DRV(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False AndAlso
                                                              DRV(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) <> 0)) Then

                        If IsPrimaryDemo Then

                            CumeImpressionsValues = DataRowViewList.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.PrimaryCumeImpressions.ToString))).Distinct.ToList

                        Else

                            CumeImpressionsValues = DataRowViewList.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.SecondaryCumeImpressions.ToString))).Distinct.ToList

                        End If

                    Else

                        CumeImpressionsValues = New Generic.List(Of Long)

                    End If

                Else

                    DataRowViewList = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.OfType(Of System.Data.DataRowView).Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).ToList

                    If MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 AndAlso
                            DataRowViewList.Any(Function(DRV) DRV(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) <> 0 OrElse
                                                              (IsDBNull(DRV(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False AndAlso
                                                              DRV(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) <> 0)) Then

                        If IsPrimaryDemo Then

                            CumeImpressionsValues = DataRowViewList.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.PrimaryCumeImpressions.ToString))).Distinct.ToList

                        Else

                            CumeImpressionsValues = DataRowViewList.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.SecondaryCumeImpressions.ToString))).Distinct.ToList

                        End If

                    Else

                        CumeImpressionsValues = New Generic.List(Of Long)

                    End If

                End If

                AllReachValuesList = New Generic.List(Of Double)

                If CumeImpressionsValues.Count > 0 Then

                    For Each CumeInpression In CumeImpressionsValues

                        TotalSpots = 0
                        TotalImpressions = 0
                        TotalRating = 0
                        TotalSpotImpressions = 0
                        Universe = 0

                        For Each DataRowView In DataRowViewList.Where(Function(DRV) CumeInpression = If(IsPrimaryDemo, CLng(DRV(MarketDetailsColumns.PrimaryCumeImpressions.ToString)), CLng(DRV(MarketDetailsColumns.SecondaryCumeImpressions.ToString))))

                            RowSpots = 0
                            Impressions = CLng(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryImpressions.ToString), DataRowView(MarketDetailsColumns.SecondaryImpressions.ToString)))

                            TotalImpressions = Impressions
                            TotalRating += CDec(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryRating.ToString), DataRowView(MarketDetailsColumns.SecondaryRating.ToString)))

                            If Universe = 0 Then

                                Universe = CLng(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryUniverse.ToString), DataRowView(MarketDetailsColumns.SecondaryUniverse.ToString)))

                            End If

                            If String.IsNullOrWhiteSpace(DateColumnName) = False Then

                                RowSpots += CInt(DataRowView(DateColumnName))

                            Else

                                RowSpots += CInt(DataRowView(MarketDetailsColumns.TotalSpots.ToString))

                                'For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                                '    RowSpots += CInt(DataRowView(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)))

                                'Next

                            End If

                            TotalSpots = RowSpots

                            TotalSpotImpressions += (Impressions * RowSpots)

                            BookRating = CDec(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.BookPrimaryRating.ToString), DataRowView(MarketDetailsColumns.BookSecondaryRating.ToString)))

                            If CumeInpression < Impressions Then

                                AllReachValuesList.Add(CalculateCumlessReach(CDec(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryRating.ToString), DataRowView(MarketDetailsColumns.SecondaryRating.ToString))), TotalSpots))

                            Else

                                AllReachValuesList.Add(CalculateTVReach(Impressions, CumeInpression, RowSpots, Universe, CDec(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryRating.ToString), DataRowView(MarketDetailsColumns.SecondaryRating.ToString))), BookRating))

                            End If

                        Next

                        'If CumeInpression = 0 Then

                        '	If Universe <> 0 AndAlso TotalSpots <> 0 Then

                        '		TotalRating = ((TotalSpotImpressions / TotalSpots) / Universe)

                        '		TotalRating = TotalRating * 100

                        '	Else

                        '		TotalRating = 0

                        '	End If

                        'End If

                    Next

                ElseIf DataRowViewList IsNot Nothing AndAlso DataRowViewList.Count > 0 Then

                    If IsPrimaryDemo Then

                        For Each DataRowView In DataRowViewList

                            RowSpots = 0

                            If String.IsNullOrWhiteSpace(DateColumnName) = False Then

                                RowSpots += CInt(DataRowView(DateColumnName))

                            Else

                                RowSpots = DataRowView(MarketDetailsColumns.TotalSpots.ToString)

                            End If

                            AllReachValuesList.Add(CalculateTVReach(DataRowView(MarketDetailsColumns.PrimaryImpressions.ToString), DataRowView(MarketDetailsColumns.PrimaryCumeImpressions.ToString),
                                                                    RowSpots, DataRowView(MarketDetailsColumns.PrimaryUniverse.ToString),
                                                                    DataRowView(MarketDetailsColumns.PrimaryRating.ToString), DataRowView(MarketDetailsColumns.BookPrimaryRating.ToString)))

                        Next

                    Else

                        For Each DataRowView In DataRowViewList

                            RowSpots = 0

                            If String.IsNullOrWhiteSpace(DateColumnName) = False Then

                                RowSpots += CInt(DataRowView(DateColumnName))

                            Else

                                RowSpots = DataRowView(MarketDetailsColumns.TotalSpots.ToString)

                            End If

                            AllReachValuesList.Add(CalculateTVReach(DataRowView(MarketDetailsColumns.SecondaryImpressions.ToString), DataRowView(MarketDetailsColumns.SecondaryCumeImpressions.ToString),
                                                                    RowSpots, DataRowView(MarketDetailsColumns.SecondaryUniverse.ToString),
                                                                    DataRowView(MarketDetailsColumns.SecondaryRating.ToString), DataRowView(MarketDetailsColumns.BookSecondaryRating.ToString)))

                        Next

                    End If

                End If

                AllReachValues = AllReachValuesList.ToArray

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If String.IsNullOrWhiteSpace(VendorCode) = False Then

                    DataRowViewList = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.OfType(Of System.Data.DataRowView).Where(Function(DRV) CStr(DRV(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                                                                                                                                    CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).ToList

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 AndAlso
                            DataRowViewList.Any(Function(DRV) DRV(MarketDetailsColumns.VendorRadioStationComboID.ToString) <> 0) Then

                        If IsPrimaryDemo Then

                            CumesValues = DataRowViewList.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.PrimaryCume.ToString))).Distinct.ToList

                        Else

                            CumesValues = DataRowViewList.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.SecondaryCume.ToString))).Distinct.ToList

                        End If

                    Else

                        CumesValues = New Generic.List(Of Long)

                    End If

                Else

                    DataRowViewList = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.OfType(Of System.Data.DataRowView).Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).ToList

                    If MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 AndAlso
                            DataRowViewList.Any(Function(DRV) DRV(MarketDetailsColumns.VendorRadioStationComboID.ToString) <> 0) Then

                        If IsPrimaryDemo Then

                            CumesValues = DataRowViewList.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.PrimaryCume.ToString))).Distinct.ToList

                        Else

                            CumesValues = DataRowViewList.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.SecondaryCume.ToString))).Distinct.ToList

                        End If

                    Else

                        CumesValues = New Generic.List(Of Long)

                    End If

                End If

                AllReachValuesList = New Generic.List(Of Double)

                If CumesValues.Count > 0 Then

                    For Each Cume In CumesValues

                        TotalSpots = 0
                        TotalAQH = 0
                        TotalRating = 0
                        TotalSpotImpressions = 0
                        Universe = 0

                        For Each DataRowView In DataRowViewList.Where(Function(DRV) Cume = If(IsPrimaryDemo, CLng(DRV(MarketDetailsColumns.PrimaryCume.ToString)), CLng(DRV(MarketDetailsColumns.SecondaryCume.ToString))))

                            RowSpots = 0
                            AQH = CLng(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryAQH.ToString), DataRowView(MarketDetailsColumns.SecondaryAQH.ToString)))

                            TotalAQH += AQH
                            TotalRating += CDec(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString), DataRowView(MarketDetailsColumns.SecondaryAQHRating.ToString)))
                            Universe = CLng(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryUniverse.ToString), DataRowView(MarketDetailsColumns.SecondaryUniverse.ToString)))

                            If String.IsNullOrWhiteSpace(DateColumnName) = False Then

                                RowSpots += CInt(DataRowView(DateColumnName))

                            Else

                                RowSpots += CInt(DataRowView(MarketDetailsColumns.TotalSpots.ToString))

                                'For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                                '    RowSpots += CInt(DataRowView(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)))

                                'Next

                            End If

                            TotalSpots = RowSpots

                            TotalSpotImpressions += (AQH * RowSpots)

                            BookRating = CDec(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.BookPrimaryAQHRating.ToString), DataRowView(MarketDetailsColumns.BookSecondaryAQHRating.ToString)))

                            If DataRowView(MarketDetailsColumns.VendorIsComboRadioStation.ToString) Then

                                AllReachValuesList.Add(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryReach.ToString), DataRowView(MarketDetailsColumns.SecondaryReach.ToString)))

                            Else

                                If Cume < AQH Then

                                    AllReachValuesList.Add(CalculateCumlessReach(CDec(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString), DataRowView(MarketDetailsColumns.SecondaryAQHRating.ToString))), TotalSpots))

                                Else

                                    AllReachValuesList.Add(CalculateRadioReach(AQH, Cume, RowSpots, Universe, CDec(If(IsPrimaryDemo, DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString), DataRowView(MarketDetailsColumns.SecondaryAQHRating.ToString))), BookRating))

                                End If

                            End If

                        Next

                        'If Cume = 0 Then

                        '	If Universe <> 0 AndAlso TotalSpots <> 0 Then

                        '		TotalRating = ((TotalSpotImpressions / TotalSpots) / Universe)

                        '	Else

                        '		TotalRating = 0

                        '	End If

                        'End If

                    Next

                ElseIf DataRowViewList IsNot Nothing AndAlso DataRowViewList.Count > 0 Then

                    If IsPrimaryDemo Then

                        For Each DataRowView In DataRowViewList

                            RowSpots = 0

                            If String.IsNullOrWhiteSpace(DateColumnName) = False Then

                                RowSpots += CInt(DataRowView(DateColumnName))

                            Else

                                RowSpots = DataRowView(MarketDetailsColumns.TotalSpots.ToString)

                            End If

                            AllReachValuesList.Add(CalculateRadioReach(DataRowView(MarketDetailsColumns.PrimaryAQH.ToString), DataRowView(MarketDetailsColumns.PrimaryCume.ToString),
                                                                       RowSpots, DataRowView(MarketDetailsColumns.PrimaryUniverse.ToString),
                                                                       DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString), DataRowView(MarketDetailsColumns.BookPrimaryAQHRating.ToString)))

                        Next

                    Else

                        For Each DataRowView In DataRowViewList

                            RowSpots = 0

                            If String.IsNullOrWhiteSpace(DateColumnName) = False Then

                                RowSpots += CInt(DataRowView(DateColumnName))

                            Else

                                RowSpots = DataRowView(MarketDetailsColumns.TotalSpots.ToString)

                            End If

                            AllReachValuesList.Add(CalculateRadioReach(DataRowView(MarketDetailsColumns.SecondaryAQH.ToString), DataRowView(MarketDetailsColumns.SecondaryCume.ToString),
                                                                       RowSpots, DataRowView(MarketDetailsColumns.SecondaryUniverse.ToString),
                                                                       DataRowView(MarketDetailsColumns.SecondaryAQHRating.ToString), DataRowView(MarketDetailsColumns.BookSecondaryAQHRating.ToString)))

                        Next

                    End If

                End If

                AllReachValues = AllReachValuesList.ToArray

            End If

            If AllReachValues.Length > 2 Then

                ReachTotal = (AllReachValues(0) + AllReachValues(1)) - (AllReachValues(0) * AllReachValues(1))

                ReachTotal = Math.Round(ReachTotal, 3)

                For ReachValueIndex As Integer = 2 To AllReachValues.Length - 1

                    ReachTotal = (ReachTotal + AllReachValues(ReachValueIndex)) - (ReachTotal * AllReachValues(ReachValueIndex))

                    ReachTotal = Math.Round(ReachTotal, 3)

                Next

            ElseIf AllReachValues.Length = 2 Then

                ReachTotal = (AllReachValues(0) + AllReachValues(1)) - (AllReachValues(0) * AllReachValues(1))

                ReachTotal = Math.Round(ReachTotal, 3)

            ElseIf AllReachValues.Length = 1 Then

                ReachTotal = AllReachValues(0)

            End If

            If Double.IsNaN(ReachTotal) Then

                ReachTotal = 0

            End If

            MarketDetails_CalculateReachTotal = ReachTotal

        End Function
        Public Function MarketDetails_CalculateFrequencyTotal(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                              VendorCode As String, IsPrimaryDemo As Boolean, DateColumnName As String) As Double

            'objects
            Dim FrequencyTotal As Double = 0
            Dim GRP As Double = 0
            Dim Reach As Double = 0

            Reach = MarketDetails_CalculateReachTotal(MediaBroadcastWorksheetMarketDetailsViewModel, VendorCode, IsPrimaryDemo, DateColumnName)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If String.IsNullOrWhiteSpace(VendorCode) = False Then

                    If IsPrimaryDemo Then

                        If String.IsNullOrWhiteSpace(DateColumnName) Then

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                         CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CDbl(DataRowView(MarketDetailsColumns.PrimaryGRP.ToString))).Sum()

                        Else

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                         CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CInt(DataRowView(DateColumnName)) * CDbl(DataRowView(MarketDetailsColumns.PrimaryRating.ToString))).Sum()

                        End If

                        'Reach = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                        '		 Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode
                        '		 Select CDec(DataRowView(MarketDetailsColumns.PrimaryReach.ToString))).Sum()

                    Else

                        If String.IsNullOrWhiteSpace(DateColumnName) Then

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                         CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CDbl(DataRowView(MarketDetailsColumns.SecondaryGRP.ToString))).Sum()

                        Else

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                         CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CInt(DataRowView(DateColumnName)) * CDbl(DataRowView(MarketDetailsColumns.SecondaryRating.ToString))).Sum()

                        End If

                    End If

                Else

                    If IsPrimaryDemo Then

                        If String.IsNullOrWhiteSpace(DateColumnName) Then

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CDbl(DataRowView(MarketDetailsColumns.PrimaryGRP.ToString))).Sum()

                        Else

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CInt(DataRowView(DateColumnName)) * CDbl(DataRowView(MarketDetailsColumns.PrimaryRating.ToString))).Sum()

                        End If

                    Else

                        If String.IsNullOrWhiteSpace(DateColumnName) Then

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CDbl(DataRowView(MarketDetailsColumns.SecondaryGRP.ToString))).Sum()

                        Else

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CInt(DataRowView(DateColumnName)) * CDbl(DataRowView(MarketDetailsColumns.SecondaryRating.ToString))).Sum()

                        End If

                    End If

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If String.IsNullOrWhiteSpace(VendorCode) = False Then

                    If IsPrimaryDemo Then

                        If String.IsNullOrWhiteSpace(DateColumnName) Then

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                         CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CDbl(DataRowView(MarketDetailsColumns.PrimaryGRP.ToString))).Sum()

                        Else

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                         CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CInt(DataRowView(DateColumnName)) * CDbl(DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString))).Sum()

                        End If

                        'Reach = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                        '		 Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode
                        '		 Select CDec(DataRowView(MarketDetailsColumns.PrimaryReach.ToString))).Sum()

                    Else

                        If String.IsNullOrWhiteSpace(DateColumnName) Then

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                         CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CDbl(DataRowView(MarketDetailsColumns.SecondaryGRP.ToString))).Sum()

                        Else

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                         CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CInt(DataRowView(DateColumnName)) * CDbl(DataRowView(MarketDetailsColumns.SecondaryAQHRating.ToString))).Sum()

                        End If

                    End If

                Else

                    If IsPrimaryDemo Then

                        If String.IsNullOrWhiteSpace(DateColumnName) Then

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CDbl(DataRowView(MarketDetailsColumns.PrimaryGRP.ToString))).Sum()

                        Else

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CInt(DataRowView(DateColumnName)) * CDbl(DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString))).Sum()

                        End If

                    Else

                        If String.IsNullOrWhiteSpace(DateColumnName) Then

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CDbl(DataRowView(MarketDetailsColumns.SecondaryGRP.ToString))).Sum()

                        Else

                            GRP = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                   Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                   Select CInt(DataRowView(DateColumnName)) * CDbl(DataRowView(MarketDetailsColumns.SecondaryAQHRating.ToString))).Sum()

                        End If

                    End If

                End If

            End If

            If Reach = 0 Then

                FrequencyTotal = 0

            Else

                FrequencyTotal = GRP / (Reach * 100)

            End If

            If Double.IsNaN(FrequencyTotal) Then

                FrequencyTotal = 0

            End If

            MarketDetails_CalculateFrequencyTotal = FrequencyTotal

        End Function
        Public Function MarketDetails_CalculateRowTotalsTotalColumn(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                    RowTotalRow As MarketDetails_RowTotalRows) As Double

            'objects
            Dim Totals As Double = 0
            Dim TotalDollars As Double = 0
            Dim TotalGoalDollars As Double = 0
            Dim TotalRating As Double = 0
            Dim TotalGoalRating As Double = 0

            If RowTotalRow = AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController.MarketDetails_RowTotalRows.VarianceDollarsPercent Then

                TotalDollars = MarketDetails_CalculateRowTotalsTotalColumn(MediaBroadcastWorksheetMarketDetailsViewModel, AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController.MarketDetails_RowTotalRows.TotalDollars)
                TotalGoalDollars = MarketDetails_CalculateRowTotalsTotalColumn(MediaBroadcastWorksheetMarketDetailsViewModel, AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController.MarketDetails_RowTotalRows.GoalDollars)

                If TotalGoalDollars <> 0 Then

                    Totals = TotalDollars / TotalGoalDollars

                End If

            ElseIf RowTotalRow = AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController.MarketDetails_RowTotalRows.VarianceRatingsPercent Then

                TotalRating = MarketDetails_CalculateRowTotalsTotalColumn(MediaBroadcastWorksheetMarketDetailsViewModel, AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController.MarketDetails_RowTotalRows.TotalRatings)
                TotalGoalRating = MarketDetails_CalculateRowTotalsTotalColumn(MediaBroadcastWorksheetMarketDetailsViewModel, AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController.MarketDetails_RowTotalRows.GoalRatings)

                If TotalGoalRating <> 0 Then

                    Totals = TotalRating / TotalGoalRating

                End If

            Else

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    Totals += MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(RowTotalRow)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))

                Next

            End If

            MarketDetails_CalculateRowTotalsTotalColumn = Totals

        End Function
        Public Function MarketDetails_CalculateVendorTotalsForColumn(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                     VendorCode As String, ColumnName As String) As Double

            'objects
            Dim Total As Double = 0
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            'FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            If String.IsNullOrWhiteSpace(ColumnName) = False AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Contains(ColumnName) Then

                Total = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                         Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False AndAlso
                               CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode
                         Select CDbl(DataRowView(ColumnName))).Sum()

                'Total = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.OnHold.ToString) = False AndAlso DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode).Sum(Function(DR) CDbl(DR(ColumnName)))

            End If

            MarketDetails_CalculateVendorTotalsForColumn = Total

        End Function
        Public Function MarketDetails_CalculateTotalsForColumn(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                               ColumnName As String) As Double

            'objects
            Dim Total As Double = 0
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            'FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            If String.IsNullOrWhiteSpace(ColumnName) = False AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Contains(ColumnName) Then

                Total = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                         Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                         Select CDbl(DataRowView(ColumnName))).Sum()

                'Total = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.OnHold.ToString) = False).Sum(Function(DR) CDbl(DR(ColumnName)))

            End If

            MarketDetails_CalculateTotalsForColumn = Total

        End Function
        Public Function MarketDetails_CalculateCPMTotal(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                        VendorCode As String, IsPrimaryDemo As Boolean) As Double

            'objects
            Dim CPMTotal As Double = 0
            Dim Dollars As Double = 0
            Dim GrossImpressions As Double = 0

            GrossImpressions = MarketDetails_CalculateGrossImpressionsTotal(MediaBroadcastWorksheetMarketDetailsViewModel, VendorCode, IsPrimaryDemo)

            If String.IsNullOrWhiteSpace(VendorCode) = False Then

                Dollars = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                           Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                                 CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                           Select CDbl(DataRowView(MarketDetailsColumns.TotalDollars.ToString))).Sum()

                'If IsPrimaryDemo Then

                '    GrossImpressions = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                '                        Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                '                              CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                '                        Select CDbl(DataRowView(MarketDetailsColumns.PrimaryGrossImpressions.ToString))).Sum()

                'Else

                '    GrossImpressions = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                '                        Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode AndAlso
                '                              CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                '                        Select CDbl(DataRowView(MarketDetailsColumns.SecondaryGrossImpressions.ToString))).Sum()

                'End If

            Else

                Dollars = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                           Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                           Select CDbl(DataRowView(MarketDetailsColumns.TotalDollars.ToString))).Sum()

                'If IsPrimaryDemo Then

                '    GrossImpressions = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                '                        Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                '                        Select CDbl(DataRowView(MarketDetailsColumns.PrimaryGrossImpressions.ToString))).Sum()

                'Else

                '    GrossImpressions = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                '                        Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                '                        Select CDbl(DataRowView(MarketDetailsColumns.SecondaryGrossImpressions.ToString))).Sum()

                'End If

            End If

            If GrossImpressions = 0 Then

                CPMTotal = 0

            Else

                CPMTotal = (Dollars / GrossImpressions) * 1000

            End If

            If Double.IsNaN(CPMTotal) Then

                CPMTotal = 0

            End If

            MarketDetails_CalculateCPMTotal = CPMTotal

        End Function
        Public Sub MarketDetails_LoadStations(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim NielsenMarketNumber As Integer = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable Then

                        If Session.IsNielsenSetup Then

                            If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode) = False Then

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode

                                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenNCCTVSyscodes = NielsenDbContext.NCCTVSyscodes.Where(Function(Entity) Entity.NielsenMarketNumber = NielsenMarketNumber).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Nielsen.NCCTVSyscode(Entity)).ToList

                                End Using

                            Else

                                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenNCCTVSyscodes = New List(Of AdvantageFramework.DTO.Nielsen.NCCTVSyscode)

                            End If

                        Else

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenNCCTVSyscodes = New List(Of AdvantageFramework.DTO.Nielsen.NCCTVSyscode)

                        End If

                    Else

                        If Session.IsNielsenSetup Then

                            If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode) = False Then

                                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVStations = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.DTO.Media.SpotTV.Station)(String.Format("exec [advsp_media_spot_tv_stations] {0}, NULL", CInt(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode))).ToList

                                End Using

                            Else

                                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVStations = New List(Of AdvantageFramework.DTO.Media.SpotTV.Station)

                            End If

                        Else

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVStations = New List(Of AdvantageFramework.DTO.Media.SpotTV.Station)

                        End If

                        'If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico AndAlso Session.IsNielsenPuertoRicoSetup Then

                        '    Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                        '        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVPuertoRicoStations = (From Entity In (From Entity In DbContext.GetQuery(Of Database.Entities.NPRStation)
                        '                                                                                                                    Select Entity).ToList
                        '                                                                                                    Select New AdvantageFramework.DTO.Media.SpotTVPuertoRico.Station(Entity)).ToList

                        '    End Using

                        'End If

                    End If

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVStations = New List(Of AdvantageFramework.DTO.Media.SpotTV.Station)
                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenNCCTVSyscodes = New List(Of AdvantageFramework.DTO.Nielsen.NCCTVSyscode)
                    'MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVPuertoRicoStations = New List(Of AdvantageFramework.DTO.Media.SpotTVPuertoRico.Station)

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso Session.IsNielsenSetup Then

                    If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode) = False Then

                        Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioStations = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.DTO.Media.SpotRadio.Station)(String.Format("exec [advsp_media_spot_radio_stations_v2] {0}, NULL, {1}", CInt(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode), CInt(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource))).ToList

                        End Using

                    Else

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioStations = New List(Of AdvantageFramework.DTO.Media.SpotRadio.Station)

                    End If

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioStations = New List(Of AdvantageFramework.DTO.Media.SpotRadio.Station)

                End If

            End If

        End Sub
        Public Function MarketDetails_LoadVendorInfo(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                     VendorName As String, Optional ByRef VendorMakegoodStatus As String = Nothing, Optional ByRef HasGeneratePending As Boolean = False, Optional ByRef IsRed As Boolean = False) As String

            'objects
            Dim VendorInfo As String = String.Empty
            Dim VendorNielsenTVStationCode As String = String.Empty
            Dim VendorNielsenRadioStationComboID As String = String.Empty
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim NielsenTVStation As AdvantageFramework.DTO.Media.SpotTV.Station = Nothing
            Dim NielsenRadioStation As AdvantageFramework.DTO.Media.SpotRadio.Station = Nothing
            Dim NielsenNCCTVSyscode As AdvantageFramework.DTO.Nielsen.NCCTVSyscode = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable Then

                        VendorNCCTVSyscodeID = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorName.ToString) = VendorName AndAlso
                                                                                                                                                              DR(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) <> 0).
                                                                                                                                           Select(Function(DR) CInt(DR(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString))).FirstOrDefault()

                        If VendorNCCTVSyscodeID <> 0 Then

                            NielsenNCCTVSyscode = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenNCCTVSyscodes.SingleOrDefault(Function(Entity) Entity.ID = VendorNCCTVSyscodeID)

                            If NielsenNCCTVSyscode IsNot Nothing Then

                                VendorInfo = VendorName & " / " & NielsenNCCTVSyscode.Syscode & " / " & NielsenNCCTVSyscode.SystemName

                            Else

                                VendorInfo = VendorName

                            End If

                        Else

                            VendorInfo = VendorName

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVStations IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVStations.Count > 0 Then

                            VendorNielsenTVStationCode = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorName.ToString) = VendorName AndAlso
                                                                                                                                                                        DR(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) IsNot DBNull.Value).
                                                                                                                                                     Select(Function(DR) CStr(DR(MarketDetailsColumns.VendorNielsenTVStationCode.ToString))).FirstOrDefault()

                        End If

                        If String.IsNullOrWhiteSpace(VendorNielsenTVStationCode) = False AndAlso VendorNielsenTVStationCode <> "0" Then

                            NielsenTVStation = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVStations.FirstOrDefault(Function(Entity) Entity.StationCode = VendorNielsenTVStationCode)

                            If NielsenTVStation IsNot Nothing Then

                                VendorInfo = NielsenTVStation.Station

                                If String.IsNullOrWhiteSpace(NielsenTVStation.Affiliation) = False Then

                                    VendorInfo &= " / " & NielsenTVStation.Affiliation

                                End If

                            End If

                        Else

                            VendorInfo = VendorName

                        End If

                    End If

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                    VendorInfo = VendorName

                Else

                    VendorInfo = VendorName

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioStations IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioStations.Count > 0 Then

                    VendorNielsenRadioStationComboID = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorName.ToString) = VendorName AndAlso
                                                                                                                                                                      DR(MarketDetailsColumns.VendorRadioStationComboID.ToString) IsNot DBNull.Value).
                                                                                                                                                   Select(Function(DR) CStr(DR(MarketDetailsColumns.VendorRadioStationComboID.ToString))).FirstOrDefault()

                End If

                VendorInfo = VendorName

                If String.IsNullOrWhiteSpace(VendorNielsenRadioStationComboID) = False AndAlso VendorNielsenRadioStationComboID <> "0" Then

                    NielsenRadioStation = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioStations.FirstOrDefault(Function(Entity) Entity.ComboID = VendorNielsenRadioStationComboID)

                    If NielsenRadioStation IsNot Nothing Then

                        VendorInfo &= " / " & NielsenRadioStation.Format

                        If String.IsNullOrWhiteSpace(NielsenRadioStation.Frequency) = False Then

                            VendorInfo &= " / " & NielsenRadioStation.Frequency

                        End If

                    End If

                Else

                    VendorInfo = VendorName

                End If

            End If

            If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(Entity) Entity.VendorName = VendorName).Count > 0 Then

                If (From Entity In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses
                    Where Entity.VendorName = VendorName AndAlso
                          Entity.GeneratePending = True
                    Select Entity).Any Then

                    HasGeneratePending = True

                End If

                If (From Entity In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses
                    Where Entity.VendorName = VendorName
                    Select Entity.Status).Distinct.Count = 1 Then

                    Select Case MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses.Where(Function(Entity) Entity.VendorName = VendorName).First.Status

                        Case Database.Entities.Methods.OrderStatusType.OrderGenerated

                            VendorMakegoodStatus = "[Awaiting Vendor Reply]"

                        Case Database.Entities.Methods.OrderStatusType.OrderAccepted

                            VendorMakegoodStatus = "[Order Accepted]"

                        Case Database.Entities.Methods.OrderStatusType.OrderRejected

                            VendorMakegoodStatus = "[Order Rejected]"
                            IsRed = True

                        Case Database.Entities.Methods.OrderStatusType.ModifiedPendingCreate

                            VendorMakegoodStatus = "[Modified - Order Creation Required]"

                        Case Database.Entities.Methods.OrderStatusType.ModifiedPendingGenerate

                            VendorMakegoodStatus = "[Modified - Order Generation Required]"

                        Case Database.Entities.Methods.OrderStatusType.MakegoodOfferSubmitted

                            VendorMakegoodStatus = "[Makegood Submission Pending]"
                            IsRed = True

                        Case Database.Entities.Methods.OrderStatusType.MakegoodOfferRejected

                            VendorMakegoodStatus = "[Makegood Offer Rejected]"

                        Case Database.Entities.Methods.OrderStatusType.MakegoodOfferAccepted

                            VendorMakegoodStatus = "[Makegood Accepted]"

                    End Select

                Else

                    VendorMakegoodStatus = "[Action Needed]"
                    IsRed = True

                End If

            Else

                VendorMakegoodStatus = "[Pending]"

            End If

            MarketDetails_LoadVendorInfo = VendorInfo

        End Function
        Public Function MarketDetails_LoadNielsenRadioPeriodsBook1(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            'objects
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing
            Dim ExcludeNielsenRadioPeriodIDs As Generic.List(Of Integer) = Nothing
            Dim ExcludeDates As Generic.List(Of Date) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                ExcludeNielsenRadioPeriodIDs = New Generic.List(Of Integer)

                'ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0))

                ExcludeDates = MarketDetails_GetNielsenRadioExcludeDates(ExcludeNielsenRadioPeriodIDs)

                NielsenRadioPeriods = (From NielsenRadioPeriod In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioPeriods
                                       Where ExcludeNielsenRadioPeriodIDs.Contains(NielsenRadioPeriod.ID) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.StartDate) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.EndDate) = False
                                       Select NielsenRadioPeriod).ToList

            Else

                NielsenRadioPeriods = New List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            End If

            MarketDetails_LoadNielsenRadioPeriodsBook1 = NielsenRadioPeriods

        End Function
        Public Function MarketDetails_LoadNielsenRadioPeriodsBook2(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            'objects
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing
            Dim ExcludeNielsenRadioPeriodIDs As Generic.List(Of Integer) = Nothing
            Dim ExcludeDates As Generic.List(Of Date) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                ExcludeNielsenRadioPeriodIDs = New Generic.List(Of Integer)

                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0))
                'ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0))

                ExcludeDates = MarketDetails_GetNielsenRadioExcludeDates(ExcludeNielsenRadioPeriodIDs)

                NielsenRadioPeriods = (From NielsenRadioPeriod In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioPeriods
                                       Where ExcludeNielsenRadioPeriodIDs.Contains(NielsenRadioPeriod.ID) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.StartDate) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.EndDate) = False
                                       Select NielsenRadioPeriod).ToList

            Else

                NielsenRadioPeriods = New List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            End If

            MarketDetails_LoadNielsenRadioPeriodsBook2 = NielsenRadioPeriods

        End Function
        Public Function MarketDetails_LoadNielsenRadioPeriodsBook3(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            'objects
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing
            Dim ExcludeNielsenRadioPeriodIDs As Generic.List(Of Integer) = Nothing
            Dim ExcludeDates As Generic.List(Of Date) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                ExcludeNielsenRadioPeriodIDs = New Generic.List(Of Integer)

                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0))
                'ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0))

                ExcludeDates = MarketDetails_GetNielsenRadioExcludeDates(ExcludeNielsenRadioPeriodIDs)

                NielsenRadioPeriods = (From NielsenRadioPeriod In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioPeriods
                                       Where ExcludeNielsenRadioPeriodIDs.Contains(NielsenRadioPeriod.ID) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.StartDate) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.EndDate) = False
                                       Select NielsenRadioPeriod).ToList

            Else

                NielsenRadioPeriods = New List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            End If

            MarketDetails_LoadNielsenRadioPeriodsBook3 = NielsenRadioPeriods

        End Function
        Public Function MarketDetails_LoadNielsenRadioPeriodsBook4(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            'objects
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing
            Dim ExcludeNielsenRadioPeriodIDs As Generic.List(Of Integer) = Nothing
            Dim ExcludeDates As Generic.List(Of Date) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                ExcludeNielsenRadioPeriodIDs = New Generic.List(Of Integer)

                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0))
                'ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0))

                ExcludeDates = MarketDetails_GetNielsenRadioExcludeDates(ExcludeNielsenRadioPeriodIDs)

                NielsenRadioPeriods = (From NielsenRadioPeriod In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioPeriods
                                       Where ExcludeNielsenRadioPeriodIDs.Contains(NielsenRadioPeriod.ID) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.StartDate) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.EndDate) = False
                                       Select NielsenRadioPeriod).ToList

            Else

                NielsenRadioPeriods = New List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            End If

            MarketDetails_LoadNielsenRadioPeriodsBook4 = NielsenRadioPeriods

        End Function
        Public Function MarketDetails_LoadNielsenRadioPeriodsBook5(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            'objects
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing
            Dim ExcludeNielsenRadioPeriodIDs As Generic.List(Of Integer) = Nothing
            Dim ExcludeDates As Generic.List(Of Date) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                ExcludeNielsenRadioPeriodIDs = New Generic.List(Of Integer)

                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0))
                ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0))
                'ExcludeNielsenRadioPeriodIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0))

                ExcludeDates = MarketDetails_GetNielsenRadioExcludeDates(ExcludeNielsenRadioPeriodIDs)

                NielsenRadioPeriods = (From NielsenRadioPeriod In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioPeriods
                                       Where ExcludeNielsenRadioPeriodIDs.Contains(NielsenRadioPeriod.ID) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.StartDate) = False AndAlso
                                             ExcludeDates.Contains(NielsenRadioPeriod.EndDate) = False
                                       Select NielsenRadioPeriod).ToList

            Else

                NielsenRadioPeriods = New List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            End If

            MarketDetails_LoadNielsenRadioPeriodsBook5 = NielsenRadioPeriods

        End Function
        Public Function MarketDetails_LoadMarketSelection(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As IEnumerable

            MarketDetails_LoadMarketSelection = LoadMarketSelection(MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType, MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets)

        End Function
        Public Function MarketDetails_LoadWorksheetFullName(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As String

            MarketDetails_LoadWorksheetFullName = LoadWorksheetFullName(MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket)

        End Function
        Public Sub MarketDetails_AQHChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                            RowIndex As Integer, AQH As Integer, IsPrimary As Boolean)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim TotalSpots As Integer = 0
            Dim ColumnName As String = String.Empty

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                TotalSpots += CInt(DataRow(ColumnName))

            Next

            If IsPrimary Then

                DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = AQH * 100
                'DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = CInt(DataRow(MarketDetailsColumns.PrimaryAQH.ToString)) * TotalSpots

            Else

                DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = AQH * 100
                'DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = CInt(DataRow(MarketDetailsColumns.SecondaryAQH.ToString)) * TotalSpots

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Private Function MarketDetails_AnyRowsHaveOrders(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Boolean

            'objects
            Dim AnyRowsHaveOrders As Boolean = False
            Dim DataRow As System.Data.DataRow = Nothing
            Dim OrderStatusColumnName As String = String.Empty

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                    OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)

                    If DataRow(OrderStatusColumnName) <> CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) Then

                        AnyRowsHaveOrders = True
                        Exit For

                    End If

                Next

                If AnyRowsHaveOrders Then

                    Exit For

                End If

            Next

            MarketDetails_AnyRowsHaveOrders = AnyRowsHaveOrders

        End Function
        Public Function MarketDetails_AnyRowsHaveOrders(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                        RowIndexes As Generic.List(Of Integer)) As Boolean

            'objects
            Dim RowsDoHaveOrders As Boolean = False
            Dim OrderStatusColumnName As String = String.Empty

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).ToList

                If RowIndexes.Contains(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow)) Then

                    For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                        OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)

                        If DataRow(OrderStatusColumnName) <> CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) Then

                            RowsDoHaveOrders = True
                            Exit For

                        End If

                    Next

                End If

                If RowsDoHaveOrders Then

                    Exit For

                End If

            Next

            MarketDetails_AnyRowsHaveOrders = RowsDoHaveOrders

        End Function
        Private Function MarketDetails_DataRowHaveOrders(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                        DataRow As System.Data.DataRow) As Boolean

            'objects
            Dim DataRowDoHaveOrders As Boolean = False
            Dim OrderStatusColumnName As String = String.Empty

            If DataRow IsNot Nothing Then

                For Each OrderStatusDate In MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.Keys.OfType(Of Date).OrderBy(Function(OSD) OSD)

                    OrderStatusColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(OrderStatusDate)

                    If DataRow(OrderStatusColumnName) <> CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) Then

                        DataRowDoHaveOrders = True
                        Exit For

                    End If

                Next

            End If

            MarketDetails_DataRowHaveOrders = DataRowDoHaveOrders

        End Function
        Public Function MarketDetails_LoadMediaManagerReviewDetails(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                    RowIndexes As Generic.List(Of Integer),
                                                                    ByRef OrderSubmittedList As Generic.List(Of AdvantageFramework.Classes.Media.OrderSubmitted)) As Generic.List(Of AdvantageFramework.MediaManager.Classes.MediaManagerReviewDetail)

            'objects
            Dim MediaManagerReviewDetails As Generic.List(Of AdvantageFramework.MediaManager.Classes.MediaManagerReviewDetail) = Nothing
            Dim OrderNumbers As Generic.List(Of Integer) = Nothing
            Dim OrderNumberLineNumbers As Generic.List(Of String) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing
            Dim OrderNumberLineNumber As String = String.Empty
            Dim MediaBroadcastWorksheetMarketDetailID As Integer = 0
            Dim MediaBroadcastWorksheetMarketID As Integer = 0
            Dim MediaBroadcastWorksheetID As Integer = 0
            Dim MediaBroadcastWorksheetMarketDetailIDs As Generic.List(Of Integer) = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim VendorCodes As Generic.List(Of String) = Nothing
            'Dim MediaManagerSearchSetting As AdvantageFramework.Database.Entities.MediaManagerSearchSetting = Nothing

            OrderNumbers = New Generic.List(Of Integer)
            OrderNumberLineNumbers = New Generic.List(Of String)
            MediaBroadcastWorksheetMarketDetailIDs = New Generic.List(Of Integer)
            VendorCodes = New Generic.List(Of String)

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                For Each RowIndex In RowIndexes

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Item(RowIndex)

                    If VendorCodes.Contains(CStr(DataRow(MarketDetailsColumns.VendorCode.ToString))) = False Then

                        VendorCodes.Add(CStr(DataRow(MarketDetailsColumns.VendorCode.ToString)))

                    End If

                Next

                For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).ToList

                    'If RowIndexes.Contains(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow)) AndAlso
                    '        MarketDetails_DataRowHaveOrders(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow) Then

                    If VendorCodes.Contains(DataRow(MarketDetailsColumns.VendorCode.ToString)) AndAlso
                            MarketDetails_DataRowHaveOrders(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow) Then

                        MediaBroadcastWorksheetMarketDetailID = CInt(DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString))

                        MediaBroadcastWorksheetMarketDetailIDs.Add(MediaBroadcastWorksheetMarketDetailID)

                        For Each MediaBroadcastWorksheetMarketDetailDate In DbContext.MediaBroadcastWorksheetMarketDetailDates.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).ToList

                            OrderNumberLineNumber = String.Empty

                            If MediaBroadcastWorksheetMarketDetailDate.OrderNumber.HasValue AndAlso MediaBroadcastWorksheetMarketDetailDate.OrderNumber.Value > 0 AndAlso
                                    MediaBroadcastWorksheetMarketDetailDate.OrderLineNumber.HasValue AndAlso MediaBroadcastWorksheetMarketDetailDate.OrderLineNumber.Value > 0 Then

                                If OrderNumbers.Contains(MediaBroadcastWorksheetMarketDetailDate.OrderNumber.Value) = False Then

                                    OrderNumbers.Add(MediaBroadcastWorksheetMarketDetailDate.OrderNumber.Value)

                                End If

                                OrderNumberLineNumber = MediaBroadcastWorksheetMarketDetailDate.OrderNumber.Value.ToString & "|" & MediaBroadcastWorksheetMarketDetailDate.OrderLineNumber.Value.ToString

                            End If

                            If String.IsNullOrWhiteSpace(OrderNumberLineNumber) = False AndAlso OrderNumberLineNumbers.Contains(OrderNumberLineNumber) = False Then

                                OrderNumberLineNumbers.Add(OrderNumberLineNumber)

                            End If

                        Next

                    End If

                Next

            End Using

            If OrderNumbers IsNot Nothing AndAlso OrderNumbers.Count > 0 Then

                MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID
                MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetID

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    'DbContext.Database.Connection.Open()
                    'DbContext.Configuration.AutoDetectChangesEnabled = False

                    'MediaManagerSearchSetting = DbContext.MediaManagerSearchSettings.Find(Me.Session.UserCode)

                    'If MediaManagerSearchSetting Is Nothing Then

                    '    MediaManagerSearchSetting = New AdvantageFramework.Database.Entities.MediaManagerSearchSetting

                    '    DbContext.MediaManagerSearchSettings.Add(MediaManagerSearchSetting)

                    'End If

                    'MediaManagerSearchSetting.UserCode = Me.Session.UserCode
                    'MediaManagerSearchSetting.SelectInternet = False
                    'MediaManagerSearchSetting.SelectMagazine = False
                    'MediaManagerSearchSetting.SelectNewspaper = False
                    'MediaManagerSearchSetting.SelectOutOfHome = False

                    'If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    '    MediaManagerSearchSetting.SelectRadio = True
                    '    MediaManagerSearchSetting.SelectTV = False

                    'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    '    MediaManagerSearchSetting.SelectRadio = False
                    '    MediaManagerSearchSetting.SelectTV = True

                    'End If

                    'MediaManagerSearchSetting.SelectPO = False
                    'MediaManagerSearchSetting.IncludeOrderQuoteBoth = 1
                    'MediaManagerSearchSetting.FilterBy = 0
                    'MediaManagerSearchSetting.IncludeOrderLineDates = False
                    'MediaManagerSearchSetting.IncludeJobMediaDateToBill = False
                    'MediaManagerSearchSetting.IncludeClosedOrders = False
                    'MediaManagerSearchSetting.MediaMonthStart = Nothing
                    'MediaManagerSearchSetting.MediaMonthEnd = Nothing
                    'MediaManagerSearchSetting.OrderLineStartDate = Nothing
                    'MediaManagerSearchSetting.OrderLineEndDate = Nothing
                    'MediaManagerSearchSetting.JobMediaStartDate = Nothing
                    'MediaManagerSearchSetting.JobMediaEndDate = Nothing

                    'DbContext.Configuration.AutoDetectChangesEnabled = True

                    'DbContext.SaveChanges()

                    'AdvantageFramework.MediaManager.DeleteOrderSelection(DbContext)

                    'AdvantageFramework.MediaManager.SaveOrderSelection(DbContext, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, OrderNumbers, Nothing, Nothing, Nothing, Nothing, Nothing)

                    MarketDetails_OkayToGenerate(MediaBroadcastWorksheetMarketDetailIDs.ToArray, OrderSubmittedList)

                    MediaManagerReviewDetails = AdvantageFramework.MediaManager.LoadMediaManagerReviewDetails(DbContext, Nothing, Nothing, Nothing, Nothing,
                                                                                                              Nothing, Nothing, OrderNumbers, Nothing, Nothing,
                                                                                                              Nothing, Nothing, False, Nothing, False, Nothing, True, True)

                End Using

            End If

            MarketDetails_LoadMediaManagerReviewDetails = MediaManagerReviewDetails

        End Function
        Public Sub MarketDetails_Recalculate(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim RefreshPrimaryDemoData As Boolean = False
            Dim RefreshSecondaryDemoData As Boolean = False
            Dim DataRow As System.Data.DataRow = Nothing
            Dim RefreshPrimaryAQHRating As Boolean = False
            Dim RefreshPrimaryRating As Boolean = False
            Dim RefreshPrimaryShare As Boolean = False
            Dim RefreshPrimaryImpressions As Boolean = False
            Dim RefreshPrimaryAQH As Boolean = False
            Dim PrimaryAQHRating As Decimal = 0
            Dim PrimaryRating As Decimal = 0
            Dim PrimaryShare As Decimal = 0
            Dim PrimaryImpressions As Decimal = 0
            Dim PrimaryAQH As Decimal = 0
            Dim RefreshSecondaryAQHRating As Boolean = False
            Dim RefreshSecondaryRating As Boolean = False
            Dim RefreshSecondaryShare As Boolean = False
            Dim RefreshSecondaryImpressions As Boolean = False
            Dim RefreshSecondaryAQH As Boolean = False
            Dim SecondaryAQHRating As Decimal = 0
            Dim SecondaryRating As Decimal = 0
            Dim SecondaryShare As Decimal = 0
            Dim SecondaryImpressions As Decimal = 0
            Dim SecondaryAQH As Decimal = 0

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            For DataTableRowIndex As Integer = 0 To MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Count - 1

                RefreshPrimaryDemoData = False
                RefreshSecondaryDemoData = False

                RefreshPrimaryAQHRating = False
                RefreshPrimaryRating = False
                RefreshPrimaryShare = False
                RefreshPrimaryImpressions = False
                RefreshPrimaryAQH = False
                PrimaryAQHRating = 0
                PrimaryRating = 0
                PrimaryShare = 0
                PrimaryImpressions = 0
                PrimaryAQH = 0

                RefreshSecondaryAQHRating = False
                RefreshSecondaryRating = False
                RefreshSecondaryShare = False
                RefreshSecondaryImpressions = False
                RefreshSecondaryAQH = False
                SecondaryAQHRating = 0
                SecondaryRating = 0
                SecondaryShare = 0
                SecondaryImpressions = 0
                SecondaryAQH = 0

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(DataTableRowIndex)

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.HasValue AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value > 0 Then

                    RefreshPrimaryDemoData = True

                End If

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                    RefreshSecondaryDemoData = True

                End If

                If RefreshPrimaryDemoData Then

                    If DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) Then

                        RefreshPrimaryAQHRating = True
                        PrimaryAQHRating = DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString)

                    End If

                    If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                        RefreshPrimaryRating = True
                        PrimaryRating = DataRow(MarketDetailsColumns.PrimaryRating.ToString)

                    End If

                    If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                        RefreshPrimaryShare = True
                        PrimaryShare = DataRow(MarketDetailsColumns.PrimaryShare.ToString)

                    End If

                    If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                        RefreshPrimaryImpressions = True
                        PrimaryImpressions = DataRow(MarketDetailsColumns.PrimaryImpressions.ToString)

                    End If

                    If DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQH.ToString) Then

                        RefreshPrimaryAQH = True
                        PrimaryAQH = DataRow(MarketDetailsColumns.PrimaryAQH.ToString)

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                        MarketDetails_LoadPrimaryNielsenRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({DataTableRowIndex}))

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                        MarketDetails_LoadComscoreRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({DataTableRowIndex}), False)
                        'MarketDetails_LoadPrimaryComscoreRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({DataTableRowIndex}))

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                        MarketDetails_LoadNielsenPuertoRicoRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({DataTableRowIndex}))

                    End If

                    If RefreshPrimaryAQHRating Then

                        DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = PrimaryAQHRating

                    End If

                    If RefreshPrimaryRating Then

                        DataRow(MarketDetailsColumns.PrimaryRating.ToString) = PrimaryRating

                    End If

                    If RefreshPrimaryShare Then

                        DataRow(MarketDetailsColumns.PrimaryShare.ToString) = PrimaryShare

                    End If

                    If RefreshPrimaryImpressions Then

                        DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = PrimaryImpressions

                    End If

                    If RefreshPrimaryAQH Then

                        DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = PrimaryAQH

                    End If

                End If

                If RefreshSecondaryDemoData Then

                    If DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) Then

                        RefreshSecondaryAQHRating = True
                        SecondaryAQHRating = DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString)

                    End If

                    If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                        RefreshSecondaryRating = True
                        SecondaryRating = DataRow(MarketDetailsColumns.SecondaryRating.ToString)

                    End If

                    If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                        RefreshSecondaryShare = True
                        SecondaryShare = DataRow(MarketDetailsColumns.SecondaryShare.ToString)

                    End If

                    If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                        RefreshSecondaryImpressions = True
                        SecondaryImpressions = DataRow(MarketDetailsColumns.SecondaryImpressions.ToString)

                    End If

                    If DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQH.ToString) Then

                        RefreshSecondaryAQH = True
                        SecondaryAQH = DataRow(MarketDetailsColumns.SecondaryAQH.ToString)

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                        MarketDetails_LoadSecondaryNielsenRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({DataTableRowIndex}))

                        'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                        '    MarketDetails_LoadSecondaryComscoreRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, New Generic.List(Of Integer)({DataTableRowIndex}))

                    End If

                    If RefreshSecondaryAQHRating Then

                        DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = SecondaryAQHRating

                    End If

                    If RefreshSecondaryRating Then

                        DataRow(MarketDetailsColumns.SecondaryRating.ToString) = SecondaryRating

                    End If

                    If RefreshSecondaryShare Then

                        DataRow(MarketDetailsColumns.SecondaryShare.ToString) = SecondaryShare

                    End If

                    If RefreshSecondaryImpressions Then

                        DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = SecondaryImpressions

                    End If

                    If RefreshSecondaryAQH Then

                        DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = SecondaryAQH

                    End If

                End If

                MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, DataTableRowIndex)

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Function MarketDetails_CalculateDaypartSummaryCostPercentage(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim CostPercentage As Decimal = 0
            Dim Budget As Decimal = 0
            Dim Dollars As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.Count > 0 Then

                Budget = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartSummaryColumns.Budget.ToString & ")", String.Empty)
                Dollars = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartSummaryColumns.Cost.ToString & ")", String.Empty)

                If Budget <> 0 Then

                    CostPercentage = Dollars / Budget

                Else

                    CostPercentage = 0

                End If

            End If

            MarketDetails_CalculateDaypartSummaryCostPercentage = CostPercentage

        End Function
        Public Function MarketDetails_CalculateDaypartSummaryGRPPercentage(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim GRPPercentage As Decimal = 0
            Dim GRP As Decimal = 0
            Dim GoalGRP As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.Count > 0 Then

                GRP = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartSummaryColumns.GRP.ToString & ")", String.Empty)
                GoalGRP = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartSummaryColumns.GoalGRP.ToString & ")", String.Empty)

                If GoalGRP <> 0 Then

                    GRPPercentage = GRP / GoalGRP

                Else

                    GRPPercentage = 0

                End If

            End If

            MarketDetails_CalculateDaypartSummaryGRPPercentage = GRPPercentage

        End Function
        Public Function MarketDetails_CalculateDaypartSummaryCPP(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim CPP As Decimal = 0
            Dim Dollars As Decimal = 0
            Dim GRP As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.Count > 0 Then

                Dollars = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartSummaryColumns.Cost.ToString & ")", String.Empty)
                GRP = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartSummaryColumns.GRP.ToString & ")", String.Empty)

                If GRP <> 0 Then

                    CPP = Dollars / GRP

                Else

                    CPP = 0

                End If

            End If

            MarketDetails_CalculateDaypartSummaryCPP = CPP

        End Function
        Public Function MarketDetails_CalculateStationSummaryCPP(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim CPP As Decimal = 0
            Dim Dollars As Decimal = 0
            Dim GRP As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Rows.Count > 0 Then

                Dollars = MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Compute("SUM(" & MarketDetails_StationSummaryColumns.Cost.ToString & ")", String.Empty)
                GRP = MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Compute("SUM(" & MarketDetails_StationSummaryColumns.GRP.ToString & ")", String.Empty)

                If GRP <> 0 Then

                    CPP = Dollars / GRP

                Else

                    CPP = 0

                End If

            End If

            MarketDetails_CalculateStationSummaryCPP = CPP

        End Function
        Public Function MarketDetails_CalculateLengthSummaryCPP(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim CPP As Decimal = 0
            Dim Dollars As Decimal = 0
            Dim GRP As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Rows.Count > 0 Then

                Dollars = MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Compute("SUM(" & MarketDetails_LengthSummaryColumns.Cost.ToString & ")", String.Empty)
                GRP = MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Compute("SUM(" & MarketDetails_LengthSummaryColumns.GRP.ToString & ")", String.Empty)

                If GRP <> 0 Then

                    CPP = Dollars / GRP

                Else

                    CPP = 0

                End If

            End If

            MarketDetails_CalculateLengthSummaryCPP = CPP

        End Function
        Public Function MarketDetails_CalculateDaypartLengthSummaryCPP(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim CPP As Decimal = 0
            Dim Dollars As Decimal = 0
            Dim GRP As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Rows.Count > 0 Then

                Dollars = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartLengthSummaryColumns.Cost.ToString & ")", String.Empty)
                GRP = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartLengthSummaryColumns.GRP.ToString & ")", String.Empty)

                If GRP <> 0 Then

                    CPP = Dollars / GRP

                Else

                    CPP = 0

                End If

            End If

            MarketDetails_CalculateDaypartLengthSummaryCPP = CPP

        End Function
        Public Function MarketDetails_CalculateStationSummaryCPM(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim CPM As Decimal = 0
            Dim Dollars As Decimal = 0
            Dim GIMP As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Rows.Count > 0 Then

                Dollars = MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Compute("SUM(" & MarketDetails_StationSummaryColumns.Cost.ToString & ")", String.Empty)
                GIMP = MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Compute("SUM(" & MarketDetails_StationSummaryColumns.GIMP.ToString & ")", String.Empty)

                If GIMP = 0 Then

                    CPM = 0

                Else

                    CPM = (Dollars / GIMP) * 1000

                End If

            End If

            MarketDetails_CalculateStationSummaryCPM = CPM

        End Function
        Public Function MarketDetails_CalculateDaypartLengthSummaryCPM(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim CPM As Decimal = 0
            Dim Dollars As Decimal = 0
            Dim GIMP As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Rows.Count > 0 Then

                Dollars = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartLengthSummaryColumns.Cost.ToString & ")", String.Empty)
                GIMP = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartLengthSummaryColumns.GIMP.ToString & ")", String.Empty)

                If GIMP = 0 Then

                    CPM = 0

                Else

                    CPM = (Dollars / GIMP) * 1000

                End If

            End If

            MarketDetails_CalculateDaypartLengthSummaryCPM = CPM

        End Function
        Public Function MarketDetails_CalculateDaypartSummaryCPM(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim CPM As Decimal = 0
            Dim Dollars As Decimal = 0
            Dim GIMP As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.Count > 0 Then

                Dollars = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartSummaryColumns.Cost.ToString & ")", String.Empty)
                GIMP = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Compute("SUM(" & MarketDetails_DaypartSummaryColumns.GIMP.ToString & ")", String.Empty)

                If GIMP = 0 Then

                    CPM = 0

                Else

                    CPM = (Dollars / GIMP) * 1000

                End If

            End If

            MarketDetails_CalculateDaypartSummaryCPM = CPM

        End Function
        Public Function MarketDetails_CalculateLengthSummaryCPM(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Decimal

            'objects
            Dim CPM As Decimal = 0
            Dim Dollars As Decimal = 0
            Dim GIMP As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Rows.Count > 0 Then

                Dollars = MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Compute("SUM(" & MarketDetails_LengthSummaryColumns.Cost.ToString & ")", String.Empty)
                GIMP = MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Compute("SUM(" & MarketDetails_LengthSummaryColumns.GIMP.ToString & ")", String.Empty)

                If GIMP = 0 Then

                    CPM = 0

                Else

                    CPM = (Dollars / GIMP) * 1000

                End If

            End If

            MarketDetails_CalculateLengthSummaryCPM = CPM

        End Function
        Private Sub MarketDetails_GetDetailDates(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DateCounter As Integer = 1
            Dim DetailDate As Date = Date.MinValue

            MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates = New Hashtable

            For Each DetailDate In GetWorksheetDates(MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.UseOldCalendarDateCreation)

                MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate) = "Date" & DateCounter

                DateCounter += 1

            Next

            DateCounter = 1

            MediaBroadcastWorksheetMarketDetailsViewModel.RateDates = New Hashtable

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DDate) DDate)

                MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate) = "Rate" & DateCounter

                DateCounter += 1

            Next

            DateCounter = 1

            MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates = New Hashtable

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DDate) DDate)

                MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(DetailDate) = "Entered" & DateCounter

                DateCounter += 1

            Next

            DateCounter = 1

            MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates = New Hashtable

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DDate) DDate)

                MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(DetailDate) = "OrderStatus" & DateCounter

                DateCounter += 1

            Next

        End Sub
        Private Sub MarketDetails_LoadOrderedLineNumbers(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim WorksheetMarketVendorOrderedLines As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorOrderedLine) = Nothing
            'Dim MediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail = Nothing
            Dim SelectedWorksheetMarketID As Integer = 0
            'Dim MediaBroadcastWorksheetMarketDetailIDs As Generic.List(Of Integer) = Nothing

            SelectedWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketVendorOrderedLines = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorOrderedLine)

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                WorksheetMarketVendorOrderedLines = DbContext.Database.SqlQuery(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorOrderedLine)(String.Format("EXEC [dbo].[advsp_media_broadcast_worksheet_load_estimate_ordered_lines] {0}", SelectedWorksheetMarketID)).ToList

                For Each WorksheetMarketVendorOrderedLine In WorksheetMarketVendorOrderedLines

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketVendorOrderedLines.Any(Function(Entity) Entity.VendorCode = WorksheetMarketVendorOrderedLine.VendorCode AndAlso
                                                                                                                                    Entity.LineNumber = WorksheetMarketVendorOrderedLine.LineNumber AndAlso
                                                                                                                                    Entity.MakegoodNumber = WorksheetMarketVendorOrderedLine.MakegoodNumber AndAlso
                                                                                                                                    Entity.MadegoodNumber = WorksheetMarketVendorOrderedLine.MadegoodNumber) = False Then

                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketVendorOrderedLines.Add(New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorOrderedLine With {.VendorCode = WorksheetMarketVendorOrderedLine.VendorCode,
                                                                                                                                                                                                                    .LineNumber = WorksheetMarketVendorOrderedLine.LineNumber,
                                                                                                                                                                                                                    .MakegoodNumber = WorksheetMarketVendorOrderedLine.MakegoodNumber,
                                                                                                                                                                                                                    .MadegoodNumber = WorksheetMarketVendorOrderedLine.MadegoodNumber})

                    End If

                Next

            End Using

        End Sub
        Private Sub MarketDetails_LoadDataEntryRows(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                    RevisionNumber As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim WorksheetMarketDetails As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail) = Nothing
            Dim WorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate) = Nothing
            Dim SelectedWorksheetMarketDetails As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail) = Nothing
            Dim SelectedWorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate) = Nothing
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim WorksheetMarketDetailDate As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate = Nothing
            Dim SelectedWorksheetMarketID As Integer = 0
            Dim TotalSpots As Decimal = 0
            Dim LineRevisionNumber As Integer = 0
            Dim RateAmount As Decimal = 0
            Dim TotalDollars As Decimal = 0
            Dim MediaBroadcastWorksheetMarketDetailSubmarketDemos As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailSubmarketDemo) = Nothing
            'Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing

            SelectedWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID
            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber = RevisionNumber

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                'MediaBroadcastWorksheetMarketDetails = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.Load(DbContext).Include("Daypart").Include("Vendor").Include("MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet").
                '                                                                                                                                  Include("MediaBroadcastWorksheetMarketDetailSubmarketDemos").Include("MediaBroadcastWorksheetMarketDetailDates").
                '                                                                                                                                  Include("MediaBroadcastWorksheetMarketDetailSubmarketDemos.MediaBroadcastWorksheetMarketSubmarket").
                '                                                                                                                                  Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = SelectedWorksheetMarketID AndAlso
                '                                                                                                                                                         Entity.RevisionNumber = RevisionNumber).ToList

                'SelectedWorksheetMarketDetails = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.Load(DbContext).Include("Daypart").Include("Vendor").Include("MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet").
                '                                                                                                                            Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = SelectedWorksheetMarketID AndAlso
                '                                                                                                                                                   Entity.RevisionNumber = RevisionNumber).ToList.
                '                                                                                                                            Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail(Entity)).ToList

                WorksheetMarketDetails = DbContext.Database.SqlQuery(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail)(String.Format("EXEC [dbo].[advsp_media_broadcast_worksheet_load_estimate_rows] {0}, {1}", SelectedWorksheetMarketID, RevisionNumber)).ToList

                WorksheetMarketDetailDates = (From Entity In DbContext.MediaBroadcastWorksheetMarketDetailDates
                                              Where Entity.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketID = SelectedWorksheetMarketID AndAlso
                                                    Entity.MediaBroadcastWorksheetMarketDetail.RevisionNumber = RevisionNumber
                                              Select Entity).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate(Entity)).ToList


                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

                'For Each VendorCodeLineRevisions In (From WMD In SelectedWorksheetMarketDetails
                '									 Group WMD By Keys = New With {Key WMD.VendorCode, Key WMD.LineNumber, Key WMD.MakegoodNumber} Into Group
                '									 Select New With {.VendorCode = Keys.VendorCode,
                '													  .LineNumber = Keys.LineNumber,
                '													  .MakegoodNumber = Keys.MakegoodNumber,
                '													  .RevisionNumbers = Group.Select(Function(Entity) Entity.RevisionNumber)}).ToList

                '	LineRevisionNumber = 0
                '	WorksheetMarketDetail = Nothing

                '	If VendorCodeLineRevisions.RevisionNumbers.Contains(RevisionNumber) Then

                '		LineRevisionNumber = RevisionNumber

                '	ElseIf VendorCodeLineRevisions.RevisionNumbers.Max < RevisionNumber Then

                '		LineRevisionNumber = VendorCodeLineRevisions.RevisionNumbers.Max

                '	End If

                '	WorksheetMarketDetail = SelectedWorksheetMarketDetails.SingleOrDefault(Function(Entity) Entity.VendorCode = VendorCodeLineRevisions.VendorCode AndAlso Entity.LineNumber = VendorCodeLineRevisions.LineNumber AndAlso Entity.RevisionNumber = LineRevisionNumber)

                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos = New List(Of DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo)

                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache = New Hashtable

                For Each WorksheetMarketDetail In WorksheetMarketDetails.OrderBy(Function(Entity) Entity.LineNumber).ThenBy(Function(Entity) Entity.MakegoodNumber).ThenBy(Function(Entity) Entity.MadegoodNumber).ToList

                    'WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail(MediaBroadcastWorksheetMarketDetail)

                    'SelectedWorksheetMarketDetailDates = MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate(Entity)).ToList
                    SelectedWorksheetMarketDetailDates = WorksheetMarketDetailDates.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = WorksheetMarketDetail.ID).ToList

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.NewRow()

                    DataRow.BeginEdit()

                    DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString) = WorksheetMarketDetail.ID

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                            DataRow(MarketDetailsColumns.DaysAndTime.ToString) = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.TV, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket, WorksheetMarketDetail)

                        Else

                            DataRow(MarketDetailsColumns.DaysAndTime.ToString) = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.TVPuertoRico, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket, WorksheetMarketDetail)

                        End If

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                        DataRow(MarketDetailsColumns.DaysAndTime.ToString) = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.Radio, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket, WorksheetMarketDetail)

                        'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.NetworkTV Then

                        '	DataRow(MarketDetailsColumns.DaysAndTime.ToString) = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.TV, WorksheetMarketDetail)

                    End If

                    DataRow(MarketDetailsColumns.OnHold.ToString) = WorksheetMarketDetail.OnHold
                    DataRow(MarketDetailsColumns.LineNumber.ToString) = WorksheetMarketDetail.LineNumber
                    DataRow(MarketDetailsColumns.MakegoodNumber.ToString) = WorksheetMarketDetail.MakegoodNumber
                    DataRow(MarketDetailsColumns.MakegoodDate.ToString) = WorksheetMarketDetail.MakegoodDate
                    DataRow(MarketDetailsColumns.MakegoodSpots.ToString) = WorksheetMarketDetail.MakegoodSpots
                    DataRow(MarketDetailsColumns.MadegoodNumber.ToString) = WorksheetMarketDetail.MadegoodNumber
                    DataRow(MarketDetailsColumns.RevisionNumber.ToString) = WorksheetMarketDetail.RevisionNumber
                    DataRow(MarketDetailsColumns.VendorCode.ToString) = If(String.IsNullOrWhiteSpace(WorksheetMarketDetail.VendorCode), String.Empty, WorksheetMarketDetail.VendorCode)
                    DataRow(MarketDetailsColumns.VendorName.ToString) = If(String.IsNullOrWhiteSpace(WorksheetMarketDetail.VendorCode), String.Empty, WorksheetMarketDetail.VendorName)
                    DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = If(String.IsNullOrWhiteSpace(WorksheetMarketDetail.VendorCode), 0, WorksheetMarketDetail.VendorNielsenRadioStationComboID.GetValueOrDefault(0))
                    DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = If(String.IsNullOrWhiteSpace(WorksheetMarketDetail.VendorCode), 0, WorksheetMarketDetail.VendorNCCTVSyscodeID.GetValueOrDefault(0))
                    DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = If(String.IsNullOrWhiteSpace(WorksheetMarketDetail.VendorCode), 0, WorksheetMarketDetail.VendorNielsenTVStationCode.GetValueOrDefault(0))
                    DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = If(String.IsNullOrWhiteSpace(WorksheetMarketDetail.VendorCode), False, WorksheetMarketDetail.VendorIsCableSystem)
                    DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = If(String.IsNullOrWhiteSpace(WorksheetMarketDetail.VendorCode), False, WorksheetMarketDetail.VendorIsComboRadioStation)
                    DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString) = WorksheetMarketDetail.CableNetworkStationCode
                    DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = If(WorksheetMarketDetail.CableNetworkNielsenTVStationCode.HasValue, WorksheetMarketDetail.CableNetworkNielsenTVStationCode.Value, Nothing)
                    DataRow(MarketDetailsColumns.BookProgram.ToString) = WorksheetMarketDetail.BookProgram
                    DataRow(MarketDetailsColumns.Program.ToString) = WorksheetMarketDetail.Program
                    DataRow(MarketDetailsColumns.Daypart.ToString) = WorksheetMarketDetail.DaypartCode
                    DataRow(MarketDetailsColumns.Product.ToString) = WorksheetMarketDetail.Product
                    DataRow(MarketDetailsColumns.Piggyback.ToString) = WorksheetMarketDetail.Piggyback
                    DataRow(MarketDetailsColumns.Length.ToString) = WorksheetMarketDetail.Length
                    DataRow(MarketDetailsColumns.Days.ToString) = WorksheetMarketDetail.Days

                    If String.IsNullOrWhiteSpace(WorksheetMarketDetail.StartTime) = False Then

                        DataRow(MarketDetailsColumns.StartTime.ToString) = WorksheetMarketDetail.StartTime

                    End If

                    If String.IsNullOrWhiteSpace(WorksheetMarketDetail.EndTime) = False Then

                        DataRow(MarketDetailsColumns.EndTime.ToString) = WorksheetMarketDetail.EndTime

                    End If

                    DataRow(MarketDetailsColumns.Comments.ToString) = WorksheetMarketDetail.Comments
                    DataRow(MarketDetailsColumns.Bookend.ToString) = WorksheetMarketDetail.Bookend
                    DataRow(MarketDetailsColumns.ValueAdded.ToString) = WorksheetMarketDetail.ValueAdded
                    DataRow(MarketDetailsColumns.DefaultRate.ToString) = WorksheetMarketDetail.DefaultRate

                    If SelectedWorksheetMarketDetailDates.All(Function(Entity) Entity.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) Then

                        DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

                    ElseIf SelectedWorksheetMarketDetailDates.Any(Function(Entity) Entity.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified) Then

                        DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

                    ElseIf SelectedWorksheetMarketDetailDates.All(Function(Entity) Entity.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered OrElse
                                                                                   (Entity.MediaBroadcastWorksheetOrderStatusID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered AndAlso Entity.Spots = 0)) Then

                        DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered)

                    Else

                        DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial)

                    End If

                    DataRow(MarketDetailsColumns.OrderComments.ToString) = WorksheetMarketDetail.OrderComments
                    DataRow(MarketDetailsColumns.OverridePost.ToString) = WorksheetMarketDetail.OverridePost
                    DataRow(MarketDetailsColumns.OverridePostImpressions.ToString) = WorksheetMarketDetail.OverridePostImpressions
                    DataRow(MarketDetailsColumns.OverridePostAQH.ToString) = WorksheetMarketDetail.OverridePostAQH

                    DataRow(MarketDetailsColumns.RowSource.ToString) = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RowSources.ManualEntry

                    TotalSpots = 0
                    TotalDollars = 0

                    For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                        WorksheetMarketDetailDate = SelectedWorksheetMarketDetailDates.SingleOrDefault(Function(Entity) Entity.Date = DetailDate)

                        If WorksheetMarketDetailDate IsNot Nothing Then

                            DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = WorksheetMarketDetailDate.Spots

                            TotalSpots += WorksheetMarketDetailDate.Spots

                            RateAmount = WorksheetMarketDetailDate.Rate

                            DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)) = WorksheetMarketDetailDate.Rate

                            DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(DetailDate)) = WorksheetMarketDetailDate.AllowSpotsToBeEntered

                            DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(DetailDate)) = WorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID

                            TotalDollars += (RateAmount * CDec(WorksheetMarketDetailDate.Spots))

                        Else

                            DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = 0
                            DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)) = WorksheetMarketDetail.DefaultRate

                        End If

                    Next

                    DataRow(MarketDetailsColumns.TotalSpots.ToString) = TotalSpots
                    DataRow(MarketDetailsColumns.TotalDollars.ToString) = TotalDollars

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.IsGross Then

                        DataRow(MarketDetailsColumns.TotalNet.ToString) = Math.Round(TotalDollars * 0.85, 2, MidpointRounding.ToEven)

                    Else

                        DataRow(MarketDetailsColumns.TotalNet.ToString) = TotalDollars

                    End If

                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = WorksheetMarketDetail.BookPrimaryRating
                    DataRow(MarketDetailsColumns.PrimaryRating.ToString) = WorksheetMarketDetail.PrimaryRating
                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = WorksheetMarketDetail.BookPrimaryShare
                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = WorksheetMarketDetail.PrimaryShare
                    DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = WorksheetMarketDetail.PrimaryHPUT
                    DataRow(MarketDetailsColumns.PrimaryGRP.ToString) = WorksheetMarketDetail.PrimaryGRP
                    DataRow(MarketDetailsColumns.PrimaryCPP.ToString) = WorksheetMarketDetail.PrimaryCPP
                    DataRow(MarketDetailsColumns.PrimaryReach.ToString) = WorksheetMarketDetail.PrimaryReach
                    DataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = WorksheetMarketDetail.PrimaryFrequency
                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = WorksheetMarketDetail.BookPrimaryImpressions
                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = WorksheetMarketDetail.PrimaryImpressions
                    DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = WorksheetMarketDetail.PrimaryGrossImpressions
                    DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = WorksheetMarketDetail.PrimaryUniverse
                    DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = WorksheetMarketDetail.PrimaryCumeImpressions
                    DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = WorksheetMarketDetail.BookPrimaryAQHRating
                    DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = WorksheetMarketDetail.PrimaryAQHRating
                    DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = WorksheetMarketDetail.BookPrimaryAQH
                    DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = WorksheetMarketDetail.PrimaryAQH
                    DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = WorksheetMarketDetail.PrimaryCumeRating
                    DataRow(MarketDetailsColumns.PrimaryCume.ToString) = WorksheetMarketDetail.PrimaryCume
                    DataRow(MarketDetailsColumns.PrimaryCPM.ToString) = WorksheetMarketDetail.PrimaryCPM
                    DataRow(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString) = WorksheetMarketDetail.PrimaryVendorSubmittedRating
                    DataRow(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString) = WorksheetMarketDetail.PrimaryVendorSubmittedShare
                    DataRow(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString) = WorksheetMarketDetail.PrimaryVendorSubmittedImpressions

                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = WorksheetMarketDetail.BookSecondaryRating
                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = WorksheetMarketDetail.SecondaryRating
                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = WorksheetMarketDetail.BookSecondaryShare
                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = WorksheetMarketDetail.SecondaryShare
                    DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = WorksheetMarketDetail.SecondaryHPUT
                    DataRow(MarketDetailsColumns.SecondaryGRP.ToString) = WorksheetMarketDetail.SecondaryGRP
                    DataRow(MarketDetailsColumns.SecondaryCPP.ToString) = WorksheetMarketDetail.SecondaryCPP
                    DataRow(MarketDetailsColumns.SecondaryReach.ToString) = WorksheetMarketDetail.SecondaryReach
                    DataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = WorksheetMarketDetail.SecondaryFrequency
                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = WorksheetMarketDetail.BookSecondaryImpressions
                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = WorksheetMarketDetail.SecondaryImpressions
                    DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = WorksheetMarketDetail.SecondaryGrossImpressions
                    DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = WorksheetMarketDetail.SecondaryUniverse
                    DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = WorksheetMarketDetail.SecondaryCumeImpressions
                    DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = WorksheetMarketDetail.BookSecondaryAQHRating
                    DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = WorksheetMarketDetail.SecondaryAQHRating
                    DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = WorksheetMarketDetail.BookSecondaryAQH
                    DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = WorksheetMarketDetail.SecondaryAQH
                    DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = WorksheetMarketDetail.SecondaryCumeRating
                    DataRow(MarketDetailsColumns.SecondaryCume.ToString) = WorksheetMarketDetail.SecondaryCume
                    DataRow(MarketDetailsColumns.SecondaryCPM.ToString) = WorksheetMarketDetail.SecondaryCPM
                    DataRow(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString) = WorksheetMarketDetail.SecondaryVendorSubmittedRating
                    DataRow(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString) = WorksheetMarketDetail.SecondaryVendorSubmittedShare
                    DataRow(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString) = WorksheetMarketDetail.SecondaryVendorSubmittedImpressions

                    DataRow.EndEdit()

                    MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Add(DataRow)

                    'End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                        MediaBroadcastWorksheetMarketDetailSubmarketDemos = DbContext.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Include("MediaBroadcastWorksheetMarketSubmarket").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = WorksheetMarketDetail.ID).ToList

                        MarketDetails_LoadWorksheetMarketDetailSubmarketDemos(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow, MediaBroadcastWorksheetMarketDetailSubmarketDemos)

                    End If

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.AcceptChanges()

                DbContext.Database.Connection.Close()

            End Using

        End Sub
        Private Sub MarketDetails_LoadWorksheetMarketDetailSubmarketDemoColumnNames(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            Dim MediaDemographicID As Integer = 0
            Dim WorksheetMarketSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarketDemo = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarketDemos = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarketDemo)

            If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.Count > 0 Then

                MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0)

                If MediaDemographicID > 0 Then

                    For Each WorksheetMarketSubmarket In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets

                        WorksheetMarketSubmarketDemo = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarketDemo(WorksheetMarketSubmarket, MediaDemographicID, True)

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarketDemos.Add(WorksheetMarketSubmarketDemo)

                    Next

                End If

                If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos.Count > 0 Then

                    For Each WorksheetSecondaryDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos

                        MediaDemographicID = WorksheetSecondaryDemo.MediaDemographicID

                        For Each WorksheetMarketSubmarket In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets

                            WorksheetMarketSubmarketDemo = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarketDemo(WorksheetMarketSubmarket, MediaDemographicID, False)

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarketDemos.Add(WorksheetMarketSubmarketDemo)

                        Next

                    Next

                End If

            End If

        End Sub
        Private Sub MarketDetails_LoadWorksheetMarketDetailSubmarketDemos(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                          DataRow As System.Data.DataRow, MediaBroadcastWorksheetMarketDetailSubmarketDemos As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailSubmarketDemo))

            Dim RowID As Integer = 0
            Dim TotalSpots As Integer = 0
            Dim TotalDollars As Decimal = 0
            Dim WorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing
            Dim Universe As Integer = 0
            Dim GIMPTotal As Decimal = 0
            Dim AllocationTotal As Decimal = 0
            Dim WorksheetMarketDetailSubmarketDemos As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo) = Nothing
            Dim MediaDemographicWorksheetMarketDetailSubmarketDemos As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo) = Nothing
            Dim MediaDemographicIDs As Generic.List(Of Integer) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                RowID = CInt(DataRow(MarketDetailsColumns.ID.ToString))
                TotalSpots = CInt(DataRow(MarketDetailsColumns.TotalSpots.ToString))
                TotalDollars = CDec(DataRow(MarketDetailsColumns.TotalDollars.ToString))

                If MediaBroadcastWorksheetMarketDetailSubmarketDemos IsNot Nothing AndAlso RowID > -1 Then

                    WorksheetMarketDetailSubmarketDemos = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo)

                    For Each MediaBroadcastWorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetailSubmarketDemos

                        Universe = MarketDetails_GetCanadianUniverse(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarket.MarketCode, MediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaDemographicID)

                        WorksheetMarketDetailSubmarketDemo = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo(MediaBroadcastWorksheetMarketDetailSubmarketDemo, RowID, TotalSpots, TotalDollars, Universe)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketCacheTemplate, MediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarket.Order, WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID, WorksheetMarketDetailSubmarketDemo.MediaDemographicID, RowID)) = False Then

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.Add(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketCacheTemplate, MediaBroadcastWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarket.Order, WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID, WorksheetMarketDetailSubmarketDemo.MediaDemographicID, RowID), WorksheetMarketDetailSubmarketDemo)

                        End If

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Add(WorksheetMarketDetailSubmarketDemo)

                        WorksheetMarketDetailSubmarketDemos.Add(WorksheetMarketDetailSubmarketDemo)

                    Next

                    MediaDemographicIDs = WorksheetMarketDetailSubmarketDemos.Select(Function(Entity) Entity.MediaDemographicID).Distinct.ToList

                    For Each MediaDemographicID In MediaDemographicIDs

                        MediaDemographicWorksheetMarketDetailSubmarketDemos = Nothing
                        GIMPTotal = 0
                        AllocationTotal = 0

                        MediaDemographicWorksheetMarketDetailSubmarketDemos = WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList

                        For Each WorksheetMarketDetailSubmarketDemo In MediaDemographicWorksheetMarketDetailSubmarketDemos

                            GIMPTotal += WorksheetMarketDetailSubmarketDemo.GIMP

                        Next

                        For Each WorksheetMarketDetailSubmarketDemo In MediaDemographicWorksheetMarketDetailSubmarketDemos

                            WorksheetMarketDetailSubmarketDemo.GIMPTotal = GIMPTotal

                        Next

                        For Each WorksheetMarketDetailSubmarketDemo In MediaDemographicWorksheetMarketDetailSubmarketDemos

                            AllocationTotal += WorksheetMarketDetailSubmarketDemo.Allocation

                        Next

                        For Each WorksheetMarketDetailSubmarketDemo In MediaDemographicWorksheetMarketDetailSubmarketDemos

                            WorksheetMarketDetailSubmarketDemo.AllocationTotal = AllocationTotal

                        Next

                    Next

                End If

            End If

        End Sub
        Public Function MarketDetails_GetWorksheetMarketDetailSubmarketDemoData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                                WorksheetMarketDetailSubmarketDemoColumnName As String, RowID As Integer) As Decimal

            Dim WorksheetMarketDetailSubmarketDemoData As Decimal = 0
            Dim WorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim Allocation As Decimal = 0
            Dim TotalAllocation As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID) Then

                    WorksheetMarketDetailSubmarketDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID)

                End If

                If WorksheetMarketDetailSubmarketDemo IsNot Nothing Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.Rating Then

                        WorksheetMarketDetailSubmarketDemoData = WorksheetMarketDetailSubmarketDemo.Rating

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.GRP Then

                        WorksheetMarketDetailSubmarketDemoData = WorksheetMarketDetailSubmarketDemo.GRP

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.IMP Then

                        WorksheetMarketDetailSubmarketDemoData = WorksheetMarketDetailSubmarketDemo.Impressions

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.GIMP Then

                        WorksheetMarketDetailSubmarketDemoData = WorksheetMarketDetailSubmarketDemo.GIMP

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.Allocation Then

                        WorksheetMarketDetailSubmarketDemoData = WorksheetMarketDetailSubmarketDemo.Allocation

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.Percentage Then

                        WorksheetMarketDetailSubmarketDemoData = WorksheetMarketDetailSubmarketDemo.Percentage

                    End If

                End If

            End If

            MarketDetails_GetWorksheetMarketDetailSubmarketDemoData = WorksheetMarketDetailSubmarketDemoData

        End Function
        Private Function MarketDetails_GetCanadianUniverse(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                           MarketCode As String, MediaDemographicID As Integer) As Integer

            Dim Universe As Integer = 0
            Dim FromUniverse As Integer = 0
            Dim ToUniverse As Integer = 0
            Dim MediaDemographic As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaDemographic = Nothing
            Dim WorksheetSecondaryDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetSecondaryDemo = Nothing
            Dim CanadaUniverse As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverse = Nothing
            Dim MaleFromCanadaUniverseDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverseDetail = Nothing
            Dim MaleToCanadaUniverseDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverseDetail = Nothing
            Dim FemaleFromCanadaUniverseDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverseDetail = Nothing
            Dim FemaleToCanadaUniverseDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadaUniverseDetail = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverseCache.ContainsKey(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadianUniverseCacheKeyTemplate, MarketCode, MediaDemographicID)) Then

                Universe = MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverseCache(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadianUniverseCacheKeyTemplate, MarketCode, MediaDemographicID))

            Else

                If MediaDemographicID > 0 Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) = MediaDemographicID Then

                        MediaDemographic = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaDemographic(MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0),
                                                                                                                     MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicCode,
                                                                                                                     MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicDescription,
                                                                                                                     MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicIsMales,
                                                                                                                     MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicIsFemales,
                                                                                                                     MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicAgeFrom,
                                                                                                                     MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicAgeTo)

                    Else

                        WorksheetSecondaryDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos.SingleOrDefault(Function(Entity) Entity.MediaDemographicID = MediaDemographicID)

                        If WorksheetSecondaryDemo IsNot Nothing Then

                            MediaDemographic = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaDemographic(WorksheetSecondaryDemo)

                        End If

                    End If

                    If MediaDemographic IsNot Nothing Then

                        CanadaUniverse = MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverses.SingleOrDefault(Function(Entity) Entity.MarketCode = MarketCode)

                        If CanadaUniverse IsNot Nothing Then

                            MaleFromCanadaUniverseDetail = Nothing
                            MaleToCanadaUniverseDetail = Nothing

                            If MediaDemographic.IsMales Then

                                If MediaDemographic.AgeFrom.GetValueOrDefault(0) > 0 Then

                                    MaleFromCanadaUniverseDetail = CanadaUniverse.CanadaUniverseDetails.SingleOrDefault(Function(Entity) Entity.IsMales = True AndAlso
                                                                                                                                         Entity.Age = MediaDemographic.AgeFrom.GetValueOrDefault(0))

                                    If MediaDemographic.AgeTo.GetValueOrDefault(0) > 0 Then

                                        MaleToCanadaUniverseDetail = CanadaUniverse.CanadaUniverseDetails.SingleOrDefault(Function(Entity) Entity.IsMales = True AndAlso
                                                                                                                                           Entity.Age = MediaDemographic.AgeTo.GetValueOrDefault(0) + 1)

                                    ElseIf MediaDemographic.AgeTo.GetValueOrDefault(0) = 0 Then

                                        MaleToCanadaUniverseDetail = Nothing

                                    End If

                                ElseIf MediaDemographic.AgeFrom.GetValueOrDefault(0) = 0 Then

                                    MaleFromCanadaUniverseDetail = CanadaUniverse.CanadaUniverseDetails.SingleOrDefault(Function(Entity) Entity.IsMales = True AndAlso
                                                                                                                                         Entity.Age = 2)
                                    MaleToCanadaUniverseDetail = Nothing

                                End If

                                'If FromCanadaUniverseDetail IsNot Nothing AndAlso ToCanadaUniverseDetail IsNot Nothing Then

                                '    MaleUniverse = FromCanadaUniverseDetail.Universe - ToCanadaUniverseDetail.Universe

                                'ElseIf FromCanadaUniverseDetail IsNot Nothing AndAlso ToCanadaUniverseDetail Is Nothing Then

                                '    MaleUniverse = FromCanadaUniverseDetail.Universe

                                'End If

                            End If

                            FemaleFromCanadaUniverseDetail = Nothing
                            FemaleToCanadaUniverseDetail = Nothing

                            If MediaDemographic.IsFemales Then

                                If MediaDemographic.AgeFrom.GetValueOrDefault(0) > 0 Then

                                    FemaleFromCanadaUniverseDetail = CanadaUniverse.CanadaUniverseDetails.SingleOrDefault(Function(Entity) Entity.IsMales = False AndAlso
                                                                                                                                           Entity.Age = MediaDemographic.AgeFrom.GetValueOrDefault(0))

                                    If MediaDemographic.AgeTo.GetValueOrDefault(0) > 0 Then

                                        FemaleToCanadaUniverseDetail = CanadaUniverse.CanadaUniverseDetails.SingleOrDefault(Function(Entity) Entity.IsMales = False AndAlso
                                                                                                                                             Entity.Age = MediaDemographic.AgeTo.GetValueOrDefault(0) + 1)

                                    ElseIf MediaDemographic.AgeTo.GetValueOrDefault(0) = 0 Then

                                        FemaleToCanadaUniverseDetail = Nothing

                                    End If

                                ElseIf MediaDemographic.AgeFrom.GetValueOrDefault(0) = 0 Then

                                    FemaleFromCanadaUniverseDetail = CanadaUniverse.CanadaUniverseDetails.SingleOrDefault(Function(Entity) Entity.IsMales = False AndAlso
                                                                                                                                           Entity.Age = 2)
                                    FemaleToCanadaUniverseDetail = Nothing

                                End If

                                'If FromCanadaUniverseDetail IsNot Nothing AndAlso ToCanadaUniverseDetail IsNot Nothing Then

                                '    FemaleUniverse = FromCanadaUniverseDetail.Universe - ToCanadaUniverseDetail.Universe

                                'ElseIf FromCanadaUniverseDetail IsNot Nothing AndAlso ToCanadaUniverseDetail Is Nothing Then

                                '    FemaleUniverse = FromCanadaUniverseDetail.Universe

                                'End If

                            End If

                            If MaleFromCanadaUniverseDetail IsNot Nothing Then

                                FromUniverse += MaleFromCanadaUniverseDetail.Universe

                            End If

                            If FemaleFromCanadaUniverseDetail IsNot Nothing Then

                                FromUniverse += FemaleFromCanadaUniverseDetail.Universe

                            End If

                            If MaleToCanadaUniverseDetail IsNot Nothing Then

                                ToUniverse += MaleToCanadaUniverseDetail.Universe

                            End If

                            If FemaleToCanadaUniverseDetail IsNot Nothing Then

                                ToUniverse += FemaleToCanadaUniverseDetail.Universe

                            End If

                            Universe = FromUniverse - ToUniverse

                        End If

                        MediaBroadcastWorksheetMarketDetailsViewModel.CanadaUniverseCache(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.CanadianUniverseCacheKeyTemplate, MarketCode, MediaDemographicID)) = Universe

                    End If

                End If

            End If

            MarketDetails_GetCanadianUniverse = Universe

        End Function
        Public Sub MarketDetails_SetWorksheetMarketDetailSubmarketDemoData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                           WorksheetMarketDetailSubmarketDemoColumnName As String, RowID As Integer, WorksheetMarketDetailSubmarketDemoData As Decimal)

            Dim WorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim MediaDemographicID As Integer = 0
            Dim WorksheetMarketSubmarketID As Integer = 0
            Dim WorksheetMarketSubmarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket = Nothing
            Dim GIMPTotal As Decimal = 0
            Dim AllocationTotal As Decimal = 0
            Dim WorksheetMarketDetailSubmarketDemos As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID) Then

                    WorksheetMarketDetailSubmarketDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID)

                End If

                If WorksheetMarketDetailSubmarketDemo IsNot Nothing Then

                    WorksheetMarketDetailSubmarketDemo.Rating = WorksheetMarketDetailSubmarketDemoData

                Else

                    If MarketDetails_ParseWorksheetMarketDetailSubmarketDemoColumnName(MediaBroadcastWorksheetMarketDetailsViewModel, WorksheetMarketDetailSubmarketDemoColumnName,
                                                                                       WorksheetMarketSubmarketID, MediaDemographicID, 0) Then

                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Find(RowID)
                        WorksheetMarketSubmarket = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.FirstOrDefault(Function(Entity) Entity.ID = WorksheetMarketSubmarketID)

                        If DataRow IsNot Nothing AndAlso WorksheetMarketSubmarket IsNot Nothing Then

                            WorksheetMarketDetailSubmarketDemo = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo

                            WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID = WorksheetMarketSubmarketID
                            WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketDetailID = 0
                            WorksheetMarketDetailSubmarketDemo.MediaDemographicID = MediaDemographicID
                            WorksheetMarketDetailSubmarketDemo.MarketCode = WorksheetMarketSubmarket.MarketCode
                            WorksheetMarketDetailSubmarketDemo.RowID = RowID
                            WorksheetMarketDetailSubmarketDemo.VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString)
                            WorksheetMarketDetailSubmarketDemo.LineNumber = DataRow(MarketDetailsColumns.LineNumber.ToString)
                            WorksheetMarketDetailSubmarketDemo.MakegoodNumber = DataRow(MarketDetailsColumns.MakegoodNumber.ToString)
                            WorksheetMarketDetailSubmarketDemo.TotalSpots = DataRow(MarketDetailsColumns.TotalSpots.ToString)
                            WorksheetMarketDetailSubmarketDemo.TotalDollars = DataRow(MarketDetailsColumns.TotalDollars.ToString)
                            WorksheetMarketDetailSubmarketDemo.BookRating = 0
                            WorksheetMarketDetailSubmarketDemo.Rating = WorksheetMarketDetailSubmarketDemoData
                            WorksheetMarketDetailSubmarketDemo.Universe = MarketDetails_GetCanadianUniverse(MediaBroadcastWorksheetMarketDetailsViewModel, WorksheetMarketSubmarket.MarketCode, MediaDemographicID)

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Add(WorksheetMarketDetailSubmarketDemo)

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.Add(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketCacheTemplate, WorksheetMarketSubmarket.Order, WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID, WorksheetMarketDetailSubmarketDemo.MediaDemographicID, RowID), WorksheetMarketDetailSubmarketDemo)

                        End If

                    End If

                End If

                WorksheetMarketDetailSubmarketDemos = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.RowID = RowID AndAlso Entity.MediaDemographicID = WorksheetMarketDetailSubmarketDemo.MediaDemographicID).ToList

                If WorksheetMarketDetailSubmarketDemos IsNot Nothing AndAlso WorksheetMarketDetailSubmarketDemos.Count > 1 Then

                    For Each WorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos

                        GIMPTotal += WorksheetMarketDetailSubmarketDemo.GIMP

                    Next

                    For Each WorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos

                        WorksheetMarketDetailSubmarketDemo.GIMPTotal = GIMPTotal

                    Next

                    For Each WorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos

                        AllocationTotal += WorksheetMarketDetailSubmarketDemo.Allocation

                    Next

                    For Each WorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos

                        WorksheetMarketDetailSubmarketDemo.AllocationTotal = AllocationTotal

                    Next

                End If

                If DataRow Is Nothing Then

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Find(RowID)

                End If

                If DataRow.RowState = DataRowState.Unchanged Then

                    DataRow.SetModified()

                End If

            End If

        End Sub
        Public Function MarketDetails_IsWorksheetMarketDetailSubmarketDemoDataOverridden(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                                         WorksheetMarketDetailSubmarketDemoColumnName As String, RowID As Integer, WorksheetMarketDetailSubmarketDemoData As Decimal) As Boolean

            Dim IsDataOverridden As Boolean = False
            Dim BookWorksheetMarketDetailSubmarketDemoData As Decimal = 0
            Dim WorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.Rating Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID) Then

                        WorksheetMarketDetailSubmarketDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID)

                    End If

                    If WorksheetMarketDetailSubmarketDemo IsNot Nothing Then

                        If WorksheetMarketDetailSubmarketDemoData <> WorksheetMarketDetailSubmarketDemo.BookRating Then

                            IsDataOverridden = True

                        End If

                    End If

                End If

            End If

            MarketDetails_IsWorksheetMarketDetailSubmarketDemoDataOverridden = IsDataOverridden

        End Function
        Private Sub MarketDetails_AddNewWorksheetMarketDetailSubmarketDemos(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                            RowID As Integer)

            Dim MediaDemographicID As Integer = 0
            Dim WorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing
            Dim DataRow As System.Data.DataRow = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0)
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Find(RowID)

                If MediaDemographicID > 0 AndAlso DataRow IsNot Nothing Then

                    For Each WorksheetMarketSubmarket In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets

                        WorksheetMarketDetailSubmarketDemo = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo

                        WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID = WorksheetMarketSubmarket.ID
                        WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketDetailID = 0
                        WorksheetMarketDetailSubmarketDemo.MediaDemographicID = MediaDemographicID
                        WorksheetMarketDetailSubmarketDemo.MarketCode = WorksheetMarketSubmarket.MarketCode
                        WorksheetMarketDetailSubmarketDemo.RowID = RowID
                        WorksheetMarketDetailSubmarketDemo.VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString)
                        WorksheetMarketDetailSubmarketDemo.LineNumber = DataRow(MarketDetailsColumns.LineNumber.ToString)
                        WorksheetMarketDetailSubmarketDemo.MakegoodNumber = DataRow(MarketDetailsColumns.MakegoodNumber.ToString)
                        WorksheetMarketDetailSubmarketDemo.TotalSpots = DataRow(MarketDetailsColumns.TotalSpots.ToString)
                        WorksheetMarketDetailSubmarketDemo.TotalDollars = DataRow(MarketDetailsColumns.TotalDollars.ToString)
                        WorksheetMarketDetailSubmarketDemo.BookRating = 0
                        WorksheetMarketDetailSubmarketDemo.Rating = 0
                        WorksheetMarketDetailSubmarketDemo.Universe = MarketDetails_GetCanadianUniverse(MediaBroadcastWorksheetMarketDetailsViewModel, WorksheetMarketSubmarket.MarketCode, MediaDemographicID)

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Add(WorksheetMarketDetailSubmarketDemo)

                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.Add(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketCacheTemplate, WorksheetMarketSubmarket.Order, WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID, WorksheetMarketDetailSubmarketDemo.MediaDemographicID, RowID), WorksheetMarketDetailSubmarketDemo)

                    Next

                End If

                If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos.Count > 0 AndAlso
                        DataRow IsNot Nothing Then

                    For Each WorksheetSecondaryDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos

                        MediaDemographicID = WorksheetSecondaryDemo.MediaDemographicID

                        For Each WorksheetMarketSubmarket In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets

                            WorksheetMarketDetailSubmarketDemo = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo

                            WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID = WorksheetMarketSubmarket.ID
                            WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketDetailID = 0
                            WorksheetMarketDetailSubmarketDemo.MediaDemographicID = MediaDemographicID
                            WorksheetMarketDetailSubmarketDemo.MarketCode = WorksheetMarketSubmarket.MarketCode
                            WorksheetMarketDetailSubmarketDemo.RowID = RowID
                            WorksheetMarketDetailSubmarketDemo.VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString)
                            WorksheetMarketDetailSubmarketDemo.LineNumber = DataRow(MarketDetailsColumns.LineNumber.ToString)
                            WorksheetMarketDetailSubmarketDemo.MakegoodNumber = DataRow(MarketDetailsColumns.MakegoodNumber.ToString)
                            WorksheetMarketDetailSubmarketDemo.TotalSpots = DataRow(MarketDetailsColumns.TotalSpots.ToString)
                            WorksheetMarketDetailSubmarketDemo.TotalDollars = DataRow(MarketDetailsColumns.TotalDollars.ToString)
                            WorksheetMarketDetailSubmarketDemo.BookRating = 0
                            WorksheetMarketDetailSubmarketDemo.Rating = 0
                            WorksheetMarketDetailSubmarketDemo.Universe = MarketDetails_GetCanadianUniverse(MediaBroadcastWorksheetMarketDetailsViewModel, WorksheetMarketSubmarket.MarketCode, MediaDemographicID)

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Add(WorksheetMarketDetailSubmarketDemo)

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.Add(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketCacheTemplate, WorksheetMarketSubmarket.Order, WorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID, WorksheetMarketDetailSubmarketDemo.MediaDemographicID, RowID), WorksheetMarketDetailSubmarketDemo)

                        Next

                    Next

                End If

            End If

        End Sub
        Public Sub MarketDetails_SelectedSubmarketDemoDataTypeChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                      SelectedSubmarketDemoDataType As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType)

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = SelectedSubmarketDemoDataType

        End Sub
        Private Function MarketDetails_ParseWorksheetMarketDetailSubmarketDemoColumnName(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                                         WorksheetMarketDetailSubmarketDemoColumnName As String, ByRef WorksheetMarketSubmarketID As Integer, ByRef MediaDemographicID As Integer, ByRef RowID As Integer) As Boolean

            Dim Parsed As Boolean = False
            Dim WorksheetMarketDetailSubmarketDemoColumnNameParts() As String = Nothing

            Try

                WorksheetMarketDetailSubmarketDemoColumnNameParts = Split(WorksheetMarketDetailSubmarketDemoColumnName, "_")

                If WorksheetMarketDetailSubmarketDemoColumnNameParts.Count = 3 AndAlso
                        IsNumeric(WorksheetMarketDetailSubmarketDemoColumnNameParts(1)) AndAlso
                        IsNumeric(WorksheetMarketDetailSubmarketDemoColumnNameParts(2)) Then

                    WorksheetMarketSubmarketID = WorksheetMarketDetailSubmarketDemoColumnNameParts(1)
                    MediaDemographicID = WorksheetMarketDetailSubmarketDemoColumnNameParts(2)

                    Parsed = True

                ElseIf WorksheetMarketDetailSubmarketDemoColumnNameParts.Count = 4 AndAlso
                        IsNumeric(WorksheetMarketDetailSubmarketDemoColumnNameParts(1)) AndAlso
                        IsNumeric(WorksheetMarketDetailSubmarketDemoColumnNameParts(2)) AndAlso
                        IsNumeric(WorksheetMarketDetailSubmarketDemoColumnNameParts(3)) Then

                    WorksheetMarketSubmarketID = WorksheetMarketDetailSubmarketDemoColumnNameParts(1)
                    MediaDemographicID = WorksheetMarketDetailSubmarketDemoColumnNameParts(2)
                    RowID = WorksheetMarketDetailSubmarketDemoColumnNameParts(3)

                    Parsed = True

                End If

            Catch ex As Exception
                Parsed = False
            End Try

            MarketDetails_ParseWorksheetMarketDetailSubmarketDemoColumnName = Parsed

        End Function
        Public Function MarketDetails_SubmarketCalculateTotal(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                              VendorCode As String, WorksheetMarketDetailSubmarketDemoColumnName As String) As Double

            'objects
            Dim Total As Double = 0
            Dim DataRowViews As Generic.List(Of System.Data.DataRowView) = Nothing
            Dim RowID As Integer = 0
            Dim GRP As Double = 0
            Dim GRPTotal As Double = 0
            Dim GIMP As Double = 0
            Dim GIMPTotal As Double = 0
            Dim GIMPGrandTotal As Double = 0
            Dim Allocation As Double = 0
            Dim AllocationTotal As Double = 0
            Dim TotalDollars As Decimal = 0
            Dim WorksheetMarketDetailSubmarketDemos As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo) = Nothing
            Dim WorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing

            If String.IsNullOrWhiteSpace(VendorCode) = False Then

                DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                Where CStr(DataRowView(MarketDetailsColumns.VendorCode.ToString)) = VendorCode
                                Select DataRowView).ToList

            Else

                DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                Select DataRowView).ToList

            End If

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.Rating OrElse
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.GRP Then

                For Each DataRowView In DataRowViews

                    RowID = DataRowView(MarketDetailsColumns.ID.ToString)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID) Then

                        WorksheetMarketDetailSubmarketDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID)

                        GRPTotal += WorksheetMarketDetailSubmarketDemo.GRP

                    End If

                Next

                Total = GRPTotal

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.IMP OrElse
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.GIMP Then

                For Each DataRowView In DataRowViews

                    RowID = DataRowView(MarketDetailsColumns.ID.ToString)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID) Then

                        WorksheetMarketDetailSubmarketDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID)

                        GIMPTotal += WorksheetMarketDetailSubmarketDemo.GIMP

                    End If

                Next

                Total = GIMPTotal

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.Allocation Then

                For Each WorksheetMarketSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarketDemos

                    For Each DataRowView In DataRowViews

                        RowID = DataRowView(MarketDetailsColumns.ID.ToString)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(WorksheetMarketSubmarketDemo.ColumnName & "_" & RowID) Then

                            WorksheetMarketDetailSubmarketDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache(WorksheetMarketSubmarketDemo.ColumnName & "_" & RowID)

                            GIMPGrandTotal += WorksheetMarketDetailSubmarketDemo.GIMP

                        End If

                    Next

                Next

                If GIMPGrandTotal <> 0 Then

                    For Each DataRowView In DataRowViews

                        RowID = DataRowView(MarketDetailsColumns.ID.ToString)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID) Then

                            WorksheetMarketDetailSubmarketDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache(WorksheetMarketDetailSubmarketDemoColumnName & "_" & RowID)

                            GIMPTotal += WorksheetMarketDetailSubmarketDemo.GIMP

                        End If

                        TotalDollars += DataRowView(MarketDetailsColumns.TotalDollars.ToString)

                    Next

                End If

                If GIMPGrandTotal = 0 Then

                    Total = 0

                Else

                    Total = (TotalDollars * GIMPTotal / GIMPGrandTotal)

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedSubmarketDemoDataType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketDemoDataType.Percentage Then

                For Each WorksheetMarketSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarketDemos

                    For Each DataRowView In DataRowViews

                        RowID = DataRowView(MarketDetailsColumns.ID.ToString)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(WorksheetMarketSubmarketDemo.ColumnName & "_" & RowID) Then

                            WorksheetMarketDetailSubmarketDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache(WorksheetMarketSubmarketDemo.ColumnName & "_" & RowID)

                            GIMPGrandTotal += WorksheetMarketDetailSubmarketDemo.GIMP

                        End If

                    Next

                Next

                If GIMPGrandTotal <> 0 Then

                    For Each WorksheetMarketSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarketDemos

                        GIMPTotal = 0
                        TotalDollars = 0

                        For Each DataRowView In DataRowViews

                            RowID = DataRowView(MarketDetailsColumns.ID.ToString)

                            If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.ContainsKey(WorksheetMarketSubmarketDemo.ColumnName & "_" & RowID) Then

                                WorksheetMarketDetailSubmarketDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache(WorksheetMarketSubmarketDemo.ColumnName & "_" & RowID)

                                GIMPTotal += WorksheetMarketDetailSubmarketDemo.GIMP

                            End If

                            TotalDollars += DataRowView(MarketDetailsColumns.TotalDollars.ToString)

                        Next

                        AllocationTotal += (TotalDollars * GIMPTotal / GIMPGrandTotal)

                        If WorksheetMarketSubmarketDemo.ColumnName = WorksheetMarketDetailSubmarketDemoColumnName Then

                            Allocation = (TotalDollars * GIMPTotal / GIMPGrandTotal)

                        End If

                    Next

                End If

                If AllocationTotal = 0 Then

                    Total = 0

                Else

                    Total = (Allocation / AllocationTotal)

                End If

            Else

                Total = 0

            End If

            If Double.IsNaN(Total) Then

                Total = 0

            End If

            MarketDetails_SubmarketCalculateTotal = Total

        End Function
        Public Sub MarketDetails_HideZeroSpotLinesChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                          HideZeroSpotLines As Boolean)

            MediaBroadcastWorksheetMarketDetailsViewModel.HideZeroSpotLines = HideZeroSpotLines

        End Sub
        Private Sub MarketDetails_CreateDataTableSchema(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim DetailDate As Date = Date.MinValue

            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.ID.ToString)

            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.WorksheetMarketDetailID.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.DaysAndTime.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(AdvantageFramework.DTO.DaysAndTime)
            DataColumn.DefaultValue = Nothing
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.OnHold.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Boolean)
            DataColumn.DefaultValue = False
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.LineNumber.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "Line Nbr"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.MakegoodNumber.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.MakegoodDate.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Date)
            DataColumn.DefaultValue = Date.MinValue
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.MakegoodSpots.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.MadegoodNumber.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.RevisionNumber.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.VendorCode.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.VendorName.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.VendorRadioStationComboID.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.VendorIsCableSystem.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Boolean)
            DataColumn.DefaultValue = False
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.VendorIsComboRadioStation.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Boolean)
            DataColumn.DefaultValue = False
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.CableNetworkStationCode.ToString)

            DataColumn.Caption = "Cable Network"
            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

            DataColumn.AllowDBNull = True
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.Daypart.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.Product.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.Piggyback.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.Length.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Short)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.Days.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.StartTime.ToString)

            DataColumn.AllowDBNull = True
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = Nothing
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.EndTime.ToString)

            DataColumn.AllowDBNull = True
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = Nothing
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookProgram.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.Program.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.Comments.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.Bookend.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Boolean)
            DataColumn.DefaultValue = False
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.ValueAdded.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Boolean)
            DataColumn.DefaultValue = False
            DataColumn.Caption = "Added Value"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.DefaultRate.ToString)

            DataColumn.Caption = "Default Rate"
            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.OrderStatus.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.OrderComments.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.OverridePost.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Boolean)
            DataColumn.DefaultValue = False
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.OverridePostImpressions.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Boolean)
            DataColumn.DefaultValue = False
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.OverridePostAQH.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Boolean)
            DataColumn.DefaultValue = False
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.RowSource.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Short)
            DataColumn.DefaultValue = 0
            '=============
            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))

                DataColumn.ExtendedProperties.Add("Date", DetailDate)

                DataColumn.Caption = DetailDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Integer)
                DataColumn.DefaultValue = 0

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate))

                DataColumn.ExtendedProperties.Add("RateDate", DetailDate)

                DataColumn.Caption = DetailDate.ToString("MM/dd") & " Rate"

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Decimal)
                DataColumn.DefaultValue = 0

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(DetailDate))

                DataColumn.ExtendedProperties.Add("EnteredDate", DetailDate)

                DataColumn.Caption = DetailDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Boolean)
                DataColumn.DefaultValue = True

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(DetailDate))

                DataColumn.ExtendedProperties.Add("OrderStatus", DetailDate)

                DataColumn.Caption = DetailDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Integer)
                DataColumn.DefaultValue = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.TotalSpots.ToString, GetType(Integer))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.TotalDollars.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.TotalNet.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.TotalNet.ToString).Caption = "Total Net"
            '==========
            'primary
            '=========
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryRating.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryRating.ToString).Caption = "Rating"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookPrimaryRating.ToString, GetType(Decimal))

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryAQHRating.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryAQHRating.ToString).Caption = "AQH Rtg"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookPrimaryAQHRating.ToString, GetType(Decimal))

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryShare.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryShare.ToString).Caption = "Share"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookPrimaryShare.ToString, GetType(Decimal))

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryHPUT.ToString, GetType(Decimal))
            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then
                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryHPUT.ToString).Caption = "SIU"
            Else
                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryHPUT.ToString).Caption = "H/PUT"
            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryCPP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryCPP.ToString).Caption = "CPP"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryGRP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryGRP.ToString).Caption = "GRP"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryReach.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryReach.ToString).Caption = "Reach"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryFrequency.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryFrequency.ToString).Caption = "Frequency"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookPrimaryImpressions.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.BookPrimaryImpressions.ToString).Caption = "Imps (000)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryImpressions.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryImpressions.ToString).Caption = "Imps (000)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryGrossImpressions.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryGrossImpressions.ToString).Caption = "Gross Imp"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryUniverse.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryUniverse.ToString).Caption = "Universe"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryCumeImpressions.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryCumeImpressions.ToString).Caption = "Cume"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookPrimaryAQH.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.BookPrimaryAQH.ToString).Caption = "AQH (00)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryAQH.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryAQH.ToString).Caption = "AQH (00)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryCumeRating.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryCumeRating.ToString).Caption = "Cume Rtg"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryCume.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryCume.ToString).Caption = "Cume (00)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryCPM.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryCPM.ToString).Caption = "CPM"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString).Caption = "Vendor Rtg"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString).Caption = "Vendor Share"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString).Caption = "Vendor Imp (00)"

            '==========
            'secondary
            '=========
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryRating.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryRating.ToString).Caption = "Rating"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookSecondaryRating.ToString, GetType(Decimal))

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryAQHRating.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryAQHRating.ToString).Caption = "AQH Rtg"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookSecondaryAQHRating.ToString, GetType(Decimal))

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryShare.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryShare.ToString).Caption = "Share"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookSecondaryShare.ToString, GetType(Decimal))

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryHPUT.ToString, GetType(Decimal))
            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then
                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryHPUT.ToString).Caption = "SIU"
            Else
                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryHPUT.ToString).Caption = "H/PUT"
            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryCPP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryCPP.ToString).Caption = "CPP"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryGRP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryGRP.ToString).Caption = "GRP"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryReach.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryReach.ToString).Caption = "Reach"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryFrequency.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryFrequency.ToString).Caption = "Frequency"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookSecondaryImpressions.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.BookSecondaryImpressions.ToString).Caption = "Imps (000)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryImpressions.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryImpressions.ToString).Caption = "Imps (000)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryGrossImpressions.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryGrossImpressions.ToString).Caption = "Gross Imp"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryUniverse.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryUniverse.ToString).Caption = "Universe"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryCumeImpressions.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryCumeImpressions.ToString).Caption = "Cume"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryAQH.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryAQH.ToString).Caption = "AQH (00)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.BookSecondaryAQH.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.BookSecondaryAQH.ToString).Caption = "AQH (00)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryCumeRating.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryCumeRating.ToString).Caption = "Cume Rtg"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryCume.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryCume.ToString).Caption = "Cume (00)"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryCPM.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryCPM.ToString).Caption = "CPM"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString).Caption = "Vendor Rtg"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString).Caption = "Vendor Share"

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Add(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString, GetType(Long))
            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString).Caption = "Vendor Imp (00)"

        End Sub
        Private Sub MarketDetails_CreateHiatusDataTableDefaultRows(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                   RevisionNumber As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim MediaBroadcastWorksheetMarketDetailIDs() As Integer = Nothing
            Dim SelectedWorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate) = Nothing
            Dim SelectedWorksheetMarketID As Integer = 0
            Dim MediaBroadcastWorksheetMarketGoalIDs() As Integer = Nothing
            Dim MediaBroadcastWorksheetMarketGoalDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                SelectedWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

            End If

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketDetailIDs = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.Load(DbContext).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = SelectedWorksheetMarketID AndAlso
                                                                                                                                                                           Entity.RevisionNumber = RevisionNumber).Select(Function(Entity) Entity.ID).ToArray

                SelectedWorksheetMarketDetailDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.Load(DbContext).Where(Function(Entity) MediaBroadcastWorksheetMarketDetailIDs.Contains(Entity.MediaBroadcastWorksheetMarketDetailID) = True).ToList.
                                                                                                                                                    Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate(Entity)).ToList

                If SelectedWorksheetMarketDetailDates.Count = 0 Then

                    MediaBroadcastWorksheetMarketGoalIDs = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = SelectedWorksheetMarketID).Select(Function(Entity) Entity.ID).ToArray

                    MediaBroadcastWorksheetMarketGoalDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoalDate.Load(DbContext).Where(Function(Entity) MediaBroadcastWorksheetMarketGoalIDs.Contains(Entity.MediaBroadcastWorksheetMarketGoalID) = True).ToList

                Else

                    MediaBroadcastWorksheetMarketGoalDates = New Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate)

                End If

                DbContext.Database.Connection.Close()

            End Using

            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.NewRow()

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                If SelectedWorksheetMarketDetailDates.Any(Function(Entity) Entity.Date = DetailDate AndAlso Entity.IsHiatus = True) OrElse
                        MediaBroadcastWorksheetMarketGoalDates.Any(Function(Entity) Entity.Date = DetailDate AndAlso Entity.IsHiatus = True) Then

                    DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = True

                Else

                    DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = False

                End If

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows.Add(DataRow)

            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.EndLoadData()

        End Sub
        Private Sub MarketDetails_CreateHiatusDataTableDefaultSchema(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim DetailDate As Date = Date.MinValue

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Columns.Add(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate), GetType(Boolean))

                DataColumn.ExtendedProperties.Add("Date", DetailDate)

                DataColumn.Caption = DetailDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DefaultValue = False

            Next

        End Sub
        Private Sub MarketDetails_CreateRowTotalsDataTableDefaultRows(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim CPP As Decimal = 0
            Dim MediaBroadcastWorksheetMarketGoals As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal) = Nothing
            Dim WorksheetMarketID As Integer = 0

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Spots"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GRP"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GIMP"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Cost"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Reach"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Frequency"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Goals"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GRP"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Goals"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Cost"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Variance"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GRP"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Variance"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Cost"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Variance"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GRP %"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)
            '====================================
            '====================================
            '====================================
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.NewRow()

            DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Variance"
            DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Cost %"

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                DataRow(ColumnName) = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows.Add(DataRow)

            MarketDetails_RefreshRowTotals_TotalSpots(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalRatings(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalImpressions(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalDollars(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalReach(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalFrequency(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_GoalRatings(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_GoalDollars(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_VarianceRatings(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_VarianceDollars(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_VarianceRatingsPercent(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_VarianceDollarsPercent(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.EndLoadData()

        End Sub
        Private Sub MarketDetails_CreateRowTotalsDataTableDefaultSchema(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim DetailDate As Date = Date.MinValue

            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Columns.Add(MarketDetails_RowTotalColumns.ID.ToString)

            DataColumn.DataType = GetType(Integer)
            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Columns.Add(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString, GetType(String))
            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Columns.Add(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString, GetType(String))

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Columns.Add(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate), GetType(Decimal))

                DataColumn.ExtendedProperties.Add("Date", DetailDate)

                DataColumn.Caption = DetailDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Decimal)
                DataColumn.DefaultValue = 0

            Next

        End Sub
        Private Sub MarketDetails_RefreshAllRowTotalsDataTable(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                               RefreshGoals As Boolean)

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.BeginLoadData()

            MarketDetails_RefreshRowTotals_TotalSpots(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalRatings(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalImpressions(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalDollars(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalReach(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalFrequency(MediaBroadcastWorksheetMarketDetailsViewModel)

            If RefreshGoals Then

                MarketDetails_RefreshRowTotals_GoalRatings(MediaBroadcastWorksheetMarketDetailsViewModel)
                MarketDetails_RefreshRowTotals_GoalDollars(MediaBroadcastWorksheetMarketDetailsViewModel)

            End If

            MarketDetails_RefreshRowTotals_VarianceRatings(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_VarianceDollars(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_VarianceRatingsPercent(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_VarianceDollarsPercent(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.EndLoadData()

            MarketDetails_LoadSummaryDataTables(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Private Sub MarketDetails_RefreshRatingRowTotalsDataTable(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.BeginLoadData()

            MarketDetails_RefreshRowTotals_TotalRatings(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalReach(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_TotalFrequency(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_RefreshRowTotals_VarianceRatings(MediaBroadcastWorksheetMarketDetailsViewModel)
            MarketDetails_RefreshRowTotals_VarianceRatingsPercent(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.EndLoadData()

            MarketDetails_LoadSummaryDataTables(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Private Sub MarketDetails_RefreshRowTotalsDataTable(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                            ColumnName As String)

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.BeginLoadData()

            MarketDetails_RefreshRowTotals_TotalSpots(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)
            MarketDetails_RefreshRowTotals_TotalRatings(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)
            MarketDetails_RefreshRowTotals_TotalImpressions(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)
            MarketDetails_RefreshRowTotals_TotalDollars(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)
            MarketDetails_RefreshRowTotals_TotalReach(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)
            MarketDetails_RefreshRowTotals_TotalFrequency(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)

            MarketDetails_RefreshRowTotals_VarianceRatings(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)
            MarketDetails_RefreshRowTotals_VarianceDollars(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)
            MarketDetails_RefreshRowTotals_VarianceRatingsPercent(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)
            MarketDetails_RefreshRowTotals_VarianceDollarsPercent(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)

            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.EndLoadData()

            MarketDetails_LoadSummaryDataTables(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_RefreshColumnTotalsDataTable(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                              RowIndex As Integer)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim TotalSpots As Integer = 0
            Dim RateColumnName As String = String.Empty
            Dim RateAmount As Decimal = 0
            Dim TotalDollars As Decimal = 0
            Dim TotalRateAmount As Decimal = 0
            Dim AverageRateAmount As Decimal = 0
            Dim DatesWithRateGreaterThanZeroCount As Integer = 0
            Dim RowID As Integer = 0
            'Dim UpdateSubmarketCacheAction As Action(Of AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, Integer, Integer) = Nothing
            'Dim Task As System.Threading.Tasks.Task(Of AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, Integer, Integer) = Nothing
            Dim HasToUpdateLineTotals As Boolean = False
            Dim GIMPTotal As Decimal = 0
            Dim AllocationTotal As Decimal = 0
            Dim WorksheetMarketDetailSubmarketDemos As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo) = Nothing
            Dim MediaDemographicIDs As Generic.List(Of Integer) = Nothing

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            DataRow.BeginEdit()

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                TotalSpots += CInt(DataRow(ColumnName))

                RateAmount = DataRow(RateColumnName)

                If RateAmount > 0 Then

                    DatesWithRateGreaterThanZeroCount += 1

                End If

                TotalRateAmount += RateAmount

                TotalDollars += (RateAmount * CDec(DataRow(ColumnName)))

            Next

            If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                RowID = DataRow(MarketDetailsColumns.ID.ToString)

                If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos IsNot Nothing AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Count > 0 AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Any(Function(Entity) Entity.RowID = RowID) Then

                    WorksheetMarketDetailSubmarketDemos = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.RowID = RowID).ToList

                    For Each WorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos

                        If HasToUpdateLineTotals = False AndAlso WorksheetMarketDetailSubmarketDemo.TotalSpots <> TotalSpots Then

                            HasToUpdateLineTotals = True

                        End If

                        WorksheetMarketDetailSubmarketDemo.TotalSpots = TotalSpots
                        WorksheetMarketDetailSubmarketDemo.TotalDollars = TotalDollars

                    Next

                    If HasToUpdateLineTotals Then

                        MediaDemographicIDs = WorksheetMarketDetailSubmarketDemos.Select(Function(Entity) Entity.MediaDemographicID).Distinct.ToList

                        For Each MediaDemographicID In MediaDemographicIDs

                            GIMPTotal = 0
                            AllocationTotal = 0

                            For Each WorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos

                                GIMPTotal += WorksheetMarketDetailSubmarketDemo.GIMP

                            Next

                            For Each WorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos

                                WorksheetMarketDetailSubmarketDemo.GIMPTotal = GIMPTotal

                            Next

                            For Each WorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos

                                AllocationTotal += WorksheetMarketDetailSubmarketDemo.Allocation

                            Next

                            For Each WorksheetMarketDetailSubmarketDemo In WorksheetMarketDetailSubmarketDemos

                                WorksheetMarketDetailSubmarketDemo.AllocationTotal = AllocationTotal

                            Next

                        Next

                    End If

                End If

                'UpdateSubmarketCacheAction = (Sub(ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, RowID As Integer, Spots As Integer)

                '                              End Sub)

                'UpdateSubmarketCacheAction.Invoke(MediaBroadcastWorksheetMarketDetailsViewModel, ID, TotalSpots)

                ''Task = New System.Threading.Tasks.Task(UpdateSubmarketCacheAction)

            End If

            DataRow(MarketDetailsColumns.TotalSpots.ToString) = TotalSpots
            DataRow(MarketDetailsColumns.TotalDollars.ToString) = TotalDollars

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.IsGross Then

                DataRow(MarketDetailsColumns.TotalNet.ToString) = Math.Round(TotalDollars * 0.85, 2, MidpointRounding.ToEven)

            Else

                DataRow(MarketDetailsColumns.TotalNet.ToString) = TotalDollars

            End If

            DataRow(MarketDetailsColumns.PrimaryRating.ToString) = DataRow(MarketDetailsColumns.PrimaryRating.ToString)
            DataRow(MarketDetailsColumns.PrimaryShare.ToString) = DataRow(MarketDetailsColumns.PrimaryShare.ToString)
            DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = DataRow(MarketDetailsColumns.PrimaryHPUT.ToString)

            DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = DataRow(MarketDetailsColumns.PrimaryImpressions.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                DataRow(MarketDetailsColumns.PrimaryGRP.ToString) = TotalSpots * DataRow(MarketDetailsColumns.PrimaryRating.ToString)

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 AndAlso
                        (DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) <> 0 OrElse
                         (IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False AndAlso
                          DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) <> 0)) Then

                    If DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) < DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                        DataRow(MarketDetailsColumns.PrimaryReach.ToString) = CalculateCumlessReach(DataRow(MarketDetailsColumns.PrimaryRating.ToString), TotalSpots)

                    Else

                        DataRow(MarketDetailsColumns.PrimaryReach.ToString) = CalculateTVReach(DataRow(MarketDetailsColumns.PrimaryImpressions.ToString), DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString),
                                                                                               TotalSpots, DataRow(MarketDetailsColumns.PrimaryUniverse.ToString), DataRow(MarketDetailsColumns.PrimaryRating.ToString), DataRow(MarketDetailsColumns.BookPrimaryRating.ToString))

                    End If

                Else

                    DataRow(MarketDetailsColumns.PrimaryReach.ToString) = 0

                End If

                If DataRow(MarketDetailsColumns.PrimaryReach.ToString) = 0 Then

                    DataRow(MarketDetailsColumns.PrimaryReach.ToString) = CalculateCumlessReach(DataRow(MarketDetailsColumns.PrimaryRating.ToString), TotalSpots)

                End If

                DataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = CalculateTVFrequency(DataRow(MarketDetailsColumns.PrimaryGRP.ToString), DataRow(MarketDetailsColumns.PrimaryReach.ToString))

                DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = (DataRow(MarketDetailsColumns.TotalSpots.ToString) * DataRow(MarketDetailsColumns.PrimaryImpressions.ToString))

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DataRow(MarketDetailsColumns.PrimaryGRP.ToString) = TotalSpots * DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString)

                If DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) Then

                    DataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = CalculateRadioFrequency(DataRow(MarketDetailsColumns.PrimaryGRP.ToString), DataRow(MarketDetailsColumns.PrimaryReach.ToString))

                Else

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 AndAlso
                            DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) > 0 Then

                        If DataRow(MarketDetailsColumns.PrimaryCume.ToString) < DataRow(MarketDetailsColumns.PrimaryAQH.ToString) Then

                            DataRow(MarketDetailsColumns.PrimaryReach.ToString) = CalculateCumlessReach(DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString), TotalSpots)

                        Else

                            DataRow(MarketDetailsColumns.PrimaryReach.ToString) = CalculateRadioReach(DataRow(MarketDetailsColumns.PrimaryAQH.ToString), DataRow(MarketDetailsColumns.PrimaryCume.ToString),
                                                                                                      TotalSpots, DataRow(MarketDetailsColumns.PrimaryUniverse.ToString), DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString), DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString))

                        End If

                    Else

                        DataRow(MarketDetailsColumns.PrimaryReach.ToString) = 0

                    End If

                    If DataRow(MarketDetailsColumns.PrimaryReach.ToString) = 0 Then

                        DataRow(MarketDetailsColumns.PrimaryReach.ToString) = CalculateCumlessReach(DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString), TotalSpots)

                    End If

                    DataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = CalculateRadioFrequency(DataRow(MarketDetailsColumns.PrimaryGRP.ToString), DataRow(MarketDetailsColumns.PrimaryReach.ToString))

                End If

                DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = CInt(DataRow(MarketDetailsColumns.PrimaryAQH.ToString)) * TotalSpots

            End If

            DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = DataRow(MarketDetailsColumns.PrimaryUniverse.ToString)
            DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString)
            DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString)
            DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = DataRow(MarketDetailsColumns.PrimaryAQH.ToString)
            DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString)
            DataRow(MarketDetailsColumns.PrimaryCume.ToString) = DataRow(MarketDetailsColumns.PrimaryCume.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If TotalSpots = 0 Then

                    If DatesWithRateGreaterThanZeroCount > 0 Then

                        AverageRateAmount = TotalRateAmount / DatesWithRateGreaterThanZeroCount

                    Else

                        AverageRateAmount = 0

                    End If

                    DataRow(MarketDetailsColumns.PrimaryCPP.ToString) = If(DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0, 0, Math.Round(AverageRateAmount / DataRow(MarketDetailsColumns.PrimaryRating.ToString), 2))
                    DataRow(MarketDetailsColumns.PrimaryCPM.ToString) = If(DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) <> 0, Math.Round((AverageRateAmount / DataRow(MarketDetailsColumns.PrimaryImpressions.ToString)) * 1000, 2), 0)

                Else

                    DataRow(MarketDetailsColumns.PrimaryCPP.ToString) = If(DataRow(MarketDetailsColumns.PrimaryGRP.ToString) = 0, 0, Math.Round(TotalDollars / DataRow(MarketDetailsColumns.PrimaryGRP.ToString), 2))
                    DataRow(MarketDetailsColumns.PrimaryCPM.ToString) = If(DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) <> 0, Math.Round((TotalDollars / DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString)) * 1000, 2), 0)

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If TotalSpots = 0 Then

                    If DatesWithRateGreaterThanZeroCount > 0 Then

                        AverageRateAmount = TotalRateAmount / DatesWithRateGreaterThanZeroCount

                    Else

                        AverageRateAmount = 0

                    End If

                    DataRow(MarketDetailsColumns.PrimaryCPP.ToString) = If(DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = 0, 0, Math.Round(AverageRateAmount / DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString), 2))
                    DataRow(MarketDetailsColumns.PrimaryCPM.ToString) = If(DataRow(MarketDetailsColumns.PrimaryAQH.ToString) <> 0, Math.Round((AverageRateAmount / DataRow(MarketDetailsColumns.PrimaryAQH.ToString)) * 1000, 2), 0)

                Else

                    DataRow(MarketDetailsColumns.PrimaryCPP.ToString) = If(DataRow(MarketDetailsColumns.PrimaryGRP.ToString) = 0, 0, Math.Round(TotalDollars / DataRow(MarketDetailsColumns.PrimaryGRP.ToString), 2))
                    DataRow(MarketDetailsColumns.PrimaryCPM.ToString) = If(DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) <> 0, Math.Round((TotalDollars / DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString)) * 1000, 2), 0)

                End If

            End If

            DataRow(MarketDetailsColumns.SecondaryRating.ToString) = DataRow(MarketDetailsColumns.SecondaryRating.ToString)
            DataRow(MarketDetailsColumns.SecondaryShare.ToString) = DataRow(MarketDetailsColumns.SecondaryShare.ToString)
            DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = DataRow(MarketDetailsColumns.SecondaryHPUT.ToString)

            DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = DataRow(MarketDetailsColumns.SecondaryImpressions.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                DataRow(MarketDetailsColumns.SecondaryGRP.ToString) = TotalSpots * DataRow(MarketDetailsColumns.SecondaryRating.ToString)

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 AndAlso
                        (DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) <> 0 OrElse
                         (IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False AndAlso
                          DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) <> 0)) Then

                    If DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) < DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                        DataRow(MarketDetailsColumns.SecondaryReach.ToString) = CalculateCumlessReach(DataRow(MarketDetailsColumns.SecondaryRating.ToString), TotalSpots)

                    Else

                        DataRow(MarketDetailsColumns.SecondaryReach.ToString) = CalculateTVReach(DataRow(MarketDetailsColumns.SecondaryImpressions.ToString), DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString),
                                                                                                 TotalSpots, DataRow(MarketDetailsColumns.SecondaryUniverse.ToString), DataRow(MarketDetailsColumns.SecondaryRating.ToString), DataRow(MarketDetailsColumns.BookSecondaryRating.ToString))

                    End If

                Else

                    DataRow(MarketDetailsColumns.SecondaryReach.ToString) = 0

                End If

                If DataRow(MarketDetailsColumns.SecondaryReach.ToString) = 0 Then

                    DataRow(MarketDetailsColumns.SecondaryReach.ToString) = CalculateCumlessReach(DataRow(MarketDetailsColumns.SecondaryRating.ToString), TotalSpots)

                End If

                DataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = CalculateTVFrequency(DataRow(MarketDetailsColumns.SecondaryGRP.ToString), DataRow(MarketDetailsColumns.SecondaryReach.ToString))

                DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = (DataRow(MarketDetailsColumns.TotalSpots.ToString) * DataRow(MarketDetailsColumns.SecondaryImpressions.ToString))

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DataRow(MarketDetailsColumns.SecondaryGRP.ToString) = TotalSpots * DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString)

                If DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) Then

                    DataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = CalculateRadioFrequency(DataRow(MarketDetailsColumns.SecondaryGRP.ToString), DataRow(MarketDetailsColumns.SecondaryReach.ToString))

                Else

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 AndAlso
                            DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) > 0 Then

                        If DataRow(MarketDetailsColumns.SecondaryCume.ToString) < DataRow(MarketDetailsColumns.SecondaryAQH.ToString) Then

                            DataRow(MarketDetailsColumns.SecondaryReach.ToString) = CalculateCumlessReach(DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString), TotalSpots)

                        Else

                            DataRow(MarketDetailsColumns.SecondaryReach.ToString) = CalculateRadioReach(DataRow(MarketDetailsColumns.SecondaryAQH.ToString), DataRow(MarketDetailsColumns.SecondaryCume.ToString),
                                                                                                        TotalSpots, DataRow(MarketDetailsColumns.SecondaryUniverse.ToString), DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString), DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString))

                        End If

                    Else

                        DataRow(MarketDetailsColumns.SecondaryReach.ToString) = 0

                    End If

                    If DataRow(MarketDetailsColumns.SecondaryReach.ToString) = 0 Then

                        DataRow(MarketDetailsColumns.SecondaryReach.ToString) = CalculateCumlessReach(DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString), TotalSpots)

                    End If

                    DataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = CalculateRadioFrequency(DataRow(MarketDetailsColumns.SecondaryGRP.ToString), DataRow(MarketDetailsColumns.SecondaryReach.ToString))

                End If

                DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = CInt(DataRow(MarketDetailsColumns.SecondaryAQH.ToString)) * TotalSpots

            End If

            DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = DataRow(MarketDetailsColumns.SecondaryUniverse.ToString)
            DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString)
            DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString)
            DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = DataRow(MarketDetailsColumns.SecondaryAQH.ToString)
            DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString)
            DataRow(MarketDetailsColumns.SecondaryCume.ToString) = DataRow(MarketDetailsColumns.SecondaryCume.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If TotalSpots = 0 Then

                    If DatesWithRateGreaterThanZeroCount > 0 Then

                        AverageRateAmount = TotalRateAmount / DatesWithRateGreaterThanZeroCount

                    Else

                        AverageRateAmount = 0

                    End If

                    DataRow(MarketDetailsColumns.SecondaryCPP.ToString) = If(DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0, 0, Math.Round(AverageRateAmount / DataRow(MarketDetailsColumns.SecondaryRating.ToString), 2))
                    DataRow(MarketDetailsColumns.SecondaryCPM.ToString) = If(DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) <> 0, Math.Round((AverageRateAmount / DataRow(MarketDetailsColumns.SecondaryImpressions.ToString)) * 1000, 2), 0)

                Else

                    DataRow(MarketDetailsColumns.SecondaryCPP.ToString) = If(DataRow(MarketDetailsColumns.SecondaryGRP.ToString) = 0, 0, Math.Round(TotalDollars / DataRow(MarketDetailsColumns.SecondaryGRP.ToString), 2))
                    DataRow(MarketDetailsColumns.SecondaryCPM.ToString) = If(DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) <> 0, Math.Round((TotalDollars / DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString)) * 1000, 2), 0)

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If TotalSpots = 0 Then

                    If DatesWithRateGreaterThanZeroCount > 0 Then

                        AverageRateAmount = TotalRateAmount / DatesWithRateGreaterThanZeroCount

                    Else

                        AverageRateAmount = 0

                    End If

                    DataRow(MarketDetailsColumns.SecondaryCPP.ToString) = If(DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = 0, 0, Math.Round(AverageRateAmount / DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString), 2))
                    DataRow(MarketDetailsColumns.SecondaryCPM.ToString) = If(DataRow(MarketDetailsColumns.SecondaryAQH.ToString) <> 0, Math.Round((AverageRateAmount / DataRow(MarketDetailsColumns.SecondaryAQH.ToString)) * 1000, 2), 0)

                Else

                    DataRow(MarketDetailsColumns.SecondaryCPP.ToString) = If(DataRow(MarketDetailsColumns.SecondaryGRP.ToString) = 0, 0, Math.Round(TotalDollars / DataRow(MarketDetailsColumns.SecondaryGRP.ToString), 2))
                    DataRow(MarketDetailsColumns.SecondaryCPM.ToString) = If(DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) <> 0, Math.Round((TotalDollars / DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString)) * 1000, 2), 0)

                End If

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_TotalSpots(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                              Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalSpots)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                    DataRow(ColumnName) = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DR) CDec(DR(ColumnName)))

                Next

            Else

                DataRow(DateColumnName) = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DR) CDec(DR(DateColumnName)))

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_TotalRatings(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalRatings)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                        DataRow(ColumnName) = 0

                        For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                            DataRow(ColumnName) += (DataTableDataRow(MarketDetailsColumns.PrimaryRating.ToString) * CDec(DataTableDataRow(ColumnName)))

                        Next

                    Next

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                        DataRow(ColumnName) = 0

                        For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                            DataRow(ColumnName) += (DataTableDataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) * CDec(DataTableDataRow(ColumnName)))

                        Next

                    Next

                End If

            Else

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    DataRow(DateColumnName) = 0

                    For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                        DataRow(DateColumnName) += (DataTableDataRow(MarketDetailsColumns.PrimaryRating.ToString) * CDec(DataTableDataRow(DateColumnName)))

                    Next

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    DataRow(DateColumnName) = 0

                    For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                        DataRow(DateColumnName) += (DataTableDataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) * CDec(DataTableDataRow(DateColumnName)))

                    Next

                End If

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_TotalImpressions(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                    Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalImpressions)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                    DataRow(ColumnName) = 0

                    For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                            DataRow(ColumnName) += (DataTableDataRow(MarketDetailsColumns.PrimaryAQH.ToString) * CDec(DataTableDataRow(ColumnName)))

                        Else

                            DataRow(ColumnName) += (DataTableDataRow(MarketDetailsColumns.PrimaryImpressions.ToString) * CDec(DataTableDataRow(ColumnName)))

                        End If

                    Next

                Next

            Else

                DataRow(DateColumnName) = 0

                For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                        DataRow(DateColumnName) += (DataTableDataRow(MarketDetailsColumns.PrimaryAQH.ToString) * CDec(DataTableDataRow(DateColumnName)))

                    Else

                        DataRow(DateColumnName) += (DataTableDataRow(MarketDetailsColumns.PrimaryImpressions.ToString) * CDec(DataTableDataRow(DateColumnName)))

                    End If

                Next

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_TotalDollars(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim RateColumnName As String = String.Empty
            Dim RateAmount As Decimal = 0
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalDollars)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                    RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                    DataRow(ColumnName) = 0

                    For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                        RateAmount = DataTableDataRow(RateColumnName)

                        DataRow(ColumnName) += (RateAmount * CDec(DataTableDataRow(ColumnName)))

                    Next

                Next

            Else

                RateColumnName = DateColumnName.Replace("Date", "Rate")

                DataRow(DateColumnName) = 0

                For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                    RateAmount = DataTableDataRow(RateColumnName)

                    DataRow(DateColumnName) += (RateAmount * CDec(DataTableDataRow(DateColumnName)))

                Next

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_TotalReach(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                              Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalReach)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                    DataRow(ColumnName) = 0

                    DataRow(ColumnName) = MarketDetails_CalculateReachTotal(MediaBroadcastWorksheetMarketDetailsViewModel, String.Empty, True, ColumnName)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalSpots)(ColumnName) = 0 OrElse
                        MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable(0)(ColumnName) = True Then

                        DataRow(ColumnName) = 0

                    End If

                Next

            Else

                DataRow(DateColumnName) = 0

                DataRow(DateColumnName) = MarketDetails_CalculateReachTotal(MediaBroadcastWorksheetMarketDetailsViewModel, String.Empty, True, DateColumnName)

                If MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalSpots)(DateColumnName) = 0 OrElse
                        MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable(0)(DateColumnName) = True Then

                    DataRow(DateColumnName) = 0

                End If

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_TotalFrequency(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                  Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim FilteredDataTable As System.Data.DataTable = Nothing

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalFrequency)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                    DataRow(ColumnName) = 0

                    DataRow(ColumnName) = MarketDetails_CalculateFrequencyTotal(MediaBroadcastWorksheetMarketDetailsViewModel, String.Empty, True, ColumnName)

                Next

            Else

                DataRow(DateColumnName) = 0

                DataRow(DateColumnName) = MarketDetails_CalculateFrequencyTotal(MediaBroadcastWorksheetMarketDetailsViewModel, String.Empty, True, DateColumnName)

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_GoalRatings(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                               Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim CPP As Decimal = 0
            Dim MediaBroadcastWorksheetMarketGoalIDs() As Integer = Nothing
            Dim MediaBroadcastWorksheetMarketGoals As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal) = Nothing
            Dim MediaBroadcastWorksheetMarketGoalDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate) = Nothing
            Dim WorksheetMarketID As Integer = 0
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim DaypartCodes As Generic.List(Of String) = Nothing
            Dim DaypartIDLists As Generic.List(Of Integer) = Nothing
            Dim DaypartIDs() As Integer = Nothing
            Dim Lengths() As Short = Nothing
            Dim HasDaypartFilter As Boolean = False
            Dim HasLengthFilter As Boolean = False

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    If MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket Then

                        WorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

                        If MediaBroadcastWorksheetMarketDetailsViewModel.FilterString.Contains("[" & MarketDetailsColumns.Daypart.ToString & "]") Then

                            HasDaypartFilter = True

                            DaypartCodes = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Select(Function(DR) CStr(DR(MarketDetailsColumns.Daypart.ToString))).Distinct.ToList

                            DaypartIDLists = MediaBroadcastWorksheetMarketDetailsViewModel.Dayparts.Where(Function(Entity) DaypartCodes.Contains(Entity.Code)).Select(Function(Entity) Entity.ID).Distinct.ToList

                            If DaypartCodes.Contains(String.Empty) Then

                                DaypartIDLists.Add(0)

                            End If

                            DaypartIDs = DaypartIDLists.ToArray

                        Else

                            DaypartIDs = New Integer() {}

                        End If

                        If MediaBroadcastWorksheetMarketDetailsViewModel.FilterString.Contains("[" & MarketDetailsColumns.Length.ToString & "]") Then

                            HasLengthFilter = True

                            Lengths = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Select(Function(DR) CShort(DR(MarketDetailsColumns.Length.ToString))).Distinct.ToArray

                        Else

                            Lengths = New Short() {}

                        End If

                        MediaBroadcastWorksheetMarketGoals = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).ToList

                        If HasDaypartFilter Then

                            MediaBroadcastWorksheetMarketGoals = MediaBroadcastWorksheetMarketGoals.Where(Function(Entity) DaypartIDs.Contains(Entity.DaypartID.GetValueOrDefault(0))).ToList

                        End If

                        If HasLengthFilter Then

                            MediaBroadcastWorksheetMarketGoals = MediaBroadcastWorksheetMarketGoals.Where(Function(Entity) Lengths.Contains(Entity.Length)).ToList

                        End If

                        MediaBroadcastWorksheetMarketGoalIDs = MediaBroadcastWorksheetMarketGoals.Select(Function(Entity) Entity.ID).ToArray

                        MediaBroadcastWorksheetMarketGoalDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoalDate.Load(DbContext).Where(Function(Entity) MediaBroadcastWorksheetMarketGoalIDs.Contains(Entity.MediaBroadcastWorksheetMarketGoalID) = True).ToList

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            DataRow(ColumnName) = 0

                            DataRow(ColumnName) = MediaBroadcastWorksheetMarketGoalDates.Where(Function(Entity) Entity.Date = DetailDate).Select(Function(Entity) Entity.GRP).Sum

                        Next

                    Else

                        'DataRow(DateColumnName) = 0

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            DataRow(ColumnName) = 0

                        Next

                    End If

                End Using

            Else

                DataRow(DateColumnName) = 0

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_GoalDollars(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                               Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim CPP As Decimal = 0
            Dim MediaBroadcastWorksheetMarketGoals As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal) = Nothing
            Dim WorksheetMarketID As Integer = 0
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim DaypartCodes As Generic.List(Of String) = Nothing
            Dim DaypartIDLists As Generic.List(Of Integer) = Nothing
            Dim DaypartIDs() As Integer = Nothing
            Dim Lengths() As Short = Nothing
            Dim HasDaypartFilter As Boolean = False
            Dim HasLengthFilter As Boolean = False
            Dim MediaBroadcastWorksheetMarketGoalDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate = Nothing

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    If MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket Then

                        WorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

                        If MediaBroadcastWorksheetMarketDetailsViewModel.FilterString.Contains("[" & MarketDetailsColumns.Daypart.ToString & "]") Then

                            HasDaypartFilter = True

                            DaypartCodes = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Select(Function(DR) CStr(DR(MarketDetailsColumns.Daypart.ToString))).Distinct.ToList

                            DaypartIDLists = MediaBroadcastWorksheetMarketDetailsViewModel.Dayparts.Where(Function(Entity) DaypartCodes.Contains(Entity.Code)).Select(Function(Entity) Entity.ID).Distinct.ToList

                            If DaypartCodes.Contains(String.Empty) Then

                                DaypartIDLists.Add(0)

                            End If

                            DaypartIDs = DaypartIDLists.ToArray

                        Else

                            DaypartIDs = New Integer() {}

                        End If

                        If MediaBroadcastWorksheetMarketDetailsViewModel.FilterString.Contains("[" & MarketDetailsColumns.Length.ToString & "]") Then

                            HasLengthFilter = True

                            Lengths = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Select(Function(DR) CShort(DR(MarketDetailsColumns.Length.ToString))).Distinct.ToArray

                        Else

                            Lengths = New Short() {}

                        End If

                        MediaBroadcastWorksheetMarketGoals = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Include("MediaBroadcastWorksheetMarketGoalDates").
                                                                                                                                      Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).ToList

                        If HasDaypartFilter Then

                            MediaBroadcastWorksheetMarketGoals = MediaBroadcastWorksheetMarketGoals.Where(Function(Entity) DaypartIDs.Contains(Entity.DaypartID.GetValueOrDefault(0))).ToList

                        End If

                        If HasLengthFilter Then

                            MediaBroadcastWorksheetMarketGoals = MediaBroadcastWorksheetMarketGoals.Where(Function(Entity) Lengths.Contains(Entity.Length)).ToList

                        End If

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            DataRow(ColumnName) = 0

                            For Each MediaBroadcastWorksheetMarketGoal In MediaBroadcastWorksheetMarketGoals

                                CPP = MediaBroadcastWorksheetMarketGoal.CPP

                                If MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.Any(Function(Entity) Entity.Date = DetailDate) Then

                                    MediaBroadcastWorksheetMarketGoalDate = MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.SingleOrDefault(Function(Entity) Entity.Date = DetailDate)

                                    If MediaBroadcastWorksheetMarketGoalDate IsNot Nothing Then

                                        If MediaBroadcastWorksheetMarketGoal.WasRateImported Then

                                            DataRow(ColumnName) += (MediaBroadcastWorksheetMarketGoalDate.Rate * MediaBroadcastWorksheetMarketGoalDate.GRP)

                                        Else

                                            DataRow(ColumnName) += (CPP * MediaBroadcastWorksheetMarketGoalDate.GRP)

                                        End If

                                    End If

                                End If

                            Next

                        Next

                    Else

                        'DataRow(DateColumnName) = 0

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            DataRow(ColumnName) = 0

                        Next

                    End If

                End Using

            Else

                DataRow(DateColumnName) = 0

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_VarianceRatings(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                   Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.VarianceRatings)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                    DataRow(ColumnName) = (MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalRatings)(ColumnName) - MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)(ColumnName))

                Next

            Else

                DataRow(DateColumnName) = (MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalRatings)(DateColumnName) - MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)(DateColumnName))

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_VarianceDollars(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                   Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.VarianceDollars)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                    DataRow(ColumnName) = (MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalDollars)(ColumnName) - MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)(ColumnName))

                Next

            Else

                DataRow(DateColumnName) = (MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalDollars)(DateColumnName) - MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)(DateColumnName))

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_VarianceRatingsPercent(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                          Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.VarianceRatingsPercent)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)(ColumnName) = 0 Then

                        DataRow(ColumnName) = 0

                    Else

                        DataRow(ColumnName) = (MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalRatings)(ColumnName) / MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)(ColumnName))

                    End If

                Next

            Else

                If MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)(DateColumnName) = 0 Then

                    DataRow(DateColumnName) = 0

                Else

                    DataRow(DateColumnName) = (MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalRatings)(DateColumnName) / MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)(DateColumnName))

                End If

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshRowTotals_VarianceDollarsPercent(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                          Optional DateColumnName As String = "")

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.VarianceDollarsPercent)

            DataRow.BeginEdit()

            If String.IsNullOrWhiteSpace(DateColumnName) = True Then

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)(ColumnName) = 0 Then

                        DataRow(ColumnName) = 0

                    Else

                        DataRow(ColumnName) = (MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalDollars)(ColumnName) / MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)(ColumnName))

                    End If

                Next

            Else

                If MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)(DateColumnName) = 0 Then

                    DataRow(DateColumnName) = 0

                Else

                    DataRow(DateColumnName) = (MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.TotalDollars)(DateColumnName) / MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)(DateColumnName))

                End If

            End If

            DataRow.EndEdit()

        End Sub
        Public Sub MarketDetails_LoadSummaryDataTables(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DaypartDataTable As System.Data.DataTable = Nothing
            Dim StationDataTable As System.Data.DataTable = Nothing
            Dim LengthDataTable As System.Data.DataTable = Nothing
            Dim DaypartLengthDataTable As System.Data.DataTable = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim CPP As Decimal = 0
            Dim MediaBroadcastWorksheetMarketGoals As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal) = Nothing
            Dim FilteredMediaBroadcastWorksheetMarketGoals As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal) = Nothing
            Dim DataRowViews As Generic.List(Of System.Data.DataRowView) = Nothing
            Dim WorksheetMarketID As Integer = 0
            Dim Daypart As String = String.Empty
            Dim Station As String = String.Empty
            Dim Length As Integer = 0
            Dim DaypartID As Integer = 0
            Dim MediaBroadcastWorksheetMarketGoalDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate = Nothing
            Dim RateAmount As Decimal = 0
            Dim ColumnName As String = String.Empty
            Dim RateColumnName As String = String.Empty
            Dim TotalSpots As Integer = 0
            Dim TotalDollars As Decimal = 0
            Dim TotalRating As Decimal = 0
            Dim TotalGRP As Decimal = 0
            Dim TotalGrossImpressions As Decimal = 0
            Dim TotalImpressions As Decimal = 0
            Dim GoalDaypartCodes As Generic.List(Of String) = Nothing
            Dim DaypartCodes As Generic.List(Of String) = Nothing
            Dim TotalCost As Decimal = 0
            Dim CostPercentage As Decimal = 0
            Dim TotalCostPercentage As Integer = 0
            Dim GrandTotalGrossImpressions As Decimal = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket Then

                WorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedScheduleSummary = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.ScheduleSummaries.Daypart Then
                    '======
                    'Daypart Summary
                    '======
                    DaypartDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable(True, MarketDetailsColumns.Daypart.ToString)

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        DbContext.Database.Connection.Open()

                        MediaBroadcastWorksheetMarketGoals = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Include("MediaBroadcastWorksheetMarketGoalDates").Include("Daypart").
                                                                                                                                      Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).ToList

                        If MediaBroadcastWorksheetMarketGoals IsNot Nothing AndAlso MediaBroadcastWorksheetMarketGoals.Count > 0 Then

                            GoalDaypartCodes = MediaBroadcastWorksheetMarketGoals.Select(Function(Entity) If(Entity.Daypart Is Nothing, "", Entity.Daypart.Code)).Distinct.ToList

                        End If

                    End Using

                    DaypartCodes = DaypartDataTable.Rows.OfType(Of System.Data.DataRow).Select(Function(DR) CStr(DR(MarketDetailsColumns.Daypart.ToString))).ToList

                    If GoalDaypartCodes IsNot Nothing AndAlso GoalDaypartCodes.Count > 0 Then

                        DaypartCodes.AddRange(GoalDaypartCodes)

                    End If

                    DaypartCodes = DaypartCodes.Distinct.ToList

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.BeginLoadData()

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Clear()

                    DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                    Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                    Select DataRowView).ToList

                    GrandTotalGrossImpressions = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryGrossImpressions.ToString)))

                    For Each DaypartCode In DaypartCodes

                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.NewRow

                        'Daypart = ItemDataRow(MarketDetailsColumns.Daypart.ToString)
                        DaypartID = MediaBroadcastWorksheetMarketDetailsViewModel.Dayparts.Where(Function(Entity) Entity.Code = DaypartCode).Select(Function(Entity) Entity.ID).FirstOrDefault

                        FilteredMediaBroadcastWorksheetMarketGoals = MediaBroadcastWorksheetMarketGoals.Where(Function(Entity) Entity.DaypartID.GetValueOrDefault(0) = DaypartID).ToList

                        DataRow(MarketDetails_DaypartSummaryColumns.Daypart.ToString) = DaypartCode

                        DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                        Where CStr(DataRowView(MarketDetailsColumns.Daypart.ToString)) = DaypartCode AndAlso
                                              CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                        Select DataRowView).ToList

                        DataRow(MarketDetails_DaypartSummaryColumns.Spots.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.TotalSpots.ToString)))
                        DataRow(MarketDetails_DaypartSummaryColumns.Cost.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.TotalDollars.ToString)))
                        DataRow(MarketDetails_DaypartSummaryColumns.GRP.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryGRP.ToString)))

                        If DataRow(MarketDetails_DaypartSummaryColumns.GRP.ToString) = 0 Then

                            DataRow(MarketDetails_DaypartSummaryColumns.CPP.ToString) = 0

                        Else

                            DataRow(MarketDetails_DaypartSummaryColumns.CPP.ToString) = DataRow(MarketDetails_DaypartSummaryColumns.Cost.ToString) / DataRow(MarketDetails_DaypartSummaryColumns.GRP.ToString)

                        End If

                        DataRow(MarketDetails_DaypartSummaryColumns.GIMP.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryGrossImpressions.ToString)))

                        TotalGrossImpressions = 0
                        TotalDollars = 0

                        TotalGrossImpressions = DataRow(MarketDetails_DaypartSummaryColumns.GIMP.ToString)
                        TotalDollars = DataRow(MarketDetails_DaypartSummaryColumns.Cost.ToString)

                        If GrandTotalGrossImpressions = 0 Then

                            DataRow(MarketDetails_DaypartSummaryColumns.PercentOfTotalGIMP.ToString) = 0

                        Else

                            DataRow(MarketDetails_DaypartSummaryColumns.PercentOfTotalGIMP.ToString) = FormatNumber(TotalGrossImpressions / GrandTotalGrossImpressions, 2)

                        End If

                        If TotalGrossImpressions = 0 Then

                            DataRow(MarketDetails_DaypartSummaryColumns.CPM.ToString) = 0

                        Else

                            DataRow(MarketDetails_DaypartSummaryColumns.CPM.ToString) = (TotalDollars / TotalGrossImpressions) * 1000

                        End If

                        DataRow(MarketDetails_DaypartSummaryColumns.Budget.ToString) = 0

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                            For Each MediaBroadcastWorksheetMarketGoal In FilteredMediaBroadcastWorksheetMarketGoals

                                CPP = MediaBroadcastWorksheetMarketGoal.CPP

                                If MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.Any(Function(Entity) Entity.Date = DetailDate) Then

                                    MediaBroadcastWorksheetMarketGoalDate = MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.SingleOrDefault(Function(Entity) Entity.Date = DetailDate)

                                    If MediaBroadcastWorksheetMarketGoalDate IsNot Nothing Then

                                        If MediaBroadcastWorksheetMarketGoal.WasRateImported Then

                                            DataRow(MarketDetails_DaypartSummaryColumns.Budget.ToString) += (MediaBroadcastWorksheetMarketGoalDate.Rate * MediaBroadcastWorksheetMarketGoalDate.GRP)

                                        Else

                                            DataRow(MarketDetails_DaypartSummaryColumns.Budget.ToString) += (CPP * MediaBroadcastWorksheetMarketGoalDate.GRP)

                                        End If

                                    End If

                                End If

                            Next

                        Next

                        DataRow(MarketDetails_DaypartSummaryColumns.GoalGRP.ToString) = FilteredMediaBroadcastWorksheetMarketGoals.Sum(Function(Entity) Entity.GRP)

                        If DataRow(MarketDetails_DaypartSummaryColumns.Budget.ToString) <> 0 Then

                            DataRow(MarketDetails_DaypartSummaryColumns.PercentOfBudget.ToString) = DataRow(MarketDetails_DaypartSummaryColumns.Cost.ToString) / DataRow(MarketDetails_DaypartSummaryColumns.Budget.ToString)

                        Else

                            DataRow(MarketDetails_DaypartSummaryColumns.PercentOfBudget.ToString) = 0

                        End If

                        If DataRow(MarketDetails_DaypartSummaryColumns.GoalGRP.ToString) <> 0 Then

                            DataRow(MarketDetails_DaypartSummaryColumns.PercentOfGRP.ToString) = DataRow(MarketDetails_DaypartSummaryColumns.GRP.ToString) / DataRow(MarketDetails_DaypartSummaryColumns.GoalGRP.ToString)

                        Else

                            DataRow(MarketDetails_DaypartSummaryColumns.PercentOfGRP.ToString) = 0

                        End If

                        DataRow(MarketDetails_DaypartSummaryColumns.Reach.ToString) = MarketDetails_CalculateReachForSummaryTables(DataRowViews, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType,
                                                                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket,
                                                                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates,
                                                                                                                                   Nothing, Date.MinValue)
                        DataRow(MarketDetails_DaypartSummaryColumns.Frequency.ToString) = MarketDetails_CalculateFrequencyForSummaryTables(DataRow(MarketDetails_DaypartSummaryColumns.GRP.ToString), DataRow(MarketDetails_DaypartSummaryColumns.Reach.ToString))

                        If String.IsNullOrWhiteSpace(DaypartCode) Then

                            If DataRow(MarketDetails_DaypartSummaryColumns.Spots.ToString) <> 0 OrElse
                                    DataRow(MarketDetails_DaypartSummaryColumns.Budget.ToString) <> 0 OrElse
                                    DataRow(MarketDetails_DaypartSummaryColumns.GoalGRP.ToString) <> 0 Then

                                MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.Add(DataRow)

                            End If

                        Else

                            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.Add(DataRow)

                        End If

                    Next

                    TotalCost = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.OfType(Of System.Data.DataRow).Select(Function(DR) CDec(DR(MarketDetails_DaypartSummaryColumns.Cost.ToString))).Sum

                    TotalCostPercentage = 0

                    If TotalCost > 0 Then

                        For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                            CostPercentage = 0

                            CostPercentage = Math.Round(CDec(DataRow(MarketDetails_DaypartSummaryColumns.Cost.ToString)) / TotalCost, 2)

                            DataRow(MarketDetails_DaypartSummaryColumns.CostPercentageOfTotal.ToString) = CostPercentage

                            TotalCostPercentage += (CostPercentage * 100)

                        Next

                    End If

                    If TotalCostPercentage < 100 AndAlso TotalCostPercentage > 0 Then

                        Do Until TotalCostPercentage = 100

                            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) CDec(DR(MarketDetails_DaypartSummaryColumns.Cost.ToString)))

                                DataRow(MarketDetails_DaypartSummaryColumns.CostPercentageOfTotal.ToString) += 0.01

                                TotalCostPercentage += 1

                                If TotalCostPercentage = 100 Then

                                    Exit For

                                End If

                            Next

                        Loop

                    ElseIf TotalCostPercentage > 100 Then

                        Do Until TotalCostPercentage = 100

                            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) CDec(DR(MarketDetails_DaypartSummaryColumns.Cost.ToString)))

                                DataRow(MarketDetails_DaypartSummaryColumns.CostPercentageOfTotal.ToString) -= 0.01

                                TotalCostPercentage -= 1

                                If TotalCostPercentage = 100 Then

                                    Exit For

                                End If

                            Next

                        Loop

                    End If

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.EndLoadData()

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedScheduleSummary = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.ScheduleSummaries.DaypartWeeklyDaily Then
                    '======
                    'Daypart Weekly\Daily Summary
                    '======
                    DaypartDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable(True, MarketDetailsColumns.Daypart.ToString)

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.BeginLoadData()

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.Clear()

                    For Each ItemDataRow In DaypartDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.NewRow

                        Daypart = ItemDataRow(MarketDetailsColumns.Daypart.ToString)

                        DataRow(MarketDetails_DaypartWeeklyDailySummaryColumns.Daypart.ToString) = Daypart

                        DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                        Where CStr(DataRowView(MarketDetailsColumns.Daypart.ToString)) = Daypart AndAlso
                                              CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                        Select DataRowView).ToList

                        TotalDollars = 0

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                            RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                            For Each DataRowView In DataRowViews

                                RateAmount = DataRowView(RateColumnName)

                                DataRow(ColumnName) += (RateAmount * CDec(DataRowView(ColumnName)))

                            Next

                            TotalDollars += DataRow(ColumnName)

                        Next

                        DataRow(MarketDetails_DaypartWeeklyDailySummaryColumns.Totals.ToString) = TotalDollars

                        MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.Rows.Add(DataRow)

                    Next

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.EndLoadData()

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedScheduleSummary = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.ScheduleSummaries.DaypartGRPWeeklyDaily Then
                    '======
                    'Daypart GRP Weekly\Daily Summary
                    '======
                    DaypartDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable(True, MarketDetailsColumns.Daypart.ToString)

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.BeginLoadData()

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.Clear()

                    For Each ItemDataRow In DaypartDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.NewRow

                        Daypart = ItemDataRow(MarketDetailsColumns.Daypart.ToString)

                        DataRow(MarketDetails_DaypartGRPWeeklyDailySummaryColumns.Daypart.ToString) = Daypart

                        DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                        Where CStr(DataRowView(MarketDetailsColumns.Daypart.ToString)) = Daypart AndAlso
                                              CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                        Select DataRowView).ToList

                        TotalGRP = 0

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            For Each DataRowView In DataRowViews

                                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                    DataRow(ColumnName) += (CDec(DataRowView(MarketDetailsColumns.PrimaryRating.ToString)) * CDec(DataRowView(ColumnName)))

                                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                    DataRow(ColumnName) += (CDec(DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString)) * CDec(DataRowView(ColumnName)))

                                End If

                            Next

                            TotalGRP += DataRow(ColumnName)

                        Next

                        DataRow(MarketDetails_DaypartGRPWeeklyDailySummaryColumns.Totals.ToString) = TotalGRP

                        MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.Rows.Add(DataRow)

                    Next

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.EndLoadData()

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedScheduleSummary = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.ScheduleSummaries.Station Then
                    '======
                    'Station Summary
                    '======
                    StationDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable(True, MarketDetailsColumns.VendorName.ToString)

                    MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.BeginLoadData()

                    MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Clear()

                    For Each ItemDataRow In StationDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.NewRow

                        Station = ItemDataRow(MarketDetailsColumns.VendorName.ToString)

                        DataRow(MarketDetails_StationSummaryColumns.Station.ToString) = Station

                        DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                        Where CStr(DataRowView(MarketDetailsColumns.VendorName.ToString)) = Station AndAlso
                                              CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                        Select DataRowView).ToList

                        DataRow(MarketDetails_StationSummaryColumns.Spots.ToString) = DataRowViews.Sum(Function(DRW) CInt(DRW(MarketDetailsColumns.TotalSpots.ToString)))
                        DataRow(MarketDetails_StationSummaryColumns.Cost.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.TotalDollars.ToString)))
                        DataRow(MarketDetails_StationSummaryColumns.GRP.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryGRP.ToString)))

                        If DataRow(MarketDetails_StationSummaryColumns.GRP.ToString) = 0 Then

                            DataRow(MarketDetails_StationSummaryColumns.CPP.ToString) = 0

                        Else

                            DataRow(MarketDetails_StationSummaryColumns.CPP.ToString) = DataRow(MarketDetails_StationSummaryColumns.Cost.ToString) / DataRow(MarketDetails_StationSummaryColumns.GRP.ToString)

                        End If

                        DataRow(MarketDetails_StationSummaryColumns.GIMP.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryGrossImpressions.ToString)))

                        TotalGrossImpressions = 0
                        TotalDollars = 0

                        TotalGrossImpressions = DataRow(MarketDetails_StationSummaryColumns.GIMP.ToString)
                        TotalDollars = DataRow(MarketDetails_StationSummaryColumns.Cost.ToString)

                        If TotalGrossImpressions = 0 Then

                            DataRow(MarketDetails_StationSummaryColumns.CPM.ToString) = 0

                        Else

                            DataRow(MarketDetails_StationSummaryColumns.CPM.ToString) = (TotalDollars / TotalGrossImpressions) * 1000

                        End If

                        DataRow(MarketDetails_StationSummaryColumns.Reach.ToString) = MarketDetails_CalculateReachForSummaryTables(DataRowViews, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType,
                                                                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket,
                                                                                                                                   MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates,
                                                                                                                                   Nothing, Date.MinValue)
                        DataRow(MarketDetails_StationSummaryColumns.Frequency.ToString) = MarketDetails_CalculateFrequencyForSummaryTables(DataRow(MarketDetails_StationSummaryColumns.GRP.ToString), DataRow(MarketDetails_StationSummaryColumns.Reach.ToString))

                        'If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                        '    DataRow(MarketDetails_StationSummaryColumns.GRP.ToString) = CInt(DataRow(MarketDetails_StationSummaryColumns.Spots.ToString)) * DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryRating.ToString)))

                        'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                        '    DataRow(MarketDetails_StationSummaryColumns.GRP.ToString) = CInt(DataRow(MarketDetails_StationSummaryColumns.Spots.ToString)) * DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryAQHRating.ToString)))

                        'End If

                        MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Rows.Add(DataRow)

                    Next

                    TotalCost = MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Rows.OfType(Of System.Data.DataRow).Select(Function(DR) CDec(DR(MarketDetails_StationSummaryColumns.Cost.ToString))).Sum

                    TotalCostPercentage = 0

                    If TotalCost > 0 Then

                        For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                            CostPercentage = 0

                            CostPercentage = Math.Round(CDec(DataRow(MarketDetails_StationSummaryColumns.Cost.ToString)) / TotalCost, 2)

                            DataRow(MarketDetails_StationSummaryColumns.CostPercentageOfTotal.ToString) = CostPercentage

                            TotalCostPercentage += (CostPercentage * 100)

                        Next

                    End If

                    If TotalCostPercentage < 100 AndAlso TotalCostPercentage > 0 Then

                        Do Until TotalCostPercentage = 100

                            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) CDec(DR(MarketDetails_StationSummaryColumns.Cost.ToString)))

                                DataRow(MarketDetails_StationSummaryColumns.CostPercentageOfTotal.ToString) += 0.01

                                TotalCostPercentage += 1

                                If TotalCostPercentage = 100 Then

                                    Exit For

                                End If

                            Next

                        Loop

                    ElseIf TotalCostPercentage > 100 Then

                        Do Until TotalCostPercentage = 100

                            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) CDec(DR(MarketDetails_StationSummaryColumns.Cost.ToString)))

                                DataRow(MarketDetails_StationSummaryColumns.CostPercentageOfTotal.ToString) -= 0.01

                                TotalCostPercentage -= 1

                                If TotalCostPercentage = 100 Then

                                    Exit For

                                End If

                            Next

                        Loop

                    End If

                    MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.EndLoadData()

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedScheduleSummary = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.ScheduleSummaries.Length Then
                    '======
                    'Length Summary
                    '======
                    LengthDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable(True, MarketDetailsColumns.Length.ToString)

                    MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.BeginLoadData()

                    MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Clear()

                    For Each ItemDataRow In LengthDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.NewRow

                        Length = ItemDataRow(MarketDetailsColumns.Length.ToString)

                        DataRow(MarketDetails_LengthSummaryColumns.Length.ToString) = Length

                        DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                        Where CInt(DataRowView(MarketDetailsColumns.Length.ToString)) = Length AndAlso
                                              CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                        Select DataRowView).ToList

                        DataRow(MarketDetails_LengthSummaryColumns.Spots.ToString) = DataRowViews.Sum(Function(DRW) CInt(DRW(MarketDetailsColumns.TotalSpots.ToString)))
                        DataRow(MarketDetails_LengthSummaryColumns.Cost.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.TotalDollars.ToString)))
                        DataRow(MarketDetails_LengthSummaryColumns.GRP.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryGRP.ToString)))

                        If DataRow(MarketDetails_LengthSummaryColumns.GRP.ToString) = 0 Then

                            DataRow(MarketDetails_LengthSummaryColumns.CPP.ToString) = 0

                        Else

                            DataRow(MarketDetails_LengthSummaryColumns.CPP.ToString) = DataRow(MarketDetails_LengthSummaryColumns.Cost.ToString) / DataRow(MarketDetails_LengthSummaryColumns.GRP.ToString)

                        End If

                        DataRow(MarketDetails_LengthSummaryColumns.GIMP.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryGrossImpressions.ToString)))

                        TotalGrossImpressions = 0
                        TotalDollars = 0

                        TotalGrossImpressions = DataRow(MarketDetails_LengthSummaryColumns.GIMP.ToString)
                        TotalDollars = DataRow(MarketDetails_LengthSummaryColumns.Cost.ToString)

                        If TotalGrossImpressions = 0 Then

                            DataRow(MarketDetails_LengthSummaryColumns.CPM.ToString) = 0

                        Else

                            DataRow(MarketDetails_LengthSummaryColumns.CPM.ToString) = (TotalDollars / TotalGrossImpressions) * 1000

                        End If

                        'If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                        '    DataRow(MarketDetails_LengthSummaryColumns.GRP.ToString) = CInt(DataRow(MarketDetails_LengthSummaryColumns.Spots.ToString)) * DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryRating.ToString)))

                        'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                        '    DataRow(MarketDetails_LengthSummaryColumns.GRP.ToString) = CInt(DataRow(MarketDetails_LengthSummaryColumns.Spots.ToString)) * DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryAQHRating.ToString)))

                        'End If

                        MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Rows.Add(DataRow)

                    Next

                    TotalCost = MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Rows.OfType(Of System.Data.DataRow).Select(Function(DR) CDec(DR(MarketDetails_LengthSummaryColumns.Cost.ToString))).Sum

                    TotalCostPercentage = 0

                    If TotalCost > 0 Then

                        For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                            CostPercentage = 0

                            CostPercentage = Math.Round(CDec(DataRow(MarketDetails_LengthSummaryColumns.Cost.ToString)) / TotalCost, 2)

                            DataRow(MarketDetails_LengthSummaryColumns.CostPercentageOfTotal.ToString) = CostPercentage

                            TotalCostPercentage += (CostPercentage * 100)

                        Next

                    End If

                    If TotalCostPercentage < 100 AndAlso TotalCostPercentage > 0 Then

                        Do Until TotalCostPercentage = 100

                            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) CDec(DR(MarketDetails_LengthSummaryColumns.Cost.ToString)))

                                DataRow(MarketDetails_LengthSummaryColumns.CostPercentageOfTotal.ToString) += 0.01

                                TotalCostPercentage += 1

                                If TotalCostPercentage = 100 Then

                                    Exit For

                                End If

                            Next

                        Loop

                    ElseIf TotalCostPercentage > 100 Then

                        Do Until TotalCostPercentage = 100

                            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) CDec(DR(MarketDetails_LengthSummaryColumns.Cost.ToString)))

                                DataRow(MarketDetails_LengthSummaryColumns.CostPercentageOfTotal.ToString) -= 0.01

                                TotalCostPercentage -= 1

                                If TotalCostPercentage = 100 Then

                                    Exit For

                                End If

                            Next

                        Loop

                    End If

                    MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.EndLoadData()

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedScheduleSummary = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.ScheduleSummaries.DaypartLength Then
                    '======
                    'Daypart \ Length Summary
                    '======
                    DaypartLengthDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable(True, MarketDetailsColumns.Daypart.ToString, MarketDetailsColumns.Length.ToString)

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.BeginLoadData()

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Clear()

                    For Each ItemDataRow In DaypartLengthDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.NewRow

                        Daypart = ItemDataRow(MarketDetailsColumns.Daypart.ToString)
                        Length = ItemDataRow(MarketDetailsColumns.Length.ToString)

                        DataRow(MarketDetails_DaypartLengthSummaryColumns.Daypart.ToString) = Daypart
                        DataRow(MarketDetails_DaypartLengthSummaryColumns.Length.ToString) = Length

                        DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                        Where CStr(DataRowView(MarketDetailsColumns.Daypart.ToString)) = Daypart AndAlso
                                              CInt(DataRowView(MarketDetailsColumns.Length.ToString)) = Length AndAlso
                                              CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                        Select DataRowView).ToList

                        DataRow(MarketDetails_DaypartLengthSummaryColumns.Spots.ToString) = DataRowViews.Sum(Function(DRW) CInt(DRW(MarketDetailsColumns.TotalSpots.ToString)))
                        DataRow(MarketDetails_DaypartLengthSummaryColumns.Cost.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.TotalDollars.ToString)))
                        DataRow(MarketDetails_DaypartLengthSummaryColumns.GRP.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryGRP.ToString)))

                        If DataRow(MarketDetails_DaypartLengthSummaryColumns.GRP.ToString) = 0 Then

                            DataRow(MarketDetails_DaypartLengthSummaryColumns.CPP.ToString) = 0

                        Else

                            DataRow(MarketDetails_DaypartLengthSummaryColumns.CPP.ToString) = DataRow(MarketDetails_DaypartLengthSummaryColumns.Cost.ToString) / DataRow(MarketDetails_DaypartLengthSummaryColumns.GRP.ToString)

                        End If

                        DataRow(MarketDetails_DaypartLengthSummaryColumns.GIMP.ToString) = DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryGrossImpressions.ToString)))

                        TotalGrossImpressions = 0
                        TotalDollars = 0

                        TotalGrossImpressions = DataRow(MarketDetails_DaypartLengthSummaryColumns.GIMP.ToString)
                        TotalDollars = DataRow(MarketDetails_DaypartLengthSummaryColumns.Cost.ToString)

                        If TotalGrossImpressions = 0 Then

                            DataRow(MarketDetails_DaypartLengthSummaryColumns.CPM.ToString) = 0

                        Else

                            DataRow(MarketDetails_DaypartLengthSummaryColumns.CPM.ToString) = (TotalDollars / TotalGrossImpressions) * 1000

                        End If

                        DataRow(MarketDetails_DaypartLengthSummaryColumns.Reach.ToString) = MarketDetails_CalculateReachForSummaryTables(DataRowViews, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType,
                                                                                                                                         MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket,
                                                                                                                                         MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates,
                                                                                                                                         Nothing, Date.MinValue)
                        DataRow(MarketDetails_DaypartLengthSummaryColumns.Frequency.ToString) = MarketDetails_CalculateFrequencyForSummaryTables(DataRow(MarketDetails_DaypartLengthSummaryColumns.GRP.ToString), DataRow(MarketDetails_DaypartLengthSummaryColumns.Reach.ToString))

                        'If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                        '    DataRow(MarketDetails_DaypartLengthSummaryColumns.GRP.ToString) = CInt(DataRow(MarketDetails_DaypartLengthSummaryColumns.Spots.ToString)) * DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryRating.ToString)))

                        'ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                        '    DataRow(MarketDetails_DaypartLengthSummaryColumns.GRP.ToString) = CInt(DataRow(MarketDetails_DaypartLengthSummaryColumns.Spots.ToString)) * DataRowViews.Sum(Function(DRW) CDec(DRW(MarketDetailsColumns.PrimaryAQHRating.ToString)))

                        'End If

                        If String.IsNullOrWhiteSpace(Daypart) AndAlso Length = 0 Then

                            If DataRow(MarketDetails_DaypartLengthSummaryColumns.Spots.ToString) <> 0 Then

                                MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Rows.Add(DataRow)

                            End If

                        Else

                            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Rows.Add(DataRow)

                        End If

                    Next

                    TotalCost = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Rows.OfType(Of System.Data.DataRow).Select(Function(DR) CDec(DR(MarketDetails_DaypartLengthSummaryColumns.Cost.ToString))).Sum

                    TotalCostPercentage = 0

                    If TotalCost > 0 Then

                        For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                            CostPercentage = 0

                            CostPercentage = Math.Round(CDec(DataRow(MarketDetails_DaypartLengthSummaryColumns.Cost.ToString)) / TotalCost, 2)

                            DataRow(MarketDetails_DaypartLengthSummaryColumns.CostPercentageOfTotal.ToString) = CostPercentage

                            TotalCostPercentage += (CostPercentage * 100)

                        Next

                    End If

                    If TotalCostPercentage < 100 AndAlso TotalCostPercentage > 0 Then

                        Do Until TotalCostPercentage = 100

                            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) CDec(DR(MarketDetails_DaypartLengthSummaryColumns.Cost.ToString)))

                                DataRow(MarketDetails_DaypartLengthSummaryColumns.CostPercentageOfTotal.ToString) += 0.01

                                TotalCostPercentage += 1

                                If TotalCostPercentage = 100 Then

                                    Exit For

                                End If

                            Next

                        Loop

                    ElseIf TotalCostPercentage > 100 Then

                        Do Until TotalCostPercentage = 100

                            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Rows.OfType(Of System.Data.DataRow).OrderByDescending(Function(DR) CDec(DR(MarketDetails_DaypartLengthSummaryColumns.Cost.ToString)))

                                DataRow(MarketDetails_DaypartLengthSummaryColumns.CostPercentageOfTotal.ToString) -= 0.01

                                TotalCostPercentage -= 1

                                If TotalCostPercentage = 100 Then

                                    Exit For

                                End If

                            Next

                        Loop

                    End If

                    MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.EndLoadData()

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedScheduleSummary = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.ScheduleSummaries.MarketMonthly Then

                    MarketDetails_LoadMarketMonthlyDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedScheduleSummary = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.ScheduleSummaries.StationMonthly Then

                    MarketDetails_LoadStationMonthlyDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)

                End If

            End If

        End Sub
        Private Sub MarketDetails_LoadMarketMonthlyDataTable(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim DataColumns As Generic.List(Of System.Data.DataColumn) = Nothing
            Dim BroadcastDate As Date = Date.MinValue
            Dim MediaCalendars As Generic.List(Of AdvantageFramework.Database.Entities.MediaCalendar) = Nothing
            Dim MediaCalendar As AdvantageFramework.Database.Entities.MediaCalendar = Nothing
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim BroadcastDetailDates As Generic.Dictionary(Of Date, Date) = Nothing

            DataColumns = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Columns.OfType(Of System.Data.DataColumn).Where(Function(DC) DC.ColumnName.StartsWith("Date")).ToList

            MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.BeginLoadData()

            If MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Count = 0 Then

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Spots"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GRP"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GIMP"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Cost"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Reach"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Worksheet"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Frequency"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Goals"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GRP"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Goals"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Cost"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Variance"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GRP"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Variance"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Cost"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Variance"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "GRP %"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)
                '====================================
                '====================================
                '====================================
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.NewRow()

                DataRow(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString) = "Variance"
                DataRow(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString) = "Cost %"

                For Each DataColumn In DataColumns

                    DataRow(DataColumn) = 0

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows.Add(DataRow)

            End If

            StartDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate
            EndDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.EndDate

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaCalendars = (From Entity In DbContext.MediaCalendars
                                  Where Entity.Date >= StartDate AndAlso
                                        Entity.Date <= EndDate
                                  Select Entity).ToList

                BroadcastDetailDates = New Generic.Dictionary(Of Date, Date)

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                    MediaCalendar = MediaCalendars.SingleOrDefault(Function(Entity) Entity.Date = DetailDate)

                    BroadcastDetailDates(DetailDate) = New Date(MediaCalendar.BroadcastYear, MediaCalendar.BroadcastMonth, 1)

                Next

            End Using

            MarketDetails_RefreshMarketMonthly_TotalSpots(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)
            MarketDetails_RefreshMarketMonthly_TotalRatings(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)
            MarketDetails_RefreshMarketMonthly_TotalImpressions(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)
            MarketDetails_RefreshMarketMonthly_TotalDollars(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)
            MarketDetails_RefreshMarketMonthly_TotalReach(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)
            MarketDetails_RefreshMarketMonthly_TotalFrequency(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)

            MarketDetails_RefreshMarketMonthly_GoalRatings(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)
            MarketDetails_RefreshMarketMonthly_GoalDollars(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)

            MarketDetails_RefreshMarketMonthly_VarianceRatings(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)
            MarketDetails_RefreshMarketMonthly_VarianceDollars(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)
            MarketDetails_RefreshMarketMonthly_VarianceRatingsPercent(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)
            MarketDetails_RefreshMarketMonthly_VarianceDollarsPercent(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumns, BroadcastDetailDates)

            MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.EndLoadData()

        End Sub
        Private Sub MarketDetails_LoadStationMonthlyDataTable(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim RateColumnName As String = String.Empty
            Dim DataColumns As Generic.List(Of System.Data.DataColumn) = Nothing
            Dim BroadcastDate As Date = Date.MinValue
            Dim MediaCalendars As Generic.List(Of AdvantageFramework.Database.Entities.MediaCalendar) = Nothing
            Dim MediaCalendar As AdvantageFramework.Database.Entities.MediaCalendar = Nothing
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim BroadcastDetailDates As Generic.Dictionary(Of Date, Date) = Nothing
            Dim StationDataTable As System.Data.DataTable = Nothing
            Dim Station As String = String.Empty
            Dim DataRowViews As Generic.List(Of System.Data.DataRowView) = Nothing
            Dim TotalGRP As Decimal = 0
            Dim TotalDollars As Decimal = 0
            Dim TotalGrossImpressions As Decimal = 0
            Dim GrandTotalGRP As Decimal = 0
            Dim GrandTotalDollars As Decimal = 0
            Dim GrandTotalGrossImpressions As Decimal = 0
            Dim ReachDataRow As System.Data.DataRow = Nothing
            Dim GRPDataRow As System.Data.DataRow = Nothing
            Dim SpotsDataRow As System.Data.DataRow = Nothing

            DataColumns = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Columns.OfType(Of System.Data.DataColumn).Where(Function(DC) DC.ColumnName.StartsWith("Date")).ToList

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.BeginLoadData()

            StartDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate
            EndDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.EndDate

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaCalendars = (From Entity In DbContext.MediaCalendars
                                  Where Entity.Date >= StartDate AndAlso
                                        Entity.Date <= EndDate
                                  Select Entity).ToList

                BroadcastDetailDates = New Generic.Dictionary(Of Date, Date)

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                    MediaCalendar = MediaCalendars.SingleOrDefault(Function(Entity) Entity.Date = DetailDate)

                    BroadcastDetailDates(DetailDate) = New Date(MediaCalendar.BroadcastYear, MediaCalendar.BroadcastMonth, 1)

                Next

            End Using

            StationDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable(True, MarketDetailsColumns.VendorName.ToString)

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.BeginLoadData()

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Clear()

            For Each ItemDataRow In StationDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                Station = ItemDataRow(MarketDetailsColumns.VendorName.ToString)

                DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                                Where CStr(DataRowView(MarketDetailsColumns.VendorName.ToString)) = Station AndAlso
                                      CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                                Select DataRowView).ToList
                '=====
                'COST
                '====
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "Cost"
                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                        If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                            RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                            DataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(RateColumnName)) * CDec(DRV(ColumnName)))

                        End If

                    Next

                    DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += DataRow(DataColumn)

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)
                '=====
                'GRP
                '====
                GRPDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                GRPDataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                GRPDataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "GRP"
                GRPDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                        If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                GRPDataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryRating.ToString)) * CDec(DRV(ColumnName)))

                            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                GRPDataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryAQHRating.ToString)) * CDec(DRV(ColumnName)))

                            End If

                        End If

                    Next

                    GRPDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += GRPDataRow(DataColumn)

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(GRPDataRow)
                '=====
                'CPP
                '====
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "CPP"
                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                GrandTotalDollars = 0
                GrandTotalGRP = 0

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    TotalGRP = 0
                    TotalDollars = 0

                    For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                        If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                            RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                            TotalDollars += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(RateColumnName)) * CDec(DRV(ColumnName)))

                            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                                TotalGRP += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryRating.ToString)) * CDec(DRV(ColumnName)))

                            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                TotalGRP += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryAQHRating.ToString)) * CDec(DRV(ColumnName)))

                            End If

                        End If

                    Next

                    GrandTotalDollars += TotalDollars
                    GrandTotalGRP += TotalGRP

                    If TotalGRP = 0 Then

                        DataRow(DataColumn) += 0

                    Else

                        DataRow(DataColumn) += (TotalDollars / TotalGRP)

                    End If

                    'DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += DataRow(DataColumn)

                Next

                If GrandTotalGRP = 0 Then

                    DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += 0

                Else

                    DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += (GrandTotalDollars / GrandTotalGRP)

                End If

                MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)
                '=====
                'GIMP
                '====
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "GIMP"
                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                        If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                DataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryAQH.ToString)) * CDec(DRV(ColumnName)))

                            Else

                                DataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryImpressions.ToString)) * CDec(DRV(ColumnName)))

                            End If

                        End If

                    Next

                    DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += DataRow(DataColumn)

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)
                '=====
                'CPM
                '====
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "CPM"
                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                GrandTotalDollars = 0
                GrandTotalGrossImpressions = 0

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    TotalDollars = 0
                    TotalGrossImpressions = 0

                    For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                        If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                            RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                            TotalDollars += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(RateColumnName)) * CDec(DRV(ColumnName)))

                            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                TotalGrossImpressions += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryAQH.ToString)) * CDec(DRV(ColumnName)))

                            Else

                                TotalGrossImpressions += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryImpressions.ToString)) * CDec(DRV(ColumnName)))

                            End If

                            'TotalGrossImpressions += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryImpressions.ToString)) * CDec(DRV(ColumnName)))

                        End If

                    Next

                    GrandTotalDollars += TotalDollars
                    GrandTotalGrossImpressions += TotalGrossImpressions

                    ' TotalGrossImpressions += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryGrossImpressions.ToString)))

                    If TotalGrossImpressions = 0 Then

                        DataRow(DataColumn) += 0

                    Else

                        DataRow(DataColumn) += (TotalDollars / TotalGrossImpressions) * 1000

                    End If

                    'DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += DataRow(DataColumn)

                Next

                If GrandTotalGrossImpressions = 0 Then

                    DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += 0

                Else

                    DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += (GrandTotalDollars / GrandTotalGrossImpressions) * 1000

                End If

                MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)
                '=====
                'SPOTS
                '====
                SpotsDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                SpotsDataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                SpotsDataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "Spots"
                SpotsDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                        If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            SpotsDataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(ColumnName)))

                        End If

                    Next

                    SpotsDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += SpotsDataRow(DataColumn)

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(SpotsDataRow)

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID <> Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then
                    '=====
                    'REACH
                    '====
                    ReachDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                    ReachDataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                    ReachDataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "Reach"
                    ReachDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                    For Each DataColumn In DataColumns

                        BroadcastDate = DataColumn.ExtendedProperties("Date")

                        If SpotsDataRow(DataColumn) > 0 Then

                            ReachDataRow(DataColumn) = MarketDetails_CalculateReachForSummaryTables(DataRowViews, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType,
                                                                                                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket,
                                                                                                MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates,
                                                                                                BroadcastDetailDates, BroadcastDate)

                        Else

                            ReachDataRow(DataColumn) = 0

                        End If

                    Next

                    ReachDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = MarketDetails_CalculateReachForSummaryTables(DataRowViews, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType,
                                                                                                                                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket,
                                                                                                                                        MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates,
                                                                                                                                        BroadcastDetailDates, Date.MinValue)

                    MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(ReachDataRow)
                    '=====
                    'FREQ
                    '====
                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                    DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                    DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "Frequency"
                    DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                    For Each DataColumn In DataColumns

                        BroadcastDate = DataColumn.ExtendedProperties("Date")

                        DataRow(DataColumn) = MarketDetails_CalculateFrequencyForSummaryTables(GRPDataRow(DataColumn), ReachDataRow(DataColumn))

                    Next

                    DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = MarketDetails_CalculateFrequencyForSummaryTables(GRPDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString), ReachDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString))

                    MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)

                End If

            Next
            '======
            'Totals Row
            '======
            Station = "Totals"

            DataRowViews = (From DataRowView As System.Data.DataRowView In MediaBroadcastWorksheetMarketDetailsViewModel.DataView
                            Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
                            Select DataRowView).ToList
            '=====
            'COST
            '====
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

            DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
            DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "Cost"
            DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                        RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                        DataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(RateColumnName)) * CDec(DRV(ColumnName)))

                    End If

                Next

                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += DataRow(DataColumn)

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)
            '=====
            'GRP
            '====
            GRPDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

            GRPDataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
            GRPDataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "GRP"
            GRPDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                            GRPDataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryRating.ToString)) * CDec(DRV(ColumnName)))

                        ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                            GRPDataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryAQHRating.ToString)) * CDec(DRV(ColumnName)))

                        End If

                    End If

                Next

                GRPDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += GRPDataRow(DataColumn)

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(GRPDataRow)
            '=====
            'CPP
            '====
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

            DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
            DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "CPP"
            DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

            GrandTotalDollars = 0
            GrandTotalGRP = 0

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                TotalGRP = 0
                TotalDollars = 0

                For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                        RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                        TotalDollars += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(RateColumnName)) * CDec(DRV(ColumnName)))

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                            TotalGRP += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryRating.ToString)) * CDec(DRV(ColumnName)))

                        ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                            TotalGRP += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryAQHRating.ToString)) * CDec(DRV(ColumnName)))

                        End If

                    End If

                Next

                GrandTotalDollars += TotalDollars
                GrandTotalGRP += TotalGRP

                If TotalGRP = 0 Then

                    DataRow(DataColumn) += 0

                Else

                    DataRow(DataColumn) += (TotalDollars / TotalGRP)

                End If

                ' DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += DataRow(DataColumn)

            Next

            If GrandTotalGRP = 0 Then

                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += 0

            Else

                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += (GrandTotalDollars / GrandTotalGRP)

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)
            '=====
            'GIMP
            '====
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

            DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
            DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "GIMP"
            DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                            DataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryAQH.ToString)) * CDec(DRV(ColumnName)))

                        Else

                            DataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryImpressions.ToString)) * CDec(DRV(ColumnName)))

                        End If

                    End If

                Next

                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += DataRow(DataColumn)

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)
            '=====
            'CPM
            '====
            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

            DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
            DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "CPM"
            DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

            GrandTotalDollars = 0
            GrandTotalGrossImpressions = 0

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                TotalDollars = 0
                TotalGrossImpressions = 0

                For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                        RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                        TotalDollars += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(RateColumnName)) * CDec(DRV(ColumnName)))
                        TotalGrossImpressions += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryImpressions.ToString)) * CDec(DRV(ColumnName)))

                    End If

                Next

                GrandTotalDollars += TotalDollars
                GrandTotalGrossImpressions += TotalGrossImpressions

                ' TotalGrossImpressions += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(MarketDetailsColumns.PrimaryGrossImpressions.ToString)))

                If TotalGrossImpressions = 0 Then

                    DataRow(DataColumn) += 0

                Else

                    DataRow(DataColumn) += (TotalDollars / TotalGrossImpressions) * 1000

                End If

                'DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += DataRow(DataColumn)

            Next

            If GrandTotalGrossImpressions = 0 Then

                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += 0

            Else

                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += (GrandTotalDollars / GrandTotalGrossImpressions) * 1000

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)
            '=====
            'SPOTS
            '====
            SpotsDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

            SpotsDataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
            SpotsDataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "Spots"
            SpotsDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                        SpotsDataRow(DataColumn) += DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DRV) CDec(DRV(ColumnName)))

                    End If

                Next

                SpotsDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) += SpotsDataRow(DataColumn)

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(SpotsDataRow)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID <> Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                '=====
                'REACH
                '====
                ReachDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                ReachDataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                ReachDataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "Reach"
                ReachDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    If SpotsDataRow(DataColumn) > 0 Then

                        ReachDataRow(DataColumn) = MarketDetails_CalculateReachForSummaryTables(DataRowViews, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType,
                                                                                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket,
                                                                                            MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates,
                                                                                            BroadcastDetailDates, BroadcastDate)

                    Else

                        ReachDataRow(DataColumn) = 0

                    End If

                Next

                ReachDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = MarketDetails_CalculateReachForSummaryTables(DataRowViews, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType,
                                                                                                                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket,
                                                                                                                                    MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates,
                                                                                                                                    BroadcastDetailDates, Date.MinValue)

                MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(ReachDataRow)
                '=====
                'FREQ
                '====
                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.NewRow

                DataRow(MarketDetails_StationMonthlySummaryColumns.Station.ToString) = Station
                DataRow(MarketDetails_StationMonthlySummaryColumns.DataType.ToString) = "Frequency"
                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = 0

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    DataRow(DataColumn) = MarketDetails_CalculateFrequencyForSummaryTables(GRPDataRow(DataColumn), ReachDataRow(DataColumn))

                Next

                DataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString) = MarketDetails_CalculateFrequencyForSummaryTables(GRPDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString), ReachDataRow(MarketDetails_StationMonthlySummaryColumns.Totals.ToString))

                MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Rows.Add(DataRow)

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.EndLoadData()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_TotalSpots(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                  DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim BroadcastDate As Date = Date.MinValue

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalSpots)

            DataRow.BeginEdit()

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                DataRow(DataColumn) = 0

                For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                        DataRow(DataColumn) += FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Sum(Function(DR) CDec(DR(ColumnName)))

                    End If

                Next

            Next

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_TotalRatings(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                    DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim BroadcastDate As Date = Date.MinValue

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalRatings)

            DataRow.BeginEdit()

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    DataRow(DataColumn) = 0

                    For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                        If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                                DataRow(DataColumn) += (DataTableDataRow(MarketDetailsColumns.PrimaryRating.ToString) * CDec(DataTableDataRow(ColumnName)))

                            Next

                        End If

                    Next

                Next

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                For Each DataColumn In DataColumns

                    BroadcastDate = DataColumn.ExtendedProperties("Date")

                    DataRow(DataColumn) = 0

                    For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                        If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                            ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                            For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                                DataRow(DataColumn) += (DataTableDataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) * CDec(DataTableDataRow(ColumnName)))

                            Next

                        End If

                    Next

                Next

            End If

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_TotalImpressions(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                        DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim BroadcastDate As Date = Date.MinValue

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalImpressions)

            DataRow.BeginEdit()

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                DataRow(DataColumn) = 0

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                        For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                                DataRow(DataColumn) += (DataTableDataRow(MarketDetailsColumns.PrimaryAQH.ToString) * CDec(DataTableDataRow(ColumnName)))

                            Else

                                DataRow(DataColumn) += (DataTableDataRow(MarketDetailsColumns.PrimaryImpressions.ToString) * CDec(DataTableDataRow(ColumnName)))

                            End If

                        Next

                    End If

                Next

            Next

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_TotalDollars(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                    DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim RateColumnName As String = String.Empty
            Dim RateAmount As Decimal = 0
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim BroadcastDate As Date = Date.MinValue

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalDollars)

            DataRow.BeginEdit()

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                DataRow(DataColumn) = 0

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                        ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)
                        RateColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)

                        For Each DataTableDataRow In FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False)

                            RateAmount = DataTableDataRow(RateColumnName)

                            DataRow(DataColumn) += (RateAmount * CDec(DataTableDataRow(ColumnName)))

                        Next

                    End If

                Next

            Next

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_TotalReach(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                  DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim BroadcastDate As Date = Date.MinValue
            Dim DataRowViews As Generic.List(Of System.Data.DataRowView) = Nothing

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalReach)

            DataRowViews = FilteredDataTable.AsDataView.OfType(Of System.Data.DataRowView).Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).ToList

            DataRow.BeginEdit()

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                DataRow(DataColumn) = 0

                DataRow(DataColumn) = MarketDetails_CalculateReachForSummaryTables(DataRowViews, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket, MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates, BroadcastDetailDates, BroadcastDate)

                If MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalSpots)(DataColumn.ColumnName) = 0 Then

                    DataRow(DataColumn) = 0

                End If

            Next

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_TotalFrequency(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                      DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            'Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim BroadcastDate As Date = Date.MinValue
            Dim ReachDataRow As System.Data.DataRow = Nothing
            Dim GRPDataRow As System.Data.DataRow = Nothing
            'Dim DataRowViews As Generic.List(Of System.Data.DataRowView) = Nothing

            'FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalFrequency)
            ReachDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalReach)
            GRPDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalRatings)

            'DataRowViews = FilteredDataTable.AsDataView.OfType(Of System.Data.DataRowView).Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).ToList

            DataRow.BeginEdit()

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                DataRow(DataColumn) = 0

                DataRow(DataColumn) = MarketDetails_CalculateFrequencyForSummaryTables(GRPDataRow(DataColumn), ReachDataRow(DataColumn))

            Next

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_GoalRatings(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                   DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim CPP As Decimal = 0
            Dim MediaBroadcastWorksheetMarketGoalIDs() As Integer = Nothing
            Dim MediaBroadcastWorksheetMarketGoals As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal) = Nothing
            Dim MediaBroadcastWorksheetMarketGoalDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate) = Nothing
            Dim WorksheetMarketID As Integer = 0
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim DaypartCodes As Generic.List(Of String) = Nothing
            Dim DaypartIDLists As Generic.List(Of Integer) = Nothing
            Dim DaypartIDs() As Integer = Nothing
            Dim Lengths() As Short = Nothing
            Dim HasDaypartFilter As Boolean = False
            Dim HasLengthFilter As Boolean = False
            Dim BroadcastDate As Date = Date.MinValue

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)

            DataRow.BeginEdit()

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                If MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket Then

                    WorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

                    If MediaBroadcastWorksheetMarketDetailsViewModel.FilterString.Contains("[" & MarketDetailsColumns.Daypart.ToString & "]") Then

                        HasDaypartFilter = True

                        DaypartCodes = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Select(Function(DR) CStr(DR(MarketDetailsColumns.Daypart.ToString))).Distinct.ToList

                        DaypartIDLists = MediaBroadcastWorksheetMarketDetailsViewModel.Dayparts.Where(Function(Entity) DaypartCodes.Contains(Entity.Code)).Select(Function(Entity) Entity.ID).Distinct.ToList

                        If DaypartCodes.Contains(String.Empty) Then

                            DaypartIDLists.Add(0)

                        End If

                        DaypartIDs = DaypartIDLists.ToArray

                    Else

                        DaypartIDs = New Integer() {}

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.FilterString.Contains("[" & MarketDetailsColumns.Length.ToString & "]") Then

                        HasLengthFilter = True

                        Lengths = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Select(Function(DR) CShort(DR(MarketDetailsColumns.Length.ToString))).Distinct.ToArray

                    Else

                        Lengths = New Short() {}

                    End If

                    MediaBroadcastWorksheetMarketGoals = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).ToList

                    If HasDaypartFilter Then

                        MediaBroadcastWorksheetMarketGoals = MediaBroadcastWorksheetMarketGoals.Where(Function(Entity) DaypartIDs.Contains(Entity.DaypartID.GetValueOrDefault(0))).ToList

                    End If

                    If HasLengthFilter Then

                        MediaBroadcastWorksheetMarketGoals = MediaBroadcastWorksheetMarketGoals.Where(Function(Entity) Lengths.Contains(Entity.Length)).ToList

                    End If

                    MediaBroadcastWorksheetMarketGoalIDs = MediaBroadcastWorksheetMarketGoals.Select(Function(Entity) Entity.ID).ToArray

                    MediaBroadcastWorksheetMarketGoalDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoalDate.Load(DbContext).Where(Function(Entity) MediaBroadcastWorksheetMarketGoalIDs.Contains(Entity.MediaBroadcastWorksheetMarketGoalID) = True).ToList

                    For Each DataColumn In DataColumns

                        BroadcastDate = DataColumn.ExtendedProperties("Date")

                        DataRow(DataColumn) = 0

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                            If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                                DataRow(DataColumn) += MediaBroadcastWorksheetMarketGoalDates.Where(Function(Entity) Entity.Date = DetailDate).Select(Function(Entity) Entity.GRP).Sum

                            End If

                        Next

                    Next

                Else

                    For Each DataColumn In DataColumns

                        BroadcastDate = DataColumn.ExtendedProperties("Date")

                        DataRow(DataColumn) = 0

                    Next

                End If

            End Using

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_GoalDollars(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                   DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim CPP As Decimal = 0
            Dim MediaBroadcastWorksheetMarketGoals As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoal) = Nothing
            Dim WorksheetMarketID As Integer = 0
            Dim FilteredDataTable As System.Data.DataTable = Nothing
            Dim DaypartCodes As Generic.List(Of String) = Nothing
            Dim DaypartIDLists As Generic.List(Of Integer) = Nothing
            Dim DaypartIDs() As Integer = Nothing
            Dim Lengths() As Short = Nothing
            Dim HasDaypartFilter As Boolean = False
            Dim HasLengthFilter As Boolean = False
            Dim MediaBroadcastWorksheetMarketGoalDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate = Nothing
            Dim BroadcastDate As Date = Date.MinValue

            FilteredDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataView.ToTable()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)

            DataRow.BeginEdit()

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                If MediaBroadcastWorksheetMarketDetailsViewModel.HasASelectedWorksheetMarket Then

                    WorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

                    If MediaBroadcastWorksheetMarketDetailsViewModel.FilterString.Contains("[" & MarketDetailsColumns.Daypart.ToString & "]") Then

                        HasDaypartFilter = True

                        DaypartCodes = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Select(Function(DR) CStr(DR(MarketDetailsColumns.Daypart.ToString))).Distinct.ToList

                        DaypartIDLists = MediaBroadcastWorksheetMarketDetailsViewModel.Dayparts.Where(Function(Entity) DaypartCodes.Contains(Entity.Code)).Select(Function(Entity) Entity.ID).Distinct.ToList

                        If DaypartCodes.Contains(String.Empty) Then

                            DaypartIDLists.Add(0)

                        End If

                        DaypartIDs = DaypartIDLists.ToArray

                    Else

                        DaypartIDs = New Integer() {}

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.FilterString.Contains("[" & MarketDetailsColumns.Length.ToString & "]") Then

                        HasLengthFilter = True

                        Lengths = FilteredDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CBool(DR(MarketDetailsColumns.OnHold.ToString)) = False).Select(Function(DR) CShort(DR(MarketDetailsColumns.Length.ToString))).Distinct.ToArray

                    Else

                        Lengths = New Short() {}

                    End If

                    MediaBroadcastWorksheetMarketGoals = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Include("MediaBroadcastWorksheetMarketGoalDates").
                                                                                                                                      Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).ToList

                    If HasDaypartFilter Then

                        MediaBroadcastWorksheetMarketGoals = MediaBroadcastWorksheetMarketGoals.Where(Function(Entity) DaypartIDs.Contains(Entity.DaypartID.GetValueOrDefault(0))).ToList

                    End If

                    If HasLengthFilter Then

                        MediaBroadcastWorksheetMarketGoals = MediaBroadcastWorksheetMarketGoals.Where(Function(Entity) Lengths.Contains(Entity.Length)).ToList

                    End If

                    For Each DataColumn In DataColumns

                        BroadcastDate = DataColumn.ExtendedProperties("Date")

                        DataRow(DataColumn) = 0

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                            If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                                For Each MediaBroadcastWorksheetMarketGoal In MediaBroadcastWorksheetMarketGoals

                                    CPP = MediaBroadcastWorksheetMarketGoal.CPP

                                    If MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.Any(Function(Entity) Entity.Date = DetailDate) Then

                                        MediaBroadcastWorksheetMarketGoalDate = MediaBroadcastWorksheetMarketGoal.MediaBroadcastWorksheetMarketGoalDates.SingleOrDefault(Function(Entity) Entity.Date = DetailDate)

                                        If MediaBroadcastWorksheetMarketGoalDate IsNot Nothing Then

                                            If MediaBroadcastWorksheetMarketGoal.WasRateImported Then

                                                DataRow(DataColumn) += (MediaBroadcastWorksheetMarketGoalDate.Rate * MediaBroadcastWorksheetMarketGoalDate.GRP)

                                            Else

                                                DataRow(DataColumn) += (CPP * MediaBroadcastWorksheetMarketGoalDate.GRP)

                                            End If

                                        End If

                                    End If

                                Next

                            End If

                        Next

                    Next

                Else

                    For Each DataColumn In DataColumns

                        BroadcastDate = DataColumn.ExtendedProperties("Date")

                        DataRow(DataColumn) = 0

                    Next

                End If

            End Using

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_VarianceRatings(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                       DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim BroadcastDate As Date = Date.MinValue

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.VarianceRatings)

            DataRow.BeginEdit()

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                DataRow(DataColumn) = 0

                DataRow(DataColumn) = (MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalRatings)(DataColumn) - MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)(DataColumn))

            Next

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_VarianceDollars(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                       DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim BroadcastDate As Date = Date.MinValue

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.VarianceDollars)

            DataRow.BeginEdit()

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                DataRow(DataColumn) = 0

                DataRow(DataColumn) = (MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalDollars)(DataColumn) - MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)(DataColumn))

            Next

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_VarianceRatingsPercent(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                              DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim BroadcastDate As Date = Date.MinValue

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.VarianceRatingsPercent)

            DataRow.BeginEdit()

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                DataRow(DataColumn) = 0

                If MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)(DataColumn) = 0 Then

                    DataRow(DataColumn) = 0

                Else

                    DataRow(DataColumn) = (MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalRatings)(DataColumn) / MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.GoalRatings)(DataColumn))

                End If

            Next

            DataRow.EndEdit()

        End Sub
        Private Sub MarketDetails_RefreshMarketMonthly_VarianceDollarsPercent(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                              DataColumns As Generic.List(Of System.Data.DataColumn), BroadcastDetailDates As Generic.Dictionary(Of Date, Date))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = String.Empty
            Dim BroadcastDate As Date = Date.MinValue

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.VarianceDollarsPercent)

            DataRow.BeginEdit()

            For Each DataColumn In DataColumns

                BroadcastDate = DataColumn.ExtendedProperties("Date")

                DataRow(DataColumn) = 0

                If MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)(DataColumn) = 0 Then

                    DataRow(DataColumn) += 0

                Else

                    DataRow(DataColumn) = (MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.TotalDollars)(DataColumn) / MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Rows(MarketDetails_RowTotalRows.GoalDollars)(DataColumn))

                End If

            Next

            DataRow.EndEdit()

        End Sub
        Private Function MarketDetails_CalculateReachForSummaryTables(DataRowViews As Generic.List(Of System.Data.DataRowView),
                                                                      MediaType As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes,
                                                                      WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket,
                                                                      DetailDates As Hashtable,
                                                                      BroadcastDetailDates As Generic.Dictionary(Of Date, Date),
                                                                      BroadcastDate As Date) As Double

            'objects
            Dim ReachTotal As Double = 0
            Dim CumeImpressionsValues As Generic.List(Of Long) = Nothing
            Dim CumesValues As Generic.List(Of Long) = Nothing
            Dim AllReachValuesList As Generic.List(Of Double) = Nothing
            Dim AllReachValues() As Double = Nothing
            Dim TotalSpots As Integer = 0
            Dim Impressions As Long = 0
            Dim RowSpots As Integer = 0
            Dim TotalImpressions As Long = 0
            Dim TotalSpotImpressions As Long = 0
            Dim TotalRating As Decimal = 0
            Dim Universe As Long = 0
            Dim TotalAQH As Long = 0
            Dim AQH As Long = 0
            Dim BookRating As Decimal = 0

            If MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If WorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 AndAlso
                        DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Any(Function(DRV) DRV(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) <> 0 OrElse
                                                                                                                                     (IsDBNull(DRV(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False AndAlso
                                                                                                                                      DRV(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) <> 0)) Then

                    CumeImpressionsValues = DataRowViews.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.PrimaryCumeImpressions.ToString))).Distinct.ToList

                Else

                    CumeImpressionsValues = New Generic.List(Of Long)

                End If

                AllReachValuesList = New Generic.List(Of Double)

                If CumeImpressionsValues.Count > 0 Then

                    For Each CumeInpression In CumeImpressionsValues

                        TotalSpots = 0
                        TotalImpressions = 0
                        TotalRating = 0
                        TotalSpotImpressions = 0
                        Universe = 0

                        For Each DataRowView In DataRowViews.Where(Function(DRV) CumeInpression = CLng(DRV(MarketDetailsColumns.PrimaryCumeImpressions.ToString)))

                            RowSpots = 0
                            Impressions = CLng(DataRowView(MarketDetailsColumns.PrimaryImpressions.ToString))

                            TotalImpressions = Impressions
                            TotalRating += CDec(DataRowView(MarketDetailsColumns.PrimaryRating.ToString))

                            If Universe = 0 Then

                                Universe = CLng(DataRowView(MarketDetailsColumns.PrimaryUniverse.ToString))

                            End If

                            If BroadcastDate <> Date.MinValue Then

                                For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                                        RowSpots += CInt(DataRowView(DetailDates(DetailDate)))

                                    End If

                                Next

                            Else

                                For Each DetailDate In DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                                    RowSpots += CInt(DataRowView(DetailDates(DetailDate)))

                                Next

                            End If

                            TotalSpots = RowSpots

                            TotalSpotImpressions += (Impressions * RowSpots)

                            BookRating = CDec(DataRowView(MarketDetailsColumns.BookPrimaryRating.ToString))

                            If CumeInpression < Impressions Then

                                AllReachValuesList.Add(CalculateCumlessReach(CDec(DataRowView(MarketDetailsColumns.PrimaryRating.ToString)), TotalSpots))

                            Else

                                AllReachValuesList.Add(CalculateTVReach(Impressions, CumeInpression, RowSpots, Universe, CDec(DataRowView(MarketDetailsColumns.PrimaryRating.ToString)), BookRating))

                            End If

                        Next

                    Next

                ElseIf DataRowViews IsNot Nothing AndAlso DataRowViews.Count > 0 Then

                    For Each DataRowView In DataRowViews

                        RowSpots = 0

                        If BroadcastDate <> Date.MinValue Then

                            For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                                If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                                    RowSpots += CInt(DataRowView(DetailDates(DetailDate)))

                                End If

                            Next

                        Else

                            RowSpots = DataRowView(MarketDetailsColumns.TotalSpots.ToString)

                        End If

                        AllReachValuesList.Add(CalculateTVReach(DataRowView(MarketDetailsColumns.PrimaryImpressions.ToString), DataRowView(MarketDetailsColumns.PrimaryCumeImpressions.ToString),
                                                                RowSpots, DataRowView(MarketDetailsColumns.PrimaryUniverse.ToString),
                                                                DataRowView(MarketDetailsColumns.PrimaryRating.ToString), DataRowView(MarketDetailsColumns.BookPrimaryRating.ToString)))

                    Next

                End If

                AllReachValues = AllReachValuesList.ToArray

            ElseIf MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If WorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 AndAlso
                        DataRowViews.Where(Function(DRV) CBool(DRV(MarketDetailsColumns.OnHold.ToString)) = False).Any(Function(DRV) DRV(MarketDetailsColumns.VendorRadioStationComboID.ToString) <> 0) Then

                    CumesValues = DataRowViews.Select(Function(DRV) CLng(DRV(MarketDetailsColumns.PrimaryCume.ToString))).Distinct.ToList

                Else

                    CumesValues = New Generic.List(Of Long)

                End If

                AllReachValuesList = New Generic.List(Of Double)

                If CumesValues.Count > 0 Then

                    For Each Cume In CumesValues

                        TotalSpots = 0
                        TotalAQH = 0
                        TotalRating = 0
                        TotalSpotImpressions = 0
                        Universe = 0

                        For Each DataRowView In DataRowViews.Where(Function(DRV) Cume = CLng(DRV(MarketDetailsColumns.PrimaryCume.ToString)))

                            RowSpots = 0
                            AQH = CLng(DataRowView(MarketDetailsColumns.PrimaryAQH.ToString))

                            TotalAQH += AQH
                            TotalRating += CDec(DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString))
                            Universe = CLng(DataRowView(MarketDetailsColumns.PrimaryUniverse.ToString))

                            If BroadcastDate <> Date.MinValue Then

                                For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                                    If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                                        RowSpots += CInt(DataRowView(DetailDates(DetailDate)))

                                    End If

                                Next

                            Else

                                For Each DetailDate In DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                                    RowSpots += CInt(DataRowView(DetailDates(DetailDate)))

                                Next

                            End If

                            TotalSpots += RowSpots

                            TotalSpotImpressions += (AQH * RowSpots)

                            BookRating = CDec(DataRowView(MarketDetailsColumns.BookPrimaryAQHRating.ToString))

                            If Cume < AQH Then

                                AllReachValuesList.Add(CalculateCumlessReach(CDec(DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString)), TotalSpots))

                            Else

                                AllReachValuesList.Add(CalculateRadioReach(AQH, Cume, RowSpots, Universe, CDec(DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString)), BookRating))

                            End If

                        Next

                    Next

                ElseIf DataRowViews IsNot Nothing AndAlso DataRowViews.Count > 0 Then

                    For Each DataRowView In DataRowViews

                        RowSpots = 0

                        If BroadcastDate <> Date.MinValue Then

                            For Each DetailDate In BroadcastDetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                                If BroadcastDate = BroadcastDetailDates(DetailDate) Then

                                    RowSpots += CInt(DataRowView(DetailDates(DetailDate)))

                                End If

                            Next

                        Else

                            RowSpots = DataRowView(MarketDetailsColumns.TotalSpots.ToString)

                        End If

                        AllReachValuesList.Add(CalculateRadioReach(DataRowView(MarketDetailsColumns.PrimaryAQH.ToString), DataRowView(MarketDetailsColumns.PrimaryCume.ToString),
                                                                   RowSpots, DataRowView(MarketDetailsColumns.PrimaryUniverse.ToString),
                                                                   DataRowView(MarketDetailsColumns.PrimaryAQHRating.ToString), DataRowView(MarketDetailsColumns.BookPrimaryAQHRating.ToString)))

                    Next

                End If

                AllReachValues = AllReachValuesList.ToArray

            End If

            If AllReachValues.Length > 2 Then

                ReachTotal = (AllReachValues(0) + AllReachValues(1)) - (AllReachValues(0) * AllReachValues(1))

                ReachTotal = Math.Round(ReachTotal, 3)

                For ReachValueIndex As Integer = 2 To AllReachValues.Length - 1

                    ReachTotal = (ReachTotal + AllReachValues(ReachValueIndex)) - (ReachTotal * AllReachValues(ReachValueIndex))

                    ReachTotal = Math.Round(ReachTotal, 3)

                Next

            ElseIf AllReachValues.Length = 2 Then

                ReachTotal = (AllReachValues(0) + AllReachValues(1)) - (AllReachValues(0) * AllReachValues(1))

                ReachTotal = Math.Round(ReachTotal, 3)

            ElseIf AllReachValues.Length = 1 Then

                ReachTotal = AllReachValues(0)

            End If

            If Double.IsNaN(ReachTotal) Then

                ReachTotal = 0

            End If

            MarketDetails_CalculateReachForSummaryTables = ReachTotal

        End Function
        Private Function MarketDetails_CalculateFrequencyForSummaryTables(GRP As Double, Reach As Double) As Double

            'objects
            Dim FrequencyTotal As Double = 0
            'Dim GRP As Double = 0

            'GRP = (From DataRowView In DataRowViews
            '       Where CBool(DataRowView(MarketDetailsColumns.OnHold.ToString)) = False
            '       Select CDbl(DataRowView(MarketDetailsColumns.PrimaryGRP.ToString))).Sum()

            If Reach = 0 Then

                FrequencyTotal = 0

            Else

                FrequencyTotal = GRP / (Reach * 100)

            End If

            If Double.IsNaN(FrequencyTotal) Then

                FrequencyTotal = 0

            End If

            MarketDetails_CalculateFrequencyForSummaryTables = FrequencyTotal

        End Function
        Private Sub MarketDetails_CreateSummaryDataTablesDefaultSchema(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim DetailDate As Date = Date.MinValue
            Dim MediaCalendars As Generic.List(Of AdvantageFramework.Database.Entities.MediaCalendar) = Nothing
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim BroadcastMonths As Generic.List(Of Date) = Nothing
            Dim BroadcastMonth As Date = Date.MinValue

            StartDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate
            EndDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.EndDate

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaCalendars = (From Entity In DbContext.MediaCalendars
                                  Where Entity.Date >= StartDate AndAlso
                                        Entity.Date <= EndDate
                                  Select Entity).ToList

            End Using

            BroadcastMonths = New Generic.List(Of Date)

            For Each MediaCalendar In MediaCalendars

                BroadcastMonth = New Date(MediaCalendar.BroadcastYear, MediaCalendar.BroadcastMonth, 1)

                If BroadcastMonths.Contains(BroadcastMonth) = False Then

                    BroadcastMonths.Add(BroadcastMonth)

                End If

            Next

            '======
            'Daypart Summary
            '======
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.ID.ToString)

            DataColumn.DataType = GetType(Integer)
            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.Daypart.ToString, GetType(String))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.Spots.ToString, GetType(Integer))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.Cost.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.CostPercentageOfTotal.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.GRP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.CPP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.GIMP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.PercentOfTotalGIMP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.CPM.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.Budget.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.GoalGRP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.PercentOfBudget.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.PercentOfGRP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.Reach.ToString, GetType(Double))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartSummaryDataTable.Columns.Add(MarketDetails_DaypartSummaryColumns.Frequency.ToString, GetType(Double))

            '======
            'Daypart Weekly\Daily Summary
            '======
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.Columns.Add(MarketDetails_DaypartWeeklyDailySummaryColumns.ID.ToString)

            DataColumn.DataType = GetType(Integer)
            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.Columns.Add(MarketDetails_DaypartWeeklyDailySummaryColumns.Daypart.ToString, GetType(String))

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.Columns.Add(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate), GetType(Decimal))

                DataColumn.ExtendedProperties.Add("Date", DetailDate)

                DataColumn.Caption = DetailDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Decimal)
                DataColumn.DefaultValue = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartWeeklyDailySummaryDataTable.Columns.Add(MarketDetails_DaypartWeeklyDailySummaryColumns.Totals.ToString, GetType(Decimal))

            '======
            'Daypart GRP Weekly\Daily Summary
            '======
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.Columns.Add(MarketDetails_DaypartGRPWeeklyDailySummaryColumns.ID.ToString)

            DataColumn.DataType = GetType(Integer)
            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.Columns.Add(MarketDetails_DaypartGRPWeeklyDailySummaryColumns.Daypart.ToString, GetType(String))

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.Columns.Add(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate), GetType(Decimal))

                DataColumn.ExtendedProperties.Add("Date", DetailDate)

                DataColumn.Caption = DetailDate.ToString("MM/dd")

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Decimal)
                DataColumn.DefaultValue = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartGRPWeeklyDailySummaryDataTable.Columns.Add(MarketDetails_DaypartGRPWeeklyDailySummaryColumns.Totals.ToString, GetType(Decimal))

            '======
            'Station Summary
            '======
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.ID.ToString)

            DataColumn.DataType = GetType(Integer)
            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False

            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}

            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.Station.ToString, GetType(String))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.Spots.ToString, GetType(Integer))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.Cost.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.CostPercentageOfTotal.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.GRP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.CPP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.GIMP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.CPM.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.Reach.ToString, GetType(Double))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationSummaryDataTable.Columns.Add(MarketDetails_StationSummaryColumns.Frequency.ToString, GetType(Double))

            '======
            'Length Summary
            '======
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Columns.Add(MarketDetails_LengthSummaryColumns.ID.ToString)

            DataColumn.DataType = GetType(Integer)
            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False

            MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}

            MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Columns.Add(MarketDetails_LengthSummaryColumns.Length.ToString, GetType(String))
            MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Columns.Add(MarketDetails_LengthSummaryColumns.Spots.ToString, GetType(Integer))
            MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Columns.Add(MarketDetails_LengthSummaryColumns.Cost.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Columns.Add(MarketDetails_LengthSummaryColumns.CostPercentageOfTotal.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Columns.Add(MarketDetails_LengthSummaryColumns.GRP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Columns.Add(MarketDetails_LengthSummaryColumns.CPP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Columns.Add(MarketDetails_LengthSummaryColumns.GIMP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.LengthSummaryDataTable.Columns.Add(MarketDetails_LengthSummaryColumns.CPM.ToString, GetType(Decimal))

            '======
            'Daypart \ Length Summary
            '======
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.ID.ToString)

            DataColumn.DataType = GetType(Integer)
            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}

            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.Daypart.ToString, GetType(String))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.Length.ToString, GetType(String))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.Spots.ToString, GetType(Integer))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.Cost.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.CostPercentageOfTotal.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.GRP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.CPP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.GIMP.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.CPM.ToString, GetType(Decimal))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.Reach.ToString, GetType(Double))
            MediaBroadcastWorksheetMarketDetailsViewModel.DaypartLengthSummaryDataTable.Columns.Add(MarketDetails_DaypartLengthSummaryColumns.Frequency.ToString, GetType(Double))

            '======
            'Market Monthly Summary
            '======
            MarketDetails_CreateMarketMonthlyDataTableDefaultSchema(MediaBroadcastWorksheetMarketDetailsViewModel, BroadcastMonths)

            '======
            'Station Monthly Summary
            '======
            MarketDetails_CreateStationMonthlyDataTableDefaultSchema(MediaBroadcastWorksheetMarketDetailsViewModel, BroadcastMonths)

        End Sub
        Private Sub MarketDetails_CreateMarketMonthlyDataTableDefaultSchema(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                            BroadcastMonths As Generic.List(Of Date))

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim DetailDate As Date = Date.MinValue

            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Columns.Add(MarketDetails_RowTotalColumns.ID.ToString)

            DataColumn.DataType = GetType(Integer)
            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False

            MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}

            MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Columns.Add(MarketDetails_RowTotalColumns.RowTotalsGroup.ToString, GetType(String))
            MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Columns.Add(MarketDetails_RowTotalColumns.RowTotalsDescription.ToString, GetType(String))

            For Each BroadcastMonth In BroadcastMonths

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MarketMonthlySummaryDataTable.Columns.Add("Date" & BroadcastMonths.IndexOf(BroadcastMonth), GetType(Decimal))

                DataColumn.ExtendedProperties.Add("Date", BroadcastMonth)

                DataColumn.Caption = BroadcastMonth.ToString("MM/yyyy")

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Decimal)
                DataColumn.DefaultValue = 0

            Next

        End Sub
        Private Sub MarketDetails_CreateStationMonthlyDataTableDefaultSchema(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                             BroadcastMonths As Generic.List(Of Date))

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim DetailDate As Date = Date.MinValue

            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Columns.Add(MarketDetails_StationMonthlySummaryColumns.ID.ToString)

            DataColumn.DataType = GetType(Integer)
            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Columns.Add(MarketDetails_StationMonthlySummaryColumns.Station.ToString, GetType(String))
            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Columns.Add(MarketDetails_StationMonthlySummaryColumns.DataType.ToString, GetType(String))

            For Each BroadcastMonth In BroadcastMonths

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Columns.Add("Date" & BroadcastMonths.IndexOf(BroadcastMonth), GetType(Decimal))

                DataColumn.ExtendedProperties.Add("Date", BroadcastMonth)

                DataColumn.Caption = BroadcastMonth.ToString("MM/yyyy")

                DataColumn.AllowDBNull = False
                DataColumn.DataType = GetType(Decimal)
                DataColumn.DefaultValue = 0

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.StationMonthlySummaryDataTable.Columns.Add(MarketDetails_StationMonthlySummaryColumns.Totals.ToString, GetType(Decimal))

        End Sub
        Private Sub MarketDetails_LoadNielsenTVBooks(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketTrendNielsenTVBooks = GetNielsenTVBooks(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketCode,
                                                                                                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode,
                                                                                                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable,
                                                                                                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID)

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks = GetNielsenTVBooks(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketCode,
                                                                                                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode,
                                                                                                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable,
                                                                                                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID)

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks = GetComscoreTVBooks()

                End If

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks = New List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook)

            End If

        End Sub
        Private Sub MarketDetails_LoadNielsenRadioPeriods(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim NielsenRadioController As AdvantageFramework.Controller.Media.NielsenRadioController = Nothing
            Dim NielsenRadioMarketNumber As Integer = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.All AndAlso
                            String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode) = False Then

                        NielsenRadioMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Black AndAlso
                            String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenBlackRadioCode) = False Then

                        NielsenRadioMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenBlackRadioCode

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Hispanic AndAlso
                            String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenHispanicRadioCode) = False Then

                        NielsenRadioMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenHispanicRadioCode

                    End If

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.All AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanRadioCode.HasValue Then

                        NielsenRadioMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanRadioCode

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Black AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanBlackRadioCode.HasValue Then

                        NielsenRadioMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanBlackRadioCode

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Hispanic AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanHispanicRadioCode.HasValue Then

                        NielsenRadioMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanHispanicRadioCode

                    End If

                End If

                If NielsenRadioMarketNumber > 0 Then

                    NielsenRadioController = New AdvantageFramework.Controller.Media.NielsenRadioController(Me.Session)

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(NielsenRadioMarketNumber,
                                                                                                                                                      MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID,
                                                                                                                                                      MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID,
                                                                                                                                                      New Generic.List(Of Integer),
                                                                                                                                                      MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioPeriods = New List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

                End If

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioPeriods = New List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            End If

        End Sub
        Private Sub MarketDetails_LoadPrimaryNielsenRatingAndShareData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                       RowIndexes As Generic.List(Of Integer))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NielsenMarketNumber As Integer = 0
            Dim BookIDs As Generic.List(Of String) = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaDemographicID As Integer = 0
            Dim NielsenTVStationCode As Integer = 0
            Dim CableNetworkStationID As Integer = 0
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim NielsenTVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.NielsenTVWorksheetRatingAndShareData) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim NielsenRadioStationComboID As Integer = 0
            Dim NielsenRadioStationComboIDs() As String = Nothing
            Dim RadioWorksheetRatingDatas As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim RowIndexesToRun As Generic.Dictionary(Of String, Generic.List(Of Integer)) = Nothing
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim IsAgencyASP As Boolean = False
            Dim VendorRadioStationComboIDs As Generic.List(Of Integer) = Nothing
            Dim RadioDemoDataInfos As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo) = Nothing
            Dim RadioDemoDataInfo As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo = Nothing
            Dim ComboReach As Double = 0
            Dim ComboReachValues As Generic.List(Of Double) = Nothing
            Dim RadioStationComboReachValues As Generic.List(Of Double) = Nothing
            Dim ComboReachOuterCounter As Integer = 0
            Dim ComboReachCounter As Integer = 0
            Dim AQHComboValues As Generic.List(Of Double) = Nothing
            Dim AQHRatingComboValues As Generic.List(Of Double) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.IsNielsenSetup AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.HasValue Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                        NielsenDbContext.Database.Connection.Open()

                        IsAgencyASP = AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.HasValue AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 Then

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode

                                BookIDs = New Generic.List(Of String)

                                BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value.ToString)

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value > 0 Then

                                    HPUTBookIDs = New String() {MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value.ToString}

                                Else

                                    HPUTBookIDs = New String() {}

                                End If

                                MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                RowIndexesToRun = New Generic.Dictionary(Of String, Generic.List(Of Integer))

                                For Each RowIndex In RowIndexes

                                    NielsenTVStationCode = 0

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                            String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                        VendorNCCTVSyscodeID = DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                                        If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                            If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                                    IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                                                NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                                            End If

                                        Else

                                            NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                                        End If

                                        If NielsenTVStationCode <> 0 Then

                                            If RowIndexesToRun.ContainsKey(NielsenTVStationCode.ToString & "-" & VendorNCCTVSyscodeID.ToString) = False Then

                                                RowIndexesToRun(NielsenTVStationCode.ToString & "-" & VendorNCCTVSyscodeID.ToString) = New Generic.List(Of Integer)

                                            End If

                                            CType(RowIndexesToRun(NielsenTVStationCode.ToString & "-" & VendorNCCTVSyscodeID.ToString), Generic.List(Of Integer)).Add(RowIndex)

                                        End If

                                    End If

                                Next

                                If RowIndexesToRun.Count > 0 Then

                                    For Each StationRowIndexes In RowIndexesToRun

                                        NielsenTVStationCode = StationRowIndexes.Key.Split("-")(0)
                                        VendorNCCTVSyscodeID = StationRowIndexes.Key.Split("-")(1)
                                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                        For Each RowIndex In StationRowIndexes.Value

                                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                            WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                            WorksheetMarketDetail.ID = RowIndex + 1

                                            DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                            MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                        Next

                                        TVWorksheetRatingAndShareDataList = GetNielsenTVCDMARatingAndShareData(NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray, HPUTBookIDs, MediaDemoTypes,
                                                                                                               MediaDemoDetailTypes, New String() {NielsenTVStationCode}, MediaSpotTVResearchDaytimeTypes,
                                                                                                               VendorNCCTVSyscodeID, IsAgencyASP)

                                        If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                            For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID - 1)

                                                If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = TVWorksheetRatingAndShareData.Rating

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = TVWorksheetRatingAndShareData.Rating
                                                    DataRow(MarketDetailsColumns.PrimaryRating.ToString) = TVWorksheetRatingAndShareData.Rating

                                                End If

                                                If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = TVWorksheetRatingAndShareData.Share

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = TVWorksheetRatingAndShareData.Share
                                                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = TVWorksheetRatingAndShareData.Share

                                                End If

                                                DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = TVWorksheetRatingAndShareData.HPUT

                                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                                Else

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                                    DataRow(MarketDetailsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                                End If

                                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                End If

                                                DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = TVWorksheetRatingAndShareData.Universe
                                                DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                                                If DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) > DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) Then

                                                    DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = DataRow(MarketDetailsColumns.PrimaryUniverse.ToString)

                                                End If

                                            Next

                                        Else

                                            For Each RowIndex In StationRowIndexes.Value

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                                If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                                    DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                                End If

                                                If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                                Else

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                                    DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                                End If

                                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                                DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                                            Next

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In RowIndexes

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                        If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                        Else

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                        End If

                                        If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                        DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                                    Next

                                End If

                            ElseIf String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode) = False AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode

                                BookIDs = New Generic.List(Of String)

                                BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value.ToString)

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value > 0 Then

                                    HPUTBookIDs = New String() {MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value.ToString}

                                Else

                                    HPUTBookIDs = New String() {}

                                End If

                                MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                RowIndexesToRun = New Generic.Dictionary(Of String, Generic.List(Of Integer))

                                For Each RowIndex In RowIndexes

                                    NielsenTVStationCode = 0

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                            String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                        If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                            If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                                    IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                                                NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                                            End If

                                        Else

                                            NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                                        End If

                                        If NielsenTVStationCode <> 0 Then

                                            If RowIndexesToRun.ContainsKey(NielsenTVStationCode.ToString) = False Then

                                                RowIndexesToRun(NielsenTVStationCode.ToString) = New Generic.List(Of Integer)

                                            End If

                                            CType(RowIndexesToRun(NielsenTVStationCode.ToString), Generic.List(Of Integer)).Add(RowIndex)

                                        End If

                                    End If

                                Next

                                If RowIndexesToRun.Count > 0 Then

                                    For Each StationRowIndexes In RowIndexesToRun

                                        NielsenTVStationCode = StationRowIndexes.Key
                                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)
                                        'NielsenTVWorksheetRatingAndShareDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.NielsenTVWorksheetRatingAndShareData)

                                        For Each RowIndex In StationRowIndexes.Value

                                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                            WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                            WorksheetMarketDetail.ID = RowIndex + 1

                                            DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                            MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                        Next

                                        NielsenTVWorksheetRatingAndShareDataList = GetNielsenTVRatingAndShareDataNielsenOnly(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray, HPUTBookIDs,
                                                                                                                             MediaDemoTypes, MediaDemoDetailTypes, New String() {NielsenTVStationCode},
                                                                                                                             MediaSpotTVResearchDaytimeTypes, IsAgencyASP)

                                        'NielsenTVWorksheetRatingAndShareDataList = GetNielsenTVRatingAndShareData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray, HPUTBookIDs, MediaDemoTypes, MediaDemoDetailTypes,
                                        '                                                                   New String() {NielsenTVStationCode}, MediaSpotTVResearchDaytimeTypes, IsAgencyASP)

                                        If NielsenTVWorksheetRatingAndShareDataList IsNot Nothing AndAlso NielsenTVWorksheetRatingAndShareDataList.Count > 0 Then

                                            For Each NielsenTVWorksheetRatingAndShareData In NielsenTVWorksheetRatingAndShareDataList

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(NielsenTVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID - 1)

                                                If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = NielsenTVWorksheetRatingAndShareData.Rating

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = NielsenTVWorksheetRatingAndShareData.Rating
                                                    DataRow(MarketDetailsColumns.PrimaryRating.ToString) = NielsenTVWorksheetRatingAndShareData.Rating

                                                End If

                                                If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = NielsenTVWorksheetRatingAndShareData.Share

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = NielsenTVWorksheetRatingAndShareData.Share
                                                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = NielsenTVWorksheetRatingAndShareData.Share

                                                End If

                                                DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = NielsenTVWorksheetRatingAndShareData.HPUT

                                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = NielsenTVWorksheetRatingAndShareData.ProgramName

                                                Else

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = NielsenTVWorksheetRatingAndShareData.ProgramName
                                                    DataRow(MarketDetailsColumns.Program.ToString) = NielsenTVWorksheetRatingAndShareData.ProgramName

                                                End If

                                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = NielsenTVWorksheetRatingAndShareData.Impressions

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = NielsenTVWorksheetRatingAndShareData.Impressions
                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = NielsenTVWorksheetRatingAndShareData.Impressions

                                                End If

                                                DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = NielsenTVWorksheetRatingAndShareData.Universe
                                                DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = NielsenTVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                                                If DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) > DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) Then

                                                    DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = DataRow(MarketDetailsColumns.PrimaryUniverse.ToString)

                                                End If

                                            Next

                                        Else

                                            For Each RowIndex In StationRowIndexes.Value

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                                If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                                    DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                                End If

                                                If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                                Else

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                                    DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                                End If

                                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                                DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                                            Next

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In RowIndexes

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                        If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                        Else

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                        End If

                                        If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                        DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                                    Next

                                End If

                            End If

                        ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                            If (String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode) = False OrElse
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanRadioCode.GetValueOrDefault(0) > 0) AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.HasValue Then

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.HasValue AndAlso
                                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Hispanic AndAlso
                                            String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenHispanicRadioCode) = False Then

                                        NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenHispanicRadioCode

                                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.HasValue AndAlso
                                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Black AndAlso
                                            String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenBlackRadioCode) = False Then

                                        NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenBlackRadioCode

                                    Else

                                        NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode

                                    End If

                                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.HasValue AndAlso
                                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Hispanic AndAlso
                                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanHispanicRadioCode.HasValue Then

                                        NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanHispanicRadioCode.Value

                                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.HasValue AndAlso
                                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities.Black AndAlso
                                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanBlackRadioCode.HasValue Then

                                        NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanBlackRadioCode.Value

                                    Else

                                        NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanRadioCode.GetValueOrDefault(0)

                                    End If

                                End If

                                BookIDs = New Generic.List(Of String)

                                BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.Value.ToString)

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.HasValue Then

                                    BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.Value.ToString)

                                End If

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.HasValue Then

                                    BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.Value.ToString)

                                End If

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.HasValue Then

                                    BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.Value.ToString)

                                End If

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.HasValue Then

                                    BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.Value.ToString)

                                End If

                                MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                RadioDemoDataInfos = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo)

                                For Each RowIndex In RowIndexes

                                    NielsenRadioStationComboID = 0

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                            String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                        Try

                                            RadioDemoDataInfo = RadioDemoDataInfos.SingleOrDefault(Function(Entity) Entity.VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString))

                                        Catch ex As Exception
                                            RadioDemoDataInfo = Nothing
                                        End Try

                                        If DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) Then

                                            VendorRadioStationComboIDs = Nothing

                                            If RadioDemoDataInfo Is Nothing Then

                                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                                                    VendorRadioStationComboIDs = DbContext.Database.SqlQuery(Of Integer)(String.Format("SELECT ISNULL(VCRS.NIELSEN_RADIO_STATION_COMBO_ID, 0) FROM dbo.VENDOR_COMBO_RADIO_STATION VCRS WHERE VCRS.VN_CODE = '{0}'", DataRow(MarketDetailsColumns.VendorCode.ToString))).Where(Function(ComboID) ComboID <> 0).ToList

                                                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                                                    VendorRadioStationComboIDs = Nothing

                                                End If

                                                If VendorRadioStationComboIDs IsNot Nothing AndAlso VendorRadioStationComboIDs.Count > 0 Then

                                                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(DataRow(MarketDetailsColumns.VendorCode.ToString), True, VendorRadioStationComboIDs, RowIndex)

                                                Else

                                                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(DataRow(MarketDetailsColumns.VendorCode.ToString), True, RowIndex)

                                                End If

                                                RadioDemoDataInfos.Add(RadioDemoDataInfo)

                                            Else

                                                RadioDemoDataInfo.RowIndexes.Add(RowIndex)

                                            End If

                                        Else

                                            NielsenRadioStationComboID = DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString)

                                            If RadioDemoDataInfo Is Nothing Then

                                                If NielsenRadioStationComboID > 0 Then

                                                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(DataRow(MarketDetailsColumns.VendorCode.ToString), False, New Generic.List(Of Integer)({NielsenRadioStationComboID}), RowIndex)

                                                Else

                                                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(DataRow(MarketDetailsColumns.VendorCode.ToString), False, RowIndex)

                                                End If

                                                RadioDemoDataInfos.Add(RadioDemoDataInfo)

                                            Else

                                                RadioDemoDataInfo.RowIndexes.Add(RowIndex)

                                            End If

                                        End If

                                    End If

                                Next

                                RadioDemoDataInfos = RadioDemoDataInfos.Where(Function(Entity) Entity.RadioStationComboIDs.Count > 0).ToList

                                If RadioDemoDataInfos.Count > 0 Then

                                    For Each RadioDemoDataInfo In RadioDemoDataInfos

                                        NielsenRadioStationComboIDs = RadioDemoDataInfo.RadioStationComboIDs.Select(Function(RadioStationComboID) RadioStationComboID.ToString).ToArray

                                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                        For Each RowIndex In RadioDemoDataInfo.RowIndexes

                                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                            WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                            WorksheetMarketDetail.ID = RowIndex + 1

                                            DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                            MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                        Next

                                        RadioWorksheetRatingDatas = GetNielsenRadioRatingData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray,
                                                                                              MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID,
                                                                                              NielsenRadioStationComboIDs, New String() {MediaDemographicID}, MediaSpotTVResearchDaytimeTypes,
                                                                                              MediaDemoTypes, MediaDemoDetailTypes, IsAgencyASP)

                                        If RadioWorksheetRatingDatas IsNot Nothing AndAlso RadioWorksheetRatingDatas.Count > 0 Then

                                            For Each MediaBroadcastWorksheetMarketDetailID In RadioWorksheetRatingDatas.Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID).Distinct

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketDetailID - 1)

                                                If DataRow IsNot Nothing Then

                                                    If RadioDemoDataInfo.IsComboRadioStation Then

                                                        DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.Population)

                                                        AQHComboValues = New Generic.List(Of Double)
                                                        AQHRatingComboValues = New Generic.List(Of Double)

                                                        For Each RadioStationComboID In RadioDemoDataInfo.RadioStationComboIDs

                                                            AQHComboValues.Add(RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID AndAlso Entity.NielsenRadioStationComboID = RadioStationComboID).Average(Function(Entity) Entity.AQH))
                                                            AQHRatingComboValues.Add(RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID AndAlso Entity.NielsenRadioStationComboID = RadioStationComboID).Average(Function(Entity) CDbl((Entity.AQH * 100) / DataRow(MarketDetailsColumns.PrimaryUniverse.ToString))))

                                                        Next

                                                        If DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQH.ToString) Then

                                                            DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = AQHComboValues.Sum(Function(AQH) AQH)

                                                        Else

                                                            DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = AQHComboValues.Sum(Function(AQH) AQH)
                                                            DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString)

                                                        End If

                                                        If DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) Then

                                                            DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = AQHRatingComboValues.Sum(Function(AQHRating) Math.Round(AQHRating, 1, MidpointRounding.AwayFromZero))

                                                        Else

                                                            DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = AQHRatingComboValues.Sum(Function(AQHRating) Math.Round(AQHRating, 1, MidpointRounding.AwayFromZero))
                                                            DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString)

                                                        End If

                                                        DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = 0 'ComboReach * 100
                                                        DataRow(MarketDetailsColumns.PrimaryCume.ToString) = 0 'ComboReach * DataRow(MarketDetailsColumns.PrimaryUniverse.ToString)

                                                        DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString), 1, MidpointRounding.AwayFromZero)
                                                        DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString), 1, MidpointRounding.AwayFromZero)
                                                        DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString), 1, MidpointRounding.AwayFromZero)

                                                        If DataRow(MarketDetailsColumns.PrimaryCume.ToString) > DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) Then

                                                            DataRow(MarketDetailsColumns.PrimaryCume.ToString) = DataRow(MarketDetailsColumns.PrimaryUniverse.ToString)

                                                        End If

                                                        ComboReachValues = New Generic.List(Of Double)

                                                        For Each RadioStationComboID In RadioWorksheetRatingDatas.Select(Function(Entity) Entity.NielsenRadioStationComboID).Distinct.ToList

                                                            RadioStationComboReachValues = New Generic.List(Of Double)

                                                            For Each RadioWorksheetRatingData In RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioStationComboID = RadioStationComboID).ToList

                                                                RadioStationComboReachValues.Add(CalculateRadioReach(RadioWorksheetRatingData.AQH, RadioWorksheetRatingData.CUME,
                                                                                                                     DataRow(MarketDetailsColumns.TotalSpots.ToString), RadioWorksheetRatingData.Population,
                                                                                                                     RadioWorksheetRatingData.AQHRating, RadioWorksheetRatingData.AQHRating))

                                                            Next

                                                            ComboReachValues.Add(Math.Round(RadioStationComboReachValues.Average(Function(ReachValue) ReachValue), 3, MidpointRounding.AwayFromZero))

                                                        Next

                                                        ComboReach = ComboReachValues.Sum(Function(ComboReachValue) ComboReachValue)

                                                        For ComboReachOuterCounter = 0 To ComboReachValues.Count - 1

                                                            ComboReachCounter = ComboReachOuterCounter + 1

                                                            While ComboReachCounter <> ComboReachValues.Count

                                                                'Console.WriteLine(" - (" & ComboReachValues(ComboReachOuterCounter) & " * " & ComboReachValues(ComboReachCounter) & ")")

                                                                ComboReach -= (ComboReachValues(ComboReachOuterCounter) * ComboReachValues(ComboReachCounter))
                                                                ComboReachCounter += 1

                                                            End While

                                                        Next

                                                        DataRow(MarketDetailsColumns.PrimaryReach.ToString) = Math.Round(ComboReach, 3, MidpointRounding.AwayFromZero)

                                                    Else

                                                        If DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) Then

                                                            DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQHRating)

                                                        Else

                                                            DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQHRating)
                                                            DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQHRating)

                                                        End If

                                                        If DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQH.ToString) Then

                                                            DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQH)

                                                        Else

                                                            DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQH)
                                                            DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQH)

                                                        End If

                                                        DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.CumeRating)
                                                        DataRow(MarketDetailsColumns.PrimaryCume.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.CUME)
                                                        DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.Population)

                                                        DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString), 1, MidpointRounding.AwayFromZero)
                                                        DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString), 1, MidpointRounding.AwayFromZero)
                                                        DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString), 1, MidpointRounding.AwayFromZero)

                                                        If DataRow(MarketDetailsColumns.PrimaryCume.ToString) > DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) Then

                                                            DataRow(MarketDetailsColumns.PrimaryCume.ToString) = DataRow(MarketDetailsColumns.PrimaryUniverse.ToString)

                                                        End If

                                                    End If

                                                End If

                                            Next

                                        Else

                                            For Each RowIndex In RadioDemoDataInfo.RowIndexes

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                                If DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = 0
                                                    DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = 0

                                                End If

                                                If DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQH.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = 0
                                                    DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = 0
                                                DataRow(MarketDetailsColumns.PrimaryCume.ToString) = 0
                                                DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0

                                            Next

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In RowIndexes

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) <> DataRow(MarketDetailsColumns.PrimaryAQH.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = 0
                                        DataRow(MarketDetailsColumns.PrimaryCume.ToString) = 0
                                        DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0

                                    Next

                                End If

                            End If

                        End If

                    End Using

                End Using

            End If

        End Sub
        Private Sub MarketDetails_LoadSecondaryNielsenRatingAndShareData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                         RowIndexes As Generic.List(Of Integer))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NielsenMarketNumber As Integer = 0
            Dim BookIDs As Generic.List(Of String) = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaDemographicID As Integer = 0
            Dim NielsenTVStationCode As Integer = 0
            Dim CableNetworkStationID As Integer = 0
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim NielsenRadioStationComboID As Integer = 0
            Dim NielsenRadioStationComboIDs() As String = Nothing
            Dim RadioWorksheetRatingDatas As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim RowIndexesToRun As Generic.Dictionary(Of String, Generic.List(Of Integer)) = Nothing
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim IsAgencyASP As Boolean = False
            Dim VendorRadioStationComboIDs As Generic.List(Of Integer) = Nothing
            Dim RadioDemoDataInfos As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo) = Nothing
            Dim RadioDemoDataInfo As AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo = Nothing
            Dim ComboReach As Double = 0
            Dim ComboReachValues As Generic.List(Of Double) = Nothing
            Dim RadioStationComboReachValues As Generic.List(Of Double) = Nothing
            Dim ComboReachOuterCounter As Integer = 0
            Dim ComboReachCounter As Integer = 0
            Dim AQHComboValues As Generic.List(Of Double) = Nothing
            Dim AQHRatingComboValues As Generic.List(Of Double) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.IsNielsenSetup AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                        NielsenDbContext.Database.Connection.Open()

                        IsAgencyASP = AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.HasValue AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode

                                BookIDs = New Generic.List(Of String)

                                BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value.ToString)

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value > 0 Then

                                    HPUTBookIDs = New String() {MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value.ToString}

                                Else

                                    HPUTBookIDs = New String() {}

                                End If

                                MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                RowIndexesToRun = New Generic.Dictionary(Of String, Generic.List(Of Integer))

                                For Each RowIndex In RowIndexes

                                    NielsenTVStationCode = 0

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                            String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                        VendorNCCTVSyscodeID = DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                                        If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                            If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                                    IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                                                NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                                            End If

                                        Else

                                            NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                                        End If

                                        If NielsenTVStationCode <> 0 Then

                                            If RowIndexesToRun.ContainsKey(NielsenTVStationCode.ToString & "-" & VendorNCCTVSyscodeID.ToString) = False Then

                                                RowIndexesToRun(NielsenTVStationCode.ToString & "-" & VendorNCCTVSyscodeID.ToString) = New Generic.List(Of Integer)

                                            End If

                                            CType(RowIndexesToRun(NielsenTVStationCode.ToString & "-" & VendorNCCTVSyscodeID.ToString), Generic.List(Of Integer)).Add(RowIndex)

                                        End If

                                    End If

                                Next

                                If RowIndexesToRun.Count > 0 Then

                                    For Each StationRowIndexes In RowIndexesToRun

                                        NielsenTVStationCode = StationRowIndexes.Key.Split("-")(0)
                                        VendorNCCTVSyscodeID = StationRowIndexes.Key.Split("-")(1)
                                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                        For Each RowIndex In StationRowIndexes.Value

                                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                            WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                            WorksheetMarketDetail.ID = RowIndex + 1

                                            DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                            MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                        Next

                                        TVWorksheetRatingAndShareDataList = GetNielsenTVCDMARatingAndShareData(NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray, HPUTBookIDs, MediaDemoTypes,
                                                                                                               MediaDemoDetailTypes, New String() {NielsenTVStationCode}, MediaSpotTVResearchDaytimeTypes,
                                                                                                               VendorNCCTVSyscodeID, IsAgencyASP)

                                        If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                            For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID - 1)

                                                If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = TVWorksheetRatingAndShareData.Rating

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = TVWorksheetRatingAndShareData.Rating
                                                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = TVWorksheetRatingAndShareData.Rating

                                                End If

                                                If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = TVWorksheetRatingAndShareData.Share

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = TVWorksheetRatingAndShareData.Share
                                                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = TVWorksheetRatingAndShareData.Share

                                                End If

                                                DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = TVWorksheetRatingAndShareData.HPUT

                                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                                Else

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                                    DataRow(MarketDetailsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                                End If

                                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                End If

                                                DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = TVWorksheetRatingAndShareData.Universe
                                                DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                                                If DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) > DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) Then

                                                    DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = DataRow(MarketDetailsColumns.SecondaryUniverse.ToString)

                                                End If

                                            Next

                                        Else

                                            For Each RowIndex In StationRowIndexes.Value

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                                If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                                End If

                                                If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                                Else

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                                    DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                                End If

                                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                                DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                                            Next

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In RowIndexes

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                        If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                        Else

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                        DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                                    Next

                                End If

                            ElseIf String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode) = False AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode

                                BookIDs = New Generic.List(Of String)

                                BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value.ToString)

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value > 0 Then

                                    HPUTBookIDs = New String() {MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value.ToString}

                                Else

                                    HPUTBookIDs = New String() {}

                                End If

                                MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                RowIndexesToRun = New Generic.Dictionary(Of String, Generic.List(Of Integer))

                                For Each RowIndex In RowIndexes

                                    NielsenTVStationCode = 0

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                            String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                        If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                            If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                                    IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                                                NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                                            End If

                                        Else

                                            NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                                        End If

                                        If NielsenTVStationCode <> 0 Then

                                            If RowIndexesToRun.ContainsKey(NielsenTVStationCode.ToString) = False Then

                                                RowIndexesToRun(NielsenTVStationCode.ToString) = New Generic.List(Of Integer)

                                            End If

                                            CType(RowIndexesToRun(NielsenTVStationCode.ToString), Generic.List(Of Integer)).Add(RowIndex)

                                        End If

                                    End If

                                Next

                                If RowIndexesToRun.Count > 0 Then

                                    For Each StationRowIndexes In RowIndexesToRun

                                        NielsenTVStationCode = StationRowIndexes.Key
                                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                        For Each RowIndex In StationRowIndexes.Value

                                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                            WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                            WorksheetMarketDetail.ID = RowIndex + 1

                                            DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                            MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                        Next

                                        TVWorksheetRatingAndShareDataList = GetNielsenTVRatingAndShareData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray, HPUTBookIDs, MediaDemoTypes, MediaDemoDetailTypes,
                                                                                                           New String() {NielsenTVStationCode}, MediaSpotTVResearchDaytimeTypes, IsAgencyASP)

                                        If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                            For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID - 1)

                                                If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = TVWorksheetRatingAndShareData.Rating

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = TVWorksheetRatingAndShareData.Rating
                                                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = TVWorksheetRatingAndShareData.Rating

                                                End If

                                                If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = TVWorksheetRatingAndShareData.Share

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = TVWorksheetRatingAndShareData.Share
                                                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = TVWorksheetRatingAndShareData.Share

                                                End If

                                                DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = TVWorksheetRatingAndShareData.HPUT

                                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                                Else

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                                    DataRow(MarketDetailsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                                End If

                                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                End If

                                                DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = TVWorksheetRatingAndShareData.Universe
                                                DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                                                If DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) > DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) Then

                                                    DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = DataRow(MarketDetailsColumns.SecondaryUniverse.ToString)

                                                End If

                                            Next

                                        Else

                                            For Each RowIndex In StationRowIndexes.Value

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                                If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                                End If

                                                If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                                Else

                                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                                    DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                                End If

                                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                                DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                                            Next

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In RowIndexes

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                        If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                        Else

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                        DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                                    Next

                                End If

                            End If

                        ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                            If (String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode) = False OrElse
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanRadioCode.GetValueOrDefault(0) > 0) AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.HasValue Then

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                                    NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode

                                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                                    NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanRadioCode.GetValueOrDefault(0)

                                End If

                                BookIDs = New Generic.List(Of String)

                                BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.Value.ToString)

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.HasValue Then

                                    BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.Value.ToString)

                                End If

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.HasValue Then

                                    BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.Value.ToString)

                                End If

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.HasValue Then

                                    BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.Value.ToString)

                                End If

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.HasValue Then

                                    BookIDs.Add(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.Value.ToString)

                                End If

                                MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                RadioDemoDataInfos = New Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo)

                                For Each RowIndex In RowIndexes

                                    NielsenRadioStationComboID = 0

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                            String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                        Try

                                            RadioDemoDataInfo = RadioDemoDataInfos.SingleOrDefault(Function(Entity) Entity.VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString))

                                        Catch ex As Exception
                                            RadioDemoDataInfo = Nothing
                                        End Try

                                        If DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) Then

                                            VendorRadioStationComboIDs = Nothing

                                            If RadioDemoDataInfo Is Nothing Then

                                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                                                    VendorRadioStationComboIDs = DbContext.Database.SqlQuery(Of Integer)(String.Format("SELECT ISNULL(VCRS.NIELSEN_RADIO_STATION_COMBO_ID, 0) FROM dbo.VENDOR_COMBO_RADIO_STATION VCRS WHERE VCRS.VN_CODE = '{0}'", DataRow(MarketDetailsColumns.VendorCode.ToString))).Where(Function(ComboID) ComboID <> 0).ToList

                                                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                                                    VendorRadioStationComboIDs = Nothing

                                                End If

                                                If VendorRadioStationComboIDs IsNot Nothing AndAlso VendorRadioStationComboIDs.Count > 0 Then

                                                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(DataRow(MarketDetailsColumns.VendorCode.ToString), True, VendorRadioStationComboIDs, RowIndex)

                                                Else

                                                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(DataRow(MarketDetailsColumns.VendorCode.ToString), True, RowIndex)

                                                End If

                                                RadioDemoDataInfos.Add(RadioDemoDataInfo)

                                            Else

                                                RadioDemoDataInfo.RowIndexes.Add(RowIndex)

                                            End If

                                        Else

                                            NielsenRadioStationComboID = DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString)

                                            If RadioDemoDataInfo Is Nothing Then

                                                If NielsenRadioStationComboID > 0 Then

                                                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(DataRow(MarketDetailsColumns.VendorCode.ToString), False, New Generic.List(Of Integer)({NielsenRadioStationComboID}), RowIndex)

                                                Else

                                                    RadioDemoDataInfo = New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.RadioDemoDataInfo(DataRow(MarketDetailsColumns.VendorCode.ToString), False, RowIndex)

                                                End If

                                                RadioDemoDataInfos.Add(RadioDemoDataInfo)

                                            Else

                                                RadioDemoDataInfo.RowIndexes.Add(RowIndex)

                                            End If

                                        End If

                                    End If

                                Next

                                RadioDemoDataInfos = RadioDemoDataInfos.Where(Function(Entity) Entity.RadioStationComboIDs.Count > 0).ToList

                                If RadioDemoDataInfos.Count > 0 Then

                                    For Each RadioDemoDataInfo In RadioDemoDataInfos

                                        NielsenRadioStationComboIDs = RadioDemoDataInfo.RadioStationComboIDs.Select(Function(RadioStationComboID) RadioStationComboID.ToString).ToArray

                                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                        For Each RowIndex In RadioDemoDataInfo.RowIndexes

                                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                            WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                            WorksheetMarketDetail.ID = RowIndex + 1

                                            DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                            MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                        Next

                                        RadioWorksheetRatingDatas = GetNielsenRadioRatingData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray,
                                                                                              MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID,
                                                                                              NielsenRadioStationComboIDs, New String() {MediaDemographicID}, MediaSpotTVResearchDaytimeTypes,
                                                                                              MediaDemoTypes, MediaDemoDetailTypes, IsAgencyASP)

                                        If RadioWorksheetRatingDatas IsNot Nothing AndAlso RadioWorksheetRatingDatas.Count > 0 Then

                                            For Each MediaBroadcastWorksheetMarketDetailID In RadioWorksheetRatingDatas.Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID).Distinct

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketDetailID - 1)

                                                If DataRow IsNot Nothing Then

                                                    If RadioDemoDataInfo.IsComboRadioStation Then

                                                        DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.Population)

                                                        AQHComboValues = New Generic.List(Of Double)
                                                        AQHRatingComboValues = New Generic.List(Of Double)

                                                        For Each RadioStationComboID In RadioDemoDataInfo.RadioStationComboIDs

                                                            AQHComboValues.Add(RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID AndAlso Entity.NielsenRadioStationComboID = RadioStationComboID).Average(Function(Entity) Entity.AQH))
                                                            AQHRatingComboValues.Add(RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID AndAlso Entity.NielsenRadioStationComboID = RadioStationComboID).Average(Function(Entity) CDbl((Entity.AQH * 100) / DataRow(MarketDetailsColumns.SecondaryUniverse.ToString))))

                                                        Next

                                                        If DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQH.ToString) Then

                                                            DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = AQHComboValues.Sum(Function(AQH) AQH)

                                                        Else

                                                            DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = AQHComboValues.Sum(Function(AQH) AQH)
                                                            DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString)

                                                        End If

                                                        If DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) Then

                                                            DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = AQHRatingComboValues.Sum(Function(AQHRating) Math.Round(AQHRating, 1, MidpointRounding.AwayFromZero))

                                                        Else

                                                            DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = AQHRatingComboValues.Sum(Function(AQHRating) Math.Round(AQHRating, 1, MidpointRounding.AwayFromZero))
                                                            DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString)

                                                        End If

                                                        DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = 0 'ComboReach * 100
                                                        DataRow(MarketDetailsColumns.SecondaryCume.ToString) = 0 'ComboReach * DataRow(MarketDetailsColumns.SecondaryUniverse.ToString)

                                                        DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString), 1, MidpointRounding.AwayFromZero)
                                                        DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString), 1, MidpointRounding.AwayFromZero)
                                                        DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString), 1, MidpointRounding.AwayFromZero)

                                                        If DataRow(MarketDetailsColumns.SecondaryCume.ToString) > DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) Then

                                                            DataRow(MarketDetailsColumns.SecondaryCume.ToString) = DataRow(MarketDetailsColumns.SecondaryUniverse.ToString)

                                                        End If

                                                        ComboReachValues = New Generic.List(Of Double)

                                                        For Each RadioStationComboID In RadioWorksheetRatingDatas.Select(Function(Entity) Entity.NielsenRadioStationComboID).Distinct.ToList

                                                            RadioStationComboReachValues = New Generic.List(Of Double)

                                                            For Each RadioWorksheetRatingData In RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioStationComboID = RadioStationComboID).ToList

                                                                RadioStationComboReachValues.Add(CalculateRadioReach(RadioWorksheetRatingData.AQH, RadioWorksheetRatingData.CUME,
                                                                                                                     DataRow(MarketDetailsColumns.TotalSpots.ToString), RadioWorksheetRatingData.Population,
                                                                                                                     RadioWorksheetRatingData.AQHRating, RadioWorksheetRatingData.AQHRating))

                                                            Next

                                                            ComboReachValues.Add(Math.Round(RadioStationComboReachValues.Average(Function(ReachValue) ReachValue), 3, MidpointRounding.AwayFromZero))

                                                        Next

                                                        ComboReach = ComboReachValues.Sum(Function(ComboReachValue) ComboReachValue)

                                                        For ComboReachOuterCounter = 0 To ComboReachValues.Count - 1

                                                            ComboReachCounter = ComboReachOuterCounter + 1

                                                            While ComboReachCounter <> ComboReachValues.Count

                                                                'Console.WriteLine(" - (" & ComboReachValues(ComboReachOuterCounter) & " * " & ComboReachValues(ComboReachCounter) & ")")

                                                                ComboReach -= (ComboReachValues(ComboReachOuterCounter) * ComboReachValues(ComboReachCounter))
                                                                ComboReachCounter += 1

                                                            End While

                                                        Next

                                                        DataRow(MarketDetailsColumns.SecondaryReach.ToString) = Math.Round(ComboReach, 3, MidpointRounding.AwayFromZero)

                                                    Else

                                                        If DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) Then

                                                            DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQHRating)

                                                        Else

                                                            DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQHRating)
                                                            DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQHRating)

                                                        End If

                                                        If DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQH.ToString) Then

                                                            DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQH)

                                                        Else

                                                            DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQH)
                                                            DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.AQH)

                                                        End If

                                                        DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.CumeRating)
                                                        DataRow(MarketDetailsColumns.SecondaryCume.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.CUME)
                                                        DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(Entity) Entity.Population)

                                                        DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString), 1, MidpointRounding.AwayFromZero)
                                                        DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString), 1, MidpointRounding.AwayFromZero)
                                                        DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = Math.Round(DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString), 1, MidpointRounding.AwayFromZero)

                                                        If DataRow(MarketDetailsColumns.SecondaryCume.ToString) > DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) Then

                                                            DataRow(MarketDetailsColumns.SecondaryCume.ToString) = DataRow(MarketDetailsColumns.SecondaryUniverse.ToString)

                                                        End If

                                                    End If

                                                End If

                                            Next

                                        Else

                                            For Each RowIndex In RadioDemoDataInfo.RowIndexes

                                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                                If DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = 0
                                                    DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = 0

                                                End If

                                                If DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQH.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = 0

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = 0
                                                    DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = 0

                                                End If

                                                DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = 0
                                                DataRow(MarketDetailsColumns.SecondaryCume.ToString) = 0
                                                DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0

                                            Next

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In RowIndexes

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) <> DataRow(MarketDetailsColumns.SecondaryAQH.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = 0
                                        DataRow(MarketDetailsColumns.SecondaryCume.ToString) = 0
                                        DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0

                                    Next

                                End If

                            End If

                        End If

                    End Using

                End Using

            End If

        End Sub
        Private Sub MarketDetails_CreateMeasurementTrendsDataTableSchema(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing

            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.ID.ToString)

            DataColumn.AutoIncrement = True
            DataColumn.AllowDBNull = False
            MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.PrimaryKey = New System.Data.DataColumn() {DataColumn}
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.BookID.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "Book"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                DataColumn.Caption = "SIU"

            Else

                DataColumn.Caption = "H/PUT"

            End If
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "Book"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Integer)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.Program.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(String)
            DataColumn.DefaultValue = String.Empty
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.BookRating.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.Rating.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.BookShare.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.Share.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "HUT/PUT"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Long)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "Imp (000)"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.Impressions.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Long)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "Imp (000)"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "AQH Rtg"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "Book AQH Rtg"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.AQH.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Long)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "AQH (00)"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "Book AQH (00)"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Decimal)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "Cume Rtg"
            '=============
            DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Columns.Add(MarketDetails_MeasurementTrendsColumns.Cume.ToString)

            DataColumn.AllowDBNull = False
            DataColumn.DataType = GetType(Long)
            DataColumn.DefaultValue = 0
            DataColumn.Caption = "Cume (00)"

        End Sub
        Private Sub MarketDetails_CreateMeasurementTrendsDataTableDefaultRows(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                              CreateProjectionRow As Boolean)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NielsenTVBooks As Generic.List(Of DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim NielsenRadioPeriods As Generic.List(Of DTO.Media.NielsenRadioPeriod) = Nothing
            Dim SelectedWorksheetMarketNielsenBooksIDs() As Integer = Nothing

            'MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.BeginLoadData()

            If CreateProjectionRow Then

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.NewRow()

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) > 0 Then

                        DataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value

                    Else

                        DataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = 0

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.GetValueOrDefault(0) > 0 Then

                        DataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value

                    Else

                        DataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = 0

                    End If

                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    DataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0) > 0 Then

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.Value

                    Else

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = 0

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0) > 0 Then

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.Value

                    Else

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = 0

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0) > 0 Then

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.Value

                    Else

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = 0

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0) > 0 Then

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.Value

                    Else

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = 0

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0) > 0 Then

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.Value

                    Else

                        DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = 0

                    End If

                    DataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    DataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                End If

                MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows.Add(DataRow)

            End If

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                SelectedWorksheetMarketNielsenBooksIDs = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks.Select(Function(Entity) Entity.NielsenTVBookID).Distinct.ToArray

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.RatingsServiceID.Comscore Then

                    NielsenTVBooks = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks.Where(Function(Entity) SelectedWorksheetMarketNielsenBooksIDs.Contains(Entity.ID) = True).ToList

                Else

                    NielsenTVBooks = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketTrendNielsenTVBooks.Where(Function(Entity) SelectedWorksheetMarketNielsenBooksIDs.Contains(Entity.ID) = True).ToList

                End If

                For Each NielsenTVBook In NielsenTVBooks.OrderByDescending(Function(Entity) Entity.Year).ThenByDescending(Function(Entity) Entity.Month)

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.NewRow()

                    DataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = NielsenTVBook.ID
                    DataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    DataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                    MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows.Add(DataRow)

                Next

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                SelectedWorksheetMarketNielsenBooksIDs = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenRadioPeriods.Select(Function(Entity) Entity.NielsenRadioPeriodID).Distinct.ToArray

                NielsenRadioPeriods = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenRadioPeriods.Where(Function(Entity) SelectedWorksheetMarketNielsenBooksIDs.Contains(Entity.ID) = True).ToList

                For Each NielsenRadioPeriod In NielsenRadioPeriods.OrderByDescending(Function(Entity) Entity.Year).ThenByDescending(Function(Entity) Entity.SortMonth)

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.NewRow()

                    DataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = NielsenRadioPeriod.ID
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    DataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    DataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                    MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows.Add(DataRow)

                Next

            End If

            'MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.EndLoadData()

        End Sub
        Private Sub MarketDetails_ClearMeasurementTrendsDataTableDefaultRows(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.BeginLoadData()

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows.OfType(Of System.Data.DataRow).ToList

                If MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows.IndexOf(DataRow) > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows.Remove(DataRow)

                End If

            Next

            'MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.EndLoadData()

        End Sub
        Public Function MarketDetails_RefreshsMeasurementTrendsDataTableDefaultRows(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                                    RowIndex As Integer) As System.Data.DataTable

            'objects
            Dim MeasurementTrendsDataTable As System.Data.DataTable = Nothing
            Dim MeasurementTrendsDataRow As System.Data.DataRow = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim MediaDemographicID As Integer = 0
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim BookIDs() As String = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim NielsenMarketNumber As Integer = 0
            Dim NielsenTVStationCode As Integer = 0
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim ProjectionLineID As Integer = 0
            Dim NielsenRadioStationComboID As Integer = 0
            Dim NielsenRadioStationComboIDs() As String = Nothing
            Dim VendorRadioStationComboIDs As Generic.List(Of Integer) = Nothing
            Dim RadioWorksheetRatingDatas As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim ShareHPUTBook As AdvantageFramework.DTO.Media.ShareHPUTBook = Nothing
            Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim StationNumber As Integer = -1
            Dim Universe As Integer = 0

            MeasurementTrendsDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Copy
            'MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.BeginLoadData()

            MeasurementTrendsDataTable.BeginLoadData()

            MeasurementTrendsDataRow = MeasurementTrendsDataTable.Rows(0)

            ProjectionLineID = MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.ID.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.IsNielsenSetup AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                        String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode) = False AndAlso RowIndex > -1 Then

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                    NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode

                    If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                        If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                            NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                        End If

                    Else

                        NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                    End If

                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = DataRow(MarketDetailsColumns.BookProgram.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = DataRow(MarketDetailsColumns.Program.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowPrimaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) > 0 Then

                        MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value

                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = DataRow(MarketDetailsColumns.PrimaryRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = DataRow(MarketDetailsColumns.BookPrimaryShare.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = DataRow(MarketDetailsColumns.PrimaryShare.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = DataRow(MarketDetailsColumns.PrimaryHPUT.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = DataRow(MarketDetailsColumns.PrimaryImpressions.ToString)

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowSecondaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                        MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = DataRow(MarketDetailsColumns.BookSecondaryRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = DataRow(MarketDetailsColumns.SecondaryRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = DataRow(MarketDetailsColumns.BookSecondaryShare.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = DataRow(MarketDetailsColumns.SecondaryShare.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = DataRow(MarketDetailsColumns.SecondaryHPUT.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = DataRow(MarketDetailsColumns.SecondaryImpressions.ToString)

                    End If

                    If MediaDemographicID > 0 AndAlso NielsenTVStationCode <> 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks.Count > 0 AndAlso
                            DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                            String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                            DbContext.Database.Connection.Open()

                            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                                NielsenDbContext.Database.Connection.Open()

                                HPUTBookIDs = New String() {}

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                    .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                  .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                StationCodes = New String() {NielsenTVStationCode}

                                WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                WorksheetMarketDetail.ID = 1

                                DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail)}

                                BookIDs = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks.Select(Function(Entity) Entity.NielsenTVBookID.ToString).ToArray

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.HasValue AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                                    VendorNCCTVSyscodeID = DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                                    TVWorksheetRatingAndShareDataList = GetNielsenTVCDMARatingAndShareData(NielsenDbContext, NielsenMarketNumber, BookIDs, HPUTBookIDs, MediaDemoTypes,
                                                                                                           MediaDemoDetailTypes, StationCodes, MediaSpotTVResearchDaytimeTypes, VendorNCCTVSyscodeID,
                                                                                                           AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext))

                                Else

                                    TVWorksheetRatingAndShareDataList = GetNielsenTVRatingAndShareData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs, HPUTBookIDs, MediaDemoTypes,
                                                                                                       MediaDemoDetailTypes, StationCodes, MediaSpotTVResearchDaytimeTypes,
                                                                                                       AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext))

                                End If

                            End Using

                        End Using

                        For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                            MeasurementTrendsDataRow = MeasurementTrendsDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetails_MeasurementTrendsColumns.ID.ToString) <> ProjectionLineID AndAlso
                                                                                                                                                   DR(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = TVWorksheetRatingAndShareData.BookID)

                            If MeasurementTrendsDataRow IsNot Nothing Then

                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = TVWorksheetRatingAndShareData.Rating
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = TVWorksheetRatingAndShareData.Rating
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = TVWorksheetRatingAndShareData.Share
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = TVWorksheetRatingAndShareData.Share
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = TVWorksheetRatingAndShareData.HPUT
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                            End If

                        Next

                    Else

                        For Each WorksheetMarketNielsenTVBook In MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks

                            MeasurementTrendsDataRow = MeasurementTrendsDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetails_MeasurementTrendsColumns.ID.ToString) <> ProjectionLineID AndAlso
                                                                                                                                                   DR(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = WorksheetMarketNielsenTVBook.NielsenTVBookID)

                            If MeasurementTrendsDataRow IsNot Nothing Then

                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                            End If

                        Next

                    End If

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.HasValue AndAlso RowIndex > -1 Then

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                    If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                        If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                            NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                        End If

                    Else

                        NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                    End If

                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = DataRow(MarketDetailsColumns.BookProgram.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = DataRow(MarketDetailsColumns.Program.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowPrimaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) > 0 Then

                        MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value

                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = DataRow(MarketDetailsColumns.PrimaryRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = DataRow(MarketDetailsColumns.BookPrimaryShare.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = DataRow(MarketDetailsColumns.PrimaryShare.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = DataRow(MarketDetailsColumns.PrimaryHPUT.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = DataRow(MarketDetailsColumns.PrimaryImpressions.ToString)

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowSecondaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                        MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = DataRow(MarketDetailsColumns.BookSecondaryRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = DataRow(MarketDetailsColumns.SecondaryRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = DataRow(MarketDetailsColumns.BookSecondaryShare.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = DataRow(MarketDetailsColumns.SecondaryShare.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = DataRow(MarketDetailsColumns.SecondaryHPUT.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = DataRow(MarketDetailsColumns.SecondaryImpressions.ToString)

                    End If

                    If MediaDemographicID > 0 AndAlso NielsenTVStationCode <> 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks.Count > 0 AndAlso
                            DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                            String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                        DemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)

                        Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                            DbContext.Database.Connection.Open()

                            MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaDemographicID)

                            If MediaDemographic IsNot Nothing Then

                                DemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic(MediaDemographic))

                            End If

                            If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                If (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                    Where Entity.NetworkNumber = NielsenTVStationCode
                                    Select Entity).Any Then

                                    StationNumber = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                     Where Entity.NetworkNumber = NielsenTVStationCode
                                                     Select Entity).First.Number

                                End If

                            Else

                                If (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                    Where Entity.ID = NielsenTVStationCode
                                    Select Entity).Any Then

                                    StationNumber = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                     Where Entity.ID = NielsenTVStationCode
                                                     Select Entity).First.Number

                                End If

                            End If

                            ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)

                            For Each WorksheetMarketNielsenTVBook In MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks

                                ShareHPUTBook = New AdvantageFramework.DTO.Media.ShareHPUTBook

                                ShareHPUTBook.ShareBookID = WorksheetMarketNielsenTVBook.NielsenTVBookID

                                ShareHPUTBooks.Add(ShareHPUTBook)

                            Next

                            MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                            WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                            WorksheetMarketDetail.ID = 1

                            DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                            MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                        End Using

                        Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                            Try

                                'TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViews(DbContext, CallLetters, DemographicList, ShareHPUTBooks,
                                '                                                                                  MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber)
                                TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, StationNumber, DemographicList, ShareHPUTBooks,
                                                                                                                       MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber, False)

                            Catch ex As Exception
                                TVWorksheetRatingAndShareDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)
                            End Try

                        End Using

                        For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                            MeasurementTrendsDataRow = MeasurementTrendsDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetails_MeasurementTrendsColumns.ID.ToString) <> ProjectionLineID AndAlso
                                                                                                                                                   DR(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = TVWorksheetRatingAndShareData.BookID)

                            If MeasurementTrendsDataRow IsNot Nothing Then

                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = TVWorksheetRatingAndShareData.Rating
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = TVWorksheetRatingAndShareData.Rating
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = TVWorksheetRatingAndShareData.Share
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = TVWorksheetRatingAndShareData.Share
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = TVWorksheetRatingAndShareData.HPUT
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                            End If

                        Next

                    Else

                        For Each WorksheetMarketNielsenTVBook In MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks

                            MeasurementTrendsDataRow = MeasurementTrendsDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetails_MeasurementTrendsColumns.ID.ToString) <> ProjectionLineID AndAlso
                                                                                                                                                   DR(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = WorksheetMarketNielsenTVBook.NielsenTVBookID)

                            If MeasurementTrendsDataRow IsNot Nothing Then

                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                            End If

                        Next

                    End If

                Else

                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                    For Each WorksheetMarketNielsenTVBook In MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks

                        MeasurementTrendsDataRow = MeasurementTrendsDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetails_MeasurementTrendsColumns.ID.ToString) <> ProjectionLineID AndAlso
                                                                                                                                               DR(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = WorksheetMarketNielsenTVBook.NielsenTVBookID)

                        If MeasurementTrendsDataRow IsNot Nothing Then

                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                        End If

                    Next

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.IsNielsenSetup AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                        (String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode) = False OrElse
                         MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanRadioCode.GetValueOrDefault(0) > 0) AndAlso
                        RowIndex > -1 Then

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                        NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenRadioCode

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                        NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketEastlanRadioCode.GetValueOrDefault(0)

                    End If

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        If DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) Then

                            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen Then

                                VendorRadioStationComboIDs = DbContext.Database.SqlQuery(Of Integer)(String.Format("SELECT ISNULL(VCRS.NIELSEN_RADIO_STATION_COMBO_ID, 0) FROM dbo.VENDOR_COMBO_RADIO_STATION VCRS WHERE VCRS.VN_CODE = '{0}'", DataRow(MarketDetailsColumns.VendorCode.ToString))).Where(Function(ComboID) ComboID <> 0).ToList

                            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan Then

                                VendorRadioStationComboIDs = Nothing

                            Else

                                VendorRadioStationComboIDs = New Generic.List(Of Integer)

                            End If

                        Else

                            VendorRadioStationComboIDs = New Generic.List(Of Integer)

                            VendorRadioStationComboIDs.Add(DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString))

                        End If

                    End Using

                    VendorRadioStationComboIDs = VendorRadioStationComboIDs.Where(Function(ComboID) ComboID > 0).ToList

                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowPrimaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) > 0 Then

                        MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value

                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = DataRow(MarketDetailsColumns.PrimaryAQH.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = DataRow(MarketDetailsColumns.PrimaryCume.ToString)

                    ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowSecondaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                        MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = DataRow(MarketDetailsColumns.SecondaryAQH.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString)
                        MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = DataRow(MarketDetailsColumns.SecondaryCume.ToString)

                    End If

                    If MediaDemographicID > 0 AndAlso VendorRadioStationComboIDs.Count > 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenRadioPeriods.Count > 0 AndAlso
                            DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                            String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Me.Session.UserCode)

                                DbContext.Database.Connection.Open()
                                NielsenDbContext.Database.Connection.Open()

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                NielsenRadioStationComboIDs = VendorRadioStationComboIDs.Select(Function(RadioStationComboID) RadioStationComboID.ToString).ToArray

                                WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                WorksheetMarketDetail.ID = 1

                                DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail)}

                                BookIDs = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenRadioPeriods.Select(Function(Entity) Entity.NielsenRadioPeriodID.ToString).ToArray

                                RadioWorksheetRatingDatas = GetNielsenRadioRatingData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray,
                                                                                      MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID,
                                                                                      NielsenRadioStationComboIDs, New String() {MediaDemographicID}, MediaSpotTVResearchDaytimeTypes,
                                                                                      MediaDemoTypes, MediaDemoDetailTypes, AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext))

                            End Using

                        End Using

                        For Each NielsenRadioPeriodID In RadioWorksheetRatingDatas.Select(Function(Entity) Entity.NielsenRadioPeriodID).Distinct

                            MeasurementTrendsDataRow = MeasurementTrendsDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetails_MeasurementTrendsColumns.ID.ToString) <> ProjectionLineID AndAlso
                                                                                                                                                   DR(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = NielsenRadioPeriodID)

                            If MeasurementTrendsDataRow IsNot Nothing Then

                                If DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) Then

                                    Universe = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioPeriodID = NielsenRadioPeriodID).Average(Function(Entity) Entity.Population)

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioPeriodID = NielsenRadioPeriodID).Sum(Function(Entity) (Entity.AQH * 100) / Universe)
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = Math.Round(MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString), 1, MidpointRounding.AwayFromZero)

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString)

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioPeriodID = NielsenRadioPeriodID).Sum(Function(Entity) Entity.AQH)
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString)

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0 'ComboReach * 100
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = Math.Round(MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString), 1, MidpointRounding.AwayFromZero)
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0 'ComboReach * Universe

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0

                                Else

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioPeriodID = NielsenRadioPeriodID).Average(Function(Entity) Entity.AQHRating)

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = Math.Round(MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString), 1, MidpointRounding.AwayFromZero)

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString)
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioPeriodID = NielsenRadioPeriodID).Average(Function(Entity) Entity.AQH)
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioPeriodID = NielsenRadioPeriodID).Average(Function(Entity) Entity.AQH)

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioPeriodID = NielsenRadioPeriodID).Average(Function(Entity) Entity.CumeRating)
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = Math.Round(MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString), 1, MidpointRounding.AwayFromZero)

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = RadioWorksheetRatingDatas.Where(Function(Entity) Entity.NielsenRadioPeriodID = NielsenRadioPeriodID).Average(Function(Entity) Entity.CUME)

                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0

                                End If

                            End If

                        Next

                    Else

                        For Each WorksheetMarketNielsenRadioPeriod In MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenRadioPeriods

                            MeasurementTrendsDataRow = MeasurementTrendsDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetails_MeasurementTrendsColumns.ID.ToString) <> ProjectionLineID AndAlso
                                                                                                                                                   DR(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = WorksheetMarketNielsenRadioPeriod.NielsenRadioPeriodID)

                            If MeasurementTrendsDataRow IsNot Nothing Then

                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                            End If

                        Next

                    End If

                Else

                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                    For Each WorksheetMarketNielsenRadioPeriod In MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenRadioPeriods

                        MeasurementTrendsDataRow = MeasurementTrendsDataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetails_MeasurementTrendsColumns.ID.ToString) <> ProjectionLineID AndAlso
                                                                                                                                               DR(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = WorksheetMarketNielsenRadioPeriod.NielsenRadioPeriodID)

                        If MeasurementTrendsDataRow IsNot Nothing Then

                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                            MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                        End If

                    Next

                End If

            Else

                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

            End If

            'MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.EndLoadData()
            MeasurementTrendsDataTable.EndLoadData()

            MarketDetails_RefreshsMeasurementTrendsDataTableDefaultRows = MeasurementTrendsDataTable

        End Function
        Public Function MarketDetails_LoadMeasurementTrendsDetails(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                   RowIndex As Integer, MeasurementTrendsDataRowIndex As Integer) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail)

            'objects
            Dim DataTable As System.Data.DataTable = Nothing
            Dim MeasurementTrendsDataRow As System.Data.DataRow = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim MediaDemographicID As Integer = 0
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim ShareBookID As Integer = 0
            Dim HPUTBookID As Integer = 0
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCode As Integer = 0
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim NielsenMarketNumber As Integer = 0
            Dim NielsenTVStationCode As Integer = 0
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim MeasurementTrendDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail) = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim ShareHPUTBook As AdvantageFramework.DTO.Media.ShareHPUTBook = Nothing
            Dim PrimaryMediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim SecondaryMediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim StationNumber As Integer = -1

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.IsNielsenSetup AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                    String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode) = False AndAlso RowIndex > -1 AndAlso
                    MeasurementTrendsDataRowIndex > 0 Then

                MeasurementTrendsDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows(MeasurementTrendsDataRowIndex)

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode

                VendorNCCTVSyscodeID = DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                    If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                            IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                        NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                    End If

                Else

                    NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                End If

                DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                If MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowPrimaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) > 0 Then

                    MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowSecondaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                    MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                End If

                If MediaDemographicID > 0 AndAlso NielsenTVStationCode <> 0 AndAlso MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) > 0 AndAlso
                        DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                        String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        HPUTBookID = 0

                        MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                        If MediaDemographic IsNot Nothing Then

                            MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                .Description = MediaDemographic.Description}}

                        Else

                            MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                        End If

                        MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                              .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                        StationCode = NielsenTVStationCode

                        WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                        WorksheetMarketDetail.ID = 1

                        DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail)}

                    End Using

                    ShareBookID = MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                        MeasurementTrendDetails = GetCDMAMeasurementTrendDetails(NielsenMarketNumber, ShareBookID, HPUTBookID, MediaDemoTypes, MediaDemoDetailTypes, StationCode, MediaSpotTVResearchDaytimeTypes, VendorNCCTVSyscodeID)

                    Else

                        MeasurementTrendDetails = GetMeasurementTrendDetails(NielsenMarketNumber, ShareBookID, HPUTBookID, MediaDemoTypes, MediaDemoDetailTypes, StationCode, MediaSpotTVResearchDaytimeTypes)

                    End If

                Else

                    MeasurementTrendDetails = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail)

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.HasValue AndAlso RowIndex > -1 AndAlso
                    MeasurementTrendsDataRowIndex > 0 Then

                MeasurementTrendsDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows(MeasurementTrendsDataRowIndex)

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                VendorNCCTVSyscodeID = DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                    If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                        NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                    End If

                Else

                    NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                End If

                DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                If MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowPrimaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) > 0 Then

                    MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowSecondaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                    MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                End If

                If MediaDemographicID > 0 AndAlso NielsenTVStationCode <> 0 AndAlso MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) > 0 AndAlso
                        DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                        String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                    DemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        DbContext.Database.Connection.Open()

                        MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaDemographicID)

                        If MediaDemographic IsNot Nothing Then

                            DemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic(MediaDemographic))

                        End If

                        If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                            If (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                Where Entity.NetworkNumber = NielsenTVStationCode
                                Select Entity).Any Then

                                StationNumber = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                 Where Entity.NetworkNumber = NielsenTVStationCode
                                                 Select Entity).First.Number

                            End If

                        Else

                            If (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                Where Entity.ID = NielsenTVStationCode
                                Select Entity).Any Then

                                StationNumber = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                 Where Entity.ID = NielsenTVStationCode
                                                 Select Entity).First.Number

                            End If

                        End If

                        ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)

                        ShareHPUTBook = New AdvantageFramework.DTO.Media.ShareHPUTBook

                        ShareHPUTBook.ShareBookID = MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString)

                        ShareHPUTBooks.Add(ShareHPUTBook)

                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                        WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                        WorksheetMarketDetail.ID = 1

                        DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                        MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                        Try

                            'MeasurementTrendDetails = AdvantageFramework.ComScore.GetMeasurementTrendDetails(DbContext, CallLetters, DemographicList, ShareHPUTBooks,
                            '                                                                                      MediaSpotTVResearchDaytimeTypes,
                            '                                                                                      MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber)

                            MeasurementTrendDetails = AdvantageFramework.ComScore.GetMeasurementTrendDetailsCache(DbContext, StationNumber, DemographicList, ShareHPUTBooks,
                                                                                                                  MediaSpotTVResearchDaytimeTypes,
                                                                                                                  MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber)

                        Catch ex As Exception
                            MeasurementTrendDetails = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail)
                        End Try

                    End Using

                Else

                    MeasurementTrendDetails = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail)

                End If

            Else

                MeasurementTrendDetails = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MeasurementTrendDetail)

            End If

            MarketDetails_LoadMeasurementTrendsDetails = MeasurementTrendDetails

        End Function
        Private Sub MarketDetails_RefreshsMeasurementTrendsDataTableProjectionRow(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                                  RowIndex As Integer)

            'objects
            Dim MeasurementTrendsDataRow As System.Data.DataRow = Nothing
            Dim DataRow As System.Data.DataRow = Nothing

            'MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.BeginLoadData()

            MeasurementTrendsDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows(0)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso RowIndex > -1 Then

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = DataRow(MarketDetailsColumns.BookProgram.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = DataRow(MarketDetailsColumns.Program.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryRating.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = DataRow(MarketDetailsColumns.PrimaryRating.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = DataRow(MarketDetailsColumns.BookPrimaryShare.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = DataRow(MarketDetailsColumns.PrimaryShare.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = DataRow(MarketDetailsColumns.PrimaryHPUT.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = DataRow(MarketDetailsColumns.PrimaryImpressions.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = DataRow(MarketDetailsColumns.PrimaryAQH.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = DataRow(MarketDetailsColumns.PrimaryCume.ToString)

                End If

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID1.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID2.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID3.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID4.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.NeilsenRadioPeriodID5.GetValueOrDefault(0)
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                    MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

                End If

            Else

                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HPUTBookID.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID1.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID2.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID3.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID4.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.NeilsenRadioPeriodID5.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookProgram.ToString) = String.Empty
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Program.ToString) = String.Empty
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookRating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Rating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookShare.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Share.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.HUTPUT.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookImpressions.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Impressions.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQHRating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQHRating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookAQH.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.AQH.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.CumeRating.ToString) = 0
                MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.Cume.ToString) = 0

            End If

            ' MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.EndLoadData()

        End Sub
        Private Sub MarketDetails_LoadWorksheetMarketNielsenTVBooks(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenTVBook.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenTVBook(Entity)).ToList

                    End Using

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks = New List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenTVBook)

                End If

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenTVBooks = New List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenTVBook)

            End If

        End Sub
        Private Sub MarketDetails_LoadWorksheetMarketNielsenRadioPeriods(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenRadioPeriods = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenRadioPeriod.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenRadioPeriod(Entity)).ToList

                    End Using

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenRadioPeriods = New List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenRadioPeriod)

                End If

            Else

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketNielsenRadioPeriods = New List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenRadioPeriod)

            End If

        End Sub
        Private Function MarketDetails_CalculateProrateSecondaryRating(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                       BookSecondaryRating As Decimal, BookPrimaryRating As Decimal, PrimaryRating As Decimal) As Decimal

            'objects
            Dim ProrateSecondaryRating As Decimal = 0

            If BookPrimaryRating <> 0 Then

                ProrateSecondaryRating = BookSecondaryRating * PrimaryRating / BookPrimaryRating

            End If

            MarketDetails_CalculateProrateSecondaryRating = ProrateSecondaryRating

        End Function
        Private Function MarketDetails_CalculateProrateSecondaryShare(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                      BookSecondaryShare As Decimal, BookPrimaryShare As Decimal, PrimaryShare As Decimal) As Decimal

            'objects
            Dim ProrateSecondaryShare As Decimal = 0

            If BookPrimaryShare <> 0 Then

                ProrateSecondaryShare = BookSecondaryShare * PrimaryShare / BookPrimaryShare

            End If

            MarketDetails_CalculateProrateSecondaryShare = ProrateSecondaryShare

        End Function
        Public Function MarketDetails_CreateLeadInLeadOutParameters(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                    RowIndex As Integer, MeasurementTrendsDataRowIndex As Integer, Week As Integer, ShowLeadInLeadOut As Boolean, IsQuarterHours As Boolean) As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutParameters

            'objects
            Dim LeadInLeadOutParameters As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutParameters = Nothing
            Dim MeasurementTrendsDataRow As System.Data.DataRow = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim MediaDemographicID As Integer = 0
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim ShareBookID As Integer = 0
            Dim HPUTBookID As Integer = 0
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCode As Integer = 0
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim NielsenMarketNumber As Integer = 0
            Dim NielsenTVStationCode As Integer = 0
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim NewDaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim LeadInDaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim LeadOutDaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim NewStartTime As Date = Date.MinValue
            Dim NewEndTime As Date = Date.MinValue
            Dim NewLeadInStartTime As Date = Date.MinValue
            Dim NewLeadInEndTime As Date = Date.MinValue
            Dim NewLeadOutStartTime As Date = Date.MinValue
            Dim NewLeadOutEndTime As Date = Date.MinValue
            Dim PercentStartTime1 As Decimal = 0
            Dim PercentStartTime2 As Decimal = 0
            Dim PercentEndTime1 As Decimal = 0
            Dim PercentEndTime2 As Decimal = 0
            Dim CreateParameters As Boolean = True
            Dim StartEndTime As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutStartEndTime = Nothing
            Dim LeadInStartEndTime As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutStartEndTime = Nothing
            Dim LeadOutStartEndTime As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutStartEndTime = Nothing
            Dim CallLetters As String = String.Empty
            Dim StationNumber As Integer = -1

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV AndAlso
                    ((MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen AndAlso
                      MediaBroadcastWorksheetMarketDetailsViewModel.IsNielsenSetup AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                      String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode) = False) OrElse
                     (MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore AndAlso
                      MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                      MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.HasValue)) AndAlso
                RowIndex > -1 AndAlso MeasurementTrendsDataRowIndex > -1 Then

                MeasurementTrendsDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MeasurementTrendsDataTable.Rows(MeasurementTrendsDataRowIndex)

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                NielsenMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode

                VendorNCCTVSyscodeID = DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                    If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                            IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                        NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                    End If

                Else

                    NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                End If

                DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                If MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowPrimaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) > 0 Then

                    MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowSecondaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                    MediaDemographicID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID

                End If

                If MediaDemographicID > 0 AndAlso NielsenTVStationCode <> 0 AndAlso MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString) > 0 AndAlso
                        DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                        String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        HPUTBookID = 0

                        MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaDemographicID)

                        If MediaDemographic IsNot Nothing Then

                            MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                .Description = MediaDemographic.Description}}

                        Else

                            MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                        End If

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen Then

                            MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = MediaDemographicID).ToList
                                                    Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                  .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                        End If

                        StationCode = NielsenTVStationCode

                        WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                        WorksheetMarketDetail.ID = 1

                        NewDaysAndTime = DaysAndTime.Clone
                        LeadInDaysAndTime = DaysAndTime.Clone
                        LeadOutDaysAndTime = DaysAndTime.Clone

                        If IsQuarterHours Then

                            If String.IsNullOrWhiteSpace(NewDaysAndTime.StartTime) = False AndAlso
                                    Date.TryParse(Now.ToShortDateString & " " & NewDaysAndTime.StartTime, NewStartTime) Then

                                NewDaysAndTime.StartTime = NewStartTime.ToString("hh:mm tt")

                                If NewStartTime.Minute = 0 OrElse NewStartTime.Minute = 15 OrElse NewStartTime.Minute = 30 OrElse NewStartTime.Minute = 45 Then

                                    LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime.AddMinutes(-15), .EndDateTime = NewStartTime}

                                    PercentStartTime1 = 0
                                    PercentStartTime2 = 0

                                ElseIf NewStartTime.Minute > 0 AndAlso NewStartTime.Minute < 15 Then

                                    If NewStartTime.Minute <= 4 Then

                                        PercentStartTime1 = (NewStartTime.AddMinutes(0).Minute * 2) / 10
                                        PercentStartTime2 = (10 - (NewStartTime.AddMinutes(0).Minute * 2)) / 10

                                        NewStartTime = NewStartTime.AddMinutes(0 - NewStartTime.Minute)

                                        LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime.AddMinutes(-15), .EndDateTime = NewStartTime}

                                    Else

                                        NewStartTime = NewStartTime.AddMinutes(0 - NewStartTime.Minute)

                                        LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime, .EndDateTime = NewStartTime.AddMinutes(15)}

                                        PercentStartTime1 = 0
                                        PercentStartTime2 = 0

                                    End If

                                ElseIf NewStartTime.Minute > 15 AndAlso NewStartTime.Minute < 30 Then

                                    If NewStartTime.Minute <= 19 Then

                                        PercentStartTime1 = (NewStartTime.AddMinutes(-15).Minute * 2) / 10
                                        PercentStartTime2 = (10 - (NewStartTime.AddMinutes(-15).Minute * 2)) / 10

                                        NewStartTime = NewStartTime.AddMinutes(15 - NewStartTime.Minute)

                                        LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime.AddMinutes(-15), .EndDateTime = NewStartTime}

                                    Else

                                        NewStartTime = NewStartTime.AddMinutes(15 - NewStartTime.Minute)

                                        LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime, .EndDateTime = NewStartTime.AddMinutes(15)}

                                        PercentStartTime1 = 0
                                        PercentStartTime2 = 0

                                    End If

                                ElseIf NewStartTime.Minute > 30 AndAlso NewStartTime.Minute < 45 Then

                                    If NewStartTime.Minute <= 34 Then

                                        PercentStartTime1 = (NewStartTime.AddMinutes(-30).Minute * 2) / 10
                                        PercentStartTime2 = (10 - (NewStartTime.AddMinutes(-30).Minute * 2)) / 10

                                        NewStartTime = NewStartTime.AddMinutes(30 - NewStartTime.Minute)

                                        LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime.AddMinutes(-15), .EndDateTime = NewStartTime}

                                    Else

                                        NewStartTime = NewStartTime.AddMinutes(30 - NewStartTime.Minute)

                                        LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime, .EndDateTime = NewStartTime.AddMinutes(15)}

                                        PercentStartTime1 = 0
                                        PercentStartTime2 = 0

                                    End If

                                ElseIf NewStartTime.Minute > 45 Then

                                    If NewStartTime.Minute <= 49 Then

                                        PercentStartTime1 = (NewStartTime.AddMinutes(-45).Minute * 2) / 10
                                        PercentStartTime2 = (10 - (NewStartTime.AddMinutes(-45).Minute * 2)) / 10

                                        NewStartTime = NewStartTime.AddMinutes(45 - NewStartTime.Minute)

                                        LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime.AddMinutes(-15), .EndDateTime = NewStartTime}

                                    Else

                                        NewStartTime = NewStartTime.AddMinutes(45 - NewStartTime.Minute)

                                        LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime, .EndDateTime = NewStartTime.AddMinutes(15)}

                                        PercentStartTime1 = 0
                                        PercentStartTime2 = 0

                                    End If

                                End If

                            Else

                                CreateParameters = False

                            End If

                            If String.IsNullOrWhiteSpace(NewDaysAndTime.EndTime) = False AndAlso
                                    Date.TryParse(Now.ToShortDateString & " " & NewDaysAndTime.EndTime, NewEndTime) Then

                                If NewStartTime.Hour >= 3 AndAlso NewEndTime.Hour < 3 Then

                                    NewEndTime = NewEndTime.AddDays(1)

                                End If

                                NewDaysAndTime.EndTime = NewEndTime.ToString("hh:mm tt")

                                If NewEndTime.Minute = 0 OrElse NewEndTime.Minute = 15 OrElse NewEndTime.Minute = 30 OrElse NewEndTime.Minute = 45 Then

                                    LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                    PercentEndTime1 = 0
                                    PercentEndTime2 = 0

                                ElseIf NewEndTime.Hour = 2 AndAlso NewEndTime.Minute = 59 Then

                                    LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime.AddMinutes(1), .EndDateTime = NewEndTime.AddMinutes(16)}

                                    PercentEndTime1 = 0
                                    PercentEndTime2 = 0

                                ElseIf NewEndTime.Minute > 0 AndAlso NewEndTime.Minute < 15 Then

                                    If NewEndTime.Minute >= 11 Then

                                        PercentEndTime1 = (NewEndTime.AddMinutes(-10).Minute * 2) / 10
                                        PercentEndTime2 = (10 - (NewEndTime.AddMinutes(-10).Minute * 2)) / 10

                                        NewEndTime = NewEndTime.AddMinutes(15 - NewEndTime.Minute)

                                        LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                    Else

                                        NewEndTime = NewEndTime.AddMinutes(15 - NewEndTime.Minute)

                                        LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                        PercentEndTime1 = 0
                                        PercentEndTime2 = 0

                                    End If

                                ElseIf NewEndTime.Minute > 15 AndAlso NewEndTime.Minute < 30 Then

                                    If NewEndTime.Minute >= 26 Then

                                        PercentEndTime1 = (NewEndTime.AddMinutes(-25).Minute * 2) / 10
                                        PercentEndTime2 = (10 - (NewEndTime.AddMinutes(-25).Minute * 2)) / 10

                                        NewEndTime = NewEndTime.AddMinutes(30 - NewEndTime.Minute)

                                        LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                    Else

                                        NewEndTime = NewEndTime.AddMinutes(30 - NewEndTime.Minute)

                                        LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                        PercentEndTime1 = 0
                                        PercentEndTime2 = 0

                                    End If

                                ElseIf NewEndTime.Minute > 30 AndAlso NewEndTime.Minute < 45 Then

                                    If NewEndTime.Minute >= 41 Then

                                        PercentEndTime1 = (NewEndTime.AddMinutes(-40).Minute * 2) / 10
                                        PercentEndTime2 = (10 - (NewEndTime.AddMinutes(-40).Minute * 2)) / 10

                                        NewEndTime = NewEndTime.AddMinutes(45 - NewEndTime.Minute)

                                        LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                    Else

                                        NewEndTime = NewEndTime.AddMinutes(45 - NewEndTime.Minute)

                                        LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                        PercentEndTime1 = 0
                                        PercentEndTime2 = 0

                                    End If

                                ElseIf NewEndTime.Minute > 45 Then

                                    If NewEndTime.Minute >= 56 Then

                                        PercentEndTime1 = (NewEndTime.AddMinutes(-55).Minute * 2) / 10
                                        PercentEndTime2 = (10 - (NewEndTime.AddMinutes(-55).Minute * 2)) / 10

                                        NewEndTime = NewEndTime.AddMinutes(60 - NewEndTime.Minute)

                                        LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                    Else

                                        NewEndTime = NewEndTime.AddMinutes(60 - NewEndTime.Minute)

                                        LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                        PercentEndTime1 = 0
                                        PercentEndTime2 = 0

                                    End If

                                End If

                            Else

                                CreateParameters = False

                            End If

                        Else

                            If String.IsNullOrWhiteSpace(NewDaysAndTime.StartTime) = False AndAlso
                                    Date.TryParse(Now.ToShortDateString & " " & NewDaysAndTime.StartTime, NewStartTime) Then

                                NewDaysAndTime.StartTime = NewStartTime.ToString("hh:mm tt")

                                If NewStartTime.Minute > 0 AndAlso NewStartTime.Minute < 59 Then

                                    NewStartTime = NewStartTime.AddMinutes(-NewStartTime.Minute)

                                    LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime.AddMinutes(-15), .EndDateTime = NewStartTime}

                                    PercentStartTime1 = 0
                                    PercentStartTime2 = 0

                                ElseIf NewStartTime.Minute = 0 Then

                                    LeadInStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime.AddMinutes(-15), .EndDateTime = NewStartTime}

                                    PercentStartTime1 = 0
                                    PercentStartTime2 = 0

                                End If

                            Else

                                CreateParameters = False

                            End If

                            If String.IsNullOrWhiteSpace(NewDaysAndTime.EndTime) = False AndAlso
                                    Date.TryParse(Now.ToShortDateString & " " & NewDaysAndTime.EndTime, NewEndTime) Then

                                If NewStartTime.Hour >= 3 AndAlso NewEndTime.Hour < 3 Then

                                    NewEndTime = NewEndTime.AddDays(1)

                                End If

                                NewDaysAndTime.EndTime = NewEndTime.ToString("hh:mm tt")

                                If NewEndTime.Minute > 0 AndAlso NewEndTime.Minute <= 59 Then

                                    NewEndTime = NewEndTime.AddMinutes(60 - NewEndTime.Minute)

                                    LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                    PercentEndTime1 = 0
                                    PercentEndTime2 = 0

                                ElseIf NewEndTime.Minute = 0 Then

                                    LeadOutStartEndTime = New Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewEndTime, .EndDateTime = NewEndTime.AddMinutes(15)}

                                    PercentEndTime1 = 0
                                    PercentEndTime2 = 0

                                End If

                            Else

                                CreateParameters = False

                            End If

                        End If

                        NewDaysAndTime.SaveToEntity(WorksheetMarketDetail)

                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail)}

                        If LeadInStartEndTime IsNot Nothing Then

                            LeadInDaysAndTime.StartTime = LeadInStartEndTime.StartDateTime.ToString("hh:mm tt")

                            If LeadInStartEndTime.EndDateTime.Hour = 3 AndAlso LeadInStartEndTime.EndDateTime.Minute = 0 Then

                                LeadInDaysAndTime.EndTime = LeadInStartEndTime.EndDateTime.AddMinutes(-1).ToString("hh:mm tt")

                            Else

                                LeadInDaysAndTime.EndTime = LeadInStartEndTime.EndDateTime.ToString("hh:mm tt")

                            End If

                            WorksheetMarketDetail.ID = 2

                            LeadInDaysAndTime.SaveToEntity(WorksheetMarketDetail)

                            MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                        End If

                        If LeadOutStartEndTime IsNot Nothing Then

                            LeadOutDaysAndTime.StartTime = LeadOutStartEndTime.StartDateTime.ToString("hh:mm tt")

                            If LeadOutStartEndTime.EndDateTime.Hour = 3 AndAlso LeadOutStartEndTime.EndDateTime.Minute = 0 Then

                                LeadOutDaysAndTime.EndTime = LeadOutStartEndTime.EndDateTime.AddMinutes(-1).ToString("hh:mm tt")

                            Else

                                LeadOutDaysAndTime.EndTime = LeadOutStartEndTime.EndDateTime.ToString("hh:mm tt")

                            End If

                            WorksheetMarketDetail.ID = 3

                            LeadOutDaysAndTime.SaveToEntity(WorksheetMarketDetail)

                            MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                        End If

                        If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore Then

                            If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                If (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                    Where Entity.NetworkNumber = NielsenTVStationCode
                                    Select Entity).Any Then

                                    CallLetters = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                   Where Entity.NetworkNumber = NielsenTVStationCode
                                                   Select Entity).First.CallLetters

                                    StationNumber = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                     Where Entity.NetworkNumber = NielsenTVStationCode
                                                     Select Entity).First.Number

                                End If

                            Else

                                If (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                    Where Entity.ID = NielsenTVStationCode
                                    Select Entity).Any Then

                                    CallLetters = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                   Where Entity.ID = NielsenTVStationCode
                                                   Select Entity).First.CallLetters

                                    StationNumber = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                     Where Entity.ID = NielsenTVStationCode
                                                     Select Entity).First.Number

                                End If

                            End If

                        End If

                    End Using

                    ShareBookID = MeasurementTrendsDataRow(MarketDetails_MeasurementTrendsColumns.BookID.ToString)

                    If CreateParameters Then

                        LeadInLeadOutParameters = New AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutParameters

                        LeadInLeadOutParameters.ShowLeadInLeadOut = ShowLeadInLeadOut
                        LeadInLeadOutParameters.NielsenMarketNumber = NielsenMarketNumber
                        LeadInLeadOutParameters.ShareBookID = ShareBookID
                        LeadInLeadOutParameters.HPUTBookID = HPUTBookID
                        LeadInLeadOutParameters.MediaDemoTypes = MediaDemoTypes
                        LeadInLeadOutParameters.MediaDemoDetailTypes = MediaDemoDetailTypes
                        LeadInLeadOutParameters.StationCode = StationCode
                        LeadInLeadOutParameters.MediaSpotTVResearchDaytimeTypes = MediaSpotTVResearchDaytimeTypes
                        LeadInLeadOutParameters.VendorNCCTVSyscodeID = VendorNCCTVSyscodeID

                        If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.HasValue Then

                            LeadInLeadOutParameters.TVGeography = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.Value

                        End If

                        LeadInLeadOutParameters.Week = Week
                        LeadInLeadOutParameters.ComscoreDemoNumber = MediaDemographic.ComscoreDemoNumber.GetValueOrDefault(0)
                        LeadInLeadOutParameters.ComscoreMarketNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.GetValueOrDefault(0)
                        LeadInLeadOutParameters.CallLetters = CallLetters
                        LeadInLeadOutParameters.StationNumber = StationNumber

                        'If LeadInStartEndTime.EndDateTime = LeadOutStartEndTime.StartDateTime Then

                        '    NewStartTime = LeadInStartEndTime.StartDateTime

                        'Else

                        '    NewStartTime = LeadInStartEndTime.EndDateTime

                        'End If
                        Date.TryParse(Now.ToShortDateString & " " & NewDaysAndTime.StartTime, NewStartTime)

                        If IsQuarterHours Then

                            Do While True

                                LeadInLeadOutParameters.StartEndTimes.Add(New AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime, .EndDateTime = NewStartTime.AddMinutes(15)})

                                If NewStartTime.AddMinutes(15) >= LeadOutStartEndTime.StartDateTime Then

                                    Exit Do

                                End If

                                NewStartTime = NewStartTime.AddMinutes(15)

                            Loop

                        Else

                            Do While True

                                LeadInLeadOutParameters.StartEndTimes.Add(New AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutStartEndTime With {.StartDateTime = NewStartTime, .EndDateTime = NewStartTime.AddMinutes(60)})

                                If NewStartTime.AddMinutes(60) >= LeadOutStartEndTime.StartDateTime Then

                                    Exit Do

                                End If

                                NewStartTime = NewStartTime.AddMinutes(60)

                            Loop


                        End If

                        LeadInLeadOutParameters.LeadInStartEndTime = LeadInStartEndTime
                        LeadInLeadOutParameters.LeadOutStartEndTime = LeadOutStartEndTime
                        LeadInLeadOutParameters.PercentStartTime1 = PercentStartTime1
                        LeadInLeadOutParameters.PercentStartTime2 = PercentStartTime2
                        LeadInLeadOutParameters.PercentEndTime1 = PercentEndTime1
                        LeadInLeadOutParameters.PercentEndTime2 = PercentEndTime2
                        LeadInLeadOutParameters.IsQuarterHours = IsQuarterHours

                    End If

                End If

            End If

            MarketDetails_CreateLeadInLeadOutParameters = LeadInLeadOutParameters

        End Function
        Public Function MarketDetails_LoadLeadInLeadOutDetails(RatingsServiceID As AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID,
                                                               LeadInLeadOutParameters As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutParameters) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary)

            'objects
            Dim LeadInLeadOutSummaries As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary) = Nothing
            Dim LeadInLeadOutSummary As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary = Nothing
            Dim AllLeadInLeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail) = Nothing
            Dim SummaryDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail) = Nothing
            Dim LeadInDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail) = Nothing
            Dim LeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail) = Nothing

            If LeadInLeadOutParameters IsNot Nothing Then

                If RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Nielsen Then

                    If LeadInLeadOutParameters.TVGeography = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                        AllLeadInLeadOutDetails = GetCDMALeadInLeadOutDetails(LeadInLeadOutParameters.NielsenMarketNumber, LeadInLeadOutParameters.ShareBookID, LeadInLeadOutParameters.HPUTBookID,
                                                                              LeadInLeadOutParameters.MediaDemoTypes, LeadInLeadOutParameters.MediaDemoDetailTypes, LeadInLeadOutParameters.StationCode,
                                                                              LeadInLeadOutParameters.MediaSpotTVResearchDaytimeTypes, LeadInLeadOutParameters.VendorNCCTVSyscodeID)

                    Else

                        AllLeadInLeadOutDetails = GetLeadInLeadOutDetails(LeadInLeadOutParameters.NielsenMarketNumber, LeadInLeadOutParameters.ShareBookID, LeadInLeadOutParameters.HPUTBookID,
                                                                          LeadInLeadOutParameters.MediaDemoTypes, LeadInLeadOutParameters.MediaDemoDetailTypes, LeadInLeadOutParameters.StationCode,
                                                                          LeadInLeadOutParameters.MediaSpotTVResearchDaytimeTypes)

                    End If

                    If LeadInLeadOutParameters.Week > 0 Then

                        AllLeadInLeadOutDetails = AllLeadInLeadOutDetails.Where(Function(Entity) Entity.Week = LeadInLeadOutParameters.Week).ToList

                    End If

                Else

                    Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                        DbContext.Database.Connection.Open()

                        'AllLeadInLeadOutDetails = AdvantageFramework.ComScore.GetLeadInLeadOutDetails(DbContext, LeadInLeadOutParameters.ComscoreMarketNumber,
                        '                                                                              LeadInLeadOutParameters.ShareBookID, LeadInLeadOutParameters.HPUTBookID,
                        '                                                                              LeadInLeadOutParameters.CallLetters, LeadInLeadOutParameters.ComscoreDemoNumber,
                        '                                                                              LeadInLeadOutParameters.MediaSpotTVResearchDaytimeTypes, WeekDate)

                        AllLeadInLeadOutDetails = AdvantageFramework.ComScore.GetLeadInLeadOutDetailsCache(DbContext, LeadInLeadOutParameters.ComscoreMarketNumber,
                                                                                                           LeadInLeadOutParameters.ShareBookID,
                                                                                                           LeadInLeadOutParameters.StationNumber, LeadInLeadOutParameters.ComscoreDemoNumber,
                                                                                                           LeadInLeadOutParameters.MediaSpotTVResearchDaytimeTypes)
                    End Using

                End If

                If AllLeadInLeadOutDetails IsNot Nothing AndAlso AllLeadInLeadOutDetails.Count > 0 Then

                    SummaryDetails = AllLeadInLeadOutDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = 1).ToList
                    LeadInDetails = AllLeadInLeadOutDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = 2).ToList
                    LeadOutDetails = AllLeadInLeadOutDetails.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = 3).ToList

                End If

                LeadInLeadOutSummaries = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary)

                If LeadInLeadOutParameters.IsQuarterHours Then

                    'create lead in 
                    If LeadInLeadOutParameters.ShowLeadInLeadOut Then

                        LeadInLeadOutSummaries.Add(MarketDetails_CreateLeadInLeadOutSummaryForLeadInTime(LeadInLeadOutParameters,
                                                                                                         LeadInDetails))

                    End If

                    For Each StartEndTime In LeadInLeadOutParameters.StartEndTimes

                        LeadInLeadOutSummaries.Add(MarketDetails_CreateLeadInLeadOutSummary(StartEndTime, SummaryDetails, LeadInLeadOutParameters.IsQuarterHours))

                    Next

                    'create lead out 
                    If LeadInLeadOutParameters.ShowLeadInLeadOut Then

                        LeadInLeadOutSummaries.Add(MarketDetails_CreateLeadInLeadOutSummaryForLeadOutTime(LeadInLeadOutParameters,
                                                                                                          LeadOutDetails))

                    End If

                Else

                    'create lead in 
                    If LeadInLeadOutParameters.ShowLeadInLeadOut Then

                        LeadInLeadOutSummaries.Add(MarketDetails_CreateLeadInLeadOutSummaryForLeadInTime(LeadInLeadOutParameters,
                                                                                                         LeadInDetails))

                    End If

                    For Each StartEndTime In LeadInLeadOutParameters.StartEndTimes

                        LeadInLeadOutSummaries.Add(MarketDetails_CreateLeadInLeadOutSummary(StartEndTime, SummaryDetails, LeadInLeadOutParameters.IsQuarterHours))

                    Next

                    'create lead out 
                    If LeadInLeadOutParameters.ShowLeadInLeadOut Then

                        LeadInLeadOutSummaries.Add(MarketDetails_CreateLeadInLeadOutSummaryForLeadOutTime(LeadInLeadOutParameters,
                                                                                                          LeadOutDetails))

                    End If

                End If

            End If

            MarketDetails_LoadLeadInLeadOutDetails = LeadInLeadOutSummaries

        End Function
        Private Function MarketDetails_CreateLeadInLeadOutSummaryForLeadInTime(LeadInLeadOutParameters As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutParameters,
                                                                               AllLeadInLeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail)) As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary

            'objects
            Dim LeadInLeadOutSummary As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary = Nothing
            Dim StartDateTime As Date = Date.MinValue
            Dim StartTime As Integer = 0
            Dim LeadInLeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail) = Nothing
            Dim Rating1 As Decimal = 0
            Dim Rating2 As Decimal = 0

            LeadInLeadOutSummary = New AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary

            LeadInLeadOutSummary.TimeSlot = "Lead-In"

            If LeadInLeadOutParameters.PercentStartTime2 <> 0 OrElse LeadInLeadOutParameters.PercentStartTime1 <> 0 Then

                StartDateTime = LeadInLeadOutParameters.LeadInStartEndTime.StartDateTime.AddMinutes(15)

                If DatePart(DateInterval.Hour, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) * 100 + DatePart(DateInterval.Minute, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) < 300 Then

                    StartTime = DatePart(DateInterval.Hour, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) * 100 + DatePart(DateInterval.Minute, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) + 2400

                Else

                    StartTime = DatePart(DateInterval.Hour, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) * 100 + DatePart(DateInterval.Minute, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString))

                End If

                LeadInLeadOutDetails = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail)

                LeadInLeadOutDetails.AddRange(AllLeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadInStartEndTime.StartHour).ToList)
                LeadInLeadOutDetails.AddRange(AllLeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).ToList)

                If LeadInLeadOutDetails.Any Then

                    If LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).Distinct.Count > 1 Then

                        LeadInLeadOutSummary.Program = "Various"

                    Else

                        LeadInLeadOutSummary.Program = LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).FirstOrDefault

                    End If

                    If LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadInStartEndTime.StartHour).Any Then

                        Rating1 = LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadInStartEndTime.StartHour).Select(Function(Entity) Entity.Rating).Average

                        LeadInLeadOutSummary.Impressions = (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadInStartEndTime.StartHour).Select(Function(Entity) Entity.Impressions).Average * LeadInLeadOutParameters.PercentStartTime2)

                        LeadInLeadOutSummary.Share = (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadInStartEndTime.StartHour).Select(Function(Entity) Entity.Share).Average * LeadInLeadOutParameters.PercentStartTime2)

                        LeadInLeadOutSummary.HPUT = (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadInStartEndTime.StartHour).Select(Function(Entity) Entity.HPUT).Average * LeadInLeadOutParameters.PercentStartTime2)

                    End If

                    If LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Any Then

                        Rating2 = LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Select(Function(Entity) Entity.Rating).Average

                        LeadInLeadOutSummary.Impressions += (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Select(Function(Entity) Entity.Impressions).Average * LeadInLeadOutParameters.PercentStartTime1)

                        LeadInLeadOutSummary.Share += (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Select(Function(Entity) Entity.Share).Average * LeadInLeadOutParameters.PercentStartTime1)

                        LeadInLeadOutSummary.HPUT += (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Select(Function(Entity) Entity.HPUT).Average * LeadInLeadOutParameters.PercentStartTime1)

                    End If

                    LeadInLeadOutSummary.Rating = (Rating1 * LeadInLeadOutParameters.PercentStartTime2) + (Rating2 * LeadInLeadOutParameters.PercentStartTime1)

                Else

                    LeadInLeadOutSummary.Program = String.Empty
                    LeadInLeadOutSummary.Rating = 0
                    LeadInLeadOutSummary.Impressions = 0
                    LeadInLeadOutSummary.Share = 0
                    LeadInLeadOutSummary.HPUT = 0

                End If

            Else

                LeadInLeadOutDetails = AllLeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadInStartEndTime.StartHour).ToList

                If LeadInLeadOutDetails.Any Then

                    If LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).Distinct.Count > 1 Then

                        LeadInLeadOutSummary.Program = "Various"

                    Else

                        LeadInLeadOutSummary.Program = LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).FirstOrDefault

                    End If

                    LeadInLeadOutSummary.Rating = LeadInLeadOutDetails.Select(Function(Entity) Entity.Rating).Average
                    LeadInLeadOutSummary.Impressions = LeadInLeadOutDetails.Select(Function(Entity) Entity.Impressions).Average
                    LeadInLeadOutSummary.Share = LeadInLeadOutDetails.Select(Function(Entity) Entity.Share).Average
                    LeadInLeadOutSummary.HPUT = LeadInLeadOutDetails.Select(Function(Entity) Entity.HPUT).Average

                Else

                    LeadInLeadOutSummary.Program = String.Empty
                    LeadInLeadOutSummary.Rating = 0
                    LeadInLeadOutSummary.Impressions = 0
                    LeadInLeadOutSummary.Share = 0
                    LeadInLeadOutSummary.HPUT = 0

                End If

            End If

            MarketDetails_CreateLeadInLeadOutSummaryForLeadInTime = LeadInLeadOutSummary

        End Function
        Private Function MarketDetails_CreateLeadInLeadOutSummaryForLeadOutTime(LeadInLeadOutParameters As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutParameters,
                                                                                AllLeadInLeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail)) As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary

            'objects
            Dim LeadInLeadOutSummary As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary = Nothing
            Dim StartDateTime As Date = Date.MinValue
            Dim StartTime As Integer = 0
            Dim LeadInLeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail) = Nothing
            Dim Rating1 As Decimal = 0
            Dim Rating2 As Decimal = 0

            LeadInLeadOutSummary = New AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary

            LeadInLeadOutSummary.TimeSlot = "Lead-Out"

            If LeadInLeadOutParameters.PercentEndTime1 <> 0 OrElse LeadInLeadOutParameters.PercentEndTime2 <> 0 Then

                StartDateTime = LeadInLeadOutParameters.LeadOutStartEndTime.StartDateTime.AddMinutes(-15)

                If DatePart(DateInterval.Hour, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) * 100 + DatePart(DateInterval.Minute, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) < 300 Then

                    StartTime = DatePart(DateInterval.Hour, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) * 100 + DatePart(DateInterval.Minute, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) + 2400

                Else

                    StartTime = DatePart(DateInterval.Hour, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString)) * 100 + DatePart(DateInterval.Minute, CDate(Now.ToShortDateString & " " & StartDateTime.ToShortTimeString))

                End If

                LeadInLeadOutDetails = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail)

                LeadInLeadOutDetails.AddRange(AllLeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadOutStartEndTime.StartHour).ToList)
                LeadInLeadOutDetails.AddRange(AllLeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).ToList)

                If LeadInLeadOutDetails.Any Then

                    If LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).Distinct.Count > 1 Then

                        LeadInLeadOutSummary.Program = "Various"

                    Else

                        LeadInLeadOutSummary.Program = LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).FirstOrDefault

                    End If

                    If LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Any Then

                        Rating1 = LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Select(Function(Entity) Entity.Rating).Average

                        LeadInLeadOutSummary.Impressions = (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Select(Function(Entity) Entity.Impressions).Average * LeadInLeadOutParameters.PercentEndTime2)

                        LeadInLeadOutSummary.Share = (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Select(Function(Entity) Entity.Share).Average * LeadInLeadOutParameters.PercentEndTime2)

                        LeadInLeadOutSummary.HPUT = (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = StartTime).Select(Function(Entity) Entity.HPUT).Average * LeadInLeadOutParameters.PercentEndTime2)

                    End If

                    If LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadOutStartEndTime.StartHour).Any Then

                        Rating2 = LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadOutStartEndTime.StartHour).Select(Function(Entity) Entity.Rating).Average

                        LeadInLeadOutSummary.Impressions += (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadOutStartEndTime.StartHour).Select(Function(Entity) Entity.Impressions).Average * LeadInLeadOutParameters.PercentEndTime1)

                        LeadInLeadOutSummary.Share += (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadOutStartEndTime.StartHour).Select(Function(Entity) Entity.Share).Average * LeadInLeadOutParameters.PercentEndTime1)

                        LeadInLeadOutSummary.HPUT += (LeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadOutStartEndTime.StartHour).Select(Function(Entity) Entity.HPUT).Average * LeadInLeadOutParameters.PercentEndTime1)

                    End If

                    LeadInLeadOutSummary.Rating = (Rating1 * LeadInLeadOutParameters.PercentEndTime2) + (Rating2 * LeadInLeadOutParameters.PercentEndTime1)

                Else

                    LeadInLeadOutSummary.Program = String.Empty
                    LeadInLeadOutSummary.Rating = 0
                    LeadInLeadOutSummary.Impressions = 0
                    LeadInLeadOutSummary.Share = 0
                    LeadInLeadOutSummary.HPUT = 0

                End If

            Else

                LeadInLeadOutDetails = AllLeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutParameters.LeadOutStartEndTime.StartHour).ToList

                If LeadInLeadOutDetails.Any Then

                    If LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).Distinct.Count > 1 Then

                        LeadInLeadOutSummary.Program = "Various"

                    Else

                        LeadInLeadOutSummary.Program = LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).FirstOrDefault

                    End If

                    LeadInLeadOutSummary.Rating = LeadInLeadOutDetails.Select(Function(Entity) Entity.Rating).Average
                    LeadInLeadOutSummary.Impressions = LeadInLeadOutDetails.Select(Function(Entity) Entity.Impressions).Average
                    LeadInLeadOutSummary.Share = LeadInLeadOutDetails.Select(Function(Entity) Entity.Share).Average
                    LeadInLeadOutSummary.HPUT = LeadInLeadOutDetails.Select(Function(Entity) Entity.HPUT).Average

                Else

                    LeadInLeadOutSummary.Program = String.Empty
                    LeadInLeadOutSummary.Rating = 0
                    LeadInLeadOutSummary.Impressions = 0
                    LeadInLeadOutSummary.Share = 0
                    LeadInLeadOutSummary.HPUT = 0

                End If

            End If

            MarketDetails_CreateLeadInLeadOutSummaryForLeadOutTime = LeadInLeadOutSummary

        End Function
        Private Function MarketDetails_CreateLeadInLeadOutSummary(LeadInLeadOutStartEndTime As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutStartEndTime,
                                                                  AllLeadInLeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail),
                                                                  IsQuarterHours As Boolean) As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary

            'objects
            Dim LeadInLeadOutSummary As AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary = Nothing
            Dim LeadInLeadOutDetails As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutDetail) = Nothing

            LeadInLeadOutSummary = New AdvantageFramework.Classes.Media.Nielsen.LeadInLeadOutSummary

            If LeadInLeadOutStartEndTime.StartDateTime.Minute = 0 Then

                LeadInLeadOutSummary.TimeSlot = LeadInLeadOutStartEndTime.StartDateTime.ToString("hh")

                If LeadInLeadOutSummary.TimeSlot(0) = "0" Then

                    LeadInLeadOutSummary.TimeSlot = LeadInLeadOutSummary.TimeSlot.Substring(1)

                End If

            Else

                LeadInLeadOutSummary.TimeSlot = LeadInLeadOutStartEndTime.StartDateTime.ToString("hmm")

            End If

            If LeadInLeadOutStartEndTime.EndDateTime.Minute = 0 Then

                LeadInLeadOutSummary.TimeSlot &= "-" & LeadInLeadOutStartEndTime.EndDateTime.ToString("ht")

            Else

                LeadInLeadOutSummary.TimeSlot &= "-" & LeadInLeadOutStartEndTime.EndDateTime.ToString("hmmt")

            End If

            If IsQuarterHours Then

                LeadInLeadOutDetails = AllLeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour = LeadInLeadOutStartEndTime.StartHour).ToList

            Else

                LeadInLeadOutDetails = AllLeadInLeadOutDetails.Where(Function(Entity) Entity.AdjustedHour >= LeadInLeadOutStartEndTime.StartHour AndAlso Entity.AdjustedHour <= LeadInLeadOutStartEndTime.EndHour - 1).ToList

            End If

            If LeadInLeadOutDetails.Any Then

                If LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).Distinct.Count > 1 Then

                    LeadInLeadOutSummary.Program = "Various"

                Else

                    LeadInLeadOutSummary.Program = LeadInLeadOutDetails.Select(Function(Entity) Entity.Program).FirstOrDefault

                End If

                LeadInLeadOutSummary.Rating = LeadInLeadOutDetails.Select(Function(Entity) Entity.Rating).Average
                LeadInLeadOutSummary.Impressions = LeadInLeadOutDetails.Select(Function(Entity) Entity.Impressions).Average
                LeadInLeadOutSummary.Share = LeadInLeadOutDetails.Select(Function(Entity) Entity.Share).Average
                LeadInLeadOutSummary.HPUT = LeadInLeadOutDetails.Select(Function(Entity) Entity.HPUT).Average

            Else

                LeadInLeadOutSummary.Program = String.Empty
                LeadInLeadOutSummary.Rating = 0
                LeadInLeadOutSummary.Impressions = 0
                LeadInLeadOutSummary.Share = 0
                LeadInLeadOutSummary.HPUT = 0

            End If

            MarketDetails_CreateLeadInLeadOutSummary = LeadInLeadOutSummary

        End Function
        Public Function MarketDetails_GetMeasurementTrendsDemo(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As String

            'objects
            Dim MeasurementTrendsDemo As String = String.Empty

            If MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowPrimaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.GetValueOrDefault(0) > 0 Then

                MeasurementTrendsDemo = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicDescription

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Demos_ShowSecondaryDemos AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                MeasurementTrendsDemo = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicDescription

            End If

            MarketDetails_GetMeasurementTrendsDemo = MeasurementTrendsDemo

        End Function
        Public Sub MarketDetails_LoadPrimaryRatingAndShareData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                               RowIndexes As Generic.List(Of Integer))

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                MarketDetails_LoadPrimaryNielsenRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                MarketDetails_LoadComscoreRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes, False)

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico Then

                MarketDetails_LoadNielsenPuertoRicoRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

            End If

        End Sub
        Public Sub MarketDetails_LoadSecondaryRatingAndShareData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                 RowIndexes As Generic.List(Of Integer))

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                MarketDetails_LoadSecondaryNielsenRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndexes)

            End If

        End Sub
        Private Sub MarketDetails_LoadComscoreRatingAndShareData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                 RowIndexes As Generic.List(Of Integer), SecondaryOnly As Boolean)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim ShareHPUTBook As AdvantageFramework.DTO.Media.ShareHPUTBook = Nothing
            Dim NielsenTVStationCode As Integer = 0
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim Adults18PlusTVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim Adults18PlusTVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing
            Dim RowIndexesToRun As Generic.Dictionary(Of String, Generic.List(Of Integer)) = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim HHUEDemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim PrimaryMediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim SecondaryMediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim ComscoreBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim ComScoreCDMAs As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.ComScoreCDMA) = Nothing
            Dim ComScoreCDMA As AdvantageFramework.DTO.Media.SpotTV.ComScoreCDMA = Nothing
            Dim AdjustmentFactor As Decimal = 0
            Dim CDMADemoUE As Decimal = 0
            Dim ComscoreTVStation As AdvantageFramework.Database.Entities.ComscoreTVStation = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.HasValue Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.HasValue AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                    ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)
                    DemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)
                    HHUEDemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)

                    ShareHPUTBook = New AdvantageFramework.DTO.Media.ShareHPUTBook
                    ShareHPUTBook.ShareBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value > 0 Then

                        ShareHPUTBook.HPUTBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value

                    End If

                    ShareHPUTBooks.Add(ShareHPUTBook)

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        DbContext.Database.Connection.Open()

                        If Not SecondaryOnly Then

                            PrimaryMediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value)

                            If PrimaryMediaDemographic IsNot Nothing Then

                                DemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic(PrimaryMediaDemographic))

                            End If

                        End If

                        If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                            SecondaryMediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID)

                            If SecondaryMediaDemographic IsNot Nothing Then

                                DemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic(SecondaryMediaDemographic))

                            End If

                        End If

                        HHUEDemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic() With {.ComscoreDemoNumber = 0})

                        RowIndexesToRun = New Generic.Dictionary(Of String, Generic.List(Of Integer))

                        For Each RowIndex In RowIndexes

                            NielsenTVStationCode = 0

                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                            If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                        String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                VendorNCCTVSyscodeID = DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                                If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                    If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                                IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                                        NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                                    End If

                                Else

                                    NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                                End If

                                If NielsenTVStationCode <> 0 Then

                                    If RowIndexesToRun.ContainsKey(NielsenTVStationCode.ToString & "&" & VendorNCCTVSyscodeID.ToString) = False Then

                                        RowIndexesToRun(NielsenTVStationCode.ToString & "&" & VendorNCCTVSyscodeID.ToString) = New Generic.List(Of Integer)

                                    End If

                                    CType(RowIndexesToRun(NielsenTVStationCode.ToString & "&" & VendorNCCTVSyscodeID.ToString), Generic.List(Of Integer)).Add(RowIndex)

                                End If

                            End If

                        Next

                        If RowIndexesToRun.Count > 0 Then

                            For Each StationRowIndexes In RowIndexesToRun

                                For Each RowIndex In StationRowIndexes.Value

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    Exit For

                                Next

                                NielsenTVStationCode = StationRowIndexes.Key.Split("&")(0)
                                VendorNCCTVSyscodeID = StationRowIndexes.Key.Split("&")(1)

                                If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                    ComscoreTVStation = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                         Where Entity.NetworkNumber = NielsenTVStationCode
                                                         Select Entity).OrderBy(Function(E) E.Number).FirstOrDefault

                                Else

                                    ComscoreTVStation = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                         Where Entity.ID = NielsenTVStationCode
                                                         Select Entity).FirstOrDefault

                                End If

                                If ComscoreTVStation Is Nothing Then

                                    Exit For

                                End If

                                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                For Each RowIndex In StationRowIndexes.Value

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                    WorksheetMarketDetail.ID = RowIndex + 1

                                    DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                    MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                Next

                                'Try

                                TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, DemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber, False)

                                'Catch ex As Exception

                                'End Try

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.HasValue AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                                    Try

                                        ComscoreBook = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks.SingleOrDefault(Function(Entity) Entity.ID = ShareHPUTBook.ShareBookID)

                                    Catch ex As Exception
                                        ComscoreBook = Nothing
                                    End Try

                                    If ComscoreBook IsNot Nothing Then

                                        ComScoreCDMAs = AdvantageFramework.ComScore.GetComScoreCDMAData(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode, ComscoreTVStation.NetworkNumber, VendorNCCTVSyscodeID, ComscoreBook.Year, ComscoreBook.Month, Me.Session)

                                    End If

                                    Try

                                        Adults18PlusTVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, HHUEDemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber, False)

                                    Catch ex As Exception

                                    End Try

                                End If

                                If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                    For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID - 1)

                                        If ComscoreBook IsNot Nothing Then

                                            Try

                                                ComScoreCDMA = ComScoreCDMAs.FirstOrDefault()

                                            Catch ex As Exception
                                                ComScoreCDMA = Nothing
                                            End Try

                                            Try

                                                Adults18PlusTVWorksheetRatingAndShareData = Adults18PlusTVWorksheetRatingAndShareDataList.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID)

                                            Catch ex As Exception

                                            End Try

                                        End If

                                        If PrimaryMediaDemographic IsNot Nothing AndAlso PrimaryMediaDemographic.ComscoreDemoNumber = TVWorksheetRatingAndShareData.ComscoreDemoNumber Then

                                            If ComScoreCDMA Is Nothing OrElse Adults18PlusTVWorksheetRatingAndShareData Is Nothing Then

                                                If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                    DataRow(MarketDetailsColumns.PrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                End If

                                            End If

                                            If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                                DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            Else

                                                DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)
                                                DataRow(MarketDetailsColumns.PrimaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            End If

                                            DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = Math.Round(TVWorksheetRatingAndShareData.HPUT, 2)

                                            If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            Else

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                                DataRow(MarketDetailsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            End If

                                            DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = TVWorksheetRatingAndShareData.Universe
                                            DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                                            If ComScoreCDMA IsNot Nothing AndAlso Adults18PlusTVWorksheetRatingAndShareData IsNot Nothing Then

                                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = Math.Round(ComScoreCDMA.UEFactor * DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString), 0)

                                                Else

                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = Math.Round(ComScoreCDMA.UEFactor * DataRow(MarketDetailsColumns.PrimaryImpressions.ToString), 0)
                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = DataRow(MarketDetailsColumns.PrimaryImpressions.ToString)

                                                End If

                                                AdjustmentFactor = 0
                                                CDMADemoUE = 0

                                                If Adults18PlusTVWorksheetRatingAndShareData.Universe > 0 Then

                                                    AdjustmentFactor = ComScoreCDMA.RatingsAIUE / Adults18PlusTVWorksheetRatingAndShareData.Universe

                                                End If

                                                CDMADemoUE = AdjustmentFactor * TVWorksheetRatingAndShareData.Universe

                                                If CDMADemoUE = 0 Then

                                                    If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                    Else

                                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                        DataRow(MarketDetailsColumns.PrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                    End If

                                                Else

                                                    If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round((DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) * 100) / CDMADemoUE, 2)

                                                    Else

                                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round((DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) * 100) / CDMADemoUE, 2)
                                                        DataRow(MarketDetailsColumns.PrimaryRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryRating.ToString)

                                                    End If

                                                End If

                                            Else

                                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                End If

                                            End If

                                        ElseIf SecondaryMediaDemographic IsNot Nothing AndAlso SecondaryMediaDemographic.ComscoreDemoNumber = TVWorksheetRatingAndShareData.ComscoreDemoNumber Then

                                            If ComScoreCDMA Is Nothing OrElse Adults18PlusTVWorksheetRatingAndShareData Is Nothing Then

                                                If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                End If

                                            End If

                                            If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                                DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            Else

                                                DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)
                                                DataRow(MarketDetailsColumns.SecondaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            End If

                                            DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = Math.Round(TVWorksheetRatingAndShareData.HPUT, 2)

                                            If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            Else

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                                DataRow(MarketDetailsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            End If

                                            DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = TVWorksheetRatingAndShareData.Universe
                                            DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                                            If ComScoreCDMA IsNot Nothing AndAlso Adults18PlusTVWorksheetRatingAndShareData IsNot Nothing Then

                                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = Math.Round(ComScoreCDMA.UEFactor * DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString), 0)

                                                Else

                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = Math.Round(ComScoreCDMA.UEFactor * DataRow(MarketDetailsColumns.SecondaryImpressions.ToString), 0)
                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = DataRow(MarketDetailsColumns.SecondaryImpressions.ToString)

                                                End If

                                                AdjustmentFactor = 0
                                                CDMADemoUE = 0

                                                If Adults18PlusTVWorksheetRatingAndShareData.Universe > 0 Then

                                                    AdjustmentFactor = ComScoreCDMA.RatingsAIUE / Adults18PlusTVWorksheetRatingAndShareData.Universe

                                                End If

                                                CDMADemoUE = AdjustmentFactor * TVWorksheetRatingAndShareData.Universe

                                                If CDMADemoUE = 0 Then

                                                    If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                        DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                    Else

                                                        DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                        DataRow(MarketDetailsColumns.SecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                    End If

                                                Else

                                                    If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                        DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round((DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) * 100) / CDMADemoUE, 2)

                                                    Else

                                                        DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round((DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) * 100) / CDMADemoUE, 2)
                                                        DataRow(MarketDetailsColumns.SecondaryRating.ToString) = DataRow(MarketDetailsColumns.BookSecondaryRating.ToString)

                                                    End If

                                                End If

                                            Else

                                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                End If

                                            End If

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In StationRowIndexes.Value

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If Not SecondaryOnly Then

                                            If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                            Else

                                                DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                                DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                            End If

                                            If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                                DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                            Else

                                                DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                                DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                            End If

                                            DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                            If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                            Else

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                                DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                            End If

                                            If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                            Else

                                                DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                                DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                            End If

                                            DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                        If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                        Else

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                        DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                                    Next

                                End If

                            Next

                        Else

                            For Each RowIndex In RowIndexes

                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                If Not SecondaryOnly Then

                                    If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                    Else

                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                        DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                    End If

                                    If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                        DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                    Else

                                        DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                        DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                    End If

                                    DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                    If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                        DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                    Else

                                        DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                        DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                    End If

                                    If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                        DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                    Else

                                        DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                        DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                    End If

                                    DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                    DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                                End If

                                If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                End If

                                If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                Else

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                    DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                End If

                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                            Next

                        End If

                    End Using

                End If

            End If

        End Sub
        Private Sub MarketDetails_LoadPrimaryComscoreRatingAndShareData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                        RowIndexes As Generic.List(Of Integer))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim ShareHPUTBook As AdvantageFramework.DTO.Media.ShareHPUTBook = Nothing
            Dim NielsenTVStationCode As Integer = 0
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim Adults18PlusTVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim Adults18PlusTVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing
            Dim RowIndexesToRun As Generic.Dictionary(Of String, Generic.List(Of Integer)) = Nothing
            'Dim CallLetters As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim HHUEDemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim PrimaryMediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim ComscoreBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim ComScoreCDMAs As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.ComScoreCDMA) = Nothing
            Dim ComScoreCDMA As AdvantageFramework.DTO.Media.SpotTV.ComScoreCDMA = Nothing
            Dim AdjustmentFactor As Decimal = 0
            Dim CDMADemoUE As Decimal = 0
            Dim ComscoreTVStation As AdvantageFramework.Database.Entities.ComscoreTVStation = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.HasValue Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.HasValue AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                    ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)
                    DemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)
                    HHUEDemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)

                    ShareHPUTBook = New AdvantageFramework.DTO.Media.ShareHPUTBook
                    ShareHPUTBook.ShareBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value > 0 Then

                        ShareHPUTBook.HPUTBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value

                    End If

                    ShareHPUTBooks.Add(ShareHPUTBook)

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        DbContext.Database.Connection.Open()

                        PrimaryMediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value)

                        If PrimaryMediaDemographic IsNot Nothing Then

                            DemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic(PrimaryMediaDemographic))

                        End If

                        HHUEDemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic() With {.ComscoreDemoNumber = 0})

                        RowIndexesToRun = New Generic.Dictionary(Of String, Generic.List(Of Integer))

                        For Each RowIndex In RowIndexes

                            NielsenTVStationCode = 0

                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                            If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                        String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                VendorNCCTVSyscodeID = DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                                If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                    If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                                IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                                        NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                                    End If

                                Else

                                    NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                                End If

                                If NielsenTVStationCode <> 0 Then

                                    If RowIndexesToRun.ContainsKey(NielsenTVStationCode.ToString & "&" & VendorNCCTVSyscodeID.ToString) = False Then

                                        RowIndexesToRun(NielsenTVStationCode.ToString & "&" & VendorNCCTVSyscodeID.ToString) = New Generic.List(Of Integer)

                                    End If

                                    CType(RowIndexesToRun(NielsenTVStationCode.ToString & "&" & VendorNCCTVSyscodeID.ToString), Generic.List(Of Integer)).Add(RowIndex)

                                End If

                            End If

                        Next

                        If RowIndexesToRun.Count > 0 Then

                            For Each StationRowIndexes In RowIndexesToRun

                                NielsenTVStationCode = StationRowIndexes.Key.Split("&")(0)
                                VendorNCCTVSyscodeID = StationRowIndexes.Key.Split("&")(1)

                                For Each RowIndex In StationRowIndexes.Value

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    Exit For

                                Next

                                If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                    ComscoreTVStation = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                         Where Entity.Number = NielsenTVStationCode
                                                         Select Entity).FirstOrDefault

                                Else

                                    ComscoreTVStation = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                         Where Entity.ID = NielsenTVStationCode
                                                         Select Entity).FirstOrDefault

                                End If

                                'CallLetters = ComscoreTVStation.CallLetters

                                If ComscoreTVStation Is Nothing Then

                                    Exit For

                                End If

                                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                For Each RowIndex In StationRowIndexes.Value

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                    WorksheetMarketDetail.ID = RowIndex + 1

                                    DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                    MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                Next

                                Try

                                    'TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViews(DbContext, CallLetters, DemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber)
                                    TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, DemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber, False)

                                Catch ex As Exception

                                End Try

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.HasValue AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                                    Try

                                        ComscoreBook = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks.SingleOrDefault(Function(Entity) Entity.ID = ShareHPUTBook.ShareBookID)

                                    Catch ex As Exception
                                        ComscoreBook = Nothing
                                    End Try

                                    If ComscoreBook IsNot Nothing Then

                                        ComScoreCDMAs = AdvantageFramework.ComScore.GetComScoreCDMAData(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode, ComscoreTVStation.NetworkNumber, VendorNCCTVSyscodeID, ComscoreBook.Year, ComscoreBook.Month, Me.Session)

                                    End If

                                    Try

                                        'Adults18PlusTVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViews(DbContext, CallLetters, HHUEDemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber)
                                        Adults18PlusTVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, HHUEDemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber, False)

                                    Catch ex As Exception

                                    End Try

                                End If

                                If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                    For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID - 1)

                                        If ComscoreBook IsNot Nothing Then

                                            Try

                                                ComScoreCDMA = ComScoreCDMAs.FirstOrDefault()

                                            Catch ex As Exception
                                                ComScoreCDMA = Nothing
                                            End Try

                                            Try

                                                Adults18PlusTVWorksheetRatingAndShareData = Adults18PlusTVWorksheetRatingAndShareDataList.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID)

                                            Catch ex As Exception

                                            End Try

                                        End If

                                        If PrimaryMediaDemographic IsNot Nothing AndAlso PrimaryMediaDemographic.ComscoreDemoNumber = TVWorksheetRatingAndShareData.ComscoreDemoNumber Then

                                            If ComScoreCDMA Is Nothing OrElse Adults18PlusTVWorksheetRatingAndShareData Is Nothing Then

                                                If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                    DataRow(MarketDetailsColumns.PrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                End If

                                            End If

                                            If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                                DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            Else

                                                DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)
                                                DataRow(MarketDetailsColumns.PrimaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            End If

                                            DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = Math.Round(TVWorksheetRatingAndShareData.HPUT, 2)

                                            If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            Else

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                                DataRow(MarketDetailsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            End If

                                            DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = TVWorksheetRatingAndShareData.Universe
                                            DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                                            If ComScoreCDMA IsNot Nothing AndAlso Adults18PlusTVWorksheetRatingAndShareData IsNot Nothing Then

                                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = Math.Round(ComScoreCDMA.UEFactor * DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString), 0)

                                                Else

                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = Math.Round(ComScoreCDMA.UEFactor * DataRow(MarketDetailsColumns.PrimaryImpressions.ToString), 0)
                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = DataRow(MarketDetailsColumns.PrimaryImpressions.ToString)

                                                End If

                                                AdjustmentFactor = 0
                                                CDMADemoUE = 0

                                                If Adults18PlusTVWorksheetRatingAndShareData.Universe > 0 Then

                                                    AdjustmentFactor = ComScoreCDMA.RatingsAIUE / Adults18PlusTVWorksheetRatingAndShareData.Universe

                                                End If

                                                CDMADemoUE = AdjustmentFactor * TVWorksheetRatingAndShareData.Universe

                                                If CDMADemoUE = 0 Then

                                                    If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                    Else

                                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                        DataRow(MarketDetailsColumns.PrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                    End If

                                                Else

                                                    If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round((DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) * 100) / CDMADemoUE, 2)

                                                    Else

                                                        DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round((DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) * 100) / CDMADemoUE, 2)
                                                        DataRow(MarketDetailsColumns.PrimaryRating.ToString) = DataRow(MarketDetailsColumns.BookPrimaryRating.ToString)

                                                    End If

                                                End If

                                            Else

                                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                Else

                                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                End If

                                            End If

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In StationRowIndexes.Value

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                        If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                        Else

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                        End If

                                        If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                        DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                                    Next

                                End If

                            Next

                        Else

                            For Each RowIndex In RowIndexes

                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                    DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                End If

                                If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                Else

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                    DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                End If

                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                            Next

                        End If

                    End Using

                End If

            End If

        End Sub
        Private Sub MarketDetails_LoadSecondaryComscoreRatingAndShareData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                          RowIndexes As Generic.List(Of Integer))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim ShareHPUTBook As AdvantageFramework.DTO.Media.ShareHPUTBook = Nothing
            Dim NielsenTVStationCode As Integer = 0
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim Adults18PlusTVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim Adults18PlusTVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing
            Dim RowIndexesToRun As Generic.Dictionary(Of String, Generic.List(Of Integer)) = Nothing
            'Dim CallLetters As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim HHUEDemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim SecondaryMediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim ComscoreBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing
            Dim VendorNCCTVSyscodeID As Integer = 0
            Dim ComScoreCDMAs As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.ComScoreCDMA) = Nothing
            Dim ComScoreCDMA As AdvantageFramework.DTO.Media.SpotTV.ComScoreCDMA = Nothing
            Dim AdjustmentFactor As Decimal = 0
            Dim CDMADemoUE As Decimal = 0
            Dim ComscoreTVStation As AdvantageFramework.Database.Entities.ComscoreTVStation = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.HasValue Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.HasValue AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                    ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)
                    DemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)
                    HHUEDemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)

                    ShareHPUTBook = New AdvantageFramework.DTO.Media.ShareHPUTBook
                    ShareHPUTBook.ShareBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value

                    If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value > 0 Then

                        ShareHPUTBook.HPUTBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value

                    End If

                    ShareHPUTBooks.Add(ShareHPUTBook)

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        DbContext.Database.Connection.Open()

                        If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                            SecondaryMediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID)

                            If SecondaryMediaDemographic IsNot Nothing Then

                                DemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic(SecondaryMediaDemographic))

                            End If

                        End If

                        HHUEDemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic() With {.ComscoreDemoNumber = 0})

                        RowIndexesToRun = New Generic.Dictionary(Of String, Generic.List(Of Integer))

                        For Each RowIndex In RowIndexes

                            NielsenTVStationCode = 0

                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                            If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                        String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                VendorNCCTVSyscodeID = DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

                                If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                    If String.IsNullOrWhiteSpace(DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)) = False AndAlso
                                                IsDBNull(DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)) = False Then

                                        NielsenTVStationCode = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                                    End If

                                Else

                                    NielsenTVStationCode = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                                End If

                                If NielsenTVStationCode <> 0 Then

                                    If RowIndexesToRun.ContainsKey(NielsenTVStationCode.ToString & "&" & VendorNCCTVSyscodeID.ToString) = False Then

                                        RowIndexesToRun(NielsenTVStationCode.ToString & "&" & VendorNCCTVSyscodeID.ToString) = New Generic.List(Of Integer)

                                    End If

                                    CType(RowIndexesToRun(NielsenTVStationCode.ToString & "&" & VendorNCCTVSyscodeID.ToString), Generic.List(Of Integer)).Add(RowIndex)

                                End If

                            End If

                        Next

                        If RowIndexesToRun.Count > 0 Then

                            For Each StationRowIndexes In RowIndexesToRun

                                NielsenTVStationCode = StationRowIndexes.Key.Split("&")(0)
                                VendorNCCTVSyscodeID = StationRowIndexes.Key.Split("&")(1)

                                For Each RowIndex In StationRowIndexes.Value

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    Exit For

                                Next

                                If DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) Then

                                    ComscoreTVStation = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                         Where Entity.Number = NielsenTVStationCode
                                                         Select Entity).FirstOrDefault

                                Else

                                    ComscoreTVStation = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVStation.Load(DbContext)
                                                         Where Entity.ID = NielsenTVStationCode
                                                         Select Entity).FirstOrDefault

                                End If

                                If ComscoreTVStation Is Nothing Then

                                    Exit For

                                End If

                                'CallLetters = ComscoreTVStation.CallLetters

                                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                For Each RowIndex In StationRowIndexes.Value

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                    WorksheetMarketDetail.ID = RowIndex + 1

                                    DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                    MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                Next

                                Try

                                    'TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViews(DbContext, CallLetters, DemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber)
                                    TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, DemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber, False)

                                Catch ex As Exception

                                End Try

                                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.HasValue AndAlso
                                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID.Value = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                                    Try

                                        ComscoreBook = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketNielsenTVBooks.SingleOrDefault(Function(Entity) Entity.ID = ShareHPUTBook.ShareBookID)

                                    Catch ex As Exception
                                        ComscoreBook = Nothing
                                    End Try

                                    If ComscoreBook IsNot Nothing Then

                                        ComScoreCDMAs = AdvantageFramework.ComScore.GetComScoreCDMAData(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketNielsenTVCode, ComscoreTVStation.NetworkNumber, VendorNCCTVSyscodeID, ComscoreBook.Year, ComscoreBook.Month, Me.Session)

                                    End If

                                    Try
                                        'Adults18PlusTVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViews(DbContext, CallLetters, HHUEDemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber)
                                        Adults18PlusTVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, HHUEDemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber, False)

                                    Catch ex As Exception

                                    End Try

                                End If

                                If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                    For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID - 1)

                                        If ComscoreBook IsNot Nothing Then

                                            Try

                                                ComScoreCDMA = ComScoreCDMAs.FirstOrDefault()

                                            Catch ex As Exception
                                                ComScoreCDMA = Nothing
                                            End Try

                                            Try

                                                Adults18PlusTVWorksheetRatingAndShareData = Adults18PlusTVWorksheetRatingAndShareDataList.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID)

                                            Catch ex As Exception

                                            End Try

                                        End If

                                        If SecondaryMediaDemographic IsNot Nothing AndAlso SecondaryMediaDemographic.ComscoreDemoNumber = TVWorksheetRatingAndShareData.ComscoreDemoNumber Then

                                            If ComScoreCDMA Is Nothing OrElse Adults18PlusTVWorksheetRatingAndShareData Is Nothing Then

                                                If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                End If

                                            End If

                                            If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                                DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            Else

                                                DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)
                                                DataRow(MarketDetailsColumns.SecondaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            End If

                                            DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = Math.Round(TVWorksheetRatingAndShareData.HPUT, 2)

                                            If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            Else

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                                DataRow(MarketDetailsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            End If

                                            DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = TVWorksheetRatingAndShareData.Universe
                                            DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = TVWorksheetRatingAndShareData.CumeImpressions.GetValueOrDefault(0)

                                            If ComScoreCDMA IsNot Nothing AndAlso Adults18PlusTVWorksheetRatingAndShareData IsNot Nothing Then

                                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = Math.Round(ComScoreCDMA.UEFactor * DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString), 0)

                                                Else

                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = Math.Round(ComScoreCDMA.UEFactor * DataRow(MarketDetailsColumns.SecondaryImpressions.ToString), 0)
                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = DataRow(MarketDetailsColumns.SecondaryImpressions.ToString)

                                                End If

                                                AdjustmentFactor = 0
                                                CDMADemoUE = 0

                                                If Adults18PlusTVWorksheetRatingAndShareData.Universe > 0 Then

                                                    AdjustmentFactor = ComScoreCDMA.RatingsAIUE / Adults18PlusTVWorksheetRatingAndShareData.Universe

                                                End If

                                                CDMADemoUE = AdjustmentFactor * TVWorksheetRatingAndShareData.Universe

                                                If CDMADemoUE = 0 Then

                                                    If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                        DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                    Else

                                                        DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                        DataRow(MarketDetailsColumns.SecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                                    End If

                                                Else

                                                    If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                        DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round((DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) * 100) / CDMADemoUE, 2)

                                                    Else

                                                        DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round((DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) * 100) / CDMADemoUE, 2)
                                                        DataRow(MarketDetailsColumns.SecondaryRating.ToString) = DataRow(MarketDetailsColumns.BookSecondaryRating.ToString)

                                                    End If

                                                End If

                                            Else

                                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                Else

                                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                                End If

                                            End If

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In StationRowIndexes.Value

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                        If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                        Else

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                        DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                                    Next

                                End If

                            Next

                        Else

                            For Each RowIndex In RowIndexes

                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                End If

                                If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                Else

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                    DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                End If

                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                            Next

                        End If

                    End Using

                End If

            End If

        End Sub
        Public Function MarketDetails_SortDays(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                               DaysAndTime1 As AdvantageFramework.DTO.DaysAndTime, DaysAndTime2 As AdvantageFramework.DTO.DaysAndTime) As Integer

            'objects
            Dim DaysAndTimeController As AdvantageFramework.Controller.DaysAndTimeController = Nothing

            DaysAndTimeController = New AdvantageFramework.Controller.DaysAndTimeController(Me.Session)

            MarketDetails_SortDays = DaysAndTimeController.SortDays(DaysAndTime1, DaysAndTime2)

        End Function
        Private Function MarketDetails_GetNielsenRadioExcludeDates(ExcludeNielsenRadioPeriodIDs As Generic.List(Of Integer)) As Generic.List(Of Date)

            Dim EachDate As Date = Nothing
            Dim ExcludeDates As Generic.List(Of Date) = Nothing

            ExcludeDates = New Generic.List(Of Date)

            If Me.Session.IsNielsenSetup Then

                Using DbContext = New AdvantageFramework.Nielsen.Database.DbContext(Me.Session.NielsenConnectionString, Nothing)

                    For Each ExcludePeriod In (From NielsenRadioPeriod In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadValidated(DbContext)
                                               Where ExcludeNielsenRadioPeriodIDs.Contains(NielsenRadioPeriod.ID)
                                               Select NielsenRadioPeriod).ToList

                        EachDate = ExcludePeriod.StartDate

                        While EachDate <= ExcludePeriod.EndDate

                            If Not ExcludeDates.Contains(EachDate) Then

                                ExcludeDates.Add(EachDate)

                            End If

                            EachDate = EachDate.AddDays(1)

                        End While

                    Next

                End Using

            End If

            MarketDetails_GetNielsenRadioExcludeDates = ExcludeDates

        End Function
        Public Sub MarketDetails_RefreshMakegoodStatus(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailVendorMakegoodStatuses = DbContext.Database.SqlQuery(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendorMakegoodStatus)(String.Format("exec [dbo].[advsp_makegood_vendor_status] {0}, {1}", MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber)).ToList

                End Using

            End If

        End Sub
        Private Sub MarketDetails_AddAlertComment(DbContext As AdvantageFramework.Database.DbContext, SecurityDbContext As AdvantageFramework.Security.Database.DbContext,
                                                  OrderNumber As Integer, MediaType As String, Comment As String)

            Dim RadioOrder As AdvantageFramework.Database.Entities.RadioOrder = Nothing
            Dim TVOrder As AdvantageFramework.Database.Entities.TVOrder = Nothing
            Dim AlertID As Integer = 0
            Dim Alert As AdvantageFramework.Database.Entities.Alert = Nothing
            Dim AlertComment As AdvantageFramework.Database.Entities.AlertComment = Nothing
            Dim AlertRecipient As AdvantageFramework.Database.Entities.AlertRecipient = Nothing

            If MediaType = "R" Then

                RadioOrder = AdvantageFramework.Database.Procedures.RadioOrder.LoadByOrderNumber(DbContext, OrderNumber)

                If RadioOrder IsNot Nothing Then

                    AlertID = RadioOrder.AlertID

                End If

            ElseIf MediaType = "T" Then

                TVOrder = AdvantageFramework.Database.Procedures.TVOrder.LoadByOrderNumber(DbContext, OrderNumber)

                If TVOrder IsNot Nothing Then

                    AlertID = TVOrder.AlertID

                End If

            End If

            If AlertID <> 0 Then

                Alert = AdvantageFramework.Database.Procedures.Alert.LoadByAlertID(DbContext, AlertID)

                If Alert IsNot Nothing Then

                    AlertComment = New AdvantageFramework.Database.Entities.AlertComment

                    AlertComment.DbContext = DbContext
                    AlertComment.AlertID = AlertID
                    AlertComment.UserCode = DbContext.UserCode
                    AlertComment.GeneratedDate = AdvantageFramework.Database.Procedures.Generic.LoadDatabaseTime(DbContext)
                    AlertComment.Comment = Comment

                    If AdvantageFramework.Database.Procedures.AlertComment.Insert(DbContext, AlertComment) Then

                        For Each AlertRecipient In AdvantageFramework.Database.Procedures.AlertRecipient.LoadByAlertID(DbContext, AlertID).ToList

                            AlertRecipient.HasBeenRead = Nothing
                            AlertRecipient.ProcessedDate = Nothing

                            AdvantageFramework.Database.Procedures.AlertRecipient.Update(DbContext, AlertRecipient)

                        Next

                        For Each AlertRecipientDismissed In AdvantageFramework.Database.Procedures.AlertRecipientDismissed.LoadByAlertID(DbContext, AlertID).ToList

                            AlertRecipient = New AdvantageFramework.Database.Entities.AlertRecipient

                            AlertRecipient.DbContext = DbContext

                            AlertRecipient.AlertID = AlertRecipientDismissed.AlertID
                            AlertRecipient.ID = AlertRecipientDismissed.ID
                            AlertRecipient.EmployeeCode = AlertRecipientDismissed.EmployeeCode
                            AlertRecipient.EmployeeEmail = AlertRecipientDismissed.EmployeeEmail
                            AlertRecipient.ProcessedDate = Nothing
                            AlertRecipient.IsNewAlert = AlertRecipientDismissed.IsNewAlert
                            AlertRecipient.HasBeenRead = Nothing

                            If AdvantageFramework.Database.Procedures.AlertRecipientDismissed.Delete(DbContext, AlertRecipientDismissed) Then

                                AdvantageFramework.Database.Procedures.AlertRecipient.Insert(DbContext, AlertRecipient)

                            End If

                        Next

                        AdvantageFramework.AlertSystem.BuildAndSendAlertEmail(SecurityDbContext, DbContext, Alert, "[Alert Updated]", IncludeOriginator:=True)

                    End If

                End If

            End If
        End Sub
        Public Function MarketDetails_AddReplacementRow(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                        VendorCode As String, RowIndex As Integer) As System.Data.DataRow

            'objects
            Dim SelectedDataRow As System.Data.DataRow = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim MaxMakegoodNumber As Integer = 0
            Dim MaxMakegoodDataRow As System.Data.DataRow = Nothing
            Dim MakegoodDataRow As System.Data.DataRow = Nothing

            SelectedDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.NewRow()

            DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString) = 0

            DataRow(MarketDetailsColumns.DaysAndTime.ToString) = CType(SelectedDataRow(MarketDetailsColumns.DaysAndTime.ToString), AdvantageFramework.DTO.DaysAndTime).Clone

            DataRow(MarketDetailsColumns.OnHold.ToString) = False
            DataRow(MarketDetailsColumns.LineNumber.ToString) = SelectedDataRow(MarketDetailsColumns.LineNumber.ToString)

            MaxMakegoodNumber = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode AndAlso
                                                                                                                                               DR(MarketDetailsColumns.LineNumber.ToString) = SelectedDataRow(MarketDetailsColumns.LineNumber.ToString)).
                                                                                                                            Max(Function(DR) CInt(DR(MarketDetailsColumns.MakegoodNumber.ToString)))

            DataRow(MarketDetailsColumns.MakegoodNumber.ToString) = MaxMakegoodNumber + 1
            DataRow(MarketDetailsColumns.MakegoodDate.ToString) = Date.MinValue
            DataRow(MarketDetailsColumns.MakegoodSpots.ToString) = 0
            DataRow(MarketDetailsColumns.MadegoodNumber.ToString) = SelectedDataRow(MarketDetailsColumns.MakegoodNumber.ToString)

            DataRow(MarketDetailsColumns.RevisionNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber
            DataRow(MarketDetailsColumns.VendorCode.ToString) = VendorCode
            DataRow(MarketDetailsColumns.VendorName.ToString) = SelectedDataRow(MarketDetailsColumns.VendorName.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = SelectedDataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)
                DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = SelectedDataRow(MarketDetailsColumns.VendorIsCableSystem.ToString)
                DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = False
                DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = 0
                DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = SelectedDataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = 0
                DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = False
                DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = SelectedDataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString)
                DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = SelectedDataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString)
                DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = 0

            End If

            DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString) = SelectedDataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)
            DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = SelectedDataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)
            DataRow(MarketDetailsColumns.BookProgram.ToString) = SelectedDataRow(MarketDetailsColumns.BookProgram.ToString)
            DataRow(MarketDetailsColumns.Program.ToString) = SelectedDataRow(MarketDetailsColumns.Program.ToString)
            DataRow(MarketDetailsColumns.Daypart.ToString) = SelectedDataRow(MarketDetailsColumns.Daypart.ToString)
            DataRow(MarketDetailsColumns.Product.ToString) = SelectedDataRow(MarketDetailsColumns.Product.ToString)
            DataRow(MarketDetailsColumns.Piggyback.ToString) = SelectedDataRow(MarketDetailsColumns.Piggyback.ToString)
            DataRow(MarketDetailsColumns.Length.ToString) = SelectedDataRow(MarketDetailsColumns.Length.ToString)

            DataRow(MarketDetailsColumns.Days.ToString) = SelectedDataRow(MarketDetailsColumns.Days.ToString)
            DataRow(MarketDetailsColumns.StartTime.ToString) = SelectedDataRow(MarketDetailsColumns.StartTime.ToString)
            DataRow(MarketDetailsColumns.EndTime.ToString) = SelectedDataRow(MarketDetailsColumns.EndTime.ToString)
            DataRow(MarketDetailsColumns.Comments.ToString) = SelectedDataRow(MarketDetailsColumns.Comments.ToString)
            DataRow(MarketDetailsColumns.Bookend.ToString) = SelectedDataRow(MarketDetailsColumns.Bookend.ToString)
            DataRow(MarketDetailsColumns.ValueAdded.ToString) = SelectedDataRow(MarketDetailsColumns.ValueAdded.ToString)
            DataRow(MarketDetailsColumns.DefaultRate.ToString) = SelectedDataRow(MarketDetailsColumns.DefaultRate.ToString)
            DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            If SelectedDataRow(MarketDetailsColumns.MakegoodNumber.ToString) > 0 Then

                DataRow(MarketDetailsColumns.Comments.ToString) = "Makegood is for line " & Format(SelectedDataRow(MarketDetailsColumns.LineNumber.ToString), "0000") & "-" & Format(SelectedDataRow(MarketDetailsColumns.MakegoodNumber.ToString), "00")

            Else

                DataRow(MarketDetailsColumns.Comments.ToString) = "Makegood is for line " & Format(SelectedDataRow(MarketDetailsColumns.LineNumber.ToString), "0000")

            End If

            DataRow(MarketDetailsColumns.OverridePost.ToString) = SelectedDataRow(MarketDetailsColumns.OverridePost.ToString)
            DataRow(MarketDetailsColumns.OverridePostImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.OverridePostImpressions.ToString)
            DataRow(MarketDetailsColumns.OverridePostAQH.ToString) = SelectedDataRow(MarketDetailsColumns.OverridePostAQH.ToString)

            DataRow(MarketDetailsColumns.TotalSpots.ToString) = SelectedDataRow(MarketDetailsColumns.TotalSpots.ToString)
            DataRow(MarketDetailsColumns.TotalDollars.ToString) = SelectedDataRow(MarketDetailsColumns.TotalDollars.ToString)
            DataRow(MarketDetailsColumns.TotalNet.ToString) = SelectedDataRow(MarketDetailsColumns.TotalNet.ToString)
            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = SelectedDataRow(MarketDetailsColumns.BookPrimaryRating.ToString)
            DataRow(MarketDetailsColumns.PrimaryRating.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryRating.ToString)
            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = SelectedDataRow(MarketDetailsColumns.BookPrimaryShare.ToString)
            DataRow(MarketDetailsColumns.PrimaryShare.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryShare.ToString)
            DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryHPUT.ToString)
            DataRow(MarketDetailsColumns.PrimaryCPP.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryCPP.ToString)
            DataRow(MarketDetailsColumns.PrimaryGRP.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryGRP.ToString)
            DataRow(MarketDetailsColumns.PrimaryReach.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryReach.ToString)
            DataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryFrequency.ToString)
            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString)
            DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryImpressions.ToString)
            DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString)
            DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryUniverse.ToString)
            DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString)
            DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = SelectedDataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString)
            DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryAQHRating.ToString)
            DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = SelectedDataRow(MarketDetailsColumns.BookPrimaryAQH.ToString)
            DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryAQH.ToString)
            DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryCumeRating.ToString)
            DataRow(MarketDetailsColumns.PrimaryCume.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryCume.ToString)
            DataRow(MarketDetailsColumns.PrimaryCPM.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryCPM.ToString)
            DataRow(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString)
            DataRow(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString)
            DataRow(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString)

            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = SelectedDataRow(MarketDetailsColumns.BookSecondaryRating.ToString)
            DataRow(MarketDetailsColumns.SecondaryRating.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryRating.ToString)
            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = SelectedDataRow(MarketDetailsColumns.BookSecondaryShare.ToString)
            DataRow(MarketDetailsColumns.SecondaryShare.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryShare.ToString)
            DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryHPUT.ToString)
            DataRow(MarketDetailsColumns.SecondaryCPP.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryCPP.ToString)
            DataRow(MarketDetailsColumns.SecondaryGRP.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryGRP.ToString)
            DataRow(MarketDetailsColumns.SecondaryReach.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryReach.ToString)
            DataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryFrequency.ToString)
            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString)
            DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryImpressions.ToString)
            DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString)
            DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryUniverse.ToString)
            DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString)
            DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = SelectedDataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString)
            DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryAQHRating.ToString)
            DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = SelectedDataRow(MarketDetailsColumns.BookSecondaryAQH.ToString)
            DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryAQH.ToString)
            DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryCumeRating.ToString)
            DataRow(MarketDetailsColumns.SecondaryCume.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryCume.ToString)
            DataRow(MarketDetailsColumns.SecondaryCPM.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryCPM.ToString)
            DataRow(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString)
            DataRow(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString)
            DataRow(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString) = SelectedDataRow(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString)

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = 0
                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)) = SelectedDataRow(MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate))
                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(DetailDate)) = SelectedDataRow(MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(DetailDate))
                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(DetailDate)) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            Next

            MaxMakegoodDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = DataRow(MarketDetailsColumns.VendorCode.ToString) AndAlso
                                                                                                                                                          DR(MarketDetailsColumns.LineNumber.ToString) = DataRow(MarketDetailsColumns.LineNumber.ToString) AndAlso
                                                                                                                                                          DR(MarketDetailsColumns.MakegoodNumber.ToString) = MaxMakegoodNumber)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.InsertAt(DataRow, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(MaxMakegoodDataRow) + 1)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_AddReplacementRow = DataRow

            CreateMakegoodDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.BeginLoadData()

            MakegoodDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Select("VendorCode = '" & DataRow(MarketDetailsColumns.VendorCode.ToString) & "' AND LineNumber = " & DataRow(MarketDetailsColumns.LineNumber.ToString) & " AND MakegoodNumber = " & MaxMakegoodNumber + 1).FirstOrDefault

            If MakegoodDataRow Is Nothing Then

                MakegoodDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.NewRow()

                For Each DataColumn In MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                    MakegoodDataRow(DataColumn.ColumnName) = DataRow(DataColumn.ColumnName)

                Next

                MakegoodDataRow(MarketDetailsColumns.MakegoodNumber.ToString) = MaxMakegoodNumber + 1

                MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Rows.Add(MakegoodDataRow)

            Else

                For Each DataColumn In MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Contains(DataColumn.ColumnName) Then

                        MakegoodDataRow(DataColumn.ColumnName) = DataRow(DataColumn.ColumnName)

                    End If

                Next

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.EndLoadData()

        End Function
        Public Sub MarketDetails_SaveDateSelections(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                    StartDateSelection As String, EndDateSelection As String)

            MediaBroadcastWorksheetMarketDetailsViewModel.StartDateSelection = StartDateSelection
            MediaBroadcastWorksheetMarketDetailsViewModel.EndDateSelection = EndDateSelection

        End Sub
        Public Sub MarketDetails_SaveHideHiatusDatesSetting(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                            HideHiatusDates As Boolean)

            Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                AdvantageFramework.Security.SaveUserSetting(Me.Session, Me.Session.User.ID, AdvantageFramework.Security.UserSettings.MediaBroadcastWorksheet_HideHiatusDates, If(HideHiatusDates, 1, 0))

                MediaBroadcastWorksheetMarketDetailsViewModel.HideHiatusDates = HideHiatusDates

            End Using

        End Sub
        Public Sub MarketDetails_AddRowFromAPSpotImport(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                        VendorCode As String, ImportAccountPayableBroadcastDetails As Generic.List(Of AdvantageFramework.Database.Entities.ImportAccountPayableBroadcastDetail))

            'objects
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim VendorDataRow As System.Data.DataRow = Nothing
            Dim StartTime As String = Nothing
            Dim EndTime As String = Nothing
            Dim NextDate As Nullable(Of Date) = Nothing
            Dim CableNetworkNielsenTVStationCode As Integer = 0
            Dim CableNetworkStationCode As String = String.Empty

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.NewRow()

            DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString) = 0

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                DaysAndTime = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.TV)

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DaysAndTime = New AdvantageFramework.DTO.DaysAndTime(AdvantageFramework.DTO.DaysAndTime.BroadcastTypes.Radio)

            End If

            VendorDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).FirstOrDefault(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode)

            StartTime = Convert.ToDateTime(ImportAccountPayableBroadcastDetails.Min(Function(Entity) Entity.TimeOfDay).ToString).ToShortTimeString
            EndTime = Convert.ToDateTime(ImportAccountPayableBroadcastDetails.Max(Function(Entity) Entity.TimeOfDay).ToString).ToShortTimeString

            DataRow(MarketDetailsColumns.DaysAndTime.ToString) = DaysAndTime

            DaysAndTime.Days = String.Empty

            If ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 1) Then

                DaysAndTime.Days = "M"

            End If

            If ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 2) Then

                If String.IsNullOrWhiteSpace(DaysAndTime.Days) Then

                    DaysAndTime.Days = "Tu"

                Else

                    DaysAndTime.Days = DaysAndTime.Days & ",Tu"

                End If

            End If

            If ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 3) Then

                If String.IsNullOrWhiteSpace(DaysAndTime.Days) Then

                    DaysAndTime.Days = "W"

                Else

                    DaysAndTime.Days = DaysAndTime.Days & ",W"

                End If

            End If

            If ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 4) Then

                If String.IsNullOrWhiteSpace(DaysAndTime.Days) Then

                    DaysAndTime.Days = "Th"

                Else

                    DaysAndTime.Days = DaysAndTime.Days & ",Th"

                End If

            End If

            If ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 5) Then

                If String.IsNullOrWhiteSpace(DaysAndTime.Days) Then

                    DaysAndTime.Days = "F"

                Else

                    DaysAndTime.Days = DaysAndTime.Days & ",F"

                End If

            End If

            If ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 6) Then

                If String.IsNullOrWhiteSpace(DaysAndTime.Days) Then

                    DaysAndTime.Days = "Sa"

                Else

                    DaysAndTime.Days = DaysAndTime.Days & ",Sa"

                End If

            End If

            If ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 7) Then

                If String.IsNullOrWhiteSpace(DaysAndTime.Days) Then

                    DaysAndTime.Days = "Su"

                Else

                    DaysAndTime.Days = DaysAndTime.Days & ",Su"

                End If

            End If

            DaysAndTime.Sunday = ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 7)
            DaysAndTime.Monday = ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 1)
            DaysAndTime.Tuesday = ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 2)
            DaysAndTime.Wednesday = ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 3)
            DaysAndTime.Thursday = ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 4)
            DaysAndTime.Friday = ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 5)
            DaysAndTime.Saturday = ImportAccountPayableBroadcastDetails.Any(Function(BD) BD.DayOfWeek.GetValueOrDefault(0) = 6)

            DaysAndTime.StartTime = StartTime
            DaysAndTime.EndTime = EndTime

            DataRow(MarketDetailsColumns.OnHold.ToString) = False

            Try

                DataRow(MarketDetailsColumns.LineNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode).
                                                                                                                                                            Max(Function(DR) CInt(DR(MarketDetailsColumns.LineNumber.ToString))) + 1

            Catch ex As Exception
                Throw New Exception("Cannot match vendor code:" & VendorCode & " to a vendor in the worksheet.")
            End Try

            DataRow(MarketDetailsColumns.MakegoodNumber.ToString) = 0
            DataRow(MarketDetailsColumns.MakegoodDate.ToString) = Date.MinValue
            DataRow(MarketDetailsColumns.MakegoodSpots.ToString) = 0
            DataRow(MarketDetailsColumns.MadegoodNumber.ToString) = 0

            DataRow(MarketDetailsColumns.RevisionNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber
            DataRow(MarketDetailsColumns.VendorCode.ToString) = VendorCode
            DataRow(MarketDetailsColumns.VendorName.ToString) = VendorDataRow(MarketDetailsColumns.VendorName.ToString)

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = VendorDataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)
                DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = VendorDataRow(MarketDetailsColumns.VendorIsCableSystem.ToString)
                DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = False
                DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = 0
                DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = VendorDataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)

            ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = 0
                DataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = False
                DataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = VendorDataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString)
                DataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = VendorDataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString)
                DataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = 0

            End If

            DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString) = ImportAccountPayableBroadcastDetails.First.NetworkID

            If DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString) IsNot System.DBNull.Value Then

                CableNetworkStationCode = DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)

            End If

            If String.IsNullOrWhiteSpace(CableNetworkStationCode) = False AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations.Any(Function(Entity) Entity.Code = CableNetworkStationCode) Then

                CableNetworkNielsenTVStationCode = MediaBroadcastWorksheetMarketDetailsViewModel.CableNetworkStations.SingleOrDefault(Function(Entity) Entity.Code = CableNetworkStationCode).NielsenTVStationCode

            End If

            If CableNetworkNielsenTVStationCode <> 0 Then

                DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = CableNetworkNielsenTVStationCode

            Else

                DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = System.DBNull.Value

            End If

            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Daypart.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Product.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Piggyback.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Length.ToString) = ImportAccountPayableBroadcastDetails.First.Length

            DataRow(MarketDetailsColumns.Days.ToString) = DaysAndTime.Days
            DataRow(MarketDetailsColumns.StartTime.ToString) = DaysAndTime.StartTime
            DataRow(MarketDetailsColumns.EndTime.ToString) = DaysAndTime.EndTime
            DataRow(MarketDetailsColumns.Comments.ToString) = String.Empty
            DataRow(MarketDetailsColumns.Bookend.ToString) = False
            DataRow(MarketDetailsColumns.ValueAdded.ToString) = False
            DataRow(MarketDetailsColumns.DefaultRate.ToString) = 0
            DataRow(MarketDetailsColumns.OrderStatus.ToString) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            DataRow(MarketDetailsColumns.OverridePost.ToString) = False
            DataRow(MarketDetailsColumns.OverridePostImpressions.ToString) = False
            DataRow(MarketDetailsColumns.OverridePostAQH.ToString) = False

            DataRow(MarketDetailsColumns.RowSource.ToString) = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RowSources.APImport

            DataRow(MarketDetailsColumns.TotalSpots.ToString) = ImportAccountPayableBroadcastDetails.Count
            DataRow(MarketDetailsColumns.TotalDollars.ToString) = 0
            DataRow(MarketDetailsColumns.TotalNet.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCPP.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryGRP.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryReach.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = 0
            DataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryAQH.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCume.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryCPM.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString) = 0
            DataRow(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString) = 0

            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0
            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCPP.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryGRP.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryReach.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = 0
            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0
            DataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = 0
            DataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryAQH.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCume.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryCPM.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString) = 0
            DataRow(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString) = 0

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(DD) DD)

                If MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).Where(Function(DD) DD.Date > DetailDate.Date).Count = 0 Then

                    NextDate = Nothing

                Else

                    NextDate = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).Where(Function(DD) DD.Date > DetailDate.Date).OrderBy(Function(DD) DD).FirstOrDefault

                End If

                If NextDate IsNot Nothing Then

                    DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = ImportAccountPayableBroadcastDetails.Where(Function(Entity) Entity.RunDate >= DetailDate.Date AndAlso Entity.RunDate < NextDate).Count

                Else

                    DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = ImportAccountPayableBroadcastDetails.Where(Function(Entity) Entity.RunDate >= DetailDate.Date).Count

                End If

                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.RateDates(DetailDate)) = 0
                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(DetailDate)) = True
                DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates(DetailDate)) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Add(DataRow)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                MarketDetails_AddNewWorksheetMarketDetailSubmarketDemos(MediaBroadcastWorksheetMarketDetailsViewModel, DataRow(MarketDetailsColumns.ID.ToString))

            End If

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

        End Sub
        Public Sub MarketDetails_CacheBooks(MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim ComscoreTVBookIDs As IEnumerable(Of Integer) = Nothing
            Dim StationNumbers As Generic.List(Of Integer) = Nothing
            Dim ComscoreDemoNumbers As Generic.List(Of Integer) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim ShareHPUTBook As DTO.Media.ShareHPUTBook = Nothing
            Dim VendorCodes As IEnumerable(Of String) = Nothing
            Dim CableNetworkNielsenTVStationCodes As IEnumerable(Of Integer) = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.HasPrimaryDemographic AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.HasValue AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore Then

                Try

                    ComscoreDemoNumbers = New Generic.List(Of Integer)

                    ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)

                    Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value)

                        If MediaDemographic IsNot Nothing AndAlso MediaDemographic.ComscoreDemoNumber.HasValue Then

                            ComscoreDemoNumbers.Add(MediaDemographic.ComscoreDemoNumber.Value)

                        End If

                        CableNetworkNielsenTVStationCodes = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID)
                                                             Where Entity.CableNetworkNielsenTVStationCode.HasValue
                                                             Select Entity.CableNetworkNielsenTVStationCode.Value).Distinct.ToList

                        If CableNetworkNielsenTVStationCodes.Count > 0 Then

                            StationNumbers = DbContext.Database.SqlQuery(Of Integer)(String.Format("SELECT MIN(NUMBER) FROM dbo.COMSCORE_TV_STATION WHERE PRIMARY_MARKET_NUMBER IS NULL AND NETWORK_NUMBER IN ({0}) GROUP BY NETWORK_NUMBER", String.Join(",", CableNetworkNielsenTVStationCodes.ToArray))).ToList

                        Else

                            StationNumbers = New Generic.List(Of Integer)

                        End If

                        StationNumbers.AddRange((From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID).Include("Vendor.ComscoreTVStation")
                                                 Where Entity.Vendor.ComscoreTVStation IsNot Nothing
                                                 Select Entity.Vendor.ComscoreTVStation.Number).Distinct.ToList)

                        'trend books only use Primary Demo and Share book
                        ComscoreTVBookIDs = (From Book In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenTVBook.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID)
                                             Select Book.NielsenTVBookID).ToArray

                        For Each ComscoreTVBookID In ComscoreTVBookIDs

                            ShareHPUTBook = New DTO.Media.ShareHPUTBook()
                            ShareHPUTBook.ShareBookID = ComscoreTVBookID

                            ShareHPUTBooks.Clear()
                            ShareHPUTBooks.Add(ShareHPUTBook)

                            For Each StationNumber In StationNumbers

                                If AdvantageFramework.ComScore.CacheBooks(DbContext, StationNumber, ComscoreDemoNumbers, ShareHPUTBooks, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.Value) = False Then

                                    Throw New Exception("No data found for market:" & MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketCode & ".  Please call customer support and verify your Comscore subscription includes this market and the books selected.")

                                End If

                            Next

                        Next

                        'now to cache the HUT and secondary demos for the worksheet specific books
                        If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                            MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID)

                            If MediaDemographic IsNot Nothing AndAlso MediaDemographic.ComscoreDemoNumber.HasValue Then

                                ComscoreDemoNumbers.Add(MediaDemographic.ComscoreDemoNumber.Value)

                            End If

                        End If

                        ShareHPUTBook = New DTO.Media.ShareHPUTBook()
                        ShareHPUTBook.ShareBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID
                        ShareHPUTBook.HPUTBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID

                        ShareHPUTBooks.Clear()
                        ShareHPUTBooks.Add(ShareHPUTBook)

                        For Each StationNumber In StationNumbers

                            If AdvantageFramework.ComScore.CacheBooks(DbContext, StationNumber, ComscoreDemoNumbers, ShareHPUTBooks, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.Value) = False Then

                                Throw New Exception("No data found for market:" & MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketCode & ".  Please call customer support and verify your Comscore subscription includes this market and the books selected.")

                            End If

                        Next

                        'now to cache the special CDMA DemoNumber = 0
                        If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable Then

                            VendorCodes = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Select(Function(DR) CStr(DR(MarketDetailsColumns.VendorCode.ToString))).Distinct.ToArray

                            If (From Vendor In AdvantageFramework.Database.Procedures.Vendor.Load(DbContext)
                                Where VendorCodes.Contains(Vendor.Code) AndAlso
                                      Vendor.IsCableSystem AndAlso
                                      Vendor.NCCTVSyscodeID IsNot Nothing
                                Select Vendor).Any Then

                                For Each StationNumber In StationNumbers

                                    If AdvantageFramework.ComScore.CacheBooks(DbContext, StationNumber, New Generic.List(Of Integer)({0}), ShareHPUTBooks, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.Value) = False Then

                                        Throw New Exception("No data found for market:" & MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketCode & ".  Please call customer support and verify your Comscore subscription includes this market and the books selected.")

                                    End If

                                Next

                            End If

                        End If

                        PurgeOldCachedBooks(DbContext)

                    End Using

                Catch ex As Exception
                    Throw ex
                End Try

            End If

        End Sub
        Private Sub PurgeOldCachedBooks(DbContext As AdvantageFramework.Database.DbContext)

            DbContext.Database.ExecuteSqlCommand("exec advsp_comscore_tv_purge_cached_books")

        End Sub
        Public Sub MarketDetails_ShareBookSelectionChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                           SharebookNielsenTVBookID As Integer)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If SharebookNielsenTVBookID > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID = SharebookNielsenTVBookID

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID = Nothing

                End If

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue = False OrElse
                        (MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue AndAlso
                         MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.HasValue AndAlso
                         MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.Value = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID.Value) Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID = Nothing

                End If

            End If

        End Sub
        Public Sub MarketDetails_SetSelectedWorksheetMarketSecondaryDemo(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel, MediaDemographicID As Integer)

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo = Nothing
            'MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID = Nothing

            If MediaDemographicID > 0 Then

                MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetSecondaryDemos.SingleOrDefault(Function(Entity) Entity.MediaDemographicID = MediaDemographicID)
                'MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SecondaryMediaDemographicID = MediaDemographicID

            End If

        End Sub
        Public Sub MarketDetails_HUTPUTBookSelectionChanged(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                            HUTPUTNielsenTVBookID As Integer)

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing Then

                If HUTPUTNielsenTVBookID > 0 Then

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID = HUTPUTNielsenTVBookID

                Else

                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID = Nothing

                End If

            End If

        End Sub
        'Public Function MarketDetails_CacheBooksAsync(MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Boolean

        '    'objects
        '    Dim ComscoreTVBookIDs As IEnumerable(Of Integer) = Nothing
        '    Dim StationNumbers As Generic.List(Of Integer) = Nothing
        '    Dim ComscoreDemoNumbers As Generic.List(Of Integer) = Nothing
        '    Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
        '    Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
        '    Dim ShareHPUTBook As DTO.Media.ShareHPUTBook = Nothing
        '    Dim VendorCodes As IEnumerable(Of String) = Nothing
        '    Dim Tasks As Generic.List(Of Task(Of Boolean)) = Nothing
        '    Dim Task As Task(Of Boolean) = Nothing
        '    Dim WaitTask As Task = Nothing

        '    Tasks = New Generic.List(Of System.Threading.Tasks.Task(Of Boolean))

        '    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso
        '            MediaBroadcastWorksheetMarketDetailsViewModel.HasPrimaryDemographic AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.HasValue AndAlso
        '            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.HasValue AndAlso
        '            MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore Then

        '        ComscoreDemoNumbers = New Generic.List(Of Integer)

        '        ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)

        '        Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

        '            MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value)

        '            If MediaDemographic IsNot Nothing AndAlso MediaDemographic.ComscoreDemoNumber.HasValue Then

        '                ComscoreDemoNumbers.Add(MediaDemographic.ComscoreDemoNumber.Value)

        '            End If

        '            StationNumbers = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID)
        '                              Where Entity.CableNetworkNielsenTVStationCode.HasValue
        '                              Select Entity.CableNetworkNielsenTVStationCode.Value).Distinct.ToList

        '            StationNumbers.AddRange((From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID).Include("Vendor.ComscoreTVStation")
        '                                     Where Entity.Vendor.IsComscoreSubsciber = True AndAlso
        '                                               Entity.Vendor.ComscoreTVStation IsNot Nothing
        '                                     Select Entity.Vendor.ComscoreTVStation.Number).Distinct.ToList)

        '            'trend books only use Primary Demo and Share book
        '            ComscoreTVBookIDs = (From Book In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenTVBook.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID)
        '                                 Select Book.NielsenTVBookID).ToArray

        '            For Each ComscoreTVBookID In ComscoreTVBookIDs

        '                ShareHPUTBook = New DTO.Media.ShareHPUTBook()
        '                ShareHPUTBook.ShareBookID = ComscoreTVBookID

        '                ShareHPUTBooks.Clear()
        '                ShareHPUTBooks.Add(ShareHPUTBook)

        '                For Each StationNumber In StationNumbers

        '                    Task = AdvantageFramework.ComScore.CacheBooksAsync(Me.Session, StationNumber, ComscoreDemoNumbers, ShareHPUTBooks, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.Value)
        '                    Tasks.Add(Task)

        '                Next

        '            Next

        '            'now to cache the HUT and secondary demos for the worksheet specific books
        '            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

        '                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID)

        '                If MediaDemographic IsNot Nothing AndAlso MediaDemographic.ComscoreDemoNumber.HasValue Then

        '                    ComscoreDemoNumbers.Add(MediaDemographic.ComscoreDemoNumber.Value)

        '                End If

        '            End If

        '            ShareHPUTBook = New DTO.Media.ShareHPUTBook()
        '            ShareHPUTBook.ShareBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID
        '            ShareHPUTBook.HPUTBookID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.HUTPUTNielsenTVBookID

        '            ShareHPUTBooks.Clear()
        '            ShareHPUTBooks.Add(ShareHPUTBook)

        '            For Each StationNumber In StationNumbers

        '                Task = AdvantageFramework.ComScore.CacheBooksAsync(Me.Session, StationNumber, ComscoreDemoNumbers, ShareHPUTBooks, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.Value)
        '                Tasks.Add(Task)

        '            Next

        '            'now to cache the special CDMA DemoNumber = 0
        '            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.IsCable Then

        '                VendorCodes = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Select(Function(DR) CStr(DR(MarketDetailsColumns.VendorCode.ToString))).Distinct.ToArray

        '                If (From Vendor In AdvantageFramework.Database.Procedures.Vendor.Load(DbContext)
        '                    Where VendorCodes.Contains(Vendor.Code) AndAlso
        '                          Vendor.IsCableSystem AndAlso
        '                          Vendor.NCCTVSyscodeID IsNot Nothing
        '                    Select Vendor).Any Then

        '                    For Each StationNumber In StationNumbers

        '                        Task = AdvantageFramework.ComScore.CacheBooksAsync(Me.Session, StationNumber, New Generic.List(Of Integer)({0}), ShareHPUTBooks, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.MarketComscoreMarketNumber.Value)
        '                        Tasks.Add(Task)

        '                    Next

        '                End If

        '            End If

        '            WaitTask = System.Threading.Tasks.Task.WhenAll(Tasks)

        '            Do Until WaitTask.IsCompleted = True

        '                System.Threading.Thread.Sleep(1000)

        '            Loop

        '            PurgeOldCachedBooks(DbContext)

        '        End Using

        '    End If

        '    Return True

        'End Function
        Public Function MarketDetails_CreateProposalXML(MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                        SuppressRates As Boolean, ByRef VendorCodesNotSetup As Generic.List(Of String), ByRef ErrorMessage As String) As System.IO.MemoryStream

            'objects
            Dim MemoryStream As System.IO.MemoryStream = Nothing

            Try

                Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    MemoryStream = AdvantageFramework.Media.BuildXMLProposalFile(Me.Session, DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID, SuppressRates, Nothing, VendorCodesNotSetup)

                End Using

            Catch ex As Exception
                ErrorMessage = ex.Message
            Finally
                MarketDetails_CreateProposalXML = MemoryStream
            End Try

        End Function
        Public Function MarketDetails_GetOrderLineNumbersByOrderNumber(OrderNumber As Integer, WorksheetLineNumbersAccepted As Generic.List(Of Integer)) As IEnumerable(Of Integer)

            Dim OrderLineNumbers As IEnumerable(Of Integer) = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                OrderLineNumbers = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.Load(DbContext).Include("MediaBroadcastWorksheetMarketDetail")
                                    Where Entity.OrderNumber = OrderNumber AndAlso
                                          Entity.OrderLineNumber.HasValue AndAlso
                                          WorksheetLineNumbersAccepted.Contains(Entity.MediaBroadcastWorksheetMarketDetail.LineNumber)
                                    Select Entity.OrderLineNumber.Value).Distinct.ToArray

            End Using

            MarketDetails_GetOrderLineNumbersByOrderNumber = OrderLineNumbers

        End Function
        Public Function MarketDetails_GetOrderLineNumbers(ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Generic.List(Of AdvantageFramework.Controller.Media.MakegoodDeliveryController.OrderLine)

            Dim OrderLines As Generic.List(Of AdvantageFramework.Controller.Media.MakegoodDeliveryController.OrderLine) = Nothing
            Dim OLs As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderLine) = Nothing
            Dim LineNumbers As IEnumerable(Of Integer) = Nothing
            Dim TVOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.TVOrderDetail) = Nothing
            Dim RadioOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.RadioOrderDetail) = Nothing
            Dim TVOrderDetail As AdvantageFramework.Database.Entities.TVOrderDetail = Nothing
            Dim RadioOrderDetail As AdvantageFramework.Database.Entities.RadioOrderDetail = Nothing

            OrderLines = New Generic.List(Of AdvantageFramework.Controller.Media.MakegoodDeliveryController.OrderLine)

            Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                OLs = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.Load(DbContext).Include("MediaBroadcastWorksheetMarketDetail")
                       Where Entity.OrderNumber.HasValue AndAlso
                             Entity.OrderLineNumber.HasValue AndAlso
                             ViewModel.GenerateApproveMediaBroadcastWorsheetMarketDetailIDs.Contains(Entity.MediaBroadcastWorksheetMarketDetailID)
                       Select New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderLine With {.OrderNumber = Entity.OrderNumber.Value,
                                                                                                           .LineNumber = Entity.OrderLineNumber.Value}).Distinct.ToList

                For Each OrderNumber In OLs.Select(Function(OL) OL.OrderNumber).Distinct.ToList

                    If (From Entity In AdvantageFramework.Database.Procedures.MediaManagerGeneratedReport.Load(DbContext)
                        Where Entity.OrderNumber = OrderNumber).Any Then

                        LineNumbers = OLs.Where(Function(OL) OL.OrderNumber = OrderNumber).Select(Function(OL) OL.LineNumber).Distinct.ToArray

                        If ViewModel.Worksheet.MediaTypeCode = "T" Then

                            TVOrderDetails = AdvantageFramework.Database.Procedures.TVOrderDetail.LoadActiveByOrderNumber(DbContext, OrderNumber).ToList

                            If (From Entity In AdvantageFramework.Database.Procedures.TVOrderStatus.LoadByOrderNumber(DbContext, OrderNumber)
                                Where Entity.OrderStatusID = AdvantageFramework.Database.Entities.OrderStatusType.OrderAccepted).Any Then

                                For Each LineNumber In LineNumbers

                                    TVOrderDetail = TVOrderDetails.Where(Function(D) D.LineNumber = LineNumber).SingleOrDefault

                                    If TVOrderDetail IsNot Nothing AndAlso (From Entity In TVOrderDetails
                                                                            Where Entity.LineNumber <> LineNumber AndAlso
                                                                                  Entity.MonthNumber = TVOrderDetail.MonthNumber AndAlso
                                                                                  Entity.YearNumber = TVOrderDetail.YearNumber).Any Then

                                        OrderLines.Add(New MakegoodDeliveryController.OrderLine(OrderNumber, LineNumber, ViewModel.Worksheet.MediaTypeCode))

                                    End If

                                Next

                            End If

                        ElseIf ViewModel.Worksheet.MediaTypeCode = "R" Then

                            RadioOrderDetails = AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadActiveByOrderNumber(DbContext, OrderNumber).ToList

                            If (From Entity In AdvantageFramework.Database.Procedures.RadioOrderStatus.LoadByOrderNumber(DbContext, OrderNumber)
                                Where Entity.OrderStatusID = AdvantageFramework.Database.Entities.OrderStatusType.OrderAccepted).Any Then

                                For Each LineNumber In LineNumbers

                                    RadioOrderDetail = RadioOrderDetails.Where(Function(D) D.LineNumber = LineNumber).SingleOrDefault

                                    If RadioOrderDetail IsNot Nothing AndAlso (From Entity In RadioOrderDetails
                                                                               Where Entity.LineNumber <> LineNumber AndAlso
                                                                                     Entity.MonthNumber = RadioOrderDetail.MonthNumber AndAlso
                                                                                     Entity.YearNumber = RadioOrderDetail.YearNumber).Any Then

                                        OrderLines.Add(New MakegoodDeliveryController.OrderLine(OrderNumber, LineNumber, ViewModel.Worksheet.MediaTypeCode))

                                    End If

                                Next

                            End If

                        End If

                    End If

                Next

            End Using

            MarketDetails_GetOrderLineNumbers = OrderLines

        End Function
        Public Function MarketDetails_GetOrderLineNumbersForAPImport(ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Generic.List(Of AdvantageFramework.Controller.Media.MakegoodDeliveryController.OrderLine)

            Dim OrderLines As Generic.List(Of AdvantageFramework.Controller.Media.MakegoodDeliveryController.OrderLine) = Nothing
            Dim OLs As Generic.List(Of AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderLine) = Nothing
            Dim LineNumbers As IEnumerable(Of Integer) = Nothing

            OrderLines = New Generic.List(Of AdvantageFramework.Controller.Media.MakegoodDeliveryController.OrderLine)

            Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                OLs = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.Load(DbContext).Include("MediaBroadcastWorksheetMarketDetail")
                       Where Entity.OrderNumber.HasValue AndAlso
                             Entity.OrderLineNumber.HasValue AndAlso
                             ViewModel.GenerateApproveMediaBroadcastWorsheetMarketDetailIDs.Contains(Entity.MediaBroadcastWorksheetMarketDetailID)
                       Select New AdvantageFramework.Classes.Media.MediaBroadcastWorksheet.OrderLine With {.OrderNumber = Entity.OrderNumber.Value,
                                                                                                           .LineNumber = Entity.OrderLineNumber.Value}).Distinct.ToList

                For Each OrderNumber In OLs.Select(Function(OL) OL.OrderNumber).Distinct.ToList

                    If (From Entity In AdvantageFramework.Database.Procedures.MediaManagerGeneratedReport.Load(DbContext)
                        Where Entity.OrderNumber = OrderNumber).Any Then

                        LineNumbers = OLs.Where(Function(OL) OL.OrderNumber = OrderNumber).Select(Function(OL) OL.LineNumber).Distinct.ToArray

                        If ViewModel.Worksheet.MediaTypeCode = "T" Then

                            If (From Entity In AdvantageFramework.Database.Procedures.TVOrderStatus.LoadByOrderNumber(DbContext, OrderNumber)
                                Where Entity.OrderStatusID = AdvantageFramework.Database.Entities.OrderStatusType.OrderAccepted).Any Then

                                For Each LineNumber In LineNumbers

                                    OrderLines.Add(New MakegoodDeliveryController.OrderLine(OrderNumber, LineNumber, ViewModel.Worksheet.MediaTypeCode))

                                Next

                            End If

                        ElseIf ViewModel.Worksheet.MediaTypeCode = "R" Then

                            If (From Entity In AdvantageFramework.Database.Procedures.RadioOrderStatus.LoadByOrderNumber(DbContext, OrderNumber)
                                Where Entity.OrderStatusID = AdvantageFramework.Database.Entities.OrderStatusType.OrderAccepted).Any Then

                                For Each LineNumber In LineNumbers

                                    OrderLines.Add(New MakegoodDeliveryController.OrderLine(OrderNumber, LineNumber, ViewModel.Worksheet.MediaTypeCode))

                                Next

                            End If

                        End If

                    End If

                Next

            End Using

            MarketDetails_GetOrderLineNumbersForAPImport = OrderLines

        End Function
        Public Sub MarketDetails_MakegoodOfferAccepted(MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                       OrderLineNumbers As IEnumerable(Of Integer))

            Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                For Each OrderLineNumber In OrderLineNumbers

                    DbContext.Database.ExecuteSqlCommand(String.Format("exec dbo.advsp_makegood_staging_delete_by_order_line {0}, {1}", MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodOrderNumber, OrderLineNumber))

                Next

                Using SecurityDbContext As New AdvantageFramework.Security.Database.DbContext(Session.ConnectionString, Session.UserCode)

                    MarketDetails_AddAlertComment(DbContext, SecurityDbContext, MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodOrderNumber, MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodMediaType,
                                                  "Makegood offer accepted." & Space(2) & MediaBroadcastWorksheetMarketDetailsViewModel.AcceptMakegoodComment)

                End Using

            End Using

            MediaBroadcastWorksheetMarketDetailsViewModel.IsInAcceptMakegoodMode = False

        End Sub
        Public Function MarketDetails_OkayToGenerate(MediaBroadcastWorksheetMarketDetailIDs As IEnumerable(Of Integer), ByRef OrderSubmittedList As Generic.List(Of AdvantageFramework.Classes.Media.OrderSubmitted)) As Boolean

            Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                OrderSubmittedList = DbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.OrderSubmitted)(String.Format("exec advsp_media_order_ok_to_generate '{0}', NULL", String.Join(",", MediaBroadcastWorksheetMarketDetailIDs.ToArray))).ToList

            End Using

            MarketDetails_OkayToGenerate = (OrderSubmittedList.Count = 0)

        End Function
        Private Sub MarketDetails_LoadNielsenPuertoRicoRatingAndShareData(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                          RowIndexes As Generic.List(Of Integer))

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NPRStationID As Integer = 0
            Dim WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim RowIndexesToRun As Generic.Dictionary(Of Integer, Generic.List(Of Integer)) = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim PrimaryMediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim SecondaryMediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing

            If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.HasValue AndAlso
                    MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.PeriodStart.HasValue AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.PeriodEnd.HasValue Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.PeriodStart.HasValue AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.PeriodEnd.HasValue Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        DbContext.Database.Connection.Open()

                        PrimaryMediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing Then

                            SecondaryMediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.LoadByID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicID)

                        End If

                        RowIndexesToRun = New Generic.Dictionary(Of Integer, Generic.List(Of Integer))

                        For Each RowIndex In RowIndexes

                            NPRStationID = 0

                            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                            DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                            If DaysAndTime IsNot Nothing AndAlso String.IsNullOrWhiteSpace(DaysAndTime.Days) = False AndAlso String.IsNullOrWhiteSpace(DaysAndTime.StartTime) = False AndAlso
                                        String.IsNullOrWhiteSpace(DaysAndTime.EndTime) = False Then

                                NPRStationID = DataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)

                                If NPRStationID <> 0 Then

                                    If RowIndexesToRun.ContainsKey(NPRStationID) = False Then

                                        RowIndexesToRun(NPRStationID) = New Generic.List(Of Integer)

                                    End If

                                    CType(RowIndexesToRun(NPRStationID), Generic.List(Of Integer)).Add(RowIndex)

                                End If

                            End If

                        Next

                        If RowIndexesToRun.Count > 0 Then

                            For Each StationRowIndexes In RowIndexesToRun

                                NPRStationID = StationRowIndexes.Key

                                MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                For Each RowIndex In StationRowIndexes.Value

                                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)
                                    DaysAndTime = DataRow(MarketDetailsColumns.DaysAndTime.ToString)

                                    WorksheetMarketDetail = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail
                                    WorksheetMarketDetail.ID = RowIndex + 1

                                    DaysAndTime.SaveToEntity(WorksheetMarketDetail)

                                    MediaSpotTVResearchDaytimeTypes.Add(New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(WorksheetMarketDetail))

                                Next

                                TVWorksheetRatingAndShareDataList = GetNielsenTVPuertoRicoRatings(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.PeriodStart.Value,
                                                                                                  MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.PeriodEnd.Value, NPRStationID, MediaSpotTVResearchDaytimeTypes,
                                                                                                  MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.PrimaryMediaDemographicID.Value,
                                                                                                  If(SecondaryMediaDemographic IsNot Nothing, SecondaryMediaDemographic.ID, Nothing))

                                If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                    For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID - 1)

                                        If PrimaryMediaDemographic IsNot Nothing AndAlso TVWorksheetRatingAndShareData.MediaDemoID.HasValue AndAlso PrimaryMediaDemographic.ID = TVWorksheetRatingAndShareData.MediaDemoID.Value Then

                                            If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                                DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                            Else

                                                DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                DataRow(MarketDetailsColumns.PrimaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                            End If

                                            If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                                DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            Else

                                                DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)
                                                DataRow(MarketDetailsColumns.PrimaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            End If

                                            DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = Math.Round(TVWorksheetRatingAndShareData.HPUT, 2)

                                            If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            Else

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                                DataRow(MarketDetailsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            End If

                                            If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                                DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                            Else

                                                DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                                DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                            End If

                                            DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = TVWorksheetRatingAndShareData.Universe

                                        ElseIf SecondaryMediaDemographic IsNot Nothing AndAlso TVWorksheetRatingAndShareData.MediaDemoID.HasValue AndAlso SecondaryMediaDemographic.ID = TVWorksheetRatingAndShareData.MediaDemoID.Value Then

                                            If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                                DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                            Else

                                                DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)
                                                DataRow(MarketDetailsColumns.SecondaryRating.ToString) = Math.Round(TVWorksheetRatingAndShareData.Rating, 2)

                                            End If

                                            If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                                DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            Else

                                                DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)
                                                DataRow(MarketDetailsColumns.SecondaryShare.ToString) = Math.Round(TVWorksheetRatingAndShareData.Share, 2)

                                            End If

                                            DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = Math.Round(TVWorksheetRatingAndShareData.HPUT, 2)

                                            If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            Else

                                                DataRow(MarketDetailsColumns.BookProgram.ToString) = TVWorksheetRatingAndShareData.ProgramName
                                                DataRow(MarketDetailsColumns.Program.ToString) = TVWorksheetRatingAndShareData.ProgramName

                                            End If

                                            If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                                DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                            Else

                                                DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions
                                                DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = TVWorksheetRatingAndShareData.Impressions

                                            End If

                                            DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = TVWorksheetRatingAndShareData.Universe

                                        End If

                                    Next

                                Else

                                    For Each RowIndex In StationRowIndexes.Value

                                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                        If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                        If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                        Else

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                        End If

                                        If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                            DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                        DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                                        'secondary start
                                        If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                        If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                        Else

                                            DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                            DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                        End If

                                        If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                        Else

                                            DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                            DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                        End If

                                        DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                        DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                                    Next

                                End If

                            Next

                        Else

                            For Each RowIndex In RowIndexes

                                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                                If DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) <> DataRow(MarketDetailsColumns.PrimaryRating.ToString) Then

                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                                    DataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0

                                End If

                                If DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) <> DataRow(MarketDetailsColumns.PrimaryShare.ToString) Then

                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                                    DataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0

                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                Else

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                    DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                End If

                                If DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) <> DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) Then

                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                                    DataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                                DataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0

                                'secondary start
                                If DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) <> DataRow(MarketDetailsColumns.SecondaryRating.ToString) Then

                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                                    DataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0

                                End If

                                If DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) <> DataRow(MarketDetailsColumns.SecondaryShare.ToString) Then

                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                                    DataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0

                                If DataRow(MarketDetailsColumns.BookProgram.ToString) <> DataRow(MarketDetailsColumns.Program.ToString) Then

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty

                                Else

                                    DataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                                    DataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                                End If

                                If DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) <> DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) Then

                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0

                                Else

                                    DataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                                    DataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0

                                End If

                                DataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                                DataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0

                            Next

                        End If

                    End Using

                End If

            End If

        End Sub
        Public Function GetNielsenTVPuertoRicoRatings(PeriodStart As Date, PeriodEnd As Date, NPRStationID As Integer,
                                                      MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType),
                                                      PrimaryDemoID As Integer, SecondaryDemoID As Nullable(Of Integer)) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

            'objects
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim SqlParameterStartDate As SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As SqlClient.SqlParameter = Nothing
            Dim SqlParameterNPRStationIDs As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVDaytimeType As SqlClient.SqlParameter = Nothing
            Dim SqlParameterPrimaryDemoID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterSecondaryDemoID As SqlClient.SqlParameter = Nothing

            SqlParameterStartDate = New SqlClient.SqlParameter("@StartDate", SqlDbType.SmallDateTime)
            SqlParameterStartDate.Value = PeriodStart

            SqlParameterEndDate = New SqlClient.SqlParameter("@EndDate", SqlDbType.SmallDateTime)
            SqlParameterEndDate.Value = PeriodEnd

            SqlParameterNPRStationIDs = New SqlClient.SqlParameter("@NPR_STATION_ID", SqlDbType.Int)
            SqlParameterNPRStationIDs.Value = NPRStationID

            SqlParameterMediaSpotTVDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVDaytimeType.TypeName = "MEDIA_SPOT_TV_DAYTIME_TYPE"
            SqlParameterMediaSpotTVDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterPrimaryDemoID = New SqlClient.SqlParameter("@PRIMARY_DEMO_ID", SqlDbType.Int)
            SqlParameterPrimaryDemoID.Value = PrimaryDemoID

            SqlParameterSecondaryDemoID = New SqlClient.SqlParameter("@SECONDARY_DEMO_ID", SqlDbType.Int)

            If SecondaryDemoID.HasValue Then

                SqlParameterSecondaryDemoID.Value = SecondaryDemoID

            Else

                SqlParameterSecondaryDemoID.Value = System.DBNull.Value

            End If

            Using DbContext As New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                TVWorksheetRatingAndShareDataList = DbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)("exec advsp_npr_worksheet_ratings @StartDate, @EndDate, @NPR_STATION_ID, @MEDIA_SPOT_TV_DAYTIME_TYPE, @PRIMARY_DEMO_ID, @SECONDARY_DEMO_ID",
                        SqlParameterStartDate, SqlParameterEndDate, SqlParameterNPRStationIDs, SqlParameterMediaSpotTVDaytimeType, SqlParameterPrimaryDemoID, SqlParameterSecondaryDemoID).ToList

            End Using

            GetNielsenTVPuertoRicoRatings = TVWorksheetRatingAndShareDataList

        End Function
        Public Sub MarketDetails_SetSelectedMarketPeriodDates(PeriodStart As Nullable(Of Date), PeriodEnd As Nullable(Of Date),
                                                              ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                              ByRef PeriodStartErrorText As String, ByRef PeriodEndErrorText As String)

            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.PeriodStart = PeriodStart
            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.PeriodEnd = PeriodEnd

            MarketDetails_ValidateDTO(MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket, True)

            PeriodStartErrorText = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.LoadErrorText(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket.Properties.PeriodStart.ToString)
            PeriodEndErrorText = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.LoadErrorText(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket.Properties.PeriodEnd.ToString)

        End Sub
        Private Function MarketDetails_ValidateDTO(WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket, ByRef IsValid As Boolean) As String

            'objects
            Dim ErrorText As String = String.Empty

            SetRequiredFields(WorksheetMarket)

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    ErrorText = ValidateDTO(DbContext, DataContext, WorksheetMarket, IsValid)

                End Using

            End Using

            MarketDetails_ValidateDTO = ErrorText

        End Function

#End Region

#Region "  Market Manage Vendor "

        Public Function MarketManageVendors_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer, RevisionNumber As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketManageVendorsViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketManageVendorsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketManageVendorsViewModel = Nothing
            Dim WorksheetMarketDetailVendor As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendor = Nothing
            Dim MediaTypeCode As String = String.Empty
            Dim VendorCodes() As String = Nothing
            Dim Vendors As Generic.List(Of AdvantageFramework.Database.Entities.Vendor) = Nothing
            Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim AddVendor As Boolean = False

            MediaBroadcastWorksheetMarketManageVendorsViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketManageVendorsViewModel

            MediaBroadcastWorksheetMarketManageVendorsViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketManageVendorsViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID
            MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketRevisionNumber = RevisionNumber

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                               Include("Division").
                                                                                                                                                               Include("Product").
                                                                                                                                                               Include("SalesClass").
                                                                                                                                                               Include("Campaign").
                                                                                                                                                               Include("MediaPlan").
                                                                                                                                                               Include("PrimaryMediaDemographic").
                                                                                                                                                               Include("Country").Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                               Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                                           Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketID).ToList.
                                                                                                                                                                           Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).FirstOrDefault

                Vendors = AdvantageFramework.Database.Procedures.Vendor.Load(DbContext).Include("Market").ToList
                MediaBroadcastWorksheetMarketDetails = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID).Include("Vendor").Include("Vendor.Market").Include("MediaBroadcastWorksheetMarketDetailDates").ToList

                VendorCodes = MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.RevisionNumber = RevisionNumber).Select(Function(Entity) Entity.VendorCode).Distinct.ToArray

                MediaTypeCode = MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.MediaTypeCode

                For Each Vendor In Vendors

                    AddVendor = False

                    If VendorCodes.Contains(Vendor.Code) OrElse
                            Vendor.VendorCategory = MediaTypeCode OrElse
                            (MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV AndAlso Vendor.TVCategory = 1) OrElse
                            (MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio AndAlso Vendor.RadioCategory = 1) Then

                        If VendorCodes.Contains(Vendor.Code) Then

                            WorksheetMarketDetailVendor = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendor

                            WorksheetMarketDetailVendor.VendorCode = Vendor.Code
                            WorksheetMarketDetailVendor.VendorName = Vendor.Name
                            WorksheetMarketDetailVendor.MarketCode = Vendor.MarketCode
                            WorksheetMarketDetailVendor.MarketDescription = If(Vendor.Market IsNot Nothing, Vendor.Market.Description, String.Empty)
                            WorksheetMarketDetailVendor.VendorCategory = Vendor.VendorCategory
                            WorksheetMarketDetailVendor.IsInactive = If(Vendor.ActiveFlag = 1, False, True)

                            WorksheetMarketDetailVendor.Selected = True

                            WorksheetMarketDetailVendor.HasOrders = MediaBroadcastWorksheetMarketDetails.Where(Function(Entity) Entity.VendorCode = Vendor.Code).SelectMany(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailDates).Any(Function(Entity) Entity.LinkID.HasValue)

                            MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarketDetailVendors.Add(WorksheetMarketDetailVendor)

                        ElseIf Vendor.ActiveFlag = 1 Then

                            'If MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.CountryID = AdvantageFramework.DTO.Countries.Canada Then

                            '    If Vendor.Market IsNot Nothing AndAlso Vendor.Market.CountryID.GetValueOrDefault(1) = AdvantageFramework.DTO.Countries.Canada AndAlso Vendor.Market.IsAllCanada Then

                            '        AddVendor = True

                            '    End If

                            'Else

                            If Vendor.Market IsNot Nothing AndAlso Vendor.Market.CountryID.GetValueOrDefault(1) = MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.CountryID Then

                                AddVendor = True

                            ElseIf MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico AndAlso
                                    Vendor.Market IsNot Nothing AndAlso Vendor.Market.IsPuertoRico Then

                                AddVendor = True

                            End If

                            'End If

                            If AddVendor Then

                                WorksheetMarketDetailVendor = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendor

                                WorksheetMarketDetailVendor.VendorCode = Vendor.Code
                                WorksheetMarketDetailVendor.VendorName = Vendor.Name
                                WorksheetMarketDetailVendor.MarketCode = Vendor.MarketCode
                                WorksheetMarketDetailVendor.MarketDescription = If(Vendor.Market IsNot Nothing, Vendor.Market.Description, String.Empty)
                                WorksheetMarketDetailVendor.VendorCategory = Vendor.VendorCategory
                                WorksheetMarketDetailVendor.IsInactive = If(Vendor.ActiveFlag = 1, False, True)

                                WorksheetMarketDetailVendor.Selected = False
                                WorksheetMarketDetailVendor.HasOrders = False

                                MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarketDetailVendors.Add(WorksheetMarketDetailVendor)

                            End If

                        End If

                    End If

                Next

            End Using

            MarketManageVendors_Load = MediaBroadcastWorksheetMarketManageVendorsViewModel

        End Function
        Public Function MarketManageVendors_Add(ByRef MediaBroadcastWorksheetMarketManageVendorsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketManageVendorsViewModel,
                                                ByRef ErrorMessage As String) As Boolean

            'objects
            Dim IsValid As Boolean = True
            Dim Added As Boolean = False
            Dim MediaBroadcastWorksheetMarketDetail As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing
            Dim DetailDates As Generic.List(Of Date) = Nothing
            Dim MediaBroadcastWorksheetMarketGoalIDs() As Integer = Nothing
            Dim MediaBroadcastWorksheetMarketGoalDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate) = Nothing
            Dim WorksheetMarketID As Integer = 0
            Dim VendorCode As String = String.Empty
            Dim VendorMarkets As Generic.List(Of AdvantageFramework.Database.Entities.VendorMarket) = Nothing
            Dim MediaBroadcastWorksheetMarketSubmarkets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket) = Nothing
            Dim MediaBroadcastWorksheetMarketSubmarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket = Nothing
            Dim SubmarketOrder As Integer = 0

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                WorksheetMarketID = MediaBroadcastWorksheetMarketManageVendorsViewModel.MediaBroadcastWorksheetMarketID

                If AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.Load(DbContext).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).Any() = False Then

                    MediaBroadcastWorksheetMarketGoalIDs = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoal.Load(DbContext).Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).Select(Function(Entity) Entity.ID).ToArray

                    MediaBroadcastWorksheetMarketGoalDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketGoalDate.Load(DbContext).Where(Function(Entity) MediaBroadcastWorksheetMarketGoalIDs.Contains(Entity.MediaBroadcastWorksheetMarketGoalID) = True).ToList

                Else

                    MediaBroadcastWorksheetMarketGoalDates = New Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketGoalDate)

                End If

                DetailDates = GetWorksheetDates(MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet, MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.UseOldCalendarDateCreation)

                For Each WorksheetMarketDetailVendor In MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketDetailVendors

                    If WorksheetMarketDetailVendor.Selected = False Then

                        MediaBroadcastWorksheetMarketDetail = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail

                        MediaBroadcastWorksheetMarketDetail.DbContext = DbContext

                        MediaBroadcastWorksheetMarketDetail.CreatedByUserCode = Me.Session.UserCode
                        MediaBroadcastWorksheetMarketDetail.CreatedDate = Now

                        MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketManageVendorsViewModel.MediaBroadcastWorksheetMarketID
                        MediaBroadcastWorksheetMarketDetail.VendorCode = WorksheetMarketDetailVendor.VendorCode

                        MediaBroadcastWorksheetMarketDetail.LineNumber = 1
                        MediaBroadcastWorksheetMarketDetail.RevisionNumber = MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketRevisionNumber

                        MediaBroadcastWorksheetMarketDetail.CableNetworkStationCode = String.Empty
                        MediaBroadcastWorksheetMarketDetail.CableNetworkNielsenTVStationCode = Nothing
                        MediaBroadcastWorksheetMarketDetail.BookProgram = String.Empty
                        MediaBroadcastWorksheetMarketDetail.Program = String.Empty
                        MediaBroadcastWorksheetMarketDetail.DaypartID = Nothing
                        MediaBroadcastWorksheetMarketDetail.Product = String.Empty
                        MediaBroadcastWorksheetMarketDetail.Piggyback = String.Empty

                        If MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.Length > 0 AndAlso MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarket.Length > 0 Then

                            MediaBroadcastWorksheetMarketDetail.Length = MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarket.Length

                        ElseIf MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.Length > 0 AndAlso MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarket.Length = 0 Then

                            MediaBroadcastWorksheetMarketDetail.Length = MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.Length

                        ElseIf MediaBroadcastWorksheetMarketManageVendorsViewModel.Worksheet.Length = 0 AndAlso MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarket.Length > 0 Then

                            MediaBroadcastWorksheetMarketDetail.Length = MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarket.Length

                        Else

                            MediaBroadcastWorksheetMarketDetail.Length = 0

                        End If

                        MediaBroadcastWorksheetMarketDetail.Days = String.Empty
                        MediaBroadcastWorksheetMarketDetail.Sunday = False
                        MediaBroadcastWorksheetMarketDetail.Monday = False
                        MediaBroadcastWorksheetMarketDetail.Tuesday = False
                        MediaBroadcastWorksheetMarketDetail.Wednesday = False
                        MediaBroadcastWorksheetMarketDetail.Thursday = False
                        MediaBroadcastWorksheetMarketDetail.Friday = False
                        MediaBroadcastWorksheetMarketDetail.Saturday = False
                        MediaBroadcastWorksheetMarketDetail.StartTime = String.Empty
                        MediaBroadcastWorksheetMarketDetail.EndTime = String.Empty
                        MediaBroadcastWorksheetMarketDetail.Comments = String.Empty
                        MediaBroadcastWorksheetMarketDetail.Bookend = False
                        MediaBroadcastWorksheetMarketDetail.ValueAdded = False
                        MediaBroadcastWorksheetMarketDetail.DefaultRate = Nothing
                        MediaBroadcastWorksheetMarketDetail.OrderComments = String.Empty
                        MediaBroadcastWorksheetMarketDetail.OverridePost = False
                        MediaBroadcastWorksheetMarketDetail.OnHold = False

                        DbContext.MediaBroadcastWorksheetMarketDetails.Add(MediaBroadcastWorksheetMarketDetail)

                        For Each DetailDate In DetailDates

                            MediaBroadcastWorksheetMarketDetailDate = Nothing

                            MediaBroadcastWorksheetMarketDetailDate = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate

                            DbContext.MediaBroadcastWorksheetMarketDetailDates.Add(MediaBroadcastWorksheetMarketDetailDate)

                            MediaBroadcastWorksheetMarketDetailDate.Date = DetailDate

                            MediaBroadcastWorksheetMarketDetailDate.Spots = 0

                            If MediaBroadcastWorksheetMarketGoalDates.Count > 0 Then

                                MediaBroadcastWorksheetMarketDetailDate.IsHiatus = MediaBroadcastWorksheetMarketGoalDates.Any(Function(Entity) Entity.Date = DetailDate AndAlso Entity.IsHiatus = True)

                            Else

                                MediaBroadcastWorksheetMarketDetailDate.IsHiatus = False

                            End If

                            MediaBroadcastWorksheetMarketDetailDate.AllowSpotsToBeEntered = True

                            MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetOrderStatusID = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

                            MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail = MediaBroadcastWorksheetMarketDetail

                        Next

                    End If

                    WorksheetMarketDetailVendor.Selected = True

                Next

                If MediaBroadcastWorksheetMarketManageVendorsViewModel.DoesWorksheetAllowSubmarkets Then

                    MediaBroadcastWorksheetMarketSubmarkets = DbContext.MediaBroadcastWorksheetMarketSubmarkets.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID).ToList

                    If MediaBroadcastWorksheetMarketSubmarkets IsNot Nothing AndAlso MediaBroadcastWorksheetMarketSubmarkets.Count > 0 Then

                        SubmarketOrder = MediaBroadcastWorksheetMarketSubmarkets.Select(Function(Entity) Entity.Order).Max

                        SubmarketOrder += 1

                    End If

                    For Each WorksheetMarketDetailVendor In MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketDetailVendors

                        VendorCode = String.Empty
                        VendorMarkets = Nothing

                        VendorCode = WorksheetMarketDetailVendor.VendorCode

                        If String.IsNullOrWhiteSpace(VendorCode) = False Then

                            If String.IsNullOrWhiteSpace(WorksheetMarketDetailVendor.MarketCode) = False AndAlso MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarket.MarketCode <> WorksheetMarketDetailVendor.MarketCode Then

                                If MediaBroadcastWorksheetMarketSubmarkets.Any(Function(Entity) Entity.MarketCode = WorksheetMarketDetailVendor.MarketCode) = False Then

                                    MediaBroadcastWorksheetMarketSubmarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket

                                    MediaBroadcastWorksheetMarketSubmarket.MediaBroadcastWorksheetMarketID = WorksheetMarketID
                                    MediaBroadcastWorksheetMarketSubmarket.MarketCode = WorksheetMarketDetailVendor.MarketCode
                                    MediaBroadcastWorksheetMarketSubmarket.Order = SubmarketOrder

                                    DbContext.MediaBroadcastWorksheetMarketSubmarkets.Add(MediaBroadcastWorksheetMarketSubmarket)

                                    MediaBroadcastWorksheetMarketSubmarkets.Add(MediaBroadcastWorksheetMarketSubmarket)

                                    SubmarketOrder += 1

                                End If

                            End If

                            VendorMarkets = DbContext.VendorMarkets.Where(Function(Entity) Entity.VendorCode = WorksheetMarketDetailVendor.VendorCode).ToList

                            If VendorMarkets IsNot Nothing AndAlso VendorMarkets.Count > 0 Then

                                VendorMarkets = VendorMarkets.OrderBy(Function(Entity) Entity.Order).ToList

                                For Each VendorMarket In VendorMarkets

                                    If MediaBroadcastWorksheetMarketManageVendorsViewModel.WorksheetMarket.MarketCode <> VendorMarket.MarketCode Then

                                        If MediaBroadcastWorksheetMarketSubmarkets.Any(Function(Entity) Entity.MarketCode = VendorMarket.MarketCode) = False Then

                                            MediaBroadcastWorksheetMarketSubmarket = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketSubmarket

                                            MediaBroadcastWorksheetMarketSubmarket.MediaBroadcastWorksheetMarketID = WorksheetMarketID
                                            MediaBroadcastWorksheetMarketSubmarket.MarketCode = VendorMarket.MarketCode
                                            MediaBroadcastWorksheetMarketSubmarket.Order = SubmarketOrder

                                            DbContext.MediaBroadcastWorksheetMarketSubmarkets.Add(MediaBroadcastWorksheetMarketSubmarket)

                                            MediaBroadcastWorksheetMarketSubmarkets.Add(MediaBroadcastWorksheetMarketSubmarket)

                                            SubmarketOrder += 1

                                        End If

                                    End If

                                Next

                            End If

                        End If

                    Next

                End If

                Try

                    DbContext.SaveChanges()

                    Added = True

                Catch ex As SqlClient.SqlException
                    Added = False
                    ErrorMessage = ex.Message
                End Try

            End Using

            If Added Then

                MediaBroadcastWorksheetMarketManageVendorsViewModel.HasVendorsBeenModified = True

                For Each WorksheetMarketDetailVendor In MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketDetailVendors

                    WorksheetMarketDetailVendor.Selected = True

                Next

            End If

            MarketManageVendors_Add = Added

        End Function
        Public Function MarketManageVendors_Delete(ByRef MediaBroadcastWorksheetMarketManageVendorsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketManageVendorsViewModel,
                                                   ByRef ErrorMessage As String) As Boolean

            'objects
            Dim Deleted As Boolean = False
            Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing
            Dim RevisionNumber As Integer = 0
            Dim MediaBroadcastWorksheetMarketID As Integer = 0
            Dim StationID As Nullable(Of Integer) = 0

            'VendorCode = MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketDetailVendors.VendorCode

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                RevisionNumber = MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketRevisionNumber
                MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketManageVendorsViewModel.MediaBroadcastWorksheetMarketID

                For Each WorksheetMarketDetailVendor In MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketDetailVendors

                    If WorksheetMarketDetailVendor.Selected Then

                        MediaBroadcastWorksheetMarketDetails = DbContext.MediaBroadcastWorksheetMarketDetails.Include("MediaBroadcastWorksheetMarketDetailDates").Include("MediaBroadcastWorksheetMarketDetailSubmarketDemos").
                                                                                                              Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso
                                                                                                                                     Entity.VendorCode = WorksheetMarketDetailVendor.VendorCode AndAlso
                                                                                                                                     Entity.RevisionNumber = RevisionNumber).ToList

                        If MediaBroadcastWorksheetMarketDetails IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetails.Count > 0 Then

                            For Each MediaBroadcastWorksheetMarketDetail In MediaBroadcastWorksheetMarketDetails.ToList

                                For Each MediaBroadcastWorksheetMarketDetailDate In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailDates.ToList

                                    DbContext.MediaBroadcastWorksheetMarketDetailDates.Remove(MediaBroadcastWorksheetMarketDetailDate)

                                Next

                                For Each MediaBroadcastWorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketDetailSubmarketDemos.ToList

                                    DbContext.MediaBroadcastWorksheetMarketDetailSubmarketDemos.Remove(MediaBroadcastWorksheetMarketDetailSubmarketDemo)

                                Next

                                DbContext.MediaBroadcastWorksheetMarketDetails.Remove(MediaBroadcastWorksheetMarketDetail)

                            Next

                        End If

                        DbContext.Database.ExecuteSqlCommand(String.Format("exec advsp_media_rfp_header_delete '{0}', {1}", WorksheetMarketDetailVendor.VendorCode, MediaBroadcastWorksheetMarketID))

                    End If

                Next

                DbContext.Configuration.AutoDetectChangesEnabled = True

                DbContext.SaveChanges()

                For Each WorksheetMarketDetailVendor In MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketDetailVendors

                    WorksheetMarketDetailVendor.Selected = False

                Next

                Deleted = True

                MediaBroadcastWorksheetMarketManageVendorsViewModel.HasVendorsBeenModified = True

            End Using

            MarketManageVendors_Delete = Deleted

        End Function
        'Public Function MarketManageVendors_LoadStations(ByRef MediaBroadcastWorksheetMarketManageVendorsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketManageVendorsViewModel,
        '                                                 VendorCode As String) As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Station)

        '    'objects
        '    Dim Stations As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Station) = Nothing
        '    Dim StationIDs As Generic.List(Of Integer) = Nothing
        '    Dim Station As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Station = Nothing

        '    Stations = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Station)

        '    Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

        '        StationIDs = DbContext.VendorStations.Where(Function(Entity) Entity.VendorCode = VendorCode).Select(Function(Entity) Entity.StationID).ToList

        '        Stations = MediaBroadcastWorksheetMarketManageVendorsViewModel.Stations.Where(Function(Entity) StationIDs.Contains(Entity.ID)).ToList

        '        Stations = Stations.OrderBy(Function(Entity) Entity.Name).ToList

        '    End Using

        '    MarketManageVendors_LoadStations = Stations

        'End Function
        Public Sub MarketManageVendors_VendorSelectionChanged(ByRef MediaBroadcastWorksheetMarketManageVendorsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketManageVendorsViewModel,
                                                              SelectedWorksheetMarketDetailVendors As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendor))

            MediaBroadcastWorksheetMarketManageVendorsViewModel.SelectedWorksheetMarketDetailVendors = SelectedWorksheetMarketDetailVendors

        End Sub

#End Region

#Region "  Market Vendor Order Comments "

        Public Function MarketVendorOrderComments_Load(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel = Nothing
            Dim VendorCodes() As String = Nothing
            Dim DataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel

            MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
            MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

            VendorCodes = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Select(Function(DR) CStr(DR(MarketDetailsColumns.VendorCode.ToString))).Distinct.ToArray

            For Each VendorCode In VendorCodes

                DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).FirstOrDefault(Function(DR) CStr(DR(MarketDetailsColumns.VendorCode.ToString)) = VendorCode)

                MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.WorksheetMarketVendorOrderCommentsList.Add(New DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorOrderComments With {.VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString),
                                                                                                                                                                                                    .VendorName = DataRow(MarketDetailsColumns.VendorName.ToString),
                                                                                                                                                                                                    .OrderComments = DataRow(MarketDetailsColumns.OrderComments.ToString)})

            Next

            MarketVendorOrderComments_Load = MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel

        End Function
        Public Sub MarketVendorOrderComments_UserEntryChanged(ByRef MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel)

            MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.UpdateEnabled = True

        End Sub
        Public Sub MarketVendorOrderComments_ClearChanged(ByRef MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel)

            MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.UpdateEnabled = False

        End Sub
        Public Sub MarketVendorOrderComments_Update(ByRef MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel,
                                                    ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            For Each WorksheetMarketVendorOrderComments In MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.WorksheetMarketVendorOrderCommentsList

                For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) CStr(DR(MarketDetailsColumns.VendorCode.ToString)) = WorksheetMarketVendorOrderComments.VendorCode)

                    DataRow(MarketDetailsColumns.OrderComments.ToString) = WorksheetMarketVendorOrderComments.OrderComments

                Next

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

        End Sub

#End Region

#Region "  Market Vendor Order Comments Copy To Another Vendor"

        Public Function MarketVendorOrderCommentsCopyToAnotherVendor_Load(ByRef MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel,
                                                                          CopyFromVendorCode As String) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel = Nothing

            MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel

            MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel.CopyFromVendorCode = CopyFromVendorCode

            MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel.WorksheetMarketDetailVendors = New List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendor)

            For Each WorksheetMarketVendorOrderComments In MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.WorksheetMarketVendorOrderCommentsList

                If WorksheetMarketVendorOrderComments.VendorCode <> CopyFromVendorCode Then

                    MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel.WorksheetMarketDetailVendors.Add(New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendor With {.VendorCode = WorksheetMarketVendorOrderComments.VendorCode,
                                                                                                                                                                                                                             .VendorName = WorksheetMarketVendorOrderComments.VendorName,
                                                                                                                                                                                                                             .Selected = False})

                End If

            Next

            MarketVendorOrderCommentsCopyToAnotherVendor_Load = MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel

        End Function
        Public Sub MarketVendorOrderCommentsCopyToAnotherVendor_SelectDeselectAll(ByRef MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel,
                                                                                  SelectAll As Boolean)

            For Each WorksheetMarketDetailVendor In MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel.WorksheetMarketDetailVendors

                WorksheetMarketDetailVendor.Selected = SelectAll

            Next

        End Sub
        Public Sub MarketVendorOrderCommentsCopyToAnotherVendor_CopyTo(ByRef MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel,
                                                                       ByRef MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel)


            'objects
            Dim CopyFromVendorCode As String = String.Empty
            Dim CopyFromWorksheetMarketVendorOrderComments As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorOrderComments = Nothing
            Dim WorksheetMarketVendorOrderComments As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorOrderComments = Nothing
            Dim CopiedAtleastOneComment As Boolean = False

            CopyFromVendorCode = MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel.CopyFromVendorCode

            Try

                CopyFromWorksheetMarketVendorOrderComments = MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.WorksheetMarketVendorOrderCommentsList.SingleOrDefault(Function(Entity) Entity.VendorCode = CopyFromVendorCode)

            Catch ex As Exception
                CopyFromWorksheetMarketVendorOrderComments = Nothing
            End Try

            If CopyFromWorksheetMarketVendorOrderComments IsNot Nothing Then

                For Each WorksheetMarketDetailVendor In MediaBroadcastWorksheetMarketVendorOrderCommentsCopyToAnotherVendorViewModel.WorksheetMarketDetailVendors

                    If WorksheetMarketDetailVendor.Selected = True Then

                        Try

                            WorksheetMarketVendorOrderComments = MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.WorksheetMarketVendorOrderCommentsList.SingleOrDefault(Function(Entity) Entity.VendorCode = WorksheetMarketDetailVendor.VendorCode)

                        Catch ex As Exception
                            WorksheetMarketVendorOrderComments = Nothing
                        End Try

                        If WorksheetMarketVendorOrderComments IsNot Nothing Then

                            WorksheetMarketVendorOrderComments.OrderComments = CopyFromWorksheetMarketVendorOrderComments.OrderComments
                            CopiedAtleastOneComment = True

                        End If

                    End If

                Next

            End If

            If CopiedAtleastOneComment Then

                MediaBroadcastWorksheetMarketVendorOrderCommentsViewModel.UpdateEnabled = True

            End If

        End Sub

#End Region

#Region "  Market Details Copy Date "

        Public Function MarketDetailsCopyDate_Load(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                   CopyFromDateColumnName As String) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsCopyDateViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketDetailsCopyDateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsCopyDateViewModel = Nothing
            Dim DataColumn As System.Data.DataColumn = Nothing

            MediaBroadcastWorksheetMarketDetailsCopyDateViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsCopyDateViewModel

            MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID
            MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.SelectedWorksheetMarketRevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber
            MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.CopyFromDateColumnName = CopyFromDateColumnName

            MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
            MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).ToList

                If MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.WorksheetMarketVendorDateCopyList.Any(Function(Entity) Entity.VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString)) = False Then

                    MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.WorksheetMarketVendorDateCopyList.Add(New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorDateCopy With {.VendorCode = DataRow(MarketDetailsColumns.VendorCode.ToString),
                                                                                                                                                                                                             .VendorName = DataRow(MarketDetailsColumns.VendorName.ToString),
                                                                                                                                                                                                             .Selected = True})

                End If

            Next

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                DataColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))

                If DataColumn.ColumnName <> CopyFromDateColumnName AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(DataColumn.ColumnName) = False Then

                    MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.WorksheetMarketDetailDateCopyList.Add(New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDateCopy With {.DateColumnCaption = DataColumn.Caption,
                                                                                                                                                                                                             .DateColumnName = DataColumn.ColumnName,
                                                                                                                                                                                                             .Selected = False})

                End If

            Next

            MarketDetailsCopyDate_Load = MediaBroadcastWorksheetMarketDetailsCopyDateViewModel

        End Function
        Public Sub MarketDetailsCopyDate_VendorSelectDeselectAll(ByRef MediaBroadcastWorksheetMarketDetailsCopyDateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsCopyDateViewModel,
                                                                 SelectAll As Boolean)

            For Each WorksheetMarketVendorDateCopy In MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.WorksheetMarketVendorDateCopyList

                WorksheetMarketVendorDateCopy.Selected = SelectAll

            Next

        End Sub
        Public Sub MarketDetailsCopyDate_DateSelectDeselectAll(ByRef MediaBroadcastWorksheetMarketDetailsCopyDateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsCopyDateViewModel,
                                                               SelectAll As Boolean)

            For Each WorksheetMarketDetailDateCopy In MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.WorksheetMarketDetailDateCopyList

                WorksheetMarketDetailDateCopy.Selected = SelectAll

            Next

        End Sub
        Public Sub MarketDetailsCopyDate_CopyTo(ByRef MediaBroadcastWorksheetMarketDetailsCopyDateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsCopyDateViewModel,
                                                ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim Spots As Integer = 0
            Dim Rate As Decimal = 0
            Dim SpotsChanged As Boolean = False
            Dim RateChanged As Boolean = False

            If MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.CopySpots OrElse MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.CopyRates Then

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

                For Each WorksheetMarketVendorDateCopy In MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.WorksheetMarketVendorDateCopyList.Where(Function(Entity) Entity.Selected = True).ToList

                    For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = WorksheetMarketVendorDateCopy.VendorCode).ToList

                        Spots = DataRow(MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.CopyFromDateColumnName)
                        Rate = DataRow(MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.CopyFromDateColumnName.Replace("Date", "Rate"))

                        For Each WorksheetMarketDetailDateCopy In MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.WorksheetMarketDetailDateCopyList.Where(Function(Entity) Entity.Selected = True).ToList

                            SpotsChanged = False
                            RateChanged = False

                            If DataRow(WorksheetMarketDetailDateCopy.DateColumnName.Replace("Date", "Entered")) = True Then

                                If MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.CopySpots Then

                                    If DataRow(WorksheetMarketDetailDateCopy.DateColumnName) <> Spots Then

                                        SpotsChanged = True

                                    End If

                                    DataRow(WorksheetMarketDetailDateCopy.DateColumnName) = Spots

                                End If

                                If MediaBroadcastWorksheetMarketDetailsCopyDateViewModel.CopyRates Then

                                    If DataRow(WorksheetMarketDetailDateCopy.DateColumnName.Replace("Date", "Rate")) <> Rate Then

                                        RateChanged = True

                                    End If

                                    DataRow(WorksheetMarketDetailDateCopy.DateColumnName.Replace("Date", "Rate")) = Rate

                                End If

                            End If

                            If SpotsChanged OrElse RateChanged Then

                                MarketDetails_MarketDetailDateValueChanged(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow), WorksheetMarketDetailDateCopy.DateColumnName)

                            End If

                        Next

                        MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow))

                        'MarketDetails_MarketDetailChanged(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow))

                    Next

                Next

                MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

                MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)

            End If

        End Sub

#End Region

#Region "  Market Details Allocate "

        Public Function MarketDetailsAllocate_Load(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsAllocateViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketDetailsAllocateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsAllocateViewModel = Nothing
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing

            MediaBroadcastWorksheetMarketDetailsAllocateViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsAllocateViewModel

            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.WorksheetDates = GetWorksheetDates(MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Worksheet, MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Worksheet.UseOldCalendarDateCreation)

            For Each WorksheetDate In MediaBroadcastWorksheetMarketDetailsAllocateViewModel.WorksheetDates.OrderBy(Function(WD) WD)

                If MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(WorksheetDate)) = False Then

                    MediaBroadcastWorksheetMarketDetailsAllocateViewModel.StartDate = WorksheetDate
                    Exit For

                End If

            Next

            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Spots = 1
            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.EveryOtherDate = False
            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Every3rdDate = False
            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Every4thDate = False

            MarketDetailsAllocate_Load = MediaBroadcastWorksheetMarketDetailsAllocateViewModel

        End Function
        Public Sub MarketDetailsAllocate_LoadBookend(ByRef MediaBroadcastWorksheetMarketDetailsAllocateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsAllocateViewModel,
                                                     ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                     RowIndex As Integer)

            MediaBroadcastWorksheetMarketDetailsAllocateViewModel.IsBookend = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(MarketDetailsColumns.Bookend.ToString)

            If MediaBroadcastWorksheetMarketDetailsAllocateViewModel.IsBookend Then

                MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Spots = 2

            End If

        End Sub
        Public Sub MarketDetailsAllocate_SpotsChanging(ByRef MediaBroadcastWorksheetMarketDetailsAllocateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsAllocateViewModel,
                                                       Spots As Integer, ByRef WarnUser As Boolean)

            If MediaBroadcastWorksheetMarketDetailsAllocateViewModel.IsBookend Then

                If Spots Mod 2 <> 0 Then

                    WarnUser = True

                End If

            Else

                WarnUser = False

            End If

        End Sub
        Public Sub MarketDetailsAllocate_Allocate(ByRef MediaBroadcastWorksheetMarketDetailsAllocateViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsAllocateViewModel,
                                                  ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                  RowIndex As Integer)

            'objects
            Dim AllocatedDates As Generic.List(Of Date) = Nothing
            Dim ColumnName As String = String.Empty
            Dim EnteredColumnName As String = String.Empty
            Dim DateCounter As Integer = 0
            Dim DataRow As System.Data.DataRow = Nothing
            Dim StartDate As Date = Date.MinValue
            Dim DateNumber As Integer = 0
            Dim StartDateNumber As Integer = 0
            Dim EndDateNumber As Integer = 0

            StartDateNumber = AdvantageFramework.StringUtilities.RemoveAllNonNumeric(MediaBroadcastWorksheetMarketDetailsViewModel.StartDateSelection, "0")
            EndDateNumber = AdvantageFramework.StringUtilities.RemoveAllNonNumeric(MediaBroadcastWorksheetMarketDetailsViewModel.EndDateSelection, "0")

            AllocatedDates = New Generic.List(Of Date)

            'AllocatedDates.Add(MediaBroadcastWorksheetMarketDetailsAllocateViewModel.StartDate)

            StartDate = MediaBroadcastWorksheetMarketDetailsAllocateViewModel.StartDate

            If MediaBroadcastWorksheetMarketDetailsAllocateViewModel.EveryDate = True Then

                For Each WorksheetDate In MediaBroadcastWorksheetMarketDetailsAllocateViewModel.WorksheetDates.Where(Function(Entity) Entity.Date >= StartDate).OrderBy(Function(WD) WD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(WorksheetDate)
                    EnteredColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(WorksheetDate)

                    DateNumber = AdvantageFramework.StringUtilities.RemoveAllNonNumeric(ColumnName, "0")

                    If (DateNumber >= StartDateNumber AndAlso DateNumber <= EndDateNumber) AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(ColumnName) = False AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(EnteredColumnName) = True Then

                        AllocatedDates.Add(WorksheetDate)

                    End If

                Next

            ElseIf MediaBroadcastWorksheetMarketDetailsAllocateViewModel.EveryOtherDate = True Then

                DateCounter = 1

                For Each WorksheetDate In MediaBroadcastWorksheetMarketDetailsAllocateViewModel.WorksheetDates.Where(Function(Entity) Entity.Date >= StartDate).OrderBy(Function(WD) WD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(WorksheetDate)
                    EnteredColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(WorksheetDate)

                    DateNumber = AdvantageFramework.StringUtilities.RemoveAllNonNumeric(ColumnName, "0")

                    If (DateNumber >= StartDateNumber AndAlso DateNumber <= EndDateNumber) AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(ColumnName) = False AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(EnteredColumnName) = True Then

                        If DateCounter = 1 Then

                            AllocatedDates.Add(WorksheetDate)
                            DateCounter = 0

                        Else

                            DateCounter += 1

                        End If

                    End If

                Next

            ElseIf MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Every3rdDate = True Then

                DateCounter = 2

                For Each WorksheetDate In MediaBroadcastWorksheetMarketDetailsAllocateViewModel.WorksheetDates.Where(Function(Entity) Entity.Date >= StartDate).OrderBy(Function(WD) WD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(WorksheetDate)
                    EnteredColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(WorksheetDate)

                    DateNumber = AdvantageFramework.StringUtilities.RemoveAllNonNumeric(ColumnName, "0")

                    If (DateNumber >= StartDateNumber AndAlso DateNumber <= EndDateNumber) AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(ColumnName) = False AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(EnteredColumnName) = True Then

                        If DateCounter = 2 Then

                            AllocatedDates.Add(WorksheetDate)
                            DateCounter = 0

                        Else

                            DateCounter += 1

                        End If

                    End If

                Next

            ElseIf MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Every4thDate = True Then

                DateCounter = 3

                For Each WorksheetDate In MediaBroadcastWorksheetMarketDetailsAllocateViewModel.WorksheetDates.Where(Function(Entity) Entity.Date >= StartDate).OrderBy(Function(WD) WD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(WorksheetDate)
                    EnteredColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates(WorksheetDate)

                    DateNumber = AdvantageFramework.StringUtilities.RemoveAllNonNumeric(ColumnName, "0")

                    If (DateNumber >= StartDateNumber AndAlso DateNumber <= EndDateNumber) AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Rows(0)(ColumnName) = False AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)(EnteredColumnName) = True Then

                        If DateCounter = 3 Then

                            AllocatedDates.Add(WorksheetDate)
                            DateCounter = 0

                        Else

                            DateCounter += 1

                        End If

                    End If

                Next

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()
            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.BeginLoadData()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            If AllocatedDates IsNot Nothing AndAlso AllocatedDates.Count > 0 Then

                For Each AllocatedDate In AllocatedDates.OrderBy(Function(AD) AD)

                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(AllocatedDate)

                    If DataRow(ColumnName) <> MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Spots Then

                        MarketDetails_MarketDetailDateValueChanged(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex, ColumnName, False)

                    End If

                    DataRow(ColumnName) = MediaBroadcastWorksheetMarketDetailsAllocateViewModel.Spots

                    'MarketDetails_RefreshRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, ColumnName)

                Next

            End If

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)
            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()
            MediaBroadcastWorksheetMarketDetailsViewModel.RowTotalsDataTable.EndLoadData()

            'MarketDetails_MarketDetailChanged(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

        End Sub

#End Region

#Region "  Market Details Makegood "

        Private Sub CreateMakegoodDataTable(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)

            If MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable Is Nothing Then

                MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable = New System.Data.DataTable

                MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.Add(MarketDetailsColumns.ID.ToString, GetType(String))
                MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.Add(MarketDetailsColumns.VendorCode.ToString, GetType(String))
                MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.Add(MarketDetailsColumns.LineNumber.ToString, GetType(Integer))
                MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.Add(MarketDetailsColumns.MakegoodNumber.ToString, GetType(Integer))
                MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.Add(MarketDetailsColumns.MadegoodNumber.ToString, GetType(Integer))

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates

                    MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.Add(DetailDate.Value, GetType(Integer))

                Next

            End If

        End Sub
        Public Function MarketDetailsMakegood_Load(MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                   RowIndex As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsMakegoodViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketDetailsMakegoodViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsMakegoodViewModel = Nothing
            Dim OriginalDataRow As System.Data.DataRow = Nothing
            Dim EditDataRow As System.Data.DataRow = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing

            CreateMakegoodDataTable(MediaBroadcastWorksheetMarketDetailsViewModel)

            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsMakegoodViewModel

            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.ID
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

            OriginalDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.OriginalDataRow = OriginalDataRow
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Clone
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.ImportRow(OriginalDataRow)
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DetailDates = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.RateDates = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.HiatusDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable

            Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                MediaBroadcastWorksheetMarketDetailDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketDetailID(DbContext, OriginalDataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString)).ToList

                For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                    MediaBroadcastWorksheetMarketDetailDate = MediaBroadcastWorksheetMarketDetailDates.Where(Function(DD) DD.Date = DetailDate).SingleOrDefault

                    If MediaBroadcastWorksheetMarketDetailDate IsNot Nothing Then 'AndAlso MediaBroadcastWorksheetMarketDetailDate.OrderNumber.HasValue Then

                        MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = MediaBroadcastWorksheetMarketDetailDate.Spots

                        'Else

                        '    MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = 0

                    End If

                Next

            End Using

            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Columns.Add("RowType", GetType(String))
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Rows(0).SetField("RowType", "Ordered spots")

            'add non-airing spots row
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.PrimaryKey = Nothing
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Columns("ID").Unique = False
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.ImportRow(OriginalDataRow)

            EditDataRow = MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Rows(1)
            EditDataRow("RowType") = AdvantageFramework.Media.NonAiringSpots '"Non-airing spots"

            For i As Integer = 0 To MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Columns.Count - 1

                If MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Columns(i).ColumnName.StartsWith("Date") Then

                    EditDataRow(MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Columns(i).ColumnName) = 0

                End If

            Next

            'add makegood spots row
            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.ImportRow(OriginalDataRow)

            EditDataRow = MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Rows(2)
            EditDataRow("RowType") = AdvantageFramework.Media.NewRow

            For i As Integer = 0 To MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Columns.Count - 1

                If MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Columns(i).ColumnName.StartsWith("Date") Then

                    EditDataRow(MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Columns(i).ColumnName) = 0

                End If

            Next

            MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.RowIndex = RowIndex

            MarketDetailsMakegood_Load = MediaBroadcastWorksheetMarketDetailsMakegoodViewModel

        End Function
        'Public Sub MarketDetailsMakegood_DateChanging(ByRef MediaBroadcastWorksheetMarketDetailsMakegoodViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsMakegoodViewModel,
        '                                              ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
        '                                              [Date] As Date)

        '    MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DateColumn = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates([Date])

        '    MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.MaximunTotalSpots = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.RowIndex)(MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DateColumn)

        'End Sub
        'Public Sub MarketDetailsMakegood_SpotsChanging(ByRef MediaBroadcastWorksheetMarketDetailsMakegoodViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsMakegoodViewModel,
        '                                               Spots As Integer, ByRef WarnUser As Boolean)

        '    If MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.IsRowBookend Then

        '        If (MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.MaximunTotalSpots - Spots) Mod 2 <> 0 Then

        '            WarnUser = True

        '        End If

        '    Else

        '        WarnUser = False

        '    End If

        'End Sub
        Public Function MarketDetailsMakegood_Makegood(ByRef MediaBroadcastWorksheetMarketDetailsMakegoodViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsMakegoodViewModel,
                                                       ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                       Optional ByVal AcceptingFromVendor As Boolean = False, Optional ByBuyer As Boolean = False) As System.Data.DataRow

            'objects
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NewDataRow As System.Data.DataRow = Nothing
            Dim MaxMakegoodNumber As Integer = 0
            Dim MaxMakegoodDataRow As System.Data.DataRow = Nothing
            Dim NonAiringSpotsDataRow As System.Data.DataRow = Nothing
            Dim MakegoodDataRow As System.Data.DataRow = Nothing
            Dim NewRow As System.Data.DataRow = Nothing
            Dim TotalNonAiringSpots As Integer = 0
            Dim NewWorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing
            Dim DaysAndTime As AdvantageFramework.DTO.DaysAndTime = Nothing

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            NewDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.NewRow()

            DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.RowIndex)

            NonAiringSpotsDataRow = MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Select("RowType = '" & AdvantageFramework.Media.NonAiringSpots & "'").FirstOrDefault
            NewRow = MediaBroadcastWorksheetMarketDetailsMakegoodViewModel.DataTable.Select("RowType = '" & AdvantageFramework.Media.NewRow & "'").FirstOrDefault

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                TotalNonAiringSpots += NonAiringSpotsDataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))

            Next

            For Each DataColumn In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                If DataColumn.ColumnName <> MarketDetailsColumns.ID.ToString AndAlso
                        DataColumn.ColumnName <> MarketDetailsColumns.WorksheetMarketDetailID.ToString AndAlso
                        DataColumn.ColumnName <> MarketDetailsColumns.DaysAndTime.ToString AndAlso
                        DataColumn.ColumnName <> MarketDetailsColumns.Comments.ToString AndAlso
                        DataColumn.ColumnName <> MarketDetailsColumns.OrderStatus.ToString AndAlso
                        DataColumn.ColumnName <> MarketDetailsColumns.MakegoodDate.ToString AndAlso
                        DataColumn.ColumnName <> MarketDetailsColumns.MakegoodSpots.ToString AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.ContainsValue(DataColumn.ColumnName) = False AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.ContainsValue(DataColumn.ColumnName) = False AndAlso
                        MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates.ContainsValue(DataColumn.ColumnName) = False Then

                    NewDataRow(DataColumn) = NewRow(DataColumn.ColumnName)

                    'ElseIf DataColumn.ColumnName <> MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString OrElse
                    '        DataColumn.ColumnName <> MarketDetailsColumns.CableNetworkStationCode.ToString Then

                    '    NewDataRow(DataColumn) = NewRow(DataColumn.ColumnName)

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.ContainsValue(DataColumn.ColumnName) Then

                    DataRow(DataColumn) -= NonAiringSpotsDataRow(DataColumn.ColumnName)

                    If ByBuyer Then

                        NewDataRow(DataColumn) = NonAiringSpotsDataRow(DataColumn.ColumnName)

                    Else

                        NewDataRow(DataColumn) = NewRow(DataColumn.ColumnName)

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Contains(DataColumn.ColumnName.Replace("Date", "OrderStatus")) Then

                        If DataRow(DataColumn.ColumnName.Replace("Date", "OrderStatus")) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Ordered) OrElse
                                DataRow(DataColumn.ColumnName.Replace("Date", "OrderStatus")) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Partial) Then

                            DataRow(DataColumn.ColumnName.Replace("Date", "OrderStatus")) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.OrderedModified)

                        End If

                    End If

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.ContainsValue(DataColumn.ColumnName) Then

                    NewDataRow(DataColumn) = CInt(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)

                ElseIf MediaBroadcastWorksheetMarketDetailsViewModel.AllowSpotsToBeEnteredDates.ContainsValue(DataColumn.ColumnName) Then

                    NewDataRow(DataColumn) = True

                ElseIf DataColumn.ColumnName = MarketDetailsColumns.Comments.ToString Then

                    If AcceptingFromVendor = False Then

                        If DataRow(MarketDetailsColumns.MakegoodNumber.ToString) > 0 Then

                            NewDataRow(DataColumn) = "Makegood is for line " & Format(DataRow(MarketDetailsColumns.LineNumber.ToString), "0000") & "-" & Format(DataRow(MarketDetailsColumns.MakegoodNumber.ToString), "00")

                        Else

                            NewDataRow(DataColumn) = "Makegood is for line " & Format(DataRow(MarketDetailsColumns.LineNumber.ToString), "0000")

                        End If

                    Else

                        NewDataRow(DataColumn) = NewRow(DataColumn.ColumnName)

                    End If

                ElseIf DataColumn.ColumnName = MarketDetailsColumns.DaysAndTime.ToString Then

                    If AcceptingFromVendor = False Then

                        NewDataRow(DataColumn) = CType(DataRow(DataColumn), AdvantageFramework.DTO.DaysAndTime).Clone

                    Else

                        DaysAndTime = New AdvantageFramework.DTO.DaysAndTime()

                        DaysAndTime = CType(NewRow(DataColumn.ColumnName), AdvantageFramework.DTO.DaysAndTime).Clone

                        NewDataRow(DataColumn) = DaysAndTime

                    End If

                End If

            Next

            DataRow(MarketDetailsColumns.TotalSpots.ToString) = 0
            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                DataRow(MarketDetailsColumns.TotalSpots.ToString) += DataRow(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))

            Next

            MaxMakegoodNumber = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString) AndAlso
                                                                                                                                               DR(MarketDetailsColumns.LineNumber.ToString) = NewDataRow(MarketDetailsColumns.LineNumber.ToString)).
                                                                                                                            Max(Function(DR) CInt(DR(MarketDetailsColumns.MakegoodNumber.ToString)))

            NewDataRow(MarketDetailsColumns.MakegoodNumber.ToString) = MaxMakegoodNumber + 1

            NewDataRow(MarketDetailsColumns.MadegoodNumber.ToString) = DataRow(MarketDetailsColumns.MakegoodNumber.ToString)

            NewDataRow(MarketDetailsColumns.RevisionNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber

            MaxMakegoodDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).SingleOrDefault(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString) AndAlso
                                                                                                                                                          DR(MarketDetailsColumns.LineNumber.ToString) = NewDataRow(MarketDetailsColumns.LineNumber.ToString) AndAlso
                                                                                                                                                          DR(MarketDetailsColumns.MakegoodNumber.ToString) = MaxMakegoodNumber)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.InsertAt(NewDataRow, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(MaxMakegoodDataRow) + 1)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Any(Function(Entity) Entity.RowID = DataRow(MarketDetailsColumns.ID.ToString)) Then

                    For Each WorksheetMarketSubmarket In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.ToList

                        For Each WorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.RowID = DataRow(MarketDetailsColumns.ID.ToString) AndAlso
                                                                                                                                                                                Entity.MediaBroadcastWorksheetMarketSubmarketID = WorksheetMarketSubmarket.ID).ToList

                            NewWorksheetMarketDetailSubmarketDemo = WorksheetMarketDetailSubmarketDemo.CopyWithNewRowID(NewDataRow(MarketDetailsColumns.ID.ToString))

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Add(NewWorksheetMarketDetailSubmarketDemo)

                            MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.Add(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketCacheTemplate, WorksheetMarketSubmarket.Order, NewWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID, NewWorksheetMarketDetailSubmarketDemo.MediaDemographicID, NewWorksheetMarketDetailSubmarketDemo.RowID), NewWorksheetMarketDetailSubmarketDemo)

                        Next

                    Next

                End If

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.BeginLoadData()

            MakegoodDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Select("VendorCode = '" & NonAiringSpotsDataRow(MarketDetailsColumns.VendorCode.ToString) & "' AND LineNumber = " & NonAiringSpotsDataRow(MarketDetailsColumns.LineNumber.ToString) & " AND MakegoodNumber = " & MaxMakegoodNumber + 1).FirstOrDefault

            If MakegoodDataRow Is Nothing Then

                MakegoodDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.NewRow()

                For Each DataColumn In MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                    MakegoodDataRow(DataColumn.ColumnName) = NonAiringSpotsDataRow(DataColumn.ColumnName)

                Next

                MakegoodDataRow(MarketDetailsColumns.MakegoodNumber.ToString) = MaxMakegoodNumber + 1

                MakegoodDataRow(MarketDetailsColumns.MadegoodNumber.ToString) = NewDataRow(MarketDetailsColumns.MadegoodNumber.ToString)

                MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Rows.Add(MakegoodDataRow)

            Else

                For Each DataColumn In MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.ContainsValue(DataColumn.ColumnName) Then

                        MakegoodDataRow(DataColumn.ColumnName) = NonAiringSpotsDataRow(DataColumn.ColumnName)

                    End If

                Next

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.EndLoadData()

            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(NewDataRow))
            MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow))
            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)

            MarketDetailsMakegood_Makegood = NewDataRow

        End Function
        Public Function MarketDetailsMakegoodDetails_Load(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                          VendorCode As String, LineNumber As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel = Nothing
            Dim WorksheetMarketDetailID As Integer = 0
            Dim TotalNonAiringSpotsDataRow As System.Data.DataRow = Nothing
            Dim OriginalRow As System.Data.DataRow = Nothing
            Dim TotalSpots As Integer = 0
            Dim VarianceRow As System.Data.DataRow = Nothing
            Dim FieldName As String = Nothing
            Dim MakegoodSpots As Integer = 0
            Dim MediaBroadcastWorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing
            Dim MediaBroadcastWorksheetMarketDetailIDs As IEnumerable(Of Integer) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDateMakegoods As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate) = Nothing
            Dim MediaBroadcastWorksheetMarketID As Integer = 0
            Dim MakegoodNumber As Integer = 0
            Dim MadegoodNumber As Integer = 0
            Dim MakegoodDataRow As System.Data.DataRow = Nothing
            Dim ColumnName As String = Nothing
            Dim RevisionNumber As Integer = 0

            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel

            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.ID
            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Clone

            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DetailDates = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates
            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.RateDates = MediaBroadcastWorksheetMarketDetailsViewModel.RateDates
            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.HiatusDataTable = MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable

            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.PrimaryKey = Nothing
            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Columns("ID").Unique = False

            RevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber

            OriginalRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Select("VendorCode = '" & VendorCode & "' AND LineNumber = " & LineNumber & " AND MakegoodNumber = 0").FirstOrDefault

            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Columns.Add("RowType", GetType(String))

            Using DbContext As New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Select("VendorCode = '" & VendorCode & "' AND LineNumber = " & LineNumber)

                    MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.ImportRow(DataRow)

                    MakegoodNumber = CInt(DataRow("MakegoodNumber"))
                    MadegoodNumber = CInt(DataRow("MadegoodNumber"))

                    If MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows.Count = 1 Then

                        MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(0).SetField("RowType", "Original spots")

                        MediaBroadcastWorksheetMarketDetailDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketDetailID(DbContext, DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString)).ToList

                        MediaBroadcastWorksheetMarketDetailIDs = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID)
                                                                  Where Entity.VendorCode = VendorCode AndAlso
                                                                        Entity.LineNumber = LineNumber AndAlso
                                                                        Entity.MakegoodNumber > 0 AndAlso
                                                                        Entity.MadegoodNumber = MadegoodNumber
                                                                  Select Entity.ID).ToArray

                        MediaBroadcastWorksheetMarketDetailDateMakegoods = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.Load(DbContext)
                                                                            Where MediaBroadcastWorksheetMarketDetailIDs.Contains(Entity.MediaBroadcastWorksheetMarketDetailID)
                                                                            Select Entity).ToList

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = 0

                            MediaBroadcastWorksheetMarketDetailDate = MediaBroadcastWorksheetMarketDetailDates.Where(Function(DD) DD.Date = DetailDate).SingleOrDefault

                            If MediaBroadcastWorksheetMarketDetailDate IsNot Nothing Then

                                If MediaBroadcastWorksheetMarketDetailDateMakegoods.Where(Function(DD) DD.Date = DetailDate AndAlso
                                                                                                       DD.MediaBroadcastWorksheetMarketDetailID > MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetailID AndAlso
                                                                                                       DD.MakegoodSpots > 0).Any Then

                                    MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = MediaBroadcastWorksheetMarketDetailDate.Spots +
                                        MediaBroadcastWorksheetMarketDetailDateMakegoods.Where(Function(DD) DD.Date = DetailDate AndAlso
                                                                                                            DD.MediaBroadcastWorksheetMarketDetailID > MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetailID AndAlso
                                                                                                            DD.MakegoodSpots > 0).First.MakegoodSpots

                                Else

                                    MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) = MediaBroadcastWorksheetMarketDetailDate.Spots

                                End If

                            End If

                            If MediaBroadcastWorksheetMarketDetailIDs.Count = 0 AndAlso MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable IsNot Nothing Then

                                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                                MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) +=
                                     OriginalRow(ColumnName) +
                                     MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR("VendorCode") = VendorCode AndAlso
                                                                                                                                                            DR("LineNumber") = LineNumber AndAlso
                                                                                                                                                            DR("MakegoodNumber") > MakegoodNumber AndAlso
                                                                                                                                                            DR("MadegoodNumber") = MakegoodNumber).Select(Function(DR) CInt(DR(ColumnName))).Sum()

                            End If

                            TotalSpots += MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(0)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))

                        Next

                        MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(0)(MarketDetailsColumns.TotalSpots.ToString) = TotalSpots

                    Else

                        MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows.Count - 1).SetField("RowType", "Makegood")

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Select("VendorCode = '" & VendorCode & "' AND LineNumber = " & LineNumber & " AND MakegoodNumber > " & MakegoodNumber).Any Then

                        If MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows.Count > 1 Then

                            TotalSpots = 0

                            MediaBroadcastWorksheetMarketDetailDates = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID)
                                                                        Where Entity.MediaBroadcastWorksheetMarketDetail.VendorCode = VendorCode AndAlso
                                                                              Entity.MediaBroadcastWorksheetMarketDetail.LineNumber = LineNumber AndAlso
                                                                              Entity.MediaBroadcastWorksheetMarketDetail.RevisionNumber = RevisionNumber AndAlso
                                                                              (Entity.MediaBroadcastWorksheetMarketDetail.MakegoodNumber = MakegoodNumber OrElse
                                                                               Entity.MediaBroadcastWorksheetMarketDetail.MadegoodNumber = MakegoodNumber)
                                                                        Select Entity).ToList

                            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates.Keys.OfType(Of Date).OrderBy(Function(GD) GD)

                                MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows.Count - 1)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) =
                                    MediaBroadcastWorksheetMarketDetailDates.Where(Function(DD) DD.Date = DetailDate AndAlso DD.MediaBroadcastWorksheetMarketDetail.MakegoodNumber = MakegoodNumber).Sum(Function(DD) DD.Spots) +
                                    MediaBroadcastWorksheetMarketDetailDates.Where(Function(DD) DD.Date = DetailDate AndAlso DD.MediaBroadcastWorksheetMarketDetail.MadegoodNumber = MakegoodNumber).Sum(Function(DD) DD.MakegoodSpots)

                                If MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable IsNot Nothing Then

                                    ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                                    MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows.Count - 1)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)) +=
                                            MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR("VendorCode") = VendorCode AndAlso
                                                                                                                                                                   DR("LineNumber") = LineNumber AndAlso
                                                                                                                                                                   DR("MakegoodNumber") = MakegoodNumber AndAlso
                                                                                                                                                                   DR("MadegoodNumber") = MadegoodNumber).Select(Function(DR) CInt(DR(ColumnName))).Sum()

                                End If

                                TotalSpots += MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows.Count - 1)(MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate))

                            Next

                            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows(MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows.Count - 1)(MarketDetailsColumns.TotalSpots.ToString) = TotalSpots

                        End If

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Select("VendorCode = '" & VendorCode & "' AND LineNumber = " & LineNumber & " AND MadegoodNumber = " & MakegoodNumber).Any Then

                        TotalSpots = 0

                        'add Total non-airing row
                        TotalNonAiringSpotsDataRow = MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.NewRow

                        TotalNonAiringSpotsDataRow(MarketDetailsColumns.LineNumber.ToString) = LineNumber
                        TotalNonAiringSpotsDataRow(MarketDetailsColumns.MakegoodNumber.ToString) = MakegoodNumber
                        TotalNonAiringSpotsDataRow(MarketDetailsColumns.DaysAndTime.ToString) = OriginalRow(MarketDetailsColumns.DaysAndTime.ToString).Clone
                        TotalNonAiringSpotsDataRow(MarketDetailsColumns.CableNetworkStationCode.ToString) = String.Empty
                        TotalNonAiringSpotsDataRow.SetField("RowType", "Non-Airing")

                        MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

                        MediaBroadcastWorksheetMarketDetailIDs = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.Load(DbContext)
                                                                  Where Entity.RevisionNumber = RevisionNumber AndAlso
                                                                        Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso
                                                                        Entity.VendorCode = VendorCode AndAlso
                                                                        Entity.LineNumber = LineNumber AndAlso
                                                                        Entity.MakegoodNumber > MakegoodNumber AndAlso
                                                                        Entity.MadegoodNumber = MakegoodNumber
                                                                  Select Entity.ID).ToList

                        For Each DetailDate In MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DetailDates.Keys

                            MakegoodSpots = 0

                            WorksheetMarketDetailID = DataRow(MarketDetailsColumns.WorksheetMarketDetailID.ToString)

                            MediaBroadcastWorksheetMarketDetailDates = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.Load(DbContext)
                                                                        Where MediaBroadcastWorksheetMarketDetailIDs.Contains(Entity.MediaBroadcastWorksheetMarketDetailID) AndAlso
                                                                              Entity.Date = CDate(DetailDate)
                                                                        Select Entity).ToList

                            If MediaBroadcastWorksheetMarketDetailDates IsNot Nothing Then

                                MakegoodSpots = MediaBroadcastWorksheetMarketDetailDates.Sum(Function(DD) DD.MakegoodSpots)

                            End If

                            If MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable IsNot Nothing Then

                                ColumnName = MediaBroadcastWorksheetMarketDetailsViewModel.DetailDates(DetailDate)

                                MakegoodSpots += MediaBroadcastWorksheetMarketDetailsViewModel.MakegoodDataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR("VendorCode") = VendorCode AndAlso
                                                                                                                                                                        DR("LineNumber") = LineNumber AndAlso
                                                                                                                                                                        DR("MakegoodNumber") > MakegoodNumber AndAlso
                                                                                                                                                                        DR("MadegoodNumber") = MakegoodNumber).Select(Function(DR) CInt(DR(ColumnName))).Sum()

                            End If

                            TotalNonAiringSpotsDataRow(MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DetailDates(DetailDate)) = MakegoodSpots * -1

                            TotalSpots += MakegoodSpots * -1

                            TotalNonAiringSpotsDataRow(MarketDetailsColumns.TotalSpots.ToString) = TotalSpots

                        Next

                        If TotalSpots <> 0 Then

                            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows.Add(TotalNonAiringSpotsDataRow)

                        End If

                        TotalNonAiringSpotsDataRow = Nothing

                    End If

                Next

            End Using

            TotalSpots = 0

            'add Variance row
            VarianceRow = MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.NewRow

            VarianceRow(MarketDetailsColumns.LineNumber.ToString) = LineNumber
            VarianceRow(MarketDetailsColumns.DaysAndTime.ToString) = OriginalRow(MarketDetailsColumns.DaysAndTime.ToString).Clone
            VarianceRow(MarketDetailsColumns.CableNetworkStationCode.ToString) = String.Empty
            VarianceRow.SetField("RowType", "Variance")

            For Each DetailDate In MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DetailDates.Keys

                FieldName = MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DetailDates(DetailDate)

                VarianceRow(MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DetailDates(DetailDate)) = MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.AsEnumerable().Where(Function(row) row.Field(Of String)("RowType") = "Makegood" AndAlso
                                                                                                                                                                                                                              row.Field(Of Integer)("MakegoodNumber") > 0).Sum(Function(row) row.Field(Of Integer)(FieldName)) +
                    MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.AsEnumerable().Where(Function(row) row.Field(Of String)("RowType") = "Non-Airing").Sum(Function(row) row.Field(Of Integer)(FieldName))

                TotalSpots += VarianceRow(MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DetailDates(DetailDate))

            Next

            VarianceRow(MarketDetailsColumns.TotalSpots.ToString) = TotalSpots

            MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel.DataTable.Rows.Add(VarianceRow)

            MarketDetailsMakegoodDetails_Load = MediaBroadcastWorksheetMarketDetailsMakegoodDetailsViewModel

        End Function

#End Region

#Region "  Market Create Orders "

        Public Function MarketCreateOrders_Load(MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketCreateOrdersViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel = Nothing
            Dim BroadcastCalendarWeek As AdvantageFramework.Classes.Media.BroadcastCalendarWeek = Nothing
            Dim MonthStartDate As Date = Date.MinValue
            Dim MonthEndDate As Date = Date.MinValue
            Dim MinEndDateAllowed As Nullable(Of Date) = Nothing
            'Dim MediaBroadcastWorksheetMarketDetails As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetail) = Nothing

            MediaBroadcastWorksheetMarketCreateOrdersViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel

            MediaBroadcastWorksheetMarketCreateOrdersViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketCreateOrdersViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID

            MediaBroadcastWorksheetMarketCreateOrdersViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
            MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

            MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetDates = GetWorksheetDates(MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet, MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.UseOldCalendarDateCreation)

            MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetStartDates = New Generic.List(Of Date)
            MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetEndDates = New Generic.List(Of Date)

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketCreateOrdersViewModel.BroadcastCalendarWeeks = DbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.BroadcastCalendarWeek)("EXEC dbo.advsp_broadcast_calendar_load").ToList

                MinEndDateAllowed = DbContext.Database.SqlQuery(Of Nullable(Of Date))(String.Format("select MAX(b.DATE) from MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL a inner join MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_DATE b on a.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_ID = b.MEDIA_BROADCAST_WORKSHEET_MARKET_DETAIL_ID where a.MEDIA_BROADCAST_WORKSHEET_MARKET_ID = {0} and b.ORDER_NBR IS NOT NULL", MediaBroadcastWorksheetMarketCreateOrdersViewModel.MediaBroadcastWorksheetMarketID)).SingleOrDefault

                'MediaBroadcastWorksheetMarketDetails = DbContext.MediaBroadcastWorksheetMarketDetails.Include("MediaBroadcastWorksheetMarketDetailDates").Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketCreateOrdersViewModel.MediaBroadcastWorksheetMarketID).ToList

                If MinEndDateAllowed.HasValue Then '   If MediaBroadcastWorksheetMarketDetails.SelectMany(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) Entity.OrderNumber.HasValue).Any Then

                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.MinEndDateAllowed = MinEndDateAllowed ' MediaBroadcastWorksheetMarketDetails.SelectMany(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailDates).Where(Function(Entity) Entity.OrderNumber.HasValue).Max(Function(Entity) Entity.Date)

                Else

                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.MinEndDateAllowed = MediaBroadcastWorksheetMarketCreateOrdersViewModel.Worksheet.StartDate

                End If

                If MediaBroadcastWorksheetMarketCreateOrdersViewModel.Worksheet.MediaBroadcastWorksheetDateTypeID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.DateTypes.Weekly Then

                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.CreateOrdersByWeekEnabled = (MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.OrderStatus = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered)
                    'MediaBroadcastWorksheetMarketCreateOrdersViewModel.CreateOrdersByWeekEnabled = (MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets.Any(Function(Entity) Entity.OrderStatus <> AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.OrderStatuses.Unordered) = False)

                    If MediaBroadcastWorksheetMarketCreateOrdersViewModel.Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast Then

                        For Each WorksheetDate In MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetDates

                            If MediaBroadcastWorksheetMarketCreateOrdersViewModel.BroadcastCalendarWeeks.Where(Function(Entity) Entity.WeekDate <= WorksheetDate).OrderByDescending(Function(Entity) Entity.WeekDate).Any Then

                                BroadcastCalendarWeek = MediaBroadcastWorksheetMarketCreateOrdersViewModel.BroadcastCalendarWeeks.Where(Function(Entity) Entity.WeekDate <= WorksheetDate).OrderByDescending(Function(Entity) Entity.WeekDate).FirstOrDefault

                                MonthStartDate = (From Dates In MediaBroadcastWorksheetMarketCreateOrdersViewModel.BroadcastCalendarWeeks
                                                  Where Dates.Month = BroadcastCalendarWeek.Month AndAlso
                                                        Dates.Year = BroadcastCalendarWeek.Year
                                                  Select Dates.WeekDate).Min

                                MonthEndDate = (From Dates In MediaBroadcastWorksheetMarketCreateOrdersViewModel.BroadcastCalendarWeeks
                                                Where Dates.Month = BroadcastCalendarWeek.Month AndAlso
                                                      Dates.Year = BroadcastCalendarWeek.Year
                                                Select Dates.WeekDate).Max.AddDays(6)

                                If MonthStartDate < MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate Then

                                    MonthStartDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate

                                End If

                                If MonthEndDate > MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.EndDate Then

                                    MonthEndDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.EndDate

                                End If

                                If MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetStartDates.Contains(MonthStartDate) = False Then

                                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetStartDates.Add(MonthStartDate)

                                End If

                                If MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetEndDates.Contains(MonthEndDate) = False Then

                                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetEndDates.Add(MonthEndDate)

                                End If

                            End If

                        Next

                    Else

                        For Each WorksheetDate In MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetDates

                            MonthStartDate = New Date(WorksheetDate.Year, WorksheetDate.Month, 1)

                            MonthEndDate = New Date(WorksheetDate.Year, WorksheetDate.Month, Date.DaysInMonth(WorksheetDate.Year, WorksheetDate.Month))

                            If MonthStartDate < MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate Then

                                MonthStartDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate

                            End If

                            If MonthEndDate > MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.EndDate Then

                                MonthEndDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.EndDate

                            End If

                            If MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetStartDates.Contains(MonthStartDate) = False Then

                                MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetStartDates.Add(MonthStartDate)

                            End If

                            If MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetEndDates.Contains(MonthEndDate) = False Then

                                MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetEndDates.Add(MonthEndDate)

                            End If

                        Next

                    End If

                Else

                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.CreateOrdersByWeekEnabled = False

                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetStartDates = MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetDates.ToList
                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetEndDates = MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetDates.ToList

                End If

            End Using

            MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.StartDate
            MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.EndDate
            MediaBroadcastWorksheetMarketCreateOrdersViewModel.CreateOrdersByWeek = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.CreateOrdersByWeek

            MarketCreateOrders_Load = MediaBroadcastWorksheetMarketCreateOrdersViewModel

        End Function
        Public Function MarketCreateOrders_IsInMonth(ByRef MediaBroadcastWorksheetMarketCreateOrdersViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel,
                                                     EntryDate As Date, Month As Integer) As Boolean

            'objects
            Dim IsValid As Boolean = False
            Dim Year As Integer = 0
            Dim EntryDateMonth As Integer = 0

            If MediaBroadcastWorksheetMarketCreateOrdersViewModel.Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Broadcast Then

                EntryDateMonth = MarketCreateOrders_GetMonth(MediaBroadcastWorksheetMarketCreateOrdersViewModel, EntryDate)

                If EntryDateMonth = Month Then

                    IsValid = True

                End If

            Else

                If EntryDate.Month = Month Then

                    IsValid = True

                End If

            End If

            MarketCreateOrders_IsInMonth = IsValid

        End Function
        Public Function MarketCreateOrders_GetMonth(ByRef MediaBroadcastWorksheetMarketCreateOrdersViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel,
                                                    [Date] As Date) As Integer

            'objects
            Dim Month As Integer = 0
            Dim BroadcastCalendarWeek As AdvantageFramework.Classes.Media.BroadcastCalendarWeek = Nothing

            If MediaBroadcastWorksheetMarketCreateOrdersViewModel.Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Calendar Then

                Month = [Date].Month

            Else

                Try

                    BroadcastCalendarWeek = MediaBroadcastWorksheetMarketCreateOrdersViewModel.BroadcastCalendarWeeks.Where(Function(Entity) Entity.WeekDate <= [Date]).OrderByDescending(Function(Entity) Entity.WeekDate).FirstOrDefault

                Catch ex As Exception
                    BroadcastCalendarWeek = Nothing
                End Try

                If BroadcastCalendarWeek IsNot Nothing Then

                    Month = BroadcastCalendarWeek.Month

                End If

            End If

            MarketCreateOrders_GetMonth = Month

        End Function
        Public Function MarketCreateOrders_GetYear(ByRef MediaBroadcastWorksheetMarketCreateOrdersViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel,
                                                   [Date] As Date) As Integer

            'objects
            Dim Year As Integer = 0
            Dim BroadcastCalendarWeek As AdvantageFramework.Classes.Media.BroadcastCalendarWeek = Nothing

            If MediaBroadcastWorksheetMarketCreateOrdersViewModel.Worksheet.MediaCalendarTypeID = AdvantageFramework.DTO.Media.CalendarTypes.Calendar Then

                Year = [Date].Year

            Else

                Try

                    BroadcastCalendarWeek = MediaBroadcastWorksheetMarketCreateOrdersViewModel.BroadcastCalendarWeeks.Where(Function(Entity) Entity.WeekDate <= [Date]).OrderByDescending(Function(Entity) Entity.WeekDate).FirstOrDefault

                Catch ex As Exception
                    BroadcastCalendarWeek = Nothing
                End Try

                If BroadcastCalendarWeek IsNot Nothing Then

                    Year = BroadcastCalendarWeek.Year

                End If

            End If

            MarketCreateOrders_GetYear = Year

        End Function
        Public Function MarketCreateOrders_Validate(ByRef MediaBroadcastWorksheetMarketCreateOrdersViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel, ByRef ErrorMessage As String) As Boolean

            'objects
            Dim IsValid As Boolean = True

            If MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate > MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate Then

                ErrorMessage &= System.Environment.NewLine & "Please select a start date on or before the end date."

            End If

            MarketCreateOrders_Validate = String.IsNullOrWhiteSpace(ErrorMessage)

        End Function
        Public Sub MarketCreateOrders_SetDatesForMakegood(MediaBroadcastWorksheetMarketCreateOrdersViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketCreateOrdersViewModel, VendorCode As String)

            Dim OrderNumber As Integer = 0
            Dim LineNumbers As IEnumerable(Of Short) = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                OrderNumber = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.Load(DbContext).Include("MediaBroadcastWorksheetMarketDetail")
                               Where Entity.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketCreateOrdersViewModel.WorksheetMarket.ID AndAlso
                                     Entity.OrderNumber IsNot Nothing AndAlso
                                     Entity.MediaBroadcastWorksheetMarketDetail.VendorCode = VendorCode
                               Select Entity.OrderNumber.Value).First

                LineNumbers = DbContext.Database.SqlQuery(Of Short)(String.Format("SELECT DISTINCT b.LINE_NBR 
                                                                                   FROM dbo.MEDIA_MGR_GENERATED_REPORT a
	                                                                                    INNER JOIN dbo.MEDIA_MGR_GENERATED_REPORT_DETAIL b ON a.MEDIA_MGR_GENERATED_REPORT_ID = b.MEDIA_MGR_GENERATED_REPORT_ID 
                                                                                   WHERE a.ORDER_NBR = {0}", OrderNumber)).ToArray

                If MediaBroadcastWorksheetMarketCreateOrdersViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.Methods.MediaTypes.SpotTV Then

                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate = (From Entity In AdvantageFramework.Database.Procedures.TVOrderDetail.LoadActiveByOrderNumber(DbContext, OrderNumber)
                                                                                    Where Entity.StartDate IsNot Nothing AndAlso
                                                                                          LineNumbers.Contains(Entity.LineNumber)
                                                                                    Select Entity.StartDate).Min

                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate = (From Entity In AdvantageFramework.Database.Procedures.TVOrderDetail.LoadActiveByOrderNumber(DbContext, OrderNumber)
                                                                                  Where Entity.EndDate IsNot Nothing AndAlso
                                                                                        LineNumbers.Contains(Entity.LineNumber)
                                                                                  Select Entity.EndDate).Max

                ElseIf MediaBroadcastWorksheetMarketCreateOrdersViewModel.Worksheet.MediaType = DTO.Media.MediaBroadcastWorksheet.Methods.MediaTypes.SpotRadio Then

                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.StartDate = (From Entity In AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadActiveByOrderNumber(DbContext, OrderNumber)
                                                                                    Where Entity.StartDate IsNot Nothing AndAlso
                                                                                          LineNumbers.Contains(Entity.LineNumber)
                                                                                    Select Entity.StartDate).Min

                    MediaBroadcastWorksheetMarketCreateOrdersViewModel.EndDate = (From Entity In AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadActiveByOrderNumber(DbContext, OrderNumber)
                                                                                  Where Entity.EndDate IsNot Nothing AndAlso
                                                                                        LineNumbers.Contains(Entity.LineNumber)
                                                                                  Select Entity.EndDate).Max

                End If

            End Using

        End Sub

#End Region

#Region "  Market Order Data "

        Public Function MarketOrderData_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer, RevisionNumber As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketOrderDataViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketOrderDataViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketOrderDataViewModel = Nothing

            MediaBroadcastWorksheetMarketOrderDataViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketOrderDataViewModel

            MediaBroadcastWorksheetMarketOrderDataViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketOrderDataViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketOrderDataViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                           Include("Division").
                                                                                                                                                           Include("Product").
                                                                                                                                                           Include("SalesClass").
                                                                                                                                                           Include("Campaign").
                                                                                                                                                           Include("MediaPlan").
                                                                                                                                                           Include("PrimaryMediaDemographic").
                                                                                                                                                           Include("Country").
                                                                                                                                                           Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                           Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                MediaBroadcastWorksheetMarketOrderDataViewModel.WorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                                       Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketID).ToList.
                                                                                                                                                                       Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).FirstOrDefault


                MediaBroadcastWorksheetMarketOrderDataViewModel.WorksheetMarketDetails = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID).
                                                                                                                                                                    Include("Daypart").
                                                                                                                                                                    Include("Vendor").
                                                                                                                                                                    Include("MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet").ToList.
                                                                                                                                                                    Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail(Entity)).ToList

                MediaBroadcastWorksheetMarketOrderDataViewModel.WorksheetMarketDetails = MediaBroadcastWorksheetMarketOrderDataViewModel.WorksheetMarketDetails.OrderBy(Function(Entity) Entity.VendorName).ThenBy(Function(Entity) Entity.LineNumber).ToList


                MediaBroadcastWorksheetMarketOrderDataViewModel.SelectedWorksheetMarketRevisionNumbers = MediaBroadcastWorksheetMarketOrderDataViewModel.WorksheetMarketDetails.Select(Function(Entity) Entity.RevisionNumber).Distinct.ToList

                If MediaBroadcastWorksheetMarketOrderDataViewModel.SelectedWorksheetMarketRevisionNumbers.Count > 0 Then

                    If RevisionNumber = -1 Then

                        MarketOrderData_ChangeSelectedWorksheetMarketRevisionNumber(MediaBroadcastWorksheetMarketOrderDataViewModel, MediaBroadcastWorksheetMarketOrderDataViewModel.SelectedWorksheetMarketRevisionNumbers.Max)

                    Else

                        MarketOrderData_ChangeSelectedWorksheetMarketRevisionNumber(MediaBroadcastWorksheetMarketOrderDataViewModel, RevisionNumber)

                    End If

                End If

            End Using

            MarketOrderData_Load = MediaBroadcastWorksheetMarketOrderDataViewModel

        End Function
        Public Sub MarketOrderData_ChangeSelectedWorksheetMarketRevisionNumber(ByRef MediaBroadcastWorksheetMarketOrderDataViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketOrderDataViewModel, RevisionNumber As Integer)

            MediaBroadcastWorksheetMarketOrderDataViewModel.SelectedWorksheetMarketRevisionNumber = RevisionNumber

            MediaBroadcastWorksheetMarketOrderDataViewModel.RevisionWorksheetMarketDetails = MediaBroadcastWorksheetMarketOrderDataViewModel.WorksheetMarketDetails.Where(Function(Entity) Entity.RevisionNumber = RevisionNumber).ToList

        End Sub
        Public Sub MarketOrderData_SelectedWorksheetMarketDetailChanged(ByRef MediaBroadcastWorksheetMarketOrderDataViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketOrderDataViewModel,
                                                                        WorksheetMarketDetail As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetail)

            MediaBroadcastWorksheetMarketOrderDataViewModel.SelectedWorksheetMarketDetail = WorksheetMarketDetail

            If MediaBroadcastWorksheetMarketOrderDataViewModel.SelectedWorksheetMarketDetail IsNot Nothing Then

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    MediaBroadcastWorksheetMarketOrderDataViewModel.SelectedWorksheetMarketDetailDates = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketDetailID(DbContext, MediaBroadcastWorksheetMarketOrderDataViewModel.SelectedWorksheetMarketDetail.ID).ToList.
                                                                                                                                                                                        Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate(Entity)).ToList

                End Using

            Else

                MediaBroadcastWorksheetMarketOrderDataViewModel.SelectedWorksheetMarketDetailDates = New Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailDate)

            End If

        End Sub
        Public Sub MarketOrderData_SetVendorRepsOnOrder(VendorCode As String, MediaBroadcastWorksheetMarketID As Integer, MediaTypeCode As String)

            'objects
            Dim MediaBroadcastWorksheetMarketDetailIDs As IEnumerable(Of Integer) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDate As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate = Nothing
            Dim TVOrder As AdvantageFramework.Database.Entities.TVOrder = Nothing
            Dim RadioOrder As AdvantageFramework.Database.Entities.RadioOrder = Nothing
            Dim Vendor As AdvantageFramework.Database.Entities.Vendor = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                MediaBroadcastWorksheetMarketDetailIDs = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID)
                                                          Where Entity.VendorCode = VendorCode
                                                          Select Entity.ID).ToArray

                MediaBroadcastWorksheetMarketDetailDate = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.Load(DbContext)
                                                           Where MediaBroadcastWorksheetMarketDetailIDs.Contains(Entity.MediaBroadcastWorksheetMarketDetailID) AndAlso
                                                                 Entity.OrderNumber IsNot Nothing
                                                           Select Entity).FirstOrDefault

                If MediaBroadcastWorksheetMarketDetailDate IsNot Nothing Then

                    Using DataContext = New AdvantageFramework.Database.DataContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        Vendor = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, VendorCode)

                        If Vendor IsNot Nothing AndAlso MediaTypeCode = "T" Then

                            TVOrder = AdvantageFramework.Database.Procedures.TVOrder.LoadByOrderNumber(DbContext, MediaBroadcastWorksheetMarketDetailDate.OrderNumber.Value)

                            If TVOrder IsNot Nothing Then

                                If String.IsNullOrWhiteSpace(TVOrder.VendorRepCode1) AndAlso Not String.IsNullOrWhiteSpace(Vendor.DefaultVendorRepresentativeCode1) AndAlso
                                        (AdvantageFramework.Database.Procedures.VendorRepresentativeClient.Load(DataContext).Where(Function(VRC) VRC.VendorCode = VendorCode AndAlso VRC.VendorRepCode = Vendor.DefaultVendorRepresentativeCode1).Count = 0 OrElse
                                        AdvantageFramework.Database.Procedures.VendorRepresentativeClient.Load(DataContext).Where(Function(VRC) VRC.VendorCode = VendorCode AndAlso VRC.VendorRepCode = Vendor.DefaultVendorRepresentativeCode1 AndAlso VRC.ClientCode = TVOrder.ClientCode).Count = 1) Then

                                    TVOrder.VendorRepCode1 = Vendor.DefaultVendorRepresentativeCode1

                                End If

                                If String.IsNullOrWhiteSpace(TVOrder.VendorRepCode2) AndAlso Not String.IsNullOrWhiteSpace(Vendor.DefaultVendorRepresentativeCode2) AndAlso
                                        (AdvantageFramework.Database.Procedures.VendorRepresentativeClient.Load(DataContext).Where(Function(VRC) VRC.VendorCode = VendorCode AndAlso VRC.VendorRepCode = Vendor.DefaultVendorRepresentativeCode2).Count = 0 OrElse
                                        AdvantageFramework.Database.Procedures.VendorRepresentativeClient.Load(DataContext).Where(Function(VRC) VRC.VendorCode = VendorCode AndAlso VRC.VendorRepCode = Vendor.DefaultVendorRepresentativeCode2 AndAlso VRC.ClientCode = TVOrder.ClientCode).Count = 1) Then

                                    TVOrder.VendorRepCode2 = Vendor.DefaultVendorRepresentativeCode2

                                End If

                                DbContext.Entry(TVOrder).State = Entity.EntityState.Modified
                                DbContext.SaveChanges()

                            End If

                        ElseIf Vendor IsNot Nothing AndAlso MediaTypeCode = "R" Then

                            RadioOrder = AdvantageFramework.Database.Procedures.RadioOrder.LoadByOrderNumber(DbContext, MediaBroadcastWorksheetMarketDetailDate.OrderNumber.Value)

                            If RadioOrder IsNot Nothing Then

                                If String.IsNullOrWhiteSpace(RadioOrder.VendorRepCode1) AndAlso Not String.IsNullOrWhiteSpace(Vendor.DefaultVendorRepresentativeCode1) AndAlso
                                        (AdvantageFramework.Database.Procedures.VendorRepresentativeClient.Load(DataContext).Where(Function(VRC) VRC.VendorCode = VendorCode AndAlso VRC.VendorRepCode = Vendor.DefaultVendorRepresentativeCode1).Count = 0 OrElse
                                        AdvantageFramework.Database.Procedures.VendorRepresentativeClient.Load(DataContext).Where(Function(VRC) VRC.VendorCode = VendorCode AndAlso VRC.VendorRepCode = Vendor.DefaultVendorRepresentativeCode1 AndAlso VRC.ClientCode = RadioOrder.ClientCode).Count = 1) Then

                                    RadioOrder.VendorRepCode1 = Vendor.DefaultVendorRepresentativeCode1

                                End If

                                If String.IsNullOrWhiteSpace(RadioOrder.VendorRepCode2) AndAlso Not String.IsNullOrWhiteSpace(Vendor.DefaultVendorRepresentativeCode2) AndAlso
                                        (AdvantageFramework.Database.Procedures.VendorRepresentativeClient.Load(DataContext).Where(Function(VRC) VRC.VendorCode = VendorCode AndAlso VRC.VendorRepCode = Vendor.DefaultVendorRepresentativeCode2).Count = 0 OrElse
                                        AdvantageFramework.Database.Procedures.VendorRepresentativeClient.Load(DataContext).Where(Function(VRC) VRC.VendorCode = VendorCode AndAlso VRC.VendorRepCode = Vendor.DefaultVendorRepresentativeCode2 AndAlso VRC.ClientCode = RadioOrder.ClientCode).Count = 1) Then

                                    RadioOrder.VendorRepCode2 = Vendor.DefaultVendorRepresentativeCode2

                                End If

                                DbContext.Entry(RadioOrder).State = Entity.EntityState.Modified
                                DbContext.SaveChanges()

                            End If

                        End If

                    End Using

                End If

            End Using

        End Sub

#End Region

#Region "  Market Nielsen TV Books "

        Public Function MarketNielsenTVBooks_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketNielsenTVBooksViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksViewModel = Nothing
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim WorksheetMarketNielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenTVBook) = Nothing
            Dim WorksheetMarketNielsenTVBook As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenTVBook = Nothing
            Dim WorksheetNielsenTVBook As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenTVBook = Nothing

            MediaBroadcastWorksheetMarketNielsenTVBooksViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksViewModel

            MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                                Include("Division").
                                                                                                                                                                Include("Product").
                                                                                                                                                                Include("SalesClass").
                                                                                                                                                                Include("Campaign").
                                                                                                                                                                Include("MediaPlan").
                                                                                                                                                                Include("PrimaryMediaDemographic").
                                                                                                                                                                Include("Country").Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                                Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.WorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                                            Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketID).ToList.
                                                                                                                                                                            Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).FirstOrDefault

                WorksheetMarketNielsenTVBooks = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenTVBook.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenTVBook(Entity)).ToList

            End Using

            If MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen Then

                MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.NielsenTVBooks = GetNielsenTVBooks(MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.WorksheetMarket.MarketCode,
                                                                                                        MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.WorksheetMarket.MarketNielsenTVCode,
                                                                                                        MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.WorksheetMarket.IsCable,
                                                                                                        MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.WorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID)

            ElseIf MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.Worksheet.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore Then

                MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.NielsenTVBooks = GetComscoreTVBooks()

            End If

            For Each NielsenTVBook In MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.NielsenTVBooks

                WorksheetMarketNielsenTVBook = WorksheetMarketNielsenTVBooks.SingleOrDefault(Function(Entity) Entity.NielsenTVBookID = NielsenTVBook.ID)

                If WorksheetMarketNielsenTVBook IsNot Nothing Then

                    WorksheetNielsenTVBook = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenTVBook(WorksheetMarketNielsenTVBook, NielsenTVBook)

                Else

                    WorksheetNielsenTVBook = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenTVBook(NielsenTVBook)

                End If

                MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.WorksheetNielsenTVBooks.Add(WorksheetNielsenTVBook)

            Next

            MarketNielsenTVBooks_Load = MediaBroadcastWorksheetMarketNielsenTVBooksViewModel

        End Function
        Public Function MarketNielsenTVBooks_Add(ByRef MediaBroadcastWorksheetMarketNielsenTVBooksViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksViewModel) As Boolean

            'objects
            Dim Added As Boolean = False
            Dim WorksheetMarketID As Integer = 0
            Dim MediaBroadcastWorksheetMarketNielsenTVBook As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenTVBook = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                WorksheetMarketID = MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.MediaBroadcastWorksheetMarketID

                For Each NielsenTVBook In MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.SelectedNielsenTVBooks

                    If NielsenTVBook.Selected = False Then

                        MediaBroadcastWorksheetMarketNielsenTVBook = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenTVBook

                        MediaBroadcastWorksheetMarketNielsenTVBook.DbContext = DbContext

                        MediaBroadcastWorksheetMarketNielsenTVBook.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.MediaBroadcastWorksheetMarketID
                        MediaBroadcastWorksheetMarketNielsenTVBook.NielsenTVBookID = NielsenTVBook.NielsenTVBookID

                        DbContext.MediaBroadcastWorksheetMarketNielsenTVBooks.Add(MediaBroadcastWorksheetMarketNielsenTVBook)

                    End If

                    NielsenTVBook.Selected = True

                Next

                DbContext.SaveChanges()

            End Using

            MarketNielsenTVBooks_Add = Added

        End Function
        Public Function MarketNielsenTVBooks_Delete(ByRef MediaBroadcastWorksheetMarketNielsenTVBooksViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksViewModel) As Boolean

            'objects
            Dim Deleted As Boolean = False
            Dim WorksheetMarketID As Integer = 0
            Dim MediaBroadcastWorksheetMarketNielsenTVBook As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenTVBook = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                WorksheetMarketID = MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.MediaBroadcastWorksheetMarketID

                For Each NielsenTVBook In MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.SelectedNielsenTVBooks

                    If NielsenTVBook.Selected Then

                        MediaBroadcastWorksheetMarketNielsenTVBook = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenTVBook.Load(DbContext).SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID AndAlso Entity.NielsenTVBookID = NielsenTVBook.NielsenTVBookID)

                        If MediaBroadcastWorksheetMarketNielsenTVBook IsNot Nothing Then

                            DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketNielsenTVBook)

                        End If

                    End If

                    NielsenTVBook.Selected = False

                Next

                DbContext.SaveChanges()

                Deleted = True

            End Using

            MarketNielsenTVBooks_Delete = Deleted

        End Function
        Public Sub MarketNielsenTVBooks_NielsenTVBookSelectionChanged(ByRef MediaBroadcastWorksheetMarketNielsenTVBooksViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksViewModel,
                                                                      SelectedNielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenTVBook))

            MediaBroadcastWorksheetMarketNielsenTVBooksViewModel.SelectedNielsenTVBooks = SelectedNielsenTVBooks

        End Sub

#End Region

#Region "  Market Nielsen TV Books Copy To "

        Public Function MarketNielsenTVBooksCopyTo_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksCopyToViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksCopyToViewModel = Nothing
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim WorksheetMarketNielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenTVBook) = Nothing
            Dim WorksheetMarketNielsenTVBook As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenTVBook = Nothing
            Dim WorksheetNielsenTVBook As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenTVBook = Nothing

            MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksCopyToViewModel

            MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                                      Include("Division").
                                                                                                                                                                      Include("Product").
                                                                                                                                                                      Include("SalesClass").
                                                                                                                                                                      Include("Campaign").
                                                                                                                                                                      Include("MediaPlan").
                                                                                                                                                                      Include("PrimaryMediaDemographic").
                                                                                                                                                                      Include("Country").Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                                      Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyFromWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                                          Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketID).ToList.
                                                                                                                                                                          Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).FirstOrDefault

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyFromWorksheetNielsenTVBooks = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenTVBook.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenTVBook(Entity)).ToList

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").
                                                                                                                                                                                Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID AndAlso Entity.ID <> MediaBroadcastWorksheetMarketID).ToList.
                                                                                                                                                                                Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenBookCopyTo(Entity)).ToList

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets = MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets.Where(Function(Entity) String.IsNullOrWhiteSpace(Entity.MarketNielsenTVCode) = False).ToList

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.Markets = AdvantageFramework.Database.Procedures.Market.Load(DbContext).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Market(Entity)).ToList

            End Using

            ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Me.Session)

            MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.NielsenTVBooks = ShareHPUTBookController.GetRepositoryAllNielsenTVBooks.OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.Month).ThenBy(Function(NB) NB.StreamSort).ToList

            For Each CopyToMarket In MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets.ToList

                If MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.NielsenTVBooks.Any(Function(Entity) Entity.NielsenMarketNumber = CInt(CopyToMarket.MarketNielsenTVCode)) = False Then

                    MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets.Remove(CopyToMarket)

                End If

            Next

            MarketNielsenTVBooksCopyTo_Load = MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel

        End Function
        Public Sub MarketNielsenTVBooksCopyTo_CopyTo(ByRef MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenTVBooksCopyToViewModel)

            'objects
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim CopyFromNielsenTVBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing
            Dim NielsenTVBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing
            Dim NielsenMarketNumber As Integer = 0
            Dim MediaBroadcastWorksheetMarketNielsenTVBook As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenTVBook = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                For Each CopyToMarket In MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets.Where(Function(Entity) Entity.Selected = True).ToList

                    NielsenMarketNumber = 0

                    If Integer.TryParse(CopyToMarket.MarketNielsenTVCode, NielsenMarketNumber) AndAlso NielsenMarketNumber > 0 Then

                        For Each CopyFromWorksheetNielsenTVBook In MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyFromWorksheetNielsenTVBooks

                            CopyFromNielsenTVBook = MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.NielsenTVBooks.SingleOrDefault(Function(Entity) Entity.ID = CopyFromWorksheetNielsenTVBook.NielsenTVBookID)

                            If CopyFromNielsenTVBook IsNot Nothing Then

                                NielsenTVBook = MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.NielsenTVBooks.SingleOrDefault(Function(Entity) Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                                                                           Entity.Year = CopyFromNielsenTVBook.Year AndAlso
                                                                                                                                                           Entity.Month = CopyFromNielsenTVBook.Month AndAlso
                                                                                                                                                           Entity.Stream = CopyFromNielsenTVBook.Stream)

                                If NielsenTVBook IsNot Nothing Then

                                    MediaBroadcastWorksheetMarketNielsenTVBook = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenTVBook

                                    MediaBroadcastWorksheetMarketNielsenTVBook.DbContext = DbContext

                                    MediaBroadcastWorksheetMarketNielsenTVBook.MediaBroadcastWorksheetMarketID = CopyToMarket.MediaBroadcastWorksheetMarketID
                                    MediaBroadcastWorksheetMarketNielsenTVBook.NielsenTVBookID = NielsenTVBook.ID

                                    DbContext.MediaBroadcastWorksheetMarketNielsenTVBooks.Add(MediaBroadcastWorksheetMarketNielsenTVBook)

                                End If

                            End If

                        Next

                    End If

                Next

                DbContext.SaveChanges()

            End Using

        End Sub

#End Region

#Region "  Market Nielsen Radio Periods "

        Public Function MarketNielsenRadioPeriods_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel = Nothing
            Dim NielsenRadioController As AdvantageFramework.Controller.Media.NielsenRadioController = Nothing
            Dim WorksheetMarketNielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenRadioPeriod) = Nothing
            Dim WorksheetMarketNielsenRadioPeriod As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenRadioPeriod = Nothing
            Dim WorksheetNielsenRadioPeriod As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenRadioPeriod = Nothing

            MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel

            MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                                     Include("Division").
                                                                                                                                                                     Include("Product").
                                                                                                                                                                     Include("SalesClass").
                                                                                                                                                                     Include("Campaign").
                                                                                                                                                                     Include("MediaPlan").
                                                                                                                                                                     Include("PrimaryMediaDemographic").
                                                                                                                                                                     Include("Country").Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                                     Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.WorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                                            Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketID).ToList.
                                                                                                                                                                            Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).FirstOrDefault

                WorksheetMarketNielsenRadioPeriods = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenRadioPeriod.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenRadioPeriod(Entity)).ToList

            End Using

            If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.WorksheetMarket.MarketNielsenRadioCode) = False Then

                NielsenRadioController = New AdvantageFramework.Controller.Media.NielsenRadioController(Me.Session)

                MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.NielsenRadioPeriods = NielsenRadioController.LoadNieslenRadioPeriods(MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.WorksheetMarket.MarketNielsenRadioCode,
                                                                                                                                               MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.WorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID,
                                                                                                                                               MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.WorksheetMarket.MediaBroadcastWorksheetMarketRadioGeographyID,
                                                                                                                                               New Generic.List(Of Integer),
                                                                                                                                               MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.WorksheetMarket.ExternalRadioSource).OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

            Else

                MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.NielsenRadioPeriods = New Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod)

            End If

            For Each NielsenRadioPeriod In MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.NielsenRadioPeriods

                WorksheetMarketNielsenRadioPeriod = WorksheetMarketNielsenRadioPeriods.SingleOrDefault(Function(Entity) Entity.NielsenRadioPeriodID = NielsenRadioPeriod.ID)

                If WorksheetMarketNielsenRadioPeriod IsNot Nothing Then

                    WorksheetNielsenRadioPeriod = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenRadioPeriod(WorksheetMarketNielsenRadioPeriod)

                Else

                    WorksheetNielsenRadioPeriod = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenRadioPeriod(NielsenRadioPeriod)

                End If

                MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.WorksheetNielsenRadioPeriods.Add(WorksheetNielsenRadioPeriod)

            Next

            MarketNielsenRadioPeriods_Load = MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel

        End Function
        Public Function MarketNielsenRadioPeriods_Add(ByRef MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel) As Boolean

            'objects
            Dim Added As Boolean = False
            Dim WorksheetMarketID As Integer = 0
            Dim MediaBroadcastWorksheetMarketNielsenRadioPeriod As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenRadioPeriod = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                WorksheetMarketID = MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.MediaBroadcastWorksheetMarketID

                For Each NielsenRadioPeriod In MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.SelectedNielsenRadioPeriods

                    If NielsenRadioPeriod.Selected = False Then

                        MediaBroadcastWorksheetMarketNielsenRadioPeriod = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenRadioPeriod

                        MediaBroadcastWorksheetMarketNielsenRadioPeriod.DbContext = DbContext

                        MediaBroadcastWorksheetMarketNielsenRadioPeriod.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.MediaBroadcastWorksheetMarketID
                        MediaBroadcastWorksheetMarketNielsenRadioPeriod.NielsenRadioPeriodID = NielsenRadioPeriod.NielsenRadioPeriodID

                        DbContext.MediaBroadcastWorksheetMarketNielsenRadioPeriods.Add(MediaBroadcastWorksheetMarketNielsenRadioPeriod)

                    End If

                    NielsenRadioPeriod.Selected = True

                Next

                DbContext.SaveChanges()

            End Using

            MarketNielsenRadioPeriods_Add = Added

        End Function
        Public Function MarketNielsenRadioPeriods_Delete(ByRef MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel) As Boolean

            'objects
            Dim Deleted As Boolean = False
            Dim WorksheetMarketID As Integer = 0
            Dim MediaBroadcastWorksheetMarketNielsenRadioPeriod As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenRadioPeriod = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                WorksheetMarketID = MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.MediaBroadcastWorksheetMarketID

                For Each NielsenRadioPeriod In MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.SelectedNielsenRadioPeriods

                    If NielsenRadioPeriod.Selected Then

                        MediaBroadcastWorksheetMarketNielsenRadioPeriod = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenRadioPeriod.Load(DbContext).SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketID AndAlso Entity.NielsenRadioPeriodID = NielsenRadioPeriod.NielsenRadioPeriodID)

                        If MediaBroadcastWorksheetMarketNielsenRadioPeriod IsNot Nothing Then

                            DbContext.DeleteEntityObject(MediaBroadcastWorksheetMarketNielsenRadioPeriod)

                        End If

                    End If

                    NielsenRadioPeriod.Selected = False

                Next

                DbContext.SaveChanges()

                Deleted = True

            End Using

            MarketNielsenRadioPeriods_Delete = Deleted

        End Function
        Public Sub MarketNielsenRadioPeriods_NielsenRadioPeriodselectionChanged(ByRef MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel,
                                                                                SelectedNielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenRadioPeriod))

            MediaBroadcastWorksheetMarketNielsenRadioPeriodsViewModel.SelectedNielsenRadioPeriods = SelectedNielsenRadioPeriods

        End Sub

#End Region

#Region "  Market Nielsen Radio Period Copy To "

        Public Function MarketNielsenRadioPeriodsCopyTo_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsCopyToViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsCopyToViewModel = Nothing
            Dim NielsenRadioController As AdvantageFramework.Controller.Media.NielsenRadioController = Nothing
            Dim WorksheetMarketNielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenRadioPeriod) = Nothing
            Dim WorksheetMarketNielsenRadioPeriod As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenRadioPeriod = Nothing
            Dim WorksheetNielsenRadioPeriod As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenRadioPeriod = Nothing

            MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsCopyToViewModel

            MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                                      Include("Division").
                                                                                                                                                                      Include("Product").
                                                                                                                                                                      Include("SalesClass").
                                                                                                                                                                      Include("Campaign").
                                                                                                                                                                      Include("MediaPlan").
                                                                                                                                                                      Include("PrimaryMediaDemographic").
                                                                                                                                                                      Include("Country").Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                                      Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyFromWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                                          Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketID).ToList.
                                                                                                                                                                          Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).FirstOrDefault

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyFromWorksheetNielsenRadioPeriods = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketNielsenRadioPeriod.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.NielsenRadioPeriod(Entity)).ToList

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").
                                                                                                                                                                                Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID AndAlso Entity.ID <> MediaBroadcastWorksheetMarketID).ToList.
                                                                                                                                                                                Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketNielsenBookCopyTo(Entity)).ToList

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets = MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets.Where(Function(Entity) String.IsNullOrWhiteSpace(Entity.MarketNielsenRadioCode) = False).ToList

                MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.Markets = AdvantageFramework.Database.Procedures.Market.Load(DbContext).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Market(Entity)).ToList

            End Using

            NielsenRadioController = New AdvantageFramework.Controller.Media.NielsenRadioController(Me.Session)

            MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.NielsenRadioPeriods = NielsenRadioController.LoadAllNieslenRadioPeriods().OrderByDescending(Function(NB) NB.Year).ThenByDescending(Function(NB) NB.SortMonth).ToList

            For Each CopyToMarket In MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets.ToList

                If MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.NielsenRadioPeriods.Any(Function(Entity) Entity.NielsenRadioMarketNumber = CInt(CopyToMarket.MarketNielsenRadioCode)) = False Then

                    MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets.Remove(CopyToMarket)

                End If

            Next

            MarketNielsenRadioPeriodsCopyTo_Load = MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel

        End Function
        Public Sub MarketNielsenRadioPeriodsCopyTo_CopyTo(ByRef MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsCopyToViewModel)

            'objects
            Dim NielsenRadioPeriods As Generic.List(Of AdvantageFramework.DTO.Media.NielsenRadioPeriod) = Nothing
            Dim CopyFromNielsenRadioPeriod As AdvantageFramework.DTO.Media.NielsenRadioPeriod = Nothing
            Dim NielsenRadioPeriod As AdvantageFramework.DTO.Media.NielsenRadioPeriod = Nothing
            Dim NielsenRadioMarketNumber As Integer = 0
            Dim MediaBroadcastWorksheetMarketNielsenRadioPeriod As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenRadioPeriod = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                For Each CopyToMarket In MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyToMarkets.Where(Function(Entity) Entity.Selected = True).ToList

                    NielsenRadioMarketNumber = 0

                    If Integer.TryParse(CopyToMarket.MarketNielsenRadioCode, NielsenRadioMarketNumber) AndAlso NielsenRadioMarketNumber > 0 Then

                        For Each CopyFromWorksheetNielsenRadioPeriod In MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.CopyFromWorksheetNielsenRadioPeriods

                            CopyFromNielsenRadioPeriod = MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.NielsenRadioPeriods.SingleOrDefault(Function(Entity) Entity.ID = CopyFromWorksheetNielsenRadioPeriod.NielsenRadioPeriodID)

                            If CopyFromNielsenRadioPeriod IsNot Nothing Then

                                NielsenRadioPeriod = MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel.NielsenRadioPeriods.SingleOrDefault(Function(Entity) Entity.NielsenRadioMarketNumber = NielsenRadioMarketNumber AndAlso
                                                                                                                                                                     Entity.Year = CopyFromNielsenRadioPeriod.Year AndAlso
                                                                                                                                                                     Entity.Month = CopyFromNielsenRadioPeriod.Month)

                                If NielsenRadioPeriod IsNot Nothing Then

                                    MediaBroadcastWorksheetMarketNielsenRadioPeriod = New AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketNielsenRadioPeriod

                                    MediaBroadcastWorksheetMarketNielsenRadioPeriod.DbContext = DbContext

                                    MediaBroadcastWorksheetMarketNielsenRadioPeriod.MediaBroadcastWorksheetMarketID = CopyToMarket.MediaBroadcastWorksheetMarketID
                                    MediaBroadcastWorksheetMarketNielsenRadioPeriod.NielsenRadioPeriodID = NielsenRadioPeriod.ID

                                    DbContext.MediaBroadcastWorksheetMarketNielsenRadioPeriods.Add(MediaBroadcastWorksheetMarketNielsenRadioPeriod)

                                End If

                            End If

                        Next

                    End If

                Next

                DbContext.SaveChanges()

            End Using

        End Sub
        Public Function MarketNielsenRadioPeriodsCopyTo_GetRepositoryMarketRadioEthnicity(MediaBroadcastWorksheetMarketNielsonTVBooksCopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketNielsenRadioPeriodsCopyToViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), False)

            MarketNielsenRadioPeriodsCopyTo_GetRepositoryMarketRadioEthnicity = DataTable

        End Function

#End Region

#Region "  Market Revisions "

        Public Function MarketRevisions_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketRevisionsViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketRevisionsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketRevisionsViewModel = Nothing

            MediaBroadcastWorksheetMarketRevisionsViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketRevisionsViewModel

            MediaBroadcastWorksheetMarketRevisionsViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketRevisionsViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketRevisionsViewModel.Worksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                           Include("Division").
                                                                                                                                                           Include("Product").
                                                                                                                                                           Include("SalesClass").
                                                                                                                                                           Include("Campaign").
                                                                                                                                                           Include("MediaPlan").
                                                                                                                                                           Include("PrimaryMediaDemographic").
                                                                                                                                                           Include("Country").
                                                                                                                                                           Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetID).ToList.
                                                                                                                                                           Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).FirstOrDefault

                MediaBroadcastWorksheetMarketRevisionsViewModel.WorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Include("BuyerEmployee").
                                                                                                                                                                       Where(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketID).ToList.
                                                                                                                                                                       Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket(DbContext, Entity)).FirstOrDefault

            End Using

            MarketRevisions_LoadWorksheetMarketRevisions(MediaBroadcastWorksheetMarketRevisionsViewModel)

            MarketRevisions_Load = MediaBroadcastWorksheetMarketRevisionsViewModel

        End Function
        Public Sub MarketRevisions_Save(ByRef MediaBroadcastWorksheetMarketRevisionsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketRevisionsViewModel)

            'objects
            Dim MediaBroadcastWorksheetMarketRevision As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketRevision = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()
                DbContext.Configuration.AutoDetectChangesEnabled = False

                For Each WorksheetMarketRevision In MediaBroadcastWorksheetMarketRevisionsViewModel.WorksheetMarketRevisions

                    MediaBroadcastWorksheetMarketRevision = DbContext.MediaBroadcastWorksheetMarketRevisions.Find(WorksheetMarketRevision.ID)

                    WorksheetMarketRevision.SaveToEntity(MediaBroadcastWorksheetMarketRevision)

                Next

                DbContext.Configuration.AutoDetectChangesEnabled = True

                DbContext.SaveChanges()

            End Using

            MediaBroadcastWorksheetMarketRevisionsViewModel.SaveEnabled = False

        End Sub
        Public Sub MarketRevisions_LoadWorksheetMarketRevisions(ByRef MediaBroadcastWorksheetMarketRevisionsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketRevisionsViewModel)

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketRevisionsViewModel.WorksheetMarketRevisions = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketRevision.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketRevisionsViewModel.MediaBroadcastWorksheetMarketID).
                                                                                                                                                                        OrderByDescending(Function(Entity) Entity.RevisionNumber).ToList.
                                                                                                                                                                        Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketRevision(Entity)).ToList

            End Using

        End Sub
        Public Sub MarketRevisions_UserEntryChanged(ByRef MediaBroadcastWorksheetMarketRevisionsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketRevisionsViewModel)

            MediaBroadcastWorksheetMarketRevisionsViewModel.SaveEnabled = True

        End Sub
        Public Sub MarketRevisions_ClearChanged(ByRef MediaBroadcastWorksheetMarketRevisionsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketRevisionsViewModel)

            MediaBroadcastWorksheetMarketRevisionsViewModel.SaveEnabled = False

        End Sub

#End Region

#Region "  Market Vendor Schedule Copy To Another Vendor "

        Public Function MarketVendorScheduleCopyToAnotherVendor_Load(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                     CopyFromVendorCode As String, RowIndexes As Generic.List(Of Integer)) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel = Nothing
            Dim Vendor As AdvantageFramework.DTO.Vendor = Nothing
            Dim Vendors As Generic.List(Of AdvantageFramework.DTO.Vendor) = Nothing
            Dim VendorCodes() As String = Nothing
            Dim WorksheetMarketDetailVendor As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendor = Nothing
            Dim AllWorksheetMarketDetailVendors As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendor) = Nothing

            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel

            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.SelectedWorksheetMarketRevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.CopyFromVendorCode = CopyFromVendorCode
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.RowIndexes = RowIndexes

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

                AllWorksheetMarketDetailVendors = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) <> CopyFromVendorCode).
                                                                                                                                              Select(Function(DR) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailVendor With {.Selected = False,
                                                                                                                                                                                                                                                             .VendorCode = CStr(DR(MarketDetailsColumns.VendorCode.ToString)),
                                                                                                                                                                                                                                                             .VendorName = CStr(DR(MarketDetailsColumns.VendorName.ToString))}).ToList

                'Vendors = MediaBroadcastWorksheetMarketDetailsViewModel.Vendors.Where(Function(Entity) Entity.Code <> CopyFromVendorCode AndAlso VendorCodes.Contains(Entity.Code) = True).ToList

                For Each WorksheetMarketDetailVendor In AllWorksheetMarketDetailVendors

                    If MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.WorksheetMarketDetailVendors.Any(Function(Entity) Entity.VendorCode = WorksheetMarketDetailVendor.VendorCode) = False Then

                        MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.WorksheetMarketDetailVendors.Add(WorksheetMarketDetailVendor)

                    End If

                Next

            End Using

            MarketVendorScheduleCopyToAnotherVendor_Load = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel

        End Function
        Public Sub MarketVendorScheduleCopyToAnotherVendor_SelectDeselectAll(ByRef MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel,
                                                                             SelectAll As Boolean)

            For Each WorksheetMarketDetailVendor In MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.WorksheetMarketDetailVendors

                WorksheetMarketDetailVendor.Selected = SelectAll

            Next

        End Sub
        Public Sub MarketVendorScheduleCopyToAnotherVendor_CopyTo(ByRef MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel,
                                                                  ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel)


            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NewDataRow As System.Data.DataRow = Nothing
            Dim VendorDataRow As System.Data.DataRow = Nothing
            Dim IsMakegoodRow As Boolean = False
            Dim CopyFromVendorCode As String = String.Empty
            Dim NewRowIndexes As Generic.List(Of Integer) = Nothing
            Dim NewWorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing

            CopyFromVendorCode = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.CopyFromVendorCode

            RowIndexes = New Generic.List(Of Integer)
            NewRowIndexes = New Generic.List(Of Integer)

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = CopyFromVendorCode).
                                                                                                                            OrderBy(Function(DR) CInt(DR(MarketDetailsColumns.LineNumber.ToString))).
                                                                                                                            ThenBy(Function(DR) CInt(DR(MarketDetailsColumns.MakegoodNumber.ToString))).
                                                                                                                            ThenBy(Function(DR) CInt(DR(MarketDetailsColumns.MadegoodNumber.ToString))).ToList

                If MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.RowIndexes.Contains(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow)) Then

                    RowIndexes.Add(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow))

                End If

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            For Each WorksheetMarketDetailVendor In MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherVendorViewModel.WorksheetMarketDetailVendors.Where(Function(Entity) Entity.Selected = True)

                VendorDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = WorksheetMarketDetailVendor.VendorCode).FirstOrDefault

                For Each RowIndex In RowIndexes

                    DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                    NewDataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.NewRow()

                    For Each DataColumn In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                        If DataColumn.ColumnName <> MarketDetailsColumns.ID.ToString AndAlso
                                DataColumn.ColumnName <> MarketDetailsColumns.WorksheetMarketDetailID.ToString AndAlso
                                DataColumn.ColumnName <> MarketDetailsColumns.DaysAndTime.ToString AndAlso
                                DataColumn.ColumnName <> MarketDetailsColumns.OrderStatus.ToString AndAlso
                                MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.ContainsValue(DataColumn.ColumnName) = False Then

                            NewDataRow(DataColumn) = DataRow(DataColumn)

                            If DataColumn.ColumnName = MarketDetailsColumns.MakegoodNumber.ToString Then

                                If DataRow(MarketDetailsColumns.MakegoodNumber.ToString) > 0 Then

                                    IsMakegoodRow = True

                                End If

                            End If

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.DaysAndTime.ToString Then

                            NewDataRow(DataColumn) = CType(DataRow(DataColumn), AdvantageFramework.DTO.DaysAndTime).Clone

                        End If

                    Next

                    NewDataRow(MarketDetailsColumns.VendorCode.ToString) = VendorDataRow(MarketDetailsColumns.VendorCode.ToString)
                    NewDataRow(MarketDetailsColumns.VendorName.ToString) = VendorDataRow(MarketDetailsColumns.VendorName.ToString)
                    NewDataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString) = VendorDataRow(MarketDetailsColumns.VendorRadioStationComboID.ToString)
                    NewDataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString) = VendorDataRow(MarketDetailsColumns.VendorNCCTVSyscodeID.ToString)
                    NewDataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString) = VendorDataRow(MarketDetailsColumns.VendorNielsenTVStationCode.ToString)
                    NewDataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = VendorDataRow(MarketDetailsColumns.VendorIsCableSystem.ToString)
                    NewDataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString) = VendorDataRow(MarketDetailsColumns.VendorIsComboRadioStation.ToString)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV AndAlso
                            MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.SharebookNielsenTVBookID.GetValueOrDefault(0) = 0 AndAlso
                            NewDataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = True Then

                        NewDataRow(MarketDetailsColumns.BookProgram.ToString) = DataRow(MarketDetailsColumns.BookProgram.ToString)
                        NewDataRow(MarketDetailsColumns.Program.ToString) = DataRow(MarketDetailsColumns.Program.ToString)

                    Else

                        NewDataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                        NewDataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                    End If

                    If MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV AndAlso
                            NewDataRow(MarketDetailsColumns.VendorIsCableSystem.ToString) = True Then

                        NewDataRow(MarketDetailsColumns.CableNetworkStationCode.ToString) = DataRow(MarketDetailsColumns.CableNetworkStationCode.ToString)
                        NewDataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = DataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString)

                    Else

                        NewDataRow(MarketDetailsColumns.CableNetworkStationCode.ToString) = String.Empty
                        NewDataRow(MarketDetailsColumns.CableNetworkNielsenTVStationCode.ToString) = 0

                    End If

                    NewDataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryCPP.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryGRP.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryReach.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = 0
                    NewDataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0
                    NewDataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryAQH.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryCume.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryCPM.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString) = 0
                    NewDataRow(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString) = 0

                    NewDataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryCPP.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryGRP.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryReach.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = 0
                    NewDataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0
                    NewDataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryAQH.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryCume.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryCPM.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString) = 0
                    NewDataRow(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString) = 0

                    If IsMakegoodRow Then

                        NewDataRow(MarketDetailsColumns.MakegoodNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString) AndAlso
                                                                                                                                                                                                  DR(MarketDetailsColumns.LineNumber.ToString) = NewDataRow(MarketDetailsColumns.LineNumber.ToString)).
                                                                                                                                                                               Max(Function(DR) CInt(DR(MarketDetailsColumns.MakegoodNumber.ToString))) + 1

                    Else

                        NewDataRow(MarketDetailsColumns.LineNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString)).
                                                                                                                                                                           Max(Function(DR) CInt(DR(MarketDetailsColumns.LineNumber.ToString))) + 1

                    End If

                    NewDataRow(MarketDetailsColumns.RevisionNumber.ToString) = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber

                    MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.Add(NewDataRow)

                    If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets Then

                        If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Any(Function(Entity) Entity.RowID = DataRow(MarketDetailsColumns.ID.ToString)) Then

                            For Each WorksheetMarketSubmarket In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.ToList

                                For Each WorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.RowID = DataRow(MarketDetailsColumns.ID.ToString) AndAlso
                                                                                                                                                                                        Entity.MediaBroadcastWorksheetMarketSubmarketID = WorksheetMarketSubmarket.ID).ToList

                                    NewWorksheetMarketDetailSubmarketDemo = WorksheetMarketDetailSubmarketDemo.CopyWithNewRowID(NewDataRow(MarketDetailsColumns.ID.ToString))

                                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Add(NewWorksheetMarketDetailSubmarketDemo)

                                    MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemoCache.Add(String.Format(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.SubmarketCacheTemplate, WorksheetMarketSubmarket.Order, NewWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID, NewWorksheetMarketDetailSubmarketDemo.MediaDemographicID, NewWorksheetMarketDetailSubmarketDemo.RowID), NewWorksheetMarketDetailSubmarketDemo)

                                Next

                            Next

                        End If

                    End If

                    NewRowIndexes.Add(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(NewDataRow))

                Next

            Next

            MarketDetails_LoadPrimaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, NewRowIndexes)
            MarketDetails_LoadSecondaryRatingAndShareData(MediaBroadcastWorksheetMarketDetailsViewModel, NewRowIndexes)

            For Each RowIndex In NewRowIndexes

                MarketDetails_RefreshColumnTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, RowIndex)

            Next

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketDetails_UserEntryChanged(MediaBroadcastWorksheetMarketDetailsViewModel)

            MarketDetails_RefreshAllRowTotalsDataTable(MediaBroadcastWorksheetMarketDetailsViewModel, False)

        End Sub

#End Region

#Region "  Market Vendor Schedule Copy To Another Market "

        Public Function MarketVendorScheduleCopyToAnotherMarket_Load(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                     CopyFromVendorCode As String, RowIndexes As Generic.List(Of Integer)) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel = Nothing
            Dim Market As AdvantageFramework.DTO.Market = Nothing
            Dim Markets As Generic.List(Of AdvantageFramework.DTO.Market) = Nothing
            Dim WorksheetMarketVendorScheduleCopyTo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorScheduleCopyTo = Nothing
            Dim WorksheetMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket) = Nothing

            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel

            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.SelectedWorksheetMarketRevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.CopyFromVendorCode = CopyFromVendorCode
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.RowIndexes = RowIndexes

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

                WorksheetMarkets = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets.Where(Function(Entity) Entity.ID <> MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.WorksheetMarket.ID).ToList

                For Each WorksheetMarket In WorksheetMarkets

                    WorksheetMarketVendorScheduleCopyTo = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorScheduleCopyTo(WorksheetMarket)

                    MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.WorksheetMarketVendorScheduleCopyTos.Add(WorksheetMarketVendorScheduleCopyTo)

                Next

            End Using

            MarketVendorScheduleCopyToAnotherMarket_Load = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel

        End Function
        Public Sub MarketVendorScheduleCopyToAnotherMarket_SelectDeselectAll(ByRef MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel,
                                                                             SelectAll As Boolean)

            For Each WorksheetMarketVendorScheduleCopyTo In MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.WorksheetMarketVendorScheduleCopyTos

                WorksheetMarketVendorScheduleCopyTo.Selected = SelectAll

            Next

        End Sub
        Public Function MarketVendorScheduleCopyToAnotherMarket_GetRepositoryMarketRadioEthnicity(MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), False)

            MarketVendorScheduleCopyToAnotherMarket_GetRepositoryMarketRadioEthnicity = DataTable

        End Function
        Public Function MarketVendorScheduleCopyToAnotherMarket_CopyTo(ByRef MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel,
                                                                       ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                       ByRef LockedMarketsMessage As String) As Boolean

            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NewDataRow As System.Data.DataRow = Nothing
            Dim IsMakegoodRow As Boolean = False
            Dim CopyFromVendorCode As String = String.Empty
            Dim NewRowIndexes As Generic.List(Of Integer) = Nothing
            Dim CopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel = Nothing
            Dim Copied As Boolean = True
            Dim Message As String = Nothing

            CopyFromVendorCode = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.CopyFromVendorCode

            RowIndexes = New Generic.List(Of Integer)

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = CopyFromVendorCode).
                                                                                                                            OrderBy(Function(DR) CInt(DR(MarketDetailsColumns.LineNumber.ToString))).
                                                                                                                            ThenBy(Function(DR) CInt(DR(MarketDetailsColumns.MakegoodNumber.ToString))).
                                                                                                                            ThenBy(Function(DR) CInt(DR(MarketDetailsColumns.MadegoodNumber.ToString))).ToList

                If MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.RowIndexes.Contains(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow)) Then

                    RowIndexes.Add(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow))

                End If

            Next

            For Each WorksheetMarketVendorScheduleCopyTo In MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherMarketViewModel.WorksheetMarketVendorScheduleCopyTos.Where(Function(Entity) Entity.Selected = True).Distinct.ToList

                If IsWorksheetMarketLockedByAnyOtherUser(WorksheetMarketVendorScheduleCopyTo.MediaBroadcastWorksheetMarketID, Message) Then

                    Copied = False
                    LockedMarketsMessage += LockedMarketsMessage & Message & vbCrLf

                Else

                    NewRowIndexes = New Generic.List(Of Integer)

                    CopyToViewModel = MarketDetails_Load(MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID, WorksheetMarketVendorScheduleCopyTo.MediaBroadcastWorksheetMarketID)

                    CopyToViewModel.DataTable.BeginLoadData()

                    For Each RowIndex In RowIndexes

                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                        NewDataRow = CopyToViewModel.DataTable.NewRow()

                        For Each DataColumn In CopyToViewModel.DataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                            If DataColumn.ColumnName <> MarketDetailsColumns.ID.ToString AndAlso
                                    DataColumn.ColumnName <> MarketDetailsColumns.WorksheetMarketDetailID.ToString AndAlso
                                    DataColumn.ColumnName <> MarketDetailsColumns.DaysAndTime.ToString AndAlso
                                    DataColumn.ColumnName <> MarketDetailsColumns.OrderStatus.ToString AndAlso
                                    MediaBroadcastWorksheetMarketDetailsViewModel.OrderStatusDates.ContainsValue(DataColumn.ColumnName) = False Then

                                NewDataRow(DataColumn) = DataRow(DataColumn.ColumnName)

                                If DataColumn.ColumnName = MarketDetailsColumns.MakegoodNumber.ToString Then

                                    If DataRow(MarketDetailsColumns.MakegoodNumber.ToString) > 0 Then

                                        IsMakegoodRow = True

                                    End If

                                End If

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.DaysAndTime.ToString Then

                                NewDataRow(DataColumn) = CType(DataRow(DataColumn.ColumnName), AdvantageFramework.DTO.DaysAndTime).Clone

                            End If

                        Next

                        'NewDataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                        'NewDataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                        NewDataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCPP.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryGRP.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryReach.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryAQH.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCume.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCPM.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString) = 0

                        NewDataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCPP.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryGRP.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryReach.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryAQH.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCume.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCPM.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString) = 0

                        If IsMakegoodRow Then

                            NewDataRow(MarketDetailsColumns.MakegoodNumber.ToString) = CopyToViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString) AndAlso
                                                                                                                                                                        DR(MarketDetailsColumns.LineNumber.ToString) = NewDataRow(MarketDetailsColumns.LineNumber.ToString)).
                                                                                                                                                     Max(Function(DR) CInt(DR(MarketDetailsColumns.MakegoodNumber.ToString))) + 1

                        Else

                            If CopyToViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString)).Any Then

                                NewDataRow(MarketDetailsColumns.LineNumber.ToString) = CopyToViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString)).
                                                                                                                                                     Max(Function(DR) CInt(DR(MarketDetailsColumns.LineNumber.ToString))) + 1

                            Else

                                NewDataRow(MarketDetailsColumns.LineNumber.ToString) = 1

                            End If

                        End If

                        NewDataRow(MarketDetailsColumns.RevisionNumber.ToString) = CopyToViewModel.SelectedWorksheetMarketRevisionNumber

                        For Each DataColumn In CopyToViewModel.HiatusDataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                            If CopyToViewModel.HiatusDataTable.Rows(0)(DataColumn.ColumnName) = True Then

                                NewDataRow(DataColumn.ColumnName) = 0

                            End If

                        Next

                        CopyToViewModel.DataTable.Rows.Add(NewDataRow)

                        NewRowIndexes.Add(CopyToViewModel.DataTable.Rows.IndexOf(NewDataRow))

                    Next

                    MarketDetails_LoadPrimaryRatingAndShareData(CopyToViewModel, NewRowIndexes)
                    MarketDetails_LoadSecondaryRatingAndShareData(CopyToViewModel, NewRowIndexes)

                    For Each RowIndex In NewRowIndexes

                        MarketDetails_RefreshColumnTotalsDataTable(CopyToViewModel, RowIndex)

                    Next

                    CopyToViewModel.DataTable.EndLoadData()

                    MarketDetails_Save(CopyToViewModel)

                End If

            Next

            MarketVendorScheduleCopyToAnotherMarket_CopyTo = Copied

        End Function

#End Region

#Region "  Market Vendor Schedule Copy To Another Worksheet\Market Schedule"

        Public Function MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_Load(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                                      RowIndexes As Generic.List(Of Integer)) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel = Nothing
            Dim Market As AdvantageFramework.DTO.Market = Nothing
            Dim Markets As Generic.List(Of AdvantageFramework.DTO.Market) = Nothing
            Dim WorksheetMarketVendorScheduleCopyTo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorScheduleCopyTo = Nothing
            Dim WorksheetMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket) = Nothing

            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel

            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.SelectedWorksheetMarketRevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber
            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.RowIndexes = RowIndexes

            Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                DbContext.Database.Connection.Open()

                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.Load(DbContext).Include("Client").
                                                                                                                                                                                                     Include("Division").
                                                                                                                                                                                                     Include("Product").
                                                                                                                                                                                                     Include("SalesClass").
                                                                                                                                                                                                     Include("Campaign").
                                                                                                                                                                                                     Include("MediaPlan").
                                                                                                                                                                                                     Include("PrimaryMediaDemographic").
                                                                                                                                                                                                     Include("Country").
                                                                                                                                                                                                     Where(Function(Entity) Entity.IsInactive = False).ToList.
                                                                                                                                                                                                     Select(Function(Entity) New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet(Entity)).ToList

                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheets = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheets.Where(Function(Entity) Entity.ID <> MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.MediaBroadcastWorksheetID).ToList
                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheets = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheets.Where(Function(Entity) Entity.MediaType = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheet.MediaType).ToList
                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheets = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheets.Where(Function(Entity) Entity.MediaBroadcastWorksheetDateTypeID = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheet.MediaBroadcastWorksheetDateTypeID).ToList
                MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheets = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheets.Where(Function(Entity) Entity.CountryID = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.Worksheet.CountryID).ToList

            End Using

            MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_Load = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel

        End Function
        Public Sub MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_WorksheetSelectionChanged(ByRef MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel,
                                                                                                      SelectedWorksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet)

            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.SelectedWorksheet = SelectedWorksheet

        End Sub
        Public Sub MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_LoadWorksheetMarkets(ByRef MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel)

            'objects
            Dim WorksheetMarketVendorWorksheetMarketScheduleCopyTo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorWorksheetMarketScheduleCopyTo = Nothing
            Dim MediaBroadcastWorksheetMarkets As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket) = Nothing
            Dim WorksheetID As Integer = 0

            MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.WorksheetMarketVendorWorksheetMarketScheduleCopyTos.Clear()

            If MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.SelectedWorksheet IsNot Nothing Then

                WorksheetID = MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.SelectedWorksheet.ID

                Using DbContext = New AdvantageFramework.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    DbContext.Database.Connection.Open()

                    MediaBroadcastWorksheetMarkets = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.Load(DbContext).Include("Market").Where(Function(Entity) Entity.MediaBroadcastWorksheetID = WorksheetID).ToList

                    MediaBroadcastWorksheetMarkets = MediaBroadcastWorksheetMarkets.Where(Function(Entity) Entity.LockedByUserCode = String.Empty).ToList

                    For Each MediaBroadcastWorksheetMarket In MediaBroadcastWorksheetMarkets

                        WorksheetMarketVendorWorksheetMarketScheduleCopyTo = New AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketVendorWorksheetMarketScheduleCopyTo(MediaBroadcastWorksheetMarket)

                        MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.WorksheetMarketVendorWorksheetMarketScheduleCopyTos.Add(WorksheetMarketVendorWorksheetMarketScheduleCopyTo)

                    Next

                End Using

            End If

        End Sub
        Public Sub MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SelectDeselectAll(ByRef MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel,
                                                                                              SelectAll As Boolean)

            For Each WorksheetMarketVendorScheduleCopyTo In MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.WorksheetMarketVendorWorksheetMarketScheduleCopyTos

                WorksheetMarketVendorScheduleCopyTo.Selected = SelectAll

            Next

        End Sub
        Public Function MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_GetRepositoryMarketRadioEthnicity(MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), False)

            MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_GetRepositoryMarketRadioEthnicity = DataTable

        End Function
        Public Function MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_CopyTo(ByRef MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel,
                                                                                        ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                                                        ByRef LockedMarketsMessage As String) As Boolean

            'objects
            Dim RowIndexes As Generic.List(Of Integer) = Nothing
            Dim DataRow As System.Data.DataRow = Nothing
            Dim NewDataRow As System.Data.DataRow = Nothing
            Dim IsMakegoodRow As Boolean = False
            Dim NewRowIndexes As Generic.List(Of Integer) = Nothing
            Dim CopyToViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel = Nothing
            Dim Copied As Boolean = True
            Dim Message As String = Nothing
            Dim NewWorksheetMarketDetailSubmarketDemo As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketDetailSubmarketDemo = Nothing
            Dim CopyToWorksheetMarketSubmarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarketSubmarket = Nothing
            Dim MediaDemographicIDs As Generic.List(Of Integer) = Nothing
            Dim CopyToMediaDemographicIDs As Generic.List(Of Integer) = Nothing
            Dim MarketCodes As Generic.List(Of String) = Nothing
            Dim CopyToMarketCodes As Generic.List(Of String) = Nothing
            Dim MediaDemographicID As Integer = 0

            RowIndexes = New Generic.List(Of Integer)

            For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).OrderBy(Function(DR) CInt(DR(MarketDetailsColumns.LineNumber.ToString))).
                                                                                                                            ThenBy(Function(DR) CInt(DR(MarketDetailsColumns.MakegoodNumber.ToString))).
                                                                                                                            ThenBy(Function(DR) CInt(DR(MarketDetailsColumns.MadegoodNumber.ToString))).ToList

                If MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.RowIndexes.Contains(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow)) Then

                    RowIndexes.Add(MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow))

                End If

            Next

            For Each WorksheetMarketVendorWorksheetMarketScheduleCopyTo In MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.WorksheetMarketVendorWorksheetMarketScheduleCopyTos.Where(Function(Entity) Entity.Selected = True).Distinct.ToList

                If IsWorksheetMarketLockedByAnyOtherUser(WorksheetMarketVendorWorksheetMarketScheduleCopyTo.MediaBroadcastWorksheetMarketID, Message) Then

                    Copied = False
                    LockedMarketsMessage += LockedMarketsMessage & Message & vbCrLf

                Else

                    NewRowIndexes = New Generic.List(Of Integer)

                    CopyToViewModel = MarketDetails_Load(WorksheetMarketVendorWorksheetMarketScheduleCopyTo.MediaBroadcastWorksheetID, WorksheetMarketVendorWorksheetMarketScheduleCopyTo.MediaBroadcastWorksheetMarketID)

                    CopyToViewModel.DataTable.BeginLoadData()

                    For Each RowIndex In RowIndexes

                        DataRow = MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows(RowIndex)

                        NewDataRow = CopyToViewModel.DataTable.NewRow()

                        For Each DataColumn In CopyToViewModel.DataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                            If DataColumn.ColumnName.StartsWith("Date") Then

                                If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Contains(DataColumn.ColumnName) AndAlso
                                        MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.CopySpots Then

                                    NewDataRow(DataColumn) = DataRow(DataColumn.ColumnName)

                                End If

                            ElseIf DataColumn.ColumnName.StartsWith("Rate") Then

                                If MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Columns.Contains(DataColumn.ColumnName) AndAlso
                                        MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.CopyRates Then

                                    NewDataRow(DataColumn) = DataRow(DataColumn.ColumnName)

                                End If

                            ElseIf DataColumn.ColumnName.StartsWith("Entered") Then

                                'do nothing

                            ElseIf DataColumn.ColumnName.StartsWith("OrderStatus") Then

                                'do nothing

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.DefaultRate.ToString Then

                                If MediaBroadcastWorksheetMarketVendorScheduleCopyToAnotherWorksheetMarketScheduleViewModel.CopyRates Then

                                    NewDataRow(DataColumn) = DataRow(DataColumn.ColumnName)

                                Else

                                    NewDataRow(DataColumn) = 0

                                End If

                            ElseIf DataColumn.ColumnName <> MarketDetailsColumns.ID.ToString AndAlso
                                    DataColumn.ColumnName <> MarketDetailsColumns.WorksheetMarketDetailID.ToString AndAlso
                                    DataColumn.ColumnName <> MarketDetailsColumns.DaysAndTime.ToString AndAlso
                                    DataColumn.ColumnName <> MarketDetailsColumns.OrderStatus.ToString Then

                                NewDataRow(DataColumn) = DataRow(DataColumn.ColumnName)

                                If DataColumn.ColumnName = MarketDetailsColumns.MakegoodNumber.ToString Then

                                    If DataRow(MarketDetailsColumns.MakegoodNumber.ToString) > 0 Then

                                        IsMakegoodRow = True

                                    End If

                                End If

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.DaysAndTime.ToString Then

                                NewDataRow(DataColumn) = CType(DataRow(DataColumn.ColumnName), AdvantageFramework.DTO.DaysAndTime).Clone

                            End If

                        Next

                        'NewDataRow(MarketDetailsColumns.BookProgram.ToString) = String.Empty
                        'NewDataRow(MarketDetailsColumns.Program.ToString) = String.Empty

                        NewDataRow(MarketDetailsColumns.BookPrimaryRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookPrimaryShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryHPUT.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCPP.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryGRP.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryReach.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryFrequency.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookPrimaryImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryGrossImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryUniverse.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCumeImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookPrimaryAQHRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryAQHRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookPrimaryAQH.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryAQH.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCumeRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCume.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryCPM.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryVendorSubmittedRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryVendorSubmittedShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.PrimaryVendorSubmittedImpressions.ToString) = 0

                        NewDataRow(MarketDetailsColumns.BookSecondaryRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookSecondaryShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryHPUT.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCPP.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryGRP.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryReach.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryFrequency.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookSecondaryImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryGrossImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryUniverse.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCumeImpressions.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookSecondaryAQHRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryAQHRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.BookSecondaryAQH.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryAQH.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCumeRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCume.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryCPM.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryVendorSubmittedRating.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryVendorSubmittedShare.ToString) = 0
                        NewDataRow(MarketDetailsColumns.SecondaryVendorSubmittedImpressions.ToString) = 0

                        If IsMakegoodRow Then

                            NewDataRow(MarketDetailsColumns.MakegoodNumber.ToString) = CopyToViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString) AndAlso
                                                                                                                                                                        DR(MarketDetailsColumns.LineNumber.ToString) = NewDataRow(MarketDetailsColumns.LineNumber.ToString)).
                                                                                                                                                     Max(Function(DR) CInt(DR(MarketDetailsColumns.MakegoodNumber.ToString))) + 1

                        Else

                            If CopyToViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString)).Any Then

                                NewDataRow(MarketDetailsColumns.LineNumber.ToString) = CopyToViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = NewDataRow(MarketDetailsColumns.VendorCode.ToString)).
                                                                                                                                                     Max(Function(DR) CInt(DR(MarketDetailsColumns.LineNumber.ToString))) + 1

                            Else

                                NewDataRow(MarketDetailsColumns.LineNumber.ToString) = 1

                            End If

                        End If

                        NewDataRow(MarketDetailsColumns.RevisionNumber.ToString) = CopyToViewModel.SelectedWorksheetMarketRevisionNumber

                        For Each DataColumn In CopyToViewModel.HiatusDataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                            If CopyToViewModel.HiatusDataTable.Rows(0)(DataColumn.ColumnName) = True Then

                                NewDataRow(DataColumn.ColumnName) = 0

                            End If

                        Next

                        CopyToViewModel.DataTable.Rows.Add(NewDataRow)

                        If MediaBroadcastWorksheetMarketDetailsViewModel.DoesWorksheetAllowSubmarkets AndAlso CopyToViewModel.DoesWorksheetAllowSubmarkets Then

                            MediaDemographicIDs = MediaBroadcastWorksheetMarketDetailsViewModel.AllMediaDemographicIDs
                            CopyToMediaDemographicIDs = CopyToViewModel.AllMediaDemographicIDs

                            MarketCodes = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketSubmarkets.Select(Function(Entity) Entity.MarketCode).Distinct.ToList
                            CopyToMarketCodes = CopyToViewModel.WorksheetMarketSubmarkets.Select(Function(Entity) Entity.MarketCode).Distinct.ToList

                            For Each MediaDemographicID In MediaDemographicIDs

                                If CopyToMediaDemographicIDs.Contains(MediaDemographicID) Then

                                    For Each MarketCode In MarketCodes

                                        If CopyToMarketCodes.Contains(MarketCode) Then

                                            CopyToWorksheetMarketSubmarket = Nothing

                                            Try

                                                CopyToWorksheetMarketSubmarket = CopyToViewModel.WorksheetMarketSubmarkets.FirstOrDefault(Function(Entity) Entity.MarketCode = MarketCode)

                                            Catch ex As Exception
                                                CopyToWorksheetMarketSubmarket = Nothing
                                            End Try

                                            If CopyToWorksheetMarketSubmarket IsNot Nothing Then

                                                If MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Any(Function(Entity) Entity.RowID = DataRow(MarketDetailsColumns.ID.ToString) AndAlso
                                                                                                                                                          Entity.MarketCode = MarketCode AndAlso
                                                                                                                                                          Entity.MediaDemographicID = MediaDemographicID) Then

                                                    For Each WorksheetMarketDetailSubmarketDemo In MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarketDetailSubmarketDemos.Where(Function(Entity) Entity.RowID = DataRow(MarketDetailsColumns.ID.ToString) AndAlso
                                                                                                                                                                                                            Entity.MarketCode = MarketCode AndAlso
                                                                                                                                                                                                            Entity.MediaDemographicID = MediaDemographicID).ToList

                                                        NewWorksheetMarketDetailSubmarketDemo = WorksheetMarketDetailSubmarketDemo.CopyWithNewRowID(NewDataRow(MarketDetailsColumns.ID.ToString))

                                                        NewWorksheetMarketDetailSubmarketDemo.MediaBroadcastWorksheetMarketSubmarketID = CopyToWorksheetMarketSubmarket.ID

                                                        CopyToViewModel.WorksheetMarketDetailSubmarketDemos.Add(NewWorksheetMarketDetailSubmarketDemo)

                                                    Next

                                                End If

                                            End If

                                        End If

                                    Next

                                End If

                            Next

                        End If

                        MarketDetails_LoadPrimaryRatingAndShareData(CopyToViewModel, New Generic.List(Of Integer)({CopyToViewModel.DataTable.Rows.IndexOf(NewDataRow)}))
                        MarketDetails_LoadSecondaryRatingAndShareData(CopyToViewModel, New Generic.List(Of Integer)({CopyToViewModel.DataTable.Rows.IndexOf(NewDataRow)}))

                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.PrimaryRating, MarketDetailsColumns.BookPrimaryRating)
                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.PrimaryShare, MarketDetailsColumns.BookPrimaryShare)
                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.PrimaryImpressions, MarketDetailsColumns.BookPrimaryImpressions)
                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.PrimaryAQHRating, MarketDetailsColumns.BookPrimaryAQHRating)
                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.PrimaryAQH, MarketDetailsColumns.BookPrimaryAQH)

                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.SecondaryRating, MarketDetailsColumns.BookSecondaryRating)
                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.SecondaryShare, MarketDetailsColumns.BookSecondaryShare)
                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.SecondaryImpressions, MarketDetailsColumns.BookSecondaryImpressions)
                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.SecondaryAQHRating, MarketDetailsColumns.BookSecondaryAQHRating)
                        MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(NewDataRow, DataRow, MarketDetailsColumns.SecondaryAQH, MarketDetailsColumns.BookSecondaryAQH)

                        NewRowIndexes.Add(CopyToViewModel.DataTable.Rows.IndexOf(NewDataRow))

                    Next

                    For Each RowIndex In NewRowIndexes

                        MarketDetails_RefreshColumnTotalsDataTable(CopyToViewModel, RowIndex)

                    Next

                    CopyToViewModel.DataTable.EndLoadData()

                    MarketDetails_Save(CopyToViewModel)

                End If

            Next

            MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_CopyTo = Copied

        End Function
        Private Sub MarketVendorScheduleCopyToAnotherWorksheetMarketSchedule_SetDataIfOverriden(ByRef NewDataRow As System.Data.DataRow, DataRow As System.Data.DataRow, Column As MarketDetailsColumns, BookColumn As MarketDetailsColumns)

            If DataRow(Column.ToString) <> DataRow(BookColumn.ToString) Then

                NewDataRow(Column.ToString) = DataRow(Column.ToString)

            End If

        End Sub

#End Region

#Region "  Market Hiatus Settings Copy From Another Market "

        Public Function MarketHiatusSettingsCopyFromAnotherMarket_Load(ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel = Nothing

            MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel = New AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel

            MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel.MediaBroadcastWorksheetID = MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID
            MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket.ID
            MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel.SelectedWorksheetMarketRevisionNumber = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarketRevisionNumber

            MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel.Worksheet = MediaBroadcastWorksheetMarketDetailsViewModel.Worksheet
            MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel.WorksheetMarket = MediaBroadcastWorksheetMarketDetailsViewModel.SelectedWorksheetMarket

            MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel.WorksheetMarkets = MediaBroadcastWorksheetMarketDetailsViewModel.WorksheetMarkets.Where(Function(Entity) Entity.ID <> MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel.WorksheetMarket.ID).ToList

            MarketHiatusSettingsCopyFromAnotherMarket_Load = MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel

        End Function
        Public Sub MarketHiatusSettingsCopyFromAnotherMarket_WorksheetMarketSelectionChanged(ByRef MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel,
                                                                                             SelectedWorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket)

            MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel.SelectedWorksheetMarket = SelectedWorksheetMarket

        End Sub
        Public Function MarketHiatusSettingsCopyFromAnotherMarket_GetRepositoryMarketTVGeography(MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies), False)

            MarketHiatusSettingsCopyFromAnotherMarket_GetRepositoryMarketTVGeography = DataTable

        End Function
        Public Function MarketHiatusSettingsCopyFromAnotherMarket_GetRepositoryMarketRadioGeography(MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioGeographies), False)

            MarketHiatusSettingsCopyFromAnotherMarket_GetRepositoryMarketRadioGeography = DataTable

        End Function
        Public Function MarketHiatusSettingsCopyFromAnotherMarket_GetRepositoryExternalRadioSource(MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.Nielsen.Database.Entities.RadioSource), False)

            MarketHiatusSettingsCopyFromAnotherMarket_GetRepositoryExternalRadioSource = DataTable

        End Function
        Public Function MarketHiatusSettingsCopyFromAnotherMarket_GetRepositoryMarketRadioEthnicity(MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel) As System.Data.DataTable

            'objects
            Dim DataTable As System.Data.DataTable = Nothing

            DataTable = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), False)

            MarketHiatusSettingsCopyFromAnotherMarket_GetRepositoryMarketRadioEthnicity = DataTable

        End Function
        Public Function MarketHiatusSettingsCopyFromAnotherMarket_CopyTo(ByRef MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel,
                                                                         ByRef MediaBroadcastWorksheetMarketDetailsViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel) As Boolean

            'objects
            Dim CopyFromViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel = Nothing
            Dim Copied As Boolean = True
            Dim HasDifferentHiatusSetting As Boolean = False

            CopyFromViewModel = MarketDetails_Load(MediaBroadcastWorksheetMarketDetailsViewModel.MediaBroadcastWorksheetID, MediaBroadcastWorksheetMarketHiatusSettingsCopyFromAnotherMarketViewModel.SelectedWorksheetMarket.ID)

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.BeginLoadData()

            For Each DataColumn In CopyFromViewModel.HiatusDataTable.Columns.OfType(Of System.Data.DataColumn).ToList

                If MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable.Columns.Contains(DataColumn.ColumnName) Then

                    If MediaBroadcastWorksheetMarketDetailsViewModel.HiatusDataTable(0)(DataColumn.ColumnName) <> CopyFromViewModel.HiatusDataTable(0)(DataColumn.ColumnName) Then

                        MarketDetails_HiatusValueChanged(MediaBroadcastWorksheetMarketDetailsViewModel, DataColumn.ColumnName)
                        HasDifferentHiatusSetting = True

                    End If

                End If

            Next

            If HasDifferentHiatusSetting Then

                'For Each DataRow In MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.OfType(Of System.Data.DataRow)

                '    MarketDetails_MarketDetailChanged(MediaBroadcastWorksheetMarketDetailsViewModel, MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.Rows.IndexOf(DataRow))

                'Next

            End If

            MediaBroadcastWorksheetMarketDetailsViewModel.DataTable.EndLoadData()

            MarketHiatusSettingsCopyFromAnotherMarket_CopyTo = Copied

        End Function

#End Region

#Region "  Report "

        Public Function Report_Generate(Session As AdvantageFramework.Security.Session,
                                        FileName As String,
                                        MediaBroadcastWorksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet,
                                        MediaBroadcastWorksheetMarkets As Generic.List(Of AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket),
                                        WorksheetPrintOptions As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetPrintOptions) As Boolean

            'objects
            Dim Workbook As Aspose.Cells.Workbook = Nothing
            Dim XlsSaveOptions As Aspose.Cells.XlsSaveOptions = Nothing
            Dim License As Aspose.Cells.License = Nothing
            Dim Location As AdvantageFramework.Database.Entities.Location = Nothing
            Dim LocationLogo As AdvantageFramework.Database.Entities.LocationLogo = Nothing
            Dim Worksheet As Aspose.Cells.Worksheet = Nothing
            Dim ActiveRow As Integer = 0
            Dim ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel = Nothing
            Dim Controller As AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController = Nothing
            Dim DataColumns As Generic.List(Of System.Data.DataColumn) = Nothing
            Dim Generated As Boolean = False
            Dim FooterLines As Generic.List(Of String) = New List(Of String)
            Dim DisclaimerStyle As Aspose.Cells.Style = Nothing
            Dim ShowingRatings As Boolean = False
            Dim Vendors As Generic.List(Of AdvantageFramework.DTO.Vendor) = Nothing

            If WorksheetPrintOptions.PrintLocation AndAlso Not String.IsNullOrWhiteSpace(WorksheetPrintOptions.LocationCode) Then

                Using DataContext = New AdvantageFramework.Database.DataContext(Session.ConnectionString, Session.UserCode)

                    Location = AdvantageFramework.Database.Procedures.Location.LoadByLocationID(DataContext, WorksheetPrintOptions.LocationCode)

                End Using

            End If

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                Controller = New AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController(Session)

                If Location IsNot Nothing Then

                    LocationLogo = AdvantageFramework.Database.Procedures.LocationLogo.LoadByLocationAndLocationLogoTypeID(DbContext, Location.ID, AdvantageFramework.Database.Entities.LocationLogoTypes.HeaderPortrait)

                Else

                    LocationLogo = Nothing

                End If

                License = New Aspose.Cells.License

                License.SetLicense("Aspose.Total.lic")

                Workbook = New Aspose.Cells.Workbook

                Workbook.Worksheets.Clear()

                Workbook.Worksheets.Add(Aspose.Cells.SheetType.Worksheet)

                Worksheet = Workbook.Worksheets(0)

                XlsSaveOptions = New Aspose.Cells.XlsSaveOptions(Aspose.Cells.SaveFormat.Excel97To2003)

                Vendors = AdvantageFramework.Database.Procedures.Vendor.Load(DbContext).ToList.Select(Function(Entity) New AdvantageFramework.DTO.Vendor(Entity)).ToList

                For Each MediaBroadcastWorksheetMarket In MediaBroadcastWorksheetMarkets.OrderBy(Function(Entity) Entity.MarketDescription).ToList

                    If ViewModel Is Nothing Then

                        ViewModel = Controller.MarketDetails_Load(MediaBroadcastWorksheet.ID, MediaBroadcastWorksheetMarket.ID)

                        DataColumns = Report_GetAvailableColumns(ViewModel, WorksheetPrintOptions)

                        If Location IsNot Nothing Then

                            Report_AddLocationToWorksheet(Worksheet, Location, LocationLogo, ActiveRow)

                        End If

                        Report_AddWorksheetInfoHeader(Worksheet, ViewModel.Worksheet, ActiveRow, DataColumns.Count + 1)

                        ActiveRow = Worksheet.Cells.MaxRow + 2

                    Else

                        Controller.MarketDetails_SelectedWorksheetMarketChanged(ViewModel, MediaBroadcastWorksheetMarket.ID)

                        DataColumns = Report_GetAvailableColumns(ViewModel, WorksheetPrintOptions)

                    End If

                    Report_AddMarketToWorksheet(Worksheet, ActiveRow, Controller, ViewModel, DataColumns, Vendors)

                    ActiveRow = Worksheet.Cells.MaxRow + 2

                    If DataColumns.Any(Function(dc) (dc.ExtendedProperties.ContainsKey("PrimaryField") AndAlso dc.ExtendedProperties("PrimaryField") = True) OrElse (dc.ExtendedProperties.ContainsKey("SecondaryField") AndAlso dc.ExtendedProperties("SecondaryField") = True)) Then

                        ShowingRatings = True

                    End If

                Next

                'ratings copyright & disclaimer
                If ShowingRatings Then

                    If ViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                        DisclaimerStyle = Worksheet.Cells(ActiveRow, 0).GetStyle

                        With DisclaimerStyle

                            .IsTextWrapped = True
                            .Font.IsBold = True
                            .Font.Size = 7

                        End With

                        Worksheet.Cells(ActiveRow, 0).Value = "AUDIENCE ESTIMATES FOR NON-STANDARD DEMOS ARE DERIVED BY ADVANTAGE SOFTWARE BASED ON NIELSEN COPYRIGHTED AND PROPRIETARY RADIO AUDIENCE ESTIMATES AND ARE NOT ESTIMATES PRODUCED BY NIELSEN."
                        Worksheet.Cells(ActiveRow, 0).SetStyle(DisclaimerStyle)
                        Worksheet.Cells.Merge(ActiveRow, 0, 1, DataColumns.Count() + 1)
                        Worksheet.AutoFitRow(ActiveRow)
                        Worksheet.Cells.Rows(ActiveRow).Height = CInt(Worksheet.Cells.Rows(ActiveRow).Height + 5)

                        ActiveRow += 1

                        Worksheet.Cells(ActiveRow, 0).Value = AdvantageFramework.DTO.Media.ConstNielsenRadioFooter
                        Worksheet.Cells(ActiveRow, 0).SetStyle(DisclaimerStyle)
                        Worksheet.Cells.Merge(ActiveRow, 0, 1, DataColumns.Count() + 1)
                        Worksheet.AutoFitRow(ActiveRow)
                        Worksheet.Cells.Rows(ActiveRow).Height = CInt(Worksheet.Cells.Rows(ActiveRow).Height + 5)

                        ActiveRow += 1

                    ElseIf ViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then



                    End If

                    Worksheet.PageSetup.SetFooter(0, "&8Copyright © " & Now.Year.ToString & " The Nielsen Company")

                End If

                Try

                    Workbook.Save(FileName)
                    Generated = True

                Catch ex As Exception

                End Try

            End Using

            Report_Generate = Generated

        End Function
        Private Sub Report_AddLocationToWorksheetAsHeader(Worksheet As Aspose.Cells.Worksheet, Location As AdvantageFramework.Database.Entities.Location,
                                                          LocationLogo As AdvantageFramework.Database.Entities.LocationLogo)

            'objects
            Dim LocationString As Generic.List(Of String) = New Generic.List(Of String)
            Dim CityStateZipString As String = String.Empty
            Dim Image As System.Drawing.Image = Nothing
            'Dim FileStream As System.IO.FileStream = Nothing
            Dim BytesRead As Integer = 0
            Dim HeaderScript As String = String.Empty
            Dim IncludeImage As Boolean = False
            Dim IncludeLocationString As Boolean = False
            Dim HeaderSizeInch As Double = 0
            Dim ByteFile() As Byte = Nothing

            If Location IsNot Nothing Then

                If Location.LogoLocation <> "N" Then

                    If String.IsNullOrWhiteSpace(Location.LogoLandscapePath) = False Then

                        Try

                            Using FileStream = New IO.FileStream(Location.LogoLandscapePath, System.IO.FileMode.Open, System.IO.FileAccess.Read)

                                ReDim ByteFile(FileStream.Length)

                                BytesRead = FileStream.Read(ByteFile, 0, FileStream.Length)
                                Image = System.Drawing.Image.FromFile(Location.LogoLandscapePath)
                                Worksheet.PageSetup.SetHeaderPicture(0, ByteFile)
                                HeaderScript = "&G"
                                IncludeImage = True

                            End Using

                        Catch ex As Exception

                        End Try

                    ElseIf LocationLogo IsNot Nothing AndAlso LocationLogo.Image IsNot Nothing Then

                        Try

                            ByteFile = LocationLogo.Image

                            Using MemoryStream = New System.IO.MemoryStream(ByteFile)

                                Image = System.Drawing.Image.FromStream(MemoryStream)

                            End Using

                            Worksheet.PageSetup.SetHeaderPicture(0, ByteFile)
                            HeaderScript = "&G"
                            IncludeImage = True

                        Catch ex As Exception

                        End Try

                    End If

                End If

                If Location.PrintHeader.GetValueOrDefault(0) = 1 Then

                    If Location.PrintNameHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Name) Then

                            LocationString.Add(Location.Name)

                        End If

                    End If

                    If Location.PrintAddressHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Address) Then

                            LocationString.Add(Location.Address)

                        End If

                    End If

                    If Location.PrintAddress2Header.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Address2) Then

                            LocationString.Add(Location.Address2)

                        End If

                    End If


                    If Location.PrintCityHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.City) Then

                            CityStateZipString = Location.City

                        End If

                    End If

                    If Location.PrintStateHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.State) Then

                            If Not String.IsNullOrWhiteSpace(CityStateZipString) Then

                                CityStateZipString &= ", "

                            End If

                            CityStateZipString &= Location.State

                        End If

                    End If

                    If Location.PrintZipHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Zip) Then

                            If Not String.IsNullOrWhiteSpace(CityStateZipString) Then

                                CityStateZipString &= " "

                            End If

                            CityStateZipString &= Location.Zip

                        End If

                    End If

                    If Not String.IsNullOrEmpty(CityStateZipString) Then

                        LocationString.Add(CityStateZipString)

                    End If

                    If Location.PrintPhoneHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Phone) Then

                            LocationString.Add(Location.Phone)

                        End If

                    End If

                    If Location.PrintFaxHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Fax) Then

                            LocationString.Add(Location.Fax)

                        End If

                    End If

                    If Location.PrintEmailHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Email) Then

                            LocationString.Add(Location.Email)

                        End If

                    End If

                    If LocationString IsNot Nothing AndAlso LocationString.Count > 0 Then

                        IncludeLocationString = True

                        If Not String.IsNullOrWhiteSpace(HeaderScript) Then

                            HeaderScript = HeaderScript & vbCr

                        End If

                        HeaderScript = HeaderScript & String.Join(" • ", LocationString)

                    End If

                End If

                Worksheet.PageSetup.SetHeader(0, HeaderScript)

                If IncludeImage Then

                    HeaderSizeInch = Image.Height / Image.VerticalResolution

                End If

                If IncludeLocationString Then

                    HeaderSizeInch += 0.25

                End If

                If HeaderSizeInch > 0 Then

                    Worksheet.PageSetup.TopMarginInch = Worksheet.PageSetup.HeaderMarginInch + HeaderSizeInch

                End If

            End If

        End Sub
        Private Sub Report_AddLocationToWorksheet(Worksheet As Aspose.Cells.Worksheet, Location As AdvantageFramework.Database.Entities.Location,
                                                  LocationLogo As AdvantageFramework.Database.Entities.LocationLogo, ByRef Row As Integer)

            'objects
            Dim LocationString As Generic.List(Of String) = New Generic.List(Of String)
            Dim CityStateZipString As String = String.Empty
            Dim Picture As Aspose.Cells.Drawing.Picture = Nothing

            If Location IsNot Nothing Then

                If Location.LogoLocation <> "N" Then

                    If String.IsNullOrWhiteSpace(Location.LogoLandscapePath) = False Then

                        Try

                            Picture = Worksheet.Pictures(Worksheet.Pictures.Add(0, 0, Location.LogoLandscapePath))

                            Worksheet.Cells.Merge(0, 0, 1, 16384)
                            Worksheet.Cells.Rows(0).Height = Picture.Height
                            Row += 1

                            Worksheet.Cells.Rows(Row).Height = 5
                            Row += 1

                        Catch ex As Exception

                        End Try

                    ElseIf LocationLogo IsNot Nothing AndAlso LocationLogo.Image IsNot Nothing Then

                        Try

                            Using MemoryStream = New System.IO.MemoryStream(LocationLogo.Image)

                                Picture = Worksheet.Pictures(Worksheet.Pictures.Add(0, 0, MemoryStream))

                            End Using

                            Worksheet.Cells.Merge(0, 0, 1, 16384)
                            Worksheet.Cells.Rows(0).Height = Picture.Height
                            Row += 1

                            Worksheet.Cells.Rows(Row).Height = 5
                            Row += 1

                        Catch ex As Exception

                        End Try

                    End If

                End If

                If Location.PrintHeader.GetValueOrDefault(0) = 1 Then

                    If Location.PrintNameHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Name) Then

                            LocationString.Add(Location.Name)

                        End If

                    End If

                    If Location.PrintAddressHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Address) Then

                            LocationString.Add(Location.Address)

                        End If

                    End If

                    If Location.PrintAddress2Header.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Address2) Then

                            LocationString.Add(Location.Address2)

                        End If

                    End If


                    If Location.PrintCityHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.City) Then

                            CityStateZipString = Location.City

                        End If

                    End If

                    If Location.PrintStateHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.State) Then

                            If Not String.IsNullOrWhiteSpace(CityStateZipString) Then

                                CityStateZipString &= ", "

                            End If

                            CityStateZipString &= Location.State

                        End If

                    End If

                    If Location.PrintZipHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Zip) Then

                            If Not String.IsNullOrWhiteSpace(CityStateZipString) Then

                                CityStateZipString &= " "

                            End If

                            CityStateZipString &= Location.Zip

                        End If

                    End If

                    If Not String.IsNullOrEmpty(CityStateZipString) Then

                        LocationString.Add(CityStateZipString)

                    End If

                    If Location.PrintPhoneHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Phone) Then

                            LocationString.Add(Location.Phone)

                        End If

                    End If

                    If Location.PrintFaxHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Fax) Then

                            LocationString.Add(Location.Fax)

                        End If

                    End If

                    If Location.PrintEmailHeader.GetValueOrDefault(0) = 1 Then

                        If Not String.IsNullOrWhiteSpace(Location.Email) Then

                            LocationString.Add(Location.Email)

                        End If

                    End If

                    If LocationString IsNot Nothing AndAlso LocationString.Count > 0 Then

                        For LSIndex As Integer = 0 To LocationString.Count - 1

                            LocationString(LSIndex) = LocationString(LSIndex).Replace("&", "&amp;")

                        Next

                        Worksheet.Cells(Row, 0).HtmlString = String.Join(" &bull; ", LocationString)
                        Worksheet.Cells.Merge(Row, 0, 1, 16384)

                    End If

                    Row += 1

                    Worksheet.Cells.Rows(Row).Height = 25

                    Row += 1

                End If

            End If

        End Sub
        Private Sub Report_AddWorksheetInfoHeader(Worksheet As Aspose.Cells.Worksheet, MediaBroadcastWorksheet As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.Worksheet, Row As Integer, TotalColumns As Integer)

            Report_AddKeyValueHeader(Worksheet, Row + 0, "Client", MediaBroadcastWorksheet.ClientName, TotalColumns)
            Report_AddKeyValueHeader(Worksheet, Row + 1, "Division", MediaBroadcastWorksheet.DivisionName, TotalColumns)
            Report_AddKeyValueHeader(Worksheet, Row + 2, "Product", MediaBroadcastWorksheet.ProductName, TotalColumns)
            Report_AddKeyValueHeader(Worksheet, Row + 3, "Worksheet Name", MediaBroadcastWorksheet.Name, TotalColumns)
            Report_AddKeyValueHeader(Worksheet, Row + 4, "Campaign", MediaBroadcastWorksheet.CampaignName, TotalColumns)
            Report_AddKeyValueHeader(Worksheet, Row + 5, "Flight Dates", MediaBroadcastWorksheet.StartDate.ToShortDateString & " - " & MediaBroadcastWorksheet.EndDate.ToShortDateString, TotalColumns)

            If MediaBroadcastWorksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore Then

                Report_AddHeaderRow(Worksheet, Row + 6, "+ Reach and frequency measurements are constructed using Advantage’s proprietary methodology and are not formulated, provided or endorsed by the source data provider, Comscore.", TotalColumns)

                Report_AddSpacerRow(Worksheet, Row + 7)

                Row += 8

            Else

                Report_AddSpacerRow(Worksheet, Row + 6)

                Row += 7

            End If

        End Sub
        Private Sub Report_AddMarketToWorksheet(Worksheet As Aspose.Cells.Worksheet,
                                                RowStart As Integer,
                                                Controller As AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController,
                                                ViewModel As ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                DataColumns As Generic.List(Of System.Data.DataColumn),
                                                Vendors As Generic.List(Of AdvantageFramework.DTO.Vendor))

            'objects
            Dim ActiveRow As Integer = 0
            Dim DataView As System.Data.DataView = Nothing
            Dim ActiveColumn As Integer = 0
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim Cell As Aspose.Cells.Cell = Nothing
            Dim Style As Aspose.Cells.Style = Nothing
            Dim VendorDataRows As Generic.List(Of System.Data.DataRow) = Nothing
            Dim MergeColumnStart As Integer = -1
            Dim MarketRange As Aspose.Cells.Range = Nothing
            Dim PrimaryColumnStart As Integer = -1
            Dim PrimaryColumnEnd As Integer = -1
            Dim SecondaryColumnStart As Integer = -1
            Dim SecondaryColumnEnd As Integer = -1
            Dim MergeWithColumns As Integer = 0
            Dim CenterText As Boolean = False
            Dim Caption As String = String.Empty
            Dim ShowingSecondary As Boolean = False
            Dim ShowingPrimary As Boolean = False
            Dim VendorDataRow As System.Data.DataRow = Nothing
            Dim VendorTotalSpots As Integer = 0

            ActiveRow = RowStart

            If ViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                Report_AddKeyValueHeader(Worksheet, ActiveRow, "Market", ViewModel.SelectedWorksheetMarket.MarketDescription & If(ViewModel.SelectedWorksheetMarket.IsCable, " - CA", ""), DataColumns.Count + 1)

            ElseIf ViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                If ViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.HasValue AndAlso ViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value > 1 Then

                    Report_AddKeyValueHeader(Worksheet, ActiveRow, "Market", ViewModel.SelectedWorksheetMarket.MarketDescription & " - " & AdvantageFramework.EnumUtilities.GetNameAsWords(GetType(AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.RadioEthnicities), ViewModel.SelectedWorksheetMarket.MediaBroadcastWorksheetMarketRadioEthnicityID.Value), DataColumns.Count + 1)

                Else

                    Report_AddKeyValueHeader(Worksheet, ActiveRow, "Market", ViewModel.SelectedWorksheetMarket.MarketDescription, DataColumns.Count + 1)

                End If

            Else

                Report_AddKeyValueHeader(Worksheet, ActiveRow, "Market", ViewModel.SelectedWorksheetMarket.MarketDescription, DataColumns.Count + 1)

            End If

            ActiveRow += 1

            ShowingPrimary = ViewModel.Demos_ShowPrimaryDemos AndAlso DataColumns.Any(Function(dc) dc.ExtendedProperties.ContainsKey("PrimaryField") AndAlso dc.ExtendedProperties("PrimaryField") = True)
            ShowingSecondary = DataColumns.Any(Function(dc) dc.ExtendedProperties.ContainsKey("SecondaryField") AndAlso dc.ExtendedProperties("SecondaryField") = True) AndAlso ViewModel.SelectedWorksheetMarketSecondaryDemo IsNot Nothing

            If ShowingPrimary Then

                Try

                    PrimaryColumnStart = DataColumns.IndexOf(DataColumns.Where(Function(dc) dc.ExtendedProperties.ContainsKey("PrimaryField") AndAlso dc.ExtendedProperties("PrimaryField") = True).FirstOrDefault)

                Catch ex As Exception
                    PrimaryColumnStart = -1
                End Try

                Try

                    PrimaryColumnEnd = DataColumns.IndexOf(DataColumns.Where(Function(dc) dc.ExtendedProperties.ContainsKey("PrimaryField") AndAlso dc.ExtendedProperties("PrimaryField") = True).LastOrDefault)

                Catch ex As Exception
                    PrimaryColumnEnd = -1
                End Try

                If PrimaryColumnStart >= 0 AndAlso PrimaryColumnEnd >= 0 Then

                    PrimaryColumnStart += 1
                    PrimaryColumnEnd += 1

                    Report_AddColumnHeader(Worksheet, ActiveRow, PrimaryColumnStart, ViewModel.Worksheet.PrimaryMediaDemographicDescription, True, (PrimaryColumnEnd - PrimaryColumnStart) + 1)

                End If

            End If

            If ShowingSecondary Then

                Try

                    SecondaryColumnStart = DataColumns.IndexOf(DataColumns.Where(Function(dc) dc.ExtendedProperties.ContainsKey("SecondaryField") AndAlso dc.ExtendedProperties("SecondaryField") = True).FirstOrDefault)

                Catch ex As Exception
                    SecondaryColumnStart = -1
                End Try

                Try

                    SecondaryColumnEnd = DataColumns.IndexOf(DataColumns.Where(Function(dc) dc.ExtendedProperties.ContainsKey("SecondaryField") AndAlso dc.ExtendedProperties("SecondaryField") = True).LastOrDefault)

                Catch ex As Exception
                    SecondaryColumnEnd = -1
                End Try

                If SecondaryColumnStart >= 0 AndAlso SecondaryColumnEnd >= 0 Then

                    SecondaryColumnStart += 1
                    SecondaryColumnEnd += 1

                    If PrimaryColumnEnd < 0 Then

                        PrimaryColumnEnd = 0

                    End If

                    Report_AddColumnHeader(Worksheet, ActiveRow, SecondaryColumnStart, ViewModel.SelectedWorksheetMarketSecondaryDemo.MediaDemographicDescription, True, (SecondaryColumnEnd - SecondaryColumnStart) + 1)

                End If

            End If

            If ShowingPrimary OrElse ShowingSecondary Then

                Report_AddColumnHeader(Worksheet, ActiveRow, 0, "", False, If(ShowingPrimary, PrimaryColumnStart, SecondaryColumnStart))

                ActiveRow += 1

            End If

            Worksheet.Cells.Rows(ActiveRow).Height = 18 'column header row

            For Each DataColumn In DataColumns

                If DataColumns.IndexOf(DataColumn) = 0 Then

                    MergeWithColumns = 2
                    CenterText = True

                Else

                    MergeWithColumns = 0
                    CenterText = False

                End If

                If DataColumn.Caption = DataColumn.ColumnName Then

                    Caption = AdvantageFramework.StringUtilities.GetNameAsWords(DataColumn.Caption)

                Else

                    Caption = DataColumn.Caption

                End If

                Report_AddColumnHeader(Worksheet, ActiveRow, ActiveColumn, Caption, CenterText, MergeWithColumns)

                If MergeWithColumns > 1 Then

                    ActiveColumn += (MergeWithColumns - 1)

                End If

                ActiveColumn += 1

            Next

            ActiveRow += 1

            DataView = New System.Data.DataView(ViewModel.DataTable)

            For Each VendorCode In ViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).OrderBy(Function(dr) dr(MarketDetailsColumns.VendorCode.ToString)).Select(Function(dr) dr(MarketDetailsColumns.VendorCode.ToString)).Distinct.ToList

                VendorDataRow = ViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).FirstOrDefault(Function(DR) DR(MarketDetailsColumns.VendorCode.ToString) = VendorCode)

                DataView.RowFilter = "VendorCode = '" & VendorCode & "'"
                DataView.Sort = "LineNumber ASC"

                VendorDataRows = DataView.ToTable.Rows.OfType(Of System.Data.DataRow).ToList

                Try

                    VendorTotalSpots = VendorDataRows.Sum(Function(DataRow) DataRow(MarketDetailsColumns.TotalSpots.ToString))

                Catch ex As Exception
                    VendorTotalSpots = 0
                End Try

                If ViewModel.WorksheetPrintOptions.PrintRemoveLinesWithoutSpots = False OrElse
                        (ViewModel.WorksheetPrintOptions.PrintRemoveLinesWithoutSpots AndAlso VendorTotalSpots > 0) Then

                    Report_AddVendorRow(Worksheet, ActiveRow, Controller.MarketDetails_LoadVendorInfo(ViewModel, VendorDataRow(MarketDetailsColumns.VendorName.ToString)), DataColumns.Count + 1)

                    ActiveRow += 1

                    If ViewModel.WorksheetPrintOptions.PrintRemoveLinesWithoutSpots Then

                        VendorDataRows = VendorDataRows.Where(Function(DR) DR(MarketDetailsColumns.TotalSpots.ToString) > 0).ToList

                    End If

                    Worksheet.Cells.Merge(ActiveRow, 0, VendorDataRows.Count + 1, 1)

                    For Each VendorRow In VendorDataRows

                        If ViewModel.WorksheetPrintOptions.PrintRemoveLinesWithoutSpots = False OrElse
                                (ViewModel.WorksheetPrintOptions.PrintRemoveLinesWithoutSpots AndAlso VendorRow(MarketDetailsColumns.TotalSpots.ToString) > 0) Then

                            For Each DataColumn In DataColumns

                                ActiveColumn = DataColumns.IndexOf(DataColumn) + 1
                                Cell = Worksheet.Cells(ActiveRow, ActiveColumn)

                                Style = Cell.GetStyle

                                If Not IsDBNull(VendorRow(DataColumn.ColumnName)) Then

                                    If DataColumn.DataType = GetType(Boolean) Then

                                        Dim CheckboxIndex = Worksheet.CheckBoxes.Add(Cell.Row, Cell.Column, 15, 20)

                                        With Worksheet.CheckBoxes(CheckboxIndex)

                                            .Text = ""
                                            .IsLocked = True
                                            .Value = CBool(VendorRow(DataColumn.ColumnName))

                                        End With

                                    ElseIf DataColumn.ColumnName = MarketDetailsColumns.LineNumber.ToString Then

                                        Cell.Value = Report_PadStringValue(VendorRow(DataColumn.ColumnName), "0", 4, True)

                                    ElseIf DataColumn.ColumnName = MarketDetailsColumns.RevisionNumber.ToString Then

                                        Cell.Value = Report_PadStringValue(VendorRow(DataColumn.ColumnName), "0", 3, True)

                                    ElseIf DataColumn.ColumnName = MarketDetailsColumns.PrimaryAQH.ToString OrElse
                                   DataColumn.ColumnName = MarketDetailsColumns.SecondaryAQH.ToString OrElse
                                   DataColumn.ColumnName = MarketDetailsColumns.PrimaryCume.ToString OrElse
                                   DataColumn.ColumnName = MarketDetailsColumns.SecondaryCume.ToString Then

                                        Cell.PutValue(VendorRow(DataColumn.ColumnName) / 100)

                                    Else

                                        Cell.PutValue(VendorRow(DataColumn.ColumnName))

                                    End If

                                End If

                                With Style

                                    .Font.Size = 8

                                    If DataColumn.ExtendedProperties.ContainsKey("Format") Then

                                        .Custom = DataColumn.ExtendedProperties("Format")

                                    End If

                                End With

                                Cell.SetStyle(Style)


                            Next

                            ActiveRow += 1

                        End If

                    Next

                    MergeColumnStart = 0

                    ' Vendor Summary Row
                    For Each DataColumn In DataColumns

                        ActiveColumn = DataColumns.IndexOf(DataColumn) + 1
                        Cell = Worksheet.Cells(ActiveRow, ActiveColumn)

                        If DataColumn.ExtendedProperties.ContainsKey("Summary") AndAlso DataColumn.ExtendedProperties("Summary") = True Then

                            If DataColumn.ColumnName = MarketDetailsColumns.PrimaryCPP.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateCPPGroupTotal(ViewModel, VendorCode, True))

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryCPP.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateCPPGroupTotal(ViewModel, VendorCode, False))

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.PrimaryGrossImpressions.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateGrossImpressionsTotal(ViewModel, VendorCode, True))

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryGrossImpressions.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateGrossImpressionsTotal(ViewModel, VendorCode, False))

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.PrimaryReach.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateReachTotal(ViewModel, VendorCode, True, String.Empty))

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryReach.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateReachTotal(ViewModel, VendorCode, False, String.Empty))

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.PrimaryFrequency.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateFrequencyTotal(ViewModel, VendorCode, True, String.Empty))

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryFrequency.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateFrequencyTotal(ViewModel, VendorCode, False, String.Empty))

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.PrimaryCPM.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateCPMTotal(ViewModel, VendorCode, True))

                            ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryCPM.ToString Then

                                Cell.PutValue(Controller.MarketDetails_CalculateCPMTotal(ViewModel, VendorCode, False))

                            Else

                                Cell.PutValue(0)

                                For Each VendorDataRow In VendorDataRows.Where(Function(dr) Not IsDBNull(dr(DataColumn.ColumnName))).ToList

                                    Cell.PutValue(Convert.ChangeType(Cell.Value + Convert.ChangeType(VendorDataRow(DataColumn.ColumnName), DataColumn.DataType), DataColumn.DataType))

                                Next

                            End If

                            If MergeColumnStart > 0 Then

                                Worksheet.Cells.Merge(ActiveRow, MergeColumnStart, 1, (ActiveColumn - MergeColumnStart))
                                MergeColumnStart = 0

                            End If

                        ElseIf MergeColumnStart = 0 Then

                            MergeColumnStart = ActiveColumn

                        End If

                        Style = Cell.GetStyle

                        With Style

                            .Font.Size = 8
                            .Pattern = Aspose.Cells.BackgroundType.Solid
                            .ForegroundColor = Drawing.Color.FromArgb(211, 211, 211)

                            If ActiveColumn = 1 Then

                                .HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right
                                Cell.Value = "Station Totals:"

                            End If

                            If DataColumn.ExtendedProperties.ContainsKey("Format") Then

                                .Custom = DataColumn.ExtendedProperties("Format")

                            End If

                        End With

                        Cell.SetStyle(Style)

                    Next

                    ActiveRow += 1

                End If

            Next

            MergeColumnStart = 0

            'Market Summary Row
            For I = 0 To DataColumns.Count

                ActiveColumn = I
                Cell = Worksheet.Cells(ActiveRow, ActiveColumn)

                Style = Cell.GetStyle

                With Style

                    If ActiveColumn = 0 Then

                        .HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right
                        Cell.PutValue("Market Totals:")

                    End If

                    .Font.Size = 8
                    .Pattern = Aspose.Cells.BackgroundType.Solid
                    .ForegroundColor = Drawing.Color.FromArgb(169, 169, 169)

                End With

                If I > 0 Then

                    DataColumn = DataColumns(I - 1)

                    If DataColumn.ExtendedProperties.ContainsKey("Summary") AndAlso DataColumn.ExtendedProperties("Summary") = True Then

                        If DataColumn.ColumnName = MarketDetailsColumns.PrimaryCPP.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateCPPGroupTotal(ViewModel, String.Empty, True))

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryCPP.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateCPPGroupTotal(ViewModel, String.Empty, False))

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.PrimaryGrossImpressions.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateGrossImpressionsTotal(ViewModel, String.Empty, True))

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryGrossImpressions.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateGrossImpressionsTotal(ViewModel, String.Empty, False))

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.PrimaryReach.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateReachTotal(ViewModel, String.Empty, True, String.Empty))

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryReach.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateReachTotal(ViewModel, String.Empty, False, String.Empty))

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.PrimaryFrequency.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateFrequencyTotal(ViewModel, String.Empty, True, String.Empty))

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryFrequency.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateFrequencyTotal(ViewModel, String.Empty, False, String.Empty))

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.PrimaryCPM.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateCPMTotal(ViewModel, String.Empty, True))

                        ElseIf DataColumn.ColumnName = MarketDetailsColumns.SecondaryCPM.ToString Then

                            Cell.PutValue(Controller.MarketDetails_CalculateCPMTotal(ViewModel, String.Empty, False))

                        Else

                            Cell.PutValue(0)

                            For Each MarketRow In ViewModel.DataTable.Rows.OfType(Of System.Data.DataRow).Where(Function(dr) Not IsDBNull(dr(DataColumn.ColumnName))).ToList

                                Cell.PutValue(Convert.ChangeType(Cell.Value + Convert.ChangeType(MarketRow(DataColumn.ColumnName), DataColumn.DataType), DataColumn.DataType))

                            Next

                        End If

                        If MergeColumnStart >= 0 Then

                            Worksheet.Cells.Merge(ActiveRow, MergeColumnStart, 1, (ActiveColumn - MergeColumnStart))
                            MergeColumnStart = -1

                        End If

                    ElseIf MergeColumnStart < 0 Then

                        MergeColumnStart = ActiveColumn

                    End If

                    If DataColumn.ExtendedProperties.ContainsKey("Format") Then

                        Style.Custom = DataColumn.ExtendedProperties("Format")

                    End If

                End If

                Cell.SetStyle(Style)

            Next

            'add border to all cells
            MarketRange = Worksheet.Cells.CreateRange(RowStart + 1, 0, ActiveRow - RowStart, DataColumns.Count + 1)

            For RangeRow = 0 To MarketRange.RowCount - 1

                For RangeColumn = 0 To MarketRange.ColumnCount - 1

                    Cell = MarketRange(RangeRow, RangeColumn)

                    Style = Cell.GetStyle()

                    With Style

                        .SetBorder(Aspose.Cells.BorderType.BottomBorder, Aspose.Cells.CellBorderType.Thin, System.Drawing.Color.FromArgb(128, 128, 128))
                        .SetBorder(Aspose.Cells.BorderType.LeftBorder, Aspose.Cells.CellBorderType.Thin, System.Drawing.Color.FromArgb(128, 128, 128))
                        .SetBorder(Aspose.Cells.BorderType.RightBorder, Aspose.Cells.CellBorderType.Thin, System.Drawing.Color.FromArgb(128, 128, 128))
                        .SetBorder(Aspose.Cells.BorderType.TopBorder, Aspose.Cells.CellBorderType.Thin, System.Drawing.Color.FromArgb(128, 128, 128))

                    End With

                    Cell.SetStyle(Style)

                Next

            Next

            Worksheet.AutoFitColumns()

        End Sub
        Private Sub Report_AddHeaderRow(Worksheet As Aspose.Cells.Worksheet, Row As Integer, Value As String, TotalColumns As Integer)

            Worksheet.Cells(Row, 0).Value = Value
            Worksheet.Cells.Merge(Row, 0, 1, TotalColumns)

        End Sub
        Private Sub Report_AddKeyValueHeader(Worksheet As Aspose.Cells.Worksheet, Row As Integer, Key As String, Value As String, TotalColumns As Integer)

            Report_SetupExcelLabelCell(Worksheet.Cells(Row, 0), Key & ":")
            Worksheet.Cells.Merge(Row, 0, 1, 3)
            Worksheet.Cells(Row, 3).Value = Value
            Worksheet.Cells.Merge(Row, 3, 1, TotalColumns - 3)

        End Sub
        Private Sub Report_AddSpacerRow(Worksheet As Aspose.Cells.Worksheet, Row As Integer)

            Worksheet.Cells.Rows(Row).Height = 20

        End Sub
        Private Sub Report_AddColumnHeader(Worksheet As Aspose.Cells.Worksheet, Row As Integer, Column As Integer, Caption As String, CenterText As String, TotalColumns As Integer)

            'objects
            Dim Style As Aspose.Cells.Style = Nothing
            Dim Cell As Aspose.Cells.Cell = Nothing

            Cell = Worksheet.Cells(Row, Column)

            Cell.PutValue(Caption)

            Style = Cell.GetStyle

            With Style

                .Font.Size = 8
                .Pattern = Aspose.Cells.BackgroundType.Solid
                .ForegroundColor = Drawing.Color.FromArgb(211, 211, 211)

                If CenterText Then

                    .HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center

                End If

            End With

            Cell.SetStyle(Style)

            If TotalColumns > 1 Then

                Worksheet.Cells.Merge(Row, Column, 1, TotalColumns)

            End If

        End Sub
        Private Sub Report_AddVendorRow(Worksheet As Aspose.Cells.Worksheet, Row As Integer, VendorName As String, ColumnsToMerge As Integer)

            Dim Style As Aspose.Cells.Style = Nothing
            Dim Cell As Aspose.Cells.Cell = Nothing

            Cell = Worksheet.Cells(Row, 0)

            Cell.PutValue(VendorName)

            Style = Cell.GetStyle

            With Style

                .Font.Size = 8
                .Pattern = Aspose.Cells.BackgroundType.Solid
                .ForegroundColor = Drawing.Color.FromArgb(220, 220, 220)

            End With

            Cell.SetStyle(Style)
            Worksheet.Cells.Merge(Row, 0, 1, ColumnsToMerge)

        End Sub
        Private Sub Report_AddVendorSummaryRow(Worksheet As Aspose.Cells.Worksheet, Row As Integer, VendorDataRows As Generic.List(Of System.Data.DataRow))

            Dim Style As Aspose.Cells.Style = Nothing
            Dim Cell As Aspose.Cells.Cell = Nothing

            Cell = Worksheet.Cells(Row, 1)

            Cell.PutValue("")

            Style = Cell.GetStyle

            With Style

                .Font.Size = 8
                .Pattern = Aspose.Cells.BackgroundType.Solid
                .ForegroundColor = Drawing.Color.FromArgb(211, 211, 211)

            End With

            Cell.SetStyle(Style)

            Worksheet.Cells.Merge(Row, 0, 1, 10)

        End Sub
        Private Sub Report_AddMarketSummaryRow(Worksheet As Aspose.Cells.Worksheet, Row As Integer)

            Dim Style As Aspose.Cells.Style = Nothing
            Dim Cell As Aspose.Cells.Cell = Nothing

            Cell = Worksheet.Cells(Row, 0)

            Cell.PutValue("Market Totals:")

            Style = Cell.GetStyle

            With Style

                .Font.Size = 8
                .Pattern = Aspose.Cells.BackgroundType.Solid
                .ForegroundColor = Drawing.Color.FromArgb(169, 169, 169)

            End With

            Cell.SetStyle(Style)

            Worksheet.Cells.Merge(Row, 0, 1, 10)

        End Sub
        Private Function Report_FormatBooleanValue(Bool As Object) As String

            'objects
            Dim Val As String = String.Empty

            Try

                If Not IsDBNull(Bool) Then

                    Val = If(CBool(Bool), "Yes", "No")

                End If

            Catch ex As Exception

            End Try

            Report_FormatBooleanValue = Val

        End Function
        Private Function Report_PadStringValue(Str As Object, PadWithCharacter As String, FieldSize As Integer, Prefix As Boolean) As String

            'objects
            Dim Val As String = String.Empty

            Try

                If Not IsDBNull(Str) Then

                    Val = AdvantageFramework.StringUtilities.PadWithCharacter(Str, FieldSize, PadWithCharacter, Prefix)

                End If

            Catch ex As Exception

            End Try

            Report_PadStringValue = Val

        End Function
        Private Sub Report_SetupExcelLabelCell(Cell As Aspose.Cells.Cell, Text As String)

            Dim Style As Aspose.Cells.Style = Nothing

            Cell.PutValue(Text)

            Style = Cell.GetStyle

            With Style

                .Font.IsBold = True
                .HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right

            End With

            Cell.SetStyle(Style)

        End Sub
        Private Function Report_GetAvailableColumns(ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                    WorksheetPrintOptions As DTO.Media.MediaBroadcastWorksheet.WorksheetPrintOptions) As Generic.List(Of System.Data.DataColumn)

            'objects
            Dim Columns As Generic.List(Of System.Data.DataColumn) = Nothing
            Dim CurrentColumns As Generic.List(Of System.Data.DataColumn) = Nothing
            Dim DateCounter As Integer = 0
            Dim DataColumn As System.Data.DataColumn = Nothing

            Columns = New Generic.List(Of System.Data.DataColumn)

            CurrentColumns = ViewModel.DataTable.Columns.OfType(Of System.Data.DataColumn).ToList

            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.OnHold.ToString, WorksheetPrintOptions.PrintOnHold, True, True, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.LineNumber.ToString, WorksheetPrintOptions.PrintLineNumber, True, True, False, Nothing, False, False)
            'Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.RevisionNumber.ToString, WorksheetPrintOptions.PrintRevisionNumber, True, True, False, Nothing)
            'Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.VendorName.ToString, WorksheetPrintOptions.PrintVendorName, True, True, False, Nothing)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.CableNetworkStationCode.ToString, WorksheetPrintOptions.PrintCableNetworkStationCode, True, False, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.Daypart.ToString, WorksheetPrintOptions.PrintDaypart, True, True, False, Nothing, False, False)
            'Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.Product.ToString, WorksheetPrintOptions.PrintProduct, True, True, False, Nothing)
            'Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.Piggyback.ToString, WorksheetPrintOptions.PrintPiggyback, True, True, False, Nothing)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.Length.ToString, WorksheetPrintOptions.PrintLength, True, True, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.Days.ToString, WorksheetPrintOptions.PrintDays, True, True, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.StartTime.ToString, WorksheetPrintOptions.PrintStartTime, True, True, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.EndTime.ToString, WorksheetPrintOptions.PrintEndTime, True, True, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.Program.ToString, WorksheetPrintOptions.PrintProgram, True, False, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.Comments.ToString, WorksheetPrintOptions.PrintComments, True, True, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.Bookend.ToString, WorksheetPrintOptions.PrintBookend, True, False, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.ValueAdded.ToString, WorksheetPrintOptions.PrintValueAdded, True, True, False, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.DefaultRate.ToString, WorksheetPrintOptions.PrintDefaultRate, True, True, False, "$#,##0.00", False, False)

            For DateCounter = 1 To ViewModel.DetailDates.Count + 1

                Report_CheckAllowDataColumn(Columns, ViewModel, "Date" & DateCounter.ToString, True, True, True, True, Nothing, False, False)

            Next

            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.TotalSpots.ToString, WorksheetPrintOptions.PrintTotalSpots, True, True, True, Nothing, False, False)
            Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.TotalDollars.ToString, WorksheetPrintOptions.PrintTotalDollars, True, True, True, "$#,##0.00", False, False)

            If ViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryRating.ToString, WorksheetPrintOptions.PrintPrimaryRating, True, False, False, "#,##0.00", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryShare.ToString, WorksheetPrintOptions.PrintPrimaryShare, True, False, False, "#,##0.00", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryHPUT.ToString, WorksheetPrintOptions.PrintPrimaryHPUT, True, False, False, "#,##0.00", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryCPP.ToString, WorksheetPrintOptions.PrintPrimaryCPP, True, False, True, "$#,##0.00", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryGRP.ToString, WorksheetPrintOptions.PrintPrimaryGRP, True, False, True, "#,##0.00", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryReach.ToString, WorksheetPrintOptions.PrintPrimaryReach, True, False, True, "#,##0.0 %", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryFrequency.ToString, WorksheetPrintOptions.PrintPrimaryReach, True, False, True, "#,##0.0", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryCumeImpressions.ToString, WorksheetPrintOptions.PrintPrimaryTVCume, True, False, False, "#,##0", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryImpressions.ToString, WorksheetPrintOptions.PrintPrimaryTVImpressions, True, False, False, "#,##0", True, False)
                'Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryImpressions.ToString, WorksheetPrintOptions.PrintPrimaryImpressions, True, False, True, Nothing)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryGrossImpressions.ToString, WorksheetPrintOptions.PrintPrimaryGrossImpressions, True, False, True, "#,##0", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryCPM.ToString, WorksheetPrintOptions.PrintPrimaryCPM, True, True, True, "$#,##0.00", True, False)

                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryRating.ToString, WorksheetPrintOptions.PrintSecondaryRating, True, False, False, "#,##0.00", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryShare.ToString, WorksheetPrintOptions.PrintSecondaryShare, True, False, False, "#,##0.00", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryHPUT.ToString, WorksheetPrintOptions.PrintSecondaryHPUT, True, False, False, "#,##0.00", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryCPP.ToString, WorksheetPrintOptions.PrintSecondaryCPP, True, False, True, "$#,##0.00", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryGRP.ToString, WorksheetPrintOptions.PrintSecondaryGRP, True, False, True, "#,##0.00", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryReach.ToString, WorksheetPrintOptions.PrintSecondaryReach, True, False, True, "#,##0.0 %", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryFrequency.ToString, WorksheetPrintOptions.PrintSecondaryReach, True, False, True, "#,##0.0", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryCumeImpressions.ToString, WorksheetPrintOptions.PrintSecondaryTVCume, True, False, False, "#,##0", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryImpressions.ToString, WorksheetPrintOptions.PrintSecondaryTVImpressions, True, False, False, "#,##0", False, True)
                'Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryImpressions.ToString, WorksheetPrintOptions.PrintSecondaryImpressions, True, False, True, Nothing)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryGrossImpressions.ToString, WorksheetPrintOptions.PrintSecondaryGrossImpressions, True, False, True, "#,##0", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryCPM.ToString, WorksheetPrintOptions.PrintSecondaryCPM, True, True, True, "$#,##0.00", False, True)

            ElseIf ViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio Then

                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryAQHRating.ToString, WorksheetPrintOptions.PrintPrimaryAQHRating, False, True, False, "#,##0.00", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryCPP.ToString, WorksheetPrintOptions.PrintPrimaryCPP, False, True, True, "$#,##0.00", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryGRP.ToString, WorksheetPrintOptions.PrintPrimaryGRP, False, True, True, "#,##0.00", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryAQH.ToString, WorksheetPrintOptions.PrintPrimaryAQH, False, True, False, "#,##0", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryCumeRating.ToString, WorksheetPrintOptions.PrintPrimaryCumeRating, False, True, False, "#,##0.00", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryCume.ToString, WorksheetPrintOptions.PrintPrimaryCume, False, True, False, "#,##0", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryReach.ToString, WorksheetPrintOptions.PrintPrimaryReach, False, True, True, "#,##0.0 %", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryFrequency.ToString, WorksheetPrintOptions.PrintPrimaryReach, False, True, True, "#,##0.0", True, False)
                'Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryImpressions.ToString, WorksheetPrintOptions.PrintPrimaryImpressions, True, False, True, Nothing)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryGrossImpressions.ToString, WorksheetPrintOptions.PrintPrimaryGrossImpressions, False, True, True, "#,##0", True, False)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.PrimaryCPM.ToString, WorksheetPrintOptions.PrintPrimaryCPM, True, True, True, "$#,##0.00", True, False)

                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryAQHRating.ToString, WorksheetPrintOptions.PrintSecondaryAQHRating, False, True, False, "#,##0.00", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryCPP.ToString, WorksheetPrintOptions.PrintSecondaryCPP, False, True, True, "$#,##0.00", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryGRP.ToString, WorksheetPrintOptions.PrintSecondaryGRP, False, True, True, "#,##0.00", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryAQH.ToString, WorksheetPrintOptions.PrintSecondaryAQH, False, True, False, "#,##0", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryCumeRating.ToString, WorksheetPrintOptions.PrintSecondaryCumeRating, False, True, False, "#,##0.00", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryCume.ToString, WorksheetPrintOptions.PrintSecondaryCume, False, True, False, "#,##0", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryReach.ToString, WorksheetPrintOptions.PrintSecondaryReach, False, True, True, "#,##0.0 %", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryFrequency.ToString, WorksheetPrintOptions.PrintSecondaryReach, False, True, True, "#,##0.0", False, True)
                'Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryImpressions.ToString, WorksheetPrintOptions.PrintSecondaryImpressions, True, False, True, Nothing)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryGrossImpressions.ToString, WorksheetPrintOptions.PrintSecondaryGrossImpressions, False, True, True, "#,##0", False, True)
                Report_CheckAllowDataColumn(Columns, ViewModel, MarketDetailsColumns.SecondaryCPM.ToString, WorksheetPrintOptions.PrintSecondaryCPM, True, True, True, "$#,##0.00", False, True)

            End If

            Report_GetAvailableColumns = Columns

        End Function
        Private Sub Report_CheckAllowDataColumn(ByRef Columns As Generic.List(Of System.Data.DataColumn),
                                                ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketDetailsViewModel,
                                                FieldName As String, PrintFieldSetting As Boolean, SpotTVAllowed As Boolean, SpotRadioAllowed As Boolean,
                                                IsSummaryField As Boolean, FormatString As String, PrimaryField As Boolean, SecondaryField As Boolean)

            'objects
            Dim DataColumn As System.Data.DataColumn = Nothing
            Dim CurrentColumns As Generic.List(Of System.Data.DataColumn) = Nothing

            If PrintFieldSetting = False Then

                Exit Sub

            End If

            If ViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotRadio AndAlso Not SpotRadioAllowed Then

                Exit Sub

            End If

            If ViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV AndAlso Not SpotTVAllowed Then

                Exit Sub

            End If

            If SecondaryField AndAlso ViewModel.HasASelectedWorksheetSecondaryDemo = False Then

                Exit Sub

            End If

            CurrentColumns = ViewModel.DataTable.Columns.OfType(Of System.Data.DataColumn).ToList

            If CurrentColumns.Any(Function(dc) dc.ColumnName = FieldName) Then

                DataColumn = CurrentColumns.Where(Function(dc) dc.ColumnName = FieldName).FirstOrDefault

                If DataColumn.ExtendedProperties.ContainsKey("PrimaryField") = False Then

                    DataColumn.ExtendedProperties.Add("PrimaryField", Nothing)

                End If

                DataColumn.ExtendedProperties("PrimaryField") = PrimaryField

                If DataColumn.ExtendedProperties.ContainsKey("SecondaryField") = False Then

                    DataColumn.ExtendedProperties.Add("SecondaryField", Nothing)

                End If

                DataColumn.ExtendedProperties("SecondaryField") = SecondaryField

                If DataColumn.ExtendedProperties.ContainsKey("Summary") = False Then

                    DataColumn.ExtendedProperties.Add("Summary", Nothing)

                End If

                DataColumn.ExtendedProperties("Summary") = IsSummaryField

                If DataColumn.ExtendedProperties.ContainsKey("Format") = False Then

                    DataColumn.ExtendedProperties.Add("Format", Nothing)

                End If

                DataColumn.ExtendedProperties("Format") = FormatString

                If ViewModel.Worksheet.MediaType = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.MediaTypes.SpotTV Then

                    If (DataColumn.ColumnName = MarketDetailsColumns.PrimaryCume.ToString OrElse
                            DataColumn.ColumnName = MarketDetailsColumns.SecondaryCume.ToString) Then

                        DataColumn.Caption = "Cume"

                    End If

                    If ViewModel.Worksheet.RatingsServiceID = AdvantageFramework.Nielsen.Database.Entities.RatingsServiceID.Comscore Then

                        If (DataColumn.ColumnName = MarketDetailsColumns.PrimaryReach.ToString OrElse
                                DataColumn.ColumnName = MarketDetailsColumns.SecondaryReach.ToString) Then

                            DataColumn.Caption = "Reach +"

                        ElseIf (DataColumn.ColumnName = MarketDetailsColumns.PrimaryFrequency.ToString OrElse
                                DataColumn.ColumnName = MarketDetailsColumns.SecondaryFrequency.ToString) Then

                            DataColumn.Caption = "Frequency +"

                        End If

                    End If

                End If

                If Columns.Any(Function(c) c.ColumnName = DataColumn.ColumnName) = False Then

                    Columns.Add(DataColumn)

                End If

            End If

        End Sub

#End Region

#Region "  Buyer "

        Public Function Buyer_Load(FindBuyerEmployeeCode As String) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketBuyerViewModel

            'objects
            Dim ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketBuyerViewModel = Nothing
            Dim MissingBuyers As IEnumerable(Of String) = Nothing

            ViewModel = New ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketBuyerViewModel

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                ViewModel.FindBuyerEmployeeCode = FindBuyerEmployeeCode

                ViewModel.MediaBuyerEmployeeCodes = AdvantageFramework.Database.Procedures.MediaBuyer.Load(DbContext).Include("Employee").ToList.Select(Function(Entity) New AdvantageFramework.DTO.Media.BuyerEmployee(Entity)).ToList

                MissingBuyers = DbContext.Database.SqlQuery(Of String)(String.Format("select DISTINCT BUYER_EMP_CODE from dbo.MEDIA_BROADCAST_WORKSHEET_MARKET WHERE BUYER_EMP_CODE Not IN (select EMP_CODE from dbo.MEDIA_BUYER)")).ToArray

                If MissingBuyers IsNot Nothing AndAlso MissingBuyers.Count > 0 Then

                    For Each Emp In (From Entity In AdvantageFramework.Database.Procedures.EmployeeView.Load(DbContext)
                                     Where MissingBuyers.Contains(Entity.Code)
                                     Select Entity).ToList

                        ViewModel.MissingMediaBuyerEmployeeCodes.Add(New AdvantageFramework.DTO.Media.BuyerEmployee(Emp))

                    Next

                End If

            End Using

            Buyer_Load = ViewModel

        End Function
        Public Function Buyer_Replace(ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketBuyerViewModel) As Boolean

            Dim Replaced As Boolean = True

            Try

                Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                    DbContext.Database.ExecuteSqlCommand(String.Format("exec advsp_media_broadcast_worksheet_market_replace_buyer '{0}', '{1}'", ViewModel.FindBuyerEmployeeCode, ViewModel.ReplaceBuyerEmployeeCode))

                End Using

            Catch ex As Exception
                Replaced = False
            End Try

            Buyer_Replace = Replaced

        End Function

#End Region

#Region "  eTAM Export "

        Public Function ETAMExport_Load(MediaBroadcastWorksheetID As Integer) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheetETAMExportViewModel

            'objects
            Dim ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheetETAMExportViewModel = Nothing
            Dim MediaBroadcastWorksheet As AdvantageFramework.Database.Entities.MediaBroadcastWorksheet = Nothing
            Dim UserSetting As AdvantageFramework.Security.Database.Entities.UserSetting = Nothing

            ViewModel = New ViewModels.Media.MediaBroadcastWorksheetETAMExportViewModel()

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                ViewModel.StationOrderNumbers = DbContext.Database.SqlQuery(Of AdvantageFramework.DTO.Media.SpotTVPuertoRico.StationOrderNumber)(String.Format("exec advsp_media_broadcast_worksheet_etam_export_get_station_ordernumbers {0}", MediaBroadcastWorksheetID)).ToList

                If ViewModel.StationOrderNumbers.Count = 0 Then

                    ViewModel.HasExportableDetail = False

                Else

                    ViewModel.HasExportableDetail = True

                    MediaBroadcastWorksheet = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheet.LoadByMediaBroadcastWorksheetID(DbContext, MediaBroadcastWorksheetID)

                    If MediaBroadcastWorksheet IsNot Nothing Then

                        ViewModel.StartDate = MediaBroadcastWorksheet.StartDate
                        ViewModel.EndDate = MediaBroadcastWorksheet.EndDate
                        ViewModel.Filename = MediaBroadcastWorksheet.Name

                        For Each [Char] In System.IO.Path.GetInvalidFileNameChars

                            ViewModel.Filename = ViewModel.Filename.Replace([Char].ToString, "")

                        Next

                        ViewModel.Stations.AddRange((From NPRStation In DbContext.GetQuery(Of Database.Entities.NPRStation).ToList
                                                     Where NPRStation.ETAMCrossReference IsNot Nothing AndAlso
                                                           ViewModel.StationOrderNumbers.Select(Function(S) S.NPRStationID).Contains(NPRStation.ID)
                                                     Select New AdvantageFramework.DTO.Media.SpotTVPuertoRico.Station(NPRStation)).ToList)

                    End If

                    Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                        UserSetting = AdvantageFramework.Security.Database.Procedures.UserSetting.LoadByUserIDAndSettingCode(SecurityDbContext, Me.Session.User.ID, AdvantageFramework.Security.UserSettings.PuertoRicoETAMfolder.ToString)

                        If UserSetting IsNot Nothing AndAlso String.IsNullOrWhiteSpace(UserSetting.StringValue) = False Then

                            ViewModel.OutputFolder = UserSetting.StringValue

                        End If

                    End Using

                End If

            End Using

            ETAMExport_Load = ViewModel

        End Function
        Public Function ETAMExport_Export(ViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheetETAMExportViewModel, ByRef OutputFilename As String) As Boolean

            Dim Exported As Boolean = False
            Dim UserSetting As AdvantageFramework.Security.Database.Entities.UserSetting = Nothing
            Dim StreamWriter As IO.StreamWriter = Nothing
            Dim Header As String = Nothing
            Dim Data As String = Nothing

            Try

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    UserSetting = AdvantageFramework.Security.Database.Procedures.UserSetting.LoadByUserIDAndSettingCode(SecurityDbContext, Me.Session.User.ID, AdvantageFramework.Security.UserSettings.PuertoRicoETAMfolder.ToString)

                    If UserSetting IsNot Nothing Then

                        UserSetting.StringValue = ViewModel.OutputFolder

                        AdvantageFramework.Security.Database.Procedures.UserSetting.Update(SecurityDbContext, UserSetting)

                    ElseIf UserSetting Is Nothing Then

                        AdvantageFramework.Security.Database.Procedures.UserSetting.Insert(SecurityDbContext, Me.Session.User.ID, AdvantageFramework.Security.UserSettings.PuertoRicoETAMfolder.ToString, ViewModel.OutputFolder, Nothing, Nothing, UserSetting)

                    End If

                End Using

                Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                    Header = "# Station" & vbTab & "Date" & vbTab & "Start time" & vbTab & "Duration" & vbTab & "Cost" & vbTab & "Description"

                    If ViewModel.Filename.ToUpper.EndsWith(".TSV") = False Then

                        ViewModel.Filename += ".tsv"

                    End If

                    OutputFilename = System.IO.Path.Combine(ViewModel.OutputFolder, ViewModel.Filename)

                    StreamWriter = My.Computer.FileSystem.OpenTextFileWriter(System.IO.Path.Combine(ViewModel.OutputFolder, ViewModel.Filename), False)
                    StreamWriter.WriteLine(Header)

                    For Each Station In ViewModel.SelectedStations

                        For Each OrderNbr In (From Entity In ViewModel.StationOrderNumbers
                                              Where Entity.NPRStationID = Station.ID
                                              Select Entity.OrderNumber).ToList

                            For Each AccountPayableTVBroadcastDetail In (From Entity In AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Load(DbContext)
                                                                         Where Entity.OrderNumber = OrderNbr
                                                                         Select Entity).ToList

                                If AccountPayableTVBroadcastDetail.TimeOfDay.Hours = 0 OrElse AccountPayableTVBroadcastDetail.TimeOfDay.Hours = 1 Then

                                    Data = Station.ETAMCrossReference.Value.ToString & vbTab & AccountPayableTVBroadcastDetail.RunDate.ToString("yyyyMMdd") & vbTab &
                                        (AccountPayableTVBroadcastDetail.TimeOfDay.Hours + 24).ToString & AccountPayableTVBroadcastDetail.TimeOfDay.Minutes.ToString.PadLeft(2, "0") & "00" & vbTab &
                                        AccountPayableTVBroadcastDetail.Length.ToString & vbTab & CInt(AccountPayableTVBroadcastDetail.GrossRate) & vbTab & " "

                                Else

                                    Data = Station.ETAMCrossReference.ToString & vbTab & AccountPayableTVBroadcastDetail.RunDate.ToString("yyyyMMdd") & vbTab &
                                        AccountPayableTVBroadcastDetail.TimeOfDay.Hours.ToString.PadLeft(2, "0") & AccountPayableTVBroadcastDetail.TimeOfDay.Minutes.ToString.PadLeft(2, "0") & "00" & vbTab &
                                        AccountPayableTVBroadcastDetail.Length.ToString & vbTab & CInt(AccountPayableTVBroadcastDetail.GrossRate) & vbTab & " "

                                End If

                                StreamWriter.WriteLine(Data)

                            Next

                        Next

                    Next

                    StreamWriter.Close()

                End Using

                Exported = True

            Catch ex As Exception

            End Try

            ETAMExport_Export = Exported

        End Function

#End Region

#Region " Market Books Edit "

        Public Function MarketBooksEdit_Load(MediaBroadcastWorksheetID As Integer, MediaBroadcastWorksheetMarketID As Integer, WorksheetMarket As AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.WorksheetMarket) As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel

            'objects
            Dim MediaBroadcastWorksheetMarketEditViewModel As AdvantageFramework.ViewModels.Media.MediaBroadcastWorksheet.MediaBroadcastWorksheetMarketEditViewModel = Nothing

            MediaBroadcastWorksheetMarketEditViewModel = MarketEdit_Load(MediaBroadcastWorksheetID)

            MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Clear()
            MediaBroadcastWorksheetMarketEditViewModel.WorksheetMarkets.Add(WorksheetMarket)

            MarketBooksEdit_Load = MediaBroadcastWorksheetMarketEditViewModel

        End Function

#End Region

#Region " Arianna Export "

        Public Function AriannaExport_GexExportFolder() As String

            Dim UserSetting As AdvantageFramework.Security.Database.Entities.UserSetting = Nothing
            Dim Folder As String = Nothing

            Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                UserSetting = AdvantageFramework.Security.Database.Procedures.UserSetting.LoadByUserIDAndSettingCode(SecurityDbContext, Me.Session.User.ID, AdvantageFramework.Security.UserSettings.PuertoRicoAriannaFolder.ToString)

                If UserSetting IsNot Nothing Then

                    Folder = UserSetting.StringValue

                End If

            End Using

            AriannaExport_GexExportFolder = Folder

        End Function
        Public Function AriannaExport_Export(WorksheetMarketID As Integer, OutputFolder As String, ByRef OutputFilename As String) As Boolean

            Dim Exported As Boolean = False
            Dim UserSetting As AdvantageFramework.Security.Database.Entities.UserSetting = Nothing
            Dim MediaBroadcastWorksheetMarketDetailDates As Generic.List(Of AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarketDetailDate) = Nothing
            Dim NPRStations As Generic.List(Of AdvantageFramework.Database.Entities.NPRStation) = Nothing
            Dim NPRStation As AdvantageFramework.Database.Entities.NPRStation = Nothing
            Dim StreamWriter As IO.StreamWriter = Nothing
            Dim SpotCounter As Integer = 1
            Dim OutputDate As Date = Nothing

            Try

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Me.Session.ConnectionString, Me.Session.UserCode)

                    UserSetting = AdvantageFramework.Security.Database.Procedures.UserSetting.LoadByUserIDAndSettingCode(SecurityDbContext, Me.Session.User.ID, AdvantageFramework.Security.UserSettings.PuertoRicoAriannaFolder.ToString)

                    If UserSetting IsNot Nothing AndAlso UserSetting.StringValue <> OutputFolder Then

                        UserSetting.StringValue = OutputFolder

                        AdvantageFramework.Security.Database.Procedures.UserSetting.Update(SecurityDbContext, UserSetting)

                    ElseIf UserSetting Is Nothing Then

                        AdvantageFramework.Security.Database.Procedures.UserSetting.Insert(SecurityDbContext, Me.Session.User.ID, AdvantageFramework.Security.UserSettings.PuertoRicoAriannaFolder.ToString, OutputFolder, Nothing, Nothing, UserSetting)

                    End If

                End Using

                Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                    NPRStations = (From Entity In DbContext.GetQuery(Of Database.Entities.NPRStation)
                                   Where Entity.AriannaChannelID IsNot Nothing
                                   Select Entity).ToList

                    MediaBroadcastWorksheetMarketDetailDates = (From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetailDate.LoadByMediaBroadcastWorksheetMarketID(DbContext, WorksheetMarketID).Include("MediaBroadcastWorksheetMarketDetail.Vendor")
                                                                Where Entity.MediaBroadcastWorksheetMarketDetail.Vendor.NPRStationID.HasValue AndAlso
                                                                      Entity.Spots <> 0
                                                                Select Entity).ToList

                    If MediaBroadcastWorksheetMarketDetailDates IsNot Nothing AndAlso MediaBroadcastWorksheetMarketDetailDates.Count > 0 Then

                        OutputFilename = MediaBroadcastWorksheetMarketDetailDates.First.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.Name & "_" &
                                MediaBroadcastWorksheetMarketDetailDates.First.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarket.ID & ".sch"

                        OutputFilename = System.IO.Path.Combine(OutputFolder, OutputFilename)

                        StreamWriter = My.Computer.FileSystem.OpenTextFileWriter(System.IO.Path.Combine(OutputFolder, OutputFilename), False)
                        StreamWriter.WriteLine("<START>")
                        StreamWriter.WriteLine("<TYPE>Type;")
                        StreamWriter.WriteLine("<VER>Version;")
                        StreamWriter.WriteLine("<AGENCY>DLC;")
                        StreamWriter.WriteLine("<CLIENT>" & MediaBroadcastWorksheetMarketDetailDates.First.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.Client.Name & ";")
                        StreamWriter.WriteLine("<SCHED>Schedule")

                        If MediaBroadcastWorksheetMarketDetailDates.First.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.Campaign IsNot Nothing Then

                            StreamWriter.WriteLine("<DESC>" & MediaBroadcastWorksheetMarketDetailDates.First.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.Campaign.Name & "-" &
                                                   MediaBroadcastWorksheetMarketDetailDates.First.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.Product.Name & ";")

                        Else

                            StreamWriter.WriteLine("<DESC>" & MediaBroadcastWorksheetMarketDetailDates.First.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarket.MediaBroadcastWorksheet.Product.Name & ";")

                        End If

                        StreamWriter.WriteLine("<MARKETS>" & MediaBroadcastWorksheetMarketDetailDates.First.MediaBroadcastWorksheetMarketDetail.MediaBroadcastWorksheetMarket.Market.Description & ";")
                        StreamWriter.WriteLine("<DATA>")
                        StreamWriter.WriteLine("<CUMES>")
                        StreamWriter.WriteLine("<DEMOS>")
                        StreamWriter.WriteLine("<O/NIGHT>")
                        StreamWriter.WriteLine("<SUMMARY-ONLY>")

                        StreamWriter.WriteLine("<SPOTS>" & MediaBroadcastWorksheetMarketDetailDates.Sum(Function(DD) DD.Spots).ToString & ";")

                        For Each MediaBroadcastWorksheetMarketDetailDate In MediaBroadcastWorksheetMarketDetailDates

                            If NPRStations.Any(Function(S) S.ID = MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Vendor.NPRStationID.Value) Then

                                NPRStation = NPRStations.Where(Function(S) S.ID = MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Vendor.NPRStationID.Value).First

                                For OutputRow As Integer = 1 To MediaBroadcastWorksheetMarketDetailDate.Spots

                                    If MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Monday Then

                                        OutputDate = MediaBroadcastWorksheetMarketDetailDate.Date

                                    ElseIf MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Tuesday Then

                                        OutputDate = MediaBroadcastWorksheetMarketDetailDate.Date.AddDays(1)

                                    ElseIf MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Wednesday Then

                                        OutputDate = MediaBroadcastWorksheetMarketDetailDate.Date.AddDays(2)

                                    ElseIf MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Thursday Then

                                        OutputDate = MediaBroadcastWorksheetMarketDetailDate.Date.AddDays(3)

                                    ElseIf MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Friday Then

                                        OutputDate = MediaBroadcastWorksheetMarketDetailDate.Date.AddDays(4)

                                    ElseIf MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Saturday Then

                                        OutputDate = MediaBroadcastWorksheetMarketDetailDate.Date.AddDays(5)

                                    ElseIf MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Sunday Then

                                        OutputDate = MediaBroadcastWorksheetMarketDetailDate.Date.AddDays(6)

                                    End If

                                    StreamWriter.WriteLine(SpotCounter & ";" & OutputDate.ToString("yyyyMMdd") & ";" & MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.StartHour.ToString.PadLeft(4, "0") & ";" &
                                                           NPRStation.AriannaChannelID.Value & ";" & MediaBroadcastWorksheetMarketDetailDate.MediaBroadcastWorksheetMarketDetail.Program & ";" & MediaBroadcastWorksheetMarketDetailDate.Rate.ToString & ";")

                                    SpotCounter += 1

                                Next

                            End If

                        Next

                        StreamWriter.WriteLine("<END>")
                        StreamWriter.Close()

                        Exported = True

                    End If

                End Using

            Catch ex As Exception

            End Try

            AriannaExport_Export = Exported

        End Function

#End Region

#End Region

#End Region

    End Class

End Namespace
