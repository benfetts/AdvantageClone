Namespace Reporting

    <HideModuleName()>
    Public Module Methods

#Region " Constants "



#End Region

#Region " Enum "

        Public Enum ReportColumnType
            JobDetailItem
        End Enum

#End Region

#Region " Variables "

        Private Const _PreDynamicReportModuleCode As String = "Desktop_ReportWriter_DynamicReportDataSets_"
        Private Const _PreAdvancedReportWriterModuleCode As String = "Desktop_ReportWriter_AdvancedReportWriterDataSets_"

#End Region

#Region " Properties "



#End Region

#Region " Methods "

        Public Function LoadUserDefinedReportData(ByVal SecurityDbContext As AdvantageFramework.Security.Database.DbContext,
                                                  ByVal DbContext As AdvantageFramework.Database.DbContext,
                                                  ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext,
                                                  ByVal AdvancedReportWriterReport As AdvantageFramework.Reporting.AdvancedReportWriterReports,
                                                  ByVal ParameterDictionary As Generic.Dictionary(Of String, Object),
                                                  ByVal Criteria As Integer, ByVal FilterString As String, ByVal [From] As Date, ByVal [To] As Date, ByVal Session As AdvantageFramework.Security.Session) As IEnumerable

            'objects
            Dim UserDefinedReportObjects As IEnumerable = Nothing
            Dim DynamicReport As Reporting.DynamicReports = DynamicReports.Alerts
            Dim LoadReport As Boolean = True
            Dim ShowJobsWithNoDetails As Boolean = False

            Try

                If AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV10Detail Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV10Detail, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV10Summary Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV10Summary, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV1Detail Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV1Detail, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV1Summary Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV1Summary, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV11Detail Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV11Detail, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV11Summary Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV11Summary, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV11JobComp Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV11JobComp, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV29 Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisCategoryData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV29, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV30Detail Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisQVAData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV30Detail, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV30Summary Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisQVAData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV30Summary, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV30JobComp Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisQVAData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV30JobComp, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV31 Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisQVAData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV31, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV2Detail Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV2Detail, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV2Summary Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV2Summary, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV3JobComp Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV3JobComp, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV3Summary Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV3Summary, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV4Detail Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV4Detail, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV4Summary Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV4Summary, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV5CliDivPrd Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV5CliDivPrd, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV5Summary Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV5Summary, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV6 Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisCategoryData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV6, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV7 Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisCategoryData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV7, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV8 Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisCategoryData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV8, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV9Detail Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV9Detail, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV9JobComp Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV9JobComp, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV9Summary Then

                    UserDefinedReportObjects = LoadJobDetailAnalysisData(Session, DbContext, AdvantageFramework.Reporting.ReportTypes.JobDetailAnalysisV9Summary, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SecurityPermission Then

                    UserDefinedReportObjects = AdvantageFramework.Security.Database.Procedures.UserPermissionsReportView.Load(SecurityDbContext).ToList

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EmployeeSummary Then

                    UserDefinedReportObjects = AdvantageFramework.Security.Database.Procedures.EmployeeSummaryView.Load(SecurityDbContext).ToList

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.PurchaseOrder Then

                    UserDefinedReportObjects = LoadPurchaseOrderData(DbContext, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EstimateForm Then

                    UserDefinedReportObjects = LoadEstimateReportData(DbContext, ParameterDictionary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaSpecifications Then

                    UserDefinedReportObjects = Nothing

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EmployeeUtilizationBreakoutNonDirect Then

                    UserDefinedReportObjects = Nothing

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaSpecificationsByDestination Then

                    UserDefinedReportObjects = Nothing

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaSpecifications Then

                    ' UserDefinedReportObjects = LoadMediaSpecificationsData(DbContext, ParameterDictionary)

                Else

                    If AdvancedReportWriterReport <> AdvantageFramework.Reporting.AdvancedReportWriterReports.Custom Then

                        Try

                            DynamicReport = AdvantageFramework.EnumUtilities.GetValue(GetType(AdvantageFramework.Reporting.DynamicReports), AdvancedReportWriterReport.ToString)

                        Catch ex As Exception
                            LoadReport = False
                        End Try

                        If LoadReport Then

                            If ParameterDictionary IsNot Nothing AndAlso ParameterDictionary.ContainsKey("ShowJobsWithNoDetails") Then

                                Try

                                    ShowJobsWithNoDetails = ParameterDictionary("ShowJobsWithNoDetails")

                                Catch ex As Exception
                                    ShowJobsWithNoDetails = False
                                End Try

                            End If

                            UserDefinedReportObjects = Enumerable.ToList(Of Object)(LoadDynamicReportData(DbContext, ReportingDbContext, DynamicReport, Criteria, FilterString, [From], [To], ShowJobsWithNoDetails, ParameterDictionary, Nothing))

                        End If

                    End If

                End If

            Catch ex As Exception
                UserDefinedReportObjects = Nothing
            Finally
                LoadUserDefinedReportData = UserDefinedReportObjects
            End Try

        End Function
        Public Function LoadUserDefinedEstimateReportData(ByVal SecurityDbContext As AdvantageFramework.Security.Database.DbContext,
                                                  ByVal DbContext As AdvantageFramework.Database.DbContext,
                                                  ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext,
                                                  ByVal AdvancedReportWriterReport As AdvantageFramework.Reporting.AdvancedReportWriterReports,
                                                  ByVal ParameterDictionary As Generic.Dictionary(Of String, Object),
                                                  ByVal Criteria As Integer, ByVal FilterString As String, ByVal [From] As Date, ByVal [To] As Date) As IEnumerable

            'objects
            Dim UserDefinedReportObjects As IEnumerable = Nothing
            Dim DynamicReport As Reporting.DynamicReports = DynamicReports.Alerts
            Dim LoadReport As Boolean = True
            Dim ShowJobsWithNoDetails As Boolean = False

            Try

                If AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.OneQuotePerPage Then

                    'UserDefinedReportObjects = LoadPurchaseOrderData(DbContext, ParameterDictionary)

                Else

                    If AdvancedReportWriterReport <> AdvantageFramework.Reporting.AdvancedReportWriterReports.Custom Then

                        Try

                            DynamicReport = AdvantageFramework.EnumUtilities.GetValue(GetType(AdvantageFramework.Reporting.DynamicReports), AdvancedReportWriterReport.ToString)

                        Catch ex As Exception
                            LoadReport = False
                        End Try

                        If LoadReport Then

                            If ParameterDictionary IsNot Nothing AndAlso ParameterDictionary.ContainsKey("ShowJobsWithNoDetails") Then

                                Try

                                    ShowJobsWithNoDetails = ParameterDictionary("ShowJobsWithNoDetails")

                                Catch ex As Exception
                                    ShowJobsWithNoDetails = False
                                End Try

                            End If

                            UserDefinedReportObjects = Enumerable.ToList(Of Object)(LoadDynamicReportData(DbContext, ReportingDbContext, DynamicReport, Criteria, FilterString, [From], [To], ShowJobsWithNoDetails, ParameterDictionary, Nothing))

                        End If

                    End If

                End If

            Catch ex As Exception
                UserDefinedReportObjects = Nothing
            Finally
                LoadUserDefinedEstimateReportData = UserDefinedReportObjects
            End Try

        End Function
        Public Function LoadDynamicReportData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext,
                                              ByVal DynamicReport As Reporting.DynamicReports, ByVal BlankData As Boolean, ByVal Criteria As Integer, ByVal FilterString As String,
                                              ByVal [From] As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object),
                                              ReportColumns As Generic.List(Of AdvantageFramework.Reporting.Classes.ReportColumn)) As IEnumerable

            'objects
            Dim DynamicReportObjects As IEnumerable = Nothing

            Try

                If BlankData Then

                    DynamicReportObjects = AdvantageFramework.Reporting.LoadDynamicReportBlankData(DynamicReport)

                Else

                    DynamicReportObjects = AdvantageFramework.Reporting.LoadDynamicReportData(DbContext, ReportingDbContext, DynamicReport, Criteria,
                                                                                              FilterString, [From], [To], ShowJobsWithNoDetails, ParameterDictionary, ReportColumns)

                End If

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadDynamicReportData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadDynamicReportData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal DynamicReport As Reporting.DynamicReports, ByVal Criteria As Integer,
                                               ByVal FilterString As String, ByVal [From] As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object),
                                               ReportColumns As Generic.List(Of AdvantageFramework.Reporting.Classes.ReportColumn)) As IEnumerable

            'objects
            Dim DynamicReportObjects As IEnumerable = Nothing
            Dim ObjectQuery As System.Data.Entity.Core.Objects.ObjectQuery = Nothing

            Try

                Try

                    From = CDate([From].ToShortDateString)

                Catch ex As Exception

                End Try

                Try

                    [To] = CDate([To].ToShortDateString).AddDays(1).AddSeconds(-60)

                Catch ex As Exception

                End Try

                If DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobSummary Then

                    'ObjectQuery = ReportingDbContext.ObjectContext.CreateObjectSet(Of AdvantageFramework.Reporting.Database.Views.JobSummaryReport)().Where(FilterString)
                    DynamicReportObjects = LoadJobSummaryData(ReportingDbContext, Criteria, [From], [To], ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSchedule Then

                    'ObjectQuery = ReportingDbContext.ObjectContext.CreateObjectSet(Of AdvantageFramework.Reporting.Database.Views.ProjectScheduleReport)().Where(FilterString)
                    DynamicReportObjects = LoadProjectScheduleData(ReportingDbContext, Criteria, [From], [To], ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientContact Then

                    DynamicReportObjects = ReportingDbContext.GetQuery(Of Database.Views.ClientContactReport).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTime Then

                    DynamicReportObjects = LoadIndirectTime(ReportingDbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTime Then

                    DynamicReportObjects = LoadDirectTime(ReportingDbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTimeWithEmployeeCost Then

                    DynamicReportObjects = LoadIndirectTimeCost(ReportingDbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTimeWithEmployeeCost Then

                    DynamicReportObjects = LoadDirectTimeCost(ReportingDbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobProjectScheduleSummary Then

                    'ObjectQuery = ReportingDbContext.ObjectContext.CreateObjectSet(Of AdvantageFramework.Reporting.Database.Views.JobProjectScheduleSummaryReport)().Where(FilterString)
                    DynamicReportObjects = LoadJobProjectScheduleSummaryData(ReportingDbContext, Criteria, [From], [To], ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailBillMonth Then

                    DynamicReportObjects = LoadJobDetailBillMonthData(LoadJobDetailItemData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary, Nothing))

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFunction Then

                    DynamicReportObjects = LoadJobDetailFunctionData(LoadJobDetailItemData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary, Nothing))

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItem Then

                    DynamicReportObjects = LoadJobDetailItemData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary, Nothing)
                    'DynamicReportObjects = LoadJobDetailItemDS(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetail Then

                    DynamicReportObjects = LoadJobDetailData(LoadJobDetailItemData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary, Nothing))

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Alerts Then

                    'DynamicReportObjects = ReportingDbContext.GetQuery(Of Database.Views.AlertsReport).ToList
                    DynamicReportObjects = LoadAlertReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AlertsWithComments Then

                    'DynamicReportObjects = ReportingDbContext.GetQuery(Of Database.Views.AlertsWithCommentsReport).ToList
                    DynamicReportObjects = LoadAlertCommentsReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AlertsWithRecipients Then

                    'DynamicReportObjects = ReportingDbContext.GetQuery(Of Database.Views.AlertsWithRecipientsReport).ToList
                    DynamicReportObjects = LoadAlertRecipientsReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectHoursUsed Then

                    'ObjectQuery = ReportingDbContext.ObjectContext.CreateObjectSet(Of AdvantageFramework.Reporting.Database.Views.ProjectHoursUsedReport)().Where(FilterString)
                    DynamicReportObjects = LoadProjectHoursUsedData(ReportingDbContext, Criteria, [From], [To], ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummary Then

                    DynamicReportObjects = LoadProjectSummaryData(DbContext, Criteria, [From], [To], ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryTask Then

                    DynamicReportObjects = LoadProjectSummaryTaskData(DbContext, Criteria, [From], [To], ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.NewspaperOrderDetail Then

                    DynamicReportObjects = ReportingDbContext.GetQuery(Of Database.Views.NewspaperOrderDetailReport).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatus Then

                    DynamicReportObjects = LoadMediaCurrentStatusReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobPurchaseOrder Then

                    'ObjectQuery = ReportingDbContext.ObjectContext.CreateObjectSet(Of AdvantageFramework.Reporting.Database.Views.JobPurchaseOrderReport)().Where(FilterString)
                    DynamicReportObjects = LoadJobPurchaseOrderReportSP(DbContext, Criteria, [From], [To]).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimatedAndActualIncome Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.EstimatedAndActualIncomeComplexType.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityDetail Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.CRMOpportunityDetailReport.LoadGreaterThanEndDate(ReportingDbContext, [From]).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityToInvestment Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.CRMOpportunityToInvestmentReport.LoadGreaterThanEndDate(ReportingDbContext, [From]).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMProspects Then

                    DynamicReportObjects = LoadCRMProspectsReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMClientContracts Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.CRMClientContractsReport.LoadGreaterThanEndDate(ReportingDbContext, [From]).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPL Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.ClientPLComplexType.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AROpenAged Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.AROpenAgedComplexType.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlan Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.MediaPlanReport.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusSummary Then

                    DynamicReportObjects = LoadMediaCurrentStatusSummaryReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonSummary Then

                    DynamicReportObjects = LoadMediaPlanComparisonSummaryData(DbContext, ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFee Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeComplexType.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Clients Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.ClientReport.Load(ReportingDbContext).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Divisions Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.DivisionReport.Load(ReportingDbContext).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Products Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.ProductReport.Load(ReportingDbContext).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Employees Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.EmployeeReport.Load(ReportingDbContext).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Vendors Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.VendorReport.Load(ReportingDbContext).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Campaign Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.CampaignReport.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashAnalysis Then

                    DynamicReportObjects = LoadCashAnalysisData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournal Then

                    DynamicReportObjects = LoadSalesJournalData(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournalWithComments Then

                    DynamicReportObjects = LoadSalesJournalWithCommentsData(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AuthorizationToBuy Then

                    DynamicReportObjects = LoadAuthorizationToBuyData(DbContext, Criteria, [From], [To])

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeApproval Then

                    DynamicReportObjects = LoadEmployeeTimeApprovalData(DbContext, Criteria, [From], [To])

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMedia Then

                    DynamicReportObjects = LoadCampaignProductionMediaData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMediaSummary Then

                    DynamicReportObjects = LoadCampaignProductionMediaDataSummary(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimateDetailApproved Then

                    DynamicReportObjects = LoadEstimateDetailApprovalData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GeneralLedgerDetail Then

                    DynamicReportObjects = LoadGeneralLedgerDetailData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobWriteOff Then

                    DynamicReportObjects = LoadJobWriteOffData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Transfer Then

                    DynamicReportObjects = LoadTransferData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceWithBalanceAging Then

                    DynamicReportObjects = LoadAccountPayableInvoiceWithBalanceAgingData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetail Then

                    DynamicReportObjects = LoadAccountsPayableInvoiceDetail(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPayments Then

                    DynamicReportObjects = LoadAccountsPayableInvoiceDetailPayments(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPaidByClient Then

                    DynamicReportObjects = LoadAccountsPayableInvoiceDetailPaidByClient(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResults Then

                    DynamicReportObjects = LoadDigitalResultsData(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimateForm Then

                    DynamicReportObjects = LoadEstimateData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetProduction Then

                    DynamicReportObjects = LoadBillingWorksheetProductionDetail(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFeeContract Then

                    DynamicReportObjects = LoadJobServiceFeeContractData(ReportingDbContext, Criteria, [From], [To])

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.IncomeOnly Then

                    DynamicReportObjects = LoadIncomeOnlyData(ReportingDbContext, Criteria, [From], [To])

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryAnalysis Then

                    DynamicReportObjects = LoadProjectSummaryReport(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ARPaymentHistory Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.ARPaymentHistoryComplexType.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPLDetail Then

                    DynamicReportObjects = LoadClientPLDetailReportData(DbContext, ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetMedia Then

                    DynamicReportObjects = LoadBillingWorksheetMediaDetail(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.OpenPurchaseOrderDetail Then

                    DynamicReportObjects = LoadOpenPurchaseOrderDetail(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItemAccountSplit Then

                    DynamicReportObjects = LoadJobDetailItemAccountSplitData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ExpenseReportAndApproval Then

                    DynamicReportObjects = LoadExpenseReport(ReportingDbContext, Criteria, [From], [To], ShowJobsWithNoDetails)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorContracts Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.VendorContractsReport.LoadGreaterThanEndDate(ReportingDbContext, [From]).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VirtualCreditCardTransactionEFS Then

                    DynamicReportObjects = LoadVirtualCreditCardTransactionsEFS(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobForecast Then

                    DynamicReportObjects = LoadJobForecastReports(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DigitalResultsComparison Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.DigitalResultsComparisonReport.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GeneralLedgerReport Then

                    DynamicReportObjects = LoadGeneralLedgerDetailByAccountData(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResultsComparisonByClientAndType Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.MediaResultsComparisonByClientAndType.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TrialBalance Then

                    DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.TrialBalanceReport.Load(ReportingDbContext, ParameterDictionary).ToList

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableBalanceByVendor Then

                    DynamicReportObjects = LoadAccountPayableBalanceByVendorData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsReceivableBalanceByClient Then

                    DynamicReportObjects = LoadAccountReceivableBalanceByClientData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesAndCostOfSalesByClient Then

                    DynamicReportObjects = LoadSalesAndCostOfSalesByClientData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TimeReport Then

                    DynamicReportObjects = LoadTimeReportData(DbContext, From, [To])

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.RevenueBreakdownByClient Then

                    DynamicReportObjects = LoadRevenueBreakdownByClientData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeUtilization Then

                    DynamicReportObjects = LoadEmployeeUtilizationData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPreBuy Then

                    DynamicReportObjects = LoadMediaBroadcastWorksheetPreBuyData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPostBuy Then

                    DynamicReportObjects = LoadMediaBroadcastWorksheetPostBuyDRWData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegister Then

                    DynamicReportObjects = LoadCheckRegisterData(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegisterWithInvoiceDetails Then

                    DynamicReportObjects = LoadCheckRegisterDataWithInvoiceDetails(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeInOutBoard Then

                    DynamicReportObjects = LoadEmployeeInOutData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonByVendor Then

                    DynamicReportObjects = LoadMediaComparisonByVendorReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonDetailByVendor Then

                    DynamicReportObjects = LoadMediaComparisonDetailByVendorReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ResourceAllocationByWeek Then

                    DynamicReportObjects = LoadResourceAllocationByWeekReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLChartOfAccounts Then

                    DynamicReportObjects = LoadGLChartOfAccounts(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLReportRow Then

                    DynamicReportObjects = LoadGLReportRow(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashTransactions Then

                    DynamicReportObjects = LoadCashTrasaction(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusCoopBreakout Then

                    DynamicReportObjects = LoadMediaCurrentStatusCoopBreakoutReport(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunction Then

                    DynamicReportObjects = LoadJobDetailFeeOOPFunctionData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJobComponent Then

                    DynamicReportObjects = LoadJobDetailFeeOOPJobComponentData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob Then

                    DynamicReportObjects = LoadJobDetailFeeOOPJobData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByCampaign Then

                    DynamicReportObjects = LoadJobDetailFeeOOPCampaignData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunctionMinimized Then

                    DynamicReportObjects = LoadJobDetailFeeOOPFunctionMinimizedData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob1Minimized Then

                    DynamicReportObjects = LoadJobDetailFeeOOPJobMinimizedData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob2Minimized Then

                    DynamicReportObjects = LoadJobDetailFeeOOPJob2MinimizedData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupModuleAccess Then

                    DynamicReportObjects = LoadSecurityGroupModuleSettingsData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupSettings Then

                    DynamicReportObjects = LoadSecurityGroupSettingsData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupUserSettings Then

                    DynamicReportObjects = LoadSecurityGroupUserSettingsData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserModuleAccess Then

                    DynamicReportObjects = LoadSecurityUserModuleSettingsData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserSettings Then

                    DynamicReportObjects = LoadSecurityUserSettingsData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserLoginAudit Then

                    DynamicReportObjects = LoadSecurityUserLoginAuditData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserTimesheetFunction Then

                    DynamicReportObjects = LoadUserTimesheetFunctionData(DbContext)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectScheduleTasksByEmployee Then

                    DynamicReportObjects = LoadTaskByEmplyeeData(ReportingDbContext, Criteria, [From], [To], ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndMediaWIP Then

                    DynamicReportObjects = LoadMonthEndMediaWIP(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndProductionWIP Then

                    DynamicReportObjects = LoadMonthEndProductionWIP(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeHoursAllocation Then

                    DynamicReportObjects = LoadEmployeeHoursAllocationData(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeForecast Then

                    DynamicReportObjects = LoadEmployeeTimeForecastData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.InvoiceBilledBackup Then

                    DynamicReportObjects = LoadInvoiceBilledBackupData(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashManagementProduction Then

                    DynamicReportObjects = LoadCashManagementProductionData(DbContext, Criteria, [From], [To], ShowJobsWithNoDetails, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPreBuy Then

                    DynamicReportObjects = LoadMediaBroadcastWorksheetRadioPreBuyData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPostBuy Then

                    DynamicReportObjects = LoadMediaBroadcastWorksheetRadioPostBuyDRWData(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficMissingInstructions Then

                    DynamicReportObjects = LoadMediaTrafficMissingInstructions(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficInstructions Then

                    DynamicReportObjects = LoadMediaTrafficInstructions(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndAccruedLiability Then

                    DynamicReportObjects = LoadMonthEndAccruedLiability(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndAccountsPayable Then

                    DynamicReportObjects = LoadMonthEndAccountsPayable(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorSpendWithEEOCAndMinorityStatusSummary Then

                    DynamicReportObjects = LoadVendorSpendWithEEOCAndMinorityStatusSummary(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorSpendWithEEOCAndMinorityStatusDetail Then

                    DynamicReportObjects = LoadVendorSpendWithEEOCAndMinorityStatusDetail(DbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingApproval Then

                    DynamicReportObjects = LoadBillingApproval(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastInvoiceSummary Then

                    DynamicReportObjects = LoadBroadcastInvoiceSummary(ReportingDbContext, ParameterDictionary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeAnalysis Then

                    DynamicReportObjects = LoadEmployeeTimeAnaylsisData(ReportingDbContext, ParameterDictionary)

                End If

                If ObjectQuery IsNot Nothing Then

                    ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("From", [From]))
                    ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("To", [To]))

                    DynamicReportObjects = ObjectQuery

                End If

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadDynamicReportData = DynamicReportObjects
            End Try

        End Function

        Private Function LoadEstimateReportData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.EstimateForm)

            Dim EstimateReports As Generic.List(Of AdvantageFramework.Database.Classes.EstimateForm) = Nothing

            Try
                EstimateReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.EstimateForm)(String.Format("EXEC [dbo].[advsp_estimate_report_dataset] {0}, {1}, '{2}', '{3}'", ParameterDictionary("EstimateNumber"), ParameterDictionary("EstimateComponent"), ParameterDictionary("EstimateUserID"), ParameterDictionary("EstimateQuote"))).ToList

            Catch ex As Exception
                EstimateReports = Nothing
            Finally
                LoadEstimateReportData = EstimateReports
            End Try

        End Function
        Private Function LoadDynamicReportBlankData(ByVal DynamicReport As Reporting.DynamicReports) As IEnumerable

            'objects
            Dim DynamicReportObjects As IEnumerable = Nothing

            Try

                If DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobSummary Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobSummaryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSchedule Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ProjectScheduleReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientContact Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.ClientContactReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTime Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTime Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTimeWithEmployeeCost Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeCostReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTimeWithEmployeeCost Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeCostReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobProjectScheduleSummary Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobProjectScheduleSummaryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailBillMonth Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailBillMonthReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFunction Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFunctionReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItem Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetail Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Alerts Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AlertReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AlertsWithComments Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AlertCommentsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AlertsWithRecipients Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AlertRecipientsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectHoursUsed Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ProjectHoursUsedReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummary Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.ProjectSummary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryTask Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.ProjectSummaryTask)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.NewspaperOrderDetail Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.NewspaperOrderDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatus Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobPurchaseOrder Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobPurchaseOrderReportSP)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimatedAndActualIncome Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EstimatedAndActualIncome)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityDetail Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.CRMOpportunityDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityToInvestment Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.CRMOpportunityToInvestmentReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMProspects Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.CRMProspectsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMClientContracts Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.CRMClientContractsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPL Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ClientPL)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AROpenAged Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AROpenAged)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlan Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusSummary Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusSummaryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonSummary Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFee Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ServiceFee)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Clients Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.ClientReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Divisions Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.DivisionReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Products Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.ProductReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Employees Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.EmployeeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Vendors Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.VendorReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Campaign Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.CampaignReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashAnalysis Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.CashAnalysisReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournal Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.SalesJournalReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournalWithComments Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.SalesJournalReportWithComments)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AuthorizationToBuy Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.ATBReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeApproval Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.EmployeeTimeApproval)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMedia Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.CampaignProductionMediaReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMediaSummary Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.CampaignProductionMediaSummaryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimateDetailApproved Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.EstimateDetailApprovedReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobWriteOff Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.JobWriteOff)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Transfer Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.TransferReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GeneralLedgerDetail Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.GeneralLedgerDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceWithBalanceAging Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceWithBalanceAgingReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetail Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPayments Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaymentsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPaidByClient Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaidByClientReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobWriteOff Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.JobWriteOff)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResults Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaResultReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimateForm Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.EstimateForm)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFeeContract Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobServiceFeeContractReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.IncomeOnly Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.IncomeOnlyReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetProduction Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryAnalysis Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Database.Classes.ProjectSummaryAnalysis)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ARPaymentHistory Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ARPaymentHistoryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPLDetail Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ClientPLDetail)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetMedia Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetMediaReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.OpenPurchaseOrderDetail Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.OpenPurchaseOrderDetail)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItemAccountSplit Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemAccountSplitReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ExpenseReportAndApproval Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ExpenseReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorContracts Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Views.VendorContractsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VirtualCreditCardTransactionEFS Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobForecast Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobForecastReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DigitalResultsComparison Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DigitalResultsComparisonReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GeneralLedgerReport Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.GeneralLedgerDetailByAccountReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResultsComparisonByClientAndType Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaResultsComparisonByClientAndTypeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TrialBalance Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.TrialBalanceReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableBalanceByVendor Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AccountsPayableBalanceByVendor)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsReceivableBalanceByClient Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AccountsReceivableBalanceByClient)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesAndCostOfSalesByClient Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SalesAndCostOfSalesByClientReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TimeReport Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.TimeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.RevenueBreakdownByClient Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.RevenueBreakdownByClientReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeUtilization Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeUtilizationReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPreBuy Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPostBuy Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyDRWReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegister Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CheckRegister)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegisterWithInvoiceDetails Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CheckRegisterWithInvoiceDetails)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeInOutBoard Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeInOutBoard)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonByVendor Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonByVendor)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonDetailByVendor Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonDetailByVendor)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ResourceAllocationByWeek Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ResourceAllocationByWeek)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLChartOfAccounts Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.GLChartOfAccounts)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLReportRow Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.GLReportRow)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashTransactions Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CashTransaction)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusCoopBreakout Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusCoopBreakout)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunction Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunction)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJobComponent Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobComponent)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByCampaign Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPCampaign)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunctionMinimized Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunctionMinimized)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob1Minimized Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobMinimized)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob2Minimized Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob2Minimized)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupModuleAccess Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupModuleAccess)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupSettings Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupSettings)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupUserSettings Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupUserSettings)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserModuleAccess Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserModuleAccess)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserSettings Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserSettings)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserLoginAudit Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserLoginAudit)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserTimesheetFunction Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.UserTimesheetFunction)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndMediaWIP Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MonthEndMediaWIP)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndProductionWIP Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MonthEndProductionWIP)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectScheduleTasksByEmployee Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ProjectScheduleTasksByEmployeeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeHoursAllocation Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeHoursAllocationReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.InvoiceBilledBackup Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.InvoiceBilledBackup)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashManagementProduction Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CashManagementProduction)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPreBuy Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPostBuy Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyDRWReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficMissingInstructions Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaTrafficMissingInstructionDataset)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficInstructions Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaTrafficInstructionDataset)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeForecast Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeTimeForecastData)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndAccruedLiability Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MonthEndAccruedLiability)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndAccountsPayable Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MonthEndAccountsPayable)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorSpendWithEEOCAndMinorityStatusSummary Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusSummary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorSpendWithEEOCAndMinorityStatusDetail Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusDetail)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingApproval Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingApprovalReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastInvoiceSummary Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BroadcastInvoiceSummary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeAnalysis Then

                    DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeTimeAnalysisReport)

                End If

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadDynamicReportBlankData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadJobSummaryData(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, Criteria As Integer, From As Date, [To] As Date, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobSummaryReport)

            'objects
            Dim SqlParameterSelectedDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSalesClassCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeCodes As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterSelectedDate = New System.Data.SqlClient.SqlParameter("@SelectedDate", SqlDbType.VarChar)
            SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.SmallDateTime)
            SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.SmallDateTime)
            SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@IncludeClosedJobs", SqlDbType.Bit)
            SqlParameterClientCodes = New System.Data.SqlClient.SqlParameter("@ClientCodes", SqlDbType.VarChar)
            SqlParameterAECodes = New System.Data.SqlClient.SqlParameter("@AECodes", SqlDbType.VarChar)
            SqlParameterSalesClassCodes = New System.Data.SqlClient.SqlParameter("@SalesClassCodes", SqlDbType.VarChar)
            SqlParameterJobTypeCodes = New System.Data.SqlClient.SqlParameter("@JobTypeCodes", SqlDbType.VarChar)

            SqlParameterSelectedDate.Value = [Enum].GetName(GetType(AdvantageFramework.Reporting.JobSummaryInitialCriteria), CInt(Criteria))
            SqlParameterStartDate.Value = From
            SqlParameterEndDate.Value = [To]

            If ParameterDictionary.ContainsKey("IncludeClosedJobs") Then

                If ParameterDictionary("IncludeClosedJobs") = False Then

                    SqlParameterIncludeClosedJobs.Value = 0

                Else

                    SqlParameterIncludeClosedJobs.Value = 1

                End If

            Else

                SqlParameterIncludeClosedJobs.Value = 0

            End If

            If ParameterDictionary.ContainsKey("ClientCodes") AndAlso ParameterDictionary("ClientCodes") IsNot Nothing Then

                SqlParameterClientCodes.Value = String.Join(",", DirectCast(ParameterDictionary("ClientCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterClientCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("AECodes") AndAlso ParameterDictionary("AECodes") IsNot Nothing Then

                SqlParameterAECodes.Value = String.Join(",", DirectCast(ParameterDictionary("AECodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterAECodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("SalesClassCodes") AndAlso ParameterDictionary("SalesClassCodes") IsNot Nothing Then

                SqlParameterSalesClassCodes.Value = String.Join(",", DirectCast(ParameterDictionary("SalesClassCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterSalesClassCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("JobTypeCodes") AndAlso ParameterDictionary("JobTypeCodes") IsNot Nothing Then

                SqlParameterJobTypeCodes.Value = String.Join(",", DirectCast(ParameterDictionary("JobTypeCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterJobTypeCodes.Value = System.DBNull.Value

            End If

            LoadJobSummaryData = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobSummaryReport)("exec dbo.advsp_job_summary_report @SelectedDate, @StartDate, @EndDate, @IncludeClosedJobs, @ClientCodes, @AECodes, @SalesClassCodes, @JobTypeCodes",
                                                 SqlParameterSelectedDate, SqlParameterStartDate, SqlParameterEndDate, SqlParameterIncludeClosedJobs, SqlParameterClientCodes, SqlParameterAECodes, SqlParameterSalesClassCodes, SqlParameterJobTypeCodes).ToList


        End Function
        Private Function LoadProjectScheduleData(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, Criteria As Integer, From As Date, [To] As Date, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ProjectScheduleReport)

            'objects
            Dim SqlParameterSelectedDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSalesClassCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeCodes As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterSelectedDate = New System.Data.SqlClient.SqlParameter("@SelectedDate", SqlDbType.VarChar)
            SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.SmallDateTime)
            SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.SmallDateTime)
            SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@IncludeClosedJobs", SqlDbType.Bit)
            SqlParameterClientCodes = New System.Data.SqlClient.SqlParameter("@ClientCodes", SqlDbType.VarChar)
            SqlParameterAECodes = New System.Data.SqlClient.SqlParameter("@AECodes", SqlDbType.VarChar)
            SqlParameterSalesClassCodes = New System.Data.SqlClient.SqlParameter("@SalesClassCodes", SqlDbType.VarChar)
            SqlParameterJobTypeCodes = New System.Data.SqlClient.SqlParameter("@JobTypeCodes", SqlDbType.VarChar)

            SqlParameterSelectedDate.Value = [Enum].GetName(GetType(AdvantageFramework.Reporting.ProjectScheduleInitialCriteria), CInt(Criteria))
            SqlParameterStartDate.Value = From
            SqlParameterEndDate.Value = [To]

            If ParameterDictionary.ContainsKey("IncludeClosedJobs") Then

                If ParameterDictionary("IncludeClosedJobs") = False Then

                    SqlParameterIncludeClosedJobs.Value = 0

                Else

                    SqlParameterIncludeClosedJobs.Value = 1

                End If

            Else

                SqlParameterIncludeClosedJobs.Value = 0

            End If

            If ParameterDictionary.ContainsKey("ClientCodes") AndAlso ParameterDictionary("ClientCodes") IsNot Nothing Then

                SqlParameterClientCodes.Value = String.Join(",", DirectCast(ParameterDictionary("ClientCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterClientCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("AECodes") AndAlso ParameterDictionary("AECodes") IsNot Nothing Then

                SqlParameterAECodes.Value = String.Join(",", DirectCast(ParameterDictionary("AECodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterAECodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("SalesClassCodes") AndAlso ParameterDictionary("SalesClassCodes") IsNot Nothing Then

                SqlParameterSalesClassCodes.Value = String.Join(",", DirectCast(ParameterDictionary("SalesClassCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterSalesClassCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("JobTypeCodes") AndAlso ParameterDictionary("JobTypeCodes") IsNot Nothing Then

                SqlParameterJobTypeCodes.Value = String.Join(",", DirectCast(ParameterDictionary("JobTypeCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterJobTypeCodes.Value = System.DBNull.Value

            End If

            LoadProjectScheduleData = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.ProjectScheduleReport)("exec dbo.advsp_project_schedule_report @SelectedDate, @StartDate, @EndDate, @IncludeClosedJobs, @ClientCodes, @AECodes, @SalesClassCodes, @JobTypeCodes",
                                                 SqlParameterSelectedDate, SqlParameterStartDate, SqlParameterEndDate, SqlParameterIncludeClosedJobs, SqlParameterClientCodes, SqlParameterAECodes, SqlParameterSalesClassCodes, SqlParameterJobTypeCodes).ToList

        End Function
        Public Function LoadIndirectTime(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeReport) = Nothing
            'Dim ObjectQuery As IQueryable = Nothing

            Try
                Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOnlyActiveEmployees As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterOnlyActiveEmployees = New System.Data.SqlClient.SqlParameter("@OnlyActiveEmployees", SqlDbType.Bit)

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.DateType.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.FromDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.ToDate.ToString)
                SqlParameterUserID.Value = DbContext.UserCode
                SqlParameterOnlyActiveEmployees.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.OnlyActiveEmployees.ToString)

                'DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeReport)(String.Format("EXEC [dbo].[advsp_indirect_time_load] {0}, '{1}', '{2}', '{3}'", Criteria, [From].ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"), DbContext.UserCode)).ToList

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeReport) _
                                                                                    ("EXEC [dbo].[advsp_indirect_time_load] @DATE_TYPE, @START_DATE, @END_DATE, @UserID, " &
                                                                                     "@OnlyActiveEmployees",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterUserID, SqlParameterOnlyActiveEmployees).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadIndirectTime = DynamicReportObjects
            End Try

        End Function
        Private Function LoadIndirectTimeCost(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeCostReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeCostReport) = Nothing
            'Dim ObjectQuery As IQueryable = Nothing

            Try
                Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOnlyActiveEmployees As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterOnlyActiveEmployees = New System.Data.SqlClient.SqlParameter("@OnlyActiveEmployees", SqlDbType.Bit)

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.DateType.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.FromDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.ToDate.ToString)
                SqlParameterUserID.Value = DbContext.UserCode
                SqlParameterOnlyActiveEmployees.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.OnlyActiveEmployees.ToString)

                'DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeCostReport)(String.Format("EXEC [dbo].[advsp_indirect_time_cost_load] {0}, '{1}', '{2}', '{3}'", Criteria, [From].ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"), DbContext.UserCode)).ToList

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeCostReport) _
                                                                                    ("EXEC [dbo].[advsp_indirect_time_cost_load] @DATE_TYPE, @START_DATE, @END_DATE, @UserID, " &
                                                                                     "@OnlyActiveEmployees",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterUserID, SqlParameterOnlyActiveEmployees).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadIndirectTimeCost = DynamicReportObjects
            End Try

        End Function
        Public Function LoadDirectTime(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeReport) = Nothing
            'Dim ObjectQuery As IQueryable = Nothing

            Try
                Dim SelectedJobs As Generic.List(Of Integer) = Nothing
                Dim SelectedJobsString As Generic.List(Of String) = Nothing

                Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing

                Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterJobList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDepartmentList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEmployeeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterFunctionList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOnlyActiveEmployees As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
                SqlParameterJobList = New System.Data.SqlClient.SqlParameter("@JOB_LIST", SqlDbType.VarChar)
                SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                SqlParameterDepartmentList = New System.Data.SqlClient.SqlParameter("@DepartmentsList", SqlDbType.VarChar)
                SqlParameterEmployeeList = New System.Data.SqlClient.SqlParameter("@EmployeesList", SqlDbType.VarChar)
                SqlParameterFunctionList = New System.Data.SqlClient.SqlParameter("@FunctionsList", SqlDbType.VarChar)
                SqlParameterOnlyActiveEmployees = New System.Data.SqlClient.SqlParameter("@OnlyActiveEmployees", SqlDbType.Bit)

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.DateType.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.FromDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.ToDate.ToString)
                SqlParameterUserID.Value = DbContext.UserCode
                SqlParameterOnlyActiveEmployees.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.OnlyActiveEmployees.ToString)


                SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedCampaigns.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.DirectTimeParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.DirectTimeParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.DirectTimeParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.DirectTimeParameters.SelectedJobs.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedJobs.ToString) IsNot Nothing Then

                    SelectedJobs = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedJobs.ToString)

                    If SelectedJobs IsNot Nothing Then

                        SelectedJobsString = SelectedJobs.Select(Function(JobNumber) CStr(JobNumber)).ToList

                    End If

                    SqlParameterJobList.Value = String.Join(",", SelectedJobsString.ToArray)

                Else

                    SqlParameterJobList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.DirectTimeParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                    SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterCampaignIDList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.DirectTimeParameters.SelectedDepartments.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedDepartments.ToString) IsNot Nothing Then

                    SqlParameterDepartmentList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedDepartments.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterDepartmentList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.DirectTimeParameters.SelectedEmployees.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedEmployees.ToString) IsNot Nothing Then

                    SqlParameterEmployeeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedEmployees.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterEmployeeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.DirectTimeParameters.SelectedFunctions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedFunctions.ToString) IsNot Nothing Then

                    SqlParameterFunctionList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.SelectedFunctions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterFunctionList.Value = System.DBNull.Value

                End If

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeReport) _
                                                                                    ("EXEC [dbo].[advsp_direct_time_load] @DATE_TYPE, @START_DATE, @END_DATE, @UserID, " &
                                                                                     "@CLIENT_LIST, @DIVISION_LIST, @PRODUCT_LIST, @JOB_LIST, @CampaignIDList, @DepartmentsList, @EmployeesList, @FunctionsList, @OnlyActiveEmployees",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterUserID,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterJobList, SqlParameterCampaignIDList, SqlParameterDepartmentList, SqlParameterEmployeeList, SqlParameterFunctionList, SqlParameterOnlyActiveEmployees).ToList





            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadDirectTime = DynamicReportObjects
            End Try

            'Try

            '    DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeReport)(String.Format("EXEC [dbo].[advsp_direct_time_load] {0}, '{1}', '{2}', '{3}'", Criteria, [From].ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"), DbContext.UserCode)).ToList

            'Catch ex As Exception
            '    DynamicReportObjects = Nothing
            'Finally
            '    LoadDirectTime = DynamicReportObjects
            'End Try

        End Function
        Private Function LoadDirectTimeCost(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeCostReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeCostReport) = Nothing
            'Dim ObjectQuery As IQueryable = Nothing

            Try
                Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOnlyActiveEmployees As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterOnlyActiveEmployees = New System.Data.SqlClient.SqlParameter("@OnlyActiveEmployees", SqlDbType.Bit)

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.DateType.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.FromDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.ToDate.ToString)
                SqlParameterUserID.Value = DbContext.UserCode
                SqlParameterOnlyActiveEmployees.Value = ParameterDictionary(AdvantageFramework.Reporting.DirectTimeParameters.OnlyActiveEmployees.ToString)

                'DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeCostReport)(String.Format("EXEC [dbo].[advsp_direct_time_cost_load] {0}, '{1}', '{2}', '{3}'", Criteria, [From].ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"), DbContext.UserCode)).ToList

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.DirectTimeCostReport) _
                                                                                    ("EXEC [dbo].[advsp_direct_time_cost_load] @DATE_TYPE, @START_DATE, @END_DATE, @UserID, " &
                                                                                     "@OnlyActiveEmployees",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterUserID, SqlParameterOnlyActiveEmployees).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadDirectTimeCost = DynamicReportObjects
            End Try

        End Function
        Private Function LoadJobProjectScheduleSummaryData(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, Criteria As Integer, From As Date, [To] As Date, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobProjectScheduleSummaryReport)

            'objects
            Dim SqlParameterSelectedDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSalesClassCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeCodes As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterSelectedDate = New System.Data.SqlClient.SqlParameter("@SelectedDate", SqlDbType.VarChar)
            SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.SmallDateTime)
            SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.SmallDateTime)
            SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@IncludeClosedJobs", SqlDbType.Bit)
            SqlParameterClientCodes = New System.Data.SqlClient.SqlParameter("@ClientCodes", SqlDbType.VarChar)
            SqlParameterAECodes = New System.Data.SqlClient.SqlParameter("@AECodes", SqlDbType.VarChar)
            SqlParameterSalesClassCodes = New System.Data.SqlClient.SqlParameter("@SalesClassCodes", SqlDbType.VarChar)
            SqlParameterJobTypeCodes = New System.Data.SqlClient.SqlParameter("@JobTypeCodes", SqlDbType.VarChar)

            SqlParameterSelectedDate.Value = [Enum].GetName(GetType(AdvantageFramework.Reporting.JobProjectScheduleSummaryInitialCriteria), CInt(Criteria))
            SqlParameterStartDate.Value = From
            SqlParameterEndDate.Value = [To]

            If ParameterDictionary.ContainsKey("IncludeClosedJobs") Then

                If ParameterDictionary("IncludeClosedJobs") = False Then

                    SqlParameterIncludeClosedJobs.Value = 0

                Else

                    SqlParameterIncludeClosedJobs.Value = 1

                End If

            Else

                SqlParameterIncludeClosedJobs.Value = 0

            End If

            If ParameterDictionary.ContainsKey("ClientCodes") AndAlso ParameterDictionary("ClientCodes") IsNot Nothing Then

                SqlParameterClientCodes.Value = String.Join(",", DirectCast(ParameterDictionary("ClientCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterClientCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("AECodes") AndAlso ParameterDictionary("AECodes") IsNot Nothing Then

                SqlParameterAECodes.Value = String.Join(",", DirectCast(ParameterDictionary("AECodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterAECodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("SalesClassCodes") AndAlso ParameterDictionary("SalesClassCodes") IsNot Nothing Then

                SqlParameterSalesClassCodes.Value = String.Join(",", DirectCast(ParameterDictionary("SalesClassCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterSalesClassCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("JobTypeCodes") AndAlso ParameterDictionary("JobTypeCodes") IsNot Nothing Then

                SqlParameterJobTypeCodes.Value = String.Join(",", DirectCast(ParameterDictionary("JobTypeCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterJobTypeCodes.Value = System.DBNull.Value

            End If

            LoadJobProjectScheduleSummaryData = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobProjectScheduleSummaryReport)("exec dbo.advsp_job_project_schedule_summary_report @SelectedDate, @StartDate, @EndDate, @IncludeClosedJobs, @ClientCodes, @AECodes, @SalesClassCodes, @JobTypeCodes",
                                                 SqlParameterSelectedDate, SqlParameterStartDate, SqlParameterEndDate, SqlParameterIncludeClosedJobs, SqlParameterClientCodes, SqlParameterAECodes, SqlParameterSalesClassCodes, SqlParameterJobTypeCodes).ToList



        End Function
        Private Function LoadJobDetailBillMonthData(ByVal JobDetailItems As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport)) As IEnumerable

            LoadJobDetailBillMonthData = (From JobDetailItem In JobDetailItems
                                          Group JobDetailItem By JobDetailItem.AccountsReceivablePostPeriodCode,
                                                                 JobDetailItem.JobNumber,
                                                                 JobDetailItem.JobComponentNumber,
                                                                 JobDetailItem.OfficeCode,
                                                                 JobDetailItem.OfficeDescription,
                                                                 JobDetailItem.ClientCode,
                                                                 JobDetailItem.ClientDescription,
                                                                 JobDetailItem.DivisionCode,
                                                                 JobDetailItem.DivisionDescription,
                                                                 JobDetailItem.ProductCode,
                                                                 JobDetailItem.ProductDescription,
                                                                 JobDetailItem.CampaignID,
                                                                 JobDetailItem.CampaignCode,
                                                                 JobDetailItem.CampaignName,
                                                                 JobDetailItem.BillingBudget,
                                                                 JobDetailItem.IncomeBudget,
                                                                 JobDetailItem.SalesClassCode,
                                                                 JobDetailItem.SalesClassDescription,
                                                                 JobDetailItem.UserCode,
                                                                 JobDetailItem.JobCreateDate,
                                                                 JobDetailItem.JobDescription,
                                                                 JobDetailItem.JobDateOpened,
                                                                 JobDetailItem.RushChargesApproved,
                                                                 JobDetailItem.ApprovedEstimateRequired,
                                                                 JobDetailItem.Comment,
                                                                 JobDetailItem.ClientReference,
                                                                 JobDetailItem.BillingCoopCode,
                                                                 JobDetailItem.SalesClassFormatCode,
                                                                 JobDetailItem.ComplexityCode,
                                                                 JobDetailItem.ComplexityDescription,
                                                                 JobDetailItem.PromotionCode,
                                                                 JobDetailItem.BillingComment,
                                                                 JobDetailItem.LabelFromUDFTable1,
                                                                 JobDetailItem.LabelFromUDFTable2,
                                                                 JobDetailItem.LabelFromUDFTable3,
                                                                 JobDetailItem.LabelFromUDFTable4,
                                                                 JobDetailItem.LabelFromUDFTable5,
                                                                 JobDetailItem.JobOpen,
                                                                 JobDetailItem.JobComponent,
                                                                 JobDetailItem.BillHold,
                                                                 JobDetailItem.AccountExecutiveCode,
                                                                 JobDetailItem.AccountExecutive,
                                                                 JobDetailItem.ManagerCode,
                                                                 JobDetailItem.Manager,
                                                                 JobDetailItem.ComponentDateOpened,
                                                                 JobDetailItem.DueDate,
                                                                 JobDetailItem.StartDate,
                                                                 JobDetailItem.Status,
                                                                 JobDetailItem.GutPercentComplete,
                                                                 JobDetailItem.AdSize,
                                                                 JobDetailItem.DepartmentTeamCode,
                                                                 JobDetailItem.DepartmentTeam,
                                                                 JobDetailItem.MarkupPercent,
                                                                 JobDetailItem.CreativeInstructions,
                                                                 JobDetailItem.JobProcessControl,
                                                                 JobDetailItem.ComponentDescription,
                                                                 JobDetailItem.ComponentComments,
                                                                 JobDetailItem.ComponentBudget,
                                                                 JobDetailItem.EstimateNumber,
                                                                 JobDetailItem.EstimateComponentNumber,
                                                                 JobDetailItem.ClientApproved,
                                                                 JobDetailItem.ClientApprovalDate,
                                                                 JobDetailItem.ClientApprovedBy,
                                                                 JobDetailItem.InternallyApproved,
                                                                 JobDetailItem.InternalApprovalDate,
                                                                 JobDetailItem.InternallyApprovedBy,
                                                                 JobDetailItem.BillingUser,
                                                                 JobDetailItem.AdvanceBillFlag,
                                                                 JobDetailItem.DeliveryInstructions,
                                                                 JobDetailItem.JobTypeCode,
                                                                 JobDetailItem.JobTypeDescription,
                                                                 JobDetailItem.Taxable,
                                                                 JobDetailItem.TaxCode,
                                                                 JobDetailItem.TaxCodeDescription,
                                                                 JobDetailItem.NonBillable,
                                                                 JobDetailItem.AlertGroup,
                                                                 JobDetailItem.AdNumber,
                                                                 JobDetailItem.AccountNumber,
                                                                 JobDetailItem.AccountNumberDescription,
                                                                 JobDetailItem.IncomeRecognitionMethod,
                                                                 JobDetailItem.MarketCode,
                                                                 JobDetailItem.MarketDescription,
                                                                 JobDetailItem.ServiceFeeJob,
                                                                 JobDetailItem.ServiceFeeTypeCode,
                                                                 JobDetailItem.ServiceFeeTypeDescription,
                                                                 JobDetailItem.Archived,
                                                                 JobDetailItem.TrafficScheduleRequired,
                                                                 JobDetailItem.ClientPO,
                                                                 JobDetailItem.CompLabelFromUDFTable1,
                                                                 JobDetailItem.CompLabelFromUDFTable2,
                                                                 JobDetailItem.CompLabelFromUDFTable3,
                                                                 JobDetailItem.CompLabelFromUDFTable4,
                                                                 JobDetailItem.CompLabelFromUDFTable5,
                                                                 JobDetailItem.JobTemplateCode,
                                                                 JobDetailItem.FiscalPeriodCode,
                                                                 JobDetailItem.FiscalPeriodDescription,
                                                                 JobDetailItem.JobQuantity,
                                                                 JobDetailItem.BlackplateVersionCode,
                                                                 JobDetailItem.BlackplateVersionDesc,
                                                                 JobDetailItem.BlackplateVersion2Code,
                                                                 JobDetailItem.BlackplateVersion2Desc,
                                                                 JobDetailItem.ClientContactCode,
                                                                 JobDetailItem.ClientContactID,
                                                                 JobDetailItem.BABatchID,
                                                                 JobDetailItem.ClientContact,
                                                                 JobDetailItem.SelectedBABatchID,
                                                                 JobDetailItem.BillingCommandCenterID,
                                                                 JobDetailItem.AlertAssignmentTemplate,
                                                                 JobDetailItem.IsEstimateNonBillable,
                                                                 JobDetailItem.IsNewBusiness,
                                                                 JobDetailItem.Agency,
                                                                 JobDetailItem.ProductUDF1,
                                                                 JobDetailItem.ProductUDF2,
                                                                 JobDetailItem.ProductUDF3,
                                                                 JobDetailItem.ProductUDF4,
                                                                 JobDetailItem.CompletedDate,
                                                                 JobDetailItem.JobProcessControlDate Into JDI = Group
                                          Select New AdvantageFramework.Reporting.Database.Classes.JobDetailBillMonthReport With {.JobNumber = JobNumber,
                                                                                                                        .JobComponentNumber = JobComponentNumber,
                                                                                                                        .OfficeCode = OfficeCode,
                                                                                                                        .OfficeDescription = OfficeDescription,
                                                                                                                        .ClientCode = ClientCode,
                                                                                                                        .ClientDescription = ClientDescription,
                                                                                                                        .DivisionCode = DivisionCode,
                                                                                                                        .DivisionDescription = DivisionDescription,
                                                                                                                        .ProductCode = ProductCode,
                                                                                                                        .ProductDescription = ProductDescription,
                                                                                                                        .CampaignID = CampaignID,
                                                                                                                        .CampaignCode = CampaignCode,
                                                                                                                        .CampaignName = CampaignName,
                                                                                                                        .BillingBudget = BillingBudget,
                                                                                                                        .IncomeBudget = IncomeBudget,
                                                                                                                        .SalesClassCode = SalesClassCode,
                                                                                                                        .SalesClassDescription = SalesClassDescription,
                                                                                                                        .UserCode = UserCode,
                                                                                                                        .JobCreateDate = JobCreateDate,
                                                                                                                        .JobDescription = JobDescription,
                                                                                                                        .JobDateOpened = JobDateOpened,
                                                                                                                        .RushChargesApproved = RushChargesApproved,
                                                                                                                        .ApprovedEstimateRequired = ApprovedEstimateRequired,
                                                                                                                        .Comment = Comment,
                                                                                                                        .ClientReference = ClientReference,
                                                                                                                        .BillingCoopCode = BillingCoopCode,
                                                                                                                        .SalesClassFormatCode = SalesClassFormatCode,
                                                                                                                        .ComplexityCode = ComplexityCode,
                                                                                                                        .ComplexityDescription = ComplexityDescription,
                                                                                                                        .PromotionCode = PromotionCode,
                                                                                                                        .BillingComment = BillingComment,
                                                                                                                        .LabelFromUDFTable1 = LabelFromUDFTable1,
                                                                                                                        .LabelFromUDFTable2 = LabelFromUDFTable2,
                                                                                                                        .LabelFromUDFTable3 = LabelFromUDFTable3,
                                                                                                                        .LabelFromUDFTable4 = LabelFromUDFTable4,
                                                                                                                        .LabelFromUDFTable5 = LabelFromUDFTable5,
                                                                                                                        .JobOpen = JobOpen,
                                                                                                                        .JobComponent = JobComponent,
                                                                                                                        .BillHold = BillHold,
                                                                                                                        .AccountExecutiveCode = AccountExecutiveCode,
                                                                                                                        .AccountExecutive = AccountExecutive,
                                                                                                                        .ManagerCode = ManagerCode,
                                                                                                                        .Manager = Manager,
                                                                                                                        .ComponentDateOpened = ComponentDateOpened,
                                                                                                                        .DueDate = DueDate,
                                                                                                                        .StartDate = StartDate,
                                                                                                                        .Status = Status,
                                                                                                                        .GutPercentComplete = GutPercentComplete,
                                                                                                                        .AdSize = AdSize,
                                                                                                                        .DepartmentTeamCode = DepartmentTeamCode,
                                                                                                                        .DepartmentTeam = DepartmentTeam,
                                                                                                                        .MarkupPercent = MarkupPercent,
                                                                                                                        .CreativeInstructions = CreativeInstructions,
                                                                                                                        .JobProcessControl = JobProcessControl,
                                                                                                                        .ComponentDescription = ComponentDescription,
                                                                                                                        .ComponentComments = ComponentComments,
                                                                                                                        .ComponentBudget = ComponentBudget,
                                                                                                                        .EstimateNumber = EstimateNumber,
                                                                                                                        .EstimateComponentNumber = EstimateComponentNumber,
                                                                                                                        .ClientApproved = ClientApproved,
                                                                                                                        .ClientApprovalDate = ClientApprovalDate,
                                                                                                                        .ClientApprovedBy = ClientApprovedBy,
                                                                                                                        .InternallyApproved = InternallyApproved,
                                                                                                                        .InternalApprovalDate = InternalApprovalDate,
                                                                                                                        .InternallyApprovedBy = InternallyApprovedBy,
                                                                                                                        .BillingUser = BillingUser,
                                                                                                                        .AdvanceBillFlag = AdvanceBillFlag,
                                                                                                                        .DeliveryInstructions = DeliveryInstructions,
                                                                                                                        .JobTypeCode = JobTypeCode,
                                                                                                                        .JobTypeDescription = JobTypeDescription,
                                                                                                                        .Taxable = Taxable,
                                                                                                                        .TaxCode = TaxCode,
                                                                                                                        .TaxCodeDescription = TaxCodeDescription,
                                                                                                                        .NonBillable = NonBillable,
                                                                                                                        .AlertGroup = AlertGroup,
                                                                                                                        .AdNumber = AdNumber,
                                                                                                                        .AccountNumber = AccountNumber,
                                                                                                                        .AccountNumberDescription = AccountNumberDescription,
                                                                                                                        .IncomeRecognitionMethod = IncomeRecognitionMethod,
                                                                                                                        .MarketCode = MarketCode,
                                                                                                                        .MarketDescription = MarketDescription,
                                                                                                                        .ServiceFeeJob = ServiceFeeJob,
                                                                                                                        .ServiceFeeTypeCode = ServiceFeeTypeCode,
                                                                                                                        .ServiceFeeTypeDescription = ServiceFeeTypeDescription,
                                                                                                                        .Archived = Archived,
                                                                                                                        .TrafficScheduleRequired = TrafficScheduleRequired,
                                                                                                                        .ClientPO = ClientPO,
                                                                                                                        .CompLabelFromUDFTable1 = CompLabelFromUDFTable1,
                                                                                                                        .CompLabelFromUDFTable2 = CompLabelFromUDFTable2,
                                                                                                                        .CompLabelFromUDFTable3 = CompLabelFromUDFTable3,
                                                                                                                        .CompLabelFromUDFTable4 = CompLabelFromUDFTable4,
                                                                                                                        .CompLabelFromUDFTable5 = CompLabelFromUDFTable5,
                                                                                                                        .JobTemplateCode = JobTemplateCode,
                                                                                                                        .FiscalPeriodCode = FiscalPeriodCode,
                                                                                                                        .FiscalPeriodDescription = FiscalPeriodDescription,
                                                                                                                        .JobQuantity = JobQuantity,
                                                                                                                        .BlackplateVersionCode = BlackplateVersionCode,
                                                                                                                        .BlackplateVersionDesc = BlackplateVersionDesc,
                                                                                                                        .BlackplateVersion2Code = BlackplateVersion2Code,
                                                                                                                        .BlackplateVersion2Desc = BlackplateVersion2Desc,
                                                                                                                        .ClientContactCode = ClientContactCode,
                                                                                                                        .ClientContactID = ClientContactID,
                                                                                                                        .BABatchID = BABatchID,
                                                                                                                        .ClientContact = ClientContact,
                                                                                                                        .SelectedBABatchID = SelectedBABatchID,
                                                                                                                        .BillingCommandCenterID = BillingCommandCenterID,
                                                                                                                        .AlertAssignmentTemplate = AlertAssignmentTemplate,
                                                                                                                        .Hours = JDI.Sum(Function(Entity) Entity.Hours),
                                                                                                                        .Quantity = JDI.Sum(Function(Entity) Entity.Quantity),
                                                                                                                        .BillableLessResale = JDI.Sum(Function(Entity) Entity.BillableLessResale),
                                                                                                                        .BillableTotal = JDI.Sum(Function(Entity) Entity.BillableTotal),
                                                                                                                        .ExtMarkupAmount = JDI.Sum(Function(Entity) Entity.ExtMarkupAmount),
                                                                                                                        .NonResaleTaxAmount = JDI.Sum(Function(Entity) Entity.NonResaleTaxAmount),
                                                                                                                        .ResaleTaxAmount = JDI.Sum(Function(Entity) Entity.ResaleTaxAmount),
                                                                                                                        .Total = JDI.Sum(Function(Entity) Entity.Total),
                                                                                                                        .NetAmount = JDI.Sum(Function(Entity) Entity.NetAmount),
                                                                                                                        .CostAmount = JDI.Sum(Function(Entity) Entity.CostAmount),
                                                                                                                        .AccountsReceivablePostPeriodCode = AccountsReceivablePostPeriodCode,
                                                                                                                        .EstimateHours = JDI.Sum(Function(Entity) Entity.EstimateHours),
                                                                                                                        .EstimateHoursAmount = JDI.Sum(Function(Entity) Entity.EstimateHoursAmount),
                                                                                                                        .EstimateQuantity = JDI.Sum(Function(Entity) Entity.EstimateQuantity),
                                                                                                                        .EstimateTotalAmount = JDI.Sum(Function(Entity) Entity.EstimateTotalAmount),
                                                                                                                        .EstimateContTotalAmount = JDI.Sum(Function(Entity) Entity.EstimateContTotalAmount),
                                                                                                                        .EstimateNonResaleTaxAmount = JDI.Sum(Function(Entity) Entity.EstimateNonResaleTaxAmount),
                                                                                                                        .EstimateResaleTaxAmount = JDI.Sum(Function(Entity) Entity.EstimateResaleTaxAmount),
                                                                                                                        .EstimateMarkupAmount = JDI.Sum(Function(Entity) Entity.EstimateMarkupAmount),
                                                                                                                        .EstimateCostAmount = JDI.Sum(Function(Entity) Entity.EstimateCostAmount),
                                                                                                                        .IsEstimateNonBillable = IsEstimateNonBillable,
                                                                                                                        .EstimateFeeTime = JDI.Sum(Function(Entity) Entity.EstimateFeeTime),
                                                                                                                        .EstimateNetAmount = JDI.Sum(Function(Entity) Entity.EstimateNetAmount),
                                                                                                                        .BillingApprovalHours = JDI.Sum(Function(Entity) Entity.BillingApprovalHours),
                                                                                                                        .BillingApprovalCostAmount = JDI.Sum(Function(Entity) Entity.BillingApprovalCostAmount),
                                                                                                                        .BillingApprovalExtNetAmount = JDI.Sum(Function(Entity) Entity.BillingApprovalExtNetAmount),
                                                                                                                        .BillingApprovalTotalAmount = JDI.Sum(Function(Entity) Entity.BillingApprovalTotalAmount),
                                                                                                                        .OpenPurchaseOrderAmount = JDI.Sum(Function(Entity) Entity.OpenPurchaseOrderAmount),
                                                                                                                        .OpenPurchaseOrderGrossAmount = JDI.Sum(Function(Entity) Entity.OpenPurchaseOrderGrossAmount),
                                                                                                                        .BilledAmount = JDI.Sum(Function(Entity) Entity.BilledAmount),
                                                                                                                        .BilledWithResale = JDI.Sum(Function(Entity) Entity.BilledWithResale),
                                                                                                                        .BilledHours = JDI.Sum(Function(Entity) Entity.BilledHours),
                                                                                                                        .BilledQuantity = JDI.Sum(Function(Entity) Entity.BilledQuantity),
                                                                                                                        .FeeTimeAmount = JDI.Sum(Function(Entity) Entity.FeeTimeAmount),
                                                                                                                        .FeeTimeHours = JDI.Sum(Function(Entity) Entity.FeeTimeHours),
                                                                                                                        .UnbilledAmount = JDI.Sum(Function(Entity) Entity.UnbilledAmount),
                                                                                                                        .UnbilledAmountLessResale = JDI.Sum(Function(Entity) Entity.UnbilledAmountLessResale),
                                                                                                                        .UnbilledHours = JDI.Sum(Function(Entity) Entity.UnbilledHours),
                                                                                                                        .UnbilledQuantity = JDI.Sum(Function(Entity) Entity.UnbilledQuantity),
                                                                                                                        .NonBillableAmount = JDI.Sum(Function(Entity) Entity.NonBillableAmount),
                                                                                                                        .NonBillableHours = JDI.Sum(Function(Entity) Entity.NonBillableHours),
                                                                                                                        .NonBillableQuantity = JDI.Sum(Function(Entity) Entity.NonBillableQuantity),
                                                                                                                        .IsNewBusiness = IsNewBusiness,
                                                                                                                        .Agency = Agency,
                                                                                                                        .ProductUDF1 = ProductUDF1,
                                                                                                                        .ProductUDF2 = ProductUDF2,
                                                                                                                        .ProductUDF3 = ProductUDF3,
                                                                                                                        .ProductUDF4 = ProductUDF4,
                                                                                                                        .CompletedDate = CompletedDate,
                                                                                                                        .JobProcessControlDate = JobProcessControlDate,
                                                                                                                        .CurrentHours = JDI.Sum(Function(Entity) Entity.CurrentHours),
                                                                                                                        .CurrentHoursAmount = JDI.Sum(Function(Entity) Entity.CurrentHoursAmount),
                                                                                                                        .CurrentIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.CurrentIncomeOnlyCharges),
                                                                                                                        .CurrentVendorCharges = JDI.Sum(Function(Entity) Entity.CurrentVendorCharges),
                                                                                                                        .CurrentTotal = JDI.Sum(Function(Entity) Entity.CurrentTotal),
                                                                                                                        .PriorHours = JDI.Sum(Function(Entity) Entity.PriorHours),
                                                                                                                        .PriorHoursAmount = JDI.Sum(Function(Entity) Entity.PriorHoursAmount),
                                                                                                                        .PriorIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.PriorIncomeOnlyCharges),
                                                                                                                        .PriorVendorCharges = JDI.Sum(Function(Entity) Entity.PriorVendorCharges),
                                                                                                                        .PriorTotal = JDI.Sum(Function(Entity) Entity.PriorTotal),
                                                                                                                        .PriorYearHours = JDI.Sum(Function(Entity) Entity.PriorYearHours),
                                                                                                                        .PriorYearHoursAmount = JDI.Sum(Function(Entity) Entity.PriorYearHoursAmount),
                                                                                                                        .PriorYearIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.PriorYearIncomeOnlyCharges),
                                                                                                                        .PriorYearVendorCharges = JDI.Sum(Function(Entity) Entity.PriorYearVendorCharges),
                                                                                                                        .PriorYearTotal = JDI.Sum(Function(Entity) Entity.PriorYearTotal),
                                                                                                                        .TotalToDateHours = JDI.Sum(Function(Entity) Entity.TotalToDateHours),
                                                                                                                        .TotalToDateHoursAmount = JDI.Sum(Function(Entity) Entity.TotalToDateHoursAmount),
                                                                                                                        .TotalToDateIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.TotalToDateIncomeOnlyCharges),
                                                                                                                        .TotalToDateVendorCharges = JDI.Sum(Function(Entity) Entity.TotalToDateVendorCharges),
                                                                                                                        .TotalToDate = JDI.Sum(Function(Entity) Entity.TotalToDate),
                                                                                                                        .EstimateIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.EstimateIncomeOnlyCharges),
                                                                                                                        .BilledIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.BilledIncomeOnlyCharges),
                                                                                                                        .PercentCompleteHours = Math.Round(If(CDec(JDI.Sum(Function(Entity) Entity.EstimateHours)) > 0, ((JDI.Where(Function(Entity) Entity.ResourceType = "E").Sum(Function(Entity) Entity.Hours)) / JDI.Sum(Function(Entity) Entity.EstimateHours)) * 100, CDec(0)), 2, MidpointRounding.AwayFromZero),
                                                                                                                        .PercentCompleteAmount = Math.Round(If(CDec(JDI.Sum(Function(Entity) Entity.EstimateTotalAmount)) > 0, ((JDI.Where(Function(Entity) Entity.ResourceType = "E").Sum(Function(Entity) Entity.Total) / JDI.Sum(Function(Entity) Entity.EstimateTotalAmount))) * 100, CDec(0)), 2, MidpointRounding.AwayFromZero)}).ToList

        End Function
        Private Function LoadJobDetailFunctionData(ByVal JobDetailItems As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport)) As IEnumerable

            LoadJobDetailFunctionData = (From JobDetailItem In JobDetailItems
                                         Group JobDetailItem By JobDetailItem.JobNumber,
                                                                JobDetailItem.JobComponentNumber,
                                                                JobDetailItem.[FunctionType],
                                                                JobDetailItem.FunctionConsolidationCode,
                                                                JobDetailItem.FunctionConsolidation,
                                                                JobDetailItem.FunctionHeading,
                                                                JobDetailItem.[FunctionCode],
                                                                JobDetailItem.[FunctionDescription],
                                                                JobDetailItem.OfficeCode,
                                                                JobDetailItem.OfficeDescription,
                                                                JobDetailItem.ClientCode,
                                                                JobDetailItem.ClientDescription,
                                                                JobDetailItem.DivisionCode,
                                                                JobDetailItem.DivisionDescription,
                                                                JobDetailItem.ProductCode,
                                                                JobDetailItem.ProductDescription,
                                                                JobDetailItem.CampaignID,
                                                                JobDetailItem.CampaignCode,
                                                                JobDetailItem.CampaignName,
                                                                JobDetailItem.BillingBudget,
                                                                JobDetailItem.IncomeBudget,
                                                                JobDetailItem.SalesClassCode,
                                                                JobDetailItem.SalesClassDescription,
                                                                JobDetailItem.UserCode,
                                                                JobDetailItem.JobCreateDate,
                                                                JobDetailItem.JobDescription,
                                                                JobDetailItem.JobDateOpened,
                                                                JobDetailItem.RushChargesApproved,
                                                                JobDetailItem.ApprovedEstimateRequired,
                                                                JobDetailItem.Comment,
                                                                JobDetailItem.ClientReference,
                                                                JobDetailItem.BillingCoopCode,
                                                                JobDetailItem.SalesClassFormatCode,
                                                                JobDetailItem.ComplexityCode,
                                                                JobDetailItem.ComplexityDescription,
                                                                JobDetailItem.PromotionCode,
                                                                JobDetailItem.BillingComment,
                                                                JobDetailItem.LabelFromUDFTable1,
                                                                JobDetailItem.LabelFromUDFTable2,
                                                                JobDetailItem.LabelFromUDFTable3,
                                                                JobDetailItem.LabelFromUDFTable4,
                                                                JobDetailItem.LabelFromUDFTable5,
                                                                JobDetailItem.JobOpen,
                                                                JobDetailItem.JobComponent,
                                                                JobDetailItem.BillHold,
                                                                JobDetailItem.AccountExecutiveCode,
                                                                JobDetailItem.AccountExecutive,
                                                                JobDetailItem.ManagerCode,
                                                                JobDetailItem.Manager,
                                                                JobDetailItem.ComponentDateOpened,
                                                                JobDetailItem.DueDate,
                                                                JobDetailItem.StartDate,
                                                                JobDetailItem.Status,
                                                                JobDetailItem.GutPercentComplete,
                                                                JobDetailItem.AdSize,
                                                                JobDetailItem.DepartmentTeamCode,
                                                                JobDetailItem.DepartmentTeam,
                                                                JobDetailItem.MarkupPercent,
                                                                JobDetailItem.CreativeInstructions,
                                                                JobDetailItem.JobProcessControl,
                                                                JobDetailItem.ComponentDescription,
                                                                JobDetailItem.ComponentComments,
                                                                JobDetailItem.ComponentBudget,
                                                                JobDetailItem.EstimateNumber,
                                                                JobDetailItem.EstimateComponentNumber,
                                                                JobDetailItem.ClientApproved,
                                                                JobDetailItem.ClientApprovalDate,
                                                                JobDetailItem.ClientApprovedBy,
                                                                JobDetailItem.InternallyApproved,
                                                                JobDetailItem.InternalApprovalDate,
                                                                JobDetailItem.InternallyApprovedBy,
                                                                JobDetailItem.BillingUser,
                                                                JobDetailItem.AdvanceBillFlag,
                                                                JobDetailItem.DeliveryInstructions,
                                                                JobDetailItem.JobTypeCode,
                                                                JobDetailItem.JobTypeDescription,
                                                                JobDetailItem.Taxable,
                                                                JobDetailItem.TaxCode,
                                                                JobDetailItem.TaxCodeDescription,
                                                                JobDetailItem.NonBillable,
                                                                JobDetailItem.AlertGroup,
                                                                JobDetailItem.AdNumber,
                                                                JobDetailItem.AccountNumber,
                                                                JobDetailItem.AccountNumberDescription,
                                                                JobDetailItem.IncomeRecognitionMethod,
                                                                JobDetailItem.MarketCode,
                                                                JobDetailItem.MarketDescription,
                                                                JobDetailItem.ServiceFeeJob,
                                                                JobDetailItem.ServiceFeeTypeCode,
                                                                JobDetailItem.ServiceFeeTypeDescription,
                                                                JobDetailItem.Archived,
                                                                JobDetailItem.TrafficScheduleRequired,
                                                                JobDetailItem.ClientPO,
                                                                JobDetailItem.CompLabelFromUDFTable1,
                                                                JobDetailItem.CompLabelFromUDFTable2,
                                                                JobDetailItem.CompLabelFromUDFTable3,
                                                                JobDetailItem.CompLabelFromUDFTable4,
                                                                JobDetailItem.CompLabelFromUDFTable5,
                                                                JobDetailItem.JobTemplateCode,
                                                                JobDetailItem.FiscalPeriodCode,
                                                                JobDetailItem.FiscalPeriodDescription,
                                                                JobDetailItem.JobQuantity,
                                                                JobDetailItem.BlackplateVersionCode,
                                                                JobDetailItem.BlackplateVersionDesc,
                                                                JobDetailItem.BlackplateVersion2Code,
                                                                JobDetailItem.BlackplateVersion2Desc,
                                                                JobDetailItem.ClientContactCode,
                                                                JobDetailItem.ClientContactID,
                                                                JobDetailItem.BABatchID,
                                                                JobDetailItem.ClientContact,
                                                                JobDetailItem.SelectedBABatchID,
                                                                JobDetailItem.BillingCommandCenterID,
                                                                JobDetailItem.AlertAssignmentTemplate,
                                                                JobDetailItem.IsEstimateNonBillable,
                                                                JobDetailItem.IsNewBusiness,
                                                                JobDetailItem.Agency,
                                                                JobDetailItem.ProductUDF1,
                                                                JobDetailItem.ProductUDF2,
                                                                JobDetailItem.ProductUDF3,
                                                                JobDetailItem.ProductUDF4,
                                                                JobDetailItem.CompletedDate,
                                                                JobDetailItem.JobProcessControlDate Into JDI = Group
                                         Select New AdvantageFramework.Reporting.Database.Classes.JobDetailFunctionReport With {.JobNumber = JobNumber,
                                                                                                                       .JobComponentNumber = JobComponentNumber,
                                                                                                                       .[FunctionType] = [FunctionType],
                                                                                                                       .FunctionConsolidationCode = FunctionConsolidationCode,
                                                                                                                       .FunctionConsolidation = FunctionConsolidation,
                                                                                                                       .FunctionHeading = FunctionHeading,
                                                                                                                       .[FunctionCode] = [FunctionCode],
                                                                                                                       .[FunctionDescription] = [FunctionDescription],
                                                                                                                       .OfficeCode = OfficeCode,
                                                                                                                       .OfficeDescription = OfficeDescription,
                                                                                                                       .ClientCode = ClientCode,
                                                                                                                       .ClientDescription = ClientDescription,
                                                                                                                       .DivisionCode = DivisionCode,
                                                                                                                       .DivisionDescription = DivisionDescription,
                                                                                                                       .ProductCode = ProductCode,
                                                                                                                       .ProductDescription = ProductDescription,
                                                                                                                       .CampaignID = CampaignID,
                                                                                                                       .CampaignCode = CampaignCode,
                                                                                                                       .CampaignName = CampaignName,
                                                                                                                       .BillingBudget = BillingBudget,
                                                                                                                       .IncomeBudget = IncomeBudget,
                                                                                                                       .SalesClassCode = SalesClassCode,
                                                                                                                       .SalesClassDescription = SalesClassDescription,
                                                                                                                       .UserCode = UserCode,
                                                                                                                       .JobCreateDate = JobCreateDate,
                                                                                                                       .JobDescription = JobDescription,
                                                                                                                       .JobDateOpened = JobDateOpened,
                                                                                                                       .RushChargesApproved = RushChargesApproved,
                                                                                                                       .ApprovedEstimateRequired = ApprovedEstimateRequired,
                                                                                                                       .Comment = Comment,
                                                                                                                       .ClientReference = ClientReference,
                                                                                                                       .BillingCoopCode = BillingCoopCode,
                                                                                                                       .SalesClassFormatCode = SalesClassFormatCode,
                                                                                                                       .ComplexityCode = ComplexityCode,
                                                                                                                       .ComplexityDescription = ComplexityDescription,
                                                                                                                       .PromotionCode = PromotionCode,
                                                                                                                       .BillingComment = BillingComment,
                                                                                                                       .LabelFromUDFTable1 = LabelFromUDFTable1,
                                                                                                                       .LabelFromUDFTable2 = LabelFromUDFTable2,
                                                                                                                       .LabelFromUDFTable3 = LabelFromUDFTable3,
                                                                                                                       .LabelFromUDFTable4 = LabelFromUDFTable4,
                                                                                                                       .LabelFromUDFTable5 = LabelFromUDFTable5,
                                                                                                                       .JobOpen = JobOpen,
                                                                                                                       .JobComponent = JobComponent,
                                                                                                                       .BillHold = BillHold,
                                                                                                                       .AccountExecutiveCode = AccountExecutiveCode,
                                                                                                                       .AccountExecutive = AccountExecutive,
                                                                                                                       .ManagerCode = ManagerCode,
                                                                                                                       .Manager = Manager,
                                                                                                                       .ComponentDateOpened = ComponentDateOpened,
                                                                                                                       .DueDate = DueDate,
                                                                                                                       .StartDate = StartDate,
                                                                                                                       .Status = Status,
                                                                                                                       .GutPercentComplete = GutPercentComplete,
                                                                                                                       .AdSize = AdSize,
                                                                                                                       .DepartmentTeamCode = DepartmentTeamCode,
                                                                                                                       .DepartmentTeam = DepartmentTeam,
                                                                                                                       .MarkupPercent = MarkupPercent,
                                                                                                                       .CreativeInstructions = CreativeInstructions,
                                                                                                                       .JobProcessControl = JobProcessControl,
                                                                                                                       .ComponentDescription = ComponentDescription,
                                                                                                                       .ComponentComments = ComponentComments,
                                                                                                                       .ComponentBudget = ComponentBudget,
                                                                                                                       .EstimateNumber = EstimateNumber,
                                                                                                                       .EstimateComponentNumber = EstimateComponentNumber,
                                                                                                                       .ClientApproved = ClientApproved,
                                                                                                                       .ClientApprovalDate = ClientApprovalDate,
                                                                                                                       .ClientApprovedBy = ClientApprovedBy,
                                                                                                                       .InternallyApproved = InternallyApproved,
                                                                                                                       .InternalApprovalDate = InternalApprovalDate,
                                                                                                                       .InternallyApprovedBy = InternallyApprovedBy,
                                                                                                                       .BillingUser = BillingUser,
                                                                                                                       .AdvanceBillFlag = AdvanceBillFlag,
                                                                                                                       .DeliveryInstructions = DeliveryInstructions,
                                                                                                                       .JobTypeCode = JobTypeCode,
                                                                                                                       .JobTypeDescription = JobTypeDescription,
                                                                                                                       .Taxable = Taxable,
                                                                                                                       .TaxCode = TaxCode,
                                                                                                                       .TaxCodeDescription = TaxCodeDescription,
                                                                                                                       .NonBillable = NonBillable,
                                                                                                                       .AlertGroup = AlertGroup,
                                                                                                                       .AdNumber = AdNumber,
                                                                                                                       .AccountNumber = AccountNumber,
                                                                                                                       .AccountNumberDescription = AccountNumberDescription,
                                                                                                                       .IncomeRecognitionMethod = IncomeRecognitionMethod,
                                                                                                                       .MarketCode = MarketCode,
                                                                                                                       .MarketDescription = MarketDescription,
                                                                                                                       .ServiceFeeJob = ServiceFeeJob,
                                                                                                                       .ServiceFeeTypeCode = ServiceFeeTypeCode,
                                                                                                                       .ServiceFeeTypeDescription = ServiceFeeTypeDescription,
                                                                                                                       .Archived = Archived,
                                                                                                                       .TrafficScheduleRequired = TrafficScheduleRequired,
                                                                                                                       .ClientPO = ClientPO,
                                                                                                                       .CompLabelFromUDFTable1 = CompLabelFromUDFTable1,
                                                                                                                       .CompLabelFromUDFTable2 = CompLabelFromUDFTable2,
                                                                                                                       .CompLabelFromUDFTable3 = CompLabelFromUDFTable3,
                                                                                                                       .CompLabelFromUDFTable4 = CompLabelFromUDFTable4,
                                                                                                                       .CompLabelFromUDFTable5 = CompLabelFromUDFTable5,
                                                                                                                       .JobTemplateCode = JobTemplateCode,
                                                                                                                       .FiscalPeriodCode = FiscalPeriodCode,
                                                                                                                       .FiscalPeriodDescription = FiscalPeriodDescription,
                                                                                                                       .JobQuantity = JobQuantity,
                                                                                                                       .BlackplateVersionCode = BlackplateVersionCode,
                                                                                                                       .BlackplateVersionDesc = BlackplateVersionDesc,
                                                                                                                       .BlackplateVersion2Code = BlackplateVersion2Code,
                                                                                                                       .BlackplateVersion2Desc = BlackplateVersion2Desc,
                                                                                                                       .ClientContactCode = ClientContactCode,
                                                                                                                       .ClientContactID = ClientContactID,
                                                                                                                       .BABatchID = BABatchID,
                                                                                                                       .ClientContact = ClientContact,
                                                                                                                       .SelectedBABatchID = SelectedBABatchID,
                                                                                                                       .BillingCommandCenterID = BillingCommandCenterID,
                                                                                                                       .AlertAssignmentTemplate = AlertAssignmentTemplate,
                                                                                                                       .Hours = JDI.Sum(Function(Entity) Entity.Hours),
                                                                                                                       .Quantity = JDI.Sum(Function(Entity) Entity.Quantity),
                                                                                                                       .BillableLessResale = JDI.Sum(Function(Entity) Entity.BillableLessResale),
                                                                                                                       .BillableTotal = JDI.Sum(Function(Entity) Entity.BillableTotal),
                                                                                                                       .ExtMarkupAmount = JDI.Sum(Function(Entity) Entity.ExtMarkupAmount),
                                                                                                                       .NonResaleTaxAmount = JDI.Sum(Function(Entity) Entity.NonResaleTaxAmount),
                                                                                                                       .ResaleTaxAmount = JDI.Sum(Function(Entity) Entity.ResaleTaxAmount),
                                                                                                                       .Total = JDI.Sum(Function(Entity) Entity.Total),
                                                                                                                       .NetAmount = JDI.Sum(Function(Entity) Entity.NetAmount),
                                                                                                                       .CostAmount = JDI.Sum(Function(Entity) Entity.CostAmount),
                                                                                                                       .EstimateHours = JDI.Sum(Function(Entity) Entity.EstimateHours),
                                                                                                                       .EstimateHoursAmount = JDI.Sum(Function(Entity) Entity.EstimateHoursAmount),
                                                                                                                       .EstimateQuantity = JDI.Sum(Function(Entity) Entity.EstimateQuantity),
                                                                                                                       .EstimateTotalAmount = JDI.Sum(Function(Entity) Entity.EstimateTotalAmount),
                                                                                                                       .EstimateContTotalAmount = JDI.Sum(Function(Entity) Entity.EstimateContTotalAmount),
                                                                                                                       .EstimateNonResaleTaxAmount = JDI.Sum(Function(Entity) Entity.EstimateNonResaleTaxAmount),
                                                                                                                       .EstimateResaleTaxAmount = JDI.Sum(Function(Entity) Entity.EstimateResaleTaxAmount),
                                                                                                                       .EstimateMarkupAmount = JDI.Sum(Function(Entity) Entity.EstimateMarkupAmount),
                                                                                                                       .EstimateCostAmount = JDI.Sum(Function(Entity) Entity.EstimateCostAmount),
                                                                                                                       .IsEstimateNonBillable = IsEstimateNonBillable,
                                                                                                                       .EstimateFeeTime = JDI.Sum(Function(Entity) Entity.EstimateFeeTime),
                                                                                                                       .EstimateNetAmount = JDI.Sum(Function(Entity) Entity.EstimateNetAmount),
                                                                                                                       .BillingApprovalHours = JDI.Sum(Function(Entity) Entity.BillingApprovalHours),
                                                                                                                       .BillingApprovalCostAmount = JDI.Sum(Function(Entity) Entity.BillingApprovalCostAmount),
                                                                                                                       .BillingApprovalExtNetAmount = JDI.Sum(Function(Entity) Entity.BillingApprovalExtNetAmount),
                                                                                                                       .BillingApprovalTotalAmount = JDI.Sum(Function(Entity) Entity.BillingApprovalTotalAmount),
                                                                                                                       .OpenPurchaseOrderAmount = JDI.Sum(Function(Entity) Entity.OpenPurchaseOrderAmount),
                                                                                                                       .OpenPurchaseOrderGrossAmount = JDI.Sum(Function(Entity) Entity.OpenPurchaseOrderGrossAmount),
                                                                                                                       .BilledAmount = JDI.Sum(Function(Entity) Entity.BilledAmount),
                                                                                                                       .BilledWithResale = JDI.Sum(Function(Entity) Entity.BilledWithResale),
                                                                                                                       .BilledHours = JDI.Sum(Function(Entity) Entity.BilledHours),
                                                                                                                       .BilledQuantity = JDI.Sum(Function(Entity) Entity.BilledQuantity),
                                                                                                                       .FeeTimeAmount = JDI.Sum(Function(Entity) Entity.FeeTimeAmount),
                                                                                                                       .FeeTimeHours = JDI.Sum(Function(Entity) Entity.FeeTimeHours),
                                                                                                                       .UnbilledAmount = JDI.Sum(Function(Entity) Entity.UnbilledAmount),
                                                                                                                       .UnbilledAmountLessResale = JDI.Sum(Function(Entity) Entity.UnbilledAmountLessResale),
                                                                                                                       .UnbilledHours = JDI.Sum(Function(Entity) Entity.UnbilledHours),
                                                                                                                       .UnbilledQuantity = JDI.Sum(Function(Entity) Entity.UnbilledQuantity),
                                                                                                                       .NonBillableAmount = JDI.Sum(Function(Entity) Entity.NonBillableAmount),
                                                                                                                       .NonBillableHours = JDI.Sum(Function(Entity) Entity.NonBillableHours),
                                                                                                                       .NonBillableQuantity = JDI.Sum(Function(Entity) Entity.NonBillableQuantity),
                                                                                                                       .IsNewBusiness = IsNewBusiness,
                                                                                                                       .Agency = Agency,
                                                                                                                       .ProductUDF1 = ProductUDF1,
                                                                                                                       .ProductUDF2 = ProductUDF2,
                                                                                                                       .ProductUDF3 = ProductUDF3,
                                                                                                                       .ProductUDF4 = ProductUDF4,
                                                                                                                       .CompletedDate = CompletedDate,
                                                                                                                       .JobProcessControlDate = JobProcessControlDate,
                                                                                                                       .CurrentHours = JDI.Sum(Function(Entity) Entity.CurrentHours),
                                                                                                                       .CurrentHoursAmount = JDI.Sum(Function(Entity) Entity.CurrentHoursAmount),
                                                                                                                       .CurrentIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.CurrentIncomeOnlyCharges),
                                                                                                                       .CurrentVendorCharges = JDI.Sum(Function(Entity) Entity.CurrentVendorCharges),
                                                                                                                       .CurrentTotal = JDI.Sum(Function(Entity) Entity.CurrentTotal),
                                                                                                                       .PriorHours = JDI.Sum(Function(Entity) Entity.PriorHours),
                                                                                                                       .PriorHoursAmount = JDI.Sum(Function(Entity) Entity.PriorHoursAmount),
                                                                                                                       .PriorIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.PriorIncomeOnlyCharges),
                                                                                                                       .PriorVendorCharges = JDI.Sum(Function(Entity) Entity.PriorVendorCharges),
                                                                                                                       .PriorTotal = JDI.Sum(Function(Entity) Entity.PriorTotal),
                                                                                                                       .PriorYearHours = JDI.Sum(Function(Entity) Entity.PriorYearHours),
                                                                                                                       .PriorYearHoursAmount = JDI.Sum(Function(Entity) Entity.PriorYearHoursAmount),
                                                                                                                       .PriorYearIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.PriorYearIncomeOnlyCharges),
                                                                                                                       .PriorYearVendorCharges = JDI.Sum(Function(Entity) Entity.PriorYearVendorCharges),
                                                                                                                       .PriorYearTotal = JDI.Sum(Function(Entity) Entity.PriorYearTotal),
                                                                                                                       .TotalToDateHours = JDI.Sum(Function(Entity) Entity.TotalToDateHours),
                                                                                                                       .TotalToDateHoursAmount = JDI.Sum(Function(Entity) Entity.TotalToDateHoursAmount),
                                                                                                                       .TotalToDateIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.TotalToDateIncomeOnlyCharges),
                                                                                                                       .TotalToDateVendorCharges = JDI.Sum(Function(Entity) Entity.TotalToDateVendorCharges),
                                                                                                                       .TotalToDate = JDI.Sum(Function(Entity) Entity.TotalToDate),
                                                                                                                       .EstimateIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.EstimateIncomeOnlyCharges),
                                                                                                                       .BilledIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.BilledIncomeOnlyCharges),
                                                                                                                       .PercentCompleteHours = Math.Round(If(CDec(JDI.Sum(Function(Entity) Entity.EstimateHours)) > 0, ((JDI.Where(Function(Entity) Entity.ResourceType = "E").Sum(Function(Entity) Entity.Hours)) / JDI.Sum(Function(Entity) Entity.EstimateHours)) * 100, CDec(0)), 2, MidpointRounding.AwayFromZero),
                                                                                                                       .PercentCompleteAmount = Math.Round(If(CDec(JDI.Sum(Function(Entity) Entity.EstimateTotalAmount)) > 0, ((JDI.Where(Function(Entity) Entity.ResourceType = "E").Sum(Function(Entity) Entity.Total) / JDI.Sum(Function(Entity) Entity.EstimateTotalAmount))) * 100, CDec(0)), 2, MidpointRounding.AwayFromZero)}).ToList

        End Function
        Private Function LoadJobDetailData(ByVal JobDetailItems As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport)) As IEnumerable

            LoadJobDetailData = (From JobDetailItem In JobDetailItems
                                 Group JobDetailItem By JobDetailItem.JobNumber,
                                                        JobDetailItem.JobComponentNumber,
                                                        JobDetailItem.OfficeCode,
                                                        JobDetailItem.OfficeDescription,
                                                        JobDetailItem.ClientCode,
                                                        JobDetailItem.ClientDescription,
                                                        JobDetailItem.DivisionCode,
                                                        JobDetailItem.DivisionDescription,
                                                        JobDetailItem.ProductCode,
                                                        JobDetailItem.ProductDescription,
                                                        JobDetailItem.CampaignID,
                                                        JobDetailItem.CampaignCode,
                                                        JobDetailItem.CampaignName,
                                                        JobDetailItem.BillingBudget,
                                                        JobDetailItem.IncomeBudget,
                                                        JobDetailItem.SalesClassCode,
                                                        JobDetailItem.SalesClassDescription,
                                                        JobDetailItem.UserCode,
                                                        JobDetailItem.JobCreateDate,
                                                        JobDetailItem.JobDescription,
                                                        JobDetailItem.JobDateOpened,
                                                        JobDetailItem.RushChargesApproved,
                                                        JobDetailItem.ApprovedEstimateRequired,
                                                        JobDetailItem.Comment,
                                                        JobDetailItem.ClientReference,
                                                        JobDetailItem.BillingCoopCode,
                                                        JobDetailItem.SalesClassFormatCode,
                                                        JobDetailItem.ComplexityCode,
                                                        JobDetailItem.ComplexityDescription,
                                                        JobDetailItem.PromotionCode,
                                                        JobDetailItem.BillingComment,
                                                        JobDetailItem.LabelFromUDFTable1,
                                                        JobDetailItem.LabelFromUDFTable2,
                                                        JobDetailItem.LabelFromUDFTable3,
                                                        JobDetailItem.LabelFromUDFTable4,
                                                        JobDetailItem.LabelFromUDFTable5,
                                                        JobDetailItem.JobOpen,
                                                        JobDetailItem.JobComponent,
                                                        JobDetailItem.BillHold,
                                                        JobDetailItem.AccountExecutiveCode,
                                                        JobDetailItem.AccountExecutive,
                                                        JobDetailItem.ManagerCode,
                                                        JobDetailItem.Manager,
                                                        JobDetailItem.ComponentDateOpened,
                                                        JobDetailItem.DueDate,
                                                        JobDetailItem.StartDate,
                                                        JobDetailItem.Status,
                                                        JobDetailItem.GutPercentComplete,
                                                        JobDetailItem.AdSize,
                                                        JobDetailItem.DepartmentTeamCode,
                                                        JobDetailItem.DepartmentTeam,
                                                        JobDetailItem.MarkupPercent,
                                                        JobDetailItem.CreativeInstructions,
                                                        JobDetailItem.JobProcessControl,
                                                        JobDetailItem.ComponentDescription,
                                                        JobDetailItem.ComponentComments,
                                                        JobDetailItem.ComponentBudget,
                                                        JobDetailItem.EstimateNumber,
                                                        JobDetailItem.EstimateComponentNumber,
                                                        JobDetailItem.ClientApproved,
                                                        JobDetailItem.ClientApprovalDate,
                                                        JobDetailItem.ClientApprovedBy,
                                                        JobDetailItem.InternallyApproved,
                                                        JobDetailItem.InternalApprovalDate,
                                                        JobDetailItem.InternallyApprovedBy,
                                                        JobDetailItem.BillingUser,
                                                        JobDetailItem.AdvanceBillFlag,
                                                        JobDetailItem.DeliveryInstructions,
                                                        JobDetailItem.JobTypeCode,
                                                        JobDetailItem.JobTypeDescription,
                                                        JobDetailItem.Taxable,
                                                        JobDetailItem.TaxCode,
                                                        JobDetailItem.TaxCodeDescription,
                                                        JobDetailItem.NonBillable,
                                                        JobDetailItem.AlertGroup,
                                                        JobDetailItem.AdNumber,
                                                        JobDetailItem.AccountNumber,
                                                        JobDetailItem.AccountNumberDescription,
                                                        JobDetailItem.IncomeRecognitionMethod,
                                                        JobDetailItem.MarketCode,
                                                        JobDetailItem.MarketDescription,
                                                        JobDetailItem.ServiceFeeJob,
                                                        JobDetailItem.ServiceFeeTypeCode,
                                                        JobDetailItem.ServiceFeeTypeDescription,
                                                        JobDetailItem.Archived,
                                                        JobDetailItem.TrafficScheduleRequired,
                                                        JobDetailItem.ClientPO,
                                                        JobDetailItem.CompLabelFromUDFTable1,
                                                        JobDetailItem.CompLabelFromUDFTable2,
                                                        JobDetailItem.CompLabelFromUDFTable3,
                                                        JobDetailItem.CompLabelFromUDFTable4,
                                                        JobDetailItem.CompLabelFromUDFTable5,
                                                        JobDetailItem.JobTemplateCode,
                                                        JobDetailItem.FiscalPeriodCode,
                                                        JobDetailItem.FiscalPeriodDescription,
                                                        JobDetailItem.JobQuantity,
                                                        JobDetailItem.BlackplateVersionCode,
                                                        JobDetailItem.BlackplateVersionDesc,
                                                        JobDetailItem.BlackplateVersion2Code,
                                                        JobDetailItem.BlackplateVersion2Desc,
                                                        JobDetailItem.ClientContactCode,
                                                        JobDetailItem.ClientContactID,
                                                        JobDetailItem.BABatchID,
                                                        JobDetailItem.ClientContact,
                                                        JobDetailItem.SelectedBABatchID,
                                                        JobDetailItem.BillingCommandCenterID,
                                                        JobDetailItem.AlertAssignmentTemplate,
                                                        JobDetailItem.IsEstimateNonBillable,
                                                        JobDetailItem.IsNewBusiness,
                                                        JobDetailItem.Agency,
                                                        JobDetailItem.ProductUDF1,
                                                        JobDetailItem.ProductUDF2,
                                                        JobDetailItem.ProductUDF3,
                                                        JobDetailItem.ProductUDF4,
                                                        JobDetailItem.CompletedDate,
                                                        JobDetailItem.JobProcessControlDate,
                                                        JobDetailItem.ClientType1Code,
                                                        JobDetailItem.ClientType1Description,
                                                        JobDetailItem.ClientType2Code,
                                                        JobDetailItem.ClientType2Description,
                                                        JobDetailItem.ClientType3Code,
                                                        JobDetailItem.ClientType3Description Into JDI = Group
                                 Select New AdvantageFramework.Reporting.Database.Classes.JobDetailReport With {.JobNumber = JobNumber,
                                                                                                               .JobComponentNumber = JobComponentNumber,
                                                                                                               .OfficeCode = OfficeCode,
                                                                                                               .OfficeDescription = OfficeDescription,
                                                                                                               .ClientCode = ClientCode,
                                                                                                               .ClientDescription = ClientDescription,
                                                                                                               .DivisionCode = DivisionCode,
                                                                                                               .DivisionDescription = DivisionDescription,
                                                                                                               .ProductCode = ProductCode,
                                                                                                               .ProductDescription = ProductDescription,
                                                                                                               .CampaignID = CampaignID,
                                                                                                               .CampaignCode = CampaignCode,
                                                                                                               .CampaignName = CampaignName,
                                                                                                               .BillingBudget = BillingBudget,
                                                                                                               .IncomeBudget = IncomeBudget,
                                                                                                               .SalesClassCode = SalesClassCode,
                                                                                                               .SalesClassDescription = SalesClassDescription,
                                                                                                               .UserCode = UserCode,
                                                                                                               .JobCreateDate = JobCreateDate,
                                                                                                               .JobDescription = JobDescription,
                                                                                                               .JobDateOpened = JobDateOpened,
                                                                                                               .RushChargesApproved = RushChargesApproved,
                                                                                                               .ApprovedEstimateRequired = ApprovedEstimateRequired,
                                                                                                               .Comment = Comment,
                                                                                                               .ClientReference = ClientReference,
                                                                                                               .BillingCoopCode = BillingCoopCode,
                                                                                                               .SalesClassFormatCode = SalesClassFormatCode,
                                                                                                               .ComplexityCode = ComplexityCode,
                                                                                                               .ComplexityDescription = ComplexityDescription,
                                                                                                               .PromotionCode = PromotionCode,
                                                                                                               .BillingComment = BillingComment,
                                                                                                               .LabelFromUDFTable1 = LabelFromUDFTable1,
                                                                                                               .LabelFromUDFTable2 = LabelFromUDFTable2,
                                                                                                               .LabelFromUDFTable3 = LabelFromUDFTable3,
                                                                                                               .LabelFromUDFTable4 = LabelFromUDFTable4,
                                                                                                               .LabelFromUDFTable5 = LabelFromUDFTable5,
                                                                                                               .JobOpen = JobOpen,
                                                                                                               .JobComponent = JobComponent,
                                                                                                               .BillHold = BillHold,
                                                                                                               .AccountExecutiveCode = AccountExecutiveCode,
                                                                                                               .AccountExecutive = AccountExecutive,
                                                                                                               .ManagerCode = ManagerCode,
                                                                                                               .Manager = Manager,
                                                                                                               .ComponentDateOpened = ComponentDateOpened,
                                                                                                               .DueDate = DueDate,
                                                                                                               .StartDate = StartDate,
                                                                                                               .Status = Status,
                                                                                                               .GutPercentComplete = GutPercentComplete,
                                                                                                               .AdSize = AdSize,
                                                                                                               .DepartmentTeamCode = DepartmentTeamCode,
                                                                                                               .DepartmentTeam = DepartmentTeam,
                                                                                                               .MarkupPercent = MarkupPercent,
                                                                                                               .CreativeInstructions = CreativeInstructions,
                                                                                                               .JobProcessControl = JobProcessControl,
                                                                                                               .ComponentDescription = ComponentDescription,
                                                                                                               .ComponentComments = ComponentComments,
                                                                                                               .ComponentBudget = ComponentBudget,
                                                                                                               .EstimateNumber = EstimateNumber,
                                                                                                               .EstimateComponentNumber = EstimateComponentNumber,
                                                                                                               .ClientApproved = ClientApproved,
                                                                                                               .ClientApprovalDate = ClientApprovalDate,
                                                                                                               .ClientApprovedBy = ClientApprovedBy,
                                                                                                               .InternallyApproved = InternallyApproved,
                                                                                                               .InternalApprovalDate = InternalApprovalDate,
                                                                                                               .InternallyApprovedBy = InternallyApprovedBy,
                                                                                                               .BillingUser = BillingUser,
                                                                                                               .AdvanceBillFlag = AdvanceBillFlag,
                                                                                                               .DeliveryInstructions = DeliveryInstructions,
                                                                                                               .JobTypeCode = JobTypeCode,
                                                                                                               .JobTypeDescription = JobTypeDescription,
                                                                                                               .Taxable = Taxable,
                                                                                                               .TaxCode = TaxCode,
                                                                                                               .TaxCodeDescription = TaxCodeDescription,
                                                                                                               .NonBillable = NonBillable,
                                                                                                               .AlertGroup = AlertGroup,
                                                                                                               .AdNumber = AdNumber,
                                                                                                               .AccountNumber = AccountNumber,
                                                                                                               .AccountNumberDescription = AccountNumberDescription,
                                                                                                               .IncomeRecognitionMethod = IncomeRecognitionMethod,
                                                                                                               .MarketCode = MarketCode,
                                                                                                               .MarketDescription = MarketDescription,
                                                                                                               .ServiceFeeJob = ServiceFeeJob,
                                                                                                               .ServiceFeeTypeCode = ServiceFeeTypeCode,
                                                                                                               .ServiceFeeTypeDescription = ServiceFeeTypeDescription,
                                                                                                               .Archived = Archived,
                                                                                                               .TrafficScheduleRequired = TrafficScheduleRequired,
                                                                                                               .ClientPO = ClientPO,
                                                                                                               .CompLabelFromUDFTable1 = CompLabelFromUDFTable1,
                                                                                                               .CompLabelFromUDFTable2 = CompLabelFromUDFTable2,
                                                                                                               .CompLabelFromUDFTable3 = CompLabelFromUDFTable3,
                                                                                                               .CompLabelFromUDFTable4 = CompLabelFromUDFTable4,
                                                                                                               .CompLabelFromUDFTable5 = CompLabelFromUDFTable5,
                                                                                                               .JobTemplateCode = JobTemplateCode,
                                                                                                               .FiscalPeriodCode = FiscalPeriodCode,
                                                                                                               .FiscalPeriodDescription = FiscalPeriodDescription,
                                                                                                               .JobQuantity = JobQuantity,
                                                                                                               .BlackplateVersionCode = BlackplateVersionCode,
                                                                                                               .BlackplateVersionDesc = BlackplateVersionDesc,
                                                                                                               .BlackplateVersion2Code = BlackplateVersion2Code,
                                                                                                               .BlackplateVersion2Desc = BlackplateVersion2Desc,
                                                                                                               .ClientContactCode = ClientContactCode,
                                                                                                               .ClientContactID = ClientContactID,
                                                                                                               .BABatchID = BABatchID,
                                                                                                               .ClientContact = ClientContact,
                                                                                                               .SelectedBABatchID = SelectedBABatchID,
                                                                                                               .BillingCommandCenterID = BillingCommandCenterID,
                                                                                                               .AlertAssignmentTemplate = AlertAssignmentTemplate,
                                                                                                               .Hours = JDI.Sum(Function(Entity) Entity.Hours),
                                                                                                               .Quantity = JDI.Sum(Function(Entity) Entity.Quantity),
                                                                                                               .BillableLessResale = JDI.Sum(Function(Entity) Entity.BillableLessResale),
                                                                                                               .BillableTotal = JDI.Sum(Function(Entity) Entity.BillableTotal),
                                                                                                               .ExtMarkupAmount = JDI.Sum(Function(Entity) Entity.ExtMarkupAmount),
                                                                                                               .NonResaleTaxAmount = JDI.Sum(Function(Entity) Entity.NonResaleTaxAmount),
                                                                                                               .ResaleTaxAmount = JDI.Sum(Function(Entity) Entity.ResaleTaxAmount),
                                                                                                               .Total = JDI.Sum(Function(Entity) Entity.Total),
                                                                                                               .NetAmount = JDI.Sum(Function(Entity) Entity.NetAmount),
                                                                                                               .CostAmount = JDI.Sum(Function(Entity) Entity.CostAmount),
                                                                                                               .EstimateHours = JDI.Sum(Function(Entity) Entity.EstimateHours),
                                                                                                               .EstimateHoursAmount = JDI.Sum(Function(Entity) Entity.EstimateHoursAmount),
                                                                                                               .EstimateQuantity = JDI.Sum(Function(Entity) Entity.EstimateQuantity),
                                                                                                               .EstimateTotalAmount = JDI.Sum(Function(Entity) Entity.EstimateTotalAmount),
                                                                                                               .EstimateContTotalAmount = JDI.Sum(Function(Entity) Entity.EstimateContTotalAmount),
                                                                                                               .EstimateNonResaleTaxAmount = JDI.Sum(Function(Entity) Entity.EstimateNonResaleTaxAmount),
                                                                                                               .EstimateResaleTaxAmount = JDI.Sum(Function(Entity) Entity.EstimateResaleTaxAmount),
                                                                                                               .EstimateMarkupAmount = JDI.Sum(Function(Entity) Entity.EstimateMarkupAmount),
                                                                                                               .EstimateCostAmount = JDI.Sum(Function(Entity) Entity.EstimateCostAmount),
                                                                                                               .IsEstimateNonBillable = IsEstimateNonBillable,
                                                                                                               .EstimateFeeTime = JDI.Sum(Function(Entity) Entity.EstimateFeeTime),
                                                                                                               .EstimateNetAmount = JDI.Sum(Function(Entity) Entity.EstimateNetAmount),
                                                                                                               .BillingApprovalHours = JDI.Sum(Function(Entity) Entity.BillingApprovalHours),
                                                                                                               .BillingApprovalCostAmount = JDI.Sum(Function(Entity) Entity.BillingApprovalCostAmount),
                                                                                                               .BillingApprovalExtNetAmount = JDI.Sum(Function(Entity) Entity.BillingApprovalExtNetAmount),
                                                                                                               .BillingApprovalTotalAmount = JDI.Sum(Function(Entity) Entity.BillingApprovalTotalAmount),
                                                                                                               .OpenPurchaseOrderAmount = JDI.Sum(Function(Entity) Entity.OpenPurchaseOrderAmount),
                                                                                                               .OpenPurchaseOrderGrossAmount = JDI.Sum(Function(Entity) Entity.OpenPurchaseOrderGrossAmount),
                                                                                                               .BilledAmount = JDI.Sum(Function(Entity) Entity.BilledAmount),
                                                                                                               .BilledWithResale = JDI.Sum(Function(Entity) Entity.BilledWithResale),
                                                                                                               .AdvanceBilledTotal = JDI.Sum(Function(Entity) Entity.AdvanceBilledTotal),
                                                                                                               .FlatIncomeRecognized = JDI.Sum(Function(Entity) Entity.FlatIncomeRecognized),
                                                                                                               .AdvanceBillingBalance = JDI.Sum(Function(Entity) Entity.AdvanceBillingBalance),
                                                                                                               .AdvanceBillingRetained = JDI.Sum(Function(Entity) Entity.AdvanceBillingRetained),
                                                                                                               .BilledHours = JDI.Sum(Function(Entity) Entity.BilledHours),
                                                                                                               .BilledQuantity = JDI.Sum(Function(Entity) Entity.BilledQuantity),
                                                                                                               .FeeTimeAmount = JDI.Sum(Function(Entity) Entity.FeeTimeAmount),
                                                                                                               .FeeTimeHours = JDI.Sum(Function(Entity) Entity.FeeTimeHours),
                                                                                                               .UnbilledAmount = JDI.Sum(Function(Entity) Entity.UnbilledAmount),
                                                                                                               .UnbilledAmountLessResale = JDI.Sum(Function(Entity) Entity.UnbilledAmountLessResale),
                                                                                                               .UnbilledHours = JDI.Sum(Function(Entity) Entity.UnbilledHours),
                                                                                                               .UnbilledQuantity = JDI.Sum(Function(Entity) Entity.UnbilledQuantity),
                                                                                                               .NonBillableAmount = JDI.Sum(Function(Entity) Entity.NonBillableAmount),
                                                                                                               .NonBillableHours = JDI.Sum(Function(Entity) Entity.NonBillableHours),
                                                                                                               .NonBillableQuantity = JDI.Sum(Function(Entity) Entity.NonBillableQuantity),
                                                                                                               .IsNewBusiness = IsNewBusiness,
                                                                                                               .Agency = Agency,
                                                                                                               .ProductUDF1 = ProductUDF1,
                                                                                                               .ProductUDF2 = ProductUDF2,
                                                                                                               .ProductUDF3 = ProductUDF3,
                                                                                                               .ProductUDF4 = ProductUDF4,
                                                                                                               .CompletedDate = CompletedDate,
                                                                                                               .JobProcessControlDate = JobProcessControlDate,
                                                                                                               .ClientType1Code = ClientType1Code,
                                                                                                               .ClientType1Description = ClientType1Description,
                                                                                                               .ClientType2Code = ClientType2Code,
                                                                                                               .ClientType2Description = ClientType2Description,
                                                                                                               .ClientType3Code = ClientType3Code,
                                                                                                               .ClientType3Description = ClientType3Description,
                                                                                                               .CurrentHours = JDI.Sum(Function(Entity) Entity.CurrentHours),
                                                                                                               .CurrentHoursAmount = JDI.Sum(Function(Entity) Entity.CurrentHoursAmount),
                                                                                                               .CurrentIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.CurrentIncomeOnlyCharges),
                                                                                                               .CurrentVendorCharges = JDI.Sum(Function(Entity) Entity.CurrentVendorCharges),
                                                                                                               .CurrentTotal = JDI.Sum(Function(Entity) Entity.CurrentTotal),
                                                                                                               .PriorHours = JDI.Sum(Function(Entity) Entity.PriorHours),
                                                                                                               .PriorHoursAmount = JDI.Sum(Function(Entity) Entity.PriorHoursAmount),
                                                                                                               .PriorIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.PriorIncomeOnlyCharges),
                                                                                                               .PriorVendorCharges = JDI.Sum(Function(Entity) Entity.PriorVendorCharges),
                                                                                                               .PriorTotal = JDI.Sum(Function(Entity) Entity.PriorTotal),
                                                                                                               .PriorYearHours = JDI.Sum(Function(Entity) Entity.PriorYearHours),
                                                                                                               .PriorYearHoursAmount = JDI.Sum(Function(Entity) Entity.PriorYearHoursAmount),
                                                                                                               .PriorYearIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.PriorYearIncomeOnlyCharges),
                                                                                                               .PriorYearVendorCharges = JDI.Sum(Function(Entity) Entity.PriorYearVendorCharges),
                                                                                                               .PriorYearTotal = JDI.Sum(Function(Entity) Entity.PriorYearTotal),
                                                                                                               .TotalToDateHours = JDI.Sum(Function(Entity) Entity.TotalToDateHours),
                                                                                                               .TotalToDateHoursAmount = JDI.Sum(Function(Entity) Entity.TotalToDateHoursAmount),
                                                                                                               .TotalToDateIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.TotalToDateIncomeOnlyCharges),
                                                                                                               .TotalToDateVendorCharges = JDI.Sum(Function(Entity) Entity.TotalToDateVendorCharges),
                                                                                                               .TotalToDate = JDI.Sum(Function(Entity) Entity.TotalToDate),
                                                                                                               .EstimateIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.EstimateIncomeOnlyCharges),
                                                                                                               .BilledIncomeOnlyCharges = JDI.Sum(Function(Entity) Entity.BilledIncomeOnlyCharges),
                                                                                                               .PercentCompleteHours = Math.Round(If(CDec(JDI.Sum(Function(Entity) Entity.EstimateHours)) > 0, ((JDI.Where(Function(Entity) Entity.ResourceType = "E").Sum(Function(Entity) Entity.Hours)) / JDI.Sum(Function(Entity) Entity.EstimateHours)) * 100, CDec(0)), 2, MidpointRounding.AwayFromZero),
                                                                                                               .PercentCompleteAmount = Math.Round(If(CDec(JDI.Sum(Function(Entity) Entity.EstimateTotalAmount)) > 0, ((JDI.Where(Function(Entity) Entity.ResourceType = "E").Sum(Function(Entity) Entity.Total) / JDI.Sum(Function(Entity) Entity.EstimateTotalAmount))) * 100, CDec(0)), 2, MidpointRounding.AwayFromZero)}).ToList

        End Function
        Private Function LoadJobDetailItemData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean,
                                               ByVal ParameterDictionary As Generic.Dictionary(Of String, Object),
                                               ReportColumns As Generic.List(Of AdvantageFramework.Reporting.Classes.ReportColumn)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport) = Nothing
            Dim SQLString As String = String.Empty
            Dim ReportColumnString As String = String.Empty
            'Dim ObjectQuery As IQueryable = Nothing
            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriodCode As String = String.Empty
            Dim JobDateCriteria As Integer = 0
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim IncludeClosedJobs As Boolean = False
            Dim ClientCodes As String = String.Empty
            Dim ClientDivisionCodes As String = String.Empty
            Dim ClientDivisionProductCodes As String = String.Empty
            Dim AccountExecutiveCodes As String = String.Empty
            Dim CampaignIDs As String = String.Empty
            Dim JobTypeCodes As String = String.Empty
            Dim EmployeeTimeCutoffDate As Date = Date.MinValue
            Dim IncomeOnlyCutoffDate As Date = Date.MinValue
            Dim APCutoffDate As Date = Date.MinValue
            Dim APPostPeriodCode As String = String.Empty
            Dim JobDetailItemDatas As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemData) = Nothing
            Dim JobDetailItemDataCores As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemDataCore) = Nothing
            Dim IncludeBilledRange As Boolean = False
            Dim BilledStartPostPeriodCode As String = String.Empty
            Dim BilledEndPostPeriodCode As String = String.Empty
            Dim CurrentStartDate As Date = Date.MinValue
            Dim CurrentEndDate As Date = Date.MinValue
            Dim CurrentPostPeriodCode As String = String.Empty
            Dim PriorEndDate As Date = Date.MinValue
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterIncludeBilledRange As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCurrentStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateOption As System.Data.SqlClient.SqlParameter = Nothing


            Try

                If DbContext.Database.Connection.State <> ConnectionState.Open Then

                    DbContext.Database.Connection.Open()

                End If

                If ReportColumns IsNot Nothing AndAlso ReportColumns.Count > 0 Then

                    If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then

                        CurrentPostPeriod = AdvantageFramework.Database.Procedures.PostPeriod.LoadByPostPeriodCode(DbContext, ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString))

                    Else

                        CurrentPostPeriod = Nothing

                    End If

                    If CurrentPostPeriod IsNot Nothing Then

                        PriorPostPeriodCode = (CurrentPostPeriod.Year - 1) & "12"

                        PriorPostPeriod = AdvantageFramework.Database.Procedures.PostPeriod.LoadByPostPeriodCode(DbContext, PriorPostPeriodCode)

                        If PriorPostPeriod IsNot Nothing AndAlso PriorPostPeriod.EndDate.HasValue Then

                            PriorEndDate = PriorPostPeriod.EndDate.Value

                        End If

                    End If

                    CurrentStartDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                    CurrentEndDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)

                    If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then

                        BilledStartPostPeriodCode = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)

                    End If

                    If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then

                        BilledEndPostPeriodCode = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)

                    End If

                    IncludeBilledRange = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                    JobDateCriteria = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
                    StartDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
                    EndDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
                    IncludeClosedJobs = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) AndAlso
                            ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                        ClientCodes = "'" & String.Join("','", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray) & "'"

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) AndAlso
                            ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                        ClientDivisionCodes = "'" & String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray) & "'"

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) AndAlso
                            ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                        ClientDivisionProductCodes = "'" & String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray) & "'"

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) AndAlso
                            ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                        AccountExecutiveCodes = "'" & String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray) & "'"

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso
                            ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                        CampaignIDs = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso
                            ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                        JobTypeCodes = "'" & String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray) & "'"

                    End If

                    EmployeeTimeCutoffDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                    IncomeOnlyCutoffDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)

                    If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then

                        APPostPeriodCode = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)

                    End If

                    ShowJobsWithNoDetails = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
                    '========
                    '
                    '========
                    SQLString = "SELECT "

                    ReportColumnString = Join(ReportColumns.Where(Function(RC) RC.HasDefinedColumn = True).OrderBy(Function(RC) RC.Index).Select(Function(RC) RC.ColumnName).ToArray, ",")

                    SQLString &= ReportColumnString & " "
                    SQLString &= "FROM "
                    SQLString &= "[dbo].[DS_JOB_DETAIL_ITEM] "
                    SQLString &= "WHERE (1=1) "

                    If JobDateCriteria = 1 Then

                        SQLString &= "AND  JobCreateDate >= '" & StartDate.ToShortDateString & " " & StartDate.ToString("h:mm:ss") & "' AND JobCreateDate <= CONVERT(DATETIME, '" & EndDate.ToShortDateString & " 23:59:00', 101) "

                    ElseIf JobDateCriteria = 2 Then

                        SQLString &= "AND  ComponentDateOpened >= '" & StartDate.ToShortDateString & " " & StartDate.ToString("h:mm:ss") & "' AND ComponentDateOpened <= CONVERT(DATETIME, '" & EndDate.ToShortDateString & " 23:59:00', 101) "

                    ElseIf JobDateCriteria = 3 Then

                        SQLString &= "AND  DueDate >= '" & StartDate.ToShortDateString & " " & StartDate.ToString("h:mm:ss") & "' AND DueDate <= CONVERT(DATETIME, '" & EndDate.ToShortDateString & " 23:59:00', 101) "

                    ElseIf JobDateCriteria = 4 Then

                        SQLString &= "AND  StartDate >= '" & StartDate.ToShortDateString & " " & StartDate.ToString("h:mm:ss") & "' AND StartDate <= CONVERT(DATETIME, '" & EndDate.ToShortDateString & " 23:59:00', 101) "

                    ElseIf JobDateCriteria = 5 Then

                        SQLString &= "AND  ItemDate >= '" & StartDate.ToShortDateString & " " & StartDate.ToString("h:mm:ss") & "' AND ItemDate <= CONVERT(DATETIME, '" & EndDate.ToShortDateString & " 23:59:00', 101) "

                    End If

                    If IncludeClosedJobs = False Then

                        SQLString &= "AND  (JobProcessControl <> 'Closed' AND JobProcessControl <> 'Archive') "

                    End If

                    If String.IsNullOrWhiteSpace(ClientCodes) = False Then

                        SQLString &= "AND ClientCode IN (" & ClientCodes & ") "

                    End If

                    If String.IsNullOrWhiteSpace(ClientDivisionCodes) = False Then

                        SQLString &= "AND ClientCode + '|' + DivisionCode IN (" & ClientDivisionCodes & ") "

                    End If

                    If String.IsNullOrWhiteSpace(ClientDivisionProductCodes) = False Then

                        SQLString &= "AND ClientCode + '|' + DivisionCode + '|' + ProductCode IN (" & ClientDivisionProductCodes & ") "

                    End If

                    If String.IsNullOrWhiteSpace(AccountExecutiveCodes) = False Then

                        SQLString &= "AND AccountExecutiveCode IN (" & AccountExecutiveCodes & ") "

                    End If

                    If String.IsNullOrWhiteSpace(CampaignIDs) = False Then

                        SQLString &= "AND CampaignID IN (" & CampaignIDs & ") "

                    End If

                    If String.IsNullOrWhiteSpace(JobTypeCodes) = False Then

                        SQLString &= "AND JobTypeCode IN (" & JobTypeCodes & ") "

                    End If

                    SQLString &= "AND 1 = CASE WHEN ResourceType = 'E' AND ItemDate <= '" & EmployeeTimeCutoffDate.ToShortDateString & "' THEN 1 
		                                   WHEN ResourceType = 'V' AND PostPeriodCode <= '" & APPostPeriodCode & "' THEN 1
					                       WHEN ResourceType = 'I' AND ItemDate <= '" & IncomeOnlyCutoffDate.ToShortDateString & "' THEN 1
					                       WHEN ResourceType IN ('AB','C','EI','ES','PO','ND') THEN 1 ELSE 0 END "

                    If ShowJobsWithNoDetails Then

                        SQLString &= "AND ResourceType = 'ND' "

                    Else

                        SQLString &= "AND ResourceType <> 'ND' "

                    End If

                    JobDetailItemDataCores = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemDataCore)(SQLString).ToList

                    JobDetailItemDatas = JobDetailItemDataCores.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemData(Entity, IncludeBilledRange, BilledStartPostPeriodCode, BilledEndPostPeriodCode,
                                                                                                                                                            CurrentStartDate, CurrentEndDate, CurrentPostPeriodCode, PriorEndDate,
                                                                                                                                                            PriorPostPeriodCode)).ToList

                    DynamicReportObjects = JobDetailItemDatas.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)).ToList

                Else

                    SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                    SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                    SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)

                    SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                    SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                    SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                    SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
                    SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@INCLUDE_CLOSED", SqlDbType.Bit)

                    SqlParameterIncludeBilledRange = New System.Data.SqlClient.SqlParameter("@IncludeBilledRange", SqlDbType.Bit)
                    SqlParameterStartPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_START_PERIOD", SqlDbType.VarChar)
                    SqlParameterEndPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_END_PERIOD", SqlDbType.VarChar)

                    SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                    SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                    SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                    SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                    SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                    SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)

                    SqlParameterCurrentStartDate = New System.Data.SqlClient.SqlParameter("@Current_StartDate", SqlDbType.SmallDateTime)
                    SqlParameterCurrentEndDate = New System.Data.SqlClient.SqlParameter("@Current_EndDate", SqlDbType.SmallDateTime)
                    SqlParameterCurrentPeriod = New System.Data.SqlClient.SqlParameter("@CURRENT_PERIOD", SqlDbType.VarChar)

                    SqlParameterDateOption = New System.Data.SqlClient.SqlParameter("@DateOption", SqlDbType.VarChar)

                    SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                    SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
                    If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then
                        SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)
                    Else
                        SqlParameterAccountsPayablePostingPeriodCutoff.Value = System.DBNull.Value
                    End If

                    SqlParameterCurrentStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                    SqlParameterCurrentEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
                    If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then
                        SqlParameterCurrentPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)
                    Else
                        SqlParameterCurrentPeriod.Value = System.DBNull.Value
                    End If

                    SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
                    SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
                    SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
                    SqlParameterShowJobsWithNoDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
                    SqlParameterIncludeClosedJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

                    SqlParameterIncludeBilledRange.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                    If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then
                        SqlParameterStartPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
                    Else
                        SqlParameterStartPeriodBilled.Value = System.DBNull.Value
                    End If
                    If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then
                        SqlParameterEndPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)
                    Else
                        SqlParameterEndPeriodBilled.Value = System.DBNull.Value
                    End If
                    SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                        SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                    Else

                        SqlParameterClientCodeList.Value = System.DBNull.Value

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                        SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                    Else

                        SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                        SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                    Else

                        SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                        SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                    Else

                        SqlParameterAECodeList.Value = System.DBNull.Value

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                        SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                    Else

                        SqlParameterCampaignIDList.Value = System.DBNull.Value

                    End If

                    If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                        SqlParameterJobTypeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray)

                    Else

                        SqlParameterJobTypeList.Value = System.DBNull.Value

                    End If

                    SqlParameterDateOption.Value = System.DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.DateOption.ToString)

                    DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport) _
                                                                                    ("EXEC [dbo].[advsp_job_detail_item_load] @DATE_TYPE, @START_DATE, @END_DATE, @SHOW_JOBS_WO_DETAILS, @INCLUDE_CLOSED,@et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, " &
                                                                                     "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @CampaignIDList, @IncludeBilledRange, @BILLED_START_PERIOD, @BILLED_END_PERIOD, @DateOption, @Current_StartDate, @Current_EndDate, @CURRENT_PERIOD, @JobTypeList",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterShowJobsWithNoDetails, SqlParameterIncludeClosedJobs, SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterCampaignIDList, SqlParameterIncludeBilledRange, SqlParameterStartPeriodBilled, SqlParameterEndPeriodBilled, SqlParameterDateOption, SqlParameterCurrentStartDate, SqlParameterCurrentEndDate, SqlParameterCurrentPeriod, SqlParameterJobTypeList).ToList



                End If

                '    'DynamicReportObjects = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport)

                '    'ObjectQuery = DbContext.GetQuery(Of AdvantageFramework.Database.Entities.JobDetailItemABs).Where(FilterString)

                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("From", [From]))
                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("To", [To]))

                '    'DynamicReportObjects.AddRange(ObjectQuery.OfType(Of AdvantageFramework.Reporting.Database.Views.JobDetailItemAB).ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)))

                '    'ObjectQuery = DbContext.GetQuery(Of AdvantageFramework.Database.Entities.JobDetailItemCs.Where(FilterString)

                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("From", [From]))
                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("To", [To]))

                '    'DynamicReportObjects.AddRange(ObjectQuery.OfType(Of AdvantageFramework.Reporting.Database.Views.JobDetailItemC).ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)))

                '    'ObjectQuery = DbContext.GetQuery(Of AdvantageFramework.Database.Entities.JobDetailItemEIs.Where(FilterString)

                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("From", [From]))
                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("To", [To]))

                '    'DynamicReportObjects.AddRange(ObjectQuery.OfType(Of AdvantageFramework.Reporting.Database.Views.JobDetailItemEI).ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)))

                '    'ObjectQuery = DbContext.GetQuery(Of AdvantageFramework.Database.Entities.JobDetailItemEs.Where(FilterString)

                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("From", [From]))
                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("To", [To]))

                '    'DynamicReportObjects.AddRange(ObjectQuery.OfType(Of AdvantageFramework.Reporting.Database.Views.JobDetailItemE).ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)))

                '    'ObjectQuery = DbContext.GetQuery(Of AdvantageFramework.Database.Entities.JobDetailItemES1.Where(FilterString)

                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("From", [From]))
                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("To", [To]))

                '    'DynamicReportObjects.AddRange(ObjectQuery.OfType(Of AdvantageFramework.Reporting.Database.Views.JobDetailItemES).ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)))

                '    'ObjectQuery = DbContext.GetQuery(Of AdvantageFramework.Database.Entities.JobDetailItemIs.Where(FilterString)

                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("From", [From]))
                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("To", [To]))

                '    'DynamicReportObjects.AddRange(ObjectQuery.OfType(Of AdvantageFramework.Reporting.Database.Views.JobDetailItemI).ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)))

                '    'ObjectQuery = DbContext.GetQuery(Of AdvantageFramework.Database.Entities.JobDetailItemPOes.Where(FilterString)

                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("From", [From]))
                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("To", [To]))

                '    'DynamicReportObjects.AddRange(ObjectQuery.OfType(Of AdvantageFramework.Reporting.Database.Views.JobDetailItemPO).ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)))

                '    'ObjectQuery = DbContext.GetQuery(Of AdvantageFramework.Database.Entities.JobDetailItemVs.Where(FilterString)

                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("From", [From]))
                '    'ObjectQuery.Parameters.Add(New System.Data.Entity.Core.Objects.ObjectParameter("To", [To]))

                '    'DynamicReportObjects.AddRange(ObjectQuery.OfType(Of AdvantageFramework.Reporting.Database.Views.JobDetailItemV).ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)))

                '    'If ShowJobsWithNoDetails Then

                '    '    DynamicReportObjects.AddRange(DbContext.GetQuery(Of AdvantageFramework.Database.Entities.JobDetailItemNDs.ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport(Entity)))

                '    'End If

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailItemData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadJobPurchaseOrderReportSP(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal FromDate As Date, ByVal ToDate As Date) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobPurchaseOrderReportSP)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobPurchaseOrderReportSP) = Nothing

            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@FromDate", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@ToDate", SqlDbType.SmallDateTime)
                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)

                SqlParameterFromDate.Value = FromDate
                SqlParameterToDate.Value = ToDate
                SqlParameterCriteria.Value = Criteria

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobPurchaseOrderReportSP) _
                                                                                    ("EXEC [dbo].[advsp_job_purchase_order_load] @FromDate, @ToDate, @DATE_TYPE",
                                                                                     SqlParameterFromDate, SqlParameterToDate, SqlParameterCriteria).ToList



            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobPurchaseOrderReportSP = DynamicReportObjects
            End Try

        End Function
        'Public Function LoadJobDetailItemDS(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.JobDetailData)

        '    Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.JobDetailData) = Nothing

        '    Dim SelectedClients As Generic.List(Of String) = Nothing
        '    Dim SelectedDivisions As Generic.List(Of String) = Nothing
        '    Dim SelectedProducts As Generic.List(Of String) = Nothing
        '    Dim SelectedCampaigns As Generic.List(Of Integer) = Nothing
        '    Dim SelectedAccountExecutives As Generic.List(Of String) = Nothing
        '    Dim SelectedJobTypes As Generic.List(Of String) = Nothing

        '    Dim EmployeeDateCutoff As DateTime = Nothing
        '    Dim IncomeOnlyDateCutoff As DateTime = Nothing
        '    Dim AccountsPayablePostingPeriodCutoff As String = ""
        '    Dim CurrentStartDate As DateTime = Nothing
        '    Dim CurrentEndDate As DateTime = Nothing
        '    Dim CurrentPeriod As String = ""

        '    Dim JobDateCriteria As String = ""
        '    Dim JobStartDate As DateTime = Nothing
        '    Dim JobEndDate As DateTime = Nothing
        '    Dim ShowJobsWithNoDetails As Boolean = False
        '    Dim IncludeClosed As Boolean = False

        '    Dim IncludeBilledRange As Boolean = False
        '    Dim StartingPostPeriodCode As String = ""
        '    Dim EndingPostPeriodCode As String = ""


        '    Try

        '        SelectedClients = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString)
        '        SelectedDivisions = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString)
        '        SelectedProducts = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString)
        '        SelectedCampaigns = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)
        '        SelectedAccountExecutives = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString)
        '        SelectedJobTypes = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString)

        '        EmployeeDateCutoff = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
        '        IncomeOnlyDateCutoff = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
        '        AccountsPayablePostingPeriodCutoff = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)

        '        CurrentStartDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
        '        CurrentEndDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
        '        CurrentPeriod = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)

        '        JobDateCriteria = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
        '        JobStartDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
        '        JobEndDate = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
        '        ShowJobsWithNoDetails = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
        '        IncludeClosed = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

        '        IncludeBilledRange = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
        '        StartingPostPeriodCode = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
        '        EndingPostPeriodCode = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)


        '        Try

        '            DynamicReportObjects = AdvantageFramework.Reporting.Database.Procedures.JobDetailData.Load(DbContext).Where(Function(Entity) ((Entity.ResourceType = "E" AndAlso Entity.ItemDate <= EmployeeDateCutoff) OrElse
        '                                                                                                                                         (Entity.ResourceType = "I" AndAlso Entity.ItemDate <= IncomeOnlyDateCutoff) OrElse
        '                                                                                                                                         (Entity.ResourceType = "V" AndAlso Entity.PostPeriodCode <= AccountsPayablePostingPeriodCutoff) OrElse
        '                                                                                                                                         (Entity.ResourceType = "AB") OrElse (Entity.ResourceType = "C") OrElse (Entity.ResourceType = "EI") OrElse
        '                                                                                                                                         (Entity.ResourceType = "ES") OrElse (Entity.ResourceType = "PO") OrElse (Entity.ResourceType = "ND")) AndAlso
        '                                                                                                                                         Entity.JobProcessControl <> "Closed" AndAlso Entity.JobProcessControl <> "Archive").ToList

        '        Catch ex As Exception
        '            DynamicReportObjects = Nothing
        '        End Try



        '    Catch ex As Exception
        '        DynamicReportObjects = Nothing
        '    Finally
        '        LoadJobDetailItemDS = DynamicReportObjects
        '    End Try

        'End Function
        Public Function LoadJobDetailItemDataSet(ByVal DbContext As AdvantageFramework.Database.DbContext) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport) = Nothing
            'Dim ObjectQuery As IQueryable = Nothing

            Try

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport) _
                                                                                    ("EXEC [dbo].[advsp_job_detail_item_load_data]").ToList



            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailItemDataSet = DynamicReportObjects
            End Try

        End Function
        Private Function LoadProjectHoursUsedData(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, Criteria As Integer, From As Date, [To] As Date, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ProjectHoursUsedReport)

            'objects
            Dim SqlParameterSelectedDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSalesClassCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeCodes As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterSelectedDate = New System.Data.SqlClient.SqlParameter("@SelectedDate", SqlDbType.VarChar)
            SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.SmallDateTime)
            SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.SmallDateTime)
            SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@IncludeClosedJobs", SqlDbType.Bit)
            SqlParameterClientCodes = New System.Data.SqlClient.SqlParameter("@ClientCodes", SqlDbType.VarChar)
            SqlParameterAECodes = New System.Data.SqlClient.SqlParameter("@AECodes", SqlDbType.VarChar)
            SqlParameterSalesClassCodes = New System.Data.SqlClient.SqlParameter("@SalesClassCodes", SqlDbType.VarChar)
            SqlParameterJobTypeCodes = New System.Data.SqlClient.SqlParameter("@JobTypeCodes", SqlDbType.VarChar)

            SqlParameterSelectedDate.Value = [Enum].GetName(GetType(AdvantageFramework.Reporting.ProjectHoursUsedInitialCriteria), CInt(Criteria))
            SqlParameterStartDate.Value = From
            SqlParameterEndDate.Value = [To]

            If ParameterDictionary.ContainsKey("IncludeClosedJobs") Then

                If ParameterDictionary("IncludeClosedJobs") = False Then

                    SqlParameterIncludeClosedJobs.Value = 0

                Else

                    SqlParameterIncludeClosedJobs.Value = 1

                End If

            Else

                SqlParameterIncludeClosedJobs.Value = 0

            End If

            If ParameterDictionary.ContainsKey("ClientCodes") AndAlso ParameterDictionary("ClientCodes") IsNot Nothing Then

                SqlParameterClientCodes.Value = String.Join(",", DirectCast(ParameterDictionary("ClientCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterClientCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("AECodes") AndAlso ParameterDictionary("AECodes") IsNot Nothing Then

                SqlParameterAECodes.Value = String.Join(",", DirectCast(ParameterDictionary("AECodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterAECodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("SalesClassCodes") AndAlso ParameterDictionary("SalesClassCodes") IsNot Nothing Then

                SqlParameterSalesClassCodes.Value = String.Join(",", DirectCast(ParameterDictionary("SalesClassCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterSalesClassCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("JobTypeCodes") AndAlso ParameterDictionary("JobTypeCodes") IsNot Nothing Then

                SqlParameterJobTypeCodes.Value = String.Join(",", DirectCast(ParameterDictionary("JobTypeCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterJobTypeCodes.Value = System.DBNull.Value

            End If

            LoadProjectHoursUsedData = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.ProjectHoursUsedReport)("exec dbo.advsp_project_hours_used_report @SelectedDate, @StartDate, @EndDate, @IncludeClosedJobs, @ClientCodes, @AECodes, @SalesClassCodes, @JobTypeCodes",
                                                 SqlParameterSelectedDate, SqlParameterStartDate, SqlParameterEndDate, SqlParameterIncludeClosedJobs, SqlParameterClientCodes, SqlParameterAECodes, SqlParameterSalesClassCodes, SqlParameterJobTypeCodes).ToList


        End Function
        Private Function LoadProjectSummaryData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.ProjectSummary)

            Dim ProjectSummaryReports As Generic.List(Of AdvantageFramework.Database.Classes.ProjectSummary) = Nothing
            Dim AccountExecutivesCodesList As Generic.List(Of String) = Nothing
            Dim ClientCodesList As Generic.List(Of String) = Nothing
            Dim SalesClassCodesList As Generic.List(Of String) = Nothing
            Dim JobTypeCodesList As Generic.List(Of String) = Nothing

            Try
                Dim SqlParameterDateType As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterAEList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterSalesClassList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterDateType = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int) With {.Value = Criteria}
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime) With {.Value = CDate(From.ToString("MM/dd/yyyy"))}
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime) With {.Value = CDate([To].ToString("MM/dd/yyyy"))}

                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterAEList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterSalesClassList = New System.Data.SqlClient.SqlParameter("@SalesClassCodeList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)

                ClientCodesList = ParameterDictionary("ClientCodes")
                AccountExecutivesCodesList = ParameterDictionary("AECodes")
                SalesClassCodesList = ParameterDictionary("SalesClassCodes")
                JobTypeCodesList = ParameterDictionary("JobTypeCodes")

                If ClientCodesList Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(ClientCodesList.ToArray, ",")

                End If

                If AccountExecutivesCodesList Is Nothing Then

                    SqlParameterAEList.Value = System.DBNull.Value

                Else

                    SqlParameterAEList.Value = Join(AccountExecutivesCodesList.ToArray, ",")

                End If

                If SalesClassCodesList Is Nothing Then

                    SqlParameterSalesClassList.Value = System.DBNull.Value

                Else

                    SqlParameterSalesClassList.Value = Join(SalesClassCodesList.ToArray, ",")

                End If

                If JobTypeCodesList Is Nothing Then

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                Else

                    SqlParameterJobTypeList.Value = Join(JobTypeCodesList.ToArray, ",")

                End If

                'ProjectSummaryReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.ProjectSummary)(String.Format("EXEC [dbo].[advsp_project_summary_load] {0}, '{1}', '{2}', '{3}', '{4}', '{5}', '{6}'", Criteria, From.ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"), Join(ClientCodesList.ToArray, ","), Join(AccountExecutivesCodesList.ToArray, ","), Join(SalesClassCodesList.ToArray, ","), Join(JobTypeCodesList.ToArray, ","))).ToList

                ProjectSummaryReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.ProjectSummary)("EXEC dbo.advsp_project_summary_load @DATE_TYPE, @START_DATE, @END_DATE, @ClientCodeList, @AECodeList, @SalesClassCodeList, @JobTypeList",
                                                                                                                              SqlParameterDateType, SqlParameterStartDate, SqlParameterEndDate, SqlParameterClientList, SqlParameterAEList, SqlParameterSalesClassList, SqlParameterJobTypeList).ToList


            Catch ex As Exception
                ProjectSummaryReports = Nothing
            Finally
                LoadProjectSummaryData = ProjectSummaryReports
            End Try

        End Function
        Private Function LoadProjectSummaryTaskData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.ProjectSummaryTask)

            Dim ProjectSummaryTaskReports As Generic.List(Of AdvantageFramework.Database.Classes.ProjectSummaryTask) = Nothing
            Dim AccountExecutivesCodesList As Generic.List(Of String) = Nothing
            Dim ClientCodesList As Generic.List(Of String) = Nothing
            Dim SalesClassCodesList As Generic.List(Of String) = Nothing
            Dim JobTypeCodesList As Generic.List(Of String) = Nothing

            Try
                Dim SqlParameterDateType As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterAEList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterSalesClassList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterDateType = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int) With {.Value = Criteria}
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime) With {.Value = CDate(From.ToString("MM/dd/yyyy"))}
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime) With {.Value = CDate([To].ToString("MM/dd/yyyy"))}

                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterAEList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterSalesClassList = New System.Data.SqlClient.SqlParameter("@SalesClassCodeList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)

                ClientCodesList = ParameterDictionary("ClientCodes")
                AccountExecutivesCodesList = ParameterDictionary("AECodes")
                SalesClassCodesList = ParameterDictionary("SalesClassCodes")
                JobTypeCodesList = ParameterDictionary("JobTypeCodes")

                If ClientCodesList Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(ClientCodesList.ToArray, ",")

                End If

                If AccountExecutivesCodesList Is Nothing Then

                    SqlParameterAEList.Value = System.DBNull.Value

                Else

                    SqlParameterAEList.Value = Join(AccountExecutivesCodesList.ToArray, ",")

                End If

                If SalesClassCodesList Is Nothing Then

                    SqlParameterSalesClassList.Value = System.DBNull.Value

                Else

                    SqlParameterSalesClassList.Value = Join(SalesClassCodesList.ToArray, ",")

                End If

                If JobTypeCodesList Is Nothing Then

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                Else

                    SqlParameterJobTypeList.Value = Join(JobTypeCodesList.ToArray, ",")

                End If

                ' ProjectSummaryTaskReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.ProjectSummaryTask)(String.Format("EXEC [dbo].[advsp_project_summary_task_load] {0}, '{1}', '{2}'", Criteria, From.ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"))).ToList

                ProjectSummaryTaskReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.ProjectSummaryTask)("EXEC dbo.advsp_project_summary_task_load @DATE_TYPE, @START_DATE, @END_DATE, @ClientCodeList, @AECodeList, @SalesClassCodeList, @JobTypeList",
                                                                                                                              SqlParameterDateType, SqlParameterStartDate, SqlParameterEndDate, SqlParameterClientList, SqlParameterAEList, SqlParameterSalesClassList, SqlParameterJobTypeList).ToList


            Catch ex As Exception
                ProjectSummaryTaskReports = Nothing
            Finally
                LoadProjectSummaryTaskData = ProjectSummaryTaskReports
            End Try

        End Function
        Private Function LoadProjectSummaryReport(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.ProjectSummaryAnalysis)

            Dim ProjectSummaryReports As Generic.List(Of AdvantageFramework.Database.Classes.ProjectSummaryAnalysis) = Nothing
            Dim IncludeDetail As Integer = 0
            Dim IncludeEmployeeDetail As Integer = 0
            Dim AccountExecutivesCodesList As Generic.List(Of String) = Nothing
            Dim ClientCodesList As Generic.List(Of String) = Nothing
            Dim SalesClassCodesList As Generic.List(Of String) = Nothing
            Dim JobTypeCodesList As Generic.List(Of String) = Nothing

            Try
                Dim SqlParameterDateType As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeDetail As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeEmp As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterQuotedPlanned As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterForecastHoursAllowed As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterAEList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterSalesClassList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing

                If ParameterDictionary("IncludeDetail") = "True" Then
                    IncludeDetail = 1
                End If
                If ParameterDictionary("IncludeEmployeeDetail") = "True" Then
                    IncludeEmployeeDetail = 1
                End If

                SqlParameterDateType = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int) With {.Value = ParameterDictionary("DateType")}
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime) With {.Value = CDate(ParameterDictionary("FromDate")).ToString("MM/dd/yyyy")}
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime) With {.Value = CDate(ParameterDictionary("ToDate")).ToString("MM/dd/yyyy")}
                SqlParameterIncludeDetail = New System.Data.SqlClient.SqlParameter("@INCLUDE_DETAIL", SqlDbType.Bit) With {.Value = IncludeDetail}
                SqlParameterIncludeEmp = New System.Data.SqlClient.SqlParameter("@INCLUDE_EMP", SqlDbType.Bit) With {.Value = IncludeEmployeeDetail}
                SqlParameterQuotedPlanned = New System.Data.SqlClient.SqlParameter("@QUOTED_PLANNED", SqlDbType.SmallInt) With {.Value = ParameterDictionary("QuotedPlanned")}
                SqlParameterForecastHoursAllowed = New System.Data.SqlClient.SqlParameter("@FORECAST_HOURSALLOWED", SqlDbType.SmallInt) With {.Value = ParameterDictionary("ForecastHoursAllowed")}

                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterAEList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterSalesClassList = New System.Data.SqlClient.SqlParameter("@SalesClassCodeList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)

                ClientCodesList = ParameterDictionary("ClientCodes")
                AccountExecutivesCodesList = ParameterDictionary("AECodes")
                SalesClassCodesList = ParameterDictionary("SalesClassCodes")
                JobTypeCodesList = ParameterDictionary("JobTypeCodes")

                If ClientCodesList Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(ClientCodesList.ToArray, ",")

                End If

                If AccountExecutivesCodesList Is Nothing Then

                    SqlParameterAEList.Value = System.DBNull.Value

                Else

                    SqlParameterAEList.Value = Join(AccountExecutivesCodesList.ToArray, ",")

                End If

                If SalesClassCodesList Is Nothing Then

                    SqlParameterSalesClassList.Value = System.DBNull.Value

                Else

                    SqlParameterSalesClassList.Value = Join(SalesClassCodesList.ToArray, ",")

                End If

                If JobTypeCodesList Is Nothing Then

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                Else

                    SqlParameterJobTypeList.Value = Join(JobTypeCodesList.ToArray, ",")

                End If

                'ProjectSummaryReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.ProjectSummaryAnalysis)(String.Format("EXEC [dbo].[usp_wv_Project_Summary_Dataset] {0}, '{1}', '{2}', {3}, {4}, {5}, {6}", ParameterDictionary("DateType"), CDate(ParameterDictionary("FromDate")).ToString("MM/dd/yyyy"), CDate(ParameterDictionary("ToDate")).ToString("MM/dd/yyyy"), IncludeDetail, IncludeEmployeeDetail, ParameterDictionary("QuotedPlanned"), ParameterDictionary("ForecastHoursAllowed"))).ToList

                ProjectSummaryReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.ProjectSummaryAnalysis)("EXEC dbo.usp_wv_Project_Summary_Dataset @DATE_TYPE, @START_DATE, @END_DATE, @INCLUDE_DETAIL, @INCLUDE_EMP, @QUOTED_PLANNED,	@FORECAST_HOURSALLOWED, @ClientCodeList, @AECodeList, @SalesClassCodeList, @JobTypeList",
                                                                                                                              SqlParameterDateType, SqlParameterStartDate, SqlParameterEndDate, SqlParameterIncludeDetail, SqlParameterIncludeEmp, SqlParameterQuotedPlanned, SqlParameterForecastHoursAllowed, SqlParameterClientList, SqlParameterAEList, SqlParameterSalesClassList, SqlParameterJobTypeList).ToList


            Catch ex As Exception
                ProjectSummaryReports = Nothing
            Finally
                LoadProjectSummaryReport = ProjectSummaryReports
            End Try

        End Function
        Private Function LoadCampaignProductionMediaData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.CampaignProductionMediaReport)

            Dim CampaignProductionMediaReports As Generic.List(Of AdvantageFramework.Database.Classes.CampaignProductionMediaReport) = Nothing

            Try

                CampaignProductionMediaReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.CampaignProductionMediaReport)(String.Format("EXEC [dbo].[advsp_campaign_job_media_load] '{0}', {1}, {2}, {3}, '{4}', {5}", ParameterDictionary("ClientCode"), ParameterDictionary("CampaignIDFrom"), ParameterDictionary("CampaignIDTo"), ParameterDictionary("IncludeClosed"), DbContext.UserCode, ParameterDictionary("UseCampaignMasterJobEstimate"))).ToList

            Catch ex As Exception
                CampaignProductionMediaReports = Nothing
            Finally
                LoadCampaignProductionMediaData = CampaignProductionMediaReports
            End Try

        End Function
        Private Function LoadCampaignProductionMediaDataSummary(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.CampaignProductionMediaSummaryReport)

            Dim CampaignProductionMediaReports As Generic.List(Of AdvantageFramework.Database.Classes.CampaignProductionMediaSummaryReport) = Nothing

            Try

                CampaignProductionMediaReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.CampaignProductionMediaSummaryReport)(String.Format("EXEC [dbo].[advsp_campaign_job_media_summary_load] '{0}', {1}, {2}, {3}, '{4}', {5}", ParameterDictionary("ClientCode"), ParameterDictionary("CampaignIDFrom"), ParameterDictionary("CampaignIDTo"), ParameterDictionary("IncludeClosed"), DbContext.UserCode, ParameterDictionary("UseCampaignMasterJobEstimate"))).ToList

            Catch ex As Exception
                CampaignProductionMediaReports = Nothing
            Finally
                LoadCampaignProductionMediaDataSummary = CampaignProductionMediaReports
            End Try

        End Function
        Private Function LoadEstimateDetailApprovalData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.EstimateDetailApprovedReport)

            Dim EstimateDetailApprovedReports As Generic.List(Of AdvantageFramework.Database.Classes.EstimateDetailApprovedReport) = Nothing

            Try

                EstimateDetailApprovedReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.EstimateDetailApprovedReport)(String.Format("EXEC [dbo].[advsp_estimate_approved_detail] '{0}', '{1}'", CDate(ParameterDictionary("FromDate")).ToString("MM/dd/yyyy"), CDate(ParameterDictionary("ToDate")).ToString("MM/dd/yyyy"))).ToList

            Catch ex As Exception
                EstimateDetailApprovedReports = Nothing
            Finally
                LoadEstimateDetailApprovalData = EstimateDetailApprovedReports
            End Try

        End Function
        Private Function LoadJobWriteOffData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.JobWriteOff)

            Dim JobWriteOffsReports As Generic.List(Of AdvantageFramework.Database.Classes.JobWriteOff) = Nothing
            Dim IncludeEmployeeTime As Integer = 0
            Dim IncludeVendor As Integer = 0
            Dim IncludeIncomeOnly As Integer = 0
            Dim GroupByComponent As Integer = 0
            Try
                If ParameterDictionary("IncludeEmployeeTime") = "True" Then
                    IncludeEmployeeTime = 1
                End If
                If ParameterDictionary("IncludeVendor") = "True" Then
                    IncludeVendor = 1
                End If
                If ParameterDictionary("IncludeIncomeOnly") = "True" Then
                    IncludeIncomeOnly = 1
                End If
                If ParameterDictionary("GroupByComponent") = "True" Then
                    GroupByComponent = 1
                End If
                JobWriteOffsReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.JobWriteOff)(String.Format("EXEC [dbo].[advsp_job_detail_item_writeoff_load] '{0}', '{1}', {2}, {3}, {4}, {5}", ParameterDictionary("StartingPostPeriodCode"), ParameterDictionary("EndingPostPeriodCode"), IncludeEmployeeTime, IncludeVendor, IncludeIncomeOnly, GroupByComponent)).ToList

            Catch ex As Exception
                JobWriteOffsReports = Nothing
            Finally
                LoadJobWriteOffData = JobWriteOffsReports
            End Try

        End Function
        Private Function LoadTransferData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.TransferReport)

            Dim TransferReports As Generic.List(Of AdvantageFramework.Database.Classes.TransferReport) = Nothing
            Dim IncludeAP As Integer = 0
            Dim IncludeEmployeeTime As Integer = 0
            Dim IncludeIncomeOnly As Integer = 0
            Try
                If ParameterDictionary("IncludeAP") = "True" Then
                    IncludeAP = 1
                End If
                If ParameterDictionary("IncludeEmployeeTime") = "True" Then
                    IncludeEmployeeTime = 1
                End If
                If ParameterDictionary("IncludeIncomeOnly") = "True" Then
                    IncludeIncomeOnly = 1
                End If

                TransferReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.TransferReport)(String.Format("EXEC [dbo].[advsp_transfer_data] {0}, {1}, {2}, '{3}', '{4}'", IncludeAP, IncludeEmployeeTime, IncludeIncomeOnly, CDate(ParameterDictionary("FromDate")).ToString("MM/dd/yyyy"), CDate(ParameterDictionary("ToDate")).ToString("MM/dd/yyyy"))).ToList

            Catch ex As Exception
                TransferReports = Nothing
            Finally
                LoadTransferData = TransferReports
            End Try

        End Function
        Private Function LoadCRMProspectsReport(ReportingDbContext As Reporting.Database.DbContext, ParameterDictionary As System.Collections.Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Views.CRMProspectsReport)

            Dim CRMProspectsReportList As Generic.List(Of AdvantageFramework.Reporting.Database.Views.CRMProspectsReport) = Nothing

            If ParameterDictionary(AdvantageFramework.Reporting.CRMProspectsParameters.IncludeInactiveCDPs.ToString) = True Then

                CRMProspectsReportList = (From CRMProspectsReport In Reporting.Database.Procedures.CRMProspectsReport.Load(ReportingDbContext)
                                          Select CRMProspectsReport).ToList

            Else

                CRMProspectsReportList = (From CRMProspectsReport In Reporting.Database.Procedures.CRMProspectsReport.Load(ReportingDbContext).ToList
                                          Where CRMProspectsReport.ClientInactive = False AndAlso
                                                CRMProspectsReport.DivisionInactive = False AndAlso
                                                CRMProspectsReport.ProductInactive = False
                                          Select CRMProspectsReport).ToList

            End If

            LoadCRMProspectsReport = CRMProspectsReportList

        End Function
        Private Function LoadMediaPlanComparisonSummaryData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As IEnumerable

            'objects
            Dim MediaPlanComparisonSummaryList As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary) = Nothing
            Dim StartDate As Date = Nothing
            Dim EndDate As Date = Nothing
            Dim IncludeInternet As Boolean = True
            Dim IncludeMagazine As Boolean = True
            Dim IncludeNewspaper As Boolean = True
            Dim IncludeOutOfHome As Boolean = True
            Dim IncludeRadio As Boolean = True
            Dim IncludeTelevision As Boolean = True
            Dim MediaPlanDatas As Generic.List(Of AdvantageFramework.Database.Views.MediaPlanData) = Nothing
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim MediaPlanComparisonSummaryListFinal As Generic.List(Of AdvantageFramework.Reporting.Classes.MediaPlanComparisonSummary) = Nothing
            Dim MediaPlanComparisonSummary As AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary = Nothing
            Dim MediaPlanComparisonItem As AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary = Nothing

            MediaPlanComparisonSummaryListFinal = New Generic.List(Of AdvantageFramework.Reporting.Classes.MediaPlanComparisonSummary)

            MediaPlanComparisonSummaryList = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary)

            Try

                MediaPlanComparisonSummaryList.AddRange(LoadMediaCurrentStatusSummaryReport(ReportingDbContext, ParameterDictionary).ToList.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary(Entity)))

            Catch ex As Exception

            End Try

            Try

                StartDate = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.StartDate.ToString)

            Catch ex As Exception
                StartDate = CDate("01/01/1900")
            End Try

            Try

                EndDate = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.EndDate.ToString)

            Catch ex As Exception
                EndDate = CDate("01/01/1900")
            End Try

            Try

                IncludeInternet = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.IncludeInternet.ToString)

            Catch ex As Exception
                IncludeInternet = True
            End Try

            Try

                IncludeMagazine = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.IncludeMagazine.ToString)

            Catch ex As Exception
                IncludeMagazine = True
            End Try

            Try

                IncludeNewspaper = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.IncludeNewspaper.ToString)

            Catch ex As Exception
                IncludeNewspaper = True
            End Try

            Try

                IncludeOutOfHome = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.IncludeOutOfHome.ToString)

            Catch ex As Exception
                IncludeOutOfHome = True
            End Try

            Try

                IncludeRadio = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.IncludeRadio.ToString)

            Catch ex As Exception
                IncludeRadio = True
            End Try

            Try

                IncludeTelevision = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.IncludeTelevision.ToString)

            Catch ex As Exception
                IncludeTelevision = True
            End Try

            SelectedOffices = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.SelectedOffices.ToString)
            SelectedClients = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.SelectedClients.ToString)
            SelectedDivisions = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.SelectedDivisions.ToString)
            SelectedProducts = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusSummaryParameters.SelectedProducts.ToString)

            Try

                MediaPlanDatas = AdvantageFramework.Database.Procedures.MediaPlanDataView.Load(DbContext).Where(Function(Entity) Entity.StartDate >= StartDate AndAlso Entity.StartDate <= EndDate AndAlso Entity.IsApproved = True).ToList

            Catch ex As Exception
                MediaPlanDatas = Nothing
            End Try

            Try

                If IncludeInternet = False AndAlso MediaPlanDatas IsNot Nothing AndAlso MediaPlanDatas.Count > 0 Then

                    MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) Entity.MediaType <> "I").ToList

                End If

            Catch ex As Exception

            End Try

            Try

                If IncludeMagazine = False AndAlso MediaPlanDatas IsNot Nothing AndAlso MediaPlanDatas.Count > 0 Then

                    MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) Entity.MediaType <> "M").ToList

                End If

            Catch ex As Exception

            End Try

            Try

                If IncludeNewspaper = False AndAlso MediaPlanDatas IsNot Nothing AndAlso MediaPlanDatas.Count > 0 Then

                    MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) Entity.MediaType <> "N").ToList

                End If

            Catch ex As Exception

            End Try

            Try

                If IncludeOutOfHome = False AndAlso MediaPlanDatas IsNot Nothing AndAlso MediaPlanDatas.Count > 0 Then

                    MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) Entity.MediaType <> "O").ToList

                End If

            Catch ex As Exception

            End Try

            Try

                If IncludeRadio = False AndAlso MediaPlanDatas IsNot Nothing AndAlso MediaPlanDatas.Count > 0 Then

                    MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) Entity.MediaType <> "R").ToList

                End If

            Catch ex As Exception

            End Try

            Try

                If IncludeTelevision = False AndAlso MediaPlanDatas IsNot Nothing AndAlso MediaPlanDatas.Count > 0 Then

                    MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) Entity.MediaType <> "T").ToList

                End If

            Catch ex As Exception

            End Try

            Try

                If SelectedOffices IsNot Nothing AndAlso SelectedOffices.Count > 0 AndAlso MediaPlanDatas IsNot Nothing AndAlso MediaPlanDatas.Count > 0 Then

                    MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) SelectedOffices.Contains(Entity.OfficeCode)).ToList

                End If

            Catch ex As Exception

            End Try

            Try

                If MediaPlanDatas IsNot Nothing AndAlso MediaPlanDatas.Count > 0 Then

                    If SelectedClients IsNot Nothing AndAlso SelectedClients.Count > 0 Then

                        MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) SelectedClients.Contains(Entity.ClientCode)).ToList

                    ElseIf SelectedDivisions IsNot Nothing AndAlso SelectedDivisions.Count > 0 Then

                        MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) SelectedDivisions.Contains(Entity.ClientCode & "|" & Entity.DivisionCode)).ToList

                    ElseIf SelectedProducts IsNot Nothing AndAlso SelectedProducts.Count > 0 Then

                        MediaPlanDatas = MediaPlanDatas.Where(Function(Entity) SelectedProducts.Contains(Entity.ClientCode & "|" & Entity.DivisionCode & "|" & Entity.ProductCode)).ToList

                    End If

                End If

            Catch ex As Exception

            End Try

            If MediaPlanDatas IsNot Nothing AndAlso MediaPlanDatas.Count > 0 Then

                MediaPlanComparisonSummaryList.AddRange(MediaPlanDatas.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary(Entity)))

            End If

            If MediaPlanComparisonSummaryList IsNot Nothing AndAlso MediaPlanComparisonSummaryList.Count > 0 Then

                Try

                    For Each MediaPlanComparisonItem In MediaPlanComparisonSummaryList

                        If MediaPlanComparisonItem.MasterPlanID Is Nothing Then

                            MediaPlanComparisonSummary = MediaPlanComparisonSummaryList.Where(Function(Entity) Entity.ClientCode = MediaPlanComparisonItem.ClientCode AndAlso Entity.DivisionCode = MediaPlanComparisonItem.DivisionCode AndAlso
                                                                                                               Entity.ProductCode = MediaPlanComparisonItem.ProductCode AndAlso Entity.OrderNumber.GetValueOrDefault(0) = MediaPlanComparisonItem.OrderNumber.GetValueOrDefault(0) AndAlso
                                                                                                               Entity.LineNumber.GetValueOrDefault(0) = MediaPlanComparisonItem.LineNumber.GetValueOrDefault(0) AndAlso
                                                                                                               Entity.MasterPlanID IsNot Nothing).FirstOrDefault

                            If MediaPlanComparisonSummary IsNot Nothing Then

                                MediaPlanComparisonItem.MasterPlanID = MediaPlanComparisonSummary.MasterPlanID
                                MediaPlanComparisonItem.MasterPlanName = MediaPlanComparisonSummary.MasterPlanName

                            End If

                        End If

                        If MediaPlanComparisonItem.EstimateID = 0 Then

                            MediaPlanComparisonSummary = MediaPlanComparisonSummaryList.Where(Function(Entity) Entity.ClientCode = MediaPlanComparisonItem.ClientCode AndAlso Entity.DivisionCode = MediaPlanComparisonItem.DivisionCode AndAlso
                                                                                                               Entity.ProductCode = MediaPlanComparisonItem.ProductCode AndAlso Entity.OrderNumber.GetValueOrDefault(0) = MediaPlanComparisonItem.OrderNumber.GetValueOrDefault(0) AndAlso
                                                                                                               Entity.LineNumber.GetValueOrDefault(0) = MediaPlanComparisonItem.LineNumber.GetValueOrDefault(0) AndAlso
                                                                                                               Entity.EstimateID <> 0).FirstOrDefault

                            If MediaPlanComparisonSummary IsNot Nothing Then

                                MediaPlanComparisonItem.EstimateID = MediaPlanComparisonSummary.EstimateID
                                MediaPlanComparisonItem.EstimateName = MediaPlanComparisonSummary.EstimateName
                                MediaPlanComparisonItem.EstimateBudget = MediaPlanComparisonSummary.EstimateBudget

                            End If

                        End If

                    Next

                Catch ex As Exception

                End Try

            End If

            LoadMediaPlanComparisonSummaryData = (From Entity In MediaPlanComparisonSummaryList
                                                  Group Entity By Entity.OfficeCode,
                                                                  Entity.OfficeName,
                                                                  Entity.ClientCode,
                                                                  Entity.ClientName,
                                                                  Entity.DivisionCode,
                                                                  Entity.DivisionName,
                                                                  Entity.ProductCode,
                                                                  Entity.ProductDescription,
                                                                  Entity.CampaignCode,
                                                                  Entity.CampaignName,
                                                                  Entity.MediaType,
                                                                  Entity.SalesClassCode,
                                                                  Entity.SalesClassDescription,
                                                                  Entity.Month,
                                                                  Entity.MonthName,
                                                                  Entity.Year,
                                                                  Entity.MasterPlanID,
                                                                  Entity.MasterPlanName,
                                                                  Entity.EstimateID,
                                                                  Entity.EstimateName,
                                                                  Entity.EstimateBudget Into MPCS = Group
                                                  Select OfficeCode,
                                                         OfficeName,
                                                         ClientCode,
                                                         ClientName,
                                                         DivisionCode,
                                                         DivisionName,
                                                         ProductCode,
                                                         ProductDescription,
                                                         CampaignCode,
                                                         CampaignName,
                                                         MediaType,
                                                         SalesClassCode,
                                                         SalesClassDescription,
                                                         Month,
                                                         MonthName,
                                                         Year,
                                                         MasterPlanID,
                                                         MasterPlanName,
                                                         EstimateID,
                                                         EstimateName,
                                                         EstimateBudget,
                                                         PlanUnits = MPCS.Sum(Function(MPC) MPC.PlanUnits),
                                                         PlanImpressions = MPCS.Sum(Function(MPC) MPC.PlanImpressions),
                                                         PlanClicks = MPCS.Sum(Function(MPC) MPC.PlanClicks),
                                                         PlanDemo1 = MPCS.Sum(Function(MPC) MPC.PlanDemo1),
                                                         PlanDemo2 = MPCS.Sum(Function(MPC) MPC.PlanDemo2),
                                                         PlanQuantity = MPCS.Sum(Function(MPC) MPC.PlanQuantity),
                                                         PlanNetAmount = MPCS.Sum(Function(MPC) MPC.PlanNetAmount),
                                                         PlanCommission = MPCS.Sum(Function(MPC) MPC.PlanCommission),
                                                         PlanAgencyFee = MPCS.Sum(Function(MPC) MPC.PlanAgencyFee),
                                                         PlanBillAmount = MPCS.Sum(Function(MPC) MPC.PlanBillAmount),
                                                         OrderQuantity = MPCS.Sum(Function(MPC) MPC.OrderQuantity),
                                                         OrderNetAmount = MPCS.Sum(Function(MPC) MPC.OrderNetAmount),
                                                         OrderCommission = MPCS.Sum(Function(MPC) MPC.OrderCommission),
                                                         OrderAgencyFee = MPCS.Sum(Function(MPC) MPC.OrderAgencyFee),
                                                         OrderBillAmount = MPCS.Sum(Function(MPC) MPC.OrderBillAmount),
                                                         BilledQuantity = MPCS.Sum(Function(MPC) MPC.BilledQuantity),
                                                         BilledCommissionAmount = MPCS.Sum(Function(MPC) MPC.BilledCommissionAmount),
                                                         BilledAgencyFee = MPCS.Sum(Function(MPC) MPC.BilledAgencyFee),
                                                         BilledNetAmount = MPCS.Sum(Function(MPC) MPC.BilledNetAmount),
                                                         BilledBillAmount = MPCS.Sum(Function(MPC) MPC.BilledBillAmount),
                                                         APQuantity = MPCS.Sum(Function(MPC) MPC.APQuantity),
                                                         APNetAmount = MPCS.Sum(Function(MPC) MPC.APNetAmount),
                                                         PlanBillToOrderedBillVariance = MPCS.Sum(Function(MPC) MPC.OrderBillAmount) - MPCS.Sum(Function(MPC) MPC.PlanBillAmount),
                                                         PlanBillToBilledVariance = MPCS.Sum(Function(MPC) MPC.BilledBillAmount) - MPCS.Sum(Function(MPC) MPC.PlanBillAmount),
                                                         OrderedToBilledVariance = MPCS.Sum(Function(MPC) MPC.BilledBillAmount) - MPCS.Sum(Function(MPC) MPC.OrderBillAmount),
                                                         OrderedToAPVariance = MPCS.Sum(Function(MPC) MPC.APNetAmount) - MPCS.Sum(Function(MPC) MPC.OrderNetAmount),
                                                         PlanEstBudgetToPlanBillVariance = (EstimateBudget - MPCS.Sum(Function(MPC) MPC.PlanBillAmount)),
                                                         PlanEstBudgetToOrderBillVariance = (EstimateBudget - MPCS.Sum(Function(MPC) MPC.OrderBillAmount)),
                                                         OrderResaleTaxAmount = MPCS.Sum(Function(MPC) MPC.OrderResaleTaxAmount),
                                                         OrderVendorTaxAmount = MPCS.Sum(Function(MPC) MPC.OrderVendorTaxAmount),
                                                         BilledResaleTaxAmount = MPCS.Sum(Function(MPC) MPC.BilledResaleTaxAmount),
                                                         BilledVendorTaxAmount = MPCS.Sum(Function(MPC) MPC.BilledVendorTaxAmount))

        End Function
        Private Function LoadCashAnalysisData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.CashAnalysisReport)

            Dim CashAnalysisReports As Generic.List(Of AdvantageFramework.Database.Classes.CashAnalysisReport) = Nothing

            Try

                CashAnalysisReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.CashAnalysisReport)(String.Format("EXEC [dbo].[advsp_load_drpt_client_billing] '{0}', '{1}', {2}", ParameterDictionary("StartingPostPeriodCode"), ParameterDictionary("EndingPostPeriodCode"), ParameterDictionary("Query"))).ToList

            Catch ex As Exception
                CashAnalysisReports = Nothing
            Finally
                LoadCashAnalysisData = CashAnalysisReports
            End Try

        End Function
        Private Function LoadGeneralLedgerDetailData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.GeneralLedgerDetailReport)

            Dim GeneralLedgerDetailReports As Generic.List(Of AdvantageFramework.Database.Classes.GeneralLedgerDetailReport) = Nothing

            Try

                GeneralLedgerDetailReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.GeneralLedgerDetailReport)(String.Format("EXEC [dbo].[advsp_gl_detail_dataset_load] '{0}', '{1}', {2}, {3}", ParameterDictionary(AdvantageFramework.Reporting.GeneralLedgerDetailParameters.StartingPostPeriodCode.ToString), ParameterDictionary(AdvantageFramework.Reporting.GeneralLedgerDetailParameters.EndingPostPeriodCode.ToString), ParameterDictionary(AdvantageFramework.Reporting.GeneralLedgerDetailParameters.RecordSourceID.ToString), If(ParameterDictionary(AdvantageFramework.Reporting.GeneralLedgerDetailParameters.IncludeInactiveAccounts.ToString), 1, 0))).ToList

            Catch ex As Exception
                GeneralLedgerDetailReports = Nothing
            Finally
                LoadGeneralLedgerDetailData = GeneralLedgerDetailReports
            End Try

        End Function
        Private Function LoadGeneralLedgerDetailByAccountData(ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.GeneralLedgerDetailByAccountReport)

            Dim GeneralLedgerDetailByAccountReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.GeneralLedgerDetailByAccountReport) = Nothing

            Try

                GeneralLedgerDetailByAccountReports = AdvantageFramework.Reporting.Database.Procedures.GeneralLedgerDetailByAccountReport.Load(ReportingDbContext, ParameterDictionary).ToList

            Catch ex As Exception
                GeneralLedgerDetailByAccountReports = Nothing
            Finally
                LoadGeneralLedgerDetailByAccountData = GeneralLedgerDetailByAccountReports
            End Try

        End Function
        Private Function LoadEmployeeTimeApprovalData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date) As Generic.List(Of AdvantageFramework.Database.Classes.EmployeeTimeApproval)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Database.Classes.EmployeeTimeApproval) = Nothing

            Try

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.EmployeeTimeApproval)(String.Format("EXEC [dbo].[advsp_employee_timesheet_approval_report] '{0}', '{1}', '{2}'", [From].ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"), DbContext.UserCode)).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadEmployeeTimeApprovalData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadAuthorizationToBuyData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date) As Generic.List(Of AdvantageFramework.Database.Classes.ATBReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Database.Classes.ATBReport) = Nothing

            Try

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.ATBReport)(String.Format("EXEC [dbo].[advsp_media_atb_rpt] {0}, '{1}', '{2}'", Criteria, [From].ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"))).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadAuthorizationToBuyData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadAccountPayableInvoiceWithBalanceAgingData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceWithBalanceAgingReport)

            Dim AccountsPayableInvoiceWithBalanceAgingReports As Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceWithBalanceAgingReport) = Nothing
            Dim SqlParameterStartingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAgingDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeOpenAccountsPayableOnly As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAgingOptionIsInvoiceDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterRecordSource As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@post_period_from", SqlDbType.VarChar)
                SqlParameterEndingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@post_period_to", SqlDbType.VarChar)
                SqlParameterAgingDate = New System.Data.SqlClient.SqlParameter("@aging_date", SqlDbType.SmallDateTime)
                SqlParameterIncludeOpenAccountsPayableOnly = New System.Data.SqlClient.SqlParameter("@open_ap_only", SqlDbType.Bit)
                SqlParameterAgingOptionIsInvoiceDate = New System.Data.SqlClient.SqlParameter("@aging_option_invoice_date", SqlDbType.Bit)
                SqlParameterRecordSource = New System.Data.SqlClient.SqlParameter("@record_source", SqlDbType.Int)

                SqlParameterStartingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceWithBalanceAgingInitialCriteria.StartingPostPeriodCode.ToString)
                SqlParameterEndingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceWithBalanceAgingInitialCriteria.EndingPostPeriodCode.ToString)
                SqlParameterAgingDate.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceWithBalanceAgingInitialCriteria.AgingDate.ToString)
                SqlParameterIncludeOpenAccountsPayableOnly.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceWithBalanceAgingInitialCriteria.IncludeOpenAccountsPayableOnly.ToString)
                SqlParameterAgingOptionIsInvoiceDate.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceWithBalanceAgingInitialCriteria.AgingOptionIsInvoiceDate.ToString)
                SqlParameterRecordSource.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceWithBalanceAgingInitialCriteria.RecordSource.ToString)

                AccountsPayableInvoiceWithBalanceAgingReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceWithBalanceAgingReport) _
                    ("exec advsp_ap_invoice_with_balance_aging_report @post_period_from, @post_period_to, @aging_date, @open_ap_only, @aging_option_invoice_date, @record_source", SqlParameterStartingPostPeriodCode, SqlParameterEndingPostPeriodCode, SqlParameterAgingDate, SqlParameterIncludeOpenAccountsPayableOnly, SqlParameterAgingOptionIsInvoiceDate, SqlParameterRecordSource).ToList

            Catch ex As Exception
                AccountsPayableInvoiceWithBalanceAgingReports = Nothing
            Finally
                LoadAccountPayableInvoiceWithBalanceAgingData = AccountsPayableInvoiceWithBalanceAgingReports
            End Try

        End Function
        Private Function LoadAccountPayableBalanceByVendorData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AccountsPayableBalanceByVendor)

            Dim APBalanceByVendors As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AccountsPayableBalanceByVendor) = Nothing
            Dim SqlParameterEndingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterRecordSource As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterEndingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@post_period_to", SqlDbType.VarChar)
                SqlParameterRecordSource = New System.Data.SqlClient.SqlParameter("@record_source", SqlDbType.Int)

                SqlParameterEndingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.APBalanceByVendorInitialCriteria.EndingPostPeriodCode.ToString)
                SqlParameterRecordSource.Value = ParameterDictionary(AdvantageFramework.Reporting.APBalanceByVendorInitialCriteria.RecordSourceID.ToString)

                APBalanceByVendors = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.AccountsPayableBalanceByVendor) _
                    ("exec dbo.advsp_ap_balance_by_vendor_report @post_period_to, @record_source", SqlParameterEndingPostPeriodCode, SqlParameterRecordSource).ToList

            Catch ex As Exception
                APBalanceByVendors = Nothing
            Finally
                LoadAccountPayableBalanceByVendorData = APBalanceByVendors
            End Try

        End Function
        Private Function LoadAccountReceivableBalanceByClientData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AccountsReceivableBalanceByClient)

            Dim ARBalanceByClients As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AccountsReceivableBalanceByClient) = Nothing
            Dim SqlParameterStartingUserID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterRecordSource As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartingUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterEndingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@post_period_to", SqlDbType.VarChar)
                SqlParameterRecordSource = New System.Data.SqlClient.SqlParameter("@record_source", SqlDbType.Int)

                SqlParameterStartingUserID.Value = DbContext.UserCode
                SqlParameterEndingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.ARBalanceByClientInitialCriteria.EndingPostPeriodCode.ToString)
                SqlParameterRecordSource.Value = ParameterDictionary(AdvantageFramework.Reporting.ARBalanceByClientInitialCriteria.RecordSourceID.ToString)

                ARBalanceByClients = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.AccountsReceivableBalanceByClient) _
                    ("exec dbo.advsp_ar_balance_by_client_report @UserID, @post_period_to, @record_source", SqlParameterStartingUserID, SqlParameterEndingPostPeriodCode, SqlParameterRecordSource).ToList

            Catch ex As Exception
                ARBalanceByClients = Nothing
            Finally
                LoadAccountReceivableBalanceByClientData = ARBalanceByClients
            End Try

        End Function
        Private Function LoadSalesAndCostOfSalesByClientData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SalesAndCostOfSalesByClientReport)

            Dim SalesAndCOSByClientReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SalesAndCostOfSalesByClientReport) = Nothing
            Dim SqlParameterStartingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterRecordSource As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@StartingPostPeriodCode", SqlDbType.VarChar)
                SqlParameterEndingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@EndingPostPeriodCode", SqlDbType.VarChar)
                SqlParameterRecordSource = New System.Data.SqlClient.SqlParameter("@record_source", SqlDbType.Int)

                SqlParameterStartingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.SalesAndCOSbyClientInitialParameters.StartingPostPeriodCode.ToString)
                SqlParameterEndingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.SalesAndCOSbyClientInitialParameters.EndingPostPeriodCode.ToString)
                SqlParameterRecordSource.Value = ParameterDictionary(AdvantageFramework.Reporting.SalesAndCOSbyClientInitialParameters.RecordSourceID.ToString)

                SalesAndCOSByClientReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.SalesAndCostOfSalesByClientReport) _
                    ("exec dbo.advsp_sales_cos_by_client_report @StartingPostPeriodCode, @EndingPostPeriodCode, @record_source", SqlParameterStartingPostPeriodCode, SqlParameterEndingPostPeriodCode, SqlParameterRecordSource).ToList

            Catch ex As Exception
                SalesAndCOSByClientReports = Nothing
            Finally
                LoadSalesAndCostOfSalesByClientData = SalesAndCOSByClientReports
            End Try

        End Function
        Private Function LoadRevenueBreakdownByClientData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.RevenueBreakdownByClientReport)

            Dim RevenueBreakdownByClientReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.RevenueBreakdownByClientReport) = Nothing
            Dim SqlParameterStartingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@StartingPostPeriodCode", SqlDbType.VarChar)
                SqlParameterEndingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@EndingPostPeriodCode", SqlDbType.VarChar)

                SqlParameterStartingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.RevenueBreakdownByClientInitialParameters.StartingPostPeriodCode.ToString)
                SqlParameterEndingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.RevenueBreakdownByClientInitialParameters.EndingPostPeriodCode.ToString)

                RevenueBreakdownByClientReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.RevenueBreakdownByClientReport) _
                    ("exec dbo.advsp_revenue_breakdown_by_client_report @StartingPostPeriodCode, @EndingPostPeriodCode", SqlParameterStartingPostPeriodCode, SqlParameterEndingPostPeriodCode).ToList

            Catch ex As Exception
                RevenueBreakdownByClientReports = Nothing
            Finally
                LoadRevenueBreakdownByClientData = RevenueBreakdownByClientReports
            End Try

        End Function
        Private Function LoadEmployeeUtilizationData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeUtilizationReport)

            Dim EmployeeUtilizationReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeUtilizationReport) = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterGroupBy As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterLimitWIP As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDepartmentList As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.DateTime)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.DateTime)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterGroupBy = New System.Data.SqlClient.SqlParameter("@Groupby", SqlDbType.VarChar)
                SqlParameterLimitWIP = New System.Data.SqlClient.SqlParameter("@LimitWIP", SqlDbType.Bit)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
                SqlParameterDepartmentList = New System.Data.SqlClient.SqlParameter("@DEPT_LIST", SqlDbType.VarChar)

                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.StartDate.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.EndDate.ToString)
                SqlParameterUserID.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.UserID.ToString)
                SqlParameterGroupBy.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.Groupby.ToString)
                SqlParameterLimitWIP.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.LimitWIP.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.SelectedDepartments.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.SelectedDepartments.ToString) IsNot Nothing Then

                    SqlParameterDepartmentList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.SelectedDepartments.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterDepartmentList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.SelectedOffices.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.SelectedOffices.ToString) IsNot Nothing Then

                    SqlParameterOfficeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.SelectedOffices.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOfficeList.Value = System.DBNull.Value

                End If

                EmployeeUtilizationReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.EmployeeUtilizationReport) _
                    ("exec dbo.advsp_employee_time_util_dataset @StartDate, @EndDate, @UserID, @Groupby, @LimitWIP, @OFFICE_LIST, @DEPT_LIST", SqlParameterStartDate, SqlParameterEndDate, SqlParameterUserID, SqlParameterGroupBy, SqlParameterLimitWIP, SqlParameterOfficeList, SqlParameterDepartmentList).ToList

            Catch ex As Exception
                EmployeeUtilizationReports = Nothing
            Finally
                LoadEmployeeUtilizationData = EmployeeUtilizationReports
            End Try

        End Function
        Private Function LoadEmployeeTimeForecastData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeTimeForecastData)

            Dim EmployeeUtilizationReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeTimeForecastData) = Nothing
            Dim SqlParameterPostPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEmployeeCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterPostPeriod = New System.Data.SqlClient.SqlParameter("@post_period", SqlDbType.VarChar)
                SqlParameterOfficeCode = New System.Data.SqlClient.SqlParameter("@office_code", SqlDbType.VarChar)
                SqlParameterEmployeeCode = New System.Data.SqlClient.SqlParameter("@emp_code", SqlDbType.VarChar)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.VarChar)

                SqlParameterPostPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeTimeForecastInitialParameters.PostPeriod.ToString)
                SqlParameterOfficeCode.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeTimeForecastInitialParameters.OfficeCode.ToString)
                SqlParameterEmployeeCode.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeTimeForecastInitialParameters.EmployeeCode.ToString)
                SqlParameterUserID.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeTimeForecastInitialParameters.UserID.ToString)

                If SqlParameterEmployeeCode.Value = Nothing Then SqlParameterEmployeeCode.Value = System.DBNull.Value
                If SqlParameterOfficeCode.Value = Nothing Then SqlParameterOfficeCode.Value = System.DBNull.Value

                EmployeeUtilizationReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.EmployeeTimeForecastData) _
                    ("exec dbo.advsp_employee_time_forecast_dataset @post_period, @office_code, @emp_code, @user_id",
                     SqlParameterPostPeriod, SqlParameterOfficeCode, SqlParameterEmployeeCode, SqlParameterUserID).ToList

            Catch ex As Exception
                EmployeeUtilizationReports = Nothing
            Finally
                LoadEmployeeTimeForecastData = EmployeeUtilizationReports
            End Try

        End Function

        Private Function LoadAccountsPayableInvoiceDetail(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailReport)

            Dim AccountsPayableInvoiceDetailReports As Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailReport) = Nothing
            Dim SqlParameterStartingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeOpenAccountsPayableOnly As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeBroadcastLineMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAgingDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAgingOptionIsInvoiceDate As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@post_period_from", SqlDbType.VarChar)
                SqlParameterEndingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@post_period_to", SqlDbType.VarChar)
                SqlParameterIncludeOpenAccountsPayableOnly = New System.Data.SqlClient.SqlParameter("@open_ap_only", SqlDbType.Bit)
                SqlParameterIncludeBroadcastLineMonth = New System.Data.SqlClient.SqlParameter("@include_broadcast_line_month", SqlDbType.Bit)
                SqlParameterAgingDate = New System.Data.SqlClient.SqlParameter("@aging_date", SqlDbType.SmallDateTime)
                SqlParameterAgingOptionIsInvoiceDate = New System.Data.SqlClient.SqlParameter("@aging_option_invoice_date", SqlDbType.Bit)

                SqlParameterStartingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.StartingPostPeriodCode.ToString)
                SqlParameterEndingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.EndingPostPeriodCode.ToString)
                SqlParameterIncludeOpenAccountsPayableOnly.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.IncludeOpenAccountsPayableOnly.ToString)
                SqlParameterIncludeBroadcastLineMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.IncludeBroadcastOrderLineMonth.ToString)
                SqlParameterAgingDate.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.AgingDate.ToString)
                SqlParameterAgingOptionIsInvoiceDate.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.AgingOptionIsInvoiceDate.ToString)

                AccountsPayableInvoiceDetailReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailReport) _
                    ("exec advsp_ap_invoice_detail_report @post_period_from, @post_period_to, @open_ap_only, @include_broadcast_line_month, @aging_date, @aging_option_invoice_date",
                     SqlParameterStartingPostPeriodCode, SqlParameterEndingPostPeriodCode, SqlParameterIncludeOpenAccountsPayableOnly, SqlParameterIncludeBroadcastLineMonth, SqlParameterAgingDate, SqlParameterAgingOptionIsInvoiceDate).ToList

            Catch ex As Exception
                AccountsPayableInvoiceDetailReports = Nothing
            Finally
                LoadAccountsPayableInvoiceDetail = AccountsPayableInvoiceDetailReports
            End Try

        End Function
        Private Function LoadAccountsPayableInvoiceDetailPayments(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaymentsReport)

            Dim AccountsPayableInvoiceDetailPaymentsReport As Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaymentsReport) = Nothing

            Dim SelectedVendors As Generic.List(Of String) = Nothing

            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterVendorist As System.Data.SqlClient.SqlParameter = Nothing

            Try
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@payment_date_from", SqlDbType.VarChar) With {.Value = ParameterDictionary("StartingDate")}
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@payment_date_to", SqlDbType.VarChar) With {.Value = ParameterDictionary("EndingDate")}
                SqlParameterVendorist = New System.Data.SqlClient.SqlParameter("@VENDOR_LIST", SqlDbType.VarChar)

                SelectedVendors = ParameterDictionary("SelectedVendors")

                If SelectedVendors Is Nothing Then

                    SqlParameterVendorist.Value = System.DBNull.Value

                ElseIf SelectedVendors.Count = 0 Then

                    SqlParameterVendorist.Value = System.DBNull.Value

                Else

                    SqlParameterVendorist.Value = Join(SelectedVendors.ToArray, ",")

                End If

                AccountsPayableInvoiceDetailPaymentsReport = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaymentsReport) _
                    ("exec advsp_ap_invoice_detail_pmts_report @payment_date_from, @payment_date_to, @VENDOR_LIST",
                     SqlParameterStartDate, SqlParameterEndDate, SqlParameterVendorist).ToList

            Catch ex As Exception
                AccountsPayableInvoiceDetailPaymentsReport = Nothing
            Finally
                LoadAccountsPayableInvoiceDetailPayments = AccountsPayableInvoiceDetailPaymentsReport
            End Try

        End Function
        Private Function LoadAccountsPayableInvoiceDetailPaidByClient(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaidByClientReport)

            Dim AccountsPayableInvoiceDetailReports As Generic.List(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaidByClientReport) = Nothing
            Dim SqlParameterStartingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeOpenAccountsPayableOnly As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeBroadcastLineMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAgingDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAgingOptionIsInvoiceDate As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@post_period_from", SqlDbType.VarChar)
                SqlParameterEndingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@post_period_to", SqlDbType.VarChar)
                SqlParameterIncludeOpenAccountsPayableOnly = New System.Data.SqlClient.SqlParameter("@open_ap_only", SqlDbType.Bit)
                SqlParameterIncludeBroadcastLineMonth = New System.Data.SqlClient.SqlParameter("@include_broadcast_line_month", SqlDbType.Bit)
                SqlParameterAgingDate = New System.Data.SqlClient.SqlParameter("@aging_date", SqlDbType.SmallDateTime)
                SqlParameterAgingOptionIsInvoiceDate = New System.Data.SqlClient.SqlParameter("@aging_option_invoice_date", SqlDbType.Bit)

                SqlParameterStartingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.StartingPostPeriodCode.ToString)
                SqlParameterEndingPostPeriodCode.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.EndingPostPeriodCode.ToString)
                SqlParameterIncludeOpenAccountsPayableOnly.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.IncludeOpenAccountsPayableOnly.ToString)
                SqlParameterIncludeBroadcastLineMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.IncludeBroadcastOrderLineMonth.ToString)
                SqlParameterAgingDate.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.AgingDate.ToString)
                SqlParameterAgingOptionIsInvoiceDate.Value = ParameterDictionary(AdvantageFramework.Reporting.AccountsPayableInvoiceDetailInitialCriteria.AgingOptionIsInvoiceDate.ToString)

                AccountsPayableInvoiceDetailReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaidByClientReport) _
                    ("exec advsp_ap_invoice_detail_paidbyclient_report @post_period_from, @post_period_to, @open_ap_only, @include_broadcast_line_month, @aging_date, @aging_option_invoice_date",
                     SqlParameterStartingPostPeriodCode, SqlParameterEndingPostPeriodCode, SqlParameterIncludeOpenAccountsPayableOnly, SqlParameterIncludeBroadcastLineMonth, SqlParameterAgingDate, SqlParameterAgingOptionIsInvoiceDate).ToList

            Catch ex As Exception
                AccountsPayableInvoiceDetailReports = Nothing
            Finally
                LoadAccountsPayableInvoiceDetailPaidByClient = AccountsPayableInvoiceDetailReports
            End Try

        End Function
        Private Function LoadDigitalResultsData(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaResultReport)

            'objects
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim DigitalResultReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaResultReport) = Nothing
            Dim BroadcastDates As Boolean

            Try

                SelectedOffices = ParameterDictionary("SelectedOffices")

                SelectedClients = ParameterDictionary("SelectedClients")

                SelectedDivisions = ParameterDictionary("SelectedDivisions")

                SelectedProducts = ParameterDictionary("SelectedProducts")

                BroadcastDates = ParameterDictionary("BroadcastDates")

                DigitalResultReports = AdvantageFramework.Reporting.Database.Procedures.MediaResultReport.Load(DbContext, ParameterDictionary("Criteria").ToString, CDate(ParameterDictionary("StartDate")).ToString("MM/dd/yyyy"), CDate(ParameterDictionary("EndDate")).ToString("MM/dd/yyyy"), SelectedOffices, SelectedClients, SelectedDivisions, SelectedProducts, BroadcastDates).ToList

            Catch ex As Exception
                DigitalResultReports = Nothing
            Finally
                LoadDigitalResultsData = DigitalResultReports
            End Try

        End Function
        Private Function LoadEstimateData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.EstimateForm)

            Dim EstimateReports As Generic.List(Of AdvantageFramework.Database.Classes.EstimateForm) = Nothing

            Try
                EstimateReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.EstimateForm)(String.Format("EXEC [dbo].[advsp_estimate_printing_dataset] '{0}', '{1}'", CDate(ParameterDictionary("FromDate")).ToString("MM/dd/yyyy"), CDate(ParameterDictionary("ToDate")).ToString("MM/dd/yyyy"))).ToList

            Catch ex As Exception
                EstimateReports = Nothing
            Finally
                LoadEstimateData = EstimateReports
            End Try

        End Function
        Private Function LoadJobServiceFeeContractData(ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobServiceFeeContractReport)

            Dim JobServiceFeeContractReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobServiceFeeContractReport) = Nothing

            Try

                JobServiceFeeContractReports = AdvantageFramework.Reporting.Database.Procedures.JobServiceFeeContractReport.Load(ReportingDbContext, Criteria, [From], [To]).ToList

            Catch ex As Exception
                JobServiceFeeContractReports = Nothing
            Finally
                LoadJobServiceFeeContractData = JobServiceFeeContractReports
            End Try

        End Function
        Private Function LoadIncomeOnlyData(ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Criteria As Integer, ByVal [From] As Date, ByVal [To] As Date) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.IncomeOnlyReport)

            Dim IncomeOnlyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.IncomeOnlyReport) = Nothing

            Try

                IncomeOnlyReports = AdvantageFramework.Reporting.Database.Procedures.IncomeOnlyReport.Load(ReportingDbContext, Criteria, [From], [To]).ToList

            Catch ex As Exception
                IncomeOnlyReports = Nothing
            Finally
                LoadIncomeOnlyData = IncomeOnlyReports
            End Try

        End Function
        Private Function LoadJobDetailItemAccountSplitData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemAccountSplitReport)

            'objects
            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemAccountSplitReport) = Nothing

            SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
            SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
            SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
            SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
            SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
            SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
            SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
            SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)

            SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.JobDateCriteria.ToString)
            SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.JobStartDate.ToString)
            SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.JobEndDate.ToString)
            SqlParameterShowJobsWithNoDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.ShowJobsWithNoDetails.ToString)

            If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterClientCodeList.Value = System.DBNull.Value

            End If

            If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

            End If

            If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

            End If

            If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailItemAccountSplitInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterAECodeList.Value = System.DBNull.Value

            End If

            Try

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemAccountSplitReport)("EXEC [dbo].[advsp_job_detail_item_account_split_load] @DATE_TYPE, @START_DATE, @END_DATE, @SHOW_JOBS_WO_DETAILS, @ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList",
                                                 SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterShowJobsWithNoDetails, SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailItemAccountSplitData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadExpenseReport(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ExpenseReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ExpenseReport) = Nothing
            'Dim ObjectQuery As IQueryable = Nothing

            Try

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.ExpenseReport)(String.Format("EXEC [dbo].[advsp_load_drpt_expense] {0},'{1}', '{2}', {3}", Criteria, [From].ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"), If(ShowJobsWithNoDetails, 1, 0))).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadExpenseReport = DynamicReportObjects
            End Try

        End Function
        Private Function LoadTimeReportData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal From As Date, ByVal [To] As Date) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.TimeReport)

            Dim TimeReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.TimeReport) = Nothing
            Dim SqlParameterStartingDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingDate As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartingDate = New System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.SmallDateTime)
                SqlParameterEndingDate = New System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.SmallDateTime)

                SqlParameterStartingDate.Value = From
                SqlParameterEndingDate.Value = [To]

                TimeReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.TimeReport) _
                    ("exec dbo.advsp_job_time_report @StartDate, @EndDate", SqlParameterStartingDate, SqlParameterEndingDate).ToList

            Catch ex As Exception
                TimeReports = Nothing
            Finally
                LoadTimeReportData = TimeReports
            End Try

        End Function

        Public Function CreateFilterStringForDynamicReport(ByVal DynamicReport As AdvantageFramework.Reporting.DynamicReports, ByVal Criteria As Integer) As String

            'objects
            Dim FilterString As String = ""

            If DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTime Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.DirectIndirectTimeInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTime Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.DirectTimeInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTimeWithEmployeeCost Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.DirectIndirectTimeInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTimeWithEmployeeCost Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.DirectTimeInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetail Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.JobDetailInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailBillMonth Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.JobDetailBillMonthInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFunction Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.JobDetailFunctionInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItem Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.JobDetailItemInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobProjectScheduleSummary Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.JobProjectScheduleSummaryInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobSummary Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.JobSummaryInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectHoursUsed Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.ProjectHoursUsedInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSchedule Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.ProjectScheduleInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummary Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.ProjectSummaryInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryTask Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.ProjectSummaryTaskInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityDetail Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.CRMOpportunityDetailInitialCriteria), CInt(Criteria)) & " > @From"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityToInvestment Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.CRMOpportunityToInvestmentInitialCriteria), CInt(Criteria)) & " > @From"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMClientContracts Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.CRMClientContractsInitialCriteria), CInt(Criteria)) & " > @From"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobPurchaseOrder Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.JobPurchaseOrderInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ExpenseReportAndApproval Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.ExpenseCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorContracts Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.VendorContractsInitialCriteria), CInt(Criteria)) & " > @From"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TimeReport Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.TimeReportInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectScheduleTasksByEmployee Then

                FilterString = "it." & [Enum].GetName(GetType(AdvantageFramework.Reporting.ProjectScheduleTasksByEmployeeInitialCriteria), CInt(Criteria)) & " BETWEEN @From AND @To"

            End If

            CreateFilterStringForDynamicReport = FilterString

        End Function
        Public Function LoadAvailableReportsByReportType(ByVal Session As AdvantageFramework.Security.Session, ByVal ReportType As Int16) As Generic.List(Of AdvantageFramework.Security.Database.Entities.Report)

            'objects
            Dim ReportList As Generic.List(Of AdvantageFramework.Security.Database.Entities.Report) = Nothing
            Dim Report As AdvantageFramework.Security.Database.Entities.Report = Nothing

            Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Session.ConnectionString, Session.UserCode)

                ReportList = New Generic.List(Of AdvantageFramework.Security.Database.Entities.Report)

                For Each Report In AdvantageFramework.Security.Database.Procedures.Report.LoadByReportType(SecurityDbContext, ReportType).ToList

                    If AdvantageFramework.Security.DoesUserHaveAccessToReport(Session, Report.Code) Then

                        ReportList.Add(Report)

                    End If

                Next

            End Using

            LoadAvailableReportsByReportType = ReportList

        End Function
        Public Function LoadReportCriteria(ByVal Session As AdvantageFramework.Security.Session) As IEnumerable

            Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Session.ConnectionString, Session.UserCode)

                Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                    LoadReportCriteria = (From Client In AdvantageFramework.Database.Procedures.Client.LoadByUserCode(DbContext, SecurityDbContext, Session.UserCode)
                                          Where Client.IsActive = 1
                                          Select Client).ToList

                End Using

            End Using

        End Function
        Public Function LoadAvailableUserDefinedReports(ByVal Session As AdvantageFramework.Security.Session) As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.UserDefinedReport)

            'objects
            Dim UserDefinedReport As AdvantageFramework.Reporting.Database.Entities.UserDefinedReport = Nothing
            Dim UserDefinedReportList As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.UserDefinedReport) = Nothing
            Dim UserUserDefinedReportPermissions As Generic.List(Of AdvantageFramework.Security.Database.Views.UserUserDefinedReportPermission) = Nothing
            Dim UserUserDefinedReportPermission As AdvantageFramework.Security.Database.Views.UserUserDefinedReportPermission = Nothing
            Dim AddReportToList As Boolean = False

            Using ReportingDbContext = New AdvantageFramework.Reporting.Database.DbContext(Session.ConnectionString, Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Session.ConnectionString, Session.UserCode)

                    UserDefinedReportList = New Generic.List(Of AdvantageFramework.Reporting.Database.Entities.UserDefinedReport)
                    UserUserDefinedReportPermissions = AdvantageFramework.Security.Database.Procedures.UserUserDefinedReportPermission.LoadByUserID(SecurityDbContext, Session.User.ID).ToList

                    For Each UserDefinedReport In AdvantageFramework.Reporting.Database.Procedures.UserDefinedReport.Load(ReportingDbContext).Include("UserDefinedReportCategory").ToList

                        UserUserDefinedReportPermission = UserUserDefinedReportPermissions.SingleOrDefault(Function(Entity) Entity.UserDefinedReportID = UserDefinedReport.ID)

                        If UserUserDefinedReportPermission IsNot Nothing AndAlso UserUserDefinedReportPermission.IsBlocked = False Then

                            AddReportToList = True

                            If Session.Application = Security.Application.Webvantage AndAlso UserDefinedReport.AdvancedReportWriterType = AdvancedReportWriterReports.ServiceFeeReconciliation Then

                                AddReportToList = False

                            End If

                            If AddReportToList Then

                                UserDefinedReportList.Add(UserDefinedReport)

                            End If

                        End If

                    Next

                End Using

            End Using

            LoadAvailableUserDefinedReports = UserDefinedReportList

        End Function
        Public Function LoadAvailableEstimateReports(ByVal Session As AdvantageFramework.Security.Session) As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.EstimateReport)

            'objects
            Dim EstimateReport As AdvantageFramework.Reporting.Database.Entities.EstimateReport = Nothing
            Dim EstimateReportList As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.EstimateReport) = Nothing
            Dim AddReportToList As Boolean = False

            Using ReportingDbContext = New AdvantageFramework.Reporting.Database.DbContext(Session.ConnectionString, Session.UserCode)

                EstimateReportList = New Generic.List(Of AdvantageFramework.Reporting.Database.Entities.EstimateReport)

                For Each EstimateReport In AdvantageFramework.Reporting.Database.Procedures.EstimateReport.Load(ReportingDbContext).Include("UserDefinedReportCategory").ToList

                    'If AdvantageFramework.Security.DoesUserHaveAccessToUserDefinedReport(Session, EstimateReport.ID) Then

                    AddReportToList = True

                    If AddReportToList Then

                        EstimateReportList.Add(EstimateReport)

                    End If

                    'End If

                Next

            End Using

            LoadAvailableEstimateReports = EstimateReportList

        End Function
        Public Function LoadAvailableAdvancedReportWriterDataSets(ByVal Session As AdvantageFramework.Security.Session) As Generic.List(Of Generic.KeyValuePair(Of Long, String))

            'objects
            Dim AdvancedReportWriterDataSets As Generic.List(Of Generic.KeyValuePair(Of Long, String)) = Nothing
            Dim UserPermissions As Generic.List(Of Security.Database.Views.UserPermission) = Nothing
            Dim UserPermission As Security.Database.Views.UserPermission = Nothing

            Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Session.ConnectionString, Session.UserCode)

                AdvancedReportWriterDataSets = New Generic.List(Of Generic.KeyValuePair(Of Long, String))
                UserPermissions = AdvantageFramework.Security.Database.Procedures.UserPermissionView.LoadByApplicationAndUser(SecurityDbContext, Session.Application, Session.User.ID).Where(Function(Entity) Entity.ModuleCode.StartsWith(_PreAdvancedReportWriterModuleCode)).ToList

                For Each KeyValuePair In AdvantageFramework.EnumUtilities.GetEnumDictionary(GetType(AdvantageFramework.Reporting.AdvancedReportWriterReports)).OrderBy(Function(KeyValue) KeyValue.Value)

                    UserPermission = UserPermissions.SingleOrDefault(Function(Entity) Entity.ModuleCode = _PreAdvancedReportWriterModuleCode & KeyValuePair.Value.Replace(" ", "") & "ARWRPT")

                    If AdvantageFramework.Security.DoesUserHaveAccessToModule(UserPermission) Then

                        AdvancedReportWriterDataSets.Add(KeyValuePair)

                    End If

                Next

            End Using

            LoadAvailableAdvancedReportWriterDataSets = AdvancedReportWriterDataSets

        End Function
        Public Function LoadAvailableDynamicReportDataSets(ByVal Session As AdvantageFramework.Security.Session) As Generic.List(Of Generic.KeyValuePair(Of Long, String))

            'objects
            Dim DynamicReportDataSetsList As Generic.List(Of Generic.KeyValuePair(Of Long, String)) = Nothing
            Dim UserPermissions As Generic.List(Of Security.Database.Views.UserPermission) = Nothing
            Dim UserPermission As Security.Database.Views.UserPermission = Nothing

            Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Session.ConnectionString, Session.UserCode)

                DynamicReportDataSetsList = New Generic.List(Of Generic.KeyValuePair(Of Long, String))
                UserPermissions = AdvantageFramework.Security.Database.Procedures.UserPermissionView.LoadByApplicationAndUser(SecurityDbContext, Session.Application, Session.User.ID).Where(Function(Entity) Entity.ModuleCode.StartsWith(_PreDynamicReportModuleCode)).ToList

                For Each KeyValuePair In AdvantageFramework.EnumUtilities.GetEnumDictionary(GetType(AdvantageFramework.Reporting.DynamicReports)).OrderBy(Function(KeyValue) KeyValue.Value)

                    UserPermission = UserPermissions.SingleOrDefault(Function(Entity) Entity.ModuleCode = _PreDynamicReportModuleCode & KeyValuePair.Value.Replace(" ", "") & "DRPT")

                    If AdvantageFramework.Security.DoesUserHaveAccessToModule(UserPermission) Then

                        DynamicReportDataSetsList.Add(KeyValuePair)

                    End If

                Next

            End Using

            LoadAvailableDynamicReportDataSets = DynamicReportDataSetsList

        End Function
        Public Function LoadAvailableDynamicReports(ByVal Session As AdvantageFramework.Security.Session, ByVal AllDynamicReportsList As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.DynamicReport)) As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.DynamicReport)

            'objects
            Dim DynamicReportsList As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.DynamicReport) = Nothing

            Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(Session.ConnectionString, Session.UserCode)

                DynamicReportsList = LoadAvailableDynamicReports(SecurityDbContext, AllDynamicReportsList, Session.Application, Session.User.ID)

            End Using

            LoadAvailableDynamicReports = DynamicReportsList

        End Function
        Public Function LoadAvailableDynamicReports(ByVal SecurityDbContext As AdvantageFramework.Security.Database.DbContext, ByVal AllDynamicReportsList As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.DynamicReport), ByVal ApplicationID As Integer, ByVal UserID As Integer) As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.DynamicReport)

            'objects
            Dim DynamicReportsList As Generic.List(Of AdvantageFramework.Reporting.Database.Entities.DynamicReport) = Nothing
            Dim KeyValuePair As Generic.KeyValuePair(Of Long, String) = Nothing
            Dim UserPermissions As Generic.List(Of Security.Database.Views.UserPermission) = Nothing
            Dim UserPermission As Security.Database.Views.UserPermission = Nothing

            DynamicReportsList = New Generic.List(Of AdvantageFramework.Reporting.Database.Entities.DynamicReport)
            UserPermissions = AdvantageFramework.Security.Database.Procedures.UserPermissionView.LoadByApplicationAndUser(SecurityDbContext, ApplicationID, UserID).Where(Function(Entity) Entity.ModuleCode.StartsWith(_PreDynamicReportModuleCode)).ToList

            For Each KeyValuePair In AdvantageFramework.EnumUtilities.GetEnumDictionary(GetType(AdvantageFramework.Reporting.DynamicReports)).OrderBy(Function(KeyValue) KeyValue.Value).ToList

                UserPermission = UserPermissions.SingleOrDefault(Function(Entity) Entity.ModuleCode = _PreDynamicReportModuleCode & KeyValuePair.Value.Replace(" ", "") & "DRPT")

                If AdvantageFramework.Security.DoesUserHaveAccessToModule(UserPermission) Then

                    If AllDynamicReportsList.Any(Function(DRPT) DRPT.Type = KeyValuePair.Key) Then

                        DynamicReportsList.AddRange(AllDynamicReportsList.Where(Function(DRPT) DRPT.Type = KeyValuePair.Key).ToList)

                    End If

                End If

            Next

            LoadAvailableDynamicReports = DynamicReportsList

        End Function
        Public Function LoadDynamicColumnHeader(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal HeaderType As String,
                                                ByRef HeaderText As String, ByRef AllowShowHide As Boolean, ByRef ShowInCustomizationForm As Boolean,
                                                ByRef ShowInExpressionEditor As Boolean, ByRef ShowFilterRowMenu As Integer,
                                                ByRef ShowInFilterControl As Integer) As Boolean

            'objects
            Dim Caption As String = ""
            Dim IsVisible As Boolean = False
            Dim Number As String = ""

            Try

                Number = AdvantageFramework.StringUtilities.RemoveAllNonNumeric(HeaderType)

                Try

                    If HeaderType.StartsWith("CompLabelFromUDFTable") Then

                        Caption = DbContext.Database.SqlQuery(Of String)("SELECT ISNULL([USER_LABEL], '') FROM [dbo].[UDV_LABEL] WHERE [UDV_TABLE_NAME] = 'JOB_CMP_UDV" & Number & "'").FirstOrDefault

                    ElseIf HeaderType.StartsWith("LabelFromUDFTable") Then

                        Caption = DbContext.Database.SqlQuery(Of String)("SELECT ISNULL([USER_LABEL], '') FROM [dbo].[UDV_LABEL] WHERE [UDV_TABLE_NAME] = 'JOB_LOG_UDV" & Number & "'").FirstOrDefault

                    ElseIf HeaderType.StartsWith("LabelAssign") Then

                        Caption = DbContext.Database.SqlQuery(Of String)("SELECT ISNULL([AGY_SETTINGS_VALUE], '') FROM [dbo].[AGY_SETTINGS] WHERE [AGY_SETTINGS_CODE] = 'TR_TITLE" & Number & "'").FirstOrDefault

                    End If

                Catch ex As Exception
                    Caption = ""
                End Try

                If Caption <> "" Then

                    IsVisible = True
                    HeaderText = Caption
                    AllowShowHide = True
                    ShowInCustomizationForm = True
                    ShowInExpressionEditor = True
                    ShowFilterRowMenu = 0
                    ShowInFilterControl = 0

                Else

                    IsVisible = False
                    AllowShowHide = False
                    ShowInCustomizationForm = False
                    ShowInExpressionEditor = False
                    ShowFilterRowMenu = 1
                    ShowInFilterControl = 1

                End If

            Catch ex As Exception
                IsVisible = False
            Finally
                LoadDynamicColumnHeader = IsVisible
            End Try

        End Function
        Public Function LoadDynamicReportObjectType(ByVal DynamicReport As Reporting.DynamicReports) As System.Type

            'objects
            Dim ObjectType As System.Type = Nothing

            Try

                If DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobSummaryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSchedule Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ProjectScheduleReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientContact Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.ClientContactReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTime Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTime Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DirectTimeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTimeWithEmployeeCost Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeCostReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTimeWithEmployeeCost Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DirectTimeCostReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobProjectScheduleSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobProjectScheduleSummaryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailBillMonth Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailBillMonthReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFunction Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFunctionReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItem Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Alerts Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.AlertReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AlertsWithComments Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.AlertCommentsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AlertsWithRecipients Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.AlertRecipientsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectHoursUsed Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ProjectHoursUsedReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.ProjectSummary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryTask Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.ProjectSummaryTask)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.NewspaperOrderDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.NewspaperOrderDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatus Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobPurchaseOrder Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobPurchaseOrderReportSP)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimatedAndActualIncome Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EstimatedAndActualIncome)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CRMOpportunityDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityToInvestment Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CRMOpportunityToInvestmentReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMProspects Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CRMProspectsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMClientContracts Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CRMClientContractsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPL Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ClientPL)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AROpenAged Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.AROpenAged)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlan Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaPlanReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusSummaryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFee Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ServiceFee)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Clients Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.ClientReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Divisions Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.DivisionReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Products Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.ProductReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Employees Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.EmployeeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Vendors Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.VendorReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Campaign Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CampaignReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashAnalysis Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.CashAnalysisReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournal Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.SalesJournalReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournalWithComments Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.SalesJournalReportWithComments)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AuthorizationToBuy Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.ATBReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeApproval Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.EmployeeTimeApproval)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GeneralLedgerDetail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.GeneralLedgerDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMedia Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.CampaignProductionMediaReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMediaSummary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.CampaignProductionMediaSummaryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimateDetailApproved Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.EstimateDetailApprovedReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobWriteOff Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobWriteOff)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Transfer Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.TransferReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceWithBalanceAging Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.AccountsPayableInvoiceWithBalanceAgingReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPayments Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaymentsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPaidByClient Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaidByClientReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResults Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaResultReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimateForm Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.EstimateForm)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFeeContract Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobServiceFeeContractReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.IncomeOnly Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.IncomeOnlyReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryAnalysis Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.ProjectSummaryAnalysis)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ARPaymentHistory Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ARPaymentHistoryReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPLDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ClientPLDetail)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetProduction Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetMedia Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.BillingWorksheetMediaReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.OpenPurchaseOrderDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.OpenPurchaseOrderDetail)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItemAccountSplit Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailItemAccountSplitReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ExpenseReportAndApproval Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ExpenseReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorContracts Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.VendorContractsReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VirtualCreditCardTransactionEFS Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobForecast Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobForecastReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DigitalResultsComparison Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DigitalResultsComparisonReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GeneralLedgerReport Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.GeneralLedgerDetailByAccountReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResultsComparisonByClientAndType Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaResultsComparisonByClientAndTypeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TrialBalance Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.TrialBalanceReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableBalanceByVendor Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.AccountsPayableBalanceByVendor)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsReceivableBalanceByClient Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.AccountsReceivableBalanceByClient)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesAndCostOfSalesByClient Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SalesAndCostOfSalesByClientReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TimeReport Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.TimeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.RevenueBreakdownByClient Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.RevenueBreakdownByClientReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeUtilization Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EmployeeUtilizationReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPreBuy Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPostBuy Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyDRWReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegister Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.CheckRegister)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegisterWithInvoiceDetails Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.CheckRegisterWithInvoiceDetails)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeInOutBoard Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EmployeeInOutBoard)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonByVendor Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonByVendor)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonDetailByVendor Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonDetailByVendor)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ResourceAllocationByWeek Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ResourceAllocationByWeek)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLChartOfAccounts Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.GLChartOfAccounts)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLReportRow Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.GLReportRow)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashTransactions Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.CashTransaction)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusCoopBreakout Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusCoopBreakout)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunction Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunction)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJobComponent Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobComponent)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByCampaign Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPCampaign)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunctionMinimized Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunctionMinimized)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob1Minimized Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobMinimized)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob2Minimized Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob2Minimized)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupModuleAccess Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityGroupModuleAccess)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupSettings Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityGroupSettings)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupUserSettings Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityGroupUserSettings)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserModuleAccess Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityUserModuleAccess)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserSettings Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityUserSettings)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserTimesheetFunction Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.UserTimesheetFunction)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserLoginAudit Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityUserLoginAudit)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndMediaWIP Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MonthEndMediaWIP)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndProductionWIP Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MonthEndProductionWIP)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectScheduleTasksByEmployee Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ProjectScheduleTasksByEmployeeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeHoursAllocation Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EmployeeHoursAllocationReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectScheduleTasksByEmployee Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ProjectScheduleTasksByEmployeeReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.InvoiceBilledBackup Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.InvoiceBilledBackup)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashManagementProduction Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.CashManagementProduction)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPreBuy Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPostBuy Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyDRWReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficMissingInstructions Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaTrafficMissingInstructionDataset)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficInstructions Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaTrafficInstructionDataset)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndAccruedLiability Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MonthEndAccruedLiability)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndAccountsPayable Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MonthEndAccountsPayable)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorSpendWithEEOCAndMinorityStatusSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusSummary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorSpendWithEEOCAndMinorityStatusDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusDetail)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingApproval Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.BillingApprovalReport)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastInvoiceSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.BroadcastInvoiceSummary)

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeAnalysis Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EmployeeTimeAnalysisReport)

                End If

            Catch ex As Exception
                ObjectType = Nothing
            Finally
                LoadDynamicReportObjectType = ObjectType
            End Try

        End Function
        Public Function LoadJobDetailAnalysisData(ByVal Session As AdvantageFramework.Security.Session, ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Report As AdvantageFramework.Reporting.ReportTypes,
                                                  ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.JobDetailAnalysis)

            'objects
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SelectedJobs As Generic.List(Of Integer) = Nothing
            Dim SelectedJobsString As Generic.List(Of String) = Nothing
            Dim SelectedAccountExecutives As Generic.List(Of String) = Nothing
            Dim SelectedSalesClasses As Generic.List(Of String) = Nothing
            Dim JobDetailAnalysisList As Generic.List(Of AdvantageFramework.Database.Classes.JobDetailAnalysis) = Nothing
            Dim JobDetailAnalysisCDPList As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisClientDivisonProduct) = Nothing
            Dim OpenJobsOnly As Boolean = True
            Dim ExcludeNonBillableHours As Boolean = False
            Dim DateCutoff As String = ""

            If ParameterDictionary("JobDetailAnalysis_Include") = "OpenJobsOnly" Then

                OpenJobsOnly = True

            Else

                OpenJobsOnly = False

            End If

            If ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours") IsNot Nothing AndAlso
                    CBool(ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours")) Then

                ExcludeNonBillableHours = True

            Else

                ExcludeNonBillableHours = False

            End If

            SelectedOffices = ParameterDictionary("JobDetailAnalysis_SelectedOffices")

            SelectedClients = ParameterDictionary("JobDetailAnalysis_SelectedClients")

            SelectedDivisions = ParameterDictionary("JobDetailAnalysis_SelectedDivisions")

            SelectedProducts = ParameterDictionary("JobDetailAnalysis_SelectedProducts")

            If TypeOf ParameterDictionary("JobDetailAnalysis_SelectedJobs") Is Generic.List(Of Integer) Then

                SelectedJobs = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

                If SelectedJobs IsNot Nothing Then

                    SelectedJobsString = SelectedJobs.Select(Function(JobNumber) CStr(JobNumber)).ToList

                End If

            Else

                SelectedJobsString = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

            End If

            SelectedAccountExecutives = ParameterDictionary("JobDetailAnalysis_SelectedAccountExecutives")

            SelectedSalesClasses = ParameterDictionary("JobDetailAnalysis_SelectedSalesClasses")

            DateCutoff = ParameterDictionary("JobDetailAnalysis_DateCutOff")

            JobDetailAnalysisList = AdvantageFramework.Database.Procedures.JobDetailAnalysisComplexType.Load(DbContext, OpenJobsOnly, ExcludeNonBillableHours, SelectedOffices,
                                                                                                             SelectedClients, SelectedJobsString, SelectedAccountExecutives,
                                                                                                             SelectedSalesClasses, SelectedDivisions, SelectedProducts, Session.UserCode, DateCutoff).ToList


            If ParameterDictionary("JobDetailAnalysis_SortBy") = "AccountExecutive" Then

                JobDetailAnalysisList = JobDetailAnalysisList.OrderBy(Function(JobAnalysisDetail) JobAnalysisDetail.AccountExecutive).ToList

            End If

            If Report = ReportTypes.JobDetailAnalysisV9Summary Then

                JobDetailAnalysisList = JobDetailAnalysisList.OrderBy(Function(JobAnalysisDetail) JobAnalysisDetail.FunctionType).ToList

            End If

            LoadJobDetailAnalysisData = JobDetailAnalysisList.ToList

        End Function
        Public Function LoadJobDetailAnalysisDataCDP(ByVal Session As AdvantageFramework.Security.Session, ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Report As AdvantageFramework.Reporting.ReportTypes,
                                                  ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisClientDivisonProduct)

            'objects
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SelectedJobs As Generic.List(Of Integer) = Nothing
            Dim SelectedJobsString As Generic.List(Of String) = Nothing
            Dim SelectedAccountExecutives As Generic.List(Of String) = Nothing
            Dim SelectedSalesClasses As Generic.List(Of String) = Nothing
            Dim JobDetailAnalysisCDPList As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisClientDivisonProduct) = Nothing
            Dim OpenJobsOnly As Boolean = True
            Dim ExcludeNonBillableHours As Boolean = False
            Dim DateCutoff As String = ""

            Dim Offices As String = ""
            Dim Clients As String = ""
            Dim Divisions As String = ""
            Dim Products As String = ""
            Dim Jobs As String = ""
            Dim JobsString As String = ""
            Dim AccountExecutives As String = ""
            Dim SalesClasses As String = ""

            If ParameterDictionary("JobDetailAnalysis_Include") = "OpenJobsOnly" Then

                OpenJobsOnly = True

            Else

                OpenJobsOnly = False

            End If

            If ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours") IsNot Nothing AndAlso
                    CBool(ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours")) Then

                ExcludeNonBillableHours = True

            Else

                ExcludeNonBillableHours = False

            End If

            SelectedOffices = ParameterDictionary("JobDetailAnalysis_SelectedOffices")

            SelectedClients = ParameterDictionary("JobDetailAnalysis_SelectedClients")

            SelectedDivisions = ParameterDictionary("JobDetailAnalysis_SelectedDivisions")

            SelectedProducts = ParameterDictionary("JobDetailAnalysis_SelectedProducts")

            If TypeOf ParameterDictionary("JobDetailAnalysis_SelectedJobs") Is Generic.List(Of Integer) Then

                SelectedJobs = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

                If SelectedJobs IsNot Nothing Then

                    SelectedJobsString = SelectedJobs.Select(Function(JobNumber) CStr(JobNumber)).ToList

                End If

            Else

                SelectedJobsString = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

            End If

            SelectedAccountExecutives = ParameterDictionary("JobDetailAnalysis_SelectedAccountExecutives")

            SelectedSalesClasses = ParameterDictionary("JobDetailAnalysis_SelectedSalesClasses")

            DateCutoff = ParameterDictionary("JobDetailAnalysis_DateCutOff")

            If SelectedOffices IsNot Nothing Then
                Offices = Join(SelectedOffices.ToArray, ",")
            End If
            If SelectedClients IsNot Nothing Then
                Clients = Join(SelectedClients.ToArray, ",")
            End If
            If SelectedJobsString IsNot Nothing Then
                JobsString = Join(SelectedJobsString.ToArray, ",")
            End If
            If SelectedAccountExecutives IsNot Nothing Then
                AccountExecutives = Join(SelectedAccountExecutives.ToArray, ",")
            End If
            If SelectedSalesClasses IsNot Nothing Then
                SalesClasses = Join(SelectedSalesClasses.ToArray, ",")
            End If
            If SelectedDivisions IsNot Nothing Then
                Divisions = Join(SelectedDivisions.ToArray, ",")
            End If
            If SelectedProducts IsNot Nothing Then
                Products = Join(SelectedProducts.ToArray, ",")
            End If

            Try

                JobDetailAnalysisCDPList = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisClientDivisonProduct)(String.Format("EXEC [dbo].[advsp_job_detail_analysis_cdp_load_report] {0}, {1}, '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}'", OpenJobsOnly, ExcludeNonBillableHours, Offices, Clients, Divisions, Products, JobsString, AccountExecutives, SalesClasses, DateCutoff, Session.UserCode)).ToList

            Catch ex As Exception

            End Try

            LoadJobDetailAnalysisDataCDP = JobDetailAnalysisCDPList.ToList

        End Function
        Public Function LoadJobDetailAnalysisDataEmployeeTime(ByVal Session As AdvantageFramework.Security.Session, ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Report As AdvantageFramework.Reporting.ReportTypes,
                                                  ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisEmployeeTime)

            'objects
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SelectedJobs As Generic.List(Of Integer) = Nothing
            Dim SelectedJobsString As Generic.List(Of String) = Nothing
            Dim SelectedAccountExecutives As Generic.List(Of String) = Nothing
            Dim SelectedSalesClasses As Generic.List(Of String) = Nothing
            Dim JobDetailAnalysisEmployeeTimeList As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisEmployeeTime) = Nothing
            Dim OpenJobsOnly As Boolean = True
            Dim ExcludeNonBillableHours As Boolean = False
            Dim SuppressZeroMU As Boolean = False
            Dim DateCutoff As String = ""

            Dim Offices As String = ""
            Dim Clients As String = ""
            Dim Divisions As String = ""
            Dim Products As String = ""
            Dim Jobs As String = ""
            Dim JobsString As String = ""
            Dim AccountExecutives As String = ""
            Dim SalesClasses As String = ""

            If ParameterDictionary("JobDetailAnalysis_Include") = "OpenJobsOnly" Then

                OpenJobsOnly = True

            Else

                OpenJobsOnly = False

            End If

            If ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours") IsNot Nothing AndAlso
                    CBool(ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours")) Then

                ExcludeNonBillableHours = True

            Else

                ExcludeNonBillableHours = False

            End If

            If ParameterDictionary("JobDetailAnalysis_SuppressZeroMU") IsNot Nothing AndAlso
                    CBool(ParameterDictionary("JobDetailAnalysis_SuppressZeroMU")) Then

                SuppressZeroMU = True

            Else

                SuppressZeroMU = False

            End If

            SelectedOffices = ParameterDictionary("JobDetailAnalysis_SelectedOffices")

            SelectedClients = ParameterDictionary("JobDetailAnalysis_SelectedClients")

            SelectedDivisions = ParameterDictionary("JobDetailAnalysis_SelectedDivisions")

            SelectedProducts = ParameterDictionary("JobDetailAnalysis_SelectedProducts")

            If TypeOf ParameterDictionary("JobDetailAnalysis_SelectedJobs") Is Generic.List(Of Integer) Then

                SelectedJobs = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

                If SelectedJobs IsNot Nothing Then

                    SelectedJobsString = SelectedJobs.Select(Function(JobNumber) CStr(JobNumber)).ToList

                End If

            Else

                SelectedJobsString = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

            End If

            SelectedAccountExecutives = ParameterDictionary("JobDetailAnalysis_SelectedAccountExecutives")

            SelectedSalesClasses = ParameterDictionary("JobDetailAnalysis_SelectedSalesClasses")

            DateCutoff = ParameterDictionary("JobDetailAnalysis_DateCutOff")

            If SelectedOffices IsNot Nothing Then
                Offices = Join(SelectedOffices.ToArray, ",")
            End If
            If SelectedClients IsNot Nothing Then
                Clients = Join(SelectedClients.ToArray, ",")
            End If
            If SelectedJobsString IsNot Nothing Then
                JobsString = Join(SelectedJobsString.ToArray, ",")
            End If
            If SelectedAccountExecutives IsNot Nothing Then
                AccountExecutives = Join(SelectedAccountExecutives.ToArray, ",")
            End If
            If SelectedSalesClasses IsNot Nothing Then
                SalesClasses = Join(SelectedSalesClasses.ToArray, ",")
            End If
            If SelectedDivisions IsNot Nothing Then
                Divisions = Join(SelectedDivisions.ToArray, ",")
            End If
            If SelectedProducts IsNot Nothing Then
                Products = Join(SelectedProducts.ToArray, ",")
            End If

            Try

                JobDetailAnalysisEmployeeTimeList = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisEmployeeTime)(String.Format("EXEC [dbo].[advsp_job_detail_analysis_employeetime_load_report] {0}, {1}, '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', {9}, '{10}', '{11}'", OpenJobsOnly, ExcludeNonBillableHours, Offices, Clients, Divisions, Products, JobsString, AccountExecutives, SalesClasses, SuppressZeroMU, DateCutoff, Session.UserCode)).ToList

            Catch ex As Exception

            End Try

            If SuppressZeroMU = True Then

                LoadJobDetailAnalysisDataEmployeeTime = JobDetailAnalysisEmployeeTimeList.ToList.Where(Function(JD) JD.ZeroMU <> 0).ToList

            Else

                LoadJobDetailAnalysisDataEmployeeTime = JobDetailAnalysisEmployeeTimeList.ToList

            End If


        End Function
        Public Function LoadJobDetailAnalysisDataAdvanceBilling(ByVal Session As AdvantageFramework.Security.Session, ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Report As AdvantageFramework.Reporting.ReportTypes,
                                                  ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisAdvanceBilling)

            'objects
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SelectedJobs As Generic.List(Of Integer) = Nothing
            Dim SelectedJobsString As Generic.List(Of String) = Nothing
            Dim SelectedAccountExecutives As Generic.List(Of String) = Nothing
            Dim SelectedSalesClasses As Generic.List(Of String) = Nothing
            Dim JobDetailAnalysisAdvanceBillingList As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisAdvanceBilling) = Nothing
            Dim OpenJobsOnly As Boolean = True
            Dim ExcludeNonBillableHours As Boolean = False
            Dim DateCutoff As String = ""

            Dim Offices As String = ""
            Dim Clients As String = ""
            Dim Divisions As String = ""
            Dim Products As String = ""
            Dim Jobs As String = ""
            Dim JobsString As String = ""
            Dim AccountExecutives As String = ""
            Dim SalesClasses As String = ""

            If ParameterDictionary("JobDetailAnalysis_Include") = "OpenJobsOnly" Then

                OpenJobsOnly = True

            Else

                OpenJobsOnly = False

            End If

            If ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours") IsNot Nothing AndAlso
                    CBool(ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours")) Then

                ExcludeNonBillableHours = True

            Else

                ExcludeNonBillableHours = False

            End If

            SelectedOffices = ParameterDictionary("JobDetailAnalysis_SelectedOffices")

            SelectedClients = ParameterDictionary("JobDetailAnalysis_SelectedClients")

            SelectedDivisions = ParameterDictionary("JobDetailAnalysis_SelectedDivisions")

            SelectedProducts = ParameterDictionary("JobDetailAnalysis_SelectedProducts")

            If TypeOf ParameterDictionary("JobDetailAnalysis_SelectedJobs") Is Generic.List(Of Integer) Then

                SelectedJobs = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

                If SelectedJobs IsNot Nothing Then

                    SelectedJobsString = SelectedJobs.Select(Function(JobNumber) CStr(JobNumber)).ToList

                End If

            Else

                SelectedJobsString = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

            End If

            SelectedAccountExecutives = ParameterDictionary("JobDetailAnalysis_SelectedAccountExecutives")

            SelectedSalesClasses = ParameterDictionary("JobDetailAnalysis_SelectedSalesClasses")

            DateCutoff = ParameterDictionary("JobDetailAnalysis_DateCutOff")

            If SelectedOffices IsNot Nothing Then
                Offices = Join(SelectedOffices.ToArray, ",")
            End If
            If SelectedClients IsNot Nothing Then
                Clients = Join(SelectedClients.ToArray, ",")
            End If
            If SelectedJobsString IsNot Nothing Then
                JobsString = Join(SelectedJobsString.ToArray, ",")
            End If
            If SelectedAccountExecutives IsNot Nothing Then
                AccountExecutives = Join(SelectedAccountExecutives.ToArray, ",")
            End If
            If SelectedSalesClasses IsNot Nothing Then
                SalesClasses = Join(SelectedSalesClasses.ToArray, ",")
            End If
            If SelectedDivisions IsNot Nothing Then
                Divisions = Join(SelectedDivisions.ToArray, ",")
            End If
            If SelectedProducts IsNot Nothing Then
                Products = Join(SelectedProducts.ToArray, ",")
            End If

            Try

                JobDetailAnalysisAdvanceBillingList = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisAdvanceBilling)(String.Format("EXEC [dbo].[advsp_job_detail_analysis_advance_load_report] {0}, {1}, '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}'", OpenJobsOnly, ExcludeNonBillableHours, Offices, Clients, Divisions, Products, JobsString, AccountExecutives, SalesClasses, DateCutoff, Session.UserCode)).ToList

            Catch ex As Exception

            End Try




            LoadJobDetailAnalysisDataAdvanceBilling = JobDetailAnalysisAdvanceBillingList.ToList

        End Function
        Public Function LoadJobDetailAnalysisCategoryData(ByVal Session As AdvantageFramework.Security.Session, ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Report As AdvantageFramework.Reporting.ReportTypes,
                                                          ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.JobDetailAnalysisCategory)

            'objects
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SelectedJobs As Generic.List(Of Integer) = Nothing
            Dim SelectedJobsString As Generic.List(Of String) = Nothing
            Dim SelectedAccountExecutives As Generic.List(Of String) = Nothing
            Dim SelectedSalesClasses As Generic.List(Of String) = Nothing
            Dim JobDetailAnalysisList As Generic.List(Of AdvantageFramework.Database.Classes.JobDetailAnalysisCategory) = Nothing
            Dim OpenJobsOnly As Boolean = True
            Dim ExcludeNonBillableHours As Boolean = False
            Dim DateCutoff As String = ""

            If ParameterDictionary("JobDetailAnalysis_Include") = "OpenJobsOnly" Then

                OpenJobsOnly = True

            Else

                OpenJobsOnly = False

            End If

            If ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours") IsNot Nothing AndAlso
                    CBool(ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours")) Then

                ExcludeNonBillableHours = True

            Else

                ExcludeNonBillableHours = False

            End If

            SelectedOffices = ParameterDictionary("JobDetailAnalysis_SelectedOffices")

            SelectedClients = ParameterDictionary("JobDetailAnalysis_SelectedClients")
            SelectedDivisions = ParameterDictionary("JobDetailAnalysis_SelectedDivisions")
            SelectedProducts = ParameterDictionary("JobDetailAnalysis_SelectedProducts")

            If TypeOf ParameterDictionary("JobDetailAnalysis_SelectedJobs") Is Generic.List(Of Integer) Then

                SelectedJobs = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

                If SelectedJobs IsNot Nothing Then

                    SelectedJobsString = SelectedJobs.Select(Function(JobNumber) CStr(JobNumber)).ToList

                End If

            Else

                SelectedJobsString = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

            End If

            SelectedAccountExecutives = ParameterDictionary("JobDetailAnalysis_SelectedAccountExecutives")

            SelectedSalesClasses = ParameterDictionary("JobDetailAnalysis_SelectedSalesClasses")

            DateCutoff = ParameterDictionary("JobDetailAnalysis_DateCutOff")

            JobDetailAnalysisList = AdvantageFramework.Database.Procedures.JobDetailAnalysisCategoryComplexType.Load(DbContext, OpenJobsOnly, ExcludeNonBillableHours, SelectedOffices,
                                                                                                                     SelectedClients, SelectedDivisions, SelectedProducts, SelectedJobsString,
                                                                                                                     SelectedAccountExecutives, SelectedSalesClasses, Session.UserCode, DateCutoff).ToList

            If ParameterDictionary("JobDetailAnalysis_SortBy") = "AccountExecutive" Then

                JobDetailAnalysisList = JobDetailAnalysisList.OrderBy(Function(JobAnalysisDetail) JobAnalysisDetail.AccountExecutive).ToList

            End If

            LoadJobDetailAnalysisCategoryData = JobDetailAnalysisList.ToList

        End Function
        Public Function LoadJobDetailAnalysisQVAData(ByVal Session As AdvantageFramework.Security.Session, ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Report As AdvantageFramework.Reporting.ReportTypes,
                                                     ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.JobDetailAnalysisQVA)

            'objects
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SelectedJobs As Generic.List(Of Integer) = Nothing
            Dim SelectedJobsString As Generic.List(Of String) = Nothing
            Dim SelectedAccountExecutives As Generic.List(Of String) = Nothing
            Dim SelectedSalesClasses As Generic.List(Of String) = Nothing
            Dim JobDetailAnalysisList As Generic.List(Of AdvantageFramework.Database.Classes.JobDetailAnalysisQVA) = Nothing
            Dim OpenJobsOnly As Integer = 0
            Dim ExcludeNonBillableHours As Integer = 0
            Dim DateCutoff As String = ""

            If ParameterDictionary("JobDetailAnalysis_Include") = "OpenJobsOnly" Then

                OpenJobsOnly = 1

            Else

                OpenJobsOnly = 0

            End If

            If ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours") IsNot Nothing AndAlso
                    CBool(ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours")) Then

                ExcludeNonBillableHours = 1

            Else

                ExcludeNonBillableHours = 0

            End If

            SelectedOffices = ParameterDictionary("JobDetailAnalysis_SelectedOffices")

            SelectedClients = ParameterDictionary("JobDetailAnalysis_SelectedClients")

            SelectedDivisions = ParameterDictionary("JobDetailAnalysis_SelectedDivisions")

            SelectedProducts = ParameterDictionary("JobDetailAnalysis_SelectedProducts")

            If TypeOf ParameterDictionary("JobDetailAnalysis_SelectedJobs") Is Generic.List(Of Integer) Then

                SelectedJobs = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

                If SelectedJobs IsNot Nothing Then

                    SelectedJobsString = SelectedJobs.Select(Function(JobNumber) CStr(JobNumber)).ToList

                End If

            Else

                SelectedJobsString = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

            End If

            SelectedAccountExecutives = ParameterDictionary("JobDetailAnalysis_SelectedAccountExecutives")

            SelectedSalesClasses = ParameterDictionary("JobDetailAnalysis_SelectedSalesClasses")

            DateCutoff = ParameterDictionary("JobDetailAnalysis_DateCutOff")

            JobDetailAnalysisList = AdvantageFramework.Database.Procedures.JobDetailAnalysisQVAComplexType.Load(DbContext, OpenJobsOnly, ExcludeNonBillableHours, SelectedOffices,
                                                                                                             SelectedClients, SelectedDivisions, SelectedProducts, SelectedJobsString, SelectedAccountExecutives,
                                                                                                             SelectedSalesClasses, Session.UserCode, DateCutoff).ToList

            If ParameterDictionary("JobDetailAnalysis_SortBy") = "AccountExecutive" Then

                'JobDetailAnalysisList = JobDetailAnalysisList.OrderBy(Function(JobDetailAnalysisQVA) JobDetailAnalysisQVA.AccountExecutive).ToList

            End If

            LoadJobDetailAnalysisQVAData = JobDetailAnalysisList.ToList

        End Function
        Public Function LoadJobDetailAnalysisCurrentPriorData(ByVal Session As AdvantageFramework.Security.Session, ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal Report As AdvantageFramework.Reporting.ReportTypes,
                                                  ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisCurrentPrior)

            'objects
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SelectedJobs As Generic.List(Of Integer) = Nothing
            Dim SelectedJobsString As Generic.List(Of String) = Nothing
            Dim SelectedAccountExecutives As Generic.List(Of String) = Nothing
            Dim SelectedSalesClasses As Generic.List(Of String) = Nothing
            Dim JobDetailAnalysisCurrentPriorList As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisCurrentPrior) = Nothing
            Dim OpenJobsOnly As Boolean = True
            Dim ExcludeNonBillableHours As Boolean = False

            Dim Offices As String = Nothing
            Dim Clients As String = Nothing
            Dim Divisions As String = Nothing
            Dim Products As String = Nothing
            Dim Jobs As String = Nothing
            Dim JobsString As String = Nothing
            Dim AccountExecutives As String = Nothing
            Dim SalesClasses As String = Nothing
            Dim DateCutOff As String = Nothing

            If ParameterDictionary("JobDetailAnalysis_Include") = "OpenJobsOnly" Then

                OpenJobsOnly = True

            Else

                OpenJobsOnly = False

            End If

            If ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours") IsNot Nothing AndAlso
                    CBool(ParameterDictionary("JobDetailAnalysis_ExcludeNonBillableHours")) Then

                ExcludeNonBillableHours = True

            Else

                ExcludeNonBillableHours = False

            End If

            SelectedOffices = ParameterDictionary("JobDetailAnalysis_SelectedOffices")

            SelectedClients = ParameterDictionary("JobDetailAnalysis_SelectedClients")

            SelectedDivisions = ParameterDictionary("JobDetailAnalysis_SelectedDivisions")

            SelectedProducts = ParameterDictionary("JobDetailAnalysis_SelectedProducts")

            If TypeOf ParameterDictionary("JobDetailAnalysis_SelectedJobs") Is Generic.List(Of Integer) Then

                SelectedJobs = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

                If SelectedJobs IsNot Nothing Then

                    SelectedJobsString = SelectedJobs.Select(Function(JobNumber) CStr(JobNumber)).ToList

                End If

            Else

                SelectedJobsString = ParameterDictionary("JobDetailAnalysis_SelectedJobs")

            End If

            SelectedAccountExecutives = ParameterDictionary("JobDetailAnalysis_SelectedAccountExecutives")

            SelectedSalesClasses = ParameterDictionary("JobDetailAnalysis_SelectedSalesClasses")

            DateCutOff = ParameterDictionary("JobDetailAnalysis_DateCutOff")

            If SelectedOffices IsNot Nothing Then
                Offices = Join(SelectedOffices.ToArray, ",")
            End If
            If SelectedClients IsNot Nothing Then
                Clients = Join(SelectedClients.ToArray, ",")
            End If
            If SelectedJobsString IsNot Nothing Then
                JobsString = Join(SelectedJobsString.ToArray, ",")
            End If
            If SelectedAccountExecutives IsNot Nothing Then
                AccountExecutives = Join(SelectedAccountExecutives.ToArray, ",")
            End If
            If SelectedSalesClasses IsNot Nothing Then
                SalesClasses = Join(SelectedSalesClasses.ToArray, ",")
            End If
            If SelectedDivisions IsNot Nothing Then
                Divisions = Join(SelectedDivisions.ToArray, ",")
            End If
            If SelectedProducts IsNot Nothing Then
                Products = Join(SelectedProducts.ToArray, ",")
            End If

            Try
                JobDetailAnalysisCurrentPriorList = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisCurrentPrior)(String.Format("EXEC [dbo].[advsp_job_detail_analysis_currentprior_load_report] {0}, {1}, '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}'", OpenJobsOnly, ExcludeNonBillableHours, Offices, Clients, Divisions, Products, JobsString, AccountExecutives, SalesClasses, DateCutOff, Session.UserCode)).ToList
            Catch ex As Exception

            End Try

            'If ParameterDictionary("JobDetailAnalysis_SortBy") = "AccountExecutive" Then

            '    JobDetailAnalysisList = JobDetailAnalysisList.OrderBy(Function(JobAnalysisDetail) JobAnalysisDetail.AccountExecutive).ToList

            'End If

            LoadJobDetailAnalysisCurrentPriorData = JobDetailAnalysisCurrentPriorList.ToList

        End Function
        Private Function LoadServiceFeeReconcileDetailIncomeOnly(ByVal ServiceFeeReconciliationSetting As AdvantageFramework.Security.Database.Entities.ServiceFeeReconciliationSetting,
                                                                 ByVal ServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile),
                                                                 ByVal IncomeOnlySalesClassCodes As Generic.List(Of String), ByVal IncomeOnlyFunctionCodes As Generic.List(Of String)) As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)

            'objects
            Dim NewServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile) = Nothing
            Dim SalesClassesServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile) = Nothing
            Dim FunctionsServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile) = Nothing
            Dim ServiceFeeJobServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile) = Nothing

            If ServiceFeeReconciliationSetting.IncomeOnlyJobCompMarkedAsFee.GetValueOrDefault(0) = 1 OrElse
                    (ServiceFeeReconciliationSetting.IncomeOnlyPostedBasedOnSalesClass.GetValueOrDefault(0) = 1 AndAlso IncomeOnlySalesClassCodes IsNot Nothing) OrElse
                    (ServiceFeeReconciliationSetting.IncomeOnlyPostedBasedOnFunction.GetValueOrDefault(0) = 1 AndAlso IncomeOnlyFunctionCodes IsNot Nothing) Then

                SalesClassesServiceFeeReconcileDetailList = New Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)
                FunctionsServiceFeeReconcileDetailList = New Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)
                ServiceFeeJobServiceFeeReconcileDetailList = New Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)

                If ServiceFeeReconciliationSetting.IncomeOnlyJobCompMarkedAsFee.GetValueOrDefault(0) = 1 Then

                    ServiceFeeJobServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) (ServiceFeeReconcileDetail.FeeTimeType = "Standard Billed" AndAlso ServiceFeeReconcileDetail.IsServiceFeeJob = True) OrElse (ServiceFeeReconcileDetail.FeeTimeType <> "Standard Billed")).ToList

                End If

                If ServiceFeeReconciliationSetting.IncomeOnlyPostedBasedOnSalesClass.GetValueOrDefault(0) = 1 AndAlso IncomeOnlySalesClassCodes IsNot Nothing Then

                    SalesClassesServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) (ServiceFeeReconcileDetail.FeeTimeType = "Standard Billed" AndAlso IncomeOnlySalesClassCodes.Contains(ServiceFeeReconcileDetail.SalesClassCode) = True) OrElse (ServiceFeeReconcileDetail.FeeTimeType <> "Standard Billed")).ToList

                End If

                If ServiceFeeReconciliationSetting.IncomeOnlyPostedBasedOnFunction.GetValueOrDefault(0) = 1 AndAlso IncomeOnlyFunctionCodes IsNot Nothing Then

                    FunctionsServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) (ServiceFeeReconcileDetail.FeeTimeType = "Standard Billed" AndAlso IncomeOnlyFunctionCodes.Contains(ServiceFeeReconcileDetail.FunctionCode) = True) OrElse (ServiceFeeReconcileDetail.FeeTimeType <> "Standard Billed")).ToList

                End If

                NewServiceFeeReconcileDetailList = SalesClassesServiceFeeReconcileDetailList.Union(FunctionsServiceFeeReconcileDetailList).Union(ServiceFeeJobServiceFeeReconcileDetailList).Distinct.ToList

            Else

                NewServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList

            End If

            LoadServiceFeeReconcileDetailIncomeOnly = NewServiceFeeReconcileDetailList

        End Function
        Private Function LoadServiceFeeReconcileDetailProductionCommission(ByVal ServiceFeeReconciliationSetting As AdvantageFramework.Security.Database.Entities.ServiceFeeReconciliationSetting,
                                                                           ByVal ServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile),
                                                                           ByVal ProductionCommissionSalesClassCodes As Generic.List(Of String), ByVal ProductionCommissionFunctionCodes As Generic.List(Of String)) As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)

            'objects
            Dim NewServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile) = Nothing
            Dim SalesClassesServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile) = Nothing
            Dim FunctionsServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile) = Nothing

            If (ServiceFeeReconciliationSetting.ProductionCommissionPostedBasedOnSalesClass.GetValueOrDefault(0) = 1 AndAlso ProductionCommissionSalesClassCodes IsNot Nothing) OrElse
                    (ServiceFeeReconciliationSetting.ProductionCommissionPostedBasedOnFunction.GetValueOrDefault(0) = 1 AndAlso ProductionCommissionFunctionCodes IsNot Nothing) Then

                SalesClassesServiceFeeReconcileDetailList = New Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)
                FunctionsServiceFeeReconcileDetailList = New Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)

                If ServiceFeeReconciliationSetting.ProductionCommissionPostedBasedOnSalesClass.GetValueOrDefault(0) = 1 AndAlso ProductionCommissionSalesClassCodes IsNot Nothing Then

                    SalesClassesServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) (ServiceFeeReconcileDetail.FeeTimeType = "Production Billed" AndAlso ProductionCommissionSalesClassCodes.Contains(ServiceFeeReconcileDetail.SalesClassCode) = True) OrElse (ServiceFeeReconcileDetail.FeeTimeType <> "Production Billed")).ToList

                End If

                If ServiceFeeReconciliationSetting.ProductionCommissionPostedBasedOnFunction.GetValueOrDefault(0) = 1 AndAlso ProductionCommissionFunctionCodes IsNot Nothing Then

                    FunctionsServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) (ServiceFeeReconcileDetail.FeeTimeType = "Production Billed" AndAlso ProductionCommissionFunctionCodes.Contains(ServiceFeeReconcileDetail.FunctionCode) = True) OrElse (ServiceFeeReconcileDetail.FeeTimeType <> "Production Billed")).ToList

                End If

                NewServiceFeeReconcileDetailList = SalesClassesServiceFeeReconcileDetailList.Union(FunctionsServiceFeeReconcileDetailList).Distinct.ToList

            Else

                NewServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList

            End If

            LoadServiceFeeReconcileDetailProductionCommission = NewServiceFeeReconcileDetailList

        End Function
        Private Function LoadServiceFeeReconcileDetailMediaCommission(ByVal ServiceFeeReconciliationSetting As AdvantageFramework.Security.Database.Entities.ServiceFeeReconciliationSetting, ByVal ServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)) As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)

            'objects
            Dim NewServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile) = Nothing
            Dim MediaTypesList As Generic.List(Of String) = Nothing

            NewServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList

            MediaTypesList = New Generic.List(Of String)

            If ServiceFeeReconciliationSetting.BroadcastCommission.GetValueOrDefault(0) = 1 Then

                MediaTypesList.Add("R")
                MediaTypesList.Add("T")

            End If

            If ServiceFeeReconciliationSetting.MagazineCommission.GetValueOrDefault(0) = 1 Then

                MediaTypesList.Add("M")

            End If

            If ServiceFeeReconciliationSetting.NewspaperCommission.GetValueOrDefault(0) = 1 Then

                MediaTypesList.Add("N")

            End If

            If ServiceFeeReconciliationSetting.InternetCommission.GetValueOrDefault(0) = 1 Then

                MediaTypesList.Add("I")

            End If

            If ServiceFeeReconciliationSetting.OutOfHomeCommission.GetValueOrDefault(0) = 1 Then

                MediaTypesList.Add("O")

            End If

            NewServiceFeeReconcileDetailList = NewServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) (ServiceFeeReconcileDetail.FeeTimeType = "Media Billed" AndAlso MediaTypesList.Contains(ServiceFeeReconcileDetail.MediaType) = True) OrElse ServiceFeeReconcileDetail.FeeTimeType <> "Media Billed").ToList

            LoadServiceFeeReconcileDetailMediaCommission = NewServiceFeeReconcileDetailList

        End Function
        Public Function LoadServiceFeeReconciliationData(ByVal Session As AdvantageFramework.Security.Session,
                                                         ByVal SecurityDbContext As AdvantageFramework.Security.Database.DbContext,
                                                         ByVal DbContext As AdvantageFramework.Database.DbContext,
                                                         ByVal ServiceFeeReconciliationSetting As AdvantageFramework.Security.Database.Entities.ServiceFeeReconciliationSetting,
                                                         ByVal SelectedCriteria As IEnumerable,
                                                         ByVal IncomeOnlySalesClassCodes As Generic.List(Of String), ByVal IncomeOnlyFunctionCodes As Generic.List(Of String),
                                                         ByVal ProductionCommissionSalesClassCodes As Generic.List(Of String), ByVal ProductionCommissionFunctionCodes As Generic.List(Of String),
                                                         ByVal ServiceFeeTypeCodes As Generic.List(Of String),
                                                         ByVal FeePostPeriodFrom As AdvantageFramework.Database.Entities.PostPeriod,
                                                         ByVal FeePostPeriodTo As AdvantageFramework.Database.Entities.PostPeriod,
                                                         ByVal FeeTimeFrom As Date,
                                                         ByVal FeeTimeTo As Date,
                                                         ByRef ClientList As Generic.List(Of AdvantageFramework.Database.Entities.Client),
                                                         ByRef DivisionList As Generic.List(Of AdvantageFramework.Database.Entities.Division),
                                                         ByRef ProductList As Generic.List(Of AdvantageFramework.Database.Entities.Product),
                                                         ByRef MaxIndex As Integer,
                                                         ByVal RefreshNavigationList As Boolean) As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile)

            'objects
            Dim FeeTypesList As Generic.List(Of String) = Nothing
            Dim ServiceFeeReconcileDetailList As Generic.List(Of AdvantageFramework.Database.Classes.ServiceFeeReconcile) = Nothing
            Dim ClientDataList As Generic.List(Of AdvantageFramework.Database.Entities.Client) = Nothing
            Dim DivisionDataList As Generic.List(Of AdvantageFramework.Database.Entities.Division) = Nothing
            Dim ProductDataList As Generic.List(Of AdvantageFramework.Database.Entities.Product) = Nothing

            FeeTypesList = New Generic.List(Of String)

            If ServiceFeeReconciliationSetting Is Nothing Then

                ServiceFeeReconciliationSetting = AdvantageFramework.Security.Database.Procedures.ServiceFeeReconciliationSetting.LoadByUserCode(SecurityDbContext, SecurityDbContext.UserCode)

            End If

            If ServiceFeeReconciliationSetting IsNot Nothing Then

                If ServiceFeeReconciliationSetting.IncludeIncomeOnlyFeeTime.GetValueOrDefault(0) = 1 Then

                    FeeTypesList.Add("Standard")

                End If

                If ServiceFeeReconciliationSetting.IncludeProductionCommissionFeeTime.GetValueOrDefault(0) = 1 Then

                    FeeTypesList.Add("Production")

                End If

                If ServiceFeeReconciliationSetting.IncludeMediaCommissionFeeTime.GetValueOrDefault(0) = 1 Then

                    FeeTypesList.Add("Media")

                End If

                If ServiceFeeReconciliationSetting.IncludeIncomeOnly.GetValueOrDefault(0) = 1 Then

                    FeeTypesList.Add("Standard Billed")

                End If

                If ServiceFeeReconciliationSetting.IncludeProductionCommission.GetValueOrDefault(0) = 1 Then

                    FeeTypesList.Add("Production Billed")

                End If

                If ServiceFeeReconciliationSetting.IncludeMediaCommission.GetValueOrDefault(0) = 1 Then

                    FeeTypesList.Add("Media Billed")

                End If

                ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In AdvantageFramework.Database.Procedures.ServiceFeeReconcileComplexType.Load(DbContext, FeePostPeriodFrom.Code, FeePostPeriodTo.Code, FeeTimeFrom, FeeTimeTo).ToList
                                                 Where ((ServiceFeeReconcileDetail.FeeTimeType = "Standard" OrElse
                                                         ServiceFeeReconcileDetail.FeeTimeType = "Production" OrElse
                                                         ServiceFeeReconcileDetail.FeeTimeType = "Media") AndAlso
                                                        (ServiceFeeReconcileDetail.TotalAmount <> 0 OrElse
                                                         ServiceFeeReconcileDetail.TotalHours <> 0)) OrElse
                                                       ((ServiceFeeReconcileDetail.FeeTimeType = "Production Billed" OrElse
                                                         ServiceFeeReconcileDetail.FeeTimeType = "Media Billed" OrElse
                                                         ServiceFeeReconcileDetail.FeeTimeType = "Standard Billed") AndAlso
                                                        (ServiceFeeReconcileDetail.FeeAmount <> 0 OrElse
                                                         ServiceFeeReconcileDetail.FeeQuantity <> 0))
                                                 Select ServiceFeeReconcileDetail).ToList

                If ServiceFeeReconciliationSetting.ClientDivisionProductIncludeOption.GetValueOrDefault(4) = 1 Then

                    If ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 1 Then

                        If RefreshNavigationList Then

                            ClientDataList = (From Criteria In SelectedCriteria
                                              Select AdvantageFramework.Database.Procedures.Client.LoadByClientCode(DbContext, Criteria.Code)).Distinct.ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where ClientDataList.Any(Function(Client) ServiceFeeReconcileDetail.ClientCode = Client.Code) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) ClientDataList.Any(Function(Client) ServiceFeeIncomeOnly.ClientCode = Client.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) ClientDataList.Any(Function(Client) ServiceFeeProductionCommission.ClientCode = Client.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) ClientDataList.Any(Function(Client) ServiceFeeMediaCommission.ClientCode = Client.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 2 Then

                        If RefreshNavigationList Then

                            DivisionDataList = AdvantageFramework.Database.Procedures.Division.Load(DbContext).Include("Client").ToList

                            DivisionDataList = (From Criteria In SelectedCriteria
                                                Select DivisionDataList.Where(Function(Division) Division.ClientCode = Criteria.Code)).SelectMany(Function(Division) Division).Distinct.ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where DivisionDataList.Any(Function(Division) ServiceFeeReconcileDetail.ClientCode = Division.ClientCode AndAlso ServiceFeeReconcileDetail.DivisionCode = Division.Code) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) DivisionDataList.Any(Function(Division) ServiceFeeIncomeOnly.ClientCode = Division.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) DivisionDataList.Any(Function(Division) ServiceFeeProductionCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) DivisionDataList.Any(Function(Division) ServiceFeeMediaCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 3 Then

                        If RefreshNavigationList Then

                            ProductDataList = AdvantageFramework.Database.Procedures.Product.Load(DbContext).Include("Client").Include("Division").ToList

                            ProductDataList = (From Criteria In SelectedCriteria
                                               Select ProductDataList.Where(Function(Product) Product.ClientCode = Criteria.Code)).SelectMany(Function(Product) Product).Distinct.ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where ProductDataList.Any(Function(Product) Product.ClientCode = ServiceFeeReconcileDetail.ClientCode AndAlso Product.DivisionCode = ServiceFeeReconcileDetail.DivisionCode AndAlso Product.Code = ServiceFeeReconcileDetail.ProductCode) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) ProductDataList.Any(Function(Product) Product.ClientCode = ServiceFeeIncomeOnly.ClientCode AndAlso Product.DivisionCode = ServiceFeeIncomeOnly.DivisionCode AndAlso Product.Code = ServiceFeeIncomeOnly.ProductCode) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) ProductDataList.Any(Function(Product) Product.ClientCode = ServiceFeeProductionCommission.ClientCode AndAlso Product.DivisionCode = ServiceFeeProductionCommission.DivisionCode AndAlso Product.Code = ServiceFeeProductionCommission.ProductCode) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) ProductDataList.Any(Function(Product) Product.ClientCode = ServiceFeeMediaCommission.ClientCode AndAlso Product.DivisionCode = ServiceFeeMediaCommission.DivisionCode AndAlso Product.Code = ServiceFeeMediaCommission.ProductCode) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    End If

                ElseIf ServiceFeeReconciliationSetting.ClientDivisionProductIncludeOption.GetValueOrDefault(4) = 2 Then

                    If ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 1 Then

                        If RefreshNavigationList Then

                            DivisionDataList = AdvantageFramework.Database.Procedures.Division.Load(DbContext).Include("Client").ToList

                            DivisionDataList = (From Criteria In SelectedCriteria
                                                Select DivisionDataList.SingleOrDefault(Function(Division) Division.ClientCode = Criteria.ClientCode AndAlso Division.Code = Criteria.Code)).Distinct.ToList

                            ClientDataList = (From Division In DivisionDataList
                                              Select Division.Client).Distinct.ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where DivisionDataList.Any(Function(Division) ServiceFeeReconcileDetail.ClientCode = Division.ClientCode AndAlso ServiceFeeReconcileDetail.DivisionCode = Division.Code) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) DivisionDataList.Any(Function(Division) ServiceFeeIncomeOnly.ClientCode = Division.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) DivisionDataList.Any(Function(Division) ServiceFeeProductionCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) DivisionDataList.Any(Function(Division) ServiceFeeMediaCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 2 Then

                        If RefreshNavigationList Then

                            DivisionDataList = AdvantageFramework.Database.Procedures.Division.Load(DbContext).Include("Client").ToList

                            DivisionDataList = (From Criteria In SelectedCriteria
                                                Select DivisionDataList.SingleOrDefault(Function(Division) Division.ClientCode = Criteria.ClientCode AndAlso Division.Code = Criteria.Code)).Distinct.ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where DivisionDataList.Any(Function(Division) ServiceFeeReconcileDetail.ClientCode = Division.ClientCode AndAlso ServiceFeeReconcileDetail.DivisionCode = Division.Code) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) DivisionDataList.Any(Function(Division) ServiceFeeIncomeOnly.ClientCode = Division.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) DivisionDataList.Any(Function(Division) ServiceFeeProductionCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) DivisionDataList.Any(Function(Division) ServiceFeeMediaCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 3 Then

                        If RefreshNavigationList Then

                            ProductDataList = AdvantageFramework.Database.Procedures.Product.Load(DbContext).Include("Client").Include("Division").ToList

                            ProductDataList = (From Criteria In SelectedCriteria
                                               Select ProductDataList.Where(Function(Product) Product.ClientCode = Criteria.ClientCode AndAlso Product.DivisionCode = Criteria.Code)).SelectMany(Function(Product) Product).Distinct.ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where ProductDataList.Any(Function(Product) Product.ClientCode = ServiceFeeReconcileDetail.ClientCode AndAlso Product.DivisionCode = ServiceFeeReconcileDetail.DivisionCode AndAlso Product.Code = ServiceFeeReconcileDetail.ProductCode) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) ProductDataList.Any(Function(Product) ServiceFeeIncomeOnly.ClientCode = Product.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Product.DivisionCode AndAlso ServiceFeeIncomeOnly.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) ProductDataList.Any(Function(Product) ServiceFeeProductionCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeProductionCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) ProductDataList.Any(Function(Product) ServiceFeeMediaCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeMediaCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    End If

                ElseIf ServiceFeeReconciliationSetting.ClientDivisionProductIncludeOption.GetValueOrDefault(4) = 3 Then

                    If ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 1 Then

                        If RefreshNavigationList Then

                            ProductDataList = AdvantageFramework.Database.Procedures.Product.Load(DbContext).Include("Client").Include("Division").ToList

                            ProductDataList = (From Criteria In SelectedCriteria
                                               Select ProductDataList.SingleOrDefault(Function(Product) Product.ClientCode = Criteria.ClientCode AndAlso Product.DivisionCode = Criteria.DivisionCode AndAlso Product.Code = Criteria.Code)).Distinct.ToList

                            ClientDataList = (From Product In ProductDataList
                                              Select Product.Client).Distinct.ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where ProductDataList.Any(Function(Product) Product.ClientCode = ServiceFeeReconcileDetail.ClientCode AndAlso Product.DivisionCode = ServiceFeeReconcileDetail.DivisionCode AndAlso Product.Code = ServiceFeeReconcileDetail.ProductCode) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) ProductDataList.Any(Function(Product) ServiceFeeIncomeOnly.ClientCode = Product.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Product.DivisionCode AndAlso ServiceFeeIncomeOnly.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) ProductDataList.Any(Function(Product) ServiceFeeProductionCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeProductionCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) ProductDataList.Any(Function(Product) ServiceFeeMediaCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeMediaCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 2 Then

                        If RefreshNavigationList Then

                            ProductDataList = AdvantageFramework.Database.Procedures.Product.Load(DbContext).Include("Division").Include("Division.Client").ToList

                            ProductDataList = (From Criteria In SelectedCriteria
                                               Select ProductDataList.SingleOrDefault(Function(Product) Product.ClientCode = Criteria.ClientCode AndAlso Product.DivisionCode = Criteria.DivisionCode AndAlso Product.Code = Criteria.Code)).Distinct.ToList

                            DivisionDataList = (From Product In ProductDataList
                                                Select Product.Division).Distinct.ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where ProductDataList.Any(Function(Product) Product.ClientCode = ServiceFeeReconcileDetail.ClientCode AndAlso Product.DivisionCode = ServiceFeeReconcileDetail.DivisionCode AndAlso Product.Code = ServiceFeeReconcileDetail.ProductCode) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) ProductDataList.Any(Function(Product) ServiceFeeIncomeOnly.ClientCode = Product.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Product.DivisionCode AndAlso ServiceFeeIncomeOnly.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) ProductDataList.Any(Function(Product) ServiceFeeProductionCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeProductionCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) ProductDataList.Any(Function(Product) ServiceFeeMediaCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeMediaCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 3 Then

                        If RefreshNavigationList Then

                            ProductDataList = AdvantageFramework.Database.Procedures.Product.Load(DbContext).Include("Client").Include("Division").ToList

                            ProductDataList = (From Criteria In SelectedCriteria
                                               Select ProductDataList.SingleOrDefault(Function(Product) Product.ClientCode = Criteria.ClientCode AndAlso Product.DivisionCode = Criteria.DivisionCode AndAlso Product.Code = Criteria.Code)).Distinct.ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where ProductDataList.Any(Function(Product) Product.ClientCode = ServiceFeeReconcileDetail.ClientCode AndAlso Product.DivisionCode = ServiceFeeReconcileDetail.DivisionCode AndAlso Product.Code = ServiceFeeReconcileDetail.ProductCode) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) ProductDataList.Any(Function(Product) ServiceFeeIncomeOnly.ClientCode = Product.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Product.DivisionCode AndAlso ServiceFeeIncomeOnly.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) ProductDataList.Any(Function(Product) ServiceFeeProductionCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeProductionCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) ProductDataList.Any(Function(Product) ServiceFeeMediaCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeMediaCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    End If

                ElseIf ServiceFeeReconciliationSetting.ClientDivisionProductIncludeOption.GetValueOrDefault(4) = 4 Then

                    If ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 1 Then

                        If RefreshNavigationList Then

                            ClientDataList = (From Client In AdvantageFramework.Database.Procedures.Client.LoadAllActiveByUserCodeWithOfficeLimits(Session, DbContext, SecurityDbContext).ToList
                                              Select Client).ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where ClientDataList.Any(Function(Client) ServiceFeeReconcileDetail.ClientCode = Client.Code) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) ClientDataList.Any(Function(Client) ServiceFeeIncomeOnly.ClientCode = Client.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) ClientDataList.Any(Function(Client) ServiceFeeProductionCommission.ClientCode = Client.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) ClientDataList.Any(Function(Client) ServiceFeeMediaCommission.ClientCode = Client.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 2 Then

                        If RefreshNavigationList Then

                            DivisionDataList = (From Division In AdvantageFramework.Database.Procedures.Division.LoadAllActiveByUserCodeWithOfficeLimits(Session, DbContext, SecurityDbContext).Include("Client").Where(Function(Division) Division.Client.IsActive = 1).ToList
                                                Select Division).ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where DivisionDataList.Any(Function(Division) ServiceFeeReconcileDetail.ClientCode = Division.ClientCode AndAlso ServiceFeeReconcileDetail.DivisionCode = Division.Code) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) DivisionDataList.Any(Function(Division) ServiceFeeIncomeOnly.ClientCode = Division.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) DivisionDataList.Any(Function(Division) ServiceFeeProductionCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) DivisionDataList.Any(Function(Division) ServiceFeeMediaCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Division.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 3 Then

                        If RefreshNavigationList Then

                            ProductDataList = (From Product In AdvantageFramework.Database.Procedures.Product.LoadAllActiveByUserCodeWithOfficeLimits(Session, DbContext, SecurityDbContext).Include("Client").Include("Division").Where(Function(Product) Product.Client.IsActive = 1 AndAlso Product.Division.IsActive = 1).ToList
                                               Select Product).ToList

                        End If

                        ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                         Where ProductDataList.Any(Function(Product) Product.ClientCode = ServiceFeeReconcileDetail.ClientCode AndAlso Product.DivisionCode = ServiceFeeReconcileDetail.DivisionCode AndAlso Product.Code = ServiceFeeReconcileDetail.ProductCode) = True
                                                         Select ServiceFeeReconcileDetail).ToList

                        '_ServiceFeeIncomeOnlyList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeIncomeOnlyView.Load(DbContext).ToList.Where(Function(ServiceFeeIncomeOnly) ProductDataList.Any(Function(Product) ServiceFeeIncomeOnly.ClientCode = Product.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Product.DivisionCode AndAlso ServiceFeeIncomeOnly.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeIncomeOnly.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeProductionCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeProductionCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeProductionCommission) ProductDataList.Any(Function(Product) ServiceFeeProductionCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeProductionCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeProductionCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                        '_ServiceFeeMediaCommissionList = AdvantageFramework.Reporting.Database.Procedures.ServiceFeeMediaCommissionView.Load(DbContext).ToList.Where(Function(ServiceFeeMediaCommission) ProductDataList.Any(Function(Product) ServiceFeeMediaCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeMediaCommission.ProductCode = Product.Code) = True AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) >= CInt(FeePostPeriodFrom.Code) AndAlso CInt(ServiceFeeMediaCommission.PostPeriodCode) <= CInt(FeePostPeriodTo.Code)).ToList

                    End If

                End If

                '_ServiceFeeIncomeOnlyList = LoadServiceFeeIncomeOnly(_ServiceFeeIncomeOnlyList)

                '_ServiceFeeProductionCommissionList = LoadServiceFeeProductionCommission(_ServiceFeeProductionCommissionList)

                '_ServiceFeeMediaCommissionList = LoadServiceFeeMediaCommission(_ServiceFeeMediaCommissionList)

                ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                 Where FeeTypesList.Contains(ServiceFeeReconcileDetail.FeeTimeType) = True
                                                 Select ServiceFeeReconcileDetail).ToList

                If ServiceFeeReconciliationSetting.IncludeUnreconciledOnly.GetValueOrDefault(0) = 1 Then

                    ServiceFeeReconcileDetailList = (From ServiceFeeReconcileDetail In ServiceFeeReconcileDetailList
                                                     Where (ServiceFeeReconcileDetail.UnreconciledAmount > 0 AndAlso
                                                             ServiceFeeReconcileDetail.UnreconciledHours > 0 AndAlso
                                                             ServiceFeeReconcileDetail.FeeTimeType.Contains("Billed") = False) OrElse
                                                         (ServiceFeeReconcileDetail.FeeTimeType = "Standard Billed" OrElse
                                                             ServiceFeeReconcileDetail.FeeTimeType = "Production Billed" OrElse
                                                             ServiceFeeReconcileDetail.FeeTimeType = "Media Billed")
                                                     Select ServiceFeeReconcileDetail).ToList

                End If

                ServiceFeeReconcileDetailList = LoadServiceFeeReconcileDetailIncomeOnly(ServiceFeeReconciliationSetting, ServiceFeeReconcileDetailList, IncomeOnlySalesClassCodes, IncomeOnlyFunctionCodes)

                ServiceFeeReconcileDetailList = LoadServiceFeeReconcileDetailProductionCommission(ServiceFeeReconciliationSetting, ServiceFeeReconcileDetailList, ProductionCommissionSalesClassCodes, ProductionCommissionFunctionCodes)

                ServiceFeeReconcileDetailList = LoadServiceFeeReconcileDetailMediaCommission(ServiceFeeReconciliationSetting, ServiceFeeReconcileDetailList)

                If ServiceFeeTypeCodes IsNot Nothing AndAlso ServiceFeeReconciliationSetting.ServiceFeeTypeSelection.GetValueOrDefault(0) > 0 Then

                    If ServiceFeeReconciliationSetting.ServiceFeeTypeSelection.GetValueOrDefault(0) = 1 Then

                        ServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) ServiceFeeTypeCodes.Contains(ServiceFeeReconcileDetail.EmployeeDepartmentTeamServiceFeeTypeCode) = True).ToList

                    ElseIf ServiceFeeReconciliationSetting.ServiceFeeTypeSelection.GetValueOrDefault(0) = 2 Then

                        ServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) ServiceFeeTypeCodes.Contains(ServiceFeeReconcileDetail.EmployeeTimeEntryDepartmentTeamServiceFeeTypeCode) = True).ToList

                    ElseIf ServiceFeeReconciliationSetting.ServiceFeeTypeSelection.GetValueOrDefault(0) = 3 Then

                        ServiceFeeReconcileDetailList = ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) ServiceFeeTypeCodes.Contains(ServiceFeeReconcileDetail.JobServiceFeeTypeCode) = True).ToList

                    End If

                End If

                If RefreshNavigationList Then

                    If ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 1 Then

                        ClientDataList = ClientDataList.Where(Function(Client) ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) ServiceFeeReconcileDetail.ClientCode = Client.Code AndAlso (ServiceFeeReconcileDetail.TotalAmount <> 0 OrElse ServiceFeeReconcileDetail.TotalHours <> 0 OrElse ServiceFeeReconcileDetail.FeeQuantity <> 0 OrElse ServiceFeeReconcileDetail.FeeAmount <> 0)).Any).ToList ' OrElse _
                        '_ServiceFeeIncomeOnlyList.Where(Function(ServiceFeeIncomeOnly) ServiceFeeIncomeOnly.ClientCode = Client.Code AndAlso ServiceFeeIncomeOnly.IncomeOnlyAmount <> 0).Any OrElse _
                        '_ServiceFeeProductionCommissionList.Where(Function(ServiceFeeProductionCommission) ServiceFeeProductionCommission.ClientCode = Client.Code AndAlso ServiceFeeProductionCommission.ProductionCommissionAmount <> 0).Any OrElse _
                        '_ServiceFeeMediaCommissionList.Where(Function(ServiceFeeMediaCommission) ServiceFeeMediaCommission.ClientCode = Client.Code AndAlso ServiceFeeMediaCommission.MediaCommissionAmount <> 0).Any).ToList

                        MaxIndex = ClientDataList.Count

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 2 Then

                        DivisionDataList = DivisionDataList.Where(Function(Division) ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) ServiceFeeReconcileDetail.ClientCode = Division.ClientCode AndAlso ServiceFeeReconcileDetail.DivisionCode = Division.Code AndAlso (ServiceFeeReconcileDetail.TotalAmount <> 0 OrElse ServiceFeeReconcileDetail.TotalHours <> 0 OrElse ServiceFeeReconcileDetail.FeeQuantity <> 0 OrElse ServiceFeeReconcileDetail.FeeAmount <> 0)).Any).ToList ' OrElse _
                        '_ServiceFeeIncomeOnlyList.Where(Function(ServiceFeeIncomeOnly) ServiceFeeIncomeOnly.ClientCode = Division.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Division.Code AndAlso ServiceFeeIncomeOnly.IncomeOnlyAmount <> 0).Any OrElse _
                        '_ServiceFeeProductionCommissionList.Where(Function(ServiceFeeProductionCommission) ServiceFeeProductionCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Division.Code AndAlso ServiceFeeProductionCommission.ProductionCommissionAmount <> 0).Any OrElse _
                        '_ServiceFeeMediaCommissionList.Where(Function(ServiceFeeMediaCommission) ServiceFeeMediaCommission.ClientCode = Division.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Division.Code AndAlso ServiceFeeMediaCommission.MediaCommissionAmount <> 0).Any).ToList

                        MaxIndex = DivisionDataList.Count

                    ElseIf ServiceFeeReconciliationSetting.PrimaryDisplayOption.GetValueOrDefault(1) = 3 Then

                        ProductDataList = ProductDataList.Where(Function(Product) ServiceFeeReconcileDetailList.Where(Function(ServiceFeeReconcileDetail) ServiceFeeReconcileDetail.ClientCode = Product.ClientCode AndAlso ServiceFeeReconcileDetail.DivisionCode = Product.DivisionCode AndAlso ServiceFeeReconcileDetail.ProductCode = Product.Code AndAlso (ServiceFeeReconcileDetail.TotalAmount <> 0 OrElse ServiceFeeReconcileDetail.TotalHours <> 0 OrElse ServiceFeeReconcileDetail.FeeQuantity <> 0 OrElse ServiceFeeReconcileDetail.FeeAmount <> 0)).Any).ToList 'OrElse _
                        '_ServiceFeeIncomeOnlyList.Where(Function(ServiceFeeIncomeOnly) ServiceFeeIncomeOnly.ClientCode = Product.ClientCode AndAlso ServiceFeeIncomeOnly.DivisionCode = Product.DivisionCode AndAlso ServiceFeeIncomeOnly.ProductCode = Product.Code AndAlso ServiceFeeIncomeOnly.IncomeOnlyAmount <> 0).Any OrElse _
                        '_ServiceFeeProductionCommissionList.Where(Function(ServiceFeeProductionCommission) ServiceFeeProductionCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeProductionCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeProductionCommission.ProductCode = Product.Code AndAlso ServiceFeeProductionCommission.ProductionCommissionAmount <> 0).Any OrElse _
                        '_ServiceFeeMediaCommissionList.Where(Function(ServiceFeeMediaCommission) ServiceFeeMediaCommission.ClientCode = Product.ClientCode AndAlso ServiceFeeMediaCommission.DivisionCode = Product.DivisionCode AndAlso ServiceFeeMediaCommission.ProductCode = Product.Code AndAlso ServiceFeeMediaCommission.MediaCommissionAmount <> 0).Any).ToList

                        MaxIndex = ProductDataList.Count

                    End If

                End If

            End If

            ClientList = ClientDataList
            DivisionList = DivisionDataList
            ProductList = ProductDataList

            LoadServiceFeeReconciliationData = ServiceFeeReconcileDetailList

        End Function
        Public Function LoadUserDefinedReportObjectType(ByVal AdvancedReportWriterReport As AdvantageFramework.Reporting.AdvancedReportWriterReports) As System.Type

            'objects
            Dim ObjectType As System.Type = Nothing

            Try

                If AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobSummaryReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ProjectSchedule Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ProjectScheduleReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ClientContact Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.ClientContactReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.DirectIndirectTime Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.DirectTime Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DirectTimeReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.DirectIndirectTimeWithEmployeeCost Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeCostReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.DirectTimeWithEmployeeCost Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DirectTimeCostReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobProjectScheduleSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobProjectScheduleSummaryReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailBillMonth Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailBillMonthReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailFunction Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFunctionReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailItem Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.Alerts Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.AlertsReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.AlertsWithComments Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.AlertsWithCommentsReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.AlertsWithRecipients Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.AlertsWithRecipientsReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV10Detail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV10Summary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV11Detail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV11Summary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV11JobComp Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV1Detail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV1Summary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV29 Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysisCategory)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV30Detail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysisQVA)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV30Summary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysisQVA)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV30JobComp Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysisQVA)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV31 Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysisQVA)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV2Detail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV2Summary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV3JobComp Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV3Summary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV4Detail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV4Summary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV5CliDivPrd Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisClientDivisonProduct)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV5Summary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisEmployeeTime)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV6 Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisCurrentPrior)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV7 Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisCurrentPrior)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV8 Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailAnalysisAdvanceBilling)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV9Detail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV9JobComp Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailAnalysisV9Summary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobDetailAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SecurityPermission Then

                    ObjectType = GetType(AdvantageFramework.Security.Database.Views.UserPermissionsReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ProjectHoursUsed Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ProjectHoursUsedReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ServiceFeeReconciliation Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.ServiceFeeReconcile)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EmployeeSummary Then

                    ObjectType = GetType(AdvantageFramework.Security.Database.Views.EmployeeSummary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ProjectSummary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.ProjectSummary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ProjectSummaryTask Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.ProjectSummaryTask)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaCurrentStatus Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CRMOpportunityDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CRMOpportunityDetailReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CRMOpportunityToInvestment Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CRMOpportunityToInvestmentReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CRMProspects Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CRMProspectsReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CRMClientContracts Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CRMClientContractsReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ClientPL Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ClientPL)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.AROpenAged Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.AROpenAged)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaCurrentStatusSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusSummaryReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaPlanComparisonSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EstimatedAndActualIncome Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EstimatedAndActualIncome)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.Clients Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.ClientReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.Divisions Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.DivisionReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.Products Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.ProductReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.Employees Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.EmployeeReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.Vendors Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.VendorReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.Campaign Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.CampaignReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.NewspaperOrderDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.NewspaperOrderDetailReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.PurchaseOrder Then

                    ObjectType = GetType(AdvantageFramework.Database.Entities.PurchaseOrder)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CashAnalysis Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.CashAnalysisReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SalesJournal Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.SalesJournalReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SalesJournalWithComments Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.SalesJournalReportWithComments)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.AuthorizationToBuy Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.ATBReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EmployeeTimeApproval Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.EmployeeTimeApproval)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CampaignWithProductionAndMedia Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.CampaignProductionMediaReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CampaignWithProductionAndMediaSummary Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.CampaignProductionMediaSummaryReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EstimateDetailApproved Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.EstimateDetailApprovedReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.GeneralLedgerDetail Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.GeneralLedgerDetailReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobWriteOff Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.JobWriteOff)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.Transfer Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.TransferReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaResults Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaResultReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EstimateForm Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.EstimateForm)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ServiceFeeContract Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobServiceFeeContractReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.IncomeOnly Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.IncomeOnlyReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ProjectSummaryAnalysis Then

                    ObjectType = GetType(AdvantageFramework.Database.Classes.ProjectSummaryAnalysis)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ARPaymentHistory Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ARPaymentHistoryReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ClientPLDetail Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ClientPLDetail)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.VendorContract Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Views.VendorContractsReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobForecast Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobForecastReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.DigitalResultsComparison Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.DigitalResultsComparisonReport)

                    'ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaSpecifications Then

                    '    ObjectType = LoadMediaSpecifications(_Session)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.BillingWorksheetProduction Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.BillingWorksheetMedia Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.BillingWorksheetMediaReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaSpecifications Then

                    'ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaSpecificationsReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.GeneralLedgerReport Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.GeneralLedgerDetailByAccountReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaResultsComparisonByClientAndType Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaResultsComparisonByClientAndTypeReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.TrialBalance Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.TrialBalanceReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.AccountsPayableBalanceByVendor Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.AccountsPayableBalanceByVendor)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.AccountsReceivableBalanceByClient Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.AccountsReceivableBalanceByClient)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SalesAndCostOfSalesByClient Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SalesAndCostOfSalesByClientReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.TimeReport Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.TimeReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.RevenueBreakdownByClient Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.RevenueBreakdownByClientReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EmployeeUtilization Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EmployeeUtilizationReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.BroadcastWorksheetTVPreBuy Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.BroadcastWorksheetTVPostBuy Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CheckRegister Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.CheckRegister)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CheckRegisterWithInvoiceDetails Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.CheckRegisterWithInvoiceDetails)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EmployeeInOutBoard Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EmployeeInOutBoard)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaPlanComparisonByVendor Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonByVendor)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaPlanComparisonDetailByVendor Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonDetailByVendor)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ResourcesAllocationByWeek Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ResourceAllocationByWeek)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CashTransactions Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.CashTransaction)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaCurrentStatusCoopBreakout Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusCoopBreakout)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailFeesAndOOPByFunction Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunction)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailFeesAndOOPByJobComponent Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobComponent)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailFeesAndOOPByJob Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailFeesAndOOPByCampaign Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPCampaign)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailFeesAndOOPByFunctionMinimized Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunctionMinimized)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailFeesAndOOPByJob1Minimized Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobMinimized)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.JobDetailFeesAndOOPByJob2Minimized Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob2Minimized)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MonthEndMediaWIP Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MonthEndMediaWIP)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MonthEndProductionWIP Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MonthEndProductionWIP)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MonthEndAccruedLiability Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MonthEndAccruedLiability)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MonthEndAccountsPayable Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MonthEndAccountsPayable)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SecurityGroupModuleAccess Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityGroupModuleAccess)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SecurityGroupSettings Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityGroupSettings)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SecurityGroupUserSettings Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityGroupUserSettings)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SecurityUserModuleAccess Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityUserModuleAccess)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SecurityUserSettings Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityUserSettings)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.SecurityUserLoginAudit Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.SecurityUserLoginAudit)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.ProjectScheduleTasksByEmployee Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.ProjectScheduleTasksByEmployeeReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EmployeeHoursAllocation Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EmployeeHoursAllocationReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.InvoiceBilledBackup Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.InvoiceBilledBackup)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.CashManagementProduction Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.CashManagementProduction)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaTrafficInstructions Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaTrafficInstructionDataset)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.MediaTrafficMissingInstructions Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.MediaTrafficMissingInstructionDataset)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.BillingApproval Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.BillingApprovalReport)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.BroadcastInvoiceSummary Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.BroadcastInvoiceSummary)

                ElseIf AdvancedReportWriterReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.EmployeeTimeAnalysis Then

                    ObjectType = GetType(AdvantageFramework.Reporting.Database.Classes.EmployeeTimeAnalysisReport)

                End If

            Catch ex As Exception
                ObjectType = Nothing
            Finally
                LoadUserDefinedReportObjectType = ObjectType
            End Try

        End Function
        Public Function LoadDynamicReportKeyExpression(ByVal DynamicReport As Reporting.DynamicReports) As String

            'objects
            Dim KeyExpression As String = ""

            Try

                If DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobSummary Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobSummaryReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSchedule Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.ProjectScheduleReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientContact Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.ClientContactReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTime Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTime Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.DirectTimeReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectIndirectTimeWithEmployeeCost Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.DirectIndirectTimeCostReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTimeWithEmployeeCost Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.DirectTimeCostReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobProjectScheduleSummary Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobProjectScheduleSummaryReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailBillMonth Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailBillMonthReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFunction Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailFunctionReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItem Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetail Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Alerts Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.AlertReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AlertsWithComments Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.AlertCommentsReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AlertsWithRecipients Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.AlertRecipientsReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectHoursUsed Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.ProjectHoursUsedReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummary Then

                    KeyExpression = AdvantageFramework.Database.Classes.ProjectSummary.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryTask Then

                    KeyExpression = AdvantageFramework.Database.Classes.ProjectSummaryTask.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.NewspaperOrderDetail Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.NewspaperOrderDetailReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatus Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobPurchaseOrder Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobPurchaseOrderReportSP.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimatedAndActualIncome Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.EstimatedAndActualIncome.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityDetail Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.CRMOpportunityDetailReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityToInvestment Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.CRMOpportunityToInvestmentReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMProspects Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.CRMProspectsReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMClientContracts Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.CRMClientContractsReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPL Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.ClientPL.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AROpenAged Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.AROpenAged.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlan Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaPlanReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusSummary Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusSummaryReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonSummary Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFee Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.ServiceFee.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Clients Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.ClientReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Divisions Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.DivisionReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Products Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.ProductReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Employees Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.EmployeeReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Vendors Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.VendorReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Campaign Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.CampaignReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashAnalysis Then

                    KeyExpression = AdvantageFramework.Database.Classes.CashAnalysisReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournal Then

                    KeyExpression = AdvantageFramework.Database.Classes.SalesJournalReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournalWithComments Then

                    KeyExpression = AdvantageFramework.Database.Classes.SalesJournalReportWithComments.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AuthorizationToBuy Then

                    KeyExpression = AdvantageFramework.Database.Classes.ATBReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeApproval Then

                    KeyExpression = AdvantageFramework.Database.Classes.EmployeeTimeApproval.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.GeneralLedgerDetail Then

                    KeyExpression = AdvantageFramework.Database.Classes.GeneralLedgerDetailReport.Properties.TransactionID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMedia Then

                    KeyExpression = AdvantageFramework.Database.Classes.CampaignProductionMediaReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMediaSummary Then

                    KeyExpression = AdvantageFramework.Database.Classes.CampaignProductionMediaSummaryReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceWithBalanceAging Then

                    KeyExpression = AdvantageFramework.Database.Classes.AccountsPayableInvoiceWithBalanceAgingReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetail Then

                    KeyExpression = AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPayments Then

                    KeyExpression = AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaymentsReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPaidByClient Then

                    KeyExpression = AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaidByClientReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResults Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaResultReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFeeContract Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobServiceFeeContractReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.IncomeOnly Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.IncomeOnlyReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ARPaymentHistory Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.ARPaymentHistoryReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPLDetail Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.ClientPLDetail.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetProduction Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetMedia Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.BillingWorksheetMediaReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.OpenPurchaseOrderDetail Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.OpenPurchaseOrderDetail.Properties.PONumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItemAccountSplit Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailItemAccountSplitReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ExpenseReportAndApproval Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.ExpenseReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorContracts Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Views.VendorContractsReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VirtualCreditCardTransactionEFS Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobForecast Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobForecastReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DigitalResultsComparison Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.DigitalResultsComparisonReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GeneralLedgerReport Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.GeneralLedgerDetailByAccountReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResultsComparisonByClientAndType Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaResultsComparisonByClientAndTypeReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TrialBalance Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.TrialBalanceReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableBalanceByVendor Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.AccountsPayableBalanceByVendor.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsReceivableBalanceByClient Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.AccountsReceivableBalanceByClient.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesAndCostOfSalesByClient Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.SalesAndCostOfSalesByClientReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TimeReport Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.TimeReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.RevenueBreakdownByClient Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.RevenueBreakdownByClientReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeUtilization Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.EmployeeUtilizationReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPreBuy Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPostBuy Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyDRWReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegister Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.CheckRegister.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegisterWithInvoiceDetails Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.CheckRegisterWithInvoiceDetails.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeInOutBoard Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.EmployeeInOutBoard.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonByVendor Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonByVendor.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonDetailByVendor Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonDetailByVendor.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ResourceAllocationByWeek Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.ResourceAllocationByWeek.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusCoopBreakout Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusCoopBreakout.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunction Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunction.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJobComponent Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobComponent.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByCampaign Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPCampaign.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunctionMinimized Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunctionMinimized.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob1Minimized Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobMinimized.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob2Minimized Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob2Minimized.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndMediaWIP Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MonthEndMediaWIP.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndProductionWIP Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MonthEndProductionWIP.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectScheduleTasksByEmployee Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.ProjectScheduleTasksByEmployeeReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeHoursAllocation Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.EmployeeHoursAllocationReport.Properties.ID.ToString

                    'ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLChartOfAccounts Then

                    '    KeyExpression = AdvantageFramework.Reporting.Database.Classes.GLChartOfAccounts.Properties.ID.ToString

                    'ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLReportRow Then

                    '    KeyExpression = AdvantageFramework.Reporting.Database.Classes.GLReportRow.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPreBuy Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPostBuy Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyDRWReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficMissingInstructions Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaTrafficMissingInstructionDataset.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficInstructions Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MediaTrafficInstructionDataset.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndAccruedLiability Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MonthEndAccruedLiability.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MonthEndAccountsPayable Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.MonthEndAccountsPayable.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorSpendWithEEOCAndMinorityStatusSummary Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusSummary.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorSpendWithEEOCAndMinorityStatusDetail Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusDetail.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingApproval Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.BillingApprovalReport.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastInvoiceSummary Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.BroadcastInvoiceSummary.Properties.OrderNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeAnalysis Then

                    KeyExpression = AdvantageFramework.Reporting.Database.Classes.EmployeeTimeAnalysisReport.Properties.EmployeeCode.ToString

                End If

            Catch ex As Exception
                KeyExpression = ""
            Finally
                LoadDynamicReportKeyExpression = KeyExpression
            End Try

        End Function
        Public Function LoadDynamicReportDefaultSort(ByVal DynamicReport As Reporting.DynamicReports) As String

            'objects
            Dim DefaultSort As String = ""

            Try

                If DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobSummary Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobSummaryReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSchedule Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.ProjectScheduleReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientContact Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.ClientContactReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DirectTime Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.DirectTimeReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobProjectScheduleSummary Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobProjectScheduleSummaryReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailBillMonth Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailBillMonthReport.Properties.AccountsReceivablePostPeriodCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFunction Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailFunctionReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItem Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailItemReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetail Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummary Then

                    DefaultSort = AdvantageFramework.Database.Classes.ProjectSummary.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryTask Then

                    DefaultSort = AdvantageFramework.Database.Classes.ProjectSummaryTask.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatus Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimatedAndActualIncome Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.EstimatedAndActualIncome.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityDetail Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.CRMOpportunityDetailReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMOpportunityToInvestment Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.CRMOpportunityToInvestmentReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMProspects Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.CRMProspectsReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CRMClientContracts Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.CRMClientContractsReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPL Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.ClientPL.Properties.Type.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AROpenAged Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.AROpenAged.Properties.InvoiceNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlan Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaPlanReport.Properties.PlanID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusSummary Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusSummaryReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonSummary Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonSummary.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFee Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.ServiceFee.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Clients Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.ClientReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Divisions Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.DivisionReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Products Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.ProductReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Employees Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.EmployeeReport.Properties.Code.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Vendors Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.VendorReport.Properties.Code.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashAnalysis Then

                    DefaultSort = AdvantageFramework.Database.Classes.CashAnalysisReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournal Then

                    DefaultSort = AdvantageFramework.Database.Classes.SalesJournalReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesJournalWithComments Then

                    DefaultSort = AdvantageFramework.Database.Classes.SalesJournalReportWithComments.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AuthorizationToBuy Then

                    DefaultSort = AdvantageFramework.Database.Classes.ATBReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeApproval Then

                    DefaultSort = AdvantageFramework.Database.Classes.EmployeeTimeApproval.Properties.EmployeeCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMedia Then

                    DefaultSort = AdvantageFramework.Database.Classes.CampaignProductionMediaReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CampaignWithProductionAndMediaSummary Then

                    DefaultSort = AdvantageFramework.Database.Classes.CampaignProductionMediaSummaryReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimateDetailApproved Then

                    DefaultSort = AdvantageFramework.Database.Classes.EstimateDetailApprovedReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.Transfer Then

                    DefaultSort = AdvantageFramework.Database.Classes.TransferReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.AdvancedReportWriterReports.GeneralLedgerDetail Then

                    DefaultSort = AdvantageFramework.Database.Classes.GeneralLedgerDetailReport.Properties.AccountCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceWithBalanceAging Then

                    DefaultSort = AdvantageFramework.Database.Classes.AccountsPayableInvoiceWithBalanceAgingReport.Properties.VendorCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetail Then

                    DefaultSort = AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailReport.Properties.VendorCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPayments Then

                    DefaultSort = AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaymentsReport.Properties.VendorCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableInvoiceDetailPaidByClient Then

                    DefaultSort = AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailPaidByClientReport.Properties.VendorCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResults Then

                    DefaultSort = AdvantageFramework.Database.Classes.AccountsPayableInvoiceDetailReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EstimateForm Then

                    DefaultSort = AdvantageFramework.Database.Classes.EstimateForm.Properties.EstimateNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ServiceFeeContract Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobServiceFeeContractReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.IncomeOnly Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.IncomeOnlyReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectSummaryAnalysis Then

                    DefaultSort = AdvantageFramework.Database.Classes.ProjectSummaryAnalysis.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ARPaymentHistory Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.ARPaymentHistoryReport.Properties.ARInvoiceNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ClientPLDetail Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.ClientPLDetail.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetProduction Then

                    DefaultSort = Nothing

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingWorksheetMedia Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.BillingWorksheetMediaReport.Properties.OrderNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.OpenPurchaseOrderDetail Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.OpenPurchaseOrderDetail.Properties.PONumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailItemAccountSplit Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailItemAccountSplitReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ExpenseReportAndApproval Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.ExpenseReport.Properties.InvoiceNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VendorContracts Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Views.VendorContractsReport.Properties.VendorCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.VirtualCreditCardTransactionEFS Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS.Properties.OrderNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobForecast Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobForecastReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.DigitalResultsComparison Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.DigitalResultsComparisonReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GeneralLedgerReport Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.GeneralLedgerDetailByAccountReport.Properties.AccountCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaResultsComparisonByClientAndType Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaResultsComparisonByClientAndTypeReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TrialBalance Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.TrialBalanceReport.Properties.AccountCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsPayableBalanceByVendor Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.AccountsPayableBalanceByVendor.Properties.VendorCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.AccountsReceivableBalanceByClient Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.AccountsReceivableBalanceByClient.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SalesAndCostOfSalesByClient Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.SalesAndCostOfSalesByClientReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.TimeReport Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.TimeReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.RevenueBreakdownByClient Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.RevenueBreakdownByClientReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeUtilization Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.EmployeeUtilizationReport.Properties.EmployeeCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPreBuy Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport.Properties.MediaBroadcastWorksheetName.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetTVPostBuy Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyDRWReport.Properties.MediaBroadcastWorksheetName.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegister Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.CheckRegister.Properties.VendorCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CheckRegisterWithInvoiceDetails Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.CheckRegisterWithInvoiceDetails.Properties.VendorCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeInOutBoard Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.EmployeeInOutBoard.Properties.EmployeeCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonByVendor Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonByVendor.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaPlanComparisonDetailByVendor Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonDetailByVendor.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ResourceAllocationByWeek Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.ResourceAllocationByWeek.Properties.EmployeeCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLChartOfAccounts Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.GLChartOfAccounts.Properties.GLAccount.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.GLReportRow Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.GLReportRow.Properties.ReportName.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashTransactions Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.CashTransaction.Properties.BankDescription.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaCurrentStatusCoopBreakout Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusCoopBreakout.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunction Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunction.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJobComponent Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobComponent.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByCampaign Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPCampaign.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByFunctionMinimized Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunctionMinimized.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob1Minimized Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobMinimized.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.JobDetailFeesAndOOPByJob2Minimized Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob2Minimized.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupModuleAccess Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.SecurityGroupModuleAccess.Properties.GroupName.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupSettings Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.SecurityGroupSettings.Properties.GroupName.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityGroupUserSettings Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.SecurityGroupUserSettings.Properties.UserCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserModuleAccess Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.SecurityUserModuleAccess.Properties.UserCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserSettings Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.SecurityUserSettings.Properties.UserCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserTimesheetFunction Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.UserTimesheetFunction.Properties.UserCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.SecurityUserLoginAudit Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.SecurityUserLoginAudit.Properties.ID.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeHoursAllocation Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.EmployeeHoursAllocationReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.ProjectScheduleTasksByEmployee Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.ProjectScheduleTasksByEmployeeReport.Properties.JobNumber.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.InvoiceBilledBackup Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.InvoiceBilledBackup.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.CashManagementProduction Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.CashManagementProduction.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPreBuy Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport.Properties.MediaBroadcastWorksheetName.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastWorksheetRadioPostBuy Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyDRWReport.Properties.MediaBroadcastWorksheetName.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficMissingInstructions Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaTrafficMissingInstructionDataset.Properties.WorksheetName.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.MediaTrafficInstructions Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.MediaTrafficInstructionDataset.Properties.Schedule.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BillingApproval Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.BillingApprovalReport.Properties.ClientCode.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.BroadcastInvoiceSummary Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.BroadcastInvoiceSummary.Properties.Market.ToString

                ElseIf DynamicReport = AdvantageFramework.Reporting.DynamicReports.EmployeeTimeAnalysis Then

                    DefaultSort = AdvantageFramework.Reporting.Database.Classes.EmployeeTimeAnalysisReport.Properties.EmployeeCode.ToString

                End If

            Catch ex As Exception
                DefaultSort = ""
            Finally
                LoadDynamicReportDefaultSort = DefaultSort
            End Try

        End Function
        Public Function LoadPurchaseOrderData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Entities.PurchaseOrder)

            'objects
            Dim PONumbers As Integer() = Nothing
            Dim PurchaseOrders As Generic.List(Of AdvantageFramework.Database.Entities.PurchaseOrder) = Nothing

            Try

                PONumbers = ParameterDictionary("PONumbers")

            Catch ex As Exception
                PONumbers = Nothing
            End Try

            If PONumbers IsNot Nothing Then

                PurchaseOrders = (From Entity In AdvantageFramework.Database.Procedures.PurchaseOrder.Load(DbContext)
                                  Where PONumbers.Contains(Entity.Number)
                                  Select Entity).ToList

            Else

                PurchaseOrders = AdvantageFramework.Database.Procedures.PurchaseOrder.Load(DbContext).ToList

            End If

            LoadPurchaseOrderData = PurchaseOrders

        End Function
        Private Function LoadDirectIndirectTimeData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal [From] As Date, ByVal [To] As Date, ByVal Criteria As Integer, ByVal ByType As Boolean) As Generic.List(Of AdvantageFramework.Database.Classes.DirectIndirectTimeReport)

            Dim DirectIndirectTimeReports As Generic.List(Of AdvantageFramework.Database.Classes.DirectIndirectTimeReport) = Nothing

            Try

                DirectIndirectTimeReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.DirectIndirectTimeReport)(String.Format("EXEC [dbo].[advsp_direct_indirect_time_load] '{0}', '{1}', {2}, {3}", [From].ToString("MM/dd/yyyy"), [To].ToString("MM/dd/yyyy"), Criteria, CInt(If(ByType, 1, 0)))).ToList

            Catch ex As Exception
                DirectIndirectTimeReports = Nothing
            Finally
                LoadDirectIndirectTimeData = DirectIndirectTimeReports
            End Try

        End Function
        Public Function LoadSalesJournalData(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.SalesJournalReport)

            Dim SalesJournalReports As Generic.List(Of AdvantageFramework.Database.Classes.SalesJournalReport) = Nothing

            Dim SqlParameterBreakoutCoOpBilling As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPeriodType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartingInvoiceDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingInvoiceDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterStartingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@StartingPostPeriodCode", SqlDbType.VarChar) With {.Value = ParameterDictionary("StartingPostPeriodCode")}
            SqlParameterEndingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@EndingPostPeriodCode", SqlDbType.VarChar) With {.Value = ParameterDictionary("EndingPostPeriodCode")}
            SqlParameterBreakoutCoOpBilling = New System.Data.SqlClient.SqlParameter("@BreakoutCoOpBilling", SqlDbType.Bit) With {.Value = ParameterDictionary("BreakoutCoOpBilling")}
            SqlParameterPeriodType = New System.Data.SqlClient.SqlParameter("@PeriodType", SqlDbType.SmallInt) With {.Value = ParameterDictionary("PeriodType")}
            If ParameterDictionary("StartingInvoiceDate").ToString = "" Then
                SqlParameterStartingInvoiceDate = New System.Data.SqlClient.SqlParameter("@StartingInvoiceDate", SqlDbType.VarChar) With {.Value = ParameterDictionary("StartingInvoiceDate")}
            Else
                SqlParameterStartingInvoiceDate = New System.Data.SqlClient.SqlParameter("@StartingInvoiceDate", SqlDbType.VarChar) With {.Value = CDate(ParameterDictionary("StartingInvoiceDate")).ToString("MM/dd/yyyy")}
            End If
            If ParameterDictionary("EndingInvoiceDate").ToString = "" Then
                SqlParameterEndingInvoiceDate = New System.Data.SqlClient.SqlParameter("@EndingInvoiceDate", SqlDbType.VarChar) With {.Value = ParameterDictionary("EndingInvoiceDate")}
            Else
                SqlParameterEndingInvoiceDate = New System.Data.SqlClient.SqlParameter("@EndingInvoiceDate", SqlDbType.VarChar) With {.Value = CDate(ParameterDictionary("EndingInvoiceDate")).ToString("MM/dd/yyyy")}
            End If

            SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
            SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
            SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
            SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
            SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@USER_CODE", SqlDbType.VarChar)

            SqlParameterUserID.Value = DbContext.UserCode

            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing

            Dim Offices As String = ""
            Dim Clients As String = ""
            Dim Divisions As String = ""
            Dim Products As String = ""

            SelectedOffices = ParameterDictionary("SelectedOffices")

            SelectedClients = ParameterDictionary("SelectedClients")

            SelectedDivisions = ParameterDictionary("SelectedDivisions")

            SelectedProducts = ParameterDictionary("SelectedProducts")

            If SelectedOffices Is Nothing Then

                SqlParameterOfficeList.Value = System.DBNull.Value

            Else

                SqlParameterOfficeList.Value = Join(SelectedOffices.ToArray, ",")

            End If

            If SelectedClients Is Nothing Then

                SqlParameterClientList.Value = System.DBNull.Value

            Else

                SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

            End If

            If SelectedDivisions Is Nothing Then

                SqlParameterDivisionList.Value = System.DBNull.Value

            Else

                SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

            End If

            If SelectedProducts Is Nothing Then

                SqlParameterProductList.Value = System.DBNull.Value

            Else

                SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

            End If


            Try

                'SalesJournalReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.SalesJournalReport)(String.Format("EXEC [dbo].[advsp_load_drpt_sales_journal] '{0}', '{1}', {2}, {3}, '{4}', '{5}', '{6}', '{7}', '{8}', '{9}'",
                '                                                                                                                           ParameterDictionary("StartingPostPeriodCode"), ParameterDictionary("EndingPostPeriodCode"), ParameterDictionary("BreakoutCoOpBilling"),
                '                                                                                                                           ParameterDictionary("PeriodType"), ParameterDictionary("StartingInvoiceDate"), ParameterDictionary("EndingInvoiceDate"), IIf(Offices = "", Nothing, Offices), IIf(Clients = "", Nothing, Clients), IIf(Divisions = "", Nothing, Divisions), IIf(Products = "", Nothing, Products))).ToList

                SalesJournalReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.SalesJournalReport)("EXEC dbo.advsp_load_drpt_sales_journal @StartingPostPeriodCode, @EndingPostPeriodCode, @BreakoutCoOpBilling, @PeriodType, @StartingInvoiceDate, @EndingInvoiceDate, " &
                                                                                                                             "@OFFICE_LIST, @CLIENT_LIST, @DIVISION_LIST, @PRODUCT_LIST, @USER_CODE",
                                                                                                                              SqlParameterStartingPostPeriodCode, SqlParameterEndingPostPeriodCode, SqlParameterBreakoutCoOpBilling, SqlParameterPeriodType, SqlParameterStartingInvoiceDate, SqlParameterEndingInvoiceDate,
                                                                                                                              SqlParameterOfficeList, SqlParameterClientList, SqlParameterDivisionList, SqlParameterProductList, SqlParameterUserID).ToList

            Catch ex As Exception
                SalesJournalReports = Nothing
            Finally
                LoadSalesJournalData = SalesJournalReports
            End Try

        End Function

        Public Function LoadSalesJournalWithCommentsData(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.SalesJournalReportWithComments)

            Dim SalesJournalReports As Generic.List(Of AdvantageFramework.Database.Classes.SalesJournalReportWithComments) = Nothing

            Dim SqlParameterBreakoutCoOpBilling As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingPostPeriodCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPeriodType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartingInvoiceDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndingInvoiceDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterStartingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@StartingPostPeriodCode", SqlDbType.VarChar) With {.Value = ParameterDictionary("StartingPostPeriodCode")}
            SqlParameterEndingPostPeriodCode = New System.Data.SqlClient.SqlParameter("@EndingPostPeriodCode", SqlDbType.VarChar) With {.Value = ParameterDictionary("EndingPostPeriodCode")}
            SqlParameterBreakoutCoOpBilling = New System.Data.SqlClient.SqlParameter("@BreakoutCoOpBilling", SqlDbType.Bit) With {.Value = ParameterDictionary("BreakoutCoOpBilling")}
            SqlParameterPeriodType = New System.Data.SqlClient.SqlParameter("@PeriodType", SqlDbType.SmallInt) With {.Value = ParameterDictionary("PeriodType")}
            If ParameterDictionary("StartingInvoiceDate").ToString = "" Then
                SqlParameterStartingInvoiceDate = New System.Data.SqlClient.SqlParameter("@StartingInvoiceDate", SqlDbType.VarChar) With {.Value = ParameterDictionary("StartingInvoiceDate")}
            Else
                SqlParameterStartingInvoiceDate = New System.Data.SqlClient.SqlParameter("@StartingInvoiceDate", SqlDbType.VarChar) With {.Value = CDate(ParameterDictionary("StartingInvoiceDate")).ToString("MM/dd/yyyy")}
            End If
            If ParameterDictionary("EndingInvoiceDate").ToString = "" Then
                SqlParameterEndingInvoiceDate = New System.Data.SqlClient.SqlParameter("@EndingInvoiceDate", SqlDbType.VarChar) With {.Value = ParameterDictionary("EndingInvoiceDate")}
            Else
                SqlParameterEndingInvoiceDate = New System.Data.SqlClient.SqlParameter("@EndingInvoiceDate", SqlDbType.VarChar) With {.Value = CDate(ParameterDictionary("EndingInvoiceDate")).ToString("MM/dd/yyyy")}
            End If

            SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
            SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
            SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
            SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
            SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@USER_CODE", SqlDbType.VarChar)

            SqlParameterUserID.Value = DbContext.UserCode

            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing

            Dim Offices As String = ""
            Dim Clients As String = ""
            Dim Divisions As String = ""
            Dim Products As String = ""

            SelectedOffices = ParameterDictionary("SelectedOffices")

            SelectedClients = ParameterDictionary("SelectedClients")

            SelectedDivisions = ParameterDictionary("SelectedDivisions")

            SelectedProducts = ParameterDictionary("SelectedProducts")

            If SelectedOffices Is Nothing Then

                SqlParameterOfficeList.Value = System.DBNull.Value

            Else

                SqlParameterOfficeList.Value = Join(SelectedOffices.ToArray, ",")

            End If

            If SelectedClients Is Nothing Then

                SqlParameterClientList.Value = System.DBNull.Value

            Else

                SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

            End If

            If SelectedDivisions Is Nothing Then

                SqlParameterDivisionList.Value = System.DBNull.Value

            Else

                SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

            End If

            If SelectedProducts Is Nothing Then

                SqlParameterProductList.Value = System.DBNull.Value

            Else

                SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

            End If


            Try

                'SalesJournalReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.SalesJournalReport)(String.Format("EXEC [dbo].[advsp_load_drpt_sales_journal] '{0}', '{1}', {2}, {3}, '{4}', '{5}', '{6}', '{7}', '{8}', '{9}'",
                '                                                                                                                           ParameterDictionary("StartingPostPeriodCode"), ParameterDictionary("EndingPostPeriodCode"), ParameterDictionary("BreakoutCoOpBilling"),
                '                                                                                                                           ParameterDictionary("PeriodType"), ParameterDictionary("StartingInvoiceDate"), ParameterDictionary("EndingInvoiceDate"), IIf(Offices = "", Nothing, Offices), IIf(Clients = "", Nothing, Clients), IIf(Divisions = "", Nothing, Divisions), IIf(Products = "", Nothing, Products))).ToList

                SalesJournalReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.SalesJournalReportWithComments)("EXEC dbo.advsp_load_drpt_sales_journal_with_comments @StartingPostPeriodCode, @EndingPostPeriodCode, @BreakoutCoOpBilling, @PeriodType, @StartingInvoiceDate, @EndingInvoiceDate, " &
                                                                                                                             "@OFFICE_LIST, @CLIENT_LIST, @DIVISION_LIST, @PRODUCT_LIST, @USER_CODE",
                                                                                                                              SqlParameterStartingPostPeriodCode, SqlParameterEndingPostPeriodCode, SqlParameterBreakoutCoOpBilling, SqlParameterPeriodType, SqlParameterStartingInvoiceDate, SqlParameterEndingInvoiceDate,
                                                                                                                              SqlParameterOfficeList, SqlParameterClientList, SqlParameterDivisionList, SqlParameterProductList, SqlParameterUserID).ToList

            Catch ex As Exception
                SalesJournalReports = Nothing
            Finally
                LoadSalesJournalWithCommentsData = SalesJournalReports
            End Try

        End Function
        Public Function LoadCashAnalysisDataDetail(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal StartingPostPeriodCode As String, ByVal EndingPostPeriodCode As String, ByVal ClientCode As String, ByVal ColumnName As String) As Generic.List(Of AdvantageFramework.Database.Classes.CashAnalysisDetailReport)

            Dim CashAnalysisDetailReports As Generic.List(Of AdvantageFramework.Database.Classes.CashAnalysisDetailReport) = Nothing

            Try

                CashAnalysisDetailReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.CashAnalysisDetailReport)(String.Format("EXEC [dbo].[advsp_load_drpt_client_billing_detail] '{0}', '{1}', '{2}', '{3}'", StartingPostPeriodCode, EndingPostPeriodCode, ClientCode, ColumnName)).ToList

            Catch ex As Exception
                CashAnalysisDetailReports = Nothing
            Finally
                LoadCashAnalysisDataDetail = CashAnalysisDetailReports
            End Try

        End Function
        Public Function LoadBillingPaymentsData(ByVal DbContext As AdvantageFramework.Database.DbContext) As Generic.List(Of AdvantageFramework.Database.Classes.BillingPaymentsReport)

            Dim BillingPaymentsReports As Generic.List(Of AdvantageFramework.Database.Classes.BillingPaymentsReport) = Nothing

            Try

                BillingPaymentsReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.BillingPaymentsReport)(String.Format("EXEC [dbo].[advsp_job_detail_billing_payments]")).ToList

            Catch ex As Exception
                BillingPaymentsReports = Nothing
            Finally
                LoadBillingPaymentsData = BillingPaymentsReports
            End Try

        End Function
        Public Function LoadAdvanceRconciliationHistoryData(ByVal DbContext As AdvantageFramework.Database.DbContext) As Generic.List(Of AdvantageFramework.Database.Classes.AdvanceReconciliationReport)

            Dim AdvanceReconciliationReports As Generic.List(Of AdvantageFramework.Database.Classes.AdvanceReconciliationReport) = Nothing

            Try

                AdvanceReconciliationReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.AdvanceReconciliationReport)(String.Format("EXEC [dbo].[advsp_job_detail_adv_recon_hist]")).ToList

            Catch ex As Exception
                AdvanceReconciliationReports = Nothing
            Finally
                LoadAdvanceRconciliationHistoryData = AdvanceReconciliationReports
            End Try

        End Function
        Public Function LoadLocationHeaderInfo(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal LocationID As String) As String

            'objects
            Dim HeaderInfo As String = ""

            Try

                HeaderInfo = DbContext.Database.SqlQuery(Of String)(String.Format("SELECT ISNULL(L.LOC_HDR, '') FROM [dbo].[advtf_location_query]() AS L WHERE L.LOC_ID = '{0}' AND L.PRT_HDR = 1", LocationID)).SingleOrDefault

            Catch ex As Exception

            End Try

            LoadLocationHeaderInfo = HeaderInfo

        End Function
        Public Function LoadLocationFooterInfo(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal LocationID As String) As String

            'objects
            Dim FooterInfo As String = ""

            Try

                FooterInfo = DbContext.Database.SqlQuery(Of String)(String.Format("SELECT ISNULL(L.LOC_FTR, '') FROM [dbo].[advtf_location_query]() AS L WHERE L.LOC_ID = '{0}' AND L.PRT_FTR = 1", LocationID)).SingleOrDefault

            Catch ex As Exception

            End Try

            LoadLocationFooterInfo = FooterInfo

        End Function
        Private Function LoadEstimatePrintDetail(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Database.Classes.EstimatePrintDetail)

            Dim EstimateDetailReports As Generic.List(Of AdvantageFramework.Database.Classes.EstimatePrintDetail) = Nothing

            Try
                EstimateDetailReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Database.Classes.EstimatePrintDetail)(String.Format("EXEC [dbo].[usp_wv_Estimating_Print_Details_Report] {0}, {1}, '{2}', '{3}'", ParameterDictionary("EstimateNumber"), ParameterDictionary("EstimateComponent"), ParameterDictionary("EstimateUserID"), ParameterDictionary("EstimateQuote"))).ToList

            Catch ex As Exception
                EstimateDetailReports = Nothing
            Finally
                LoadEstimatePrintDetail = EstimateDetailReports
            End Try

        End Function
        Public Function LoadBillingWorksheetMediaDetail(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetMediaReport)

            'objects
            Dim SqlParameterIncludeUnbilledOnly As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeZeroSpots As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateToUse As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterNewspaper As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMagazine As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterInternet As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOutofHome As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterRadio As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterRadioDaily As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterRadioMonthly As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterTelevision As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterTelevisionDaily As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterTelevisionMonthly As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobMediaDateFrom As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobMediaDateTo As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBillingCommandCenterID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim BillingWorksheetMediaReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetMediaReport) = Nothing
            Dim SqlParameterOmitZeroUnbilledAmounts As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterIncludeUnbilledOnly = New System.Data.SqlClient.SqlParameter("@incl_unbilled_only", SqlDbType.Bit)
                SqlParameterIncludeZeroSpots = New System.Data.SqlClient.SqlParameter("@incl_zero_spots", SqlDbType.Bit)
                SqlParameterDateToUse = New System.Data.SqlClient.SqlParameter("@date_to_use", SqlDbType.SmallInt)
                SqlParameterNewspaper = New System.Data.SqlClient.SqlParameter("@newspaper", SqlDbType.Bit)
                SqlParameterMagazine = New System.Data.SqlClient.SqlParameter("@magazine", SqlDbType.Bit)
                SqlParameterInternet = New System.Data.SqlClient.SqlParameter("@internet", SqlDbType.Bit)
                SqlParameterOutofHome = New System.Data.SqlClient.SqlParameter("@out_of_home", SqlDbType.Bit)
                SqlParameterRadio = New System.Data.SqlClient.SqlParameter("@radio", SqlDbType.Bit)
                SqlParameterRadioDaily = New System.Data.SqlClient.SqlParameter("@radio_daily", SqlDbType.Bit)
                SqlParameterRadioMonthly = New System.Data.SqlClient.SqlParameter("@radio_monthly", SqlDbType.Bit)
                SqlParameterTelevision = New System.Data.SqlClient.SqlParameter("@television", SqlDbType.Bit)
                SqlParameterTelevisionDaily = New System.Data.SqlClient.SqlParameter("@tv_daily", SqlDbType.Bit)
                SqlParameterTelevisionMonthly = New System.Data.SqlClient.SqlParameter("@tv_monthly", SqlDbType.Bit)
                SqlParameterMediaStartDate = New System.Data.SqlClient.SqlParameter("@m_start_date", SqlDbType.SmallDateTime)
                SqlParameterMediaEndDate = New System.Data.SqlClient.SqlParameter("@m_cutoff_date", SqlDbType.SmallDateTime)
                SqlParameterBroadcastStartDate = New System.Data.SqlClient.SqlParameter("@brdcast_date1", SqlDbType.SmallDateTime)
                SqlParameterBroadcastEndDate = New System.Data.SqlClient.SqlParameter("@brdcast_date2", SqlDbType.SmallDateTime)
                SqlParameterJobMediaDateFrom = New System.Data.SqlClient.SqlParameter("@job_media_date_from", SqlDbType.SmallDateTime)
                SqlParameterJobMediaDateTo = New System.Data.SqlClient.SqlParameter("@job_media_date_to", SqlDbType.SmallDateTime)
                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterBillingCommandCenterID = New System.Data.SqlClient.SqlParameter("@BillingCommandCenterID", SqlDbType.Int)
                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@user_code", SqlDbType.VarChar)
                SqlParameterOmitZeroUnbilledAmounts = New System.Data.SqlClient.SqlParameter("@omit_zero_unbilled_amounts", SqlDbType.Bit)

                SqlParameterIncludeUnbilledOnly.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.IncludeUnbilledOrdersOnly.ToString)
                SqlParameterIncludeZeroSpots.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.IncludeSpotsWithZeroBillingAmounts.ToString)
                SqlParameterDateToUse.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.DateToUse.ToString)
                SqlParameterNewspaper.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.Newspaper.ToString)
                SqlParameterMagazine.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.Magazine.ToString)
                SqlParameterInternet.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.Internet.ToString)
                SqlParameterOutofHome.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.OutOfHome.ToString)

                If ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.RadioDaily.ToString) = True OrElse
                        ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.RadioMonthly.ToString) = True Then

                    SqlParameterRadio.Value = True

                Else

                    SqlParameterRadio.Value = False

                End If

                SqlParameterRadioDaily.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.RadioDaily.ToString)
                SqlParameterRadioMonthly.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.RadioMonthly.ToString)

                If ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.TVDaily.ToString) = True OrElse
                        ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.TVMonthly.ToString) = True Then

                    SqlParameterTelevision.Value = True

                Else

                    SqlParameterTelevision.Value = False

                End If

                SqlParameterTelevisionDaily.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.TVDaily.ToString)
                SqlParameterTelevisionMonthly.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.TVMonthly.ToString)

                If ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.MediaStartDate.ToString) IsNot Nothing Then

                    SqlParameterMediaStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.MediaStartDate.ToString)

                Else

                    SqlParameterMediaStartDate.Value = System.DBNull.Value

                End If

                If ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.MediaEndDate.ToString) IsNot Nothing Then

                    SqlParameterMediaEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.MediaEndDate.ToString)

                Else

                    SqlParameterMediaEndDate.Value = System.DBNull.Value

                End If

                If ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.BroadcastStartDate.ToString) IsNot Nothing Then

                    SqlParameterBroadcastStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.BroadcastStartDate.ToString)

                Else

                    SqlParameterBroadcastStartDate.Value = System.DBNull.Value

                End If

                If ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.BroadcastEndDate.ToString) IsNot Nothing Then

                    SqlParameterBroadcastEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.BroadcastEndDate.ToString)

                Else

                    SqlParameterBroadcastEndDate.Value = System.DBNull.Value

                End If

                If ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.JobMediaDateFrom.ToString) IsNot Nothing Then

                    SqlParameterJobMediaDateFrom.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.JobMediaDateFrom.ToString)

                Else

                    SqlParameterJobMediaDateFrom.Value = System.DBNull.Value

                End If

                If ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.JobMediaDateTo.ToString) IsNot Nothing Then

                    SqlParameterJobMediaDateTo.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.JobMediaDateTo.ToString)

                Else

                    SqlParameterJobMediaDateTo.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.BillingCommandCenterID.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.BillingCommandCenterID.ToString) IsNot Nothing Then

                    SqlParameterBillingCommandCenterID.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.BillingCommandCenterID.ToString)

                Else

                    SqlParameterBillingCommandCenterID.Value = System.DBNull.Value

                End If

                SqlParameterUserCode.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.UserCode.ToString)

                SqlParameterOmitZeroUnbilledAmounts.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetMediaInitialCriteria.OmitZeroUnbilledAmounts.ToString)


                BillingWorksheetMediaReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetMediaReport)("exec dbo.advsp_bcc_billing_worksheet_media @incl_unbilled_only, @incl_zero_spots, @date_to_use, @newspaper, @magazine, " &
                                                                                                                                                                                                    "@internet, @out_of_home, @radio, @radio_daily, @radio_monthly, " &
                                                                                                                                                                                                    "@television, @tv_daily, @tv_monthly, @m_start_date, " &
                                                                                                                                                                                                    "@m_cutoff_date, @brdcast_date1, @brdcast_date2, @job_media_date_from, @job_media_date_to, " &
                                                                                                                                                                                                    "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @BillingCommandCenterID, " &
                                                                                                                                                                                                    "@user_code, @omit_zero_unbilled_amounts",
                                                                                                                                                        SqlParameterIncludeUnbilledOnly, SqlParameterIncludeZeroSpots, SqlParameterDateToUse, SqlParameterNewspaper, SqlParameterMagazine,
                                                                                                                                                        SqlParameterInternet, SqlParameterOutofHome, SqlParameterRadio, SqlParameterRadioDaily, SqlParameterRadioMonthly,
                                                                                                                                                        SqlParameterTelevision, SqlParameterTelevisionDaily, SqlParameterTelevisionMonthly, SqlParameterMediaStartDate,
                                                                                                                                                        SqlParameterMediaEndDate, SqlParameterBroadcastStartDate, SqlParameterBroadcastEndDate, SqlParameterJobMediaDateFrom, SqlParameterJobMediaDateTo,
                                                                                                                                                        SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterBillingCommandCenterID,
                                                                                                                                                        SqlParameterUserCode, SqlParameterOmitZeroUnbilledAmounts).ToList

            Catch ex As Exception
                BillingWorksheetMediaReports = Nothing
            Finally
                LoadBillingWorksheetMediaDetail = BillingWorksheetMediaReports
            End Try

        End Function
        Public Function LoadBillingWorksheetProductionDetail(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReport)

            Dim BillingWorksheetProductionReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReport) = Nothing
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobOption As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNonBillableTimeDetail As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNonBillableAPIODetail As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPrintItemDetail As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeContingency As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBillingCommandCenterID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSelectedJobList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterNonbillableTimeFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterNonbillableTimeToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPopulateTimeComments As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPopulateAPComments As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPopulateIOComments As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)
                SqlParameterJobType = New System.Data.SqlClient.SqlParameter("@job_type", SqlDbType.SmallInt)
                SqlParameterJobOption = New System.Data.SqlClient.SqlParameter("@job_option", SqlDbType.SmallInt)
                SqlParameterIncludeNonBillableTimeDetail = New System.Data.SqlClient.SqlParameter("@include_non_billable_time_detail", SqlDbType.Bit)
                SqlParameterIncludeNonBillableAPIODetail = New System.Data.SqlClient.SqlParameter("@include_non_billable_ap_io_detail", SqlDbType.Bit)
                SqlParameterPrintItemDetail = New System.Data.SqlClient.SqlParameter("@print_item_detail", SqlDbType.SmallInt)
                SqlParameterIncludeContingency = New System.Data.SqlClient.SqlParameter("@IncludeContingency", SqlDbType.Bit)
                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterBillingCommandCenterID = New System.Data.SqlClient.SqlParameter("@BillingCommandCenterID", SqlDbType.Int)
                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@user_code", SqlDbType.VarChar)
                SqlParameterSelectedJobList = New System.Data.SqlClient.SqlParameter("@SelectedJobList", SqlDbType.VarChar)
                SqlParameterNonbillableTimeFromDate = New System.Data.SqlClient.SqlParameter("@non_billable_from_date", SqlDbType.SmallDateTime)
                SqlParameterNonbillableTimeToDate = New System.Data.SqlClient.SqlParameter("@non_billable_to_date", SqlDbType.SmallDateTime)
                SqlParameterPopulateTimeComments = New System.Data.SqlClient.SqlParameter("@populate_time_comments", SqlDbType.Bit)
                SqlParameterPopulateAPComments = New System.Data.SqlClient.SqlParameter("@populate_ap_comments", SqlDbType.Bit)
                SqlParameterPopulateIOComments = New System.Data.SqlClient.SqlParameter("@populate_io_comments", SqlDbType.Bit)

                SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.EmployeeDateCutoff.ToString)
                SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.IncomeOnlyDateCutoff.ToString)
                SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.AccountsPayablePostingPeriodCutoff.ToString)
                SqlParameterJobType.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.JobType.ToString)
                SqlParameterJobOption.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.JobOption.ToString)

                SqlParameterIncludeNonBillableTimeDetail.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.IncludeNonBillableTimeDetail.ToString)
                SqlParameterIncludeNonBillableAPIODetail.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.IncludeNonBillableAPIODetail.ToString)
                SqlParameterPrintItemDetail.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.PrintItemDetail.ToString)
                SqlParameterIncludeContingency.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.IncludeContingency.ToString)
                SqlParameterUserCode.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.UserCode.ToString)

                SqlParameterPopulateTimeComments.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.PopulateTimeComments.ToString)
                SqlParameterPopulateAPComments.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.PopulateAPComments.ToString)
                SqlParameterPopulateIOComments.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.PopulateIOComments.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.BillingCommandCenterID.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.BillingCommandCenterID.ToString) IsNot Nothing Then

                    SqlParameterBillingCommandCenterID.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.BillingCommandCenterID.ToString)

                Else

                    SqlParameterBillingCommandCenterID.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedJobs.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedJobs.ToString) IsNot Nothing Then

                    SqlParameterSelectedJobList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedJobs.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterSelectedJobList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeStartDate.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeStartDate.ToString) IsNot Nothing Then

                    SqlParameterNonbillableTimeFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeStartDate.ToString)

                Else

                    SqlParameterNonbillableTimeFromDate.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeEndDate.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeEndDate.ToString) IsNot Nothing Then

                    SqlParameterNonbillableTimeToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeEndDate.ToString)

                Else

                    SqlParameterNonbillableTimeToDate.Value = System.DBNull.Value

                End If

                BillingWorksheetProductionReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReport) _
                                                                                ("EXEC [dbo].[advsp_bcc_billing_worksheet_production] @et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, @job_type, @job_option, " &
                                                                                 "@include_non_billable_time_detail, @include_non_billable_ap_io_detail, @print_item_detail, @IncludeContingency, @user_code, " &
                                                                                 "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @BillingCommandCenterID, @SelectedJobList, " &
                                                                                 "@non_billable_from_date, @non_billable_to_date, @populate_time_comments, @populate_ap_comments, @populate_io_comments",
                                                                                 SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff, SqlParameterJobType, SqlParameterJobOption,
                                                                                 SqlParameterIncludeNonBillableTimeDetail, SqlParameterIncludeNonBillableAPIODetail, SqlParameterPrintItemDetail, SqlParameterIncludeContingency, SqlParameterUserCode,
                                                                                 SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList,
                                                                                 SqlParameterBillingCommandCenterID, SqlParameterSelectedJobList, SqlParameterNonbillableTimeFromDate, SqlParameterNonbillableTimeToDate,
                                                                                 SqlParameterPopulateTimeComments, SqlParameterPopulateAPComments, SqlParameterPopulateIOComments).ToList

            Catch ex As Exception
                BillingWorksheetProductionReports = Nothing
            Finally
                LoadBillingWorksheetProductionDetail = BillingWorksheetProductionReports
            End Try

        End Function
        Public Function LoadOpenPurchaseOrderDetail(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.OpenPurchaseOrderDetail)

            'objects
            Dim SqlParameterIncludeClosedPOs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeVoidedPOs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPOStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPOEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterVendorList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClientPOs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNonClientPOs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SelectedVendors As Generic.List(Of String) = Nothing

            Dim OpenPurchaseOrderDetails As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.OpenPurchaseOrderDetail) = Nothing

            Try

                SqlParameterIncludeClosedPOs = New System.Data.SqlClient.SqlParameter("@include_closed", SqlDbType.Bit)
                SqlParameterIncludeVoidedPOs = New System.Data.SqlClient.SqlParameter("@include_voided", SqlDbType.Bit)
                SqlParameterPOStartDate = New System.Data.SqlClient.SqlParameter("@begin_date", SqlDbType.SmallDateTime)
                SqlParameterPOEndDate = New System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.SmallDateTime)
                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
                SqlParameterVendorList = New System.Data.SqlClient.SqlParameter("@VENDOR_LIST", SqlDbType.VarChar)
                SqlParameterIncludeClientPOs = New System.Data.SqlClient.SqlParameter("@include_clientpos", SqlDbType.Bit)
                SqlParameterIncludeNonClientPOs = New System.Data.SqlClient.SqlParameter("@include_nonclientpos", SqlDbType.Bit)

                'POStartDate
                'POEndDate
                'IncludeClosedPOs

                SqlParameterIncludeClosedPOs.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.IncludeClosedPOs.ToString)
                SqlParameterIncludeVoidedPOs.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.IncludeVoidedPOs.ToString)
                SqlParameterPOStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.POStartDate.ToString)
                SqlParameterPOEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.POEndDate.ToString)
                SqlParameterIncludeClientPOs.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.IncludeClientPOs.ToString)
                SqlParameterIncludeNonClientPOs.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.IncludeNonClientPOs.ToString)

                SelectedClients = ParameterDictionary("OpenPurchaseOrderDetail_SelectedClients")
                SelectedDivisions = ParameterDictionary("OpenPurchaseOrderDetail_SelectedDivisions")
                SelectedProducts = ParameterDictionary("OpenPurchaseOrderDetail_SelectedProducts")
                SelectedVendors = ParameterDictionary("OpenPurchaseOrderDetail_SelectedVendors")

                If SelectedClients Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

                End If

                If SelectedDivisions Is Nothing Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                Else

                    SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

                End If

                If SelectedProducts Is Nothing Then

                    SqlParameterProductList.Value = System.DBNull.Value

                Else

                    SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

                End If

                If SelectedVendors Is Nothing Then

                    SqlParameterVendorList.Value = System.DBNull.Value

                Else

                    SqlParameterVendorList.Value = Join(SelectedVendors.ToArray, ",")

                End If

                If ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.IncludeClosedPOs.ToString) IsNot Nothing Then

                    SqlParameterIncludeClosedPOs.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.IncludeClosedPOs.ToString)

                Else

                    SqlParameterIncludeClosedPOs.Value = System.DBNull.Value

                End If

                If ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.IncludeVoidedPOs.ToString) IsNot Nothing Then

                    SqlParameterIncludeVoidedPOs.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.IncludeVoidedPOs.ToString)

                Else

                    SqlParameterIncludeVoidedPOs.Value = System.DBNull.Value

                End If

                If ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.POStartDate.ToString) IsNot Nothing Then

                    SqlParameterPOStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.POStartDate.ToString)

                Else

                    SqlParameterPOStartDate.Value = System.DBNull.Value

                End If

                If ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.POEndDate.ToString) IsNot Nothing Then

                    SqlParameterPOEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.OpenPurchaseOrderDetailInitialCriteria.POEndDate.ToString)

                Else

                    SqlParameterPOEndDate.Value = System.DBNull.Value

                End If

                OpenPurchaseOrderDetails = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.OpenPurchaseOrderDetail)("exec dbo.advsp_po_job_ap_detail_dataset @begin_date, @end_date, @include_closed, @include_voided, @include_clientpos, @include_nonclientpos, @CLIENT_LIST, @DIVISION_LIST, @PRODUCT_LIST, @VENDOR_LIST",
                                                    SqlParameterPOStartDate, SqlParameterPOEndDate, SqlParameterIncludeClosedPOs, SqlParameterIncludeVoidedPOs, SqlParameterIncludeClientPOs, SqlParameterIncludeNonClientPOs, SqlParameterClientList, SqlParameterDivisionList, SqlParameterProductList, SqlParameterVendorList).ToList

            Catch ex As Exception
                OpenPurchaseOrderDetails = Nothing
            Finally
                LoadOpenPurchaseOrderDetail = OpenPurchaseOrderDetails
            End Try

        End Function
        Public Function LoadClientPLDetailReportData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ClientPLDetail)

            Dim ClientPLDetailReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ClientPLDetail) = Nothing

            Try

                Dim SqlParameterStartPeriod As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndPeriod As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterStandard As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeOffice As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeClient As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeDivision As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeProduct As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeType As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeSalesClass As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludePostPeriod As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeYear As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeCampaign As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeManualInvoices As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeGLEntries As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeBilledIncomeRecognized As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeCREntries As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeAE As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeProductUDF As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterCoopOption As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterHoursCost As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterFTEAllocation As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOverheadSet As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserId As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterExcludeNewBusiness As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDirectExpenseFromExpenseOperatingOnly As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterSelectedOffices As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing

                'Dim SqlParameterStartPeriod1 As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterEndPeriod1 As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterStartPeriod2 As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterEndPeriod2 As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterStartPeriod = New System.Data.SqlClient.SqlParameter("@StartPeriod", SqlDbType.VarChar)
                SqlParameterEndPeriod = New System.Data.SqlClient.SqlParameter("@EndPeriod", SqlDbType.VarChar)
                SqlParameterStandard = New System.Data.SqlClient.SqlParameter("@Standard", SqlDbType.Int)
                SqlParameterIncludeOffice = New System.Data.SqlClient.SqlParameter("@IncludeOffice", SqlDbType.Bit)
                SqlParameterIncludeClient = New System.Data.SqlClient.SqlParameter("@IncludeClient", SqlDbType.Bit)
                SqlParameterIncludeDivision = New System.Data.SqlClient.SqlParameter("@IncludeDivision", SqlDbType.Bit)
                SqlParameterIncludeProduct = New System.Data.SqlClient.SqlParameter("@IncludeProduct", SqlDbType.Bit)
                SqlParameterIncludeType = New System.Data.SqlClient.SqlParameter("@IncludeType", SqlDbType.Bit)
                SqlParameterIncludeSalesClass = New System.Data.SqlClient.SqlParameter("@IncludeSalesClass", SqlDbType.Bit)
                SqlParameterIncludePostPeriod = New System.Data.SqlClient.SqlParameter("@IncludePostPeriod", SqlDbType.Bit)
                SqlParameterIncludeYear = New System.Data.SqlClient.SqlParameter("@IncludeYear", SqlDbType.Bit)
                SqlParameterIncludeCampaign = New System.Data.SqlClient.SqlParameter("@IncludeCampaign", SqlDbType.Bit)
                SqlParameterIncludeAE = New System.Data.SqlClient.SqlParameter("@IncludeAE", SqlDbType.Bit)
                SqlParameterIncludeProductUDF = New System.Data.SqlClient.SqlParameter("@IncludeProductUDF", SqlDbType.Bit)
                SqlParameterIncludeManualInvoices = New System.Data.SqlClient.SqlParameter("@IncludeManualInvoices", SqlDbType.Bit)
                SqlParameterIncludeGLEntries = New System.Data.SqlClient.SqlParameter("@IncludeGLEntries", SqlDbType.Bit)
                SqlParameterIncludeBilledIncomeRecognized = New System.Data.SqlClient.SqlParameter("@IncludeBilledIncomeRec", SqlDbType.Bit)
                SqlParameterIncludeCREntries = New System.Data.SqlClient.SqlParameter("@IncludeCREntries", SqlDbType.Bit)
                SqlParameterCoopOption = New System.Data.SqlClient.SqlParameter("@CoopOption", SqlDbType.Int)
                SqlParameterHoursCost = New System.Data.SqlClient.SqlParameter("@HoursCost", SqlDbType.Int)
                SqlParameterFTEAllocation = New System.Data.SqlClient.SqlParameter("@FTEAllocation", SqlDbType.Int)
                SqlParameterOverheadSet = New System.Data.SqlClient.SqlParameter("@OverheadSet", SqlDbType.VarChar)
                SqlParameterUserId = New System.Data.SqlClient.SqlParameter("@UserId", SqlDbType.VarChar)
                SqlParameterExcludeNewBusiness = New System.Data.SqlClient.SqlParameter("@ExcludeNewBusiness", SqlDbType.Bit)
                SqlParameterDirectExpenseFromExpenseOperatingOnly = New System.Data.SqlClient.SqlParameter("@DirectExpenseOperatingOnly", SqlDbType.Bit)
                SqlParameterSelectedOffices = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)

                'SqlParameterStartPeriod1 = New System.Data.SqlClient.SqlParameter("@StartPeriod1", SqlDbType.VarChar)
                'SqlParameterEndPeriod1 = New System.Data.SqlClient.SqlParameter("@EndPeriod1", SqlDbType.VarChar)
                'SqlParameterStartPeriod2 = New System.Data.SqlClient.SqlParameter("@StartPeriod2", SqlDbType.VarChar)
                'SqlParameterEndPeriod2 = New System.Data.SqlClient.SqlParameter("@EndPeriod2", SqlDbType.VarChar)

                SqlParameterStartPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.StartingPostPeriodCode.ToString)
                SqlParameterEndPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.EndingPostPeriodCode.ToString)
                SqlParameterStandard.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.Type.ToString)
                SqlParameterIncludeOffice.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeOffice.ToString)
                SqlParameterIncludeClient.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeClient.ToString)
                SqlParameterIncludeDivision.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeDivision.ToString)
                SqlParameterIncludeProduct.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeProduct.ToString)
                SqlParameterIncludeType.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeType.ToString)
                SqlParameterIncludeSalesClass.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeSalesClass.ToString)
                SqlParameterIncludePostPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludePostPeriod.ToString)
                SqlParameterIncludeYear.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeYear.ToString)
                SqlParameterIncludeCampaign.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeCampaign.ToString)
                SqlParameterIncludeManualInvoices.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeManualInvoices.ToString)
                SqlParameterIncludeGLEntries.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeGLEntries.ToString)
                SqlParameterIncludeBilledIncomeRecognized.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeBilledIncomeRecognized.ToString)
                SqlParameterIncludeCREntries.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeCREntries.ToString)
                SqlParameterIncludeAE.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeAE.ToString)
                SqlParameterIncludeProductUDF.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.IncludeProductUDF.ToString)
                SqlParameterCoopOption.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.CoopOption.ToString)
                SqlParameterHoursCost.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.HoursCost.ToString)
                SqlParameterFTEAllocation.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.FTEAllocation.ToString)
                SqlParameterOverheadSet.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.OverheadSet.ToString)
                SqlParameterUserId.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.UserId.ToString)
                SqlParameterExcludeNewBusiness.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.ExcludeNewBusiness.ToString)
                SqlParameterDirectExpenseFromExpenseOperatingOnly.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.DirectExpenseFromExpenseOperatingOnly.ToString)

                'SqlParameterStartPeriod1.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.StartingPostPeriod1Code.ToString)
                'SqlParameterEndPeriod1.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.EndingPostPeriod1Code.ToString)
                'SqlParameterStartPeriod2.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.StartingPostPeriod2Code.ToString)
                'SqlParameterEndPeriod2.Value = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.EndingPostPeriod2Code.ToString)

                'If SqlParameterStartPeriod1.Value = Nothing Then
                '    SqlParameterStartPeriod1.Value = System.DBNull.Value
                'End If
                'If SqlParameterEndPeriod1.Value = Nothing Then
                '    SqlParameterEndPeriod1.Value = System.DBNull.Value
                'End If
                'If SqlParameterStartPeriod2.Value = Nothing Then
                '    SqlParameterStartPeriod2.Value = System.DBNull.Value
                'End If
                'If SqlParameterEndPeriod2.Value = Nothing Then
                '    SqlParameterEndPeriod2.Value = System.DBNull.Value
                'End If

                Dim SelectedOffices As Generic.List(Of String) = Nothing
                Dim SelectedClients As Generic.List(Of String) = Nothing
                Dim SelectedDivisions As Generic.List(Of String) = Nothing
                Dim SelectedProducts As Generic.List(Of String) = Nothing

                SelectedOffices = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedOffices.ToString)
                SelectedClients = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedClients.ToString)
                SelectedDivisions = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedDivisions.ToString)
                SelectedProducts = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedProducts.ToString)

                If SelectedOffices Is Nothing Then

                    SqlParameterSelectedOffices.Value = System.DBNull.Value

                ElseIf SelectedOffices.Count = 0 Then

                    SqlParameterSelectedOffices.Value = System.DBNull.Value

                Else

                    SqlParameterSelectedOffices.Value = Join(SelectedOffices.ToArray, ",")

                End If

                If SelectedClients Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                ElseIf SelectedClients.Count = 0 Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

                End If

                If SelectedDivisions Is Nothing Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                ElseIf SelectedDivisions.Count = 0 Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                Else

                    SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

                End If

                If SelectedProducts Is Nothing Then

                    SqlParameterProductList.Value = System.DBNull.Value

                ElseIf SelectedProducts.Count = 0 Then

                    SqlParameterProductList.Value = System.DBNull.Value

                Else

                    SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

                End If

                ClientPLDetailReports = ReportingDbContext.Database.SqlQuery(Of Database.Classes.ClientPLDetail)("EXEC dbo.usp_wv_Gross_Income_CPL_Detail @StartPeriod, @EndPeriod, @Standard, @IncludeOffice, @IncludeClient, @IncludeDivision, @IncludeProduct, @IncludeType, @IncludeSalesClass, @IncludePostPeriod, @IncludeYear, @IncludeCampaign, @IncludeAE, @IncludeProductUDF, @IncludeManualInvoices, @IncludeGLEntries, @IncludeBilledIncomeRec, @IncludeCREntries, @CoopOption, @HoursCost, @FTEAllocation, @OverheadSet, @UserId, @ExcludeNewBusiness, @DirectExpenseOperatingOnly, @OFFICE_LIST, @ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList",
                            SqlParameterStartPeriod, SqlParameterEndPeriod, SqlParameterStandard, SqlParameterIncludeOffice, SqlParameterIncludeClient, SqlParameterIncludeDivision,
                            SqlParameterIncludeProduct, SqlParameterIncludeType, SqlParameterIncludeSalesClass, SqlParameterIncludePostPeriod, SqlParameterIncludeYear,
                            SqlParameterIncludeCampaign, SqlParameterIncludeManualInvoices, SqlParameterIncludeGLEntries, SqlParameterIncludeBilledIncomeRecognized, SqlParameterIncludeCREntries,
                            SqlParameterIncludeAE, SqlParameterIncludeProductUDF, SqlParameterCoopOption, SqlParameterHoursCost, SqlParameterFTEAllocation, SqlParameterOverheadSet,
                            SqlParameterUserId, SqlParameterExcludeNewBusiness, SqlParameterDirectExpenseFromExpenseOperatingOnly, SqlParameterSelectedOffices, SqlParameterClientList,
                            SqlParameterDivisionList, SqlParameterProductList).ToList

                'ClientPLDetailReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.ClientPLDetail)(String.Format("EXEC [dbo].[usp_wv_Gross_Income_CPL_Detail] '{0}', '{1}', {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, '{21}', '{22}', {23}, {24}, {25}",
                '                                                                                                                                   ParameterDictionary("StartingPostPeriodCode"), ParameterDictionary("EndingPostPeriodCode"), ParameterDictionary("Type"), ParameterDictionary("IncludeOffice"), ParameterDictionary("IncludeClient"), ParameterDictionary("IncludeDivision"), ParameterDictionary("IncludeProduct"),
                '                                                                                                                                   ParameterDictionary("IncludeType"), ParameterDictionary("IncludeSalesClass"), ParameterDictionary("IncludePostPeriod"), ParameterDictionary("IncludeYear"), ParameterDictionary("IncludeCampaign"), ParameterDictionary("IncludeAE"),
                '                                                                                                                                   ParameterDictionary("IncludeProductUDF"), ParameterDictionary("IncludeManualInvoices"), ParameterDictionary("IncludeGLEntries"), ParameterDictionary("IncludeBilledIncomeRecognized"), ParameterDictionary("IncludeCREntries"), ParameterDictionary("CoopOption"),
                '                                                                                                                                   ParameterDictionary("HoursCost"), ParameterDictionary("FTEAllocation"), ParameterDictionary("OverheadSet"), ParameterDictionary("UserId"), ParameterDictionary("ExcludeNewBusiness"), ParameterDictionary("DirectExpenseFromExpenseOperatingOnly"),
                '                                                                                                                                   If(Offices = "", Nothing, Offices))).ToList

            Catch ex As Exception
                ClientPLDetailReports = Nothing
            Finally
                LoadClientPLDetailReportData = ClientPLDetailReports
            End Try

        End Function
        Public Function LoadMediaCurrentStatusReport(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusReport)

            'objects
            Dim MediaCurrentStatusReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusReport) = Nothing
            Dim SqlParameterOrderStatus As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeInternet As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeMagazine As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNewspaper As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeOutOfHome As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeRadio As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeTelevision As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterVendorList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMarketList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SelectedVendors As Generic.List(Of String) = Nothing
            Dim SelectedMarkets As Generic.List(Of String) = Nothing

            Dim SqlParameterBroadcastDates As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterRevisions As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SelectedOffices = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedOffices.ToString)
                SelectedClients = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedClients.ToString)
                SelectedDivisions = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedDivisions.ToString)
                SelectedProducts = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedProducts.ToString)
                SelectedVendors = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedVendors.ToString)
                SelectedMarkets = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedMarkets.ToString)

                SqlParameterOrderStatus = New System.Data.SqlClient.SqlParameter("@order_status", SqlDbType.VarChar)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@start_date", SqlDbType.DateTime)
                SqlParameterStartMonth = New System.Data.SqlClient.SqlParameter("@start_month", SqlDbType.Int)
                SqlParameterStartYear = New System.Data.SqlClient.SqlParameter("@start_year", SqlDbType.Int)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.DateTime)
                SqlParameterEndMonth = New System.Data.SqlClient.SqlParameter("@end_month", SqlDbType.Int)
                SqlParameterEndYear = New System.Data.SqlClient.SqlParameter("@end_year", SqlDbType.Int)
                SqlParameterIncludeInternet = New System.Data.SqlClient.SqlParameter("@include_internet", SqlDbType.Bit)
                SqlParameterIncludeMagazine = New System.Data.SqlClient.SqlParameter("@include_magazine", SqlDbType.Bit)
                SqlParameterIncludeNewspaper = New System.Data.SqlClient.SqlParameter("@include_newspaper", SqlDbType.Bit)
                SqlParameterIncludeOutOfHome = New System.Data.SqlClient.SqlParameter("@include_outofhome", SqlDbType.Bit)
                SqlParameterIncludeRadio = New System.Data.SqlClient.SqlParameter("@include_radio", SqlDbType.Bit)
                SqlParameterIncludeTelevision = New System.Data.SqlClient.SqlParameter("@include_television", SqlDbType.Bit)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OfficeCodeList", SqlDbType.VarChar)
                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterVendorList = New System.Data.SqlClient.SqlParameter("@VendorCodeList", SqlDbType.VarChar)
                SqlParameterMarketList = New System.Data.SqlClient.SqlParameter("@MarketCodeList", SqlDbType.VarChar)

                SqlParameterOrderStatus.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.OrderStatus.ToString)
                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartDate.ToString)
                SqlParameterStartMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartMonth.ToString)
                SqlParameterStartYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartYear.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndDate.ToString)
                SqlParameterEndMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndMonth.ToString)
                SqlParameterEndYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndYear.ToString)
                SqlParameterIncludeInternet.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeInternet.ToString)
                SqlParameterIncludeMagazine.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeMagazine.ToString)
                SqlParameterIncludeNewspaper.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeNewspaper.ToString)
                SqlParameterIncludeOutOfHome.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeOutOfHome.ToString)
                SqlParameterIncludeRadio.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeRadio.ToString)
                SqlParameterIncludeTelevision.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeTelevision.ToString)

                SqlParameterBroadcastDates = New System.Data.SqlClient.SqlParameter("@broadcast_dates", SqlDbType.Bit)
                SqlParameterBroadcastDates.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.BroadcastDates.ToString)

                SqlParameterRevisions = New System.Data.SqlClient.SqlParameter("@revisions", SqlDbType.Bit)
                SqlParameterRevisions.Value = 0

                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.VarChar)
                SqlParameterUserCode.Value = DbContext.UserCode

                If SelectedOffices Is Nothing Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                ElseIf SelectedOffices.Count = 0 Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                Else

                    SqlParameterOfficeList.Value = Join(SelectedOffices.ToArray, ",")

                End If

                If SelectedClients Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                ElseIf SelectedClients.Count = 0 Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

                End If

                If SelectedDivisions Is Nothing Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                ElseIf SelectedDivisions.Count = 0 Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                Else

                    SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

                End If

                If SelectedProducts Is Nothing Then

                    SqlParameterProductList.Value = System.DBNull.Value

                ElseIf SelectedProducts.Count = 0 Then

                    SqlParameterProductList.Value = System.DBNull.Value

                Else

                    SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

                End If

                If SelectedVendors Is Nothing Then

                    SqlParameterVendorList.Value = System.DBNull.Value

                ElseIf SelectedVendors.Count = 0 Then

                    SqlParameterVendorList.Value = System.DBNull.Value

                Else

                    SqlParameterVendorList.Value = Join(SelectedVendors.ToArray, ",")

                End If

                If SelectedMarkets Is Nothing Then

                    SqlParameterMarketList.Value = System.DBNull.Value

                ElseIf SelectedMarkets.Count = 0 Then

                    SqlParameterMarketList.Value = System.DBNull.Value

                Else

                    SqlParameterMarketList.Value = Join(SelectedMarkets.ToArray, ",")

                End If

                MediaCurrentStatusReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusReport)("exec dbo.advsp_media1_media_current_status1 @order_status, @start_date, @start_month, @start_year, @end_date, @end_month, @end_year, @include_internet, @include_magazine, @include_newspaper, @include_outofhome, @include_radio, @include_television, @OfficeCodeList, @ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @broadcast_dates, @revisions, @user_id, @VendorCodeList, @MarketCodeList",
                    SqlParameterOrderStatus, SqlParameterStartDate, SqlParameterStartMonth, SqlParameterStartYear, SqlParameterEndDate, SqlParameterEndMonth, SqlParameterEndYear,
                    SqlParameterIncludeInternet, SqlParameterIncludeMagazine, SqlParameterIncludeNewspaper, SqlParameterIncludeOutOfHome, SqlParameterIncludeRadio, SqlParameterIncludeTelevision,
                    SqlParameterOfficeList, SqlParameterClientList, SqlParameterDivisionList, SqlParameterProductList, SqlParameterBroadcastDates, SqlParameterRevisions, SqlParameterUserCode, SqlParameterVendorList, SqlParameterMarketList).ToList

            Catch ex As Exception
                LoadMediaCurrentStatusReport = Nothing
            Finally
                LoadMediaCurrentStatusReport = MediaCurrentStatusReports
            End Try

        End Function
        Public Function LoadMediaCurrentStatusSummaryReport(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusSummaryReport)

            'objects
            Dim MediaCurrentStatusSummaryReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusSummaryReport) = Nothing
            Dim SqlParameterOrderStatus As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeInternet As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeMagazine As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNewspaper As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeOutOfHome As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeRadio As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeTelevision As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterVendorList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMarketList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SqlParameterBroadcastDates As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOrderNumbers As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedVendors As Generic.List(Of String) = Nothing
            Dim SelectedMarkets As Generic.List(Of String) = Nothing

            Try

                SelectedOffices = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedOffices.ToString)
                SelectedClients = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedClients.ToString)
                SelectedDivisions = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedDivisions.ToString)
                SelectedProducts = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedProducts.ToString)
                SelectedVendors = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedVendors.ToString)
                SelectedMarkets = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedMarkets.ToString)

                SqlParameterOrderStatus = New System.Data.SqlClient.SqlParameter("@order_status", SqlDbType.VarChar)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@start_date", SqlDbType.DateTime)
                SqlParameterStartMonth = New System.Data.SqlClient.SqlParameter("@start_month", SqlDbType.Int)
                SqlParameterStartYear = New System.Data.SqlClient.SqlParameter("@start_year", SqlDbType.Int)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.DateTime)
                SqlParameterEndMonth = New System.Data.SqlClient.SqlParameter("@end_month", SqlDbType.Int)
                SqlParameterEndYear = New System.Data.SqlClient.SqlParameter("@end_year", SqlDbType.Int)
                SqlParameterIncludeInternet = New System.Data.SqlClient.SqlParameter("@include_internet", SqlDbType.Bit)
                SqlParameterIncludeMagazine = New System.Data.SqlClient.SqlParameter("@include_magazine", SqlDbType.Bit)
                SqlParameterIncludeNewspaper = New System.Data.SqlClient.SqlParameter("@include_newspaper", SqlDbType.Bit)
                SqlParameterIncludeOutOfHome = New System.Data.SqlClient.SqlParameter("@include_outofhome", SqlDbType.Bit)
                SqlParameterIncludeRadio = New System.Data.SqlClient.SqlParameter("@include_radio", SqlDbType.Bit)
                SqlParameterIncludeTelevision = New System.Data.SqlClient.SqlParameter("@include_television", SqlDbType.Bit)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OfficeCodeList", SqlDbType.VarChar)
                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterVendorList = New System.Data.SqlClient.SqlParameter("@VendorCodeList", SqlDbType.VarChar)
                SqlParameterMarketList = New System.Data.SqlClient.SqlParameter("@MarketCodeList", SqlDbType.VarChar)

                SqlParameterOrderStatus.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.OrderStatus.ToString)
                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartDate.ToString)
                SqlParameterStartMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartMonth.ToString)
                SqlParameterStartYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartYear.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndDate.ToString)
                SqlParameterEndMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndMonth.ToString)
                SqlParameterEndYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndYear.ToString)
                SqlParameterIncludeInternet.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeInternet.ToString)
                SqlParameterIncludeMagazine.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeMagazine.ToString)
                SqlParameterIncludeNewspaper.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeNewspaper.ToString)
                SqlParameterIncludeOutOfHome.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeOutOfHome.ToString)
                SqlParameterIncludeRadio.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeRadio.ToString)
                SqlParameterIncludeTelevision.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeTelevision.ToString)

                SqlParameterBroadcastDates = New System.Data.SqlClient.SqlParameter("@broadcast_dates", SqlDbType.Bit)
                SqlParameterBroadcastDates.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.BroadcastDates.ToString)

                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.VarChar)
                SqlParameterUserCode.Value = DbContext.UserCode

                SqlParameterOrderNumbers = New System.Data.SqlClient.SqlParameter("@order_numbers", SqlDbType.VarChar)
                SqlParameterOrderNumbers.Value = DBNull.Value

                If SelectedOffices Is Nothing Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                ElseIf SelectedOffices.Count = 0 Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                Else

                    SqlParameterOfficeList.Value = Join(SelectedOffices.ToArray, ",")

                End If

                If SelectedClients Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                ElseIf SelectedClients.Count = 0 Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

                End If

                If SelectedDivisions Is Nothing Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                ElseIf SelectedDivisions.Count = 0 Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                Else

                    SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

                End If

                If SelectedProducts Is Nothing Then

                    SqlParameterProductList.Value = System.DBNull.Value

                ElseIf SelectedProducts.Count = 0 Then

                    SqlParameterProductList.Value = System.DBNull.Value

                Else

                    SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

                End If

                If SelectedVendors Is Nothing Then

                    SqlParameterVendorList.Value = System.DBNull.Value

                ElseIf SelectedVendors.Count = 0 Then

                    SqlParameterVendorList.Value = System.DBNull.Value

                Else

                    SqlParameterVendorList.Value = Join(SelectedVendors.ToArray, ",")

                End If

                If SelectedMarkets Is Nothing Then

                    SqlParameterMarketList.Value = System.DBNull.Value

                ElseIf SelectedMarkets.Count = 0 Then

                    SqlParameterMarketList.Value = System.DBNull.Value

                Else

                    SqlParameterMarketList.Value = Join(SelectedMarkets.ToArray, ",")

                End If

                MediaCurrentStatusSummaryReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusSummaryReport)("exec dbo.advsp_media1_media_current_status1_sum @order_status, @start_date, @start_month, @start_year, @end_date, @end_month, @end_year, @include_internet, @include_magazine, @include_newspaper, @include_outofhome, @include_radio, @include_television, @OfficeCodeList, @ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @broadcast_dates, @order_numbers, @user_id, @VendorCodeList, @MarketCodeList",
                                                                                SqlParameterOrderStatus, SqlParameterStartDate, SqlParameterStartMonth, SqlParameterStartYear, SqlParameterEndDate, SqlParameterEndMonth, SqlParameterEndYear,
                                                                                SqlParameterIncludeInternet, SqlParameterIncludeMagazine, SqlParameterIncludeNewspaper, SqlParameterIncludeOutOfHome, SqlParameterIncludeRadio, SqlParameterIncludeTelevision, SqlParameterOfficeList, SqlParameterClientList, SqlParameterDivisionList, SqlParameterProductList, SqlParameterBroadcastDates, SqlParameterOrderNumbers, SqlParameterUserCode, SqlParameterVendorList, SqlParameterMarketList).ToList

            Catch ex As Exception
                LoadMediaCurrentStatusSummaryReport = Nothing
            Finally
                LoadMediaCurrentStatusSummaryReport = MediaCurrentStatusSummaryReports
            End Try

        End Function
        Public Function LoadVirtualCreditCardTransactionsEFS(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS)

            'objects
            Dim SqlParameterDateRangeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCardCTSList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeTransactionDetail As System.Data.SqlClient.SqlParameter = Nothing
            Dim VirtualCreditCardTransactionEFSDetails As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFSDetail) = Nothing
            Dim VirtualCreditCardTransactionEFSList As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS) = Nothing
            Dim VCCTransactionEFSList As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS) = Nothing
            Dim ClearedTransaction As String = Nothing
            Dim TimezoneOffset As AdvantageFramework.VCC.Classes.TimezoneOffset = Nothing

            Try

                SqlParameterDateRangeType = New System.Data.SqlClient.SqlParameter("@DateRangeType", SqlDbType.SmallInt)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.SmallDateTime)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.SmallDateTime)
                SqlParameterCardCTSList = New System.Data.SqlClient.SqlParameter("@CardCTSList", SqlDbType.VarChar)
                SqlParameterIncludeTransactionDetail = New System.Data.SqlClient.SqlParameter("@IncludeTransactionDetail", SqlDbType.Bit)

                SqlParameterDateRangeType.Value = ParameterDictionary(AdvantageFramework.Reporting.VirtualCreditCardTransactionsEFSInitialCriteria.DateRangeType.ToString)
                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.VirtualCreditCardTransactionsEFSInitialCriteria.StartDate.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.VirtualCreditCardTransactionsEFSInitialCriteria.EndDate.ToString)

                If ParameterDictionary(AdvantageFramework.Reporting.VirtualCreditCardTransactionsEFSInitialCriteria.DateRangeType.ToString) = 1 Then

                    VirtualCreditCardTransactionEFSDetails = ParameterDictionary(AdvantageFramework.Reporting.VirtualCreditCardTransactionsEFSInitialCriteria.VirtualCreditCardTransactionEFSDetails.ToString)

                    SqlParameterCardCTSList.Value = String.Join(",", VirtualCreditCardTransactionEFSDetails.Select(Function(Entity) Entity.CardCTS).Distinct.ToArray)

                Else

                    SqlParameterCardCTSList.Value = System.DBNull.Value

                End If

                SqlParameterIncludeTransactionDetail.Value = If(ParameterDictionary(AdvantageFramework.Reporting.VirtualCreditCardTransactionsEFSInitialCriteria.IncludeTransactionDetail.ToString), 1, 0)

                TimezoneOffset = AdvantageFramework.Database.Procedures.Generic.GetTimezoneOffset(DbContext)

                VirtualCreditCardTransactionEFSList = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS)("exec dbo.advsp_virtual_credit_card_transactions_efs_dataset @DateRangeType, @StartDate, @EndDate, @CardCTSList, @IncludeTransactionDetail",
                                                        SqlParameterDateRangeType, SqlParameterStartDate, SqlParameterEndDate, SqlParameterCardCTSList, SqlParameterIncludeTransactionDetail).ToList

                If ParameterDictionary(AdvantageFramework.Reporting.VirtualCreditCardTransactionsEFSInitialCriteria.DateRangeType.ToString) = 1 Then

                    ClearedTransaction = AdvantageFramework.EnumUtilities.GetNameAsWords(GetType(AdvantageFramework.Database.Entities.VCCAction), AdvantageFramework.Database.Entities.VCCAction.ClearedTransaction)

                    VCCTransactionEFSList = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS)

                    If ParameterDictionary(AdvantageFramework.Reporting.VirtualCreditCardTransactionsEFSInitialCriteria.IncludeTransactionDetail.ToString) = True Then

                        VCCTransactionEFSList.AddRange(From Detail In VirtualCreditCardTransactionEFSDetails
                                                       From Card In VirtualCreditCardTransactionEFSList.Where(Function(Entity) Entity.CardCTS = Detail.CardCTS).DefaultIfEmpty
                                                       Select New AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS(Detail, Card))

                    Else

                        VCCTransactionEFSList.AddRange(From Card In VirtualCreditCardTransactionEFSList
                                                       Select New AdvantageFramework.Reporting.Database.Classes.VirtualCreditCardTransactionEFS(Nothing, Card))

                    End If

                    VirtualCreditCardTransactionEFSList = VCCTransactionEFSList

                    For Each VirtualCreditCardTransactionEFS In VirtualCreditCardTransactionEFSList

                        Try

                            VirtualCreditCardTransactionEFS.TotalClearedInRange = VirtualCreditCardTransactionEFSDetails.Where(Function(Det) Det.CardCTS = VirtualCreditCardTransactionEFS.CardCTS AndAlso Det.Action = ClearedTransaction).Sum(Function(Det) Det.Amount)
                            VirtualCreditCardTransactionEFS.LastClearedDate = VirtualCreditCardTransactionEFSDetails.Where(Function(Det) Det.CardCTS = VirtualCreditCardTransactionEFS.CardCTS AndAlso Det.Action = ClearedTransaction).Max(Function(Det) Det.ProcessedDateTime)

                        Catch ex As Exception
                            VirtualCreditCardTransactionEFS.TotalClearedInRange = Nothing
                            VirtualCreditCardTransactionEFS.LastClearedDate = Nothing
                        End Try

                    Next

                End If

                For Each VirtualCreditCardTransactionEFS In VirtualCreditCardTransactionEFSList

                    VirtualCreditCardTransactionEFS.TimezoneOffset = TimezoneOffset

                Next

            Catch ex As Exception
                VirtualCreditCardTransactionEFSList = Nothing
            Finally
                LoadVirtualCreditCardTransactionsEFS = VirtualCreditCardTransactionEFSList
            End Try

        End Function
        Public Function LoadJobForecastReports(ByVal ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobForecastReport)

            'objects
            Dim JobForecastReportList As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobForecastReport) = Nothing

            Try


                JobForecastReportList = AdvantageFramework.Reporting.Database.Procedures.JobForecastReport.Load(ReportingDbContext, ParameterDictionary).ToList

                If ParameterDictionary(AdvantageFramework.Reporting.JobForecastParameters.BreakoutPostPeriods.ToString) = False Then

                    JobForecastReportList = (From JobForecastReport In JobForecastReportList
                                             Group JobForecastReport By JobForecastReport.JobForecastID, JobForecastReport.JobForecastRevisionID, JobForecastReport.JobForecastJobID Into JfRpt = Group
                                             Select New AdvantageFramework.Reporting.Database.Classes.JobForecastReport() _
                                                 With {.ID = JfRpt.First.ID,
                                                        .ClientCode = JfRpt.First.ClientCode,
                                                        .ClientName = JfRpt.First.ClientName,
                                                        .DivisionCode = JfRpt.First.DivisionCode,
                                                        .DivisionName = JfRpt.First.DivisionName,
                                                        .ProductCode = JfRpt.First.ProductCode,
                                                        .ProductName = JfRpt.First.ProductName,
                                                        .OfficeCode = JfRpt.First.OfficeCode,
                                                        .OfficeName = JfRpt.First.OfficeName,
                                                        .NewBusiness = JfRpt.First.NewBusiness,
                                                        .ProductUDV1 = JfRpt.First.ProductUDV1,
                                                        .ProductUDV2 = JfRpt.First.ProductUDV2,
                                                        .ProductUDV3 = JfRpt.First.ProductUDV3,
                                                        .ProductUDV4 = JfRpt.First.ProductUDV4,
                                                        .Industry = JfRpt.First.Industry,
                                                        .Specialty = JfRpt.First.Specialty,
                                                        .Region = JfRpt.First.Region,
                                                        .NumberOfEmployees = JfRpt.First.NumberOfEmployees,
                                                        .Source = JfRpt.First.Source,
                                                        .Probability = JfRpt.First.Probability,
                                                        .Rating = JfRpt.First.Rating,
                                                        .CurrentProvider = JfRpt.First.CurrentProvider,
                                                        .LeadDate = JfRpt.First.LeadDate,
                                                        .SoldDate = JfRpt.First.SoldDate,
                                                        .LostDate = JfRpt.First.LostDate,
                                                        .JobNumber = JfRpt.First.JobNumber,
                                                        .JobDescription = JfRpt.First.JobDescription,
                                                        .JobTemplateCode = JfRpt.First.JobTemplateCode,
                                                        .SalesClassCode = JfRpt.First.SalesClassCode,
                                                        .SalesClassDescription = JfRpt.First.SalesClassDescription,
                                                        .CampaignCode = JfRpt.First.CampaignCode,
                                                        .CampaignName = JfRpt.First.CampaignName,
                                                        .ClientReference = JfRpt.First.ClientReference,
                                                        .SalesClassFormatCode = JfRpt.First.SalesClassFormatCode,
                                                        .SalesClassFormatDescription = JfRpt.First.SalesClassFormatDescription,
                                                        .ComplexityCode = JfRpt.First.ComplexityCode,
                                                        .ComplexityDescription = JfRpt.First.ComplexityDescription,
                                                        .PromotionCode = JfRpt.First.PromotionCode,
                                                        .PromotionDescription = JfRpt.First.PromotionDescription,
                                                        .JobUDF1 = JfRpt.First.JobUDF1,
                                                        .JobUDF2 = JfRpt.First.JobUDF2,
                                                        .JobUDF3 = JfRpt.First.JobUDF3,
                                                        .JobUDF4 = JfRpt.First.JobUDF4,
                                                        .JobUDF5 = JfRpt.First.JobUDF5,
                                                        .JobCreateDate = JfRpt.First.JobCreateDate,
                                                        .JobDateOpened = JfRpt.First.JobDateOpened,
                                                        .AccountNumber = JfRpt.First.AccountNumber,
                                                        .JobComponentNumber = JfRpt.First.JobComponentNumber,
                                                        .JobComponent = JfRpt.First.JobComponent,
                                                        .JobComponentDescription = JfRpt.First.JobComponentDescription,
                                                        .AccountExecutiveCode = JfRpt.First.AccountExecutiveCode,
                                                        .AccountExecutive = JfRpt.First.AccountExecutive,
                                                        .AlertGroup = JfRpt.First.AlertGroup,
                                                        .ClientContactCode = JfRpt.First.ClientContactCode,
                                                        .ClientContact = JfRpt.First.ClientContact,
                                                        .JobTypeCode = JfRpt.First.JobTypeCode,
                                                        .JobTypeDescription = JfRpt.First.JobTypeDescription,
                                                        .DepartmentCode = JfRpt.First.DepartmentCode,
                                                        .DepartmentDescription = JfRpt.First.DepartmentDescription,
                                                        .ClientPO = JfRpt.First.ClientPO,
                                                        .AdNumber = JfRpt.First.AdNumber,
                                                        .AdNumberDescription = JfRpt.First.AdNumberDescription,
                                                        .MarketCode = JfRpt.First.MarketCode,
                                                        .MarketDescription = JfRpt.First.MarketDescription,
                                                        .Format = JfRpt.First.Format,
                                                        .JobComponentUDV1 = JfRpt.First.JobComponentUDV1,
                                                        .JobComponentUDV2 = JfRpt.First.JobComponentUDV2,
                                                        .JobComponentUDV3 = JfRpt.First.JobComponentUDV3,
                                                        .JobComponentUDV4 = JfRpt.First.JobComponentUDV4,
                                                        .JobComponentUDV5 = JfRpt.First.JobComponentUDV5,
                                                        .FiscalPeriodCode = JfRpt.First.FiscalPeriodCode,
                                                        .FiscalPeriodDescription = JfRpt.First.FiscalPeriodDescription,
                                                        .DateOpened = JfRpt.First.DateOpened,
                                                        .JobProcessControlNumber = JfRpt.First.JobProcessControlNumber,
                                                        .JobProcessControlDescription = JfRpt.First.JobProcessControlDescription,
                                                        .NonBillable = JfRpt.First.NonBillable,
                                                        .StatusCode = JfRpt.First.StatusCode,
                                                        .StatusDescription = JfRpt.First.StatusDescription,
                                                        .ManagerCode = JfRpt.First.ManagerCode,
                                                        .Manager = JfRpt.First.Manager,
                                                        .GutPercentComplete = JfRpt.First.GutPercentComplete,
                                                        .StartDate = JfRpt.First.StartDate,
                                                        .DueDate = JfRpt.First.DueDate,
                                                        .CompletedDate = JfRpt.First.CompletedDate,
                                                        .ForecastDescription = JfRpt.First.ForecastDescription,
                                                        .PostPeriodStart = JfRpt.First.PostPeriodStart,
                                                        .PostPeriodEnd = JfRpt.First.PostPeriodEnd,
                                                        .Budget = JfRpt.First.Budget,
                                                        .AssignedToOfficeCode = JfRpt.First.AssignedToOfficeCode,
                                                        .AssignedToOfficeName = JfRpt.First.AssignedToOfficeName,
                                                        .AssignedToUserCode = JfRpt.First.AssignedToUserCode,
                                                        .AssignedToUserName = JfRpt.First.AssignedToUserName,
                                                        .ForecastComment = JfRpt.First.ForecastComment,
                                                        .ForecastJobComment = JfRpt.First.ForecastJobComment,
                                                        .ForecastCreatedDate = JfRpt.First.ForecastCreatedDate,
                                                        .ForecastModifiedDate = JfRpt.First.ForecastModifiedDate,
                                                        .ForecastApprovedDate = JfRpt.First.ForecastApprovedDate,
                                                        .ApprovedRevisionNumber = JfRpt.First.ApprovedRevisionNumber,
                                                        .HighestRevisionNumber = JfRpt.First.HighestRevisionNumber,
                                                        .Approved = JfRpt.First.Approved,
                                                        .Forecast = JfRpt.First.Forecast,
                                                        .Actual = JfRpt.First.Actual,
                                                        .Variance = JfRpt.First.Variance,
                                                        .PostPeriod = Nothing,
                                                        .PostPeriodBillingAmount = Nothing,
                                                        .PostPeriodRevenueAmount = Nothing,
                                                        .TotalJobBillingAmount = JfRpt.First.TotalJobBillingAmount,
                                                        .TotalJobRevenueAmount = JfRpt.First.TotalJobRevenueAmount,
                                                        .ActualJobBillingAmount = JfRpt.First.ActualJobBillingAmount,
                                                        .ActualJobRevenueAmount = JfRpt.First.ActualJobRevenueAmount,
                                                        .TotalActualJobBillingAmount = JfRpt.First.TotalActualJobBillingAmount,
                                                        .TotalActualJobRevenueAmount = JfRpt.First.TotalActualJobRevenueAmount,
                                                        .TotalOpenPurchaseOrderBillableAmount = JfRpt.First.TotalOpenPurchaseOrderBillableAmount,
                                                        .TotalOpenPurchaseOrderRevenueAmount = JfRpt.First.TotalOpenPurchaseOrderRevenueAmount,
                                                        .EstimateNumber = JfRpt.First.EstimateNumber,
                                                        .EstimateComponentNumber = JfRpt.First.EstimateComponentNumber,
                                                        .ApprovedEstimateBillingAmount = JfRpt.First.ApprovedEstimateBillingAmount,
                                                        .ApprovedEstimateRevenueAmount = JfRpt.First.ApprovedEstimateRevenueAmount,
                                                        .JobForecastID = JfRpt.First.JobForecastID,
                                                        .JobForecastJobID = JfRpt.First.JobForecastJobID,
                                                        .JobForecastRevisionID = JfRpt.First.JobForecastRevisionID}).ToList

                End If

            Catch ex As Exception
                JobForecastReportList = Nothing
            Finally
                LoadJobForecastReports = JobForecastReportList
            End Try

        End Function
        Public Function LoadMediaSpecifications(ByVal _Session As AdvantageFramework.Security.Session) ' As Generic.List(Of AdvantageFramework.Database.Classes.EstimateForm)
            Dim DataTable As System.Data.DataTable = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Try

                    Using SqlCommand = DbContext.CreateCommand()

                        DataTable = New System.Data.DataTable

                        SqlCommand.CommandType = CommandType.StoredProcedure
                        SqlCommand.CommandText = "advsp_media_spec"

                        SqlCommand.Parameters.AddWithValue("date_from", CDate(Now.Date.ToShortDateString))
                        SqlCommand.Parameters.AddWithValue("date_to", CDate(Now.Date.ToShortDateString))
                        SqlCommand.Parameters.AddWithValue("date_type", CShort(1))
                        If 1 = 1 Then
                            SqlCommand.Parameters.AddWithValue("status", "Open")
                        Else
                            SqlCommand.Parameters.AddWithValue("status", "")
                        End If
                        SqlCommand.Parameters.AddWithValue("AcceptedOnly", 0)
                        SqlCommand.Parameters.AddWithValue("UserID", _Session.UserCode)

                        SqlCommand.Connection.Open()

                        Try

                            DataTable.Load(SqlCommand.ExecuteReader)

                        Catch ex As Exception
                            DataTable = Nothing
                        Finally
                            SqlCommand.Connection.Close()
                        End Try

                    End Using

                Catch ex As Exception

                End Try

                Return DataTable

            End Using

        End Function
        Public Function LoadMediaSpecificationsByDestination(ByVal _Session As AdvantageFramework.Security.Session) ' As Generic.List(Of AdvantageFramework.Database.Classes.EstimateForm)
            Dim DataTable As System.Data.DataTable = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Try

                    Using SqlCommand = DbContext.CreateCommand()

                        DataTable = New System.Data.DataTable

                        SqlCommand.CommandType = CommandType.StoredProcedure
                        SqlCommand.CommandText = "advsp_media_spec_by_destination_arw"

                        SqlCommand.Parameters.AddWithValue("date_from", CDate(Now.Date.ToShortDateString))
                        SqlCommand.Parameters.AddWithValue("date_to", CDate(Now.Date.ToShortDateString))
                        SqlCommand.Parameters.AddWithValue("date_type", CShort(1))
                        If 1 = 1 Then
                            SqlCommand.Parameters.AddWithValue("status", "Open")
                        Else
                            SqlCommand.Parameters.AddWithValue("status", "")
                        End If
                        SqlCommand.Parameters.AddWithValue("AcceptedOnly", 0)
                        SqlCommand.Parameters.AddWithValue("UserID", _Session.UserCode)

                        SqlCommand.Connection.Open()

                        Try

                            DataTable.Load(SqlCommand.ExecuteReader)

                        Catch ex As Exception
                            DataTable = Nothing
                        Finally
                            SqlCommand.Connection.Close()
                        End Try

                    End Using

                Catch ex As Exception

                End Try

                Return DataTable

            End Using

        End Function
        Public Function LoadEmployeeUtilizationReport(ByVal _Session As AdvantageFramework.Security.Session) ' As Generic.List(Of AdvantageFramework.Database.Classes.EstimateForm)
            Dim DataTable As System.Data.DataTable = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Try

                    Using SqlCommand = DbContext.CreateCommand()

                        DataTable = New System.Data.DataTable

                        SqlCommand.CommandType = CommandType.StoredProcedure
                        SqlCommand.CommandText = "advsp_employee_time_util_report"

                        SqlCommand.Parameters.AddWithValue("StartDate", CDate(Now.Date.ToShortDateString))
                        SqlCommand.Parameters.AddWithValue("EndDate", CDate(Now.Date.ToShortDateString))
                        SqlCommand.Parameters.AddWithValue("UserID", _Session.UserCode)
                        SqlCommand.Parameters.AddWithValue("Groupby", "emp")
                        SqlCommand.Parameters.AddWithValue("LimitWIP", False)
                        SqlCommand.Parameters.AddWithValue("ARW", 1)
                        SqlCommand.Parameters.AddWithValue("UseType", 1)

                        SqlCommand.Connection.Open()

                        Try

                            DataTable.Load(SqlCommand.ExecuteReader)

                        Catch ex As Exception
                            DataTable = Nothing
                        Finally
                            SqlCommand.Connection.Close()
                        End Try

                    End Using

                Catch ex As Exception

                End Try

                Return DataTable

            End Using

        End Function
        Public Function LoadMediaSpecificationsData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object), ByVal _Session As AdvantageFramework.Security.Session)
            Dim DataTable As System.Data.DataTable = Nothing
            Dim MediaSpecs As Generic.List(Of String) = Nothing
            Dim status As String = ""
            Dim AcceptedOnly As Integer = 0
            Try

                Using SqlCommand = DbContext.CreateCommand()

                    DataTable = New System.Data.DataTable

                    SqlCommand.CommandType = CommandType.StoredProcedure
                    SqlCommand.CommandText = "advsp_media_spec"

                    SqlCommand.Parameters.AddWithValue("date_from", CDate(ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.FromDate.ToString)))
                    SqlCommand.Parameters.AddWithValue("date_to", CDate(ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.ToDate.ToString)))
                    SqlCommand.Parameters.AddWithValue("date_type", CShort(ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.DateType.ToString)))
                    If ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.Status.ToString) = 1 Then
                        status = "Open"
                        SqlCommand.Parameters.AddWithValue("status", "Open")
                    Else
                        status = ""
                        SqlCommand.Parameters.AddWithValue("status", "")
                    End If
                    SqlCommand.Parameters.AddWithValue("AcceptedOnly", ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.AcceptedOnly.ToString))
                    SqlCommand.Parameters.AddWithValue("UserID", _Session.UserCode)


                    If ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.AcceptedOnly.ToString) = False Then
                        AcceptedOnly = 0
                    Else
                        AcceptedOnly = 1
                    End If

                    SqlCommand.Connection.Open()

                    Try
                        DataTable.Load(SqlCommand.ExecuteReader)

                    Catch ex As Exception
                        DataTable = Nothing
                    Finally
                        SqlCommand.Connection.Close()
                    End Try

                End Using

            Catch ex As Exception

            End Try

            Return DataTable

        End Function
        Public Function LoadMediaSpecificationsByDestinationData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object), ByVal _Session As AdvantageFramework.Security.Session)
            Dim DataTable As System.Data.DataTable = Nothing
            Dim MediaSpecs As Generic.List(Of String) = Nothing
            Dim status As String = ""
            Dim AcceptedOnly As Integer = 0
            Try

                Using SqlCommand = DbContext.CreateCommand()

                    DataTable = New System.Data.DataTable

                    SqlCommand.CommandType = CommandType.StoredProcedure
                    SqlCommand.CommandText = "advsp_media_spec_by_destination_arw"

                    SqlCommand.Parameters.AddWithValue("date_from", CDate(ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.FromDate.ToString)))
                    SqlCommand.Parameters.AddWithValue("date_to", CDate(ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.ToDate.ToString)))
                    SqlCommand.Parameters.AddWithValue("date_type", CShort(ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.DateType.ToString)))
                    If ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.Status.ToString) = 1 Then
                        status = "Open"
                        SqlCommand.Parameters.AddWithValue("status", "Open")
                    Else
                        status = ""
                        SqlCommand.Parameters.AddWithValue("status", "")
                    End If
                    SqlCommand.Parameters.AddWithValue("AcceptedOnly", ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.AcceptedOnly.ToString))
                    SqlCommand.Parameters.AddWithValue("UserID", _Session.UserCode)


                    If ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.AcceptedOnly.ToString) = False Then
                        AcceptedOnly = 0
                    Else
                        AcceptedOnly = 1
                    End If

                    SqlCommand.Connection.Open()

                    Try
                        DataTable.Load(SqlCommand.ExecuteReader)

                    Catch ex As Exception
                        DataTable = Nothing
                    Finally
                        SqlCommand.Connection.Close()
                    End Try

                End Using

            Catch ex As Exception

            End Try

            Return DataTable

        End Function

        Public Function LoadEmployeeUtilizationReportData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object), ByVal _Session As AdvantageFramework.Security.Session)
            Dim DataTable As System.Data.DataTable = Nothing
            Dim MediaSpecs As Generic.List(Of String) = Nothing
            Dim status As String = ""
            Dim AcceptedOnly As Integer = 0
            Try

                Using SqlCommand = DbContext.CreateCommand()

                    DataTable = New System.Data.DataTable

                    SqlCommand.CommandType = CommandType.StoredProcedure
                    SqlCommand.CommandText = "advsp_employee_time_util_report"
                    SqlCommand.CommandTimeout = 0

                    SqlCommand.Parameters.AddWithValue("StartDate", CDate(ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.StartDate.ToString)))
                    SqlCommand.Parameters.AddWithValue("EndDate", CDate(ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.EndDate.ToString)))
                    SqlCommand.Parameters.AddWithValue("UserID", _Session.UserCode)
                    SqlCommand.Parameters.AddWithValue("Groupby", ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.Groupby.ToString))
                    SqlCommand.Parameters.AddWithValue("LimitWIP", ParameterDictionary(AdvantageFramework.Reporting.EmployeeUtilizationInitialParameters.LimitWIP.ToString))
                    SqlCommand.Parameters.AddWithValue("ARW", 0)
                    SqlCommand.Parameters.AddWithValue("UseType", 1)
                    'If ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.Status.ToString) = 1 Then
                    '    status = "Open"
                    '    SqlCommand.Parameters.AddWithValue("status", "Open")
                    'Else
                    '    status = ""
                    '    SqlCommand.Parameters.AddWithValue("status", "")
                    'End If
                    'SqlCommand.Parameters.AddWithValue("AcceptedOnly", ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.AcceptedOnly.ToString))



                    'If ParameterDictionary(AdvantageFramework.Reporting.MediaSpecificationParameters.AcceptedOnly.ToString) = False Then
                    '    AcceptedOnly = 0
                    'Else
                    '    AcceptedOnly = 1
                    'End If

                    SqlCommand.Connection.Open()

                    Try
                        DataTable.Load(SqlCommand.ExecuteReader)

                    Catch ex As Exception
                        DataTable = Nothing
                    Finally
                        SqlCommand.Connection.Close()
                    End Try

                End Using

            Catch ex As Exception

            End Try

            Return DataTable

        End Function
        Public Function LoadMediaBroadcastWorksheetPreBuyData(DbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport)

            'objects
            Dim Session As AdvantageFramework.Security.Session = Nothing
            Dim MediaBroadcastWorksheetMarketBookList As Generic.List(Of DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook) = Nothing
            Dim MediaBroadcastWorksheetIDs As IEnumerable(Of Integer) = Nothing
            Dim DemographicID As Nullable(Of Integer) = Nothing
            Dim SqlParameterMediaBroadcastWorksheetID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaBroadcastWorksheetMarkets As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUsePrimaryRating As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUseImpressions As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastStartYearMonth As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastEndYearMonth As SqlClient.SqlParameter = Nothing
            Dim AllMediaBroadcastWorksheetPreBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport) = Nothing
            Dim MediaBroadcastWorksheetPreBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport) = Nothing
            Dim MediaBroadcastWorksheetController As AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController = Nothing
            Dim MediaBroadcastWorksheetPreBuyReport As AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport = Nothing
            Dim NielsenTVStation As AdvantageFramework.Nielsen.Database.Entities.NielsenTVStation = Nothing
            Dim NCCTVSyscode As AdvantageFramework.Nielsen.Database.Entities.NCCTVSyscode = Nothing
            Dim MediaBroadcastWorksheetMarketBook As DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook = Nothing
            Dim NielsenTVBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing
            Dim NielsenTVBookEntity As AdvantageFramework.Nielsen.Database.Entities.NielsenTVBook = Nothing
            Dim ComscoreTVBook As AdvantageFramework.Database.Entities.ComscoreTVBook = Nothing
            Dim BookIDs() As String = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailIDs As IEnumerable(Of Integer) = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim NielsenMarketNumber As Integer = Nothing
            Dim FoundNCCTVSyscodeID As Nullable(Of Integer) = Nothing
            Dim UsePrimary As Boolean = True
            Dim ComscoreTVStation As AdvantageFramework.Database.Entities.ComscoreTVStation = Nothing
            Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim ShareHPUTBook As AdvantageFramework.DTO.Media.ShareHPUTBook = Nothing
            Dim WorksheetMarketVendors As Generic.List(Of AdvantageFramework.DTO.Reporting.WorksheetMarketVendor) = Nothing
            Dim CDMAMediaBroadcastWorksheetPreBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport) = Nothing
            Dim DMAMediaBroadcastWorksheetPreBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport) = Nothing
            Dim OldComscoreMarketNumber As Integer = 0
            Dim AdjustmentFactor As Decimal = 0
            Dim CDMADemoUE As Decimal = 0
            Dim Adults18PlusTVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim Adults18PlusTVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing
            Dim HHUEDemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim ComScoreCDMAs As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.ComScoreCDMA) = Nothing
            Dim Books As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim Market As AdvantageFramework.Database.Entities.Market = Nothing
            Dim IsAgencyASP As Boolean = False
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim NPRStation As AdvantageFramework.Database.Entities.NPRStation = Nothing

            Try

                Session = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.Session.ToString)

                MediaBroadcastWorksheetMarketBookList = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.MediaBroadcastWorksheetMarketBooks.ToString)
                WorksheetMarketVendors = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.WorksheetMarketVendors.ToString)

                MediaBroadcastWorksheetIDs = (From Entity In MediaBroadcastWorksheetMarketBookList
                                              Select Entity.MediaBroadcastWorksheetID).Distinct.ToArray

                AllMediaBroadcastWorksheetPreBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport)

                IsAgencyASP = AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext)

                For Each MediaBroadcastWorksheetID In MediaBroadcastWorksheetIDs

                    MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).First

                    If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo = True Then

                        If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value

                        End If

                        UsePrimary = False

                    End If

                    SqlParameterMediaBroadcastWorksheetID = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_ID", SqlDbType.Int)
                    SqlParameterMediaBroadcastWorksheetMarkets = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_MARKETS", SqlDbType.VarChar)
                    SqlParameterMediaDemoID = New SqlClient.SqlParameter("@MEDIA_DEMO_ID", SqlDbType.Int)
                    SqlParameterUsePrimaryRating = New SqlClient.SqlParameter("@USE_PRIMARY_RATING", SqlDbType.Bit)
                    SqlParameterUseImpressions = New SqlClient.SqlParameter("@USE_IMPRESSIONS", SqlDbType.Bit)
                    SqlParameterBroadcastStartYearMonth = New SqlClient.SqlParameter("@BROADCAST_START_DATE", SqlDbType.Date)
                    SqlParameterBroadcastEndYearMonth = New SqlClient.SqlParameter("@BROADCAST_END_DATE", SqlDbType.Date)

                    SqlParameterMediaBroadcastWorksheetID.Value = MediaBroadcastWorksheetID
                    SqlParameterMediaBroadcastWorksheetMarkets.Value = String.Join(",", MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).Select(Function(MB) MB.MediaBroadcastWorksheetMarketID).ToArray)
                    SqlParameterMediaDemoID.Value = If(DemographicID.HasValue, DemographicID.Value, System.DBNull.Value)
                    SqlParameterUsePrimaryRating.Value = UsePrimary
                    SqlParameterUseImpressions.value = MediaBroadcastWorksheetMarketBook.UseImpressions
                    SqlParameterBroadcastStartYearMonth.Value = MediaBroadcastWorksheetMarketBook.StartDate
                    SqlParameterBroadcastEndYearMonth.Value = MediaBroadcastWorksheetMarketBook.EndDate

                    AllMediaBroadcastWorksheetPreBuyReports.AddRange(DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport)("exec advsp_media_broadcast_worksheet_prebuy_report @MEDIA_BROADCAST_WORKSHEET_ID, @MEDIA_BROADCAST_WORKSHEET_MARKETS, @MEDIA_DEMO_ID, @USE_PRIMARY_RATING, @USE_IMPRESSIONS, @BROADCAST_START_DATE, @BROADCAST_END_DATE",
                        SqlParameterMediaBroadcastWorksheetID, SqlParameterMediaBroadcastWorksheetMarkets, SqlParameterMediaDemoID, SqlParameterUsePrimaryRating, SqlParameterUseImpressions, SqlParameterBroadcastStartYearMonth, SqlParameterBroadcastEndYearMonth).ToList)

                Next

                MediaBroadcastWorksheetPreBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPreBuyReport)

                If AllMediaBroadcastWorksheetPreBuyReports IsNot Nothing AndAlso AllMediaBroadcastWorksheetPreBuyReports.Count > 0 Then

                    If WorksheetMarketVendors IsNot Nothing AndAlso WorksheetMarketVendors.Count > 0 Then

                        For Each WorksheetMarketVendor In WorksheetMarketVendors

                            For Each MediaBroadcastWorksheetPreBuyReport In AllMediaBroadcastWorksheetPreBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketVendor.MediaBroadcastWorksheetMarketID AndAlso
                                                                                                                                           Entity.VendorCode = WorksheetMarketVendor.VendorCode).ToList

                                MediaBroadcastWorksheetPreBuyReports.Add(MediaBroadcastWorksheetPreBuyReport)

                            Next

                        Next

                    End If

                End If

                If MediaBroadcastWorksheetPreBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPreBuyReports.Count > 0 Then

                    MediaBroadcastWorksheetController = New AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController(Session)

                    For Each MediaBroadcastWorksheetPreBuyReport In MediaBroadcastWorksheetPreBuyReports

                        MediaBroadcastWorksheetPreBuyReport.StationName = MediaBroadcastWorksheetPreBuyReport.VendorName

                        MediaBroadcastWorksheetMarketBook = (From Entity In MediaBroadcastWorksheetMarketBookList
                                                             Where Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetPreBuyReport.MediaBroadcastWorksheetMarketID
                                                             Select Entity).FirstOrDefault

                        If MediaBroadcastWorksheetMarketBook IsNot Nothing AndAlso MediaBroadcastWorksheetMarketBook.ShareBookID > 0 Then

                            If MediaBroadcastWorksheetPreBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen AndAlso Session.IsNielsenSetup Then

                                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                    NielsenTVBookEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenTVBook.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarketBook.ShareBookID)

                                    If NielsenTVBookEntity IsNot Nothing Then

                                        NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(NielsenTVBookEntity)

                                        If NielsenTVBook IsNot Nothing Then

                                            MediaBroadcastWorksheetPreBuyReport.PreBuyShareBook = NielsenTVBook.Description

                                        End If

                                    End If

                                End Using

                            ElseIf MediaBroadcastWorksheetPreBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore AndAlso Session.IsComscoreSetup Then

                                ComscoreTVBook = AdvantageFramework.Database.Procedures.ComscoreTVBook.LoadByID(DbContext, MediaBroadcastWorksheetMarketBook.ShareBookID)

                                If ComscoreTVBook IsNot Nothing Then

                                    NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(ComscoreTVBook)

                                    If NielsenTVBook IsNot Nothing Then

                                        MediaBroadcastWorksheetPreBuyReport.PreBuyShareBook = NielsenTVBook.Description

                                    End If

                                End If

                            End If

                        End If

                        If MediaBroadcastWorksheetPreBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico AndAlso Session.IsNielsenPuertoRicoSetup Then

                            MediaBroadcastWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketBook.MediaBroadcastWorksheetMarketID)

                            If MediaBroadcastWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarket.PeriodStart.HasValue AndAlso MediaBroadcastWorksheetMarket.PeriodEnd.HasValue Then

                                MediaBroadcastWorksheetPreBuyReport.SchedulePeriod = MediaBroadcastWorksheetMarket.PeriodStart.Value.ToShortDateString & "-" & MediaBroadcastWorksheetMarket.PeriodEnd.Value.ToShortDateString

                            End If

                            If MediaBroadcastWorksheetMarketBook.PeriodStart.HasValue AndAlso MediaBroadcastWorksheetMarketBook.PeriodEnd.HasValue Then

                                MediaBroadcastWorksheetPreBuyReport.PreBuyPeriod = MediaBroadcastWorksheetMarketBook.PeriodStart.Value.ToShortDateString & "-" & MediaBroadcastWorksheetMarketBook.PeriodEnd.Value.ToShortDateString

                            End If

                        End If

                        If MediaBroadcastWorksheetMarketBook IsNot Nothing AndAlso MediaBroadcastWorksheetMarketBook.HPUTBookID.HasValue AndAlso MediaBroadcastWorksheetMarketBook.HPUTBookID.Value > 0 Then

                            If MediaBroadcastWorksheetPreBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen AndAlso Session.IsNielsenSetup Then

                                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                    NielsenTVBookEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenTVBook.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarketBook.HPUTBookID.Value)

                                    If NielsenTVBookEntity IsNot Nothing Then

                                        NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(NielsenTVBookEntity)

                                        If NielsenTVBook IsNot Nothing Then

                                            MediaBroadcastWorksheetPreBuyReport.PreBuyHPUTBook = NielsenTVBook.Description

                                        End If

                                    End If

                                End Using

                            ElseIf MediaBroadcastWorksheetPreBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore AndAlso Session.IsComscoreSetup Then

                                ComscoreTVBook = AdvantageFramework.Database.Procedures.ComscoreTVBook.LoadByID(DbContext, MediaBroadcastWorksheetMarketBook.HPUTBookID.Value)

                                If ComscoreTVBook IsNot Nothing Then

                                    NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(ComscoreTVBook)

                                    If NielsenTVBook IsNot Nothing Then

                                        MediaBroadcastWorksheetPreBuyReport.PreBuyHPUTBook = NielsenTVBook.Description

                                    End If

                                End If

                            End If

                        End If

                        If MediaBroadcastWorksheetPreBuyReport.ScheduleShareBookID.HasValue Then

                            If MediaBroadcastWorksheetPreBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen AndAlso Session.IsNielsenSetup Then

                                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                    NielsenTVBookEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenTVBook.LoadByID(NielsenDbContext, MediaBroadcastWorksheetPreBuyReport.ScheduleShareBookID.Value)

                                    If NielsenTVBookEntity IsNot Nothing Then

                                        NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(NielsenTVBookEntity)

                                        If NielsenTVBook IsNot Nothing Then

                                            MediaBroadcastWorksheetPreBuyReport.ScheduleShareBook = NielsenTVBook.Description

                                        End If

                                    End If

                                End Using

                            ElseIf MediaBroadcastWorksheetPreBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore AndAlso Session.IsComscoreSetup Then

                                ComscoreTVBook = AdvantageFramework.Database.Procedures.ComscoreTVBook.LoadByID(DbContext, MediaBroadcastWorksheetPreBuyReport.ScheduleShareBookID.Value)

                                If ComscoreTVBook IsNot Nothing Then

                                    NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(ComscoreTVBook)

                                    If NielsenTVBook IsNot Nothing Then

                                        MediaBroadcastWorksheetPreBuyReport.ScheduleShareBook = NielsenTVBook.Description

                                    End If

                                End If

                            End If

                        End If

                        If MediaBroadcastWorksheetPreBuyReport.ScheduleHPUTBookID.HasValue Then

                            If MediaBroadcastWorksheetPreBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen AndAlso Session.IsNielsenSetup Then

                                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                    NielsenTVBookEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenTVBook.LoadByID(NielsenDbContext, MediaBroadcastWorksheetPreBuyReport.ScheduleHPUTBookID.HasValue)

                                    If NielsenTVBookEntity IsNot Nothing Then

                                        NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(NielsenTVBookEntity)

                                        If NielsenTVBook IsNot Nothing Then

                                            MediaBroadcastWorksheetPreBuyReport.ScheduleHPUTBook = NielsenTVBook.Description

                                        End If

                                    End If

                                End Using

                            ElseIf MediaBroadcastWorksheetPreBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore AndAlso Session.IsComscoreSetup Then

                                ComscoreTVBook = AdvantageFramework.Database.Procedures.ComscoreTVBook.LoadByID(DbContext, MediaBroadcastWorksheetPreBuyReport.ScheduleHPUTBookID.Value)

                                If ComscoreTVBook IsNot Nothing Then

                                    NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(ComscoreTVBook)

                                    If NielsenTVBook IsNot Nothing Then

                                        MediaBroadcastWorksheetPreBuyReport.ScheduleHPUTBook = NielsenTVBook.Description

                                    End If

                                End If

                            End If

                        End If

                    Next

                    If MediaBroadcastWorksheetPreBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPreBuyReports.Any(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen) AndAlso Session.IsNielsenSetup Then

                        For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetPreBuyReports.Where(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen).Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                            MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First

                            BookIDs = New String() {MediaBroadcastWorksheetMarketBook.ShareBookID.ToString}

                            If MediaBroadcastWorksheetMarketBook.HPUTBookID.HasValue AndAlso MediaBroadcastWorksheetMarketBook.HPUTBookID.Value > 0 Then

                                HPUTBookIDs = New String() {MediaBroadcastWorksheetMarketBook.HPUTBookID.Value.ToString}

                            Else

                                HPUTBookIDs = New String() {}

                            End If

                            If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo Then

                                If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            Else

                                If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            End If

                            If MediaDemographic IsNot Nothing Then

                                DemographicID = MediaDemographic.ID

                                MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                            Else

                                DemographicID = 0

                                MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                            End If

                            MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = DemographicID).ToList
                                                    Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                  .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                            NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber

                            CDMAMediaBroadcastWorksheetPreBuyReports = MediaBroadcastWorksheetPreBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso Entity.GeographyName = "CDMA").ToList

                            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Session.UserCode)

                                NielsenDbContext.Database.Connection.Open()

                                For Each VendorCode In (From Entity In CDMAMediaBroadcastWorksheetPreBuyReports
                                                        Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                              Entity.NielsenTVStationCode.HasValue AndAlso
                                                              Entity.NielsenTVStationCode <> 0
                                                        Select CStr(Entity.VendorCode)).Distinct.ToArray

                                    StationCodes = (From Entity In CDMAMediaBroadcastWorksheetPreBuyReports
                                                    Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                          Entity.NielsenTVStationCode.HasValue AndAlso
                                                          Entity.NielsenTVStationCode <> 0 AndAlso
                                                          Entity.VendorCode = VendorCode
                                                    Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                                    For Each StationCode In StationCodes

                                        MediaBroadcastWorksheetPreBuyReport = (From Entity In CDMAMediaBroadcastWorksheetPreBuyReports
                                                                               Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                     Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                     Entity.VendorCode = VendorCode
                                                                               Select Entity).FirstOrDefault

                                        If MediaBroadcastWorksheetPreBuyReport IsNot Nothing AndAlso MediaBroadcastWorksheetPreBuyReport.NCCTVSyscodeID.HasValue Then

                                            MediaBroadcastWorksheetMarketDetailIDs = (From Entity In CDMAMediaBroadcastWorksheetPreBuyReports
                                                                                      Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                            Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                            Entity.VendorCode = VendorCode
                                                                                      Select Entity.MediaBroadcastWorksheetMarketDetailID).Distinct.ToArray

                                            MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                            MediaSpotTVResearchDaytimeTypes.AddRange(From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketDetailIDs(DbContext, MediaBroadcastWorksheetMarketDetailIDs).ToList
                                                                                     Select New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(Entity))

                                            FoundNCCTVSyscodeID = (From Entity In CDMAMediaBroadcastWorksheetPreBuyReports
                                                                   Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                         Entity.NielsenTVStationCode = StationCode AndAlso
                                                                         Entity.VendorCode = VendorCode
                                                                   Select Entity.NCCTVSyscodeID).FirstOrDefault

                                            If FoundNCCTVSyscodeID.HasValue Then

                                                TVWorksheetRatingAndShareDataList = MediaBroadcastWorksheetController.GetNielsenTVCDMARatingAndShareData(NielsenDbContext, NielsenMarketNumber, BookIDs, HPUTBookIDs,
                                                                                                                                                         MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode},
                                                                                                                                                         MediaSpotTVResearchDaytimeTypes,
                                                                                                                                                         FoundNCCTVSyscodeID.Value, IsAgencyASP)

                                                For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                    MediaBroadcastWorksheetPreBuyReport = (From Entity In CDMAMediaBroadcastWorksheetPreBuyReports
                                                                                           Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                 Entity.NielsenTVStationCode = TVWorksheetRatingAndShareData.StationCode AndAlso
                                                                                                 Entity.MediaBroadcastWorksheetMarketDetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID AndAlso
                                                                                                 Entity.VendorCode = VendorCode).SingleOrDefault

                                                    If MediaBroadcastWorksheetPreBuyReport IsNot Nothing Then

                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                            MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                        Else

                                                            MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                        End If

                                                    End If

                                                Next

                                            End If

                                        End If

                                    Next

                                Next

                                DMAMediaBroadcastWorksheetPreBuyReports = MediaBroadcastWorksheetPreBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso Entity.GeographyName = "DMA").ToList

                                For Each VendorCode In (From Entity In DMAMediaBroadcastWorksheetPreBuyReports
                                                        Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                              Entity.NielsenTVStationCode.HasValue AndAlso
                                                              Entity.NielsenTVStationCode <> 0
                                                        Select CStr(Entity.VendorCode)).Distinct.ToArray

                                    StationCodes = (From Entity In DMAMediaBroadcastWorksheetPreBuyReports
                                                    Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                          Entity.NielsenTVStationCode.HasValue AndAlso
                                                          Entity.VendorCode = VendorCode
                                                    Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                                    For Each StationCode In StationCodes

                                        MediaBroadcastWorksheetPreBuyReport = (From Entity In DMAMediaBroadcastWorksheetPreBuyReports
                                                                               Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                     Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                     Entity.VendorCode = VendorCode
                                                                               Select Entity).FirstOrDefault

                                        If MediaBroadcastWorksheetPreBuyReport IsNot Nothing Then

                                            MediaBroadcastWorksheetMarketDetailIDs = (From Entity In DMAMediaBroadcastWorksheetPreBuyReports
                                                                                      Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                            Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                            Entity.VendorCode = VendorCode
                                                                                      Select Entity.MediaBroadcastWorksheetMarketDetailID).Distinct.ToArray

                                            MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                            MediaSpotTVResearchDaytimeTypes.AddRange(From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketDetailIDs(DbContext, MediaBroadcastWorksheetMarketDetailIDs).ToList
                                                                                     Select New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(Entity))

                                            TVWorksheetRatingAndShareDataList = MediaBroadcastWorksheetController.GetNielsenTVRatingAndShareData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs, HPUTBookIDs,
                                                                                                                                                 MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode},
                                                                                                                                                 MediaSpotTVResearchDaytimeTypes, IsAgencyASP)

                                            For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                MediaBroadcastWorksheetPreBuyReport = (From Entity In DMAMediaBroadcastWorksheetPreBuyReports
                                                                                       Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                             Entity.NielsenTVStationCode = TVWorksheetRatingAndShareData.StationCode AndAlso
                                                                                             Entity.MediaBroadcastWorksheetMarketDetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID AndAlso
                                                                                             Entity.VendorCode = VendorCode).SingleOrDefault

                                                If MediaBroadcastWorksheetPreBuyReport IsNot Nothing Then

                                                    If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                        MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                    Else

                                                        MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                    End If

                                                End If

                                            Next

                                        End If

                                    Next

                                Next

                            End Using

                        Next

                    End If

                    If MediaBroadcastWorksheetPreBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPreBuyReports.Any(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore) AndAlso Session.IsComscoreSetup Then

                        DemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)

                        ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)

                        For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetPreBuyReports.Where(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore).Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                            MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First

                            DemographicList.Clear()
                            ShareHPUTBooks.Clear()

                            ShareHPUTBook = New AdvantageFramework.DTO.Media.ShareHPUTBook
                            ShareHPUTBook.ShareBookID = MediaBroadcastWorksheetMarketBook.ShareBookID
                            ShareHPUTBook.HPUTBookID = MediaBroadcastWorksheetMarketBook.HPUTBookID

                            ShareHPUTBooks.Add(ShareHPUTBook)

                            If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo Then

                                If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            Else

                                If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            End If

                            If MediaDemographic IsNot Nothing Then

                                DemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic(MediaDemographic))

                            End If

                            NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber
                            OldComscoreMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.OldComscoreMarketNumber

                            StationCodes = (From Entity In MediaBroadcastWorksheetPreBuyReports
                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                  Entity.NielsenTVStationCode.HasValue AndAlso
                                                  Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID
                                            Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                            For Each StationCode In StationCodes

                                MediaBroadcastWorksheetPreBuyReport = (From Entity In MediaBroadcastWorksheetPreBuyReports
                                                                       Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                             Entity.NielsenTVStationCode = StationCode AndAlso
                                                                             Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID
                                                                       Select Entity).FirstOrDefault

                                If MediaBroadcastWorksheetPreBuyReport IsNot Nothing Then

                                    If MediaBroadcastWorksheetPreBuyReport.NCCTVSyscodeID.HasValue Then

                                        ComscoreTVStation = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadByNumber(DbContext, CInt(StationCode))

                                    Else

                                        ComscoreTVStation = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadByID(DbContext, CInt(StationCode))

                                    End If

                                    If ComscoreTVStation IsNot Nothing Then

                                        MediaBroadcastWorksheetMarketDetailIDs = (From Entity In MediaBroadcastWorksheetPreBuyReports
                                                                                  Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                        Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                        Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID
                                                                                  Select Entity.MediaBroadcastWorksheetMarketDetailID).Distinct.ToArray

                                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                        MediaSpotTVResearchDaytimeTypes.AddRange(From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketDetailIDs(DbContext, MediaBroadcastWorksheetMarketDetailIDs).ToList
                                                                                 Select New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(Entity))

                                        Try

                                            'TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViews(DbContext, ComscoreTVStation.CallLetters, DemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, NielsenMarketNumber)
                                            TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, DemographicList, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, OldComscoreMarketNumber, True)

                                        Catch ex As Exception

                                        End Try

                                        If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                            For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                MediaBroadcastWorksheetPreBuyReport = (From Entity In MediaBroadcastWorksheetPreBuyReports
                                                                                       Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                             Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                             Entity.MediaBroadcastWorksheetMarketDetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID).SingleOrDefault

                                                If MediaBroadcastWorksheetPreBuyReport IsNot Nothing AndAlso ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetPreBuyReport.OverridePost = False) OrElse
                                                                                                               (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetPreBuyReport.OverridePostImpressions = False)) Then

                                                    MediaBroadcastWorksheetPreBuyReport.BookID = TVWorksheetRatingAndShareData.BookID

                                                    Books = New List(Of DTO.Media.ShareHPUTBook)

                                                    If MediaBroadcastWorksheetPreBuyReport.GeographyName = "CDMA" AndAlso MediaBroadcastWorksheetPreBuyReport.NCCTVSyscodeID.HasValue AndAlso
                                                                MediaBroadcastWorksheetPreBuyReport.NielsenTVStationCode.HasValue Then

                                                        HHUEDemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)
                                                        HHUEDemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic() With {.ComscoreDemoNumber = 0})

                                                        ComscoreTVBook = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVBook.Load(DbContext)
                                                                          Where Entity.ID = MediaBroadcastWorksheetPreBuyReport.BookID
                                                                          Select Entity).SingleOrDefault

                                                        ComscoreTVStation = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadByNumber(DbContext, MediaBroadcastWorksheetPreBuyReport.NielsenTVStationCode.Value)

                                                        If ComscoreTVBook IsNot Nothing AndAlso ComscoreTVStation IsNot Nothing Then

                                                            Market = (From Entity In AdvantageFramework.Database.Procedures.Market.Load(DbContext)
                                                                      Where Entity.ComscoreNewMarketNumber = MediaBroadcastWorksheetPreBuyReport.NielsenMarketNumber
                                                                      Select Entity).SingleOrDefault

                                                            If Market IsNot Nothing AndAlso IsNumeric(Market.NielsenTVCode) Then

                                                                ComScoreCDMAs = AdvantageFramework.ComScore.GetComScoreCDMAData(CInt(Market.NielsenTVCode), ComscoreTVStation.NetworkNumber, MediaBroadcastWorksheetPreBuyReport.NCCTVSyscodeID.Value,
                                                                                                                                    ComscoreTVBook.Year, ComscoreTVBook.Month, Session)

                                                            Else

                                                                ComScoreCDMAs = Nothing

                                                            End If

                                                            Books.Add(New DTO.Media.ShareHPUTBook(ComscoreTVBook, 0))

                                                            Adults18PlusTVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, HHUEDemographicList, Books,
                                                                                                                                                                   MediaSpotTVResearchDaytimeTypes, OldComscoreMarketNumber, True)

                                                            Adults18PlusTVWorksheetRatingAndShareData = Adults18PlusTVWorksheetRatingAndShareDataList.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetPreBuyReport.MediaBroadcastWorksheetMarketDetailID)

                                                            If ComScoreCDMAs IsNot Nothing AndAlso ComScoreCDMAs.Count > 0 AndAlso Adults18PlusTVWorksheetRatingAndShareData IsNot Nothing Then

                                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                    MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = Math.Round(TVWorksheetRatingAndShareData.Impressions * ComScoreCDMAs.First.UEFactor, 0)

                                                                Else

                                                                    TVWorksheetRatingAndShareData.Impressions = Math.Round(ComScoreCDMAs.First.UEFactor * TVWorksheetRatingAndShareData.Impressions, 0)

                                                                End If

                                                                AdjustmentFactor = 0
                                                                CDMADemoUE = 0

                                                                If Adults18PlusTVWorksheetRatingAndShareData.Universe > 0 Then

                                                                    AdjustmentFactor = ComScoreCDMAs.First.RatingsAIUE / Adults18PlusTVWorksheetRatingAndShareData.Universe

                                                                End If

                                                                CDMADemoUE = AdjustmentFactor * TVWorksheetRatingAndShareData.Universe

                                                                If CDMADemoUE <> 0 AndAlso MediaBroadcastWorksheetMarketBook.UseImpressions = False Then

                                                                    MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = Math.Round(TVWorksheetRatingAndShareData.Impressions * 100 / CDMADemoUE, 2)

                                                                End If

                                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                    MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate / 1000, 2)

                                                                Else

                                                                    MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate, 2)

                                                                End If

                                                            End If

                                                        End If

                                                    Else

                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                            MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                        Else

                                                            MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                        End If

                                                    End If

                                                ElseIf MediaBroadcastWorksheetPreBuyReport IsNot Nothing Then

                                                    If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                        MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                    Else

                                                        MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                    End If

                                                End If

                                            Next

                                        End If

                                    End If

                                End If

                            Next

                        Next

                    End If

                    If MediaBroadcastWorksheetPreBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPreBuyReports.Any(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico) AndAlso Session.IsNielsenPuertoRicoSetup Then

                        For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetPreBuyReports.Where(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico).Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                            MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First

                            If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo AndAlso MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value)

                            ElseIf MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                                MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value)

                            End If

                            If MediaDemographic IsNot Nothing Then

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber

                                StationCodes = (From Entity In MediaBroadcastWorksheetPreBuyReports
                                                Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                      Entity.NielsenTVStationCode.HasValue AndAlso
                                                      Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID
                                                Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                                For Each StationCode In StationCodes

                                    MediaBroadcastWorksheetPreBuyReport = (From Entity In MediaBroadcastWorksheetPreBuyReports
                                                                           Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                 Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                 Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID
                                                                           Select Entity).FirstOrDefault

                                    If MediaBroadcastWorksheetPreBuyReport IsNot Nothing Then

                                        NPRStation = (From Entity In DbContext.GetQuery(Of AdvantageFramework.Database.Entities.NPRStation)
                                                      Where Entity.ID = CInt(StationCode)
                                                      Select Entity).SingleOrDefault

                                        If NPRStation IsNot Nothing Then

                                            MediaBroadcastWorksheetMarketDetailIDs = (From Entity In MediaBroadcastWorksheetPreBuyReports
                                                                                      Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                            Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                            Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID
                                                                                      Select Entity.MediaBroadcastWorksheetMarketDetailID).Distinct.ToArray

                                            MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                            MediaSpotTVResearchDaytimeTypes.AddRange(From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketDetailIDs(DbContext, MediaBroadcastWorksheetMarketDetailIDs).ToList
                                                                                     Select New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(Entity))

                                            TVWorksheetRatingAndShareDataList = Nothing

                                            If MediaBroadcastWorksheetMarketBook.PeriodStart.HasValue AndAlso MediaBroadcastWorksheetMarketBook.PeriodEnd.HasValue Then

                                                TVWorksheetRatingAndShareDataList = MediaBroadcastWorksheetController.GetNielsenTVPuertoRicoRatings(MediaBroadcastWorksheetMarketBook.PeriodStart.Value, MediaBroadcastWorksheetMarketBook.PeriodEnd.Value, CInt(StationCode), MediaSpotTVResearchDaytimeTypes, MediaDemographic.ID, Nothing)

                                            Else

                                                MediaBroadcastWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketBook.MediaBroadcastWorksheetMarketID)

                                                If MediaBroadcastWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarket.PeriodStart.HasValue AndAlso MediaBroadcastWorksheetMarket.PeriodEnd.HasValue Then

                                                    TVWorksheetRatingAndShareDataList = MediaBroadcastWorksheetController.GetNielsenTVPuertoRicoRatings(MediaBroadcastWorksheetMarket.PeriodStart.Value, MediaBroadcastWorksheetMarket.PeriodEnd.Value, CInt(StationCode), MediaSpotTVResearchDaytimeTypes, MediaDemographic.ID, Nothing)

                                                End If

                                            End If

                                            If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                                For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                    MediaBroadcastWorksheetPreBuyReport = (From Entity In MediaBroadcastWorksheetPreBuyReports
                                                                                           Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                 Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                                 Entity.MediaBroadcastWorksheetMarketDetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID).SingleOrDefault

                                                    If MediaBroadcastWorksheetPreBuyReport IsNot Nothing Then

                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                            MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                        Else

                                                            MediaBroadcastWorksheetPreBuyReport.SpotUpdatedEstimate = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                        End If

                                                    End If

                                                Next

                                            End If

                                        End If

                                    End If

                                Next

                            End If

                        Next

                    End If

                End If

            Catch ex As Exception
                MediaBroadcastWorksheetPreBuyReports = Nothing
            Finally
                LoadMediaBroadcastWorksheetPreBuyData = MediaBroadcastWorksheetPreBuyReports
            End Try

        End Function
        Public Function LoadMediaBroadcastWorksheetPostBuyData(DbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object),
                                                               FromDynamicReportWriter As Boolean, Optional ByVal StreamIn As String = Nothing) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport)

            'objects
            Dim Session As AdvantageFramework.Security.Session = Nothing
            Dim MediaBroadcastWorksheetMarketBookList As Generic.List(Of DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook) = Nothing
            Dim MediaBroadcastWorksheetIDs As IEnumerable(Of Integer) = Nothing
            Dim DemographicID As Nullable(Of Integer) = Nothing
            Dim SqlParameterMediaBroadcastWorksheetID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaBroadcastWorksheetMarkets As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUsePrimaryRating As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUseImpressions As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastStartYearMonth As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastEndYearMonth As SqlClient.SqlParameter = Nothing
            Dim AllMediaBroadcastWorksheetPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) = Nothing
            Dim MediaBroadcastWorksheetPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) = Nothing
            Dim MediaBroadcastWorksheetPostBuyReport As AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport = Nothing
            Dim NielsenTVStation As AdvantageFramework.Nielsen.Database.Entities.NielsenTVStation = Nothing
            Dim NCCTVSyscode As AdvantageFramework.Nielsen.Database.Entities.NCCTVSyscode = Nothing
            Dim MediaBroadcastWorksheetMarketBook As DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook = Nothing
            Dim NielsenTVBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing
            Dim BookIDs() As String = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim NielsenMarketNumber As Integer = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailIDs As IEnumerable(Of Integer) = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim DetailIDs As IEnumerable(Of Integer) = Nothing
            Dim FoundNCCTVSyscodeID As Nullable(Of Integer) = Nothing
            Dim UsePrimary As Boolean = True
            Dim MediaSpotTVResearchDaytimeType As AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType = Nothing
            Dim MediaSpotTVResearchDaytimeTypeAvg As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim TVWorksheetRatingAndShareDataAvg As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim MediaSpotTVResearchDaytimeTypeID As Integer = 0
            Dim AddMinutes As Integer = 0
            Dim ComscoreTVStation As AdvantageFramework.Database.Entities.ComscoreTVStation = Nothing
            'Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim ShareHPUTBook As AdvantageFramework.DTO.Media.ShareHPUTBook = Nothing
            Dim WorksheetMarketVendors As Generic.List(Of AdvantageFramework.DTO.Reporting.WorksheetMarketVendor) = Nothing
            Dim NielsenTVBookEntity As AdvantageFramework.Nielsen.Database.Entities.NielsenTVBook = Nothing
            Dim SpotBookIDs As Dictionary(Of Integer, Integer) = Nothing
            Dim SpotMediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim RunBySpotBook As Boolean = False
            Dim UseStream As String = String.Empty
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim ImpactCollectionMethods As IEnumerable(Of String) = {"5", "7", "8", "9", "10", "11", "12", "13"}
            Dim IsImpact As Boolean = False
            Dim ComscoreTVBook As AdvantageFramework.Database.Entities.ComscoreTVBook = Nothing
            Dim ComscoreCacheHeader As AdvantageFramework.Database.Entities.ComscoreCacheHeader = Nothing
            Dim ComscoreCacheDetail As AdvantageFramework.Database.Entities.ComscoreCacheDetail = Nothing
            Dim ComScoreCDMAs As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.ComScoreCDMA) = Nothing
            Dim Books As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim Demographics As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim TVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing
            Dim AdjustmentFactor As Decimal = 0
            Dim CDMADemoUE As Decimal = 0
            Dim Adults18PlusTVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim Adults18PlusTVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing
            Dim HHUEDemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim AllMediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            'Dim MatchedMediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim Market As AdvantageFramework.Database.Entities.Market = Nothing
            Dim CDMAMediaBroadcastWorksheetPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) = Nothing
            Dim DMAMediaBroadcastWorksheetPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) = Nothing
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim OldComscoreMarketNumber As Integer = 0
            Dim NPRStation As AdvantageFramework.Database.Entities.NPRStation = Nothing
            Dim MediaBroadcastWorksheetController As AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController = Nothing

            Try

                Session = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.Session.ToString)

                MediaBroadcastWorksheetMarketBookList = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.MediaBroadcastWorksheetMarketBooks.ToString)
                WorksheetMarketVendors = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.WorksheetMarketVendors.ToString)

                MediaBroadcastWorksheetIDs = (From Entity In MediaBroadcastWorksheetMarketBookList
                                              Select Entity.MediaBroadcastWorksheetID).Distinct.ToArray

                AllMediaBroadcastWorksheetPostBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport)

                For Each MediaBroadcastWorksheetID In MediaBroadcastWorksheetIDs

                    MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).First

                    If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo = True Then

                        If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value

                        End If

                        UsePrimary = False

                    End If

                    RunBySpotBook = (MediaBroadcastWorksheetMarketBook.ShareBookID.HasValue = False)

                    SqlParameterMediaBroadcastWorksheetID = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_ID", SqlDbType.Int)
                    SqlParameterMediaBroadcastWorksheetMarkets = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_MARKETS", SqlDbType.VarChar)
                    SqlParameterMediaDemoID = New SqlClient.SqlParameter("@MEDIA_DEMO_ID", SqlDbType.Int)
                    SqlParameterUsePrimaryRating = New SqlClient.SqlParameter("@USE_PRIMARY_RATING", SqlDbType.Bit)
                    SqlParameterUseImpressions = New SqlClient.SqlParameter("@USE_IMPRESSIONS", SqlDbType.Bit)
                    SqlParameterBroadcastStartYearMonth = New SqlClient.SqlParameter("@BROADCAST_START_DATE", SqlDbType.Date)
                    SqlParameterBroadcastEndYearMonth = New SqlClient.SqlParameter("@BROADCAST_END_DATE", SqlDbType.Date)

                    SqlParameterMediaBroadcastWorksheetID.Value = MediaBroadcastWorksheetID
                    SqlParameterMediaBroadcastWorksheetMarkets.Value = String.Join(",", MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).Select(Function(MB) MB.MediaBroadcastWorksheetMarketID).ToArray)
                    SqlParameterMediaDemoID.Value = If(DemographicID.HasValue, DemographicID.Value, System.DBNull.Value)
                    SqlParameterUsePrimaryRating.Value = UsePrimary
                    SqlParameterUseImpressions.Value = MediaBroadcastWorksheetMarketBook.UseImpressions
                    SqlParameterBroadcastStartYearMonth.Value = MediaBroadcastWorksheetMarketBook.StartDate
                    SqlParameterBroadcastEndYearMonth.Value = MediaBroadcastWorksheetMarketBook.EndDate

                    AllMediaBroadcastWorksheetPostBuyReports.AddRange(DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) _
                        ("exec advsp_media_broadcast_worksheet_postbuy_report @MEDIA_BROADCAST_WORKSHEET_ID, @MEDIA_BROADCAST_WORKSHEET_MARKETS, @MEDIA_DEMO_ID, @USE_PRIMARY_RATING, @USE_IMPRESSIONS, @BROADCAST_START_DATE, @BROADCAST_END_DATE",
                        SqlParameterMediaBroadcastWorksheetID, SqlParameterMediaBroadcastWorksheetMarkets, SqlParameterMediaDemoID, SqlParameterUsePrimaryRating, SqlParameterUseImpressions, SqlParameterBroadcastStartYearMonth, SqlParameterBroadcastEndYearMonth).ToList)

                Next

                MediaBroadcastWorksheetPostBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport)

                If AllMediaBroadcastWorksheetPostBuyReports IsNot Nothing AndAlso AllMediaBroadcastWorksheetPostBuyReports.Count > 0 Then

                    If WorksheetMarketVendors IsNot Nothing AndAlso WorksheetMarketVendors.Count > 0 Then

                        For Each WorksheetMarketVendor In WorksheetMarketVendors

                            For Each MediaBroadcastWorksheetPreBuyReport In AllMediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketVendor.MediaBroadcastWorksheetMarketID AndAlso
                                                                                                                                            Entity.VendorCode = WorksheetMarketVendor.VendorCode).ToList

                                MediaBroadcastWorksheetPostBuyReports.Add(MediaBroadcastWorksheetPreBuyReport)

                            Next

                        Next

                    End If

                End If

                If MediaBroadcastWorksheetPostBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPostBuyReports.Count > 0 Then

                    For Each MediaBroadcastWorksheetPostBuyReport In MediaBroadcastWorksheetPostBuyReports

                        MediaBroadcastWorksheetPostBuyReport.StationName = MediaBroadcastWorksheetPostBuyReport.VendorName

                        MediaBroadcastWorksheetMarketBook = (From Entity In MediaBroadcastWorksheetMarketBookList
                                                             Where Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetPostBuyReport.MediaBroadcastWorksheetMarketID
                                                             Select Entity).FirstOrDefault

                        If MediaBroadcastWorksheetMarketBook IsNot Nothing AndAlso MediaBroadcastWorksheetMarketBook.ShareBookID > 0 Then

                            If MediaBroadcastWorksheetPostBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen AndAlso Session.IsNielsenSetup Then

                                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                    NielsenTVBookEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenTVBook.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarketBook.ShareBookID)

                                    If NielsenTVBookEntity IsNot Nothing Then

                                        NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(NielsenTVBookEntity)

                                        If NielsenTVBook IsNot Nothing Then

                                            MediaBroadcastWorksheetPostBuyReport.PostBook = NielsenTVBook.Description

                                        End If

                                    End If

                                End Using

                            ElseIf MediaBroadcastWorksheetPostBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore AndAlso Session.IsComscoreSetup Then

                                ComscoreTVBook = AdvantageFramework.Database.Procedures.ComscoreTVBook.LoadByID(DbContext, MediaBroadcastWorksheetMarketBook.ShareBookID)

                                If ComscoreTVBook IsNot Nothing Then

                                    NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(ComscoreTVBook)

                                    If NielsenTVBook IsNot Nothing Then

                                        MediaBroadcastWorksheetPostBuyReport.PostBook = NielsenTVBook.Description

                                    End If

                                End If

                            End If

                        End If

                    Next

                    If MediaBroadcastWorksheetPostBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPostBuyReports.Any(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen) AndAlso Session.IsNielsenSetup Then

                        Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                            For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen).Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                                MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).FirstOrDefault

                                If MediaBroadcastWorksheetMarketBook IsNot Nothing Then

                                    UseStream = StreamIn

                                    IsImpact = False

                                    If RunBySpotBook Then

                                        MediaBroadcastWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID)

                                        If MediaBroadcastWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                                            NielsenTVBook = Nothing

                                            NielsenTVBookEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenTVBook.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.Value)

                                            If NielsenTVBookEntity IsNot Nothing Then

                                                NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(NielsenTVBookEntity)

                                            End If

                                            If NielsenTVBook IsNot Nothing Then

                                                If String.IsNullOrWhiteSpace(UseStream) Then

                                                    UseStream = NielsenTVBook.RawStream

                                                End If

                                                If ImpactCollectionMethods.Contains(NielsenTVBook.CollectionMethod) Then

                                                    IsImpact = True

                                                End If

                                                UseStream = UseStream.Replace("-IM", "").Replace("-H", "").Replace("-B", "").Replace("-A", "").Replace("-OL", "")

                                            End If

                                        End If

                                    End If

                                    If String.IsNullOrWhiteSpace(UseStream) Then

                                        UseStream = "L3"

                                    End If

                                    BookIDs = New String() {MediaBroadcastWorksheetMarketBook.ShareBookID.ToString}

                                    If MediaBroadcastWorksheetMarketBook.HPUTBookID.HasValue AndAlso MediaBroadcastWorksheetMarketBook.HPUTBookID.Value > 0 Then

                                        HPUTBookIDs = New String() {MediaBroadcastWorksheetMarketBook.HPUTBookID.Value.ToString}

                                    Else

                                        HPUTBookIDs = New String() {}

                                    End If

                                    If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo Then

                                        If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                                            MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value)

                                        Else

                                            MediaDemographic = Nothing

                                        End If

                                    Else

                                        If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                                            MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value)

                                        Else

                                            MediaDemographic = Nothing

                                        End If

                                    End If

                                    If MediaDemographic IsNot Nothing Then

                                        DemographicID = MediaDemographic.ID

                                        MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                    Else

                                        DemographicID = 0

                                        MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                    End If

                                    MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = DemographicID).ToList
                                                            Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                        .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                    NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber

                                    CDMAMediaBroadcastWorksheetPostBuyReports = MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso Entity.GeographyName = "CDMA").ToList

                                    For Each VendorCode In (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                Entity.NielsenTVStationCode.HasValue AndAlso
                                                                Entity.NielsenTVStationCode <> 0
                                                            Select CStr(Entity.VendorCode)).Distinct.ToArray

                                        StationCodes = (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                        Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                            Entity.NielsenTVStationCode.HasValue AndAlso
                                                            Entity.NielsenTVStationCode <> 0 AndAlso
                                                            Entity.VendorCode = VendorCode
                                                        Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                                        For Each StationCode In StationCodes

                                            MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                            DetailIDs = (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                         Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                            Entity.NielsenTVStationCode = StationCode AndAlso
                                                            Entity.DetailID.HasValue AndAlso
                                                            Entity.VendorCode = VendorCode
                                                         Select Entity.DetailID.Value).ToArray

                                            If DetailIDs IsNot Nothing AndAlso DetailIDs.Count > 0 Then

                                                MediaSpotTVResearchDaytimeTypes.AddRange((From Entity In AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Load(DbContext)
                                                                                          Where DetailIDs.Contains(Entity.ID)
                                                                                          Select Entity).ToList.Select(Function(E) New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(E)))

                                                FoundNCCTVSyscodeID = (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                                       Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                            Entity.NielsenTVStationCode = StationCode AndAlso
                                                                            Entity.VendorCode = VendorCode
                                                                       Select Entity.NCCTVSyscodeID).FirstOrDefault

                                                If FoundNCCTVSyscodeID.HasValue Then

                                                    If Not RunBySpotBook Then

                                                        TVWorksheetRatingAndShareDataList = GetNielsenTVCDMARatingAndShareData(Session, NielsenMarketNumber, BookIDs, HPUTBookIDs,
                                                                                                                            MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, MediaSpotTVResearchDaytimeTypes,
                                                                                                                            FoundNCCTVSyscodeID.Value)

                                                    Else

                                                        SpotBookIDs = New Dictionary(Of Integer, Integer)

                                                        TVWorksheetRatingAndShareDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

                                                        For Each MediaSpotTVResearchDaytimeType In MediaSpotTVResearchDaytimeTypes

                                                            If MediaBroadcastWorksheetMarket.IsCable AndAlso MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                                                                ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Session)

                                                                NielsenTVBooks = ShareHPUTBookController.GetRepositoryNielsenTVBooksForCableCDMA(NielsenMarketNumber)

                                                                If NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                B.RawStream = UseStream AndAlso
                                                                                                B.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                B.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                    (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).Any Then

                                                                    SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                B.RawStream = UseStream AndAlso
                                                                                                B.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                B.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                    (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).First.ID)

                                                                Else

                                                                    If NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                    B.RawStream = UseStream AndAlso
                                                                                                    B.EndDateTime < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                    ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                        (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).OrderByDescending(Function(B) B.Year).ThenByDescending(Function(B) B.Month).Any Then

                                                                        SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                    B.RawStream = UseStream AndAlso
                                                                                                    B.EndDateTime < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                    ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                        (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).OrderByDescending(Function(B) B.Year).ThenByDescending(Function(B) B.Month).First.ID)

                                                                    End If

                                                                End If

                                                            Else

                                                                NielsenTVBookEntity = NielsenDbContext.NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                                                        B.Stream = UseStream AndAlso
                                                                                                                                        B.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                        B.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                        ImpactCollectionMethods.Contains(B.CollectionMethod) = False).FirstOrDefault

                                                                If NielsenTVBookEntity IsNot Nothing Then

                                                                    SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBookEntity.ID)

                                                                Else 'find previous book

                                                                    NielsenTVBookEntity = NielsenDbContext.NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                                                            B.Stream = UseStream AndAlso
                                                                                                                                            B.EndDateTime < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                            ImpactCollectionMethods.Contains(B.CollectionMethod) = False).OrderByDescending(Function(B) B.Year).ThenByDescending(Function(B) B.Month).FirstOrDefault

                                                                    If NielsenTVBookEntity IsNot Nothing Then

                                                                        SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBookEntity.ID)

                                                                    End If

                                                                End If

                                                            End If

                                                        Next

                                                        For Each BookID In SpotBookIDs.Values.Distinct.ToList

                                                            SpotMediaSpotTVResearchDaytimeTypes = MediaSpotTVResearchDaytimeTypes.Where(Function(D) SpotBookIDs.Where(Function(V) V.Value = BookID).Select(Function(V) V.Key).Contains(D.ID)).ToList

                                                            TVWorksheetRatingAndShareDataList.AddRange(GetNielsenTVCDMARatingAndShareData(Session, NielsenMarketNumber, New String() {BookID.ToString}, New String() {},
                                                                                                                                        MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, SpotMediaSpotTVResearchDaytimeTypes, FoundNCCTVSyscodeID.Value))

                                                        Next

                                                    End If

                                                    For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                        MediaBroadcastWorksheetPostBuyReport = (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                                                                Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                    Entity.NielsenTVStationCode = TVWorksheetRatingAndShareData.StationCode AndAlso
                                                                                                    Entity.DetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID AndAlso
                                                                                                    Entity.VendorCode = VendorCode).SingleOrDefault

                                                        If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                                            MediaBroadcastWorksheetPostBuyReport.DetailProgram = TVWorksheetRatingAndShareData.ProgramName

                                                            If String.IsNullOrWhiteSpace(TVWorksheetRatingAndShareData.BookName) = False Then

                                                                MediaBroadcastWorksheetPostBuyReport.BookName = TVWorksheetRatingAndShareData.BookName.Replace("-LO", "-L")

                                                            End If

                                                            MediaBroadcastWorksheetPostBuyReport.BookID = TVWorksheetRatingAndShareData.BookID

                                                        End If

                                                        If MediaBroadcastWorksheetPostBuyReport IsNot Nothing AndAlso ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePost = False) OrElse
                                                                                                                    (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions = False)) Then

                                                            If MediaBroadcastWorksheetPostBuyReport.DetailTime = "258a" OrElse MediaBroadcastWorksheetPostBuyReport.DetailTime = "259a" OrElse
                                                                MediaBroadcastWorksheetPostBuyReport.DetailTime = "300a" OrElse MediaBroadcastWorksheetPostBuyReport.DetailTime = "301a" Then

                                                                MediaSpotTVResearchDaytimeType = MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ID = MediaBroadcastWorksheetPostBuyReport.DetailID).SingleOrDefault

                                                                If MediaSpotTVResearchDaytimeType IsNot Nothing AndAlso MediaSpotTVResearchDaytimeType.ExactSpotDate.HasValue Then

                                                                    AddMinutes = If(MediaBroadcastWorksheetPostBuyReport.DetailTime.StartsWith("2"), 2, -2)

                                                                    If MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ExactSpotDate.HasValue AndAlso
                                                                                                                        DT.ExactSpotDate.Value = DateAdd(DateInterval.Day, If(AddMinutes = 2, 1, -1), DateAdd(DateInterval.Minute, AddMinutes, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value))).Any Then

                                                                        MediaSpotTVResearchDaytimeTypeID = MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ExactSpotDate.HasValue AndAlso
                                                                                                                                                            DT.ExactSpotDate.Value = DateAdd(DateInterval.Day, If(AddMinutes = 2, 1, -1), DateAdd(DateInterval.Minute, AddMinutes, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value))).First.ID

                                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Impressions) / 2) / 1000, 2)
                                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Rating) / 2, 2)

                                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Impressions) / 2) / 1000, 2)

                                                                        Else

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Rating) / 2, 2)

                                                                        End If

                                                                    Else

                                                                        MediaSpotTVResearchDaytimeTypeAvg = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                                                        MediaSpotTVResearchDaytimeType.SetBreakValues(AddMinutes)

                                                                        MediaSpotTVResearchDaytimeTypeAvg.Add(MediaSpotTVResearchDaytimeType)

                                                                        If RunBySpotBook Then

                                                                            BookIDs = New String() {SpotBookIDs.Where(Function(K) K.Key = MediaSpotTVResearchDaytimeType.ID).First.Value}

                                                                            HPUTBookIDs = New String() {}

                                                                        End If

                                                                        TVWorksheetRatingAndShareDataAvg = GetNielsenTVCDMARatingAndShareData(Session, NielsenMarketNumber, BookIDs, HPUTBookIDs,
                                                                                                                                            MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, MediaSpotTVResearchDaytimeTypeAvg,
                                                                                                                                            FoundNCCTVSyscodeID.Value)

                                                                        If TVWorksheetRatingAndShareDataAvg IsNot Nothing AndAlso TVWorksheetRatingAndShareDataAvg.Count = 1 Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataAvg(0).Impressions) / 2) / 1000, 2)
                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataAvg(0).Rating) / 2, 2)

                                                                            If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                                MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataAvg(0).Impressions) / 2) / 1000, 2)

                                                                            Else

                                                                                MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataAvg(0).Rating) / 2, 2)

                                                                            End If

                                                                        End If

                                                                    End If

                                                                End If

                                                            Else

                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)
                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                                Else

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                                End If

                                                            End If

                                                        End If

                                                    Next

                                                End If

                                            End If

                                        Next

                                    Next

                                    DMAMediaBroadcastWorksheetPostBuyReports = MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso Entity.GeographyName = "DMA").ToList

                                    For Each VendorCode In (From Entity In DMAMediaBroadcastWorksheetPostBuyReports
                                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                Entity.NielsenTVStationCode.HasValue AndAlso
                                                                Entity.NielsenTVStationCode <> 0
                                                            Select CStr(Entity.VendorCode)).Distinct.ToArray

                                        StationCodes = (From Entity In DMAMediaBroadcastWorksheetPostBuyReports
                                                        Where Entity.NielsenTVStationCode.HasValue AndAlso
                                                            Entity.VendorCode = VendorCode
                                                        Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                                        For Each StationCode In StationCodes

                                            MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                            DetailIDs = (From Entity In DMAMediaBroadcastWorksheetPostBuyReports
                                                         Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                            Entity.NielsenTVStationCode = StationCode AndAlso
                                                            Entity.DetailID.HasValue AndAlso
                                                            Entity.VendorCode = VendorCode
                                                         Select Entity.DetailID.Value).ToArray

                                            If DetailIDs IsNot Nothing AndAlso DetailIDs.Count > 0 Then

                                                MediaSpotTVResearchDaytimeTypes.AddRange((From Entity In AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Load(DbContext)
                                                                                          Where DetailIDs.Contains(Entity.ID)
                                                                                          Select Entity).ToList.Select(Function(E) New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(E)))

                                                If Not RunBySpotBook Then

                                                    TVWorksheetRatingAndShareDataList = GetNielsenTVRatingAndShareData(Session, NielsenMarketNumber, BookIDs, HPUTBookIDs,
                                                                                                                    MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, MediaSpotTVResearchDaytimeTypes)

                                                Else

                                                    SpotBookIDs = New Dictionary(Of Integer, Integer)

                                                    TVWorksheetRatingAndShareDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

                                                    For Each MediaSpotTVResearchDaytimeType In MediaSpotTVResearchDaytimeTypes

                                                        NielsenTVBookEntity = NielsenDbContext.NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                                                B.Stream = UseStream AndAlso
                                                                                                                                B.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                B.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                ImpactCollectionMethods.Contains(B.CollectionMethod) = False).FirstOrDefault

                                                        If NielsenTVBookEntity IsNot Nothing Then

                                                            SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBookEntity.ID)

                                                        Else 'find previous book

                                                            NielsenTVBookEntity = NielsenDbContext.NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                                                    B.Stream = UseStream AndAlso
                                                                                                                                    B.EndDateTime < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                    ImpactCollectionMethods.Contains(B.CollectionMethod) = False).OrderByDescending(Function(B) B.Year).ThenByDescending(Function(B) B.Month).FirstOrDefault

                                                            If NielsenTVBookEntity IsNot Nothing Then

                                                                SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBookEntity.ID)

                                                            End If

                                                        End If

                                                    Next

                                                    For Each BookID In SpotBookIDs.Values.Distinct.ToList

                                                        SpotMediaSpotTVResearchDaytimeTypes = MediaSpotTVResearchDaytimeTypes.Where(Function(D) SpotBookIDs.Where(Function(V) V.Value = BookID).Select(Function(V) V.Key).Contains(D.ID)).ToList

                                                        TVWorksheetRatingAndShareDataList.AddRange(GetNielsenTVRatingAndShareData(Session, NielsenMarketNumber, New String() {BookID.ToString}, New String() {},
                                                                                                                                MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, SpotMediaSpotTVResearchDaytimeTypes))

                                                    Next

                                                End If

                                                For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                    MediaBroadcastWorksheetPostBuyReport = (From Entity In DMAMediaBroadcastWorksheetPostBuyReports
                                                                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                Entity.NielsenTVStationCode = TVWorksheetRatingAndShareData.StationCode AndAlso
                                                                                                Entity.DetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID AndAlso
                                                                                                Entity.VendorCode = VendorCode).FirstOrDefault

                                                    If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                                        MediaBroadcastWorksheetPostBuyReport.DetailProgram = TVWorksheetRatingAndShareData.ProgramName

                                                        If String.IsNullOrWhiteSpace(TVWorksheetRatingAndShareData.BookName) = False Then

                                                            MediaBroadcastWorksheetPostBuyReport.BookName = TVWorksheetRatingAndShareData.BookName.Replace("-LO", "-L")

                                                        End If

                                                        MediaBroadcastWorksheetPostBuyReport.BookID = TVWorksheetRatingAndShareData.BookID

                                                    End If

                                                    If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                                        If ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePost = False) OrElse
                                                        (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions = False)) OrElse MediaBroadcastWorksheetMarketBook.IsFromMediaManager Then

                                                            If MediaBroadcastWorksheetPostBuyReport.DetailTime = "258a" OrElse MediaBroadcastWorksheetPostBuyReport.DetailTime = "259a" OrElse
                                                                MediaBroadcastWorksheetPostBuyReport.DetailTime = "300a" OrElse MediaBroadcastWorksheetPostBuyReport.DetailTime = "301a" Then

                                                                MediaSpotTVResearchDaytimeType = MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ID = MediaBroadcastWorksheetPostBuyReport.DetailID).SingleOrDefault

                                                                If MediaSpotTVResearchDaytimeType IsNot Nothing AndAlso MediaSpotTVResearchDaytimeType.ExactSpotDate.HasValue Then

                                                                    AddMinutes = If(MediaBroadcastWorksheetPostBuyReport.DetailTime.StartsWith("2"), 2, -2)

                                                                    If MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ExactSpotDate.HasValue AndAlso
                                                                                                                    DT.ExactSpotDate.Value = DateAdd(DateInterval.Day, If(AddMinutes = 2, 1, -1), DateAdd(DateInterval.Minute, AddMinutes, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value))).Any Then

                                                                        MediaSpotTVResearchDaytimeTypeID = MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ExactSpotDate.HasValue AndAlso
                                                                                                                                                        DT.ExactSpotDate.Value = DateAdd(DateInterval.Day, If(AddMinutes = 2, 1, -1), DateAdd(DateInterval.Minute, AddMinutes, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value))).First.ID

                                                                        If MediaBroadcastWorksheetMarketBook.IsFromMediaManager = False OrElse (MediaBroadcastWorksheetMarketBook.IsFromMediaManager AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions = False) Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Impressions) / 2) / 1000, 2)

                                                                        End If

                                                                        If MediaBroadcastWorksheetMarketBook.IsFromMediaManager = False OrElse (MediaBroadcastWorksheetMarketBook.IsFromMediaManager AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePost = False) Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Rating) / 2, 2)

                                                                        End If

                                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Impressions) / 2) / 1000, 2)

                                                                        Else

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Rating) / 2, 2)

                                                                        End If

                                                                    Else

                                                                        MediaSpotTVResearchDaytimeTypeAvg = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                                                        MediaSpotTVResearchDaytimeType.SetBreakValues(AddMinutes)

                                                                        MediaSpotTVResearchDaytimeTypeAvg.Add(MediaSpotTVResearchDaytimeType)

                                                                        If RunBySpotBook Then

                                                                            BookIDs = New String() {SpotBookIDs.Where(Function(K) K.Key = MediaSpotTVResearchDaytimeType.ID).First.Value}

                                                                            HPUTBookIDs = New String() {}

                                                                        End If

                                                                        TVWorksheetRatingAndShareDataAvg = GetNielsenTVRatingAndShareData(Session, NielsenMarketNumber, BookIDs, HPUTBookIDs, MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, MediaSpotTVResearchDaytimeTypeAvg)

                                                                        If TVWorksheetRatingAndShareDataAvg IsNot Nothing AndAlso TVWorksheetRatingAndShareDataAvg.Count = 1 Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataAvg(0).Impressions) / 2) / 1000, 2)
                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataAvg(0).Rating) / 2, 2)

                                                                            If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                                MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataAvg(0).Impressions) / 2) / 1000, 2)

                                                                            Else

                                                                                MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataAvg(0).Rating) / 2, 2)

                                                                            End If

                                                                        End If

                                                                    End If

                                                                End If

                                                            Else

                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)
                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                                Else

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                                End If

                                                            End If

                                                        End If

                                                    End If

                                                Next

                                            End If

                                        Next

                                    Next

                                End If

                            Next

                        End Using

                    End If

                    If MediaBroadcastWorksheetPostBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPostBuyReports.Any(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore) AndAlso Session.IsComscoreSetup Then

                        ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)

                        For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore).Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                            MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First

                            If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo Then

                                If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            Else

                                If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            End If

                            Demographics = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)

                            If MediaDemographic IsNot Nothing Then

                                Demographics.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic(MediaDemographic))

                            End If

                            NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber
                            OldComscoreMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.OldComscoreMarketNumber

                            StationCodes = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                            Where Entity.NielsenTVStationCode.HasValue AndAlso
                                                      Entity.NielsenMarketNumber = NielsenMarketNumber
                                            Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                            For Each StationCode In StationCodes

                                MediaBroadcastWorksheetPostBuyReport = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                                        Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                  Entity.NielsenTVStationCode = StationCode
                                                                        Select Entity).FirstOrDefault

                                If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                    AllMediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)
                                    MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                    DetailIDs = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                 Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                           Entity.NielsenTVStationCode = StationCode AndAlso
                                                           Entity.DetailID.HasValue
                                                 Select Entity.DetailID.Value).ToArray

                                    If MediaBroadcastWorksheetPostBuyReport.NCCTVSyscodeID.HasValue Then

                                        ComscoreTVStation = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadByNumber(DbContext, CInt(StationCode))

                                    Else

                                        ComscoreTVStation = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadByID(DbContext, CInt(StationCode))

                                    End If

                                    If DetailIDs IsNot Nothing AndAlso DetailIDs.Count > 0 AndAlso ComscoreTVStation IsNot Nothing Then

                                        AllMediaSpotTVResearchDaytimeTypes.AddRange((From Entity In AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Load(DbContext)
                                                                                     Where DetailIDs.Contains(Entity.ID)
                                                                                     Select Entity).ToList.Select(Function(E) New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(E)))

                                        If RunBySpotBook = False Then 'postbook is selected

                                            ComscoreTVBook = DbContext.ComscoreTVBooks.Find(MediaBroadcastWorksheetMarketBook.ShareBookID.Value)

                                            'MatchedMediaSpotTVResearchDaytimeTypes = (From Entity In AllMediaSpotTVResearchDaytimeTypes
                                            '                                          Where ComscoreTVBook.StartDateTime <= Entity.ExactSpotDate.Value AndAlso
                                            '                                                ComscoreTVBook.EndDateTime >= Entity.ExactSpotDate.Value
                                            '                                          Select Entity).ToList

                                            'MediaSpotTVResearchDaytimeTypes = (From Entity In AllMediaSpotTVResearchDaytimeTypes
                                            '                                   Where MatchedMediaSpotTVResearchDaytimeTypes.Select(Function(NonAll) NonAll.ID).ToArray.Contains(Entity.ID) = False
                                            '                                   Select Entity).ToList

                                            MediaSpotTVResearchDaytimeTypes = AllMediaSpotTVResearchDaytimeTypes.ToList

                                            ShareHPUTBooks.Clear()

                                            ShareHPUTBook = New AdvantageFramework.DTO.Media.ShareHPUTBook
                                            ShareHPUTBook.ShareBookID = MediaBroadcastWorksheetMarketBook.ShareBookID
                                            ShareHPUTBook.HPUTBookID = MediaBroadcastWorksheetMarketBook.HPUTBookID

                                            ShareHPUTBooks.Add(ShareHPUTBook)

                                            TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, Demographics, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, OldComscoreMarketNumber, True)

                                        Else

                                            MediaSpotTVResearchDaytimeTypes = AllMediaSpotTVResearchDaytimeTypes

                                        End If

                                        If RunBySpotBook OrElse MediaSpotTVResearchDaytimeTypes.Count > 0 Then

                                            Books = New List(Of DTO.Media.ShareHPUTBook)

                                            If TVWorksheetRatingAndShareDataList Is Nothing Then

                                                TVWorksheetRatingAndShareDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

                                            End If

                                            For Each MediaSpotTVResearchDaytimeType In MediaSpotTVResearchDaytimeTypes.Where(Function(Entity) Entity.ExactSpotDate.HasValue).ToList

                                                ComscoreTVBook = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVBook.Load(DbContext)
                                                                  Where Entity.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                            Entity.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                  Select Entity).SingleOrDefault

                                                If ComscoreTVBook IsNot Nothing Then

                                                    Demographics = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)
                                                    Demographics.Add(New DTO.Media.SpotTV.Demographic(MediaDemographic))

                                                    Books.Clear()
                                                    Books.Add(New DTO.Media.ShareHPUTBook(ComscoreTVBook, 0))

                                                    AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, Demographics, Books, {MediaSpotTVResearchDaytimeType}.ToList, OldComscoreMarketNumber, True)

                                                    ComscoreCacheHeader = (From Entity In AdvantageFramework.Database.Procedures.ComscoreCacheHeader.Load(DbContext)
                                                                           Where Entity.BookID = ComscoreTVBook.ID AndAlso
                                                                                     Entity.MarketNumber = NielsenMarketNumber AndAlso
                                                                                     Entity.StationNumber = ComscoreTVStation.Number AndAlso
                                                                                     Entity.DemoNumber = MediaDemographic.ComscoreDemoNumber.Value
                                                                           Select Entity).SingleOrDefault

                                                    If ComscoreCacheHeader IsNot Nothing Then

                                                        ComscoreCacheDetail = (From Entity In AdvantageFramework.Database.Procedures.ComscoreCacheDetail.Load(DbContext)
                                                                               Where Entity.ComscoreCacheHeaderID = ComscoreCacheHeader.ID AndAlso
                                                                                         Entity.QuarterHour <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                               Select Entity).OrderByDescending(Function(Entity) Entity.QuarterHour).FirstOrDefault

                                                        If ComscoreCacheDetail IsNot Nothing Then

                                                            TVWorksheetRatingAndShareData = New AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData

                                                            TVWorksheetRatingAndShareData.Rating = If(ComscoreCacheDetail.Universe <> 0, ComscoreCacheDetail.AverageAudience * 100 / ComscoreCacheDetail.Universe, 0)
                                                            TVWorksheetRatingAndShareData.Impressions = ComscoreCacheDetail.AverageAudience
                                                            TVWorksheetRatingAndShareData.Universe = ComscoreCacheDetail.Universe
                                                            TVWorksheetRatingAndShareData.Share = ComscoreCacheDetail.Share
                                                            TVWorksheetRatingAndShareData.HPUT = ComscoreCacheDetail.SIU
                                                            TVWorksheetRatingAndShareData.ProgramName = ComscoreCacheDetail.SeriesName
                                                            TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeType.ID
                                                            TVWorksheetRatingAndShareData.BookID = ComscoreTVBook.ID

                                                            TVWorksheetRatingAndShareDataList.Add(TVWorksheetRatingAndShareData)

                                                        End If

                                                    End If

                                                Else

                                                    TVWorksheetRatingAndShareDataList.Add(AdvantageFramework.ComScore.GetLocalTimeViews(DbContext, OldComscoreMarketNumber, ComscoreTVStation.Number, MediaDemographic.ComscoreDemoNumber, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value, MediaSpotTVResearchDaytimeType.ID))

                                                End If

                                            Next

                                        End If

                                        If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                            Books = New List(Of DTO.Media.ShareHPUTBook)

                                            For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                MediaBroadcastWorksheetPostBuyReport = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                                                        Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                  Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                                  Entity.DetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID).FirstOrDefault

                                                If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                                    MediaBroadcastWorksheetPostBuyReport.DetailProgram = TVWorksheetRatingAndShareData.ProgramName
                                                    MediaBroadcastWorksheetPostBuyReport.BookID = TVWorksheetRatingAndShareData.BookID

                                                    ComscoreTVBook = DbContext.ComscoreTVBooks.Find(TVWorksheetRatingAndShareData.BookID)

                                                    If ComscoreTVBook IsNot Nothing Then

                                                        MediaBroadcastWorksheetPostBuyReport.BookName = MonthName(ComscoreTVBook.Month, True) & (ComscoreTVBook.Year - 2000).ToString & "-L"

                                                    End If

                                                End If

                                                If MediaBroadcastWorksheetPostBuyReport IsNot Nothing AndAlso ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePost = False) OrElse
                                                                                                                   (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions = False)) Then

                                                    'If RunBySpotBook Then

                                                    Books.Clear()

                                                    If MediaBroadcastWorksheetPostBuyReport.GeographyName = "CDMA" AndAlso MediaBroadcastWorksheetPostBuyReport.NCCTVSyscodeID.HasValue AndAlso
                                                                MediaBroadcastWorksheetPostBuyReport.NielsenTVStationCode.HasValue AndAlso MediaBroadcastWorksheetPostBuyReport.DetailID.HasValue Then


                                                        HHUEDemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)
                                                        HHUEDemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic() With {.ComscoreDemoNumber = 0})

                                                        ShareHPUTBooks.Clear()

                                                        ComscoreTVBook = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVBook.Load(DbContext)
                                                                          Where Entity.ID = MediaBroadcastWorksheetPostBuyReport.BookID
                                                                          Select Entity).SingleOrDefault

                                                        ComscoreTVStation = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadByNumber(DbContext, MediaBroadcastWorksheetPostBuyReport.NielsenTVStationCode.Value)

                                                        If ComscoreTVBook IsNot Nothing AndAlso ComscoreTVStation IsNot Nothing Then

                                                            Market = (From Entity In AdvantageFramework.Database.Procedures.Market.Load(DbContext)
                                                                      Where Entity.ComscoreNewMarketNumber = MediaBroadcastWorksheetPostBuyReport.NielsenMarketNumber
                                                                      Select Entity).SingleOrDefault

                                                            If Market IsNot Nothing AndAlso IsNumeric(Market.NielsenTVCode) Then

                                                                ComScoreCDMAs = AdvantageFramework.ComScore.GetComScoreCDMAData(CInt(Market.NielsenTVCode), ComscoreTVStation.NetworkNumber, MediaBroadcastWorksheetPostBuyReport.NCCTVSyscodeID.Value,
                                                                                                                                    ComscoreTVBook.Year, ComscoreTVBook.Month, Session)

                                                            Else

                                                                ComScoreCDMAs = Nothing

                                                            End If

                                                            Books.Add(New DTO.Media.ShareHPUTBook(ComscoreTVBook, 0))

                                                            Adults18PlusTVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, HHUEDemographicList, Books,
                                                                                                                                                                   MediaSpotTVResearchDaytimeTypes, OldComscoreMarketNumber, True)

                                                            Adults18PlusTVWorksheetRatingAndShareData = Adults18PlusTVWorksheetRatingAndShareDataList.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetPostBuyReport.DetailID.Value)

                                                            If ComScoreCDMAs IsNot Nothing AndAlso ComScoreCDMAs.Count > 0 AndAlso Adults18PlusTVWorksheetRatingAndShareData IsNot Nothing Then

                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = Math.Round(TVWorksheetRatingAndShareData.Impressions * ComScoreCDMAs.First.UEFactor, 0)

                                                                AdjustmentFactor = 0
                                                                CDMADemoUE = 0

                                                                If Adults18PlusTVWorksheetRatingAndShareData.Universe > 0 Then

                                                                    AdjustmentFactor = ComScoreCDMAs.First.RatingsAIUE / Adults18PlusTVWorksheetRatingAndShareData.Universe

                                                                End If

                                                                CDMADemoUE = AdjustmentFactor * TVWorksheetRatingAndShareData.Universe

                                                                If CDMADemoUE <> 0 Then

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActualRating = Math.Round((MediaBroadcastWorksheetPostBuyReport.DetailActualImpression.GetValueOrDefault(0) * 100) / CDMADemoUE, 2)

                                                                End If

                                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(MediaBroadcastWorksheetPostBuyReport.DetailActualImpression / 1000, 2)

                                                                Else

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(MediaBroadcastWorksheetPostBuyReport.DetailActualRating, 2)

                                                                End If

                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(MediaBroadcastWorksheetPostBuyReport.DetailActualImpression / 1000, 2)

                                                            End If

                                                        End If

                                                    Else

                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)
                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                        Else

                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                        End If

                                                    End If

                                                    'Else

                                                    '    MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)
                                                    '    MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                    '    If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                    '        MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                    '    Else

                                                    '        MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                    '    End If

                                                    'End If

                                                End If

                                            Next

                                        End If

                                    End If

                                End If

                            Next

                        Next

                    End If

                    If MediaBroadcastWorksheetPostBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPostBuyReports.Any(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico) AndAlso Session.IsNielsenPuertoRicoSetup Then

                        MediaBroadcastWorksheetController = New AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController(Session)

                        For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.NielsenPuertoRico).Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                            MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First

                            If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo Then

                                If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            Else

                                If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            End If

                            If MediaDemographic IsNot Nothing Then

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber

                                StationCodes = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                Where Entity.NielsenTVStationCode.HasValue AndAlso
                                                      Entity.NielsenMarketNumber = NielsenMarketNumber
                                                Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                                For Each StationCode In StationCodes

                                    MediaBroadcastWorksheetPostBuyReport = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                  Entity.NielsenTVStationCode = CInt(StationCode)
                                                                            Select Entity).FirstOrDefault

                                    If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                        AllMediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)
                                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                        DetailIDs = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                     Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                           Entity.NielsenTVStationCode = CInt(StationCode) AndAlso
                                                           Entity.DetailID.HasValue
                                                     Select Entity.DetailID.Value).ToArray

                                        NPRStation = (From Entity In DbContext.GetQuery(Of AdvantageFramework.Database.Entities.NPRStation)
                                                      Where Entity.ID = CInt(StationCode)
                                                      Select Entity).SingleOrDefault

                                        If DetailIDs IsNot Nothing AndAlso DetailIDs.Count > 0 AndAlso NPRStation IsNot Nothing Then

                                            AllMediaSpotTVResearchDaytimeTypes.AddRange((From Entity In AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Load(DbContext)
                                                                                         Where DetailIDs.Contains(Entity.ID)
                                                                                         Select Entity).ToList.Select(Function(E) New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(E, True)))

                                            MediaSpotTVResearchDaytimeTypes = AllMediaSpotTVResearchDaytimeTypes

                                            If RunBySpotBook OrElse MediaSpotTVResearchDaytimeTypes.Count > 0 Then

                                                If TVWorksheetRatingAndShareDataList Is Nothing Then

                                                    TVWorksheetRatingAndShareDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

                                                End If

                                                For Each MediaSpotTVResearchDaytimeType In MediaSpotTVResearchDaytimeTypes.Where(Function(Entity) Entity.ExactSpotDate.HasValue).ToList

                                                    TVWorksheetRatingAndShareData = (From Entity In MediaBroadcastWorksheetController.GetNielsenTVPuertoRicoRatings(MediaSpotTVResearchDaytimeType.ExactSpotDate.Value.ToShortDateString, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value.ToShortDateString, CInt(StationCode), MediaSpotTVResearchDaytimeTypes, MediaDemographic.ID, Nothing).ToList
                                                                                     Where Entity.MediaDemoID = MediaDemographic.ID AndAlso
                                                                                           Entity.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeType.ID
                                                                                     Select Entity).SingleOrDefault

                                                    'If TVWorksheetRatingAndShareDatas.Count = 1 Then
                                                    '    TVWorksheetRatingAndShareData = TVWorksheetRatingAndShareDatas.First
                                                    'Else
                                                    '    TVWorksheetRatingAndShareData = TVWorksheetRatingAndShareDatas.FirstOrDefault
                                                    'End If

                                                    If TVWorksheetRatingAndShareData IsNot Nothing Then

                                                        TVWorksheetRatingAndShareDataList.Add(TVWorksheetRatingAndShareData)

                                                    End If

                                                Next

                                            End If

                                            If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                                For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                    MediaBroadcastWorksheetPostBuyReport = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                  Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                                  Entity.DetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID).FirstOrDefault

                                                    If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                                        MediaBroadcastWorksheetPostBuyReport.DetailProgram = TVWorksheetRatingAndShareData.ProgramName

                                                    End If

                                                    If MediaBroadcastWorksheetPostBuyReport IsNot Nothing AndAlso ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePost = False) OrElse
                                                                                                                   (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions = False)) Then

                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)
                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                        Else

                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                        End If

                                                    End If

                                                Next

                                            End If

                                        End If

                                    End If

                                Next

                            End If

                        Next

                    End If

                    MediaBroadcastWorksheetMarketDetailIDs = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                              Select Entity.MediaBroadcastWorksheetMarketDetailID).Distinct.ToArray

                    If FromDynamicReportWriter Then

                        MediaBroadcastWorksheetPostBuyReports.ForEach(Sub(Entity)

                                                                          If String.IsNullOrWhiteSpace(Entity.PostBook) AndAlso String.IsNullOrWhiteSpace(Entity.BookName) = False Then

                                                                              Entity.PostBook = Entity.BookName.Replace("-LO", "-L")

                                                                          End If

                                                                      End Sub)

                    End If

                    For Each MediaBroadcastWorksheetMarketDetailID In MediaBroadcastWorksheetMarketDetailIDs

                        For Each Line In MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID)

                            MediaBroadcastWorksheetPostBuyReport = MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).FirstOrDefault

                            If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                    Line.Estimate = MediaBroadcastWorksheetPostBuyReport.OrdSpots * MediaBroadcastWorksheetPostBuyReport.DetailEstimateFull / 1000

                                Else

                                    Line.Estimate = MediaBroadcastWorksheetPostBuyReport.OrdSpots * MediaBroadcastWorksheetPostBuyReport.DetailEstimate

                                End If

                            End If

                            Line.Actual = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                           Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                           Select Entity.DetailActual.GetValueOrDefault(0)).Sum

                        Next

                    Next

                End If

            Catch ex As Exception
                MediaBroadcastWorksheetPostBuyReports = Nothing
            Finally
                LoadMediaBroadcastWorksheetPostBuyData = MediaBroadcastWorksheetPostBuyReports
            End Try

        End Function
        Public Function LoadMediaBroadcastWorksheetPostBuyDRWData(DbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object), Optional ByVal StreamIn As String = Nothing) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyDRWReport)

            'objects
            Dim Session As AdvantageFramework.Security.Session = Nothing
            Dim MediaBroadcastWorksheetPostBuyDRWs As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyDRWReport) = Nothing
            Dim MediaBroadcastWorksheetMarketBookList As Generic.List(Of DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook) = Nothing
            Dim MediaBroadcastWorksheetIDs As IEnumerable(Of Integer) = Nothing
            Dim DemographicID As Nullable(Of Integer) = Nothing
            Dim SqlParameterMediaBroadcastWorksheetID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaBroadcastWorksheetMarkets As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUsePrimaryRating As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUseImpressions As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastStartYearMonth As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastEndYearMonth As SqlClient.SqlParameter = Nothing
            Dim AllMediaBroadcastWorksheetPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) = Nothing
            Dim MediaBroadcastWorksheetPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) = Nothing
            Dim MediaBroadcastWorksheetPostBuyReport As AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport = Nothing
            Dim NielsenTVStation As AdvantageFramework.Nielsen.Database.Entities.NielsenTVStation = Nothing
            Dim NCCTVSyscode As AdvantageFramework.Nielsen.Database.Entities.NCCTVSyscode = Nothing
            Dim MediaBroadcastWorksheetMarketBook As DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook = Nothing
            Dim NielsenTVBook As AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook = Nothing
            Dim BookIDs() As String = Nothing
            Dim HPUTBookIDs() As String = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim NielsenMarketNumber As Integer = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailIDs As IEnumerable(Of Integer) = Nothing
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim DetailIDs As IEnumerable(Of Integer) = Nothing
            Dim FoundNCCTVSyscodeID As Nullable(Of Integer) = Nothing
            Dim UsePrimary As Boolean = True
            Dim MediaSpotTVResearchDaytimeType As AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType = Nothing
            Dim MediaSpotTVResearchDaytimeTypeAvg As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim TVWorksheetRatingAndShareDataAvg As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim MediaSpotTVResearchDaytimeTypeID As Integer = 0
            Dim AddMinutes As Integer = 0
            Dim ComscoreTVStation As AdvantageFramework.Database.Entities.ComscoreTVStation = Nothing
            'Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim ShareHPUTBooks As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim ShareHPUTBook As AdvantageFramework.DTO.Media.ShareHPUTBook = Nothing
            Dim WorksheetMarketVendors As Generic.List(Of AdvantageFramework.DTO.Reporting.WorksheetMarketVendor) = Nothing
            Dim NielsenTVBookEntity As AdvantageFramework.Nielsen.Database.Entities.NielsenTVBook = Nothing
            Dim SpotBookIDs As Dictionary(Of Integer, Integer) = Nothing
            Dim SpotMediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim RunBySpotBook As Boolean = False
            Dim UseStream As String = String.Empty
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim ImpactCollectionMethods As IEnumerable(Of String) = {"5", "7", "8", "9", "10", "11", "12", "13"}
            Dim IsImpact As Boolean = False
            Dim ComscoreTVBook As AdvantageFramework.Database.Entities.ComscoreTVBook = Nothing
            Dim ComscoreCacheHeader As AdvantageFramework.Database.Entities.ComscoreCacheHeader = Nothing
            Dim ComscoreCacheDetail As AdvantageFramework.Database.Entities.ComscoreCacheDetail = Nothing
            Dim ComScoreCDMAs As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.ComScoreCDMA) = Nothing
            Dim Books As Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook) = Nothing
            Dim Demographics As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim TVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing
            Dim AdjustmentFactor As Decimal = 0
            Dim CDMADemoUE As Decimal = 0
            Dim Adults18PlusTVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim Adults18PlusTVWorksheetRatingAndShareData As AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData = Nothing
            Dim HHUEDemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim AllMediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MatchedMediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim Market As AdvantageFramework.Database.Entities.Market = Nothing
            Dim CDMAMediaBroadcastWorksheetPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) = Nothing
            Dim DMAMediaBroadcastWorksheetPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) = Nothing
            Dim ShareHPUTBookController As AdvantageFramework.Controller.Media.ShareHPUTBookController = Nothing
            Dim NielsenTVBooks As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook) = Nothing
            Dim OldComscoreMarketNumber As Integer = 0

            Try

                Session = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.Session.ToString)

                MediaBroadcastWorksheetMarketBookList = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.MediaBroadcastWorksheetMarketBooks.ToString)
                WorksheetMarketVendors = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.WorksheetMarketVendors.ToString)

                MediaBroadcastWorksheetIDs = (From Entity In MediaBroadcastWorksheetMarketBookList
                                              Select Entity.MediaBroadcastWorksheetID).Distinct.ToArray

                AllMediaBroadcastWorksheetPostBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport)

                For Each MediaBroadcastWorksheetID In MediaBroadcastWorksheetIDs

                    MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).First

                    If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo = True Then

                        If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value

                        End If

                        UsePrimary = False

                    End If

                    RunBySpotBook = (MediaBroadcastWorksheetMarketBook.ShareBookID.HasValue = False)

                    SqlParameterMediaBroadcastWorksheetID = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_ID", SqlDbType.Int)
                    SqlParameterMediaBroadcastWorksheetMarkets = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_MARKETS", SqlDbType.VarChar)
                    SqlParameterMediaDemoID = New SqlClient.SqlParameter("@MEDIA_DEMO_ID", SqlDbType.Int)
                    SqlParameterUsePrimaryRating = New SqlClient.SqlParameter("@USE_PRIMARY_RATING", SqlDbType.Bit)
                    SqlParameterUseImpressions = New SqlClient.SqlParameter("@USE_IMPRESSIONS", SqlDbType.Bit)
                    SqlParameterBroadcastStartYearMonth = New SqlClient.SqlParameter("@BROADCAST_START_DATE", SqlDbType.Date)
                    SqlParameterBroadcastEndYearMonth = New SqlClient.SqlParameter("@BROADCAST_END_DATE", SqlDbType.Date)

                    SqlParameterMediaBroadcastWorksheetID.Value = MediaBroadcastWorksheetID
                    SqlParameterMediaBroadcastWorksheetMarkets.Value = String.Join(",", MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).Select(Function(MB) MB.MediaBroadcastWorksheetMarketID).ToArray)
                    SqlParameterMediaDemoID.Value = If(DemographicID.HasValue, DemographicID.Value, System.DBNull.Value)
                    SqlParameterUsePrimaryRating.Value = UsePrimary
                    SqlParameterUseImpressions.Value = MediaBroadcastWorksheetMarketBook.UseImpressions
                    SqlParameterBroadcastStartYearMonth.Value = MediaBroadcastWorksheetMarketBook.StartDate
                    SqlParameterBroadcastEndYearMonth.Value = MediaBroadcastWorksheetMarketBook.EndDate

                    AllMediaBroadcastWorksheetPostBuyReports.AddRange(DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport) _
                        ("exec advsp_media_broadcast_worksheet_postbuy_report @MEDIA_BROADCAST_WORKSHEET_ID, @MEDIA_BROADCAST_WORKSHEET_MARKETS, @MEDIA_DEMO_ID, @USE_PRIMARY_RATING, @USE_IMPRESSIONS, @BROADCAST_START_DATE, @BROADCAST_END_DATE",
                        SqlParameterMediaBroadcastWorksheetID, SqlParameterMediaBroadcastWorksheetMarkets, SqlParameterMediaDemoID, SqlParameterUsePrimaryRating, SqlParameterUseImpressions, SqlParameterBroadcastStartYearMonth, SqlParameterBroadcastEndYearMonth).ToList)

                Next

                MediaBroadcastWorksheetPostBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyReport)

                If AllMediaBroadcastWorksheetPostBuyReports IsNot Nothing AndAlso AllMediaBroadcastWorksheetPostBuyReports.Count > 0 Then

                    If WorksheetMarketVendors IsNot Nothing AndAlso WorksheetMarketVendors.Count > 0 Then

                        For Each WorksheetMarketVendor In WorksheetMarketVendors

                            For Each MediaBroadcastWorksheetPreBuyReport In AllMediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketVendor.MediaBroadcastWorksheetMarketID AndAlso
                                                                                                                                            Entity.VendorCode = WorksheetMarketVendor.VendorCode).ToList

                                MediaBroadcastWorksheetPostBuyReports.Add(MediaBroadcastWorksheetPreBuyReport)

                            Next

                        Next

                    End If

                End If

                If MediaBroadcastWorksheetPostBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPostBuyReports.Count > 0 Then

                    For Each MediaBroadcastWorksheetPostBuyReport In MediaBroadcastWorksheetPostBuyReports

                        MediaBroadcastWorksheetPostBuyReport.StationName = MediaBroadcastWorksheetPostBuyReport.VendorName

                        MediaBroadcastWorksheetMarketBook = (From Entity In MediaBroadcastWorksheetMarketBookList
                                                             Where Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetPostBuyReport.MediaBroadcastWorksheetMarketID
                                                             Select Entity).FirstOrDefault

                        If MediaBroadcastWorksheetMarketBook IsNot Nothing AndAlso MediaBroadcastWorksheetMarketBook.ShareBookID > 0 Then

                            If MediaBroadcastWorksheetPostBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen AndAlso Session.IsNielsenSetup Then

                                Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                                    NielsenTVBookEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenTVBook.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarketBook.ShareBookID)

                                    If NielsenTVBookEntity IsNot Nothing Then

                                        NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(NielsenTVBookEntity)

                                        If NielsenTVBook IsNot Nothing Then

                                            MediaBroadcastWorksheetPostBuyReport.PostBook = NielsenTVBook.Description

                                        End If

                                    End If

                                End Using

                            ElseIf MediaBroadcastWorksheetPostBuyReport.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore AndAlso Session.IsComscoreSetup Then

                                ComscoreTVBook = AdvantageFramework.Database.Procedures.ComscoreTVBook.LoadByID(DbContext, MediaBroadcastWorksheetMarketBook.ShareBookID)

                                If ComscoreTVBook IsNot Nothing Then

                                    NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(ComscoreTVBook)

                                    If NielsenTVBook IsNot Nothing Then

                                        MediaBroadcastWorksheetPostBuyReport.PostBook = NielsenTVBook.Description

                                    End If

                                End If

                            End If

                        End If

                    Next

                    If MediaBroadcastWorksheetPostBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPostBuyReports.Any(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen) AndAlso Session.IsNielsenSetup Then

                        Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                            For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Nielsen).Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                                MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).FirstOrDefault

                                If MediaBroadcastWorksheetMarketBook IsNot Nothing Then

                                    UseStream = StreamIn

                                    IsImpact = False

                                    If RunBySpotBook Then

                                        MediaBroadcastWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID)

                                        If MediaBroadcastWorksheetMarket IsNot Nothing AndAlso MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.HasValue Then

                                            NielsenTVBook = Nothing

                                            NielsenTVBookEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenTVBook.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarket.SharebookNielsenTVBookID.Value)

                                            If NielsenTVBookEntity IsNot Nothing Then

                                                NielsenTVBook = New AdvantageFramework.DTO.Media.SpotTV.NielsenTVBook(NielsenTVBookEntity)

                                            End If

                                            If NielsenTVBook IsNot Nothing Then

                                                If String.IsNullOrWhiteSpace(UseStream) Then

                                                    UseStream = NielsenTVBook.RawStream

                                                End If

                                                If ImpactCollectionMethods.Contains(NielsenTVBook.CollectionMethod) Then

                                                    IsImpact = True

                                                End If

                                                UseStream = UseStream.Replace("-IM", "").Replace("-H", "").Replace("-B", "").Replace("-A", "").Replace("-OL", "")

                                            End If

                                        End If

                                    End If

                                    If String.IsNullOrWhiteSpace(UseStream) Then

                                        UseStream = "L3"

                                    End If

                                    BookIDs = New String() {MediaBroadcastWorksheetMarketBook.ShareBookID.ToString}

                                    If MediaBroadcastWorksheetMarketBook.HPUTBookID.HasValue AndAlso MediaBroadcastWorksheetMarketBook.HPUTBookID.Value > 0 Then

                                        HPUTBookIDs = New String() {MediaBroadcastWorksheetMarketBook.HPUTBookID.Value.ToString}

                                    Else

                                        HPUTBookIDs = New String() {}

                                    End If

                                    If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo Then

                                        If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                                            MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value)

                                        Else

                                            MediaDemographic = Nothing

                                        End If

                                    Else

                                        If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                                            MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value)

                                        Else

                                            MediaDemographic = Nothing

                                        End If

                                    End If

                                    If MediaDemographic IsNot Nothing Then

                                        DemographicID = MediaDemographic.ID

                                        MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                    Else

                                        DemographicID = 0

                                        MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                    End If

                                    MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = DemographicID).ToList
                                                            Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                    NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber

                                    CDMAMediaBroadcastWorksheetPostBuyReports = MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso Entity.GeographyName = "CDMA").ToList

                                    For Each VendorCode In (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                              Entity.NielsenTVStationCode.HasValue AndAlso
                                                              Entity.NielsenTVStationCode <> 0
                                                            Select CStr(Entity.VendorCode)).Distinct.ToArray

                                        StationCodes = (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                        Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                          Entity.NielsenTVStationCode.HasValue AndAlso
                                                          Entity.NielsenTVStationCode <> 0 AndAlso
                                                          Entity.VendorCode = VendorCode
                                                        Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                                        For Each StationCode In StationCodes

                                            MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                            DetailIDs = (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                         Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                           Entity.NielsenTVStationCode = StationCode AndAlso
                                                           Entity.DetailID.HasValue AndAlso
                                                           Entity.VendorCode = VendorCode
                                                         Select Entity.DetailID.Value).ToArray

                                            If DetailIDs IsNot Nothing AndAlso DetailIDs.Count > 0 Then

                                                MediaSpotTVResearchDaytimeTypes.AddRange((From Entity In AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Load(DbContext)
                                                                                          Where DetailIDs.Contains(Entity.ID)
                                                                                          Select Entity).ToList.Select(Function(E) New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(E)))

                                                FoundNCCTVSyscodeID = (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                                       Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                         Entity.NielsenTVStationCode = StationCode AndAlso
                                                                         Entity.VendorCode = VendorCode
                                                                       Select Entity.NCCTVSyscodeID).FirstOrDefault

                                                If FoundNCCTVSyscodeID.HasValue Then

                                                    If Not RunBySpotBook Then

                                                        TVWorksheetRatingAndShareDataList = GetNielsenTVCDMARatingAndShareData(Session, NielsenMarketNumber, BookIDs, HPUTBookIDs,
                                                                                                                           MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, MediaSpotTVResearchDaytimeTypes,
                                                                                                                           FoundNCCTVSyscodeID.Value)

                                                    Else

                                                        SpotBookIDs = New Dictionary(Of Integer, Integer)

                                                        TVWorksheetRatingAndShareDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

                                                        For Each MediaSpotTVResearchDaytimeType In MediaSpotTVResearchDaytimeTypes

                                                            If MediaBroadcastWorksheetMarket.IsCable AndAlso MediaBroadcastWorksheetMarket.MediaBroadcastWorksheetMarketTVGeographyID = AdvantageFramework.DTO.Media.MediaBroadcastWorksheet.TVGeographies.CDMA Then

                                                                ShareHPUTBookController = New AdvantageFramework.Controller.Media.ShareHPUTBookController(Session)

                                                                NielsenTVBooks = ShareHPUTBookController.GetRepositoryNielsenTVBooksForCableCDMA(NielsenMarketNumber)

                                                                If NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                B.RawStream = UseStream AndAlso
                                                                                                B.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                B.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                 (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).Any Then

                                                                    SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                B.RawStream = UseStream AndAlso
                                                                                                B.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                B.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                 (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).First.ID)

                                                                Else

                                                                    If NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                    B.RawStream = UseStream AndAlso
                                                                                                    B.EndDateTime < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                    ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                     (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).OrderByDescending(Function(B) B.Year).ThenByDescending(Function(B) B.Month).Any Then

                                                                        SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                    B.RawStream = UseStream AndAlso
                                                                                                    B.EndDateTime < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                    ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                     (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).OrderByDescending(Function(B) B.Year).ThenByDescending(Function(B) B.Month).First.ID)

                                                                    End If

                                                                End If

                                                            Else

                                                                NielsenTVBookEntity = NielsenDbContext.NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                                                    B.Stream = UseStream AndAlso
                                                                                                                                    B.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                    B.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                    ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                                                     (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).FirstOrDefault

                                                                If NielsenTVBookEntity IsNot Nothing Then

                                                                    SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBookEntity.ID)

                                                                Else 'find previous book

                                                                    NielsenTVBookEntity = NielsenDbContext.NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                                                        B.Stream = UseStream AndAlso
                                                                                                                                        B.EndDateTime < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                        ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                                                         (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).OrderByDescending(Function(B) B.Year).ThenByDescending(Function(B) B.Month).FirstOrDefault

                                                                    If NielsenTVBookEntity IsNot Nothing Then

                                                                        SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBookEntity.ID)

                                                                    End If

                                                                End If

                                                            End If

                                                        Next

                                                        For Each BookID In SpotBookIDs.Values.Distinct.ToList

                                                            SpotMediaSpotTVResearchDaytimeTypes = MediaSpotTVResearchDaytimeTypes.Where(Function(D) SpotBookIDs.Where(Function(V) V.Value = BookID).Select(Function(V) V.Key).Contains(D.ID)).ToList

                                                            TVWorksheetRatingAndShareDataList.AddRange(GetNielsenTVCDMARatingAndShareData(Session, NielsenMarketNumber, New String() {BookID.ToString}, New String() {},
                                                                                                                                        MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, SpotMediaSpotTVResearchDaytimeTypes, FoundNCCTVSyscodeID.Value))

                                                        Next

                                                    End If

                                                    For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                        MediaBroadcastWorksheetPostBuyReport = (From Entity In CDMAMediaBroadcastWorksheetPostBuyReports
                                                                                                Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                  Entity.NielsenTVStationCode = TVWorksheetRatingAndShareData.StationCode AndAlso
                                                                                                  Entity.DetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID AndAlso
                                                                                                  Entity.VendorCode = VendorCode).SingleOrDefault

                                                        If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                                            MediaBroadcastWorksheetPostBuyReport.DetailProgram = TVWorksheetRatingAndShareData.ProgramName

                                                            If String.IsNullOrWhiteSpace(TVWorksheetRatingAndShareData.BookName) = False Then

                                                                MediaBroadcastWorksheetPostBuyReport.BookName = TVWorksheetRatingAndShareData.BookName.Replace("-LO", "-L")

                                                            End If

                                                            MediaBroadcastWorksheetPostBuyReport.BookID = TVWorksheetRatingAndShareData.BookID

                                                        End If

                                                        If MediaBroadcastWorksheetPostBuyReport IsNot Nothing AndAlso ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePost = False) OrElse
                                                                                                                   (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions = False)) Then

                                                            If MediaBroadcastWorksheetPostBuyReport.DetailTime = "258a" OrElse MediaBroadcastWorksheetPostBuyReport.DetailTime = "259a" OrElse
                                                                MediaBroadcastWorksheetPostBuyReport.DetailTime = "300a" OrElse MediaBroadcastWorksheetPostBuyReport.DetailTime = "301a" Then

                                                                MediaSpotTVResearchDaytimeType = MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ID = MediaBroadcastWorksheetPostBuyReport.DetailID).SingleOrDefault

                                                                If MediaSpotTVResearchDaytimeType IsNot Nothing AndAlso MediaSpotTVResearchDaytimeType.ExactSpotDate.HasValue Then

                                                                    AddMinutes = If(MediaBroadcastWorksheetPostBuyReport.DetailTime.StartsWith("2"), 2, -2)

                                                                    If MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ExactSpotDate.HasValue AndAlso
                                                                                                                      DT.ExactSpotDate.Value = DateAdd(DateInterval.Day, If(AddMinutes = 2, 1, -1), DateAdd(DateInterval.Minute, AddMinutes, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value))).Any Then

                                                                        MediaSpotTVResearchDaytimeTypeID = MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ExactSpotDate.HasValue AndAlso
                                                                                                                                                          DT.ExactSpotDate.Value = DateAdd(DateInterval.Day, If(AddMinutes = 2, 1, -1), DateAdd(DateInterval.Minute, AddMinutes, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value))).First.ID

                                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Impressions) / 2) / 1000, 2)
                                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Rating) / 2, 2)

                                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Impressions) / 2) / 1000, 2)

                                                                        Else

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Rating) / 2, 2)

                                                                        End If

                                                                    Else

                                                                        MediaSpotTVResearchDaytimeTypeAvg = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                                                        MediaSpotTVResearchDaytimeType.SetBreakValues(AddMinutes)

                                                                        MediaSpotTVResearchDaytimeTypeAvg.Add(MediaSpotTVResearchDaytimeType)

                                                                        If RunBySpotBook Then

                                                                            BookIDs = New String() {SpotBookIDs.Where(Function(K) K.Key = MediaSpotTVResearchDaytimeType.ID).First.Value}

                                                                            HPUTBookIDs = New String() {}

                                                                        End If

                                                                        TVWorksheetRatingAndShareDataAvg = GetNielsenTVCDMARatingAndShareData(Session, NielsenMarketNumber, BookIDs, HPUTBookIDs,
                                                                                                                                          MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, MediaSpotTVResearchDaytimeTypeAvg,
                                                                                                                                          FoundNCCTVSyscodeID.Value)

                                                                        If TVWorksheetRatingAndShareDataAvg IsNot Nothing AndAlso TVWorksheetRatingAndShareDataAvg.Count = 1 Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataAvg(0).Impressions) / 2) / 1000, 2)
                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataAvg(0).Rating) / 2, 2)

                                                                            If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                                MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataAvg(0).Impressions) / 2) / 1000, 2)

                                                                            Else

                                                                                MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataAvg(0).Rating) / 2, 2)

                                                                            End If

                                                                        End If

                                                                    End If

                                                                End If

                                                            Else

                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)
                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                                Else

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                                End If

                                                            End If

                                                        End If

                                                    Next

                                                End If

                                            End If

                                        Next

                                    Next

                                    DMAMediaBroadcastWorksheetPostBuyReports = MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID AndAlso Entity.GeographyName = "DMA").ToList

                                    For Each VendorCode In (From Entity In DMAMediaBroadcastWorksheetPostBuyReports
                                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                              Entity.NielsenTVStationCode.HasValue AndAlso
                                                              Entity.NielsenTVStationCode <> 0
                                                            Select CStr(Entity.VendorCode)).Distinct.ToArray

                                        StationCodes = (From Entity In DMAMediaBroadcastWorksheetPostBuyReports
                                                        Where Entity.NielsenTVStationCode.HasValue AndAlso
                                                          Entity.VendorCode = VendorCode
                                                        Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                                        For Each StationCode In StationCodes

                                            MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                            DetailIDs = (From Entity In DMAMediaBroadcastWorksheetPostBuyReports
                                                         Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                           Entity.NielsenTVStationCode = StationCode AndAlso
                                                           Entity.DetailID.HasValue AndAlso
                                                           Entity.VendorCode = VendorCode
                                                         Select Entity.DetailID.Value).ToArray

                                            If DetailIDs IsNot Nothing AndAlso DetailIDs.Count > 0 Then

                                                MediaSpotTVResearchDaytimeTypes.AddRange((From Entity In AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Load(DbContext)
                                                                                          Where DetailIDs.Contains(Entity.ID)
                                                                                          Select Entity).ToList.Select(Function(E) New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(E)))

                                                If Not RunBySpotBook Then

                                                    TVWorksheetRatingAndShareDataList = GetNielsenTVRatingAndShareData(Session, NielsenMarketNumber, BookIDs, HPUTBookIDs,
                                                                                                                   MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, MediaSpotTVResearchDaytimeTypes)

                                                Else

                                                    SpotBookIDs = New Dictionary(Of Integer, Integer)

                                                    TVWorksheetRatingAndShareDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

                                                    For Each MediaSpotTVResearchDaytimeType In MediaSpotTVResearchDaytimeTypes

                                                        NielsenTVBookEntity = NielsenDbContext.NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                                            B.Stream = UseStream AndAlso
                                                                                                                            B.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                            B.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                            ((IsImpact AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = True) OrElse
                                                                                                                             (IsImpact = False AndAlso ImpactCollectionMethods.Contains(B.CollectionMethod) = False))).FirstOrDefault

                                                        If NielsenTVBookEntity IsNot Nothing Then

                                                            SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBookEntity.ID)

                                                        Else 'find previous book

                                                            NielsenTVBookEntity = NielsenDbContext.NielsenTVBooks.Where(Function(B) B.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                                                B.Stream = UseStream AndAlso
                                                                                                                                B.EndDateTime < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                                                                ImpactCollectionMethods.Contains(B.CollectionMethod) = False).OrderByDescending(Function(B) B.Year).ThenByDescending(Function(B) B.Month).FirstOrDefault

                                                            If NielsenTVBookEntity IsNot Nothing Then

                                                                SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenTVBookEntity.ID)

                                                            End If

                                                        End If

                                                    Next

                                                    For Each BookID In SpotBookIDs.Values.Distinct.ToList

                                                        SpotMediaSpotTVResearchDaytimeTypes = MediaSpotTVResearchDaytimeTypes.Where(Function(D) SpotBookIDs.Where(Function(V) V.Value = BookID).Select(Function(V) V.Key).Contains(D.ID)).ToList

                                                        TVWorksheetRatingAndShareDataList.AddRange(GetNielsenTVRatingAndShareData(Session, NielsenMarketNumber, New String() {BookID.ToString}, New String() {},
                                                                                                                              MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, SpotMediaSpotTVResearchDaytimeTypes))

                                                    Next

                                                End If

                                                For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                    MediaBroadcastWorksheetPostBuyReport = (From Entity In DMAMediaBroadcastWorksheetPostBuyReports
                                                                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                              Entity.NielsenTVStationCode = TVWorksheetRatingAndShareData.StationCode AndAlso
                                                                                              Entity.DetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID AndAlso
                                                                                              Entity.VendorCode = VendorCode).FirstOrDefault

                                                    If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                                        MediaBroadcastWorksheetPostBuyReport.DetailProgram = TVWorksheetRatingAndShareData.ProgramName

                                                        If String.IsNullOrWhiteSpace(TVWorksheetRatingAndShareData.BookName) = False Then

                                                            MediaBroadcastWorksheetPostBuyReport.BookName = TVWorksheetRatingAndShareData.BookName.Replace("-LO", "-L")

                                                        End If

                                                        MediaBroadcastWorksheetPostBuyReport.BookID = TVWorksheetRatingAndShareData.BookID

                                                    End If

                                                    If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                                        If ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePost = False) OrElse
                                                        (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions = False)) OrElse MediaBroadcastWorksheetMarketBook.IsFromMediaManager Then

                                                            If MediaBroadcastWorksheetPostBuyReport.DetailTime = "258a" OrElse MediaBroadcastWorksheetPostBuyReport.DetailTime = "259a" OrElse
                                                                MediaBroadcastWorksheetPostBuyReport.DetailTime = "300a" OrElse MediaBroadcastWorksheetPostBuyReport.DetailTime = "301a" Then

                                                                MediaSpotTVResearchDaytimeType = MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ID = MediaBroadcastWorksheetPostBuyReport.DetailID).SingleOrDefault

                                                                If MediaSpotTVResearchDaytimeType IsNot Nothing AndAlso MediaSpotTVResearchDaytimeType.ExactSpotDate.HasValue Then

                                                                    AddMinutes = If(MediaBroadcastWorksheetPostBuyReport.DetailTime.StartsWith("2"), 2, -2)

                                                                    If MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ExactSpotDate.HasValue AndAlso
                                                                                                                  DT.ExactSpotDate.Value = DateAdd(DateInterval.Day, If(AddMinutes = 2, 1, -1), DateAdd(DateInterval.Minute, AddMinutes, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value))).Any Then

                                                                        MediaSpotTVResearchDaytimeTypeID = MediaSpotTVResearchDaytimeTypes.Where(Function(DT) DT.ExactSpotDate.HasValue AndAlso
                                                                                                                                                      DT.ExactSpotDate.Value = DateAdd(DateInterval.Day, If(AddMinutes = 2, 1, -1), DateAdd(DateInterval.Minute, AddMinutes, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value))).First.ID

                                                                        If MediaBroadcastWorksheetMarketBook.IsFromMediaManager = False OrElse (MediaBroadcastWorksheetMarketBook.IsFromMediaManager AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions = False) Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Impressions) / 2) / 1000, 2)

                                                                        End If

                                                                        If MediaBroadcastWorksheetMarketBook.IsFromMediaManager = False OrElse (MediaBroadcastWorksheetMarketBook.IsFromMediaManager AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePost = False) Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Rating) / 2, 2)

                                                                        End If

                                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Impressions) / 2) / 1000, 2)

                                                                        Else

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataList.Where(Function(R) R.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeTypeID).First.Rating) / 2, 2)

                                                                        End If

                                                                    Else

                                                                        MediaSpotTVResearchDaytimeTypeAvg = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                                                        MediaSpotTVResearchDaytimeType.SetBreakValues(AddMinutes)

                                                                        MediaSpotTVResearchDaytimeTypeAvg.Add(MediaSpotTVResearchDaytimeType)

                                                                        If RunBySpotBook Then

                                                                            BookIDs = New String() {SpotBookIDs.Where(Function(K) K.Key = MediaSpotTVResearchDaytimeType.ID).First.Value}

                                                                            HPUTBookIDs = New String() {}

                                                                        End If

                                                                        TVWorksheetRatingAndShareDataAvg = GetNielsenTVRatingAndShareData(Session, NielsenMarketNumber, BookIDs, HPUTBookIDs, MediaDemoTypes, MediaDemoDetailTypes, New String() {StationCode}, MediaSpotTVResearchDaytimeTypeAvg)

                                                                        If TVWorksheetRatingAndShareDataAvg IsNot Nothing AndAlso TVWorksheetRatingAndShareDataAvg.Count = 1 Then

                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataAvg(0).Impressions) / 2) / 1000, 2)
                                                                            MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataAvg(0).Rating) / 2, 2)

                                                                            If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                                MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(((TVWorksheetRatingAndShareData.Impressions + TVWorksheetRatingAndShareDataAvg(0).Impressions) / 2) / 1000, 2)

                                                                            Else

                                                                                MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber((TVWorksheetRatingAndShareData.Rating + TVWorksheetRatingAndShareDataAvg(0).Rating) / 2, 2)

                                                                            End If

                                                                        End If

                                                                    End If

                                                                End If

                                                            Else

                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)
                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                                Else

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                                End If

                                                            End If

                                                        End If

                                                    End If

                                                Next

                                            End If

                                        Next

                                    Next

                                End If

                            Next

                        End Using

                    End If

                    If MediaBroadcastWorksheetPostBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetPostBuyReports.Any(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore) AndAlso Session.IsComscoreSetup Then

                        ShareHPUTBooks = New Generic.List(Of AdvantageFramework.DTO.Media.ShareHPUTBook)

                        For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.RatingsServiceID = Nielsen.Database.Entities.Methods.RatingsServiceID.Comscore).Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                            MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First

                            If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo Then

                                If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            Else

                                If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                                    MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value)

                                Else

                                    MediaDemographic = Nothing

                                End If

                            End If

                            Demographics = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)

                            If MediaDemographic IsNot Nothing Then

                                Demographics.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic(MediaDemographic))

                            End If

                            NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber
                            OldComscoreMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.OldComscoreMarketNumber

                            StationCodes = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                            Where Entity.NielsenTVStationCode.HasValue AndAlso
                                                      Entity.NielsenMarketNumber = NielsenMarketNumber
                                            Select CStr(Entity.NielsenTVStationCode.Value)).Distinct.ToArray

                            For Each StationCode In StationCodes

                                MediaBroadcastWorksheetPostBuyReport = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                                        Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                  Entity.NielsenTVStationCode = StationCode
                                                                        Select Entity).FirstOrDefault

                                If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                    AllMediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)
                                    MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                    DetailIDs = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                 Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                       Entity.NielsenTVStationCode = StationCode AndAlso
                                                       Entity.DetailID.HasValue
                                                 Select Entity.DetailID.Value).ToArray

                                    If MediaBroadcastWorksheetPostBuyReport.NCCTVSyscodeID.HasValue Then

                                        ComscoreTVStation = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadByNumber(DbContext, CInt(StationCode))

                                    Else

                                        ComscoreTVStation = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadByID(DbContext, CInt(StationCode))

                                    End If

                                    If DetailIDs IsNot Nothing AndAlso DetailIDs.Count > 0 AndAlso ComscoreTVStation IsNot Nothing Then

                                        AllMediaSpotTVResearchDaytimeTypes.AddRange((From Entity In AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Load(DbContext)
                                                                                     Where DetailIDs.Contains(Entity.ID)
                                                                                     Select Entity).ToList.Select(Function(E) New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(E)))

                                        If RunBySpotBook = False Then 'postbook is selected

                                            ComscoreTVBook = DbContext.ComscoreTVBooks.Find(MediaBroadcastWorksheetMarketBook.ShareBookID.Value)

                                            'MatchedMediaSpotTVResearchDaytimeTypes = (From Entity In AllMediaSpotTVResearchDaytimeTypes
                                            '                                          Where ComscoreTVBook.StartDateTime <= Entity.ExactSpotDate.Value AndAlso
                                            '                                                    ComscoreTVBook.EndDateTime >= Entity.ExactSpotDate.Value
                                            '                                          Select Entity).ToList

                                            'MediaSpotTVResearchDaytimeTypes = (From Entity In AllMediaSpotTVResearchDaytimeTypes
                                            '                                   Where MatchedMediaSpotTVResearchDaytimeTypes.Select(Function(NonAll) NonAll.ID).ToArray.Contains(Entity.ID) = False
                                            '                                   Select Entity).ToList

                                            MediaSpotTVResearchDaytimeTypes = AllMediaSpotTVResearchDaytimeTypes.ToList

                                            ShareHPUTBooks.Clear()

                                            ShareHPUTBook = New AdvantageFramework.DTO.Media.ShareHPUTBook
                                            ShareHPUTBook.ShareBookID = MediaBroadcastWorksheetMarketBook.ShareBookID
                                            ShareHPUTBook.HPUTBookID = MediaBroadcastWorksheetMarketBook.HPUTBookID

                                            ShareHPUTBooks.Add(ShareHPUTBook)

                                            TVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, Demographics, ShareHPUTBooks, MediaSpotTVResearchDaytimeTypes, OldComscoreMarketNumber, True)

                                        Else

                                            MediaSpotTVResearchDaytimeTypes = AllMediaSpotTVResearchDaytimeTypes

                                        End If

                                        If RunBySpotBook OrElse MediaSpotTVResearchDaytimeTypes.Count > 0 Then

                                            Books = New List(Of DTO.Media.ShareHPUTBook)

                                            If TVWorksheetRatingAndShareDataList Is Nothing Then

                                                TVWorksheetRatingAndShareDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

                                            End If

                                            For Each MediaSpotTVResearchDaytimeType In MediaSpotTVResearchDaytimeTypes.Where(Function(Entity) Entity.ExactSpotDate.HasValue).ToList

                                                ComscoreTVBook = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVBook.Load(DbContext)
                                                                  Where Entity.StartDateTime <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                        Entity.EndDateTime >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                  Select Entity).SingleOrDefault

                                                If ComscoreTVBook IsNot Nothing Then

                                                    Demographics = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)
                                                    Demographics.Add(New DTO.Media.SpotTV.Demographic(MediaDemographic))

                                                    Books.Clear()
                                                    Books.Add(New DTO.Media.ShareHPUTBook(ComscoreTVBook, 0))

                                                    AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, Demographics, Books, {MediaSpotTVResearchDaytimeType}.ToList, OldComscoreMarketNumber, True)

                                                    ComscoreCacheHeader = (From Entity In AdvantageFramework.Database.Procedures.ComscoreCacheHeader.Load(DbContext)
                                                                           Where Entity.BookID = ComscoreTVBook.ID AndAlso
                                                                                 Entity.MarketNumber = NielsenMarketNumber AndAlso
                                                                                 Entity.StationNumber = ComscoreTVStation.Number AndAlso
                                                                                 Entity.DemoNumber = MediaDemographic.ComscoreDemoNumber.Value
                                                                           Select Entity).SingleOrDefault

                                                    If ComscoreCacheHeader IsNot Nothing Then

                                                        ComscoreCacheDetail = (From Entity In AdvantageFramework.Database.Procedures.ComscoreCacheDetail.Load(DbContext)
                                                                               Where Entity.ComscoreCacheHeaderID = ComscoreCacheHeader.ID AndAlso
                                                                                     Entity.QuarterHour <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                               Select Entity).OrderByDescending(Function(Entity) Entity.QuarterHour).FirstOrDefault

                                                        If ComscoreCacheDetail IsNot Nothing Then

                                                            TVWorksheetRatingAndShareData = New AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData

                                                            TVWorksheetRatingAndShareData.Rating = If(ComscoreCacheDetail.Universe <> 0, ComscoreCacheDetail.AverageAudience * 100 / ComscoreCacheDetail.Universe, 0)
                                                            TVWorksheetRatingAndShareData.Impressions = ComscoreCacheDetail.AverageAudience
                                                            TVWorksheetRatingAndShareData.Universe = ComscoreCacheDetail.Universe
                                                            TVWorksheetRatingAndShareData.Share = ComscoreCacheDetail.Share
                                                            TVWorksheetRatingAndShareData.HPUT = ComscoreCacheDetail.SIU
                                                            TVWorksheetRatingAndShareData.ProgramName = ComscoreCacheDetail.SeriesName
                                                            TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID = MediaSpotTVResearchDaytimeType.ID
                                                            TVWorksheetRatingAndShareData.BookID = ComscoreTVBook.ID

                                                            TVWorksheetRatingAndShareDataList.Add(TVWorksheetRatingAndShareData)

                                                        End If

                                                    End If

                                                Else

                                                    TVWorksheetRatingAndShareDataList.Add(AdvantageFramework.ComScore.GetLocalTimeViews(DbContext, OldComscoreMarketNumber, ComscoreTVStation.Number, MediaDemographic.ComscoreDemoNumber, MediaSpotTVResearchDaytimeType.ExactSpotDate.Value, MediaSpotTVResearchDaytimeType.ID))

                                                End If

                                            Next

                                        End If

                                        If TVWorksheetRatingAndShareDataList IsNot Nothing AndAlso TVWorksheetRatingAndShareDataList.Count > 0 Then

                                            Books = New List(Of DTO.Media.ShareHPUTBook)

                                            For Each TVWorksheetRatingAndShareData In TVWorksheetRatingAndShareDataList

                                                MediaBroadcastWorksheetPostBuyReport = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                                                        Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                              Entity.NielsenTVStationCode = StationCode AndAlso
                                                                                              Entity.DetailID = TVWorksheetRatingAndShareData.MediaBroadcastWorksheetMarketDetailID).FirstOrDefault

                                                If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                                    MediaBroadcastWorksheetPostBuyReport.DetailProgram = TVWorksheetRatingAndShareData.ProgramName
                                                    MediaBroadcastWorksheetPostBuyReport.BookID = TVWorksheetRatingAndShareData.BookID

                                                    ComscoreTVBook = DbContext.ComscoreTVBooks.Find(TVWorksheetRatingAndShareData.BookID)

                                                    If ComscoreTVBook IsNot Nothing Then

                                                        MediaBroadcastWorksheetPostBuyReport.BookName = MonthName(ComscoreTVBook.Month, True) & (ComscoreTVBook.Year - 2000).ToString & "-L"

                                                    End If

                                                End If

                                                If MediaBroadcastWorksheetPostBuyReport IsNot Nothing AndAlso ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePost = False) OrElse
                                                                                                               (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions = False)) Then

                                                    'If RunBySpotBook Then

                                                    Books.Clear()

                                                    If MediaBroadcastWorksheetPostBuyReport.GeographyName = "CDMA" AndAlso MediaBroadcastWorksheetPostBuyReport.NCCTVSyscodeID.HasValue AndAlso
                                                                MediaBroadcastWorksheetPostBuyReport.NielsenTVStationCode.HasValue AndAlso MediaBroadcastWorksheetPostBuyReport.DetailID.HasValue Then


                                                        HHUEDemographicList = New Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic)
                                                        HHUEDemographicList.Add(New AdvantageFramework.DTO.Media.SpotTV.Demographic() With {.ComscoreDemoNumber = 0})

                                                        ShareHPUTBooks.Clear()

                                                        ComscoreTVBook = (From Entity In AdvantageFramework.Database.Procedures.ComscoreTVBook.Load(DbContext)
                                                                          Where Entity.ID = MediaBroadcastWorksheetPostBuyReport.BookID
                                                                          Select Entity).SingleOrDefault

                                                        ComscoreTVStation = AdvantageFramework.Database.Procedures.ComscoreTVStation.LoadByNumber(DbContext, MediaBroadcastWorksheetPostBuyReport.NielsenTVStationCode.Value)

                                                        If ComscoreTVBook IsNot Nothing AndAlso ComscoreTVStation IsNot Nothing Then

                                                            Market = (From Entity In AdvantageFramework.Database.Procedures.Market.Load(DbContext)
                                                                      Where Entity.ComscoreNewMarketNumber = MediaBroadcastWorksheetPostBuyReport.NielsenMarketNumber
                                                                      Select Entity).SingleOrDefault

                                                            If Market IsNot Nothing AndAlso IsNumeric(Market.NielsenTVCode) Then

                                                                ComScoreCDMAs = AdvantageFramework.ComScore.GetComScoreCDMAData(CInt(Market.NielsenTVCode), ComscoreTVStation.NetworkNumber, MediaBroadcastWorksheetPostBuyReport.NCCTVSyscodeID.Value,
                                                                                                                                ComscoreTVBook.Year, ComscoreTVBook.Month, Session)

                                                            Else

                                                                ComScoreCDMAs = Nothing

                                                            End If

                                                            Books.Add(New DTO.Media.ShareHPUTBook(ComscoreTVBook, 0))

                                                            Adults18PlusTVWorksheetRatingAndShareDataList = AdvantageFramework.ComScore.GetLocalTimeViewsCache(DbContext, ComscoreTVStation.Number, HHUEDemographicList, Books,
                                                                                                                                                               MediaSpotTVResearchDaytimeTypes, OldComscoreMarketNumber, True)

                                                            Adults18PlusTVWorksheetRatingAndShareData = Adults18PlusTVWorksheetRatingAndShareDataList.SingleOrDefault(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetPostBuyReport.DetailID.Value)

                                                            If ComScoreCDMAs IsNot Nothing AndAlso ComScoreCDMAs.Count > 0 AndAlso Adults18PlusTVWorksheetRatingAndShareData IsNot Nothing Then

                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = Math.Round(TVWorksheetRatingAndShareData.Impressions * ComScoreCDMAs.First.UEFactor, 0)

                                                                AdjustmentFactor = 0
                                                                CDMADemoUE = 0

                                                                If Adults18PlusTVWorksheetRatingAndShareData.Universe > 0 Then

                                                                    AdjustmentFactor = ComScoreCDMAs.First.RatingsAIUE / Adults18PlusTVWorksheetRatingAndShareData.Universe

                                                                End If

                                                                CDMADemoUE = AdjustmentFactor * TVWorksheetRatingAndShareData.Universe

                                                                If CDMADemoUE <> 0 Then

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActualRating = Math.Round((MediaBroadcastWorksheetPostBuyReport.DetailActualImpression.GetValueOrDefault(0) * 100) / CDMADemoUE, 2)

                                                                End If

                                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(MediaBroadcastWorksheetPostBuyReport.DetailActualImpression / 1000, 2)

                                                                Else

                                                                    MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(MediaBroadcastWorksheetPostBuyReport.DetailActualRating, 2)

                                                                End If

                                                                MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(MediaBroadcastWorksheetPostBuyReport.DetailActualImpression / 1000, 2)

                                                            End If

                                                        End If

                                                    Else

                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)
                                                        MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                        Else

                                                            MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                        End If

                                                    End If

                                                    'Else

                                                    '    MediaBroadcastWorksheetPostBuyReport.DetailActualImpression = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)
                                                    '    MediaBroadcastWorksheetPostBuyReport.DetailActualRating = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                    '    If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                    '        MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Impressions / 1000, 2)

                                                    '    Else

                                                    '        MediaBroadcastWorksheetPostBuyReport.DetailActual = FormatNumber(TVWorksheetRatingAndShareData.Rating, 2)

                                                    '    End If

                                                    'End If

                                                End If

                                            Next

                                        End If

                                    End If

                                End If

                            Next

                        Next

                    End If

                    MediaBroadcastWorksheetMarketDetailIDs = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                              Select Entity.MediaBroadcastWorksheetMarketDetailID).Distinct.ToArray

                    MediaBroadcastWorksheetPostBuyReports.ForEach(Sub(Entity)

                                                                      If String.IsNullOrWhiteSpace(Entity.PostBook) AndAlso String.IsNullOrWhiteSpace(Entity.BookName) = False Then

                                                                          Entity.PostBook = Entity.BookName.Replace("-LO", "-L")

                                                                      End If

                                                                  End Sub)

                    MediaBroadcastWorksheetPostBuyDRWs = MediaBroadcastWorksheetPostBuyReports.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetPostBuyDRWReport(Entity)).ToList

                    For Each MediaBroadcastWorksheetMarketDetailID In MediaBroadcastWorksheetMarketDetailIDs

                        For Each Line In MediaBroadcastWorksheetPostBuyDRWs.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID)

                            MediaBroadcastWorksheetPostBuyReport = MediaBroadcastWorksheetPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).FirstOrDefault

                            If MediaBroadcastWorksheetPostBuyReport IsNot Nothing Then

                                Line.ActualGrossImpressions = Math.Round((From Entity In MediaBroadcastWorksheetPostBuyReports
                                                                          Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                                                          Select Entity.DetailActualImpression.GetValueOrDefault(0)).Sum, 1)


                                Line.ActualGRP = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                  Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                                  Select Entity.DetailActualRating.GetValueOrDefault(0)).Sum

                                Line.ActualImpressions = Math.Round(Line.DetailActualImpression.GetValueOrDefault(0), 1)
                                Line.ActualRtg = Line.DetailActualRating.GetValueOrDefault(0)

                                Line.EstimatedImpressions = Math.Round(MediaBroadcastWorksheetPostBuyReport.DetailEstimateImpression.GetValueOrDefault(0), 1)
                                Line.EstimatedRtg = MediaBroadcastWorksheetPostBuyReport.DetailEstimateRating.GetValueOrDefault(0)

                                Line.EstimatedGRP = (From Entity In MediaBroadcastWorksheetPostBuyReports
                                                     Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                                     Select Entity.DetailEstimateRating.GetValueOrDefault(0)).Sum

                                Line.EstimatedGrossImpressions = Math.Round((From Entity In MediaBroadcastWorksheetPostBuyReports
                                                                             Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                                                             Select Entity.DetailEstimateImpression.GetValueOrDefault(0)).Sum, 1)

                                Line.RefreshIndexes()

                                If MediaBroadcastWorksheetPostBuyReport.OverridePost Then

                                    Line.ActualRtg = Line.EstimatedRtg.GetValueOrDefault(0)

                                    If Line.EstimatedRtg.GetValueOrDefault(0) = 0 Then

                                        Line.RatingsIndex = 0

                                    Else

                                        Line.RatingsIndex = Line.ActualRtg.GetValueOrDefault(0) / Line.EstimatedRtg * 100

                                    End If

                                Else

                                    Line.ActualRtg = Line.DetailActualRating.GetValueOrDefault(0)

                                    Line.RatingsIndex = Line.DetailActualRatingIndex

                                End If

                                If MediaBroadcastWorksheetPostBuyReport.OverridePost Then

                                    Line.ActualGRP = Line.EstimatedGRP.GetValueOrDefault(0)

                                End If

                                If MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions Then

                                    Line.ActualImpressions = Math.Round(Line.EstimatedImpressions.GetValueOrDefault(0), 1)

                                    If Line.EstimatedImpressions.GetValueOrDefault(0) = 0 Then

                                        Line.ImpressionsIndex = 0

                                    Else

                                        Line.ImpressionsIndex = Line.ActualImpressions.GetValueOrDefault(0) / Line.EstimatedImpressions * 100

                                    End If

                                Else

                                    Line.ActualImpressions = Math.Round(Line.DetailActualImpression.GetValueOrDefault(0), 1)

                                    Line.ImpressionsIndex = Line.DetailActualImpressionIndex

                                End If

                                If MediaBroadcastWorksheetPostBuyReport.OverridePostImpressions Then

                                    Line.ActualGrossImpressions = Math.Round(Line.EstimatedGrossImpressions.GetValueOrDefault(0), 1)

                                End If

                            End If

                        Next

                    Next

                End If

            Catch ex As Exception
                MediaBroadcastWorksheetPostBuyDRWs = Nothing
            Finally
                LoadMediaBroadcastWorksheetPostBuyDRWData = MediaBroadcastWorksheetPostBuyDRWs
            End Try

        End Function
        Public Function LoadMediaBroadcastWorksheetRadioPostBuyData(DbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object), FromDyanmicReportWriter As Boolean) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport)

            'objects
            Dim Session As AdvantageFramework.Security.Session = Nothing
            Dim MediaBroadcastWorksheetMarketBookList As Generic.List(Of DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook) = Nothing
            Dim MediaBroadcastWorksheetIDs As IEnumerable(Of Integer) = Nothing
            Dim DemographicID As Nullable(Of Integer) = Nothing
            Dim SqlParameterMediaBroadcastWorksheetID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaBroadcastWorksheetMarkets As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUsePrimaryRating As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUseImpressions As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastStartYearMonth As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastEndYearMonth As SqlClient.SqlParameter = Nothing
            Dim AllMediaBroadcastWorksheetRadioPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport) = Nothing
            Dim MediaBroadcastWorksheetRadioPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport) = Nothing
            Dim MediaBroadcastWorksheetRadioPostBuyReport As AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport = Nothing
            Dim MediaBroadcastWorksheetMarketBook As DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook = Nothing
            Dim NielsenRadioPeriod As AdvantageFramework.DTO.Media.NielsenRadioPeriod = Nothing
            Dim BookIDs() As String = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim NielsenMarketNumber As Integer = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailIDs As IEnumerable(Of Integer) = Nothing
            Dim RadioWorksheetRatingDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim DetailIDs As IEnumerable(Of Integer) = Nothing
            Dim UsePrimary As Boolean = True
            Dim MediaSpotTVResearchDaytimeType As AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType = Nothing
            Dim MediaSpotTVResearchDaytimeTypeAvg As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaSpotTVResearchDaytimeTypeID As Integer = 0
            Dim AddMinutes As Integer = 0
            Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim WorksheetMarketVendors As Generic.List(Of AdvantageFramework.DTO.Reporting.WorksheetMarketVendor) = Nothing
            Dim NielsenRadioPeriodEntity As AdvantageFramework.Nielsen.Database.Entities.NielsenRadioPeriod = Nothing
            Dim SpotBookIDs As Dictionary(Of Integer, Integer) = Nothing
            Dim SpotMediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim RunBySpotBook As Boolean = False

            Try

                Session = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.Session.ToString)

                MediaBroadcastWorksheetMarketBookList = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.MediaBroadcastWorksheetMarketBooks.ToString)
                WorksheetMarketVendors = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.WorksheetMarketVendors.ToString)

                MediaBroadcastWorksheetIDs = (From Entity In MediaBroadcastWorksheetMarketBookList
                                              Select Entity.MediaBroadcastWorksheetID).Distinct.ToArray

                AllMediaBroadcastWorksheetRadioPostBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport)

                For Each MediaBroadcastWorksheetID In MediaBroadcastWorksheetIDs

                    MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).First

                    If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo = True Then

                        If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value

                        End If

                        UsePrimary = False

                    End If

                    RunBySpotBook = Not MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.HasValue

                    SqlParameterMediaBroadcastWorksheetID = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_ID", SqlDbType.Int)
                    SqlParameterMediaBroadcastWorksheetMarkets = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_MARKETS", SqlDbType.VarChar)
                    SqlParameterMediaDemoID = New SqlClient.SqlParameter("@MEDIA_DEMO_ID", SqlDbType.Int)
                    SqlParameterUsePrimaryRating = New SqlClient.SqlParameter("@USE_PRIMARY_RATING", SqlDbType.Bit)
                    SqlParameterUseImpressions = New SqlClient.SqlParameter("@USE_IMPRESSIONS", SqlDbType.Bit)
                    SqlParameterBroadcastStartYearMonth = New SqlClient.SqlParameter("@BROADCAST_START_DATE", SqlDbType.Date)
                    SqlParameterBroadcastEndYearMonth = New SqlClient.SqlParameter("@BROADCAST_END_DATE", SqlDbType.Date)

                    SqlParameterMediaBroadcastWorksheetID.Value = MediaBroadcastWorksheetID
                    SqlParameterMediaBroadcastWorksheetMarkets.Value = String.Join(",", MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).Select(Function(MB) MB.MediaBroadcastWorksheetMarketID).ToArray)
                    SqlParameterMediaDemoID.Value = If(DemographicID.HasValue, DemographicID.Value, System.DBNull.Value)
                    SqlParameterUsePrimaryRating.Value = UsePrimary
                    SqlParameterUseImpressions.Value = MediaBroadcastWorksheetMarketBook.UseImpressions
                    SqlParameterBroadcastStartYearMonth.Value = MediaBroadcastWorksheetMarketBook.StartDate
                    SqlParameterBroadcastEndYearMonth.Value = MediaBroadcastWorksheetMarketBook.EndDate

                    AllMediaBroadcastWorksheetRadioPostBuyReports.AddRange(DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport) _
                        ("exec advsp_media_broadcast_worksheet_radio_postbuy_report @MEDIA_BROADCAST_WORKSHEET_ID, @MEDIA_BROADCAST_WORKSHEET_MARKETS, @MEDIA_DEMO_ID, @USE_PRIMARY_RATING, @USE_IMPRESSIONS, @BROADCAST_START_DATE, @BROADCAST_END_DATE",
                        SqlParameterMediaBroadcastWorksheetID, SqlParameterMediaBroadcastWorksheetMarkets, SqlParameterMediaDemoID, SqlParameterUsePrimaryRating, SqlParameterUseImpressions, SqlParameterBroadcastStartYearMonth, SqlParameterBroadcastEndYearMonth).ToList)

                Next

                MediaBroadcastWorksheetRadioPostBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport)

                If AllMediaBroadcastWorksheetRadioPostBuyReports IsNot Nothing AndAlso AllMediaBroadcastWorksheetRadioPostBuyReports.Count > 0 Then

                    If WorksheetMarketVendors IsNot Nothing AndAlso WorksheetMarketVendors.Count > 0 Then

                        For Each WorksheetMarketVendor In WorksheetMarketVendors

                            For Each MediaBroadcastWorksheetRadioPostBuyReport In AllMediaBroadcastWorksheetRadioPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketVendor.MediaBroadcastWorksheetMarketID AndAlso
                                                                                                                                                       Entity.VendorCode = WorksheetMarketVendor.VendorCode).ToList

                                MediaBroadcastWorksheetRadioPostBuyReports.Add(MediaBroadcastWorksheetRadioPostBuyReport)

                            Next

                        Next

                    End If

                End If

                If MediaBroadcastWorksheetRadioPostBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetRadioPostBuyReports.Count > 0 Then

                    Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                        For Each MediaBroadcastWorksheetRadioPostBuyReport In MediaBroadcastWorksheetRadioPostBuyReports

                            MediaBroadcastWorksheetRadioPostBuyReport.StationName = MediaBroadcastWorksheetRadioPostBuyReport.VendorName

                            MediaBroadcastWorksheetMarketBook = (From Entity In MediaBroadcastWorksheetMarketBookList
                                                                 Where Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetRadioPostBuyReport.MediaBroadcastWorksheetMarketID
                                                                 Select Entity).FirstOrDefault

                            If MediaBroadcastWorksheetMarketBook IsNot Nothing AndAlso MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.HasValue AndAlso MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.Value > 0 Then

                                If MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen AndAlso Session.IsNielsenSetup Then

                                    NielsenRadioPeriodEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.Value)

                                    If NielsenRadioPeriodEntity IsNot Nothing Then

                                        NielsenRadioPeriod = New AdvantageFramework.DTO.Media.NielsenRadioPeriod(NielsenRadioPeriodEntity)

                                        If NielsenRadioPeriod IsNot Nothing Then

                                            MediaBroadcastWorksheetRadioPostBuyReport.PostBook = NielsenRadioPeriod.Description

                                        End If

                                    End If

                                ElseIf MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan AndAlso Session.IsEastlanSetup Then

                                    NielsenRadioPeriodEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.Value)

                                    If NielsenRadioPeriodEntity IsNot Nothing Then

                                        NielsenRadioPeriod = New AdvantageFramework.DTO.Media.NielsenRadioPeriod(NielsenRadioPeriodEntity)

                                        If NielsenRadioPeriod IsNot Nothing Then

                                            MediaBroadcastWorksheetRadioPostBuyReport.PostBook = NielsenRadioPeriod.Description

                                        End If

                                    End If

                                    'ElseIf MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.NielsenCounty  AndAlso Session.IsNielsenCountySetup  Then

                                End If

                            End If

                        Next

                        MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = DemographicID)

                        If (MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = Nielsen.Database.Entities.Methods.RadioSource.Nielsen AndAlso Session.IsNielsenSetup) OrElse
                                 (MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = Nielsen.Database.Entities.Methods.RadioSource.Eastlan AndAlso Session.IsEastlanSetup) Then

                            For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetRadioPostBuyReports.Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                                MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First

                                BookIDs = New String() {MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.ToString}

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = DemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber

                                StationCodes = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                Where Entity.NielsenRadioStationComboID.HasValue AndAlso
                                                      Entity.NielsenMarketNumber = NielsenMarketNumber
                                                Select CStr(Entity.NielsenRadioStationComboID.Value)).Distinct.ToArray

                                For Each StationCode In StationCodes

                                    MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                    DetailIDs = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                 Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                       Entity.NielsenRadioStationComboID = StationCode AndAlso
                                                       Entity.DetailID.HasValue
                                                 Select Entity.DetailID.Value).ToArray

                                    If DetailIDs IsNot Nothing AndAlso DetailIDs.Count > 0 Then

                                        MediaSpotTVResearchDaytimeTypes.AddRange((From Entity In AdvantageFramework.Database.Procedures.AccountPayableRadioBroadcastDetail.Load(DbContext)
                                                                                  Where DetailIDs.Contains(Entity.ID)
                                                                                  Select Entity).ToList.Select(Function(E) New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(E)))

                                        If Not RunBySpotBook Then

                                            RadioWorksheetRatingDataList = GetNielsenRadioRatingAndShareData(Session, NielsenMarketNumber, BookIDs, MediaBroadcastWorksheetMarketBook.MediaBroadcastWorksheetMarketRadioGeographyID, New String() {StationCode},
                                                                                                             {DemographicID}, MediaDemoTypes, MediaDemoDetailTypes, MediaSpotTVResearchDaytimeTypes)

                                        Else

                                            SpotBookIDs = New Dictionary(Of Integer, Integer)

                                            RadioWorksheetRatingDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData)

                                            For Each MediaSpotTVResearchDaytimeType In MediaSpotTVResearchDaytimeTypes

                                                NielsenRadioPeriodEntity = Nothing

                                                If (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                    Where Entity.StartDate <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                          Entity.EndDate >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                    Select Entity).Count = 1 Then

                                                    NielsenRadioPeriodEntity = (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                                                Where Entity.StartDate <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                      Entity.EndDate >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                                Select Entity).Single

                                                ElseIf (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                        Where Entity.StartDate <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                              Entity.EndDate >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                        Select Entity).Count > 1 Then

                                                    NielsenRadioPeriodEntity = (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                                                Where Entity.StartDate <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                      Entity.EndDate >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                                Select Entity).OrderBy(Function(Entity) Entity.EndDate).FirstOrDefault

                                                End If

                                                If NielsenRadioPeriodEntity IsNot Nothing Then

                                                    SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenRadioPeriodEntity.ID)

                                                Else 'find previous book

                                                    NielsenRadioPeriodEntity = (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                                                Where Entity.EndDate < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                                Select Entity).OrderByDescending(Function(Entity) Entity.EndDate).FirstOrDefault

                                                    If NielsenRadioPeriodEntity IsNot Nothing Then

                                                        SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenRadioPeriodEntity.ID)

                                                    End If

                                                End If

                                            Next

                                            For Each BookID In SpotBookIDs.Values.Distinct.ToList

                                                SpotMediaSpotTVResearchDaytimeTypes = MediaSpotTVResearchDaytimeTypes.Where(Function(D) SpotBookIDs.Where(Function(V) V.Value = BookID).Select(Function(V) V.Key).Contains(D.ID)).ToList

                                                RadioWorksheetRatingDataList.AddRange(GetNielsenRadioRatingAndShareData(Session, NielsenMarketNumber, {BookID}, MediaBroadcastWorksheetMarketBook.MediaBroadcastWorksheetMarketRadioGeographyID, New String() {StationCode},
                                                                                                             {DemographicID}, MediaDemoTypes, MediaDemoDetailTypes, SpotMediaSpotTVResearchDaytimeTypes))

                                            Next

                                        End If

                                        For Each RadioWorksheetRatingData In RadioWorksheetRatingDataList

                                            MediaBroadcastWorksheetRadioPostBuyReport = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                                                         Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                               Entity.NielsenRadioStationComboID = RadioWorksheetRatingData.NielsenRadioStationComboID AndAlso
                                                                                               Entity.DetailID = RadioWorksheetRatingData.MediaBroadcastWorksheetMarketDetailID).FirstOrDefault

                                            If MediaBroadcastWorksheetRadioPostBuyReport IsNot Nothing Then

                                                'If SpotBookIDs.Contains(RadioWorksheetRatingData.MediaBroadcastWorksheetMarketDetailID) Then

                                                MediaBroadcastWorksheetRadioPostBuyReport.BookName = RadioWorksheetRatingData.BookName
                                                'MediaBroadcastWorksheetRadioPostBuyReport.PostBook = RadioWorksheetRatingData.BookName

                                                'End If

                                                If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetRadioPostBuyReport.PostBook) AndAlso FromDyanmicReportWriter Then

                                                    MediaBroadcastWorksheetRadioPostBuyReport.PostBook = RadioWorksheetRatingData.BookName

                                                End If

                                            End If

                                            If MediaBroadcastWorksheetRadioPostBuyReport IsNot Nothing AndAlso ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetRadioPostBuyReport.OverridePost = False) OrElse
                                                                                                                (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetRadioPostBuyReport.OverridePostAQH = False)) OrElse MediaBroadcastWorksheetMarketBook.IsFromMediaManager Then

                                                If MediaBroadcastWorksheetMarketBook.IsFromMediaManager = False OrElse (MediaBroadcastWorksheetMarketBook.IsFromMediaManager AndAlso MediaBroadcastWorksheetRadioPostBuyReport.OverridePostAQH = False) Then

                                                    MediaBroadcastWorksheetRadioPostBuyReport.DetailActualImpression = FormatNumber(RadioWorksheetRatingData.AQH / 100, 2)

                                                End If

                                                If MediaBroadcastWorksheetMarketBook.IsFromMediaManager = False OrElse (MediaBroadcastWorksheetMarketBook.IsFromMediaManager AndAlso MediaBroadcastWorksheetRadioPostBuyReport.OverridePost = False) Then

                                                    MediaBroadcastWorksheetRadioPostBuyReport.DetailActualRating = FormatNumber(RadioWorksheetRatingData.AQHRating, 2)

                                                End If

                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                    MediaBroadcastWorksheetRadioPostBuyReport.DetailActual = FormatNumber(RadioWorksheetRatingData.AQH / 100, 2)

                                                Else

                                                    MediaBroadcastWorksheetRadioPostBuyReport.DetailActual = FormatNumber(RadioWorksheetRatingData.AQHRating, 2)

                                                End If

                                                MediaBroadcastWorksheetRadioPostBuyReport.DetailBook = RadioWorksheetRatingData.BookName
                                                MediaBroadcastWorksheetRadioPostBuyReport.DetailNielsenRadioPeriodID = RadioWorksheetRatingData.NielsenRadioPeriodID

                                            End If

                                        Next

                                    End If

                                Next

                            Next

                        End If

                        MediaBroadcastWorksheetMarketDetailIDs = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                                  Select Entity.MediaBroadcastWorksheetMarketDetailID).Distinct.ToArray

                        For Each MediaBroadcastWorksheetMarketDetailID In MediaBroadcastWorksheetMarketDetailIDs

                            For Each Line In MediaBroadcastWorksheetRadioPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID)

                                MediaBroadcastWorksheetRadioPostBuyReport = MediaBroadcastWorksheetRadioPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).FirstOrDefault

                                If MediaBroadcastWorksheetRadioPostBuyReport IsNot Nothing Then

                                    If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                        Line.Estimate = MediaBroadcastWorksheetRadioPostBuyReport.OrdSpots * MediaBroadcastWorksheetRadioPostBuyReport.DetailEstimateFull / 100

                                    Else

                                        Line.Estimate = MediaBroadcastWorksheetRadioPostBuyReport.OrdSpots * MediaBroadcastWorksheetRadioPostBuyReport.DetailEstimate

                                    End If

                                End If

                                Line.Actual = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                               Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                               Select Entity.DetailActual.GetValueOrDefault(0)).Sum

                            Next

                        Next

                    End Using

                End If

            Catch ex As Exception
                MediaBroadcastWorksheetRadioPostBuyReports = Nothing
            Finally
                LoadMediaBroadcastWorksheetRadioPostBuyData = MediaBroadcastWorksheetRadioPostBuyReports
            End Try

        End Function
        Public Function LoadMediaBroadcastWorksheetRadioPostBuyDRWData(DbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyDRWReport)

            'objects
            Dim Session As AdvantageFramework.Security.Session = Nothing
            Dim MediaBroadcastWorksheetRadioPostBuyDRWs As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyDRWReport) = Nothing
            Dim MediaBroadcastWorksheetMarketBookList As Generic.List(Of DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook) = Nothing
            Dim MediaBroadcastWorksheetIDs As IEnumerable(Of Integer) = Nothing
            Dim DemographicID As Nullable(Of Integer) = Nothing
            Dim SqlParameterMediaBroadcastWorksheetID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaBroadcastWorksheetMarkets As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUsePrimaryRating As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUseImpressions As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastStartYearMonth As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastEndYearMonth As SqlClient.SqlParameter = Nothing
            Dim AllMediaBroadcastWorksheetRadioPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport) = Nothing
            Dim MediaBroadcastWorksheetRadioPostBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport) = Nothing
            Dim MediaBroadcastWorksheetRadioPostBuyReport As AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport = Nothing
            Dim MediaBroadcastWorksheetMarketBook As DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook = Nothing
            Dim NielsenRadioPeriod As AdvantageFramework.DTO.Media.NielsenRadioPeriod = Nothing
            Dim BookIDs() As String = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim NielsenMarketNumber As Integer = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailIDs As IEnumerable(Of Integer) = Nothing
            Dim RadioWorksheetRatingDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim DetailIDs As IEnumerable(Of Integer) = Nothing
            Dim UsePrimary As Boolean = True
            Dim MediaSpotTVResearchDaytimeType As AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType = Nothing
            Dim MediaSpotTVResearchDaytimeTypeAvg As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaSpotTVResearchDaytimeTypeID As Integer = 0
            Dim AddMinutes As Integer = 0
            Dim DemographicList As Generic.List(Of AdvantageFramework.DTO.Media.SpotTV.Demographic) = Nothing
            Dim WorksheetMarketVendors As Generic.List(Of AdvantageFramework.DTO.Reporting.WorksheetMarketVendor) = Nothing
            Dim NielsenRadioPeriodEntity As AdvantageFramework.Nielsen.Database.Entities.NielsenRadioPeriod = Nothing
            Dim SpotBookIDs As Dictionary(Of Integer, Integer) = Nothing
            Dim SpotMediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim RunBySpotBook As Boolean = False

            Try

                Session = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.Session.ToString)

                MediaBroadcastWorksheetMarketBookList = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.MediaBroadcastWorksheetMarketBooks.ToString)
                WorksheetMarketVendors = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.WorksheetMarketVendors.ToString)

                MediaBroadcastWorksheetIDs = (From Entity In MediaBroadcastWorksheetMarketBookList
                                              Select Entity.MediaBroadcastWorksheetID).Distinct.ToArray

                AllMediaBroadcastWorksheetRadioPostBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport)

                For Each MediaBroadcastWorksheetID In MediaBroadcastWorksheetIDs

                    MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).First

                    If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo = True Then

                        If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value

                        End If

                        UsePrimary = False

                    End If

                    RunBySpotBook = Not MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.HasValue

                    SqlParameterMediaBroadcastWorksheetID = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_ID", SqlDbType.Int)
                    SqlParameterMediaBroadcastWorksheetMarkets = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_MARKETS", SqlDbType.VarChar)
                    SqlParameterMediaDemoID = New SqlClient.SqlParameter("@MEDIA_DEMO_ID", SqlDbType.Int)
                    SqlParameterUsePrimaryRating = New SqlClient.SqlParameter("@USE_PRIMARY_RATING", SqlDbType.Bit)
                    SqlParameterUseImpressions = New SqlClient.SqlParameter("@USE_IMPRESSIONS", SqlDbType.Bit)
                    SqlParameterBroadcastStartYearMonth = New SqlClient.SqlParameter("@BROADCAST_START_DATE", SqlDbType.Date)
                    SqlParameterBroadcastEndYearMonth = New SqlClient.SqlParameter("@BROADCAST_END_DATE", SqlDbType.Date)

                    SqlParameterMediaBroadcastWorksheetID.Value = MediaBroadcastWorksheetID
                    SqlParameterMediaBroadcastWorksheetMarkets.Value = String.Join(",", MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).Select(Function(MB) MB.MediaBroadcastWorksheetMarketID).ToArray)
                    SqlParameterMediaDemoID.Value = If(DemographicID.HasValue, DemographicID.Value, System.DBNull.Value)
                    SqlParameterUsePrimaryRating.Value = UsePrimary
                    SqlParameterUseImpressions.Value = MediaBroadcastWorksheetMarketBook.UseImpressions
                    SqlParameterBroadcastStartYearMonth.Value = MediaBroadcastWorksheetMarketBook.StartDate
                    SqlParameterBroadcastEndYearMonth.Value = MediaBroadcastWorksheetMarketBook.EndDate

                    AllMediaBroadcastWorksheetRadioPostBuyReports.AddRange(DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport) _
                        ("exec advsp_media_broadcast_worksheet_radio_postbuy_report @MEDIA_BROADCAST_WORKSHEET_ID, @MEDIA_BROADCAST_WORKSHEET_MARKETS, @MEDIA_DEMO_ID, @USE_PRIMARY_RATING, @USE_IMPRESSIONS, @BROADCAST_START_DATE, @BROADCAST_END_DATE",
                        SqlParameterMediaBroadcastWorksheetID, SqlParameterMediaBroadcastWorksheetMarkets, SqlParameterMediaDemoID, SqlParameterUsePrimaryRating, SqlParameterUseImpressions, SqlParameterBroadcastStartYearMonth, SqlParameterBroadcastEndYearMonth).ToList)

                Next

                MediaBroadcastWorksheetRadioPostBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyReport)

                If AllMediaBroadcastWorksheetRadioPostBuyReports IsNot Nothing AndAlso AllMediaBroadcastWorksheetRadioPostBuyReports.Count > 0 Then

                    If WorksheetMarketVendors IsNot Nothing AndAlso WorksheetMarketVendors.Count > 0 Then

                        For Each WorksheetMarketVendor In WorksheetMarketVendors

                            For Each MediaBroadcastWorksheetRadioPostBuyReport In AllMediaBroadcastWorksheetRadioPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketVendor.MediaBroadcastWorksheetMarketID AndAlso
                                                                                                                                                       Entity.VendorCode = WorksheetMarketVendor.VendorCode).ToList

                                MediaBroadcastWorksheetRadioPostBuyReports.Add(MediaBroadcastWorksheetRadioPostBuyReport)

                            Next

                        Next

                    End If

                End If

                If MediaBroadcastWorksheetRadioPostBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetRadioPostBuyReports.Count > 0 Then

                    Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                        For Each MediaBroadcastWorksheetRadioPostBuyReport In MediaBroadcastWorksheetRadioPostBuyReports

                            MediaBroadcastWorksheetRadioPostBuyReport.StationName = MediaBroadcastWorksheetRadioPostBuyReport.VendorName

                            MediaBroadcastWorksheetMarketBook = (From Entity In MediaBroadcastWorksheetMarketBookList
                                                                 Where Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetRadioPostBuyReport.MediaBroadcastWorksheetMarketID
                                                                 Select Entity).FirstOrDefault

                            If MediaBroadcastWorksheetMarketBook IsNot Nothing AndAlso MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.HasValue AndAlso MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.Value > 0 Then

                                If MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen AndAlso Session.IsNielsenSetup Then

                                    NielsenRadioPeriodEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.Value)

                                    If NielsenRadioPeriodEntity IsNot Nothing Then

                                        NielsenRadioPeriod = New AdvantageFramework.DTO.Media.NielsenRadioPeriod(NielsenRadioPeriodEntity)

                                        If NielsenRadioPeriod IsNot Nothing Then

                                            MediaBroadcastWorksheetRadioPostBuyReport.PostBook = NielsenRadioPeriod.Description

                                        End If

                                    End If

                                ElseIf MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan AndAlso Session.IsEastlanSetup Then

                                    NielsenRadioPeriodEntity = AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByID(NielsenDbContext, MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.Value)

                                    If NielsenRadioPeriodEntity IsNot Nothing Then

                                        NielsenRadioPeriod = New AdvantageFramework.DTO.Media.NielsenRadioPeriod(NielsenRadioPeriodEntity)

                                        If NielsenRadioPeriod IsNot Nothing Then

                                            MediaBroadcastWorksheetRadioPostBuyReport.PostBook = NielsenRadioPeriod.Description

                                        End If

                                    End If

                                    'ElseIf MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.NielsenCounty  AndAlso Session.IsNielsenCountySetup  Then

                                End If

                            End If

                        Next

                        MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = DemographicID)

                        If (MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = Nielsen.Database.Entities.Methods.RadioSource.Nielsen AndAlso Session.IsNielsenSetup) OrElse
                                 (MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = Nielsen.Database.Entities.Methods.RadioSource.Eastlan AndAlso Session.IsEastlanSetup) Then

                            For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetRadioPostBuyReports.Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                                MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First

                                BookIDs = New String() {MediaBroadcastWorksheetMarketBook.NielsenRadioPeriodID1.ToString}

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = DemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber

                                StationCodes = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                Where Entity.NielsenRadioStationComboID.HasValue AndAlso
                                                      Entity.NielsenMarketNumber = NielsenMarketNumber
                                                Select CStr(Entity.NielsenRadioStationComboID.Value)).Distinct.ToArray

                                For Each StationCode In StationCodes

                                    MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                    DetailIDs = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                 Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                       Entity.NielsenRadioStationComboID = StationCode AndAlso
                                                       Entity.DetailID.HasValue
                                                 Select Entity.DetailID.Value).ToArray

                                    If DetailIDs IsNot Nothing AndAlso DetailIDs.Count > 0 Then

                                        MediaSpotTVResearchDaytimeTypes.AddRange((From Entity In AdvantageFramework.Database.Procedures.AccountPayableRadioBroadcastDetail.Load(DbContext)
                                                                                  Where DetailIDs.Contains(Entity.ID)
                                                                                  Select Entity).ToList.Select(Function(E) New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(E)))

                                        If Not RunBySpotBook Then

                                            RadioWorksheetRatingDataList = GetNielsenRadioRatingAndShareData(Session, NielsenMarketNumber, BookIDs, MediaBroadcastWorksheetMarketBook.MediaBroadcastWorksheetMarketRadioGeographyID, New String() {StationCode},
                                                                                                             {DemographicID}, MediaDemoTypes, MediaDemoDetailTypes, MediaSpotTVResearchDaytimeTypes)

                                        Else

                                            SpotBookIDs = New Dictionary(Of Integer, Integer)

                                            RadioWorksheetRatingDataList = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData)

                                            For Each MediaSpotTVResearchDaytimeType In MediaSpotTVResearchDaytimeTypes

                                                NielsenRadioPeriodEntity = Nothing

                                                If (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                    Where Entity.StartDate <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                          Entity.EndDate >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                    Select Entity).Count = 1 Then

                                                    NielsenRadioPeriodEntity = (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                                                Where Entity.StartDate <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                      Entity.EndDate >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                                Select Entity).Single

                                                ElseIf (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                        Where Entity.StartDate <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                              Entity.EndDate >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                        Select Entity).Count > 1 Then

                                                    NielsenRadioPeriodEntity = (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                                                Where Entity.StartDate <= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value AndAlso
                                                                                      Entity.EndDate >= MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                                Select Entity).OrderBy(Function(Entity) Entity.EndDate).FirstOrDefault

                                                End If

                                                If NielsenRadioPeriodEntity IsNot Nothing Then

                                                    SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenRadioPeriodEntity.ID)

                                                Else 'find previous book

                                                    NielsenRadioPeriodEntity = (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.LoadByNielsenRadioMarketNumberAndSource(NielsenDbContext, NielsenMarketNumber, MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource)
                                                                                Where Entity.EndDate < MediaSpotTVResearchDaytimeType.ExactSpotDate.Value
                                                                                Select Entity).OrderByDescending(Function(Entity) Entity.EndDate).FirstOrDefault

                                                    If NielsenRadioPeriodEntity IsNot Nothing Then

                                                        SpotBookIDs.Add(MediaSpotTVResearchDaytimeType.ID, NielsenRadioPeriodEntity.ID)

                                                    End If

                                                End If

                                            Next

                                            For Each BookID In SpotBookIDs.Values.Distinct.ToList

                                                SpotMediaSpotTVResearchDaytimeTypes = MediaSpotTVResearchDaytimeTypes.Where(Function(D) SpotBookIDs.Where(Function(V) V.Value = BookID).Select(Function(V) V.Key).Contains(D.ID)).ToList

                                                RadioWorksheetRatingDataList.AddRange(GetNielsenRadioRatingAndShareData(Session, NielsenMarketNumber, {BookID}, MediaBroadcastWorksheetMarketBook.MediaBroadcastWorksheetMarketRadioGeographyID, New String() {StationCode},
                                                                                                             {DemographicID}, MediaDemoTypes, MediaDemoDetailTypes, SpotMediaSpotTVResearchDaytimeTypes))

                                            Next

                                        End If

                                        For Each RadioWorksheetRatingData In RadioWorksheetRatingDataList

                                            MediaBroadcastWorksheetRadioPostBuyReport = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                                                         Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                               Entity.NielsenRadioStationComboID = RadioWorksheetRatingData.NielsenRadioStationComboID AndAlso
                                                                                               Entity.DetailID = RadioWorksheetRatingData.MediaBroadcastWorksheetMarketDetailID).FirstOrDefault

                                            If MediaBroadcastWorksheetRadioPostBuyReport IsNot Nothing Then

                                                'If SpotBookIDs.Contains(RadioWorksheetRatingData.MediaBroadcastWorksheetMarketDetailID) Then

                                                MediaBroadcastWorksheetRadioPostBuyReport.BookName = RadioWorksheetRatingData.BookName
                                                'MediaBroadcastWorksheetRadioPostBuyReport.PostBook = RadioWorksheetRatingData.BookName

                                                'End If

                                                If String.IsNullOrWhiteSpace(MediaBroadcastWorksheetRadioPostBuyReport.PostBook) Then

                                                    MediaBroadcastWorksheetRadioPostBuyReport.PostBook = RadioWorksheetRatingData.BookName

                                                End If

                                            End If

                                            If MediaBroadcastWorksheetRadioPostBuyReport IsNot Nothing AndAlso ((MediaBroadcastWorksheetMarketBook.UseImpressions = False AndAlso MediaBroadcastWorksheetRadioPostBuyReport.OverridePost = False) OrElse
                                                                                                                (MediaBroadcastWorksheetMarketBook.UseImpressions AndAlso MediaBroadcastWorksheetRadioPostBuyReport.OverridePostAQH = False)) OrElse MediaBroadcastWorksheetMarketBook.IsFromMediaManager Then

                                                If MediaBroadcastWorksheetMarketBook.IsFromMediaManager = False OrElse (MediaBroadcastWorksheetMarketBook.IsFromMediaManager AndAlso MediaBroadcastWorksheetRadioPostBuyReport.OverridePostAQH = False) Then

                                                    MediaBroadcastWorksheetRadioPostBuyReport.DetailActualImpression = FormatNumber(RadioWorksheetRatingData.AQH / 100, 2)

                                                End If

                                                If MediaBroadcastWorksheetMarketBook.IsFromMediaManager = False OrElse (MediaBroadcastWorksheetMarketBook.IsFromMediaManager AndAlso MediaBroadcastWorksheetRadioPostBuyReport.OverridePost = False) Then

                                                    MediaBroadcastWorksheetRadioPostBuyReport.DetailActualRating = FormatNumber(RadioWorksheetRatingData.AQHRating, 2)

                                                End If

                                                If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                    MediaBroadcastWorksheetRadioPostBuyReport.DetailActual = FormatNumber(RadioWorksheetRatingData.AQH / 100, 2)

                                                Else

                                                    MediaBroadcastWorksheetRadioPostBuyReport.DetailActual = FormatNumber(RadioWorksheetRatingData.AQHRating, 2)

                                                End If

                                                MediaBroadcastWorksheetRadioPostBuyReport.DetailBook = RadioWorksheetRatingData.BookName
                                                MediaBroadcastWorksheetRadioPostBuyReport.DetailNielsenRadioPeriodID = RadioWorksheetRatingData.NielsenRadioPeriodID

                                            End If

                                        Next

                                    End If

                                Next

                            Next

                        End If

                        MediaBroadcastWorksheetMarketDetailIDs = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                                  Select Entity.MediaBroadcastWorksheetMarketDetailID).Distinct.ToArray

                        MediaBroadcastWorksheetRadioPostBuyReports.ForEach(Sub(Entity)

                                                                               If String.IsNullOrWhiteSpace(Entity.PostBook) AndAlso String.IsNullOrWhiteSpace(Entity.BookName) = False Then

                                                                                   Entity.PostBook = Entity.BookName.Replace("-LO", "-L")

                                                                               End If

                                                                           End Sub)

                        MediaBroadcastWorksheetRadioPostBuyDRWs = MediaBroadcastWorksheetRadioPostBuyReports.Select(Function(Entity) New AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPostBuyDRWReport(Entity)).ToList

                        For Each MediaBroadcastWorksheetMarketDetailID In MediaBroadcastWorksheetMarketDetailIDs

                            For Each Line In MediaBroadcastWorksheetRadioPostBuyDRWs.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID)

                                MediaBroadcastWorksheetRadioPostBuyReport = MediaBroadcastWorksheetRadioPostBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).FirstOrDefault

                                If MediaBroadcastWorksheetRadioPostBuyReport IsNot Nothing Then

                                    Line.ActualGrossImpression = Math.Round((From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                                             Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                                                             Select Entity.DetailActualImpression.GetValueOrDefault(0)).Sum, 1)


                                    Line.ActualGRP = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                      Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                                      Select Entity.DetailActualRating.GetValueOrDefault(0)).Sum

                                    Line.ActualImpression = Math.Round(Line.DetailActualImpression.GetValueOrDefault(0), 1)
                                    Line.ActualRtg = Line.DetailActualRating.GetValueOrDefault(0)

                                    Line.EstimatedImpression = Math.Round(MediaBroadcastWorksheetRadioPostBuyReport.DetailEstimateImpression.GetValueOrDefault(0), 1)
                                    Line.EstimatedRtg = MediaBroadcastWorksheetRadioPostBuyReport.DetailEstimateRating.GetValueOrDefault(0)

                                    Line.EstimatedGRP = (From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                         Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                                         Select Entity.DetailEstimateRating.GetValueOrDefault(0)).Sum

                                    Line.EstimatedGrossImpression = Math.Round((From Entity In MediaBroadcastWorksheetRadioPostBuyReports
                                                                                Where Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID
                                                                                Select Entity.DetailEstimateImpression.GetValueOrDefault(0)).Sum, 1)

                                    Line.RefreshIndexes()

                                    If MediaBroadcastWorksheetRadioPostBuyReport.OverridePost Then

                                        Line.ActualRtg = Line.EstimatedRtg.GetValueOrDefault(0)

                                        If Line.EstimatedRtg.GetValueOrDefault(0) = 0 Then

                                            Line.RatingsIndex = 0

                                        Else

                                            Line.RatingsIndex = Line.ActualRtg.GetValueOrDefault(0) / Line.EstimatedRtg * 100

                                        End If

                                    Else

                                        Line.ActualRtg = Line.DetailActualRating.GetValueOrDefault(0)

                                        Line.RatingsIndex = Line.DetailActualRatingIndex

                                    End If

                                    If MediaBroadcastWorksheetRadioPostBuyReport.OverridePost Then

                                        Line.ActualGRP = Line.EstimatedGRP.GetValueOrDefault(0)

                                    End If

                                    If MediaBroadcastWorksheetRadioPostBuyReport.OverridePostAQH Then

                                        Line.ActualImpression = Math.Round(Line.EstimatedImpression.GetValueOrDefault(0), 1)

                                        If Line.EstimatedImpression.GetValueOrDefault(0) = 0 Then

                                            Line.ImpressionIndex = 0

                                        Else

                                            Line.ImpressionIndex = Line.ActualImpression.GetValueOrDefault(0) / Line.EstimatedImpression * 100

                                        End If

                                    Else

                                        Line.ActualImpression = Math.Round(Line.DetailActualImpression.GetValueOrDefault(0), 1)

                                        Line.ImpressionIndex = Line.DetailActualImpressionIndex

                                    End If

                                    If MediaBroadcastWorksheetRadioPostBuyReport.OverridePostAQH Then

                                        Line.ActualGrossImpression = Math.Round(Line.EstimatedGrossImpression.GetValueOrDefault(0), 1)

                                    End If

                                End If

                            Next

                        Next

                    End Using

                End If

            Catch ex As Exception
                MediaBroadcastWorksheetRadioPostBuyDRWs = Nothing
            Finally
                LoadMediaBroadcastWorksheetRadioPostBuyDRWData = MediaBroadcastWorksheetRadioPostBuyDRWs
            End Try

        End Function
        Private Function GetNielsenTVRatingAndShareData(Session As AdvantageFramework.Security.Session, NielsenMarketNumber As Integer, BookIDs() As String, HPUTBookIDs() As String,
                                                        MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                        MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                        StationCodes() As String,
                                                        MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

            'objects
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHPUTBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_MARKET_NUM", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterBookIDs = New System.Data.SqlClient.SqlParameter("@BookIDs", SqlDbType.VarChar)
            SqlParameterBookIDs.Value = Join(BookIDs, ",")

            SqlParameterHPUTBookIDs = New System.Data.SqlClient.SqlParameter("@HPUTBookIDs", SqlDbType.VarChar)

            If HPUTBookIDs.Count = 0 Then

                SqlParameterHPUTBookIDs.Value = System.DBNull.Value

            Else

                SqlParameterHPUTBookIDs.Value = Join(HPUTBookIDs, ",")

            End If

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterStationCodes = New System.Data.SqlClient.SqlParameter("@StationCodes", SqlDbType.VarChar)
            SqlParameterStationCodes.Value = Join(StationCodes, ",")

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext) Then

                    SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

                Else

                    SqlParameterHostedClientCode.Value = System.DBNull.Value

                End If

            End Using

            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                NielsenDbContext.Database.Connection.Open()

                TVWorksheetRatingAndShareDataList = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)("EXEC advsp_tv_worksheet_postbuy_rating @NIELSEN_MARKET_NUM, @BookIDs, @HPUTBookIDs, @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @StationCodes, @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @HOSTED_CLIENT_CODE",
                                                                                                                                                                  SqlParameterNielsenMarketNumber, SqlParameterBookIDs, SqlParameterHPUTBookIDs, SqlParameterMediaDemoType,
                                                                                                                                                                  SqlParameterMediaDemoDetailType, SqlParameterStationCodes, SqlParameterMediaSpotTVResearchDaytimeType, SqlParameterHostedClientCode).ToList()

            End Using

            GetNielsenTVRatingAndShareData = TVWorksheetRatingAndShareDataList

        End Function
        Private Function GetNielsenTVCDMARatingAndShareData(Session As AdvantageFramework.Security.Session, NielsenMarketNumber As Integer, BookIDs() As String, HPUTBookIDs() As String,
                                                            MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                            MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                            StationCodes() As String,
                                                            MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType),
                                                            SyscodeID As Integer) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)

            'objects
            Dim TVWorksheetRatingAndShareDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData) = Nothing
            Dim SqlParameterNielsenMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHPUTBookIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSyscode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_MARKET_NUM", SqlDbType.Int)
            SqlParameterNielsenMarketNumber.Value = NielsenMarketNumber

            SqlParameterBookIDs = New System.Data.SqlClient.SqlParameter("@BookIDs", SqlDbType.VarChar)
            SqlParameterBookIDs.Value = Join(BookIDs, ",")

            SqlParameterHPUTBookIDs = New System.Data.SqlClient.SqlParameter("@HPUTBookIDs", SqlDbType.VarChar)

            If HPUTBookIDs.Count = 0 Then

                SqlParameterHPUTBookIDs.Value = System.DBNull.Value

            Else

                SqlParameterHPUTBookIDs.Value = Join(HPUTBookIDs, ",")

            End If

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterStationCodes = New System.Data.SqlClient.SqlParameter("@StationCodes", SqlDbType.VarChar)
            SqlParameterStationCodes.Value = Join(StationCodes, ",")

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterSyscode = New System.Data.SqlClient.SqlParameter("@NCCTVSyscodeID", SqlDbType.Int)
            SqlParameterSyscode.Value = SyscodeID

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext) Then

                    SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

                Else

                    SqlParameterHostedClientCode.Value = System.DBNull.Value

                End If

            End Using

            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                NielsenDbContext.Database.Connection.Open()

                TVWorksheetRatingAndShareDataList = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.TVWorksheetRatingAndShareData)("EXEC advsp_tv_worksheet_postbuy_rating_cable @NIELSEN_MARKET_NUM, @BookIDs, @HPUTBookIDs, @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @StationCodes, @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @NCCTVSyscodeID, @HOSTED_CLIENT_CODE",
                                                                                                                                                                  SqlParameterNielsenMarketNumber, SqlParameterBookIDs, SqlParameterHPUTBookIDs, SqlParameterMediaDemoType,
                                                                                                                                                                  SqlParameterMediaDemoDetailType, SqlParameterStationCodes, SqlParameterMediaSpotTVResearchDaytimeType,
                                                                                                                                                                  SqlParameterSyscode, SqlParameterHostedClientCode).ToList()

            End Using

            GetNielsenTVCDMARatingAndShareData = TVWorksheetRatingAndShareDataList

        End Function

        Public Function LoadCheckRegisterData(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CheckRegister)


            Dim CheckRegisterReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CheckRegister) = Nothing

            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBankList As System.Data.SqlClient.SqlParameter = Nothing
            'Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            'Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            'Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            'Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeComputerChecks As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeManualChecks As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeComments As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterLimitVoidedChecks As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterLimitOutstandingChecks As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterLimitClearedChecks As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterPostPeriodStart As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPostPeriodEnd As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterVendorist As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUsePayToVendorCode As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterBankList = New System.Data.SqlClient.SqlParameter("@BANK_LIST", SqlDbType.VarChar)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@start_date", SqlDbType.VarChar) With {.Value = ParameterDictionary("StartingDate")}
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.VarChar) With {.Value = ParameterDictionary("EndingDate")}
                SqlParameterIncludeComputerChecks = New System.Data.SqlClient.SqlParameter("@IncludeComputerChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("IncludeComputerChecks")}
                SqlParameterIncludeManualChecks = New System.Data.SqlClient.SqlParameter("@IncludeManualChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("IncludeManualChecks")}
                SqlParameterIncludeComments = New System.Data.SqlClient.SqlParameter("@IncludeComments", SqlDbType.Bit) With {.Value = ParameterDictionary("IncludeComments")}
                SqlParameterLimitVoidedChecks = New System.Data.SqlClient.SqlParameter("@LimitVoidedChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("LimitVoidedChecks")}
                SqlParameterLimitOutstandingChecks = New System.Data.SqlClient.SqlParameter("@LimitOutstandingChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("LimitOutstandingChecks")}
                SqlParameterLimitClearedChecks = New System.Data.SqlClient.SqlParameter("@LimitClearedChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("LimitClearedChecks")}

                SqlParameterPostPeriodStart = New System.Data.SqlClient.SqlParameter("@post_period_start", SqlDbType.VarChar) With {.Value = ParameterDictionary("PostPeriodStart")}
                SqlParameterPostPeriodEnd = New System.Data.SqlClient.SqlParameter("@post_period_end", SqlDbType.VarChar) With {.Value = ParameterDictionary("PostPeriodEnd")}

                'SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
                'SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                'SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                'SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)

                SqlParameterVendorist = New System.Data.SqlClient.SqlParameter("@VENDOR_LIST", SqlDbType.VarChar)
                SqlParameterUsePayToVendorCode = New System.Data.SqlClient.SqlParameter("@UsePayToVendorCode", SqlDbType.Bit) With {.Value = ParameterDictionary("UsePayToVendorCode")}

                Dim SelectedBanks As Generic.List(Of String) = Nothing
                'Dim SelectedOffices As Generic.List(Of String) = Nothing
                'Dim SelectedClients As Generic.List(Of String) = Nothing
                'Dim SelectedDivisions As Generic.List(Of String) = Nothing
                'Dim SelectedProducts As Generic.List(Of String) = Nothing

                Dim SelectedVendors As Generic.List(Of String) = Nothing

                'Dim Offices As String = ""
                'Dim Clients As String = ""
                'Dim Divisions As String = ""
                'Dim Products As String = ""

                SelectedBanks = ParameterDictionary("SelectedBanks")

                'SelectedOffices = ParameterDictionary("SelectedOffices")

                'SelectedClients = ParameterDictionary("SelectedClients")

                'SelectedDivisions = ParameterDictionary("SelectedDivisions")

                'SelectedProducts = ParameterDictionary("SelectedProducts")

                SelectedVendors = ParameterDictionary("SelectedVendors")

                If SelectedBanks Is Nothing Then

                    SqlParameterBankList.Value = System.DBNull.Value

                ElseIf SelectedBanks.Count = 0 Then

                    SqlParameterBankList.Value = System.DBNull.Value

                Else

                    SqlParameterBankList.Value = Join(SelectedBanks.ToArray, ",")

                End If

                If SelectedVendors Is Nothing Then

                    SqlParameterVendorist.Value = System.DBNull.Value

                ElseIf SelectedVendors.Count = 0 Then

                    SqlParameterVendorist.Value = System.DBNull.Value

                Else

                    SqlParameterVendorist.Value = Join(SelectedVendors.ToArray, ",")

                End If

                'If SelectedOffices Is Nothing Then

                '    SqlParameterOfficeList.Value = System.DBNull.Value

                'Else

                '    SqlParameterOfficeList.Value = Join(SelectedOffices.ToArray, ",")

                'End If

                'If SelectedClients Is Nothing Then

                '    SqlParameterClientList.Value = System.DBNull.Value

                'Else

                '    SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

                'End If

                'If SelectedDivisions Is Nothing Then

                '    SqlParameterDivisionList.Value = System.DBNull.Value

                'Else

                '    SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

                'End If

                'If SelectedProducts Is Nothing Then

                '    SqlParameterProductList.Value = System.DBNull.Value

                'Else

                '    SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

                'End If

                CheckRegisterReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.CheckRegister)("" &
                "EXEC dbo.advsp_check_register @BANK_LIST, @start_date, @end_date, @IncludeComputerChecks, @IncludeManualChecks, @IncludeComments, " &
                "@LimitVoidedChecks, @LimitOutstandingChecks, @LimitClearedChecks, @post_period_start, @post_period_end, @VENDOR_LIST, @UsePayToVendorCode",
                SqlParameterBankList, SqlParameterStartDate, SqlParameterEndDate, SqlParameterIncludeComputerChecks, SqlParameterIncludeManualChecks, SqlParameterIncludeComments,
                SqlParameterLimitVoidedChecks, SqlParameterLimitOutstandingChecks, SqlParameterLimitClearedChecks, SqlParameterPostPeriodStart, SqlParameterPostPeriodEnd, SqlParameterVendorist, SqlParameterUsePayToVendorCode).ToList

            Catch ex As Exception
                CheckRegisterReports = Nothing
            Finally
                LoadCheckRegisterData = CheckRegisterReports
            End Try

        End Function

        Public Function LoadCheckRegisterDataWithInvoiceDetails(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CheckRegisterWithInvoiceDetails)


            Dim CheckRegisterReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CheckRegisterWithInvoiceDetails) = Nothing

            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBankList As System.Data.SqlClient.SqlParameter = Nothing
            'Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            'Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            'Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            'Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeComputerChecks As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeManualChecks As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeComments As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterLimitVoidedChecks As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterLimitOutstandingChecks As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterLimitClearedChecks As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterPostPeriodStart As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPostPeriodEnd As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterVendorist As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUsePayToVendorCode As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterBankList = New System.Data.SqlClient.SqlParameter("@BANK_LIST", SqlDbType.VarChar)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@start_date", SqlDbType.VarChar) With {.Value = ParameterDictionary("StartingDate")}
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.VarChar) With {.Value = ParameterDictionary("EndingDate")}
                SqlParameterIncludeComputerChecks = New System.Data.SqlClient.SqlParameter("@IncludeComputerChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("IncludeComputerChecks")}
                SqlParameterIncludeManualChecks = New System.Data.SqlClient.SqlParameter("@IncludeManualChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("IncludeManualChecks")}
                SqlParameterIncludeComments = New System.Data.SqlClient.SqlParameter("@IncludeComments", SqlDbType.Bit) With {.Value = ParameterDictionary("IncludeComments")}
                SqlParameterLimitVoidedChecks = New System.Data.SqlClient.SqlParameter("@LimitVoidedChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("LimitVoidedChecks")}
                SqlParameterLimitOutstandingChecks = New System.Data.SqlClient.SqlParameter("@LimitOutstandingChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("LimitOutstandingChecks")}
                SqlParameterLimitClearedChecks = New System.Data.SqlClient.SqlParameter("@LimitClearedChecks", SqlDbType.Bit) With {.Value = ParameterDictionary("LimitClearedChecks")}

                SqlParameterPostPeriodStart = New System.Data.SqlClient.SqlParameter("@post_period_start", SqlDbType.VarChar) With {.Value = ParameterDictionary("PostPeriodStart")}
                SqlParameterPostPeriodEnd = New System.Data.SqlClient.SqlParameter("@post_period_end", SqlDbType.VarChar) With {.Value = ParameterDictionary("PostPeriodEnd")}

                'SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
                'SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                'SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                'SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)

                SqlParameterVendorist = New System.Data.SqlClient.SqlParameter("@VENDOR_LIST", SqlDbType.VarChar)
                SqlParameterUsePayToVendorCode = New System.Data.SqlClient.SqlParameter("@UsePayToVendorCode", SqlDbType.Bit) With {.Value = ParameterDictionary("UsePayToVendorCode")}

                Dim SelectedBanks As Generic.List(Of String) = Nothing
                'Dim SelectedOffices As Generic.List(Of String) = Nothing
                'Dim SelectedClients As Generic.List(Of String) = Nothing
                'Dim SelectedDivisions As Generic.List(Of String) = Nothing
                'Dim SelectedProducts As Generic.List(Of String) = Nothing

                Dim SelectedVendors As Generic.List(Of String) = Nothing

                'Dim Offices As String = ""
                'Dim Clients As String = ""
                'Dim Divisions As String = ""
                'Dim Products As String = ""

                SelectedBanks = ParameterDictionary("SelectedBanks")

                'SelectedOffices = ParameterDictionary("SelectedOffices")

                'SelectedClients = ParameterDictionary("SelectedClients")

                'SelectedDivisions = ParameterDictionary("SelectedDivisions")

                'SelectedProducts = ParameterDictionary("SelectedProducts")

                SelectedVendors = ParameterDictionary("SelectedVendors")

                If SelectedBanks Is Nothing Then

                    SqlParameterBankList.Value = System.DBNull.Value

                ElseIf SelectedBanks.Count = 0 Then

                    SqlParameterBankList.Value = System.DBNull.Value

                Else

                    SqlParameterBankList.Value = Join(SelectedBanks.ToArray, ",")

                End If

                If SelectedVendors Is Nothing Then

                    SqlParameterVendorist.Value = System.DBNull.Value

                ElseIf SelectedVendors.Count = 0 Then

                    SqlParameterVendorist.Value = System.DBNull.Value

                Else

                    SqlParameterVendorist.Value = Join(SelectedVendors.ToArray, ",")

                End If

                CheckRegisterReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.CheckRegisterWithInvoiceDetails)("" &
                "EXEC dbo.advsp_check_register_with_invoice_details @BANK_LIST, @start_date, @end_date, @IncludeComputerChecks, @IncludeManualChecks, @IncludeComments, " &
                "@LimitVoidedChecks, @LimitOutstandingChecks, @LimitClearedChecks, @post_period_start, @post_period_end, @VENDOR_LIST, @UsePayToVendorCode",
                SqlParameterBankList, SqlParameterStartDate, SqlParameterEndDate, SqlParameterIncludeComputerChecks, SqlParameterIncludeManualChecks, SqlParameterIncludeComments,
                SqlParameterLimitVoidedChecks, SqlParameterLimitOutstandingChecks, SqlParameterLimitClearedChecks, SqlParameterPostPeriodStart, SqlParameterPostPeriodEnd, SqlParameterVendorist, SqlParameterUsePayToVendorCode).ToList

            Catch ex As Exception
                CheckRegisterReports = Nothing
            Finally
                LoadCheckRegisterDataWithInvoiceDetails = CheckRegisterReports
            End Try

        End Function
        Private Function LoadEmployeeInOutData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeInOutBoard)

            Dim EmployeeInOutBoardReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeInOutBoard) = Nothing
            Dim IncludeLimitEntries As Integer = 0
            Dim TimezoneOffset As AdvantageFramework.VCC.Classes.TimezoneOffset = Nothing
            Try
                If ParameterDictionary("LimitEntries") = "True" Then
                    IncludeLimitEntries = 1
                End If

                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterLimitEntries As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOFFSET As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterLimitEntries = New System.Data.SqlClient.SqlParameter("@LimitEntries", SqlDbType.Bit)

                SqlParameterOFFSET = New System.Data.SqlClient.SqlParameter("@OFFSET", SqlDbType.Decimal)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)

                SqlParameterStartDate.Value = ParameterDictionary("StartingDate")
                SqlParameterLimitEntries.Value = IncludeLimitEntries

                SqlParameterOFFSET.Value = 0
                SqlParameterUserID.Value = ParameterDictionary("UserCode")

                EmployeeInOutBoardReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.EmployeeInOutBoard) _
                                                                                    ("EXEC [dbo].[advsp_employee_inout_load] @UserID, @OFFSET, @LimitEntries, @START_DATE",
                                                                                     SqlParameterUserID, SqlParameterOFFSET, SqlParameterLimitEntries, SqlParameterStartDate).ToList

                'EmployeeInOutBoardReports = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.EmployeeInOutBoard)(String.Format("EXEC [dbo].[advsp_employee_inout_load] '{0}', {1}, {2}, '{3}'", ParameterDictionary("UserCode"), 0, IncludeLimitEntries, ParameterDictionary("StartingDate"))).ToList

            Catch ex As Exception
                EmployeeInOutBoardReports = Nothing
            Finally
                LoadEmployeeInOutData = EmployeeInOutBoardReports
            End Try

        End Function
        Public Function LoadMediaComparisonByVendorReport(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonByVendor)

            'objects
            Dim MediaPlanComparisonByVendors As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonByVendor) = Nothing
            Dim SqlParameterOrderStatus As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeInternet As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeMagazine As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNewspaper As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeOutOfHome As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeRadio As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeTelevision As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterOrderStatus = New System.Data.SqlClient.SqlParameter("@order_status", SqlDbType.VarChar)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@start_date", SqlDbType.DateTime)
                SqlParameterStartMonth = New System.Data.SqlClient.SqlParameter("@start_month", SqlDbType.Int)
                SqlParameterStartYear = New System.Data.SqlClient.SqlParameter("@start_year", SqlDbType.Int)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.DateTime)
                SqlParameterEndMonth = New System.Data.SqlClient.SqlParameter("@end_month", SqlDbType.Int)
                SqlParameterEndYear = New System.Data.SqlClient.SqlParameter("@end_year", SqlDbType.Int)
                SqlParameterIncludeInternet = New System.Data.SqlClient.SqlParameter("@include_internet", SqlDbType.Bit)
                SqlParameterIncludeMagazine = New System.Data.SqlClient.SqlParameter("@include_magazine", SqlDbType.Bit)
                SqlParameterIncludeNewspaper = New System.Data.SqlClient.SqlParameter("@include_newspaper", SqlDbType.Bit)
                SqlParameterIncludeOutOfHome = New System.Data.SqlClient.SqlParameter("@include_outofhome", SqlDbType.Bit)
                SqlParameterIncludeRadio = New System.Data.SqlClient.SqlParameter("@include_radio", SqlDbType.Bit)
                SqlParameterIncludeTelevision = New System.Data.SqlClient.SqlParameter("@include_television", SqlDbType.Bit)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OfficeCodeList", SqlDbType.VarChar)
                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)

                SelectedOffices = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedOffices.ToString)
                SelectedClients = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedClients.ToString)
                SelectedDivisions = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedDivisions.ToString)
                SelectedProducts = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedProducts.ToString)

                SqlParameterOrderStatus.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.OrderStatus.ToString)
                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartDate.ToString)
                SqlParameterStartMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartMonth.ToString)
                SqlParameterStartYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartYear.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndDate.ToString)
                SqlParameterEndMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndMonth.ToString)
                SqlParameterEndYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndYear.ToString)
                SqlParameterIncludeInternet.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeInternet.ToString)
                SqlParameterIncludeMagazine.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeMagazine.ToString)
                SqlParameterIncludeNewspaper.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeNewspaper.ToString)
                SqlParameterIncludeOutOfHome.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeOutOfHome.ToString)
                SqlParameterIncludeRadio.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeRadio.ToString)
                SqlParameterIncludeTelevision.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeTelevision.ToString)

                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.VarChar)
                SqlParameterUserCode.Value = DbContext.UserCode

                If SelectedOffices Is Nothing Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                ElseIf SelectedOffices.Count = 0 Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                Else

                    SqlParameterOfficeList.Value = Join(SelectedOffices.ToArray, ",")

                End If

                If SelectedClients Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                ElseIf SelectedClients.Count = 0 Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

                End If

                If SelectedDivisions Is Nothing Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                ElseIf SelectedDivisions.Count = 0 Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                Else

                    SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

                End If

                If SelectedProducts Is Nothing Then

                    SqlParameterProductList.Value = System.DBNull.Value

                ElseIf SelectedProducts.Count = 0 Then

                    SqlParameterProductList.Value = System.DBNull.Value

                Else

                    SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

                End If

                MediaPlanComparisonByVendors = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonByVendor)("exec dbo.advsp_media_comparison_summary_vendor_dataset @order_status, @start_date, @start_month, @start_year, @end_date, @end_month, @end_year, @include_internet, @include_magazine, @include_newspaper, @include_outofhome, @include_radio, @include_television, @OfficeCodeList, @ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @user_id",
                                                                                                                                                         SqlParameterOrderStatus, SqlParameterStartDate, SqlParameterStartMonth, SqlParameterStartYear, SqlParameterEndDate, SqlParameterEndMonth, SqlParameterEndYear,
                                                                                                                                                         SqlParameterIncludeInternet, SqlParameterIncludeMagazine, SqlParameterIncludeNewspaper, SqlParameterIncludeOutOfHome, SqlParameterIncludeRadio, SqlParameterIncludeTelevision, SqlParameterOfficeList, SqlParameterClientList, SqlParameterDivisionList, SqlParameterProductList, SqlParameterUserCode).ToList

            Catch ex As Exception
                LoadMediaComparisonByVendorReport = Nothing
            Finally
                LoadMediaComparisonByVendorReport = MediaPlanComparisonByVendors
            End Try

        End Function

        Public Function LoadMediaComparisonDetailByVendorReport(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonDetailByVendor)

            'objects 
            Dim MediaPlanComparisonDetailByVendors As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonDetailByVendor) = Nothing
            Dim SqlParameterOrderStatus As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeInternet As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeMagazine As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNewspaper As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeOutOfHome As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeRadio As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeTelevision As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterOrderStatus = New System.Data.SqlClient.SqlParameter("@order_status", SqlDbType.VarChar)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@start_date", SqlDbType.DateTime)
                SqlParameterStartMonth = New System.Data.SqlClient.SqlParameter("@start_month", SqlDbType.Int)
                SqlParameterStartYear = New System.Data.SqlClient.SqlParameter("@start_year", SqlDbType.Int)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.DateTime)
                SqlParameterEndMonth = New System.Data.SqlClient.SqlParameter("@end_month", SqlDbType.Int)
                SqlParameterEndYear = New System.Data.SqlClient.SqlParameter("@end_year", SqlDbType.Int)
                SqlParameterIncludeInternet = New System.Data.SqlClient.SqlParameter("@include_internet", SqlDbType.Bit)
                SqlParameterIncludeMagazine = New System.Data.SqlClient.SqlParameter("@include_magazine", SqlDbType.Bit)
                SqlParameterIncludeNewspaper = New System.Data.SqlClient.SqlParameter("@include_newspaper", SqlDbType.Bit)
                SqlParameterIncludeOutOfHome = New System.Data.SqlClient.SqlParameter("@include_outofhome", SqlDbType.Bit)
                SqlParameterIncludeRadio = New System.Data.SqlClient.SqlParameter("@include_radio", SqlDbType.Bit)
                SqlParameterIncludeTelevision = New System.Data.SqlClient.SqlParameter("@include_television", SqlDbType.Bit)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OfficeCodeList", SqlDbType.VarChar)
                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)

                SelectedOffices = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedOffices.ToString)
                SelectedClients = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedClients.ToString)
                SelectedDivisions = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedDivisions.ToString)
                SelectedProducts = ParameterDictionary(AdvantageFramework.Reporting.ClientPLParameters.SelectedProducts.ToString)

                SqlParameterOrderStatus.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.OrderStatus.ToString)
                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartDate.ToString)
                SqlParameterStartMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartMonth.ToString)
                SqlParameterStartYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartYear.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndDate.ToString)
                SqlParameterEndMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndMonth.ToString)
                SqlParameterEndYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndYear.ToString)
                SqlParameterIncludeInternet.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeInternet.ToString)
                SqlParameterIncludeMagazine.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeMagazine.ToString)
                SqlParameterIncludeNewspaper.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeNewspaper.ToString)
                SqlParameterIncludeOutOfHome.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeOutOfHome.ToString)
                SqlParameterIncludeRadio.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeRadio.ToString)
                SqlParameterIncludeTelevision.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeTelevision.ToString)

                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.VarChar)
                SqlParameterUserCode.Value = DbContext.UserCode

                If SelectedOffices Is Nothing Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                ElseIf SelectedOffices.Count = 0 Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                Else

                    SqlParameterOfficeList.Value = Join(SelectedOffices.ToArray, ",")

                End If

                If SelectedClients Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                ElseIf SelectedClients.Count = 0 Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

                End If

                If SelectedDivisions Is Nothing Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                ElseIf SelectedDivisions.Count = 0 Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                Else

                    SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

                End If

                If SelectedProducts Is Nothing Then

                    SqlParameterProductList.Value = System.DBNull.Value

                ElseIf SelectedProducts.Count = 0 Then

                    SqlParameterProductList.Value = System.DBNull.Value

                Else

                    SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

                End If

                MediaPlanComparisonDetailByVendors = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaPlanComparisonDetailByVendor)("exec dbo.advsp_media_comparison_detail_vendor_dataset @order_status, @start_date, @start_month, @start_year, @end_date, @end_month, @end_year, @include_internet, @include_magazine, @include_newspaper, @include_outofhome, @include_radio, @include_television, @OfficeCodeList, @ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @user_id",
                                                                                                                                                         SqlParameterOrderStatus, SqlParameterStartDate, SqlParameterStartMonth, SqlParameterStartYear, SqlParameterEndDate, SqlParameterEndMonth, SqlParameterEndYear,
                                                                                                                                                         SqlParameterIncludeInternet, SqlParameterIncludeMagazine, SqlParameterIncludeNewspaper, SqlParameterIncludeOutOfHome, SqlParameterIncludeRadio, SqlParameterIncludeTelevision, SqlParameterOfficeList, SqlParameterClientList, SqlParameterDivisionList, SqlParameterProductList, SqlParameterUserCode).ToList

            Catch ex As Exception
                LoadMediaComparisonDetailByVendorReport = Nothing
            Finally
                LoadMediaComparisonDetailByVendorReport = MediaPlanComparisonDetailByVendors
            End Try

        End Function
        Private Function LoadAlertReport(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AlertReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AlertReport) = Nothing
            'Dim ObjectQuery As IQueryable = Nothing

            Try
                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDateType As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)

                SqlParameterDateType = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)

                SqlParameterStartDate.Value = ParameterDictionary("StartDate")
                SqlParameterEndDate.Value = ParameterDictionary("EndDate")

                SqlParameterDateType.Value = 0
                SqlParameterUserID.Value = DbContext.UserCode

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.AlertReport) _
                                                                                    ("EXEC [dbo].[advsp_alerts_dataset] @DATE_TYPE, @START_DATE, @END_DATE, @UserID",
                                                                                     SqlParameterDateType, SqlParameterStartDate, SqlParameterEndDate, SqlParameterUserID).ToList


                ' DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.AlertReport)(String.Format("EXEC [dbo].[advsp_alerts_dataset] {0}, '{1}', '{2}', '{3}'", 0, ParameterDictionary("StartDate"), ParameterDictionary("EndDate"), DbContext.UserCode)).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadAlertReport = DynamicReportObjects
            End Try

        End Function
        Private Function LoadAlertRecipientsReport(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AlertRecipientsReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AlertRecipientsReport) = Nothing

            Try
                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDateType As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIsDimissed As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)

                SqlParameterDateType = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterIsDimissed = New System.Data.SqlClient.SqlParameter("@IncludeDismissed", SqlDbType.Bit)

                SqlParameterStartDate.Value = ParameterDictionary("StartDate")
                SqlParameterEndDate.Value = ParameterDictionary("EndDate")

                SqlParameterDateType.Value = 0
                SqlParameterUserID.Value = DbContext.UserCode
                SqlParameterIsDimissed.Value = If(ParameterDictionary("IncludeDismissed") = True, 1, 0)

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.AlertRecipientsReport) _
                                                                                    ("EXEC [dbo].[advsp_alerts_with_recipients_dataset] @DATE_TYPE, @START_DATE, @END_DATE, @UserID, @IncludeDismissed",
                                                                                     SqlParameterDateType, SqlParameterStartDate, SqlParameterEndDate, SqlParameterUserID, SqlParameterIsDimissed).ToList

                'DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.AlertRecipientsReport)(String.Format("EXEC [dbo].[advsp_alerts_with_recipients_dataset] {0}, '{1}', '{2}', '{3}', {4}", 0, ParameterDictionary("StartDate"), ParameterDictionary("EndDate"), DbContext.UserCode, If(ParameterDictionary("IncludeDismissed") = True, 1, 0))).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadAlertRecipientsReport = DynamicReportObjects
            End Try

        End Function
        Private Function LoadAlertCommentsReport(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AlertCommentsReport)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AlertCommentsReport) = Nothing
            'Dim ObjectQuery As IQueryable = Nothing

            Try
                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDateType As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIsDimissed As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)

                SqlParameterDateType = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterIsDimissed = New System.Data.SqlClient.SqlParameter("@IncludeDismissed", SqlDbType.Bit)

                SqlParameterStartDate.Value = ParameterDictionary("StartDate")
                SqlParameterEndDate.Value = ParameterDictionary("EndDate")

                SqlParameterDateType.Value = 0
                SqlParameterUserID.Value = DbContext.UserCode
                SqlParameterIsDimissed.Value = If(ParameterDictionary("IncludeDismissed") = True, 1, 0)

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.AlertCommentsReport) _
                                                                                    ("EXEC [dbo].[advsp_alerts_with_comments_dataset] @DATE_TYPE, @START_DATE, @END_DATE, @UserID, @IncludeDismissed",
                                                                                     SqlParameterDateType, SqlParameterStartDate, SqlParameterEndDate, SqlParameterUserID, SqlParameterIsDimissed).ToList

                ' DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.AlertCommentsReport)(String.Format("EXEC [dbo].[advsp_alerts_with_comments_dataset] {0}, '{1}', '{2}', '{3}'", 0, ParameterDictionary("StartDate"), ParameterDictionary("EndDate"), DbContext.UserCode)).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadAlertCommentsReport = DynamicReportObjects
            End Try

        End Function
        Private Function LoadResourceAllocationByWeekReport(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ResourceAllocationByWeek)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ResourceAllocationByWeek) = Nothing
            'Dim ObjectQuery As IQueryable = Nothing

            Try
                Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDeptList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterStartingWeek As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterNumWeeks As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
                SqlParameterDeptList = New System.Data.SqlClient.SqlParameter("@DEPT_LIST", SqlDbType.VarChar)

                SqlParameterStartingWeek = New System.Data.SqlClient.SqlParameter("@STARTING_WEEK", SqlDbType.SmallDateTime)
                SqlParameterNumWeeks = New System.Data.SqlClient.SqlParameter("@NUM_WEEKS", SqlDbType.Int)

                SqlParameterOfficeList.Value = DBNull.Value
                SqlParameterDeptList.Value = DBNull.Value

                SqlParameterStartingWeek.Value = ParameterDictionary("StartingWeek")
                SqlParameterNumWeeks.Value = ParameterDictionary("NumberOfWeeks")

                If ParameterDictionary("View") = 2 Then
                    DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.ResourceAllocationByWeek) _
                                                                                   ("EXEC [dbo].[advsp_agile_load_detail_dataset] @OFFICE_LIST, @DEPT_LIST, @STARTING_WEEK, @NUM_WEEKS",
                                                                                    SqlParameterOfficeList, SqlParameterDeptList, SqlParameterStartingWeek, SqlParameterNumWeeks).ToList
                Else
                    DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.ResourceAllocationByWeek) _
                                                                                   ("EXEC [dbo].[advsp_agile_load_dataset] @OFFICE_LIST, @DEPT_LIST, @STARTING_WEEK, @NUM_WEEKS",
                                                                                    SqlParameterOfficeList, SqlParameterDeptList, SqlParameterStartingWeek, SqlParameterNumWeeks).ToList
                End If

                ' DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.AlertCommentsReport)(String.Format("EXEC [dbo].[advsp_alerts_with_comments_dataset] {0}, '{1}', '{2}', '{3}'", 0, ParameterDictionary("StartDate"), ParameterDictionary("EndDate"), DbContext.UserCode)).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadResourceAllocationByWeekReport = DynamicReportObjects
            End Try

        End Function
        Private Function LoadGLChartOfAccounts(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.GLChartOfAccounts)

            Dim GLChartOfAccounts As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.GLChartOfAccounts) = Nothing

            Try

                GLChartOfAccounts = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.GLChartOfAccounts)("EXEC [dbo].[advsp_load_drpt_GL_chart_of_Accounts]").ToList

            Catch ex As Exception
                GLChartOfAccounts = Nothing
            Finally
                LoadGLChartOfAccounts = GLChartOfAccounts
            End Try

        End Function
        Private Function LoadGLReportRow(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.GLReportRow)

            Dim GLReportRow As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.GLReportRow) = Nothing

            Try

                GLReportRow = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.GLReportRow)("EXEC [dbo].[advsp_load_drpt_GL_Report_Row]").ToList

            Catch ex As Exception
                GLReportRow = Nothing
            Finally
                LoadGLReportRow = GLReportRow
            End Try

        End Function
        Private Function LoadCashTrasaction(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CashTransaction)

            Dim CashTransaction As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CashTransaction) = Nothing
            Dim SqlParameterBankList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeReceipts As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeDisbursements As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeGLEntries As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClearedOption As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStatementCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedBanks As Generic.List(Of String) = Nothing

            Try

                SqlParameterBankList = New System.Data.SqlClient.SqlParameter("@bank_list", SqlDbType.VarChar)
                SqlParameterStartPeriod = New System.Data.SqlClient.SqlParameter("@start_period", SqlDbType.VarChar) With {.Value = ParameterDictionary("StartPeriod")}
                SqlParameterEndPeriod = New System.Data.SqlClient.SqlParameter("@end_period", SqlDbType.VarChar) With {.Value = ParameterDictionary("EndPeriod")}
                SqlParameterIncludeReceipts = New System.Data.SqlClient.SqlParameter("@include_receipts", SqlDbType.Bit) With {.Value = ParameterDictionary("IncludeReceipts")}
                SqlParameterIncludeDisbursements = New System.Data.SqlClient.SqlParameter("@include_disbursements", SqlDbType.Bit) With {.Value = ParameterDictionary("IncludeDisbursements")}
                SqlParameterIncludeGLEntries = New System.Data.SqlClient.SqlParameter("@include_glentries", SqlDbType.Bit) With {.Value = ParameterDictionary("IncludeGLEntries")}
                SqlParameterClearedOption = New System.Data.SqlClient.SqlParameter("@cleared_option", SqlDbType.SmallInt) With {.Value = ParameterDictionary("ClearedOption")}
                SqlParameterStatementCutoff = New System.Data.SqlClient.SqlParameter("@statement_cutoff", SqlDbType.DateTime) With {.Value = ParameterDictionary("StatementCutoff")}

                SelectedBanks = ParameterDictionary("SelectedBanks")

                If SelectedBanks Is Nothing Then

                    SqlParameterBankList.Value = System.DBNull.Value

                ElseIf SelectedBanks.Count = 0 Then

                    SqlParameterBankList.Value = System.DBNull.Value

                Else

                    SqlParameterBankList.Value = Join(SelectedBanks.ToArray, ",")

                End If

                CashTransaction = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.CashTransaction) _
                                                     ("EXEC [dbo].[advsp_cash_transactions] @bank_list, @start_period, @end_period, @include_receipts, @include_disbursements, @include_glentries, @cleared_option, @statement_cutoff",
                                                      SqlParameterBankList, SqlParameterStartPeriod, SqlParameterEndPeriod, SqlParameterIncludeReceipts, SqlParameterIncludeDisbursements, SqlParameterIncludeGLEntries, SqlParameterClearedOption, SqlParameterStatementCutoff).ToList

            Catch ex As Exception
                CashTransaction = Nothing
            Finally
                LoadCashTrasaction = CashTransaction
            End Try

        End Function
        Public Function LoadMediaCurrentStatusCoopBreakoutReport(DbContext As AdvantageFramework.Reporting.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusCoopBreakout)

            'objects
            Dim MediaCurrentStatusCoopBreakouts As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusCoopBreakout) = Nothing
            Dim SqlParameterOrderStatus As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndMonth As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndYear As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeInternet As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeMagazine As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNewspaper As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeOutOfHome As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeRadio As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeTelevision As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDivisionList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterProductList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedOffices As Generic.List(Of String) = Nothing
            Dim SelectedClients As Generic.List(Of String) = Nothing
            Dim SelectedDivisions As Generic.List(Of String) = Nothing
            Dim SelectedProducts As Generic.List(Of String) = Nothing
            Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SelectedOffices = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedOffices.ToString)
                SelectedClients = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedClients.ToString)
                SelectedDivisions = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedDivisions.ToString)
                SelectedProducts = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.SelectedProducts.ToString)

                SqlParameterOrderStatus = New System.Data.SqlClient.SqlParameter("@order_status", SqlDbType.VarChar)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@start_date", SqlDbType.DateTime)
                SqlParameterStartMonth = New System.Data.SqlClient.SqlParameter("@start_month", SqlDbType.Int)
                SqlParameterStartYear = New System.Data.SqlClient.SqlParameter("@start_year", SqlDbType.Int)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.DateTime)
                SqlParameterEndMonth = New System.Data.SqlClient.SqlParameter("@end_month", SqlDbType.Int)
                SqlParameterEndYear = New System.Data.SqlClient.SqlParameter("@end_year", SqlDbType.Int)
                SqlParameterIncludeInternet = New System.Data.SqlClient.SqlParameter("@include_internet", SqlDbType.Bit)
                SqlParameterIncludeMagazine = New System.Data.SqlClient.SqlParameter("@include_magazine", SqlDbType.Bit)
                SqlParameterIncludeNewspaper = New System.Data.SqlClient.SqlParameter("@include_newspaper", SqlDbType.Bit)
                SqlParameterIncludeOutOfHome = New System.Data.SqlClient.SqlParameter("@include_outofhome", SqlDbType.Bit)
                SqlParameterIncludeRadio = New System.Data.SqlClient.SqlParameter("@include_radio", SqlDbType.Bit)
                SqlParameterIncludeTelevision = New System.Data.SqlClient.SqlParameter("@include_television", SqlDbType.Bit)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OfficeCodeList", SqlDbType.VarChar)
                SqlParameterClientList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterDivisionList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterProductList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)

                SqlParameterOrderStatus.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.OrderStatus.ToString)
                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartDate.ToString)
                SqlParameterStartMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartMonth.ToString)
                SqlParameterStartYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.StartYear.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndDate.ToString)
                SqlParameterEndMonth.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndMonth.ToString)
                SqlParameterEndYear.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.EndYear.ToString)
                SqlParameterIncludeInternet.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeInternet.ToString)
                SqlParameterIncludeMagazine.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeMagazine.ToString)
                SqlParameterIncludeNewspaper.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeNewspaper.ToString)
                SqlParameterIncludeOutOfHome.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeOutOfHome.ToString)
                SqlParameterIncludeRadio.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeRadio.ToString)
                SqlParameterIncludeTelevision.Value = ParameterDictionary(AdvantageFramework.Reporting.MediaCurrentStatusParameters.IncludeTelevision.ToString)

                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.VarChar)
                SqlParameterUserCode.Value = DbContext.UserCode

                If SelectedOffices Is Nothing Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                ElseIf SelectedOffices.Count = 0 Then

                    SqlParameterOfficeList.Value = System.DBNull.Value

                Else

                    SqlParameterOfficeList.Value = Join(SelectedOffices.ToArray, ",")

                End If

                If SelectedClients Is Nothing Then

                    SqlParameterClientList.Value = System.DBNull.Value

                ElseIf SelectedClients.Count = 0 Then

                    SqlParameterClientList.Value = System.DBNull.Value

                Else

                    SqlParameterClientList.Value = Join(SelectedClients.ToArray, ",")

                End If

                If SelectedDivisions Is Nothing Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                ElseIf SelectedDivisions.Count = 0 Then

                    SqlParameterDivisionList.Value = System.DBNull.Value

                Else

                    SqlParameterDivisionList.Value = Join(SelectedDivisions.ToArray, ",")

                End If

                If SelectedProducts Is Nothing Then

                    SqlParameterProductList.Value = System.DBNull.Value

                ElseIf SelectedProducts.Count = 0 Then

                    SqlParameterProductList.Value = System.DBNull.Value

                Else

                    SqlParameterProductList.Value = Join(SelectedProducts.ToArray, ",")

                End If

                MediaCurrentStatusCoopBreakouts = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaCurrentStatusCoopBreakout)("exec dbo.advsp_media_current_status_coop_breakout @order_status, @start_date, @start_month, @start_year, @end_date, @end_month, @end_year, @include_internet, @include_magazine, @include_newspaper, @include_outofhome, @include_radio, @include_television, @OfficeCodeList, @ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @user_id",
                                                                                SqlParameterOrderStatus, SqlParameterStartDate, SqlParameterStartMonth, SqlParameterStartYear, SqlParameterEndDate, SqlParameterEndMonth, SqlParameterEndYear,
                                                                                SqlParameterIncludeInternet, SqlParameterIncludeMagazine, SqlParameterIncludeNewspaper, SqlParameterIncludeOutOfHome, SqlParameterIncludeRadio, SqlParameterIncludeTelevision, SqlParameterOfficeList, SqlParameterClientList, SqlParameterDivisionList, SqlParameterProductList, SqlParameterUserCode).ToList

            Catch ex As Exception
                MediaCurrentStatusCoopBreakouts = Nothing
            Finally
                LoadMediaCurrentStatusCoopBreakoutReport = MediaCurrentStatusCoopBreakouts
            End Try

        End Function
        Private Function LoadJobDetailFeeOOPFunctionData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean,
                                               ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunction)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunction) = Nothing
            Dim SQLString As String = String.Empty
            Dim ReportColumnString As String = String.Empty
            'Dim ObjectQuery As IQueryable = Nothing
            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriodCode As String = String.Empty
            Dim JobDateCriteria As Integer = 0
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim IncludeClosedJobs As Boolean = False
            Dim ClientCodes As String = String.Empty
            Dim ClientDivisionCodes As String = String.Empty
            Dim ClientDivisionProductCodes As String = String.Empty
            Dim AccountExecutiveCodes As String = String.Empty
            Dim CampaignIDs As String = String.Empty
            Dim JobTypeCodes As String = String.Empty
            Dim EmployeeTimeCutoffDate As Date = Date.MinValue
            Dim IncomeOnlyCutoffDate As Date = Date.MinValue
            Dim APCutoffDate As Date = Date.MinValue
            Dim APPostPeriodCode As String = String.Empty
            Dim JobDetailItemDatas As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemData) = Nothing
            Dim JobDetailItemDataCores As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemDataCore) = Nothing
            Dim IncludeBilledRange As Boolean = False
            Dim BilledStartPostPeriodCode As String = String.Empty
            Dim BilledEndPostPeriodCode As String = String.Empty
            Dim CurrentStartDate As Date = Date.MinValue
            Dim CurrentEndDate As Date = Date.MinValue
            Dim CurrentPostPeriodCode As String = String.Empty
            Dim PriorEndDate As Date = Date.MinValue
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterIncludeBilledRange As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOOPFunctionsList As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCurrentStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateOption As System.Data.SqlClient.SqlParameter = Nothing


            Try

                SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
                SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@INCLUDE_CLOSED", SqlDbType.Bit)

                'SqlParameterIncludeBilledRange = New System.Data.SqlClient.SqlParameter("@IncludeBilledRange", SqlDbType.Bit)
                'SqlParameterStartPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_START_PERIOD", SqlDbType.VarChar)
                'SqlParameterEndPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_END_PERIOD", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)
                SqlParameterOOPFunctionsList = New System.Data.SqlClient.SqlParameter("@OOPFunctionList", SqlDbType.VarChar)

                'SqlParameterCurrentStartDate = New System.Data.SqlClient.SqlParameter("@Current_StartDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentEndDate = New System.Data.SqlClient.SqlParameter("@Current_EndDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentPeriod = New System.Data.SqlClient.SqlParameter("@CURRENT_PERIOD", SqlDbType.VarChar)

                'SqlParameterDateOption = New System.Data.SqlClient.SqlParameter("@DateOption", SqlDbType.VarChar)

                SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
                If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)
                Else
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = System.DBNull.Value
                End If

                'SqlParameterCurrentStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                'SqlParameterCurrentEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then
                '    SqlParameterCurrentPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)
                'Else
                '    SqlParameterCurrentPeriod.Value = System.DBNull.Value
                'End If

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
                SqlParameterShowJobsWithNoDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
                SqlParameterIncludeClosedJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

                'SqlParameterIncludeBilledRange.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterStartPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
                'Else
                '    SqlParameterStartPeriodBilled.Value = System.DBNull.Value
                'End If
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterEndPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)
                'Else
                '    SqlParameterEndPeriodBilled.Value = System.DBNull.Value
                'End If
                'SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                    SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterCampaignIDList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                    SqlParameterJobTypeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) IsNot Nothing Then

                    SqlParameterOOPFunctionsList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOOPFunctionsList.Value = System.DBNull.Value

                End If

                'SqlParameterDateOption.Value = System.DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.DateOption.ToString)

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunction) _
                                                                                    ("EXEC [dbo].[advsp_job_detail_fees_oop_by_function_load] @DATE_TYPE, @START_DATE, @END_DATE, @SHOW_JOBS_WO_DETAILS, @INCLUDE_CLOSED,@et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, " &
                                                                                     "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @CampaignIDList, @JobTypeList, @OOPFunctionList",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterShowJobsWithNoDetails, SqlParameterIncludeClosedJobs, SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterCampaignIDList, SqlParameterJobTypeList, SqlParameterOOPFunctionsList).ToList





            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailFeeOOPFunctionData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadJobDetailFeeOOPJobComponentData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean,
                                               ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobComponent)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobComponent) = Nothing
            Dim SQLString As String = String.Empty
            Dim ReportColumnString As String = String.Empty
            'Dim ObjectQuery As IQueryable = Nothing
            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriodCode As String = String.Empty
            Dim JobDateCriteria As Integer = 0
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim IncludeClosedJobs As Boolean = False
            Dim ClientCodes As String = String.Empty
            Dim ClientDivisionCodes As String = String.Empty
            Dim ClientDivisionProductCodes As String = String.Empty
            Dim AccountExecutiveCodes As String = String.Empty
            Dim CampaignIDs As String = String.Empty
            Dim JobTypeCodes As String = String.Empty
            Dim EmployeeTimeCutoffDate As Date = Date.MinValue
            Dim IncomeOnlyCutoffDate As Date = Date.MinValue
            Dim APCutoffDate As Date = Date.MinValue
            Dim APPostPeriodCode As String = String.Empty
            Dim IncludeBilledRange As Boolean = False
            Dim BilledStartPostPeriodCode As String = String.Empty
            Dim BilledEndPostPeriodCode As String = String.Empty
            Dim CurrentStartDate As Date = Date.MinValue
            Dim CurrentEndDate As Date = Date.MinValue
            Dim CurrentPostPeriodCode As String = String.Empty
            Dim PriorEndDate As Date = Date.MinValue
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterIncludeBilledRange As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOOPFunctionsList As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCurrentStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateOption As System.Data.SqlClient.SqlParameter = Nothing


            Try

                SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
                SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@INCLUDE_CLOSED", SqlDbType.Bit)

                'SqlParameterIncludeBilledRange = New System.Data.SqlClient.SqlParameter("@IncludeBilledRange", SqlDbType.Bit)
                'SqlParameterStartPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_START_PERIOD", SqlDbType.VarChar)
                'SqlParameterEndPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_END_PERIOD", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)
                SqlParameterOOPFunctionsList = New System.Data.SqlClient.SqlParameter("@OOPFunctionList", SqlDbType.VarChar)

                'SqlParameterCurrentStartDate = New System.Data.SqlClient.SqlParameter("@Current_StartDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentEndDate = New System.Data.SqlClient.SqlParameter("@Current_EndDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentPeriod = New System.Data.SqlClient.SqlParameter("@CURRENT_PERIOD", SqlDbType.VarChar)

                'SqlParameterDateOption = New System.Data.SqlClient.SqlParameter("@DateOption", SqlDbType.VarChar)

                SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
                If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)
                Else
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = System.DBNull.Value
                End If

                'SqlParameterCurrentStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                'SqlParameterCurrentEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then
                '    SqlParameterCurrentPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)
                'Else
                '    SqlParameterCurrentPeriod.Value = System.DBNull.Value
                'End If

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
                SqlParameterShowJobsWithNoDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
                SqlParameterIncludeClosedJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

                'SqlParameterIncludeBilledRange.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterStartPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
                'Else
                '    SqlParameterStartPeriodBilled.Value = System.DBNull.Value
                'End If
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterEndPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)
                'Else
                '    SqlParameterEndPeriodBilled.Value = System.DBNull.Value
                'End If
                'SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                    SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterCampaignIDList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                    SqlParameterJobTypeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) IsNot Nothing Then

                    SqlParameterOOPFunctionsList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOOPFunctionsList.Value = System.DBNull.Value

                End If

                'SqlParameterDateOption.Value = System.DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.DateOption.ToString)

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobComponent) _
                                                                                    ("EXEC [dbo].[advsp_job_detail_fees_oop_by_job_component_load] @DATE_TYPE, @START_DATE, @END_DATE, @SHOW_JOBS_WO_DETAILS, @INCLUDE_CLOSED,@et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, " &
                                                                                     "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @CampaignIDList, @JobTypeList, @OOPFunctionList",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterShowJobsWithNoDetails, SqlParameterIncludeClosedJobs, SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterCampaignIDList, SqlParameterJobTypeList, SqlParameterOOPFunctionsList).ToList





            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailFeeOOPJobComponentData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadJobDetailFeeOOPJobData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean,
                                               ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob) = Nothing
            Dim SQLString As String = String.Empty
            Dim ReportColumnString As String = String.Empty
            'Dim ObjectQuery As IQueryable = Nothing
            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriodCode As String = String.Empty
            Dim JobDateCriteria As Integer = 0
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim IncludeClosedJobs As Boolean = False
            Dim ClientCodes As String = String.Empty
            Dim ClientDivisionCodes As String = String.Empty
            Dim ClientDivisionProductCodes As String = String.Empty
            Dim AccountExecutiveCodes As String = String.Empty
            Dim CampaignIDs As String = String.Empty
            Dim JobTypeCodes As String = String.Empty
            Dim EmployeeTimeCutoffDate As Date = Date.MinValue
            Dim IncomeOnlyCutoffDate As Date = Date.MinValue
            Dim APCutoffDate As Date = Date.MinValue
            Dim APPostPeriodCode As String = String.Empty
            Dim IncludeBilledRange As Boolean = False
            Dim BilledStartPostPeriodCode As String = String.Empty
            Dim BilledEndPostPeriodCode As String = String.Empty
            Dim CurrentStartDate As Date = Date.MinValue
            Dim CurrentEndDate As Date = Date.MinValue
            Dim CurrentPostPeriodCode As String = String.Empty
            Dim PriorEndDate As Date = Date.MinValue
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterIncludeBilledRange As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOOPFunctionsList As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCurrentStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateOption As System.Data.SqlClient.SqlParameter = Nothing


            Try

                SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
                SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@INCLUDE_CLOSED", SqlDbType.Bit)

                'SqlParameterIncludeBilledRange = New System.Data.SqlClient.SqlParameter("@IncludeBilledRange", SqlDbType.Bit)
                'SqlParameterStartPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_START_PERIOD", SqlDbType.VarChar)
                'SqlParameterEndPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_END_PERIOD", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)
                SqlParameterOOPFunctionsList = New System.Data.SqlClient.SqlParameter("@OOPFunctionList", SqlDbType.VarChar)

                'SqlParameterCurrentStartDate = New System.Data.SqlClient.SqlParameter("@Current_StartDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentEndDate = New System.Data.SqlClient.SqlParameter("@Current_EndDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentPeriod = New System.Data.SqlClient.SqlParameter("@CURRENT_PERIOD", SqlDbType.VarChar)

                'SqlParameterDateOption = New System.Data.SqlClient.SqlParameter("@DateOption", SqlDbType.VarChar)

                SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
                If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)
                Else
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = System.DBNull.Value
                End If

                'SqlParameterCurrentStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                'SqlParameterCurrentEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then
                '    SqlParameterCurrentPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)
                'Else
                '    SqlParameterCurrentPeriod.Value = System.DBNull.Value
                'End If

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
                SqlParameterShowJobsWithNoDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
                SqlParameterIncludeClosedJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

                'SqlParameterIncludeBilledRange.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterStartPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
                'Else
                '    SqlParameterStartPeriodBilled.Value = System.DBNull.Value
                'End If
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterEndPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)
                'Else
                '    SqlParameterEndPeriodBilled.Value = System.DBNull.Value
                'End If
                'SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                    SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterCampaignIDList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                    SqlParameterJobTypeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) IsNot Nothing Then

                    SqlParameterOOPFunctionsList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOOPFunctionsList.Value = System.DBNull.Value

                End If

                'SqlParameterDateOption.Value = System.DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.DateOption.ToString)

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob) _
                                                                                    ("EXEC [dbo].[advsp_job_detail_fees_oop_by_job_load] @DATE_TYPE, @START_DATE, @END_DATE, @SHOW_JOBS_WO_DETAILS, @INCLUDE_CLOSED,@et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, " &
                                                                                     "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @CampaignIDList, @JobTypeList, @OOPFunctionList",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterShowJobsWithNoDetails, SqlParameterIncludeClosedJobs, SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterCampaignIDList, SqlParameterJobTypeList, SqlParameterOOPFunctionsList).ToList





            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailFeeOOPJobData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadJobDetailFeeOOPCampaignData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean,
                                               ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPCampaign)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPCampaign) = Nothing
            Dim SQLString As String = String.Empty
            Dim ReportColumnString As String = String.Empty
            'Dim ObjectQuery As IQueryable = Nothing
            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriodCode As String = String.Empty
            Dim JobDateCriteria As Integer = 0
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim IncludeClosedJobs As Boolean = False
            Dim ClientCodes As String = String.Empty
            Dim ClientDivisionCodes As String = String.Empty
            Dim ClientDivisionProductCodes As String = String.Empty
            Dim AccountExecutiveCodes As String = String.Empty
            Dim CampaignIDs As String = String.Empty
            Dim JobTypeCodes As String = String.Empty
            Dim EmployeeTimeCutoffDate As Date = Date.MinValue
            Dim IncomeOnlyCutoffDate As Date = Date.MinValue
            Dim APCutoffDate As Date = Date.MinValue
            Dim APPostPeriodCode As String = String.Empty
            Dim IncludeBilledRange As Boolean = False
            Dim BilledStartPostPeriodCode As String = String.Empty
            Dim BilledEndPostPeriodCode As String = String.Empty
            Dim CurrentStartDate As Date = Date.MinValue
            Dim CurrentEndDate As Date = Date.MinValue
            Dim CurrentPostPeriodCode As String = String.Empty
            Dim PriorEndDate As Date = Date.MinValue
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterIncludeBilledRange As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOOPFunctionsList As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCurrentStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateOption As System.Data.SqlClient.SqlParameter = Nothing


            Try

                SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
                SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@INCLUDE_CLOSED", SqlDbType.Bit)

                'SqlParameterIncludeBilledRange = New System.Data.SqlClient.SqlParameter("@IncludeBilledRange", SqlDbType.Bit)
                'SqlParameterStartPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_START_PERIOD", SqlDbType.VarChar)
                'SqlParameterEndPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_END_PERIOD", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)
                SqlParameterOOPFunctionsList = New System.Data.SqlClient.SqlParameter("@OOPFunctionList", SqlDbType.VarChar)

                'SqlParameterCurrentStartDate = New System.Data.SqlClient.SqlParameter("@Current_StartDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentEndDate = New System.Data.SqlClient.SqlParameter("@Current_EndDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentPeriod = New System.Data.SqlClient.SqlParameter("@CURRENT_PERIOD", SqlDbType.VarChar)

                'SqlParameterDateOption = New System.Data.SqlClient.SqlParameter("@DateOption", SqlDbType.VarChar)

                SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
                If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)
                Else
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = System.DBNull.Value
                End If

                'SqlParameterCurrentStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                'SqlParameterCurrentEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then
                '    SqlParameterCurrentPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)
                'Else
                '    SqlParameterCurrentPeriod.Value = System.DBNull.Value
                'End If

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
                SqlParameterShowJobsWithNoDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
                SqlParameterIncludeClosedJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

                'SqlParameterIncludeBilledRange.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterStartPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
                'Else
                '    SqlParameterStartPeriodBilled.Value = System.DBNull.Value
                'End If
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterEndPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)
                'Else
                '    SqlParameterEndPeriodBilled.Value = System.DBNull.Value
                'End If
                'SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                    SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterCampaignIDList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                    SqlParameterJobTypeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) IsNot Nothing Then

                    SqlParameterOOPFunctionsList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOOPFunctionsList.Value = System.DBNull.Value

                End If

                'SqlParameterDateOption.Value = System.DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.DateOption.ToString)

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPCampaign) _
                                                                                    ("EXEC [dbo].[advsp_job_detail_fees_oop_by_campaign_load] @DATE_TYPE, @START_DATE, @END_DATE, @SHOW_JOBS_WO_DETAILS, @INCLUDE_CLOSED,@et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, " &
                                                                                     "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @CampaignIDList, @JobTypeList, @OOPFunctionList",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterShowJobsWithNoDetails, SqlParameterIncludeClosedJobs, SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterCampaignIDList, SqlParameterJobTypeList, SqlParameterOOPFunctionsList).ToList





            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailFeeOOPCampaignData = DynamicReportObjects
            End Try

        End Function

        Private Function LoadJobDetailFeeOOPFunctionMinimizedData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean,
                                               ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunctionMinimized)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunctionMinimized) = Nothing
            Dim SQLString As String = String.Empty
            Dim ReportColumnString As String = String.Empty
            'Dim ObjectQuery As IQueryable = Nothing
            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriodCode As String = String.Empty
            Dim JobDateCriteria As Integer = 0
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim IncludeClosedJobs As Boolean = False
            Dim ClientCodes As String = String.Empty
            Dim ClientDivisionCodes As String = String.Empty
            Dim ClientDivisionProductCodes As String = String.Empty
            Dim AccountExecutiveCodes As String = String.Empty
            Dim CampaignIDs As String = String.Empty
            Dim JobTypeCodes As String = String.Empty
            Dim EmployeeTimeCutoffDate As Date = Date.MinValue
            Dim IncomeOnlyCutoffDate As Date = Date.MinValue
            Dim APCutoffDate As Date = Date.MinValue
            Dim APPostPeriodCode As String = String.Empty
            Dim JobDetailItemDatas As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemData) = Nothing
            Dim JobDetailItemDataCores As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailItemDataCore) = Nothing
            Dim IncludeBilledRange As Boolean = False
            Dim BilledStartPostPeriodCode As String = String.Empty
            Dim BilledEndPostPeriodCode As String = String.Empty
            Dim CurrentStartDate As Date = Date.MinValue
            Dim CurrentEndDate As Date = Date.MinValue
            Dim CurrentPostPeriodCode As String = String.Empty
            Dim PriorEndDate As Date = Date.MinValue
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterIncludeBilledRange As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOOPFunctionsList As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCurrentStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateOption As System.Data.SqlClient.SqlParameter = Nothing


            Try

                SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
                SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@INCLUDE_CLOSED", SqlDbType.Bit)

                'SqlParameterIncludeBilledRange = New System.Data.SqlClient.SqlParameter("@IncludeBilledRange", SqlDbType.Bit)
                'SqlParameterStartPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_START_PERIOD", SqlDbType.VarChar)
                'SqlParameterEndPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_END_PERIOD", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)
                SqlParameterOOPFunctionsList = New System.Data.SqlClient.SqlParameter("@OOPFunctionList", SqlDbType.VarChar)

                'SqlParameterCurrentStartDate = New System.Data.SqlClient.SqlParameter("@Current_StartDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentEndDate = New System.Data.SqlClient.SqlParameter("@Current_EndDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentPeriod = New System.Data.SqlClient.SqlParameter("@CURRENT_PERIOD", SqlDbType.VarChar)

                'SqlParameterDateOption = New System.Data.SqlClient.SqlParameter("@DateOption", SqlDbType.VarChar)

                SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
                If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)
                Else
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = System.DBNull.Value
                End If

                'SqlParameterCurrentStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                'SqlParameterCurrentEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then
                '    SqlParameterCurrentPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)
                'Else
                '    SqlParameterCurrentPeriod.Value = System.DBNull.Value
                'End If

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
                SqlParameterShowJobsWithNoDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
                SqlParameterIncludeClosedJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

                'SqlParameterIncludeBilledRange.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterStartPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
                'Else
                '    SqlParameterStartPeriodBilled.Value = System.DBNull.Value
                'End If
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterEndPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)
                'Else
                '    SqlParameterEndPeriodBilled.Value = System.DBNull.Value
                'End If
                'SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                    SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterCampaignIDList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                    SqlParameterJobTypeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) IsNot Nothing Then

                    SqlParameterOOPFunctionsList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOOPFunctionsList.Value = System.DBNull.Value

                End If

                'SqlParameterDateOption.Value = System.DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.DateOption.ToString)

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPFunctionMinimized) _
                                                                                    ("EXEC [dbo].[advsp_job_detail_oop_by_function_load_minimized] @DATE_TYPE, @START_DATE, @END_DATE, @SHOW_JOBS_WO_DETAILS, @INCLUDE_CLOSED,@et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, " &
                                                                                     "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @CampaignIDList, @JobTypeList, @OOPFunctionList",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterShowJobsWithNoDetails, SqlParameterIncludeClosedJobs, SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterCampaignIDList, SqlParameterJobTypeList, SqlParameterOOPFunctionsList).ToList





            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailFeeOOPFunctionMinimizedData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadJobDetailFeeOOPJobMinimizedData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean,
                                               ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobMinimized)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobMinimized) = Nothing
            Dim SQLString As String = String.Empty
            Dim ReportColumnString As String = String.Empty
            'Dim ObjectQuery As IQueryable = Nothing
            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriodCode As String = String.Empty
            Dim JobDateCriteria As Integer = 0
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim IncludeClosedJobs As Boolean = False
            Dim ClientCodes As String = String.Empty
            Dim ClientDivisionCodes As String = String.Empty
            Dim ClientDivisionProductCodes As String = String.Empty
            Dim AccountExecutiveCodes As String = String.Empty
            Dim CampaignIDs As String = String.Empty
            Dim JobTypeCodes As String = String.Empty
            Dim EmployeeTimeCutoffDate As Date = Date.MinValue
            Dim IncomeOnlyCutoffDate As Date = Date.MinValue
            Dim APCutoffDate As Date = Date.MinValue
            Dim APPostPeriodCode As String = String.Empty
            Dim IncludeBilledRange As Boolean = False
            Dim BilledStartPostPeriodCode As String = String.Empty
            Dim BilledEndPostPeriodCode As String = String.Empty
            Dim CurrentStartDate As Date = Date.MinValue
            Dim CurrentEndDate As Date = Date.MinValue
            Dim CurrentPostPeriodCode As String = String.Empty
            Dim PriorEndDate As Date = Date.MinValue
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterIncludeBilledRange As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOOPFunctionsList As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCurrentStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateOption As System.Data.SqlClient.SqlParameter = Nothing


            Try

                SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
                SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@INCLUDE_CLOSED", SqlDbType.Bit)

                'SqlParameterIncludeBilledRange = New System.Data.SqlClient.SqlParameter("@IncludeBilledRange", SqlDbType.Bit)
                'SqlParameterStartPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_START_PERIOD", SqlDbType.VarChar)
                'SqlParameterEndPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_END_PERIOD", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)
                SqlParameterOOPFunctionsList = New System.Data.SqlClient.SqlParameter("@OOPFunctionList", SqlDbType.VarChar)

                'SqlParameterCurrentStartDate = New System.Data.SqlClient.SqlParameter("@Current_StartDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentEndDate = New System.Data.SqlClient.SqlParameter("@Current_EndDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentPeriod = New System.Data.SqlClient.SqlParameter("@CURRENT_PERIOD", SqlDbType.VarChar)

                'SqlParameterDateOption = New System.Data.SqlClient.SqlParameter("@DateOption", SqlDbType.VarChar)

                SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
                If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)
                Else
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = System.DBNull.Value
                End If

                'SqlParameterCurrentStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                'SqlParameterCurrentEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then
                '    SqlParameterCurrentPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)
                'Else
                '    SqlParameterCurrentPeriod.Value = System.DBNull.Value
                'End If

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
                SqlParameterShowJobsWithNoDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
                SqlParameterIncludeClosedJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

                'SqlParameterIncludeBilledRange.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterStartPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
                'Else
                '    SqlParameterStartPeriodBilled.Value = System.DBNull.Value
                'End If
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterEndPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)
                'Else
                '    SqlParameterEndPeriodBilled.Value = System.DBNull.Value
                'End If
                'SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                    SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterCampaignIDList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                    SqlParameterJobTypeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) IsNot Nothing Then

                    SqlParameterOOPFunctionsList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOOPFunctionsList.Value = System.DBNull.Value

                End If

                'SqlParameterDateOption.Value = System.DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.DateOption.ToString)

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJobMinimized) _
                                                                                    ("EXEC [dbo].[advsp_job_detail_oop_by_job_load_minimized] @DATE_TYPE, @START_DATE, @END_DATE, @SHOW_JOBS_WO_DETAILS, @INCLUDE_CLOSED,@et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, " &
                                                                                     "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @CampaignIDList, @JobTypeList, @OOPFunctionList",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterShowJobsWithNoDetails, SqlParameterIncludeClosedJobs, SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterCampaignIDList, SqlParameterJobTypeList, SqlParameterOOPFunctionsList).ToList





            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailFeeOOPJobMinimizedData = DynamicReportObjects
            End Try

        End Function
        Private Function LoadJobDetailFeeOOPJob2MinimizedData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean,
                                               ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob2Minimized)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob2Minimized) = Nothing
            Dim SQLString As String = String.Empty
            Dim ReportColumnString As String = String.Empty
            'Dim ObjectQuery As IQueryable = Nothing
            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriodCode As String = String.Empty
            Dim JobDateCriteria As Integer = 0
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim IncludeClosedJobs As Boolean = False
            Dim ClientCodes As String = String.Empty
            Dim ClientDivisionCodes As String = String.Empty
            Dim ClientDivisionProductCodes As String = String.Empty
            Dim AccountExecutiveCodes As String = String.Empty
            Dim CampaignIDs As String = String.Empty
            Dim JobTypeCodes As String = String.Empty
            Dim EmployeeTimeCutoffDate As Date = Date.MinValue
            Dim IncomeOnlyCutoffDate As Date = Date.MinValue
            Dim APCutoffDate As Date = Date.MinValue
            Dim APPostPeriodCode As String = String.Empty
            Dim IncludeBilledRange As Boolean = False
            Dim BilledStartPostPeriodCode As String = String.Empty
            Dim BilledEndPostPeriodCode As String = String.Empty
            Dim CurrentStartDate As Date = Date.MinValue
            Dim CurrentEndDate As Date = Date.MinValue
            Dim CurrentPostPeriodCode As String = String.Empty
            Dim PriorEndDate As Date = Date.MinValue
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterIncludeBilledRange As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOOPFunctionsList As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCurrentStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateOption As System.Data.SqlClient.SqlParameter = Nothing


            Try

                SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
                SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@INCLUDE_CLOSED", SqlDbType.Bit)

                'SqlParameterIncludeBilledRange = New System.Data.SqlClient.SqlParameter("@IncludeBilledRange", SqlDbType.Bit)
                'SqlParameterStartPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_START_PERIOD", SqlDbType.VarChar)
                'SqlParameterEndPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_END_PERIOD", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)
                SqlParameterOOPFunctionsList = New System.Data.SqlClient.SqlParameter("@OOPFunctionList", SqlDbType.VarChar)

                'SqlParameterCurrentStartDate = New System.Data.SqlClient.SqlParameter("@Current_StartDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentEndDate = New System.Data.SqlClient.SqlParameter("@Current_EndDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentPeriod = New System.Data.SqlClient.SqlParameter("@CURRENT_PERIOD", SqlDbType.VarChar)

                'SqlParameterDateOption = New System.Data.SqlClient.SqlParameter("@DateOption", SqlDbType.VarChar)

                SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
                If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)
                Else
                    SqlParameterAccountsPayablePostingPeriodCutoff.Value = System.DBNull.Value
                End If

                'SqlParameterCurrentStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                'SqlParameterCurrentEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then
                '    SqlParameterCurrentPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)
                'Else
                '    SqlParameterCurrentPeriod.Value = System.DBNull.Value
                'End If

                SqlParameterCriteria.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobDateCriteria.ToString)
                SqlParameterFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobStartDate.ToString)
                SqlParameterToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.JobEndDate.ToString)
                SqlParameterShowJobsWithNoDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.ShowJobsWithNoDetails.ToString)
                SqlParameterIncludeClosedJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeClosed.ToString)

                'SqlParameterIncludeBilledRange.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterStartPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
                'Else
                '    SqlParameterStartPeriodBilled.Value = System.DBNull.Value
                'End If
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterEndPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)
                'Else
                '    SqlParameterEndPeriodBilled.Value = System.DBNull.Value
                'End If
                'SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                    SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterCampaignIDList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                    SqlParameterJobTypeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterJobTypeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString) IsNot Nothing Then

                    SqlParameterOOPFunctionsList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedOOPFunctions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOOPFunctionsList.Value = System.DBNull.Value

                End If

                'SqlParameterDateOption.Value = System.DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.DateOption.ToString)

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.JobDetailFeesOOPJob2Minimized) _
                                                                                    ("EXEC [dbo].[advsp_job_detail_oop_by_job2_load_minimized] @DATE_TYPE, @START_DATE, @END_DATE, @SHOW_JOBS_WO_DETAILS, @INCLUDE_CLOSED,@et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, " &
                                                                                     "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @CampaignIDList, @JobTypeList, @OOPFunctionList",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterShowJobsWithNoDetails, SqlParameterIncludeClosedJobs, SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterCampaignIDList, SqlParameterJobTypeList, SqlParameterOOPFunctionsList).ToList





            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadJobDetailFeeOOPJob2MinimizedData = DynamicReportObjects
            End Try

        End Function

        Private Function LoadSecurityGroupSettingsData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupSettings)

            Dim SecurityGroupSettings As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupSettings) = Nothing
            Dim SqlParameterGroupList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedGroups As Generic.List(Of Integer) = Nothing

            Try

                SqlParameterGroupList = New System.Data.SqlClient.SqlParameter("@group_list", SqlDbType.VarChar)

                SelectedGroups = ParameterDictionary("SelectedGroups")

                If SelectedGroups Is Nothing Then

                    SqlParameterGroupList.Value = System.DBNull.Value

                ElseIf SelectedGroups.Count = 0 Then

                    SqlParameterGroupList.Value = System.DBNull.Value

                Else

                    SqlParameterGroupList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.SelectedGroups.ToString), IEnumerable(Of Integer)).ToArray)

                End If

                SecurityGroupSettings = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupSettings) _
                                                     ("EXEC [dbo].[advsp_sec_group_settings] @group_list",
                                                      SqlParameterGroupList).ToList

            Catch ex As Exception
                SecurityGroupSettings = Nothing
            Finally
                LoadSecurityGroupSettingsData = SecurityGroupSettings
            End Try

        End Function
        Private Function LoadSecurityGroupModuleSettingsData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupModuleAccess)

            Dim SecurityGroupModuleAccess As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupModuleAccess) = Nothing
            Dim SqlParameterGroupList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowOnlyAccessible As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedGroups As Generic.List(Of Integer) = Nothing

            Try

                SqlParameterGroupList = New System.Data.SqlClient.SqlParameter("@group_list", SqlDbType.VarChar)
                SqlParameterShowOnlyAccessible = New System.Data.SqlClient.SqlParameter("@show_only_accessible", SqlDbType.Bit)

                SqlParameterShowOnlyAccessible.Value = ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.ShowOnlyAccessibleModules.ToString)

                SelectedGroups = ParameterDictionary("SelectedGroups")

                If SelectedGroups Is Nothing Then

                    SqlParameterGroupList.Value = System.DBNull.Value

                ElseIf SelectedGroups.Count = 0 Then

                    SqlParameterGroupList.Value = System.DBNull.Value

                Else

                    SqlParameterGroupList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.SelectedGroups.ToString), IEnumerable(Of Integer)).ToArray)

                End If

                SecurityGroupModuleAccess = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupModuleAccess) _
                                                     ("EXEC [dbo].[advsp_sec_group_module_access] @show_only_accessible, @group_list",
                                                      SqlParameterShowOnlyAccessible, SqlParameterGroupList).ToList

            Catch ex As Exception
                SecurityGroupModuleAccess = Nothing
            Finally
                LoadSecurityGroupModuleSettingsData = SecurityGroupModuleAccess
            End Try

        End Function
        Private Function LoadSecurityGroupUserSettingsData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupUserSettings)

            Dim SecurityGroupUserSettings As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupUserSettings) = Nothing
            Dim SqlParameterIncludeTerminated As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterGroupList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedGroups As Generic.List(Of Integer) = Nothing
            Dim SelectedUsers As Generic.List(Of Integer) = Nothing

            Try

                SqlParameterGroupList = New System.Data.SqlClient.SqlParameter("@group_list", SqlDbType.VarChar)
                SqlParameterUserList = New System.Data.SqlClient.SqlParameter("@user_list", SqlDbType.VarChar)
                SqlParameterIncludeTerminated = New System.Data.SqlClient.SqlParameter("@include_terminated", SqlDbType.Bit)

                SqlParameterIncludeTerminated.Value = ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.IncludeTerminatedEmployees.ToString)

                SelectedGroups = ParameterDictionary("SelectedGroups")
                SelectedUsers = ParameterDictionary("SelectedUsers")

                If SelectedGroups Is Nothing Then

                    SqlParameterGroupList.Value = System.DBNull.Value

                ElseIf SelectedGroups.Count = 0 Then

                    SqlParameterGroupList.Value = System.DBNull.Value

                Else

                    SqlParameterGroupList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.SelectedGroups.ToString), IEnumerable(Of Integer)).ToArray)

                End If

                If SelectedUsers Is Nothing Then

                    SqlParameterUserList.Value = System.DBNull.Value

                ElseIf SelectedUsers.Count = 0 Then

                    SqlParameterUserList.Value = System.DBNull.Value

                Else

                    SqlParameterUserList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.SelectedUsers.ToString), IEnumerable(Of Integer)).ToArray)

                End If

                SecurityGroupUserSettings = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.SecurityGroupUserSettings) _
                                                     ("EXEC [dbo].[advsp_sec_group_user_settings] @include_terminated, @group_list, @user_list",
                                                      SqlParameterIncludeTerminated, SqlParameterGroupList, SqlParameterUserList).ToList

            Catch ex As Exception
                SecurityGroupUserSettings = Nothing
            Finally
                LoadSecurityGroupUserSettingsData = SecurityGroupUserSettings
            End Try

        End Function
        Private Function LoadSecurityUserSettingsData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserSettings)

            Dim SecurityUserSettings As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserSettings) = Nothing
            Dim SqlParameterUserList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeTerminated As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedUsers As Generic.List(Of Integer) = Nothing

            Try

                SqlParameterUserList = New System.Data.SqlClient.SqlParameter("@user_list", SqlDbType.VarChar)
                SqlParameterIncludeTerminated = New System.Data.SqlClient.SqlParameter("@include_terminated", SqlDbType.Bit)

                SqlParameterIncludeTerminated.Value = ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.IncludeTerminatedEmployees.ToString)

                SelectedUsers = ParameterDictionary("SelectedUsers")

                If SelectedUsers Is Nothing Then

                    SqlParameterUserList.Value = System.DBNull.Value

                ElseIf SelectedUsers.Count = 0 Then

                    SqlParameterUserList.Value = System.DBNull.Value

                Else

                    SqlParameterUserList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.SelectedUsers.ToString), IEnumerable(Of Integer)).ToArray)

                End If

                SecurityUserSettings = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserSettings) _
                                                     ("EXEC [dbo].[advsp_sec_user_settings] @include_terminated, @user_list",
                                                      SqlParameterIncludeTerminated, SqlParameterUserList).ToList

            Catch ex As Exception
                SecurityUserSettings = Nothing
            Finally
                LoadSecurityUserSettingsData = SecurityUserSettings
            End Try

        End Function
        Private Function LoadUserTimesheetFunctionData(ByVal DbContext As AdvantageFramework.Database.DbContext) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.UserTimesheetFunction)

            Dim UserTimesheetFunctions As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.UserTimesheetFunction) = Nothing

            Try

                UserTimesheetFunctions = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.UserTimesheetFunction)("SELECT 
	                                                                                                                                                [EmployeeCode] = E.EMP_CODE,
	                                                                                                                                                [EmployeeName] = COALESCE((RTRIM(E.EMP_FNAME) + ' '), '') + COALESCE((E.EMP_MI + '. '), '') + COALESCE(E.EMP_LNAME, ''),
	                                                                                                                                                [UserCode] = SU.USER_CODE,
	                                                                                                                                                [FunctionCode] = ETF.FNC_CODE,
	                                                                                                                                                [FunctionDescription] = F.FNC_DESCRIPTION
                                                                                                                                                FROM
	                                                                                                                                                [dbo].[EMP_TS_FNC] AS ETF
	                                                                                                                                                INNER JOIN [dbo].[EMPLOYEE] AS E ON E.EMP_CODE = ETF.EMP_CODE
	                                                                                                                                                INNER JOIN [dbo].[SEC_USER] AS SU ON SU.EMP_CODE = E.EMP_CODE
	                                                                                                                                                INNER JOIN [dbo].[FUNCTIONS] AS F ON F.FNC_CODE = ETF.FNC_CODE").ToList

            Catch ex As Exception
                UserTimesheetFunctions = Nothing
            Finally
                LoadUserTimesheetFunctionData = UserTimesheetFunctions
            End Try

        End Function
        Private Function LoadSecurityUserLoginAuditData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserLoginAudit)

            Dim SecurityUserLoginAudits As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserLoginAudit) = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOnlyFailures As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.DateTime) With {.Value = ParameterDictionary(AdvantageFramework.Reporting.SecurityUserLoginAuditParameters.StartDate.ToString)}
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.DateTime) With {.Value = ParameterDictionary(AdvantageFramework.Reporting.SecurityUserLoginAuditParameters.EndDate.ToString)}
                SqlParameterOnlyFailures = New System.Data.SqlClient.SqlParameter("@OnlyFailures", SqlDbType.Bit) With {.Value = ParameterDictionary(AdvantageFramework.Reporting.SecurityUserLoginAuditParameters.OnlyFailures.ToString)}

                SecurityUserLoginAudits = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserLoginAudit) _
                                                                     ("EXEC [dbo].[advsp_security_user_login_audit_dataset] @StartDate, @EndDate, @OnlyFailures",
                                                                      SqlParameterStartDate, SqlParameterEndDate, SqlParameterOnlyFailures).ToList

            Catch ex As Exception
                SecurityUserLoginAudits = Nothing
            Finally
                LoadSecurityUserLoginAuditData = SecurityUserLoginAudits
            End Try

        End Function
        Private Function LoadSecurityUserModuleSettingsData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserModuleAccess)

            Dim SecurityUserModuleAccess As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserModuleAccess) = Nothing
            Dim SqlParameterUserList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeTerminated As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowOnlyAccessible As System.Data.SqlClient.SqlParameter = Nothing
            Dim SelectedUsers As Generic.List(Of Integer) = Nothing

            Try

                SqlParameterUserList = New System.Data.SqlClient.SqlParameter("@user_list", SqlDbType.VarChar)
                SqlParameterIncludeTerminated = New System.Data.SqlClient.SqlParameter("@include_terminated", SqlDbType.Bit)
                SqlParameterShowOnlyAccessible = New System.Data.SqlClient.SqlParameter("@show_only_accessible", SqlDbType.Bit)

                SqlParameterShowOnlyAccessible.Value = ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.ShowOnlyAccessibleModules.ToString)
                SqlParameterIncludeTerminated.Value = ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.IncludeTerminatedEmployees.ToString)

                SelectedUsers = ParameterDictionary("SelectedUsers")

                If SelectedUsers Is Nothing Then

                    SqlParameterUserList.Value = System.DBNull.Value

                ElseIf SelectedUsers.Count = 0 Then

                    SqlParameterUserList.Value = System.DBNull.Value

                Else

                    SqlParameterUserList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.SecurityParameters.SelectedUsers.ToString), IEnumerable(Of Integer)).ToArray)

                End If

                SecurityUserModuleAccess = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.SecurityUserModuleAccess) _
                                                     ("EXEC [dbo].[advsp_sec_user_module_access] @include_terminated, @show_only_accessible, @user_list",
                                                      SqlParameterIncludeTerminated, SqlParameterShowOnlyAccessible, SqlParameterUserList).ToList

            Catch ex As Exception
                SecurityUserModuleAccess = Nothing
            Finally
                LoadSecurityUserModuleSettingsData = SecurityUserModuleAccess
            End Try

        End Function

        Private Function LoadTaskByEmplyeeData(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, Criteria As Integer, From As Date, [To] As Date, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.ProjectScheduleTasksByEmployeeReport)

            'objects
            Dim SqlParameterSelectedDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSalesClassCodes As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeCodes As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterSelectedDate = New System.Data.SqlClient.SqlParameter("@SelectedDate", SqlDbType.VarChar)
            SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.SmallDateTime)
            SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.SmallDateTime)
            SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@IncludeClosedJobs", SqlDbType.Bit)
            SqlParameterClientCodes = New System.Data.SqlClient.SqlParameter("@ClientCodes", SqlDbType.VarChar)
            SqlParameterAECodes = New System.Data.SqlClient.SqlParameter("@AECodes", SqlDbType.VarChar)
            SqlParameterSalesClassCodes = New System.Data.SqlClient.SqlParameter("@SalesClassCodes", SqlDbType.VarChar)
            SqlParameterJobTypeCodes = New System.Data.SqlClient.SqlParameter("@JobTypeCodes", SqlDbType.VarChar)

            SqlParameterSelectedDate.Value = [Enum].GetName(GetType(AdvantageFramework.Reporting.ProjectScheduleTasksByEmployeeInitialCriteria), CInt(Criteria))
            SqlParameterStartDate.Value = From
            SqlParameterEndDate.Value = [To]

            If ParameterDictionary.ContainsKey("IncludeClosedJobs") Then

                If ParameterDictionary("IncludeClosedJobs") = False Then

                    SqlParameterIncludeClosedJobs.Value = 0

                Else

                    SqlParameterIncludeClosedJobs.Value = 1

                End If

            Else

                SqlParameterIncludeClosedJobs.Value = 0

            End If

            If ParameterDictionary.ContainsKey("ClientCodes") AndAlso ParameterDictionary("ClientCodes") IsNot Nothing Then

                SqlParameterClientCodes.Value = String.Join(",", DirectCast(ParameterDictionary("ClientCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterClientCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("AECodes") AndAlso ParameterDictionary("AECodes") IsNot Nothing Then

                SqlParameterAECodes.Value = String.Join(",", DirectCast(ParameterDictionary("AECodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterAECodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("SalesClassCodes") AndAlso ParameterDictionary("SalesClassCodes") IsNot Nothing Then

                SqlParameterSalesClassCodes.Value = String.Join(",", DirectCast(ParameterDictionary("SalesClassCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterSalesClassCodes.Value = System.DBNull.Value

            End If

            If ParameterDictionary.ContainsKey("JobTypeCodes") AndAlso ParameterDictionary("JobTypeCodes") IsNot Nothing Then

                SqlParameterJobTypeCodes.Value = String.Join(",", DirectCast(ParameterDictionary("JobTypeCodes"), IEnumerable(Of String)).ToArray)

            Else

                SqlParameterJobTypeCodes.Value = System.DBNull.Value

            End If

            LoadTaskByEmplyeeData = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.ProjectScheduleTasksByEmployeeReport)("exec dbo.advsp_task_by_employee_report @SelectedDate, @StartDate, @EndDate, @IncludeClosedJobs, @ClientCodes, @AECodes, @SalesClassCodes, @JobTypeCodes",
                                                 SqlParameterSelectedDate, SqlParameterStartDate, SqlParameterEndDate, SqlParameterIncludeClosedJobs, SqlParameterClientCodes, SqlParameterAECodes, SqlParameterSalesClassCodes, SqlParameterJobTypeCodes).ToList

        End Function
        Public Function LoadMonthEndAccountsReceivable(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.AROpenAgedMonthEnd)

            'objects
            Try
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterAgingDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterAgingOption As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeDetails As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterRecordSource As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterPeriodCutoff = New System.Data.SqlClient.SqlParameter("@PeriodCutoff", SqlDbType.VarChar)
                SqlParameterAgingDate = New System.Data.SqlClient.SqlParameter("@AgingDate", SqlDbType.SmallDateTime)
                SqlParameterAgingOption = New System.Data.SqlClient.SqlParameter("@AgingOption", SqlDbType.SmallInt)
                SqlParameterIncludeDetails = New System.Data.SqlClient.SqlParameter("@IncludeDetails", SqlDbType.Bit)
                SqlParameterRecordSource = New System.Data.SqlClient.SqlParameter("@RecordSource", SqlDbType.Int)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)

                SqlParameterUserID.Value = ReportingDbContext.UserCode
                SqlParameterPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.EndPeriod.ToString)
                SqlParameterAgingDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.AgingDate.ToString)
                SqlParameterAgingOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.AgingOption.ToString)
                SqlParameterIncludeDetails.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.IncludeDetails.ToString)
                SqlParameterRecordSource.Value = 0

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedOffices.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedOffices.ToString) IsNot Nothing Then

                    SqlParameterOfficeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedOffices.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOfficeList.Value = System.DBNull.Value

                End If

                LoadMonthEndAccountsReceivable = ReportingDbContext.Database.SqlQuery(Of Database.Classes.AROpenAgedMonthEnd)("EXEC dbo.usp_wv_Dataset_AR_Aging_MonthEnd @UserID, @PeriodCutoff, @AgingDate, @AgingOption, @IncludeDetails, @RecordSource, @OFFICE_LIST",
                                                    SqlParameterUserID, SqlParameterPeriodCutoff, SqlParameterAgingDate, SqlParameterAgingOption, SqlParameterIncludeDetails, SqlParameterRecordSource, SqlParameterOfficeList).ToList


            Catch ex As Exception
                LoadMonthEndAccountsReceivable = Nothing
            End Try
        End Function
        Public Function LoadMonthEndMediaWIP(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MonthEndMediaWIP)

            'objects
            Try
                Dim SqlParameterEndPeriod As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOrderOption As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterWIPOption As System.Data.SqlClient.SqlParameter = Nothing

                Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterEndPeriod = New System.Data.SqlClient.SqlParameter("@end_period", SqlDbType.VarChar)
                SqlParameterOrderOption = New System.Data.SqlClient.SqlParameter("@order_option", SqlDbType.TinyInt)
                SqlParameterWIPOption = New System.Data.SqlClient.SqlParameter("@wip_option", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@USER_CODE", SqlDbType.VarChar)

                SqlParameterEndPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.EndPeriod.ToString)
                SqlParameterOrderOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.OrderOption.ToString)
                SqlParameterWIPOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.WIPOption.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedOffices.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedOffices.ToString) IsNot Nothing Then

                    SqlParameterOfficeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndMediaWIPParameters.SelectedOffices.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOfficeList.Value = System.DBNull.Value

                End If
                SqlParameterUserCode.Value = ReportingDbContext.UserCode

                LoadMonthEndMediaWIP = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MonthEndMediaWIP)("exec dbo.advsp_media_wip_detail @end_period, @order_option, @wip_option, @OFFICE_LIST, @CLIENT_LIST, @DIVISION_LIST, @PRODUCT_LIST, @USER_CODE",
                                                     SqlParameterEndPeriod, SqlParameterOrderOption, SqlParameterWIPOption, SqlParameterOfficeList, SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterUserCode).ToList
            Catch ex As Exception
                LoadMonthEndMediaWIP = Nothing
            End Try


        End Function
        Public Function LoadMonthEndProductionWIP(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MonthEndProductionWIP)

            'objects
            Try
                Dim SqlParameterEndPeriod As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterOrderOption As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterWIPOption As System.Data.SqlClient.SqlParameter = Nothing

                'Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterAgingOption As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterAgingDate As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterEndPeriod = New System.Data.SqlClient.SqlParameter("@end_period", SqlDbType.VarChar)
                'SqlParameterOrderOption = New System.Data.SqlClient.SqlParameter("@order_option", SqlDbType.TinyInt)
                'SqlParameterWIPOption = New System.Data.SqlClient.SqlParameter("@wip_option", SqlDbType.VarChar)

                'SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                'SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                'SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
                SqlParameterAgingOption = New System.Data.SqlClient.SqlParameter("@aging_option", SqlDbType.TinyInt)
                SqlParameterAgingDate = New System.Data.SqlClient.SqlParameter("@aging_date", SqlDbType.Date)
                'SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@USER_CODE", SqlDbType.VarChar)

                SqlParameterEndPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.EndPeriod.ToString)
                SqlParameterAgingDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.AgingDate.ToString)
                SqlParameterAgingOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.AgingOption.ToString)
                'SqlParameterOrderOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.OrderOption.ToString)
                'SqlParameterWIPOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.WIPOption.ToString)

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedClients.ToString) IsNot Nothing Then

                '    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterClientCodeList.Value = System.DBNull.Value

                'End If

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedDivisions.ToString) IsNot Nothing Then

                '    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                'End If

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedProducts.ToString) IsNot Nothing Then

                '    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                'End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedOffices.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedOffices.ToString) IsNot Nothing Then

                    SqlParameterOfficeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedOffices.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOfficeList.Value = System.DBNull.Value

                End If
                'SqlParameterUserCode.Value = ReportingDbContext.UserCode

                LoadMonthEndProductionWIP = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MonthEndProductionWIP)("exec dbo.advsp_production_wip_detail @end_period, @OFFICE_LIST, @aging_date, @aging_option",
                                                     SqlParameterEndPeriod, SqlParameterOfficeList, SqlParameterAgingDate, SqlParameterAgingOption).ToList
            Catch ex As Exception
                LoadMonthEndProductionWIP = Nothing
            End Try


        End Function

        Public Function LoadMonthEndAccruedLiability(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MonthEndAccruedLiability)

            'objects
            Try
                Dim SqlParameterEndPeriod As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterOrderOption As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterWIPOption As System.Data.SqlClient.SqlParameter = Nothing

                'Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterEndPeriod = New System.Data.SqlClient.SqlParameter("@end_period", SqlDbType.VarChar)
                'SqlParameterOrderOption = New System.Data.SqlClient.SqlParameter("@order_option", SqlDbType.TinyInt)
                'SqlParameterWIPOption = New System.Data.SqlClient.SqlParameter("@wip_option", SqlDbType.VarChar)

                'SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                'SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                'SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@office_list", SqlDbType.VarChar)
                'SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@USER_CODE", SqlDbType.VarChar)

                SqlParameterEndPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndAccruedLiabilityParameters.EndPeriod.ToString)
                'SqlParameterOrderOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.OrderOption.ToString)
                'SqlParameterWIPOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.WIPOption.ToString)

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedClients.ToString) IsNot Nothing Then

                '    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterClientCodeList.Value = System.DBNull.Value

                'End If

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedDivisions.ToString) IsNot Nothing Then

                '    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                'End If

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedProducts.ToString) IsNot Nothing Then

                '    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                'End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndAccruedLiabilityParameters.SelectedOffices.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndAccruedLiabilityParameters.SelectedOffices.ToString) IsNot Nothing Then

                    SqlParameterOfficeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndAccruedLiabilityParameters.SelectedOffices.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOfficeList.Value = ""

                End If
                'SqlParameterUserCode.Value = ReportingDbContext.UserCode

                LoadMonthEndAccruedLiability = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MonthEndAccruedLiability)("exec dbo.advsp_accrued_liability_mo_end @office_list, @end_period",
                                                     SqlParameterOfficeList, SqlParameterEndPeriod).ToList
            Catch ex As Exception
                LoadMonthEndAccruedLiability = Nothing
            End Try


        End Function
        Public Function LoadMonthEndAccountsPayable(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MonthEndAccountsPayable)

            'objects
            Try
                Dim SqlParameterEndPeriod As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterOrderOption As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterWIPOption As System.Data.SqlClient.SqlParameter = Nothing

                'Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDetailOption As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterAgingOption As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterAgingDate As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterEndPeriod = New System.Data.SqlClient.SqlParameter("@end_period", SqlDbType.VarChar)
                'SqlParameterOrderOption = New System.Data.SqlClient.SqlParameter("@order_option", SqlDbType.TinyInt)
                'SqlParameterWIPOption = New System.Data.SqlClient.SqlParameter("@wip_option", SqlDbType.VarChar)

                'SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                'SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                'SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@office_list", SqlDbType.VarChar)
                'SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@USER_CODE", SqlDbType.VarChar)

                SqlParameterEndPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndAccountsPayableParameters.EndPeriod.ToString)

                SqlParameterDetailOption = New System.Data.SqlClient.SqlParameter("@detail_option", SqlDbType.TinyInt)
                SqlParameterAgingOption = New System.Data.SqlClient.SqlParameter("@aging_option", SqlDbType.TinyInt)
                SqlParameterAgingDate = New System.Data.SqlClient.SqlParameter("@aging_date", SqlDbType.Date)

                SqlParameterDetailOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndAccountsPayableParameters.IncludeDetails.ToString)
                SqlParameterAgingDate.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndAccountsPayableParameters.AgingDate.ToString)
                SqlParameterAgingOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndAccountsPayableParameters.AgingOption.ToString)


                'SqlParameterOrderOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.OrderOption.ToString)
                'SqlParameterWIPOption.Value = ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.WIPOption.ToString)

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedClients.ToString) IsNot Nothing Then

                '    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterClientCodeList.Value = System.DBNull.Value

                'End If

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedDivisions.ToString) IsNot Nothing Then

                '    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                'End If

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedProducts.ToString) IsNot Nothing Then

                '    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndProductionWIPParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                'End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.MonthEndAccountsPayableParameters.SelectedOffices.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.MonthEndAccountsPayableParameters.SelectedOffices.ToString) IsNot Nothing Then

                    SqlParameterOfficeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.MonthEndAccountsPayableParameters.SelectedOffices.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOfficeList.Value = DBNull.Value

                End If
                'SqlParameterUserCode.Value = ReportingDbContext.UserCode

                LoadMonthEndAccountsPayable = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MonthEndAccountsPayable)("exec dbo.advsp_acct_payable_mo_end @office_list, @end_period, @detail_option, @aging_option, @aging_date",
                                                     SqlParameterOfficeList, SqlParameterEndPeriod, SqlParameterDetailOption, SqlParameterAgingOption, SqlParameterAgingDate).ToList
            Catch ex As Exception
                LoadMonthEndAccountsPayable = Nothing
            End Try


        End Function
        Public Function LoadEmployeeHoursAllocationData(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeHoursAllocationReport)
            Try
                'objects
                Dim SelectedOffices As Generic.List(Of String) = Nothing
                Dim SelectedDepartments As Generic.List(Of String) = Nothing
                Dim SelectedRoles As Generic.List(Of String) = Nothing
                Dim SelectedEmployees As Generic.List(Of String) = Nothing

                Dim SqlParameterReportType As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEmpCode As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterSummaryLevel As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDepartments As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterRoles As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOffices As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEmployees As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOmitBeginningBalance As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeActuals As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterReportType = New System.Data.SqlClient.SqlParameter("@ReportType", SqlDbType.SmallInt)
                SqlParameterEmpCode = New System.Data.SqlClient.SqlParameter("@EMP_CODE", SqlDbType.VarChar)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterSummaryLevel = New System.Data.SqlClient.SqlParameter("@SUMMARY_LEVEL", SqlDbType.SmallInt)
                SqlParameterDepartments = New System.Data.SqlClient.SqlParameter("@DEPTS", SqlDbType.VarChar)
                SqlParameterRoles = New System.Data.SqlClient.SqlParameter("@ROLES", SqlDbType.VarChar)
                SqlParameterOffices = New System.Data.SqlClient.SqlParameter("@Offices", SqlDbType.VarChar)
                SqlParameterEmployees = New System.Data.SqlClient.SqlParameter("@EMP_LIST", SqlDbType.VarChar)
                SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterOmitBeginningBalance = New System.Data.SqlClient.SqlParameter("@OMIT_BEGINNING_BALANCE", SqlDbType.SmallInt)
                SqlParameterIncludeActuals = New System.Data.SqlClient.SqlParameter("@IncludeActuals", SqlDbType.Bit)


                SqlParameterReportType.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeHoursAllocationParameters.ReportType.ToString)
                SqlParameterEmpCode.Value = ""
                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeHoursAllocationParameters.StartDate.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeHoursAllocationParameters.EndDate.ToString)
                SqlParameterSummaryLevel.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeHoursAllocationParameters.ReportBy.ToString)

                If ParameterDictionary.ContainsKey("SelectedDepartments") AndAlso ParameterDictionary("SelectedDepartments") IsNot Nothing Then

                    SqlParameterDepartments.Value = String.Join(",", DirectCast(ParameterDictionary("SelectedDepartments"), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterDepartments.Value = System.DBNull.Value

                End If

                If ParameterDictionary.ContainsKey("SelectedRoles") AndAlso ParameterDictionary("SelectedRoles") IsNot Nothing Then

                    SqlParameterRoles.Value = String.Join(",", DirectCast(ParameterDictionary("SelectedRoles"), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterRoles.Value = System.DBNull.Value

                End If

                If ParameterDictionary.ContainsKey("SelectedOffices") AndAlso ParameterDictionary("SelectedOffices") IsNot Nothing Then

                    SqlParameterOffices.Value = String.Join(",", DirectCast(ParameterDictionary("SelectedOffices"), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOffices.Value = System.DBNull.Value

                End If

                If ParameterDictionary.ContainsKey("SelectedEmployees") AndAlso ParameterDictionary("SelectedEmployees") IsNot Nothing Then

                    SqlParameterEmployees.Value = String.Join(",", DirectCast(ParameterDictionary("SelectedEmployees"), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterEmployees.Value = System.DBNull.Value

                End If


                SqlParameterUserID.Value = DbContext.UserCode
                SqlParameterOmitBeginningBalance.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeHoursAllocationParameters.OmitBeginning.ToString)
                SqlParameterIncludeActuals.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeHoursAllocationParameters.IncludeActuals.ToString)



                LoadEmployeeHoursAllocationData = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.EmployeeHoursAllocationReport)("exec dbo.usp_wv_RESOURCES_EMP_DATASET @EMP_CODE, @ROLES, @START_DATE, @END_DATE, @SUMMARY_LEVEL, @DEPTS, @EMP_LIST, @UserID, @Offices, @OMIT_BEGINNING_BALANCE, @ReportType, @IncludeActuals",
                                                         SqlParameterEmpCode, SqlParameterRoles, SqlParameterStartDate, SqlParameterEndDate, SqlParameterSummaryLevel, SqlParameterDepartments, SqlParameterEmployees, SqlParameterUserID, SqlParameterOffices, SqlParameterOmitBeginningBalance, SqlParameterReportType, SqlParameterIncludeActuals).ToList


            Catch ex As Exception
                LoadEmployeeHoursAllocationData = Nothing
            End Try
        End Function

        Public Function LoadInvoiceBilledBackupData(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.InvoiceBilledBackup)
            Try
                'objects
                Dim SelectedClients As Generic.List(Of String) = Nothing

                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientCodes As System.Data.SqlClient.SqlParameter = Nothing


                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterClientCodes = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)

                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.InvoiceBilledBackupInitialParameters.StartDate.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.InvoiceBilledBackupInitialParameters.EndDate.ToString)


                If ParameterDictionary.ContainsKey("SelectedClients") AndAlso ParameterDictionary("SelectedClients") IsNot Nothing Then

                    SqlParameterClientCodes.Value = String.Join(",", DirectCast(ParameterDictionary("SelectedClients"), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodes.Value = System.DBNull.Value

                End If



                LoadInvoiceBilledBackupData = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.InvoiceBilledBackup)("exec dbo.advsp_invoice_backup_detail @START_DATE, @END_DATE, @CLIENT_LIST",
                                                         SqlParameterStartDate, SqlParameterEndDate, SqlParameterClientCodes).ToList


            Catch ex As Exception
                LoadInvoiceBilledBackupData = Nothing
            End Try
        End Function
        Public Function LoadBillingWorksheetProductionDetailV2(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReportV2)

            Dim BillingWorksheetProductionReportV2s As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReportV2) = Nothing
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobOption As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNonBillableTimeDetail As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNonBillableAPIODetail As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPrintItemDetail As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeContingency As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterBillingCommandCenterID As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSelectedJobList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterNonbillableTimeFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterNonbillableTimeToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPopulateTimeComments As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPopulateAPComments As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterPopulateIOComments As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)
                SqlParameterJobType = New System.Data.SqlClient.SqlParameter("@job_type", SqlDbType.SmallInt)
                SqlParameterJobOption = New System.Data.SqlClient.SqlParameter("@job_option", SqlDbType.SmallInt)
                SqlParameterIncludeNonBillableTimeDetail = New System.Data.SqlClient.SqlParameter("@include_non_billable_time_detail", SqlDbType.Bit)
                SqlParameterIncludeNonBillableAPIODetail = New System.Data.SqlClient.SqlParameter("@include_non_billable_ap_io_detail", SqlDbType.Bit)
                SqlParameterPrintItemDetail = New System.Data.SqlClient.SqlParameter("@print_item_detail", SqlDbType.SmallInt)
                SqlParameterIncludeContingency = New System.Data.SqlClient.SqlParameter("@IncludeContingency", SqlDbType.Bit)
                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@AECodeList", SqlDbType.VarChar)
                SqlParameterBillingCommandCenterID = New System.Data.SqlClient.SqlParameter("@BillingCommandCenterID", SqlDbType.Int)
                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@user_code", SqlDbType.VarChar)
                SqlParameterSelectedJobList = New System.Data.SqlClient.SqlParameter("@SelectedJobList", SqlDbType.VarChar)
                SqlParameterNonbillableTimeFromDate = New System.Data.SqlClient.SqlParameter("@non_billable_from_date", SqlDbType.SmallDateTime)
                SqlParameterNonbillableTimeToDate = New System.Data.SqlClient.SqlParameter("@non_billable_to_date", SqlDbType.SmallDateTime)
                SqlParameterPopulateTimeComments = New System.Data.SqlClient.SqlParameter("@populate_time_comments", SqlDbType.Bit)
                SqlParameterPopulateAPComments = New System.Data.SqlClient.SqlParameter("@populate_ap_comments", SqlDbType.Bit)
                SqlParameterPopulateIOComments = New System.Data.SqlClient.SqlParameter("@populate_io_comments", SqlDbType.Bit)

                SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.EmployeeDateCutoff.ToString)
                SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.IncomeOnlyDateCutoff.ToString)
                SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.AccountsPayablePostingPeriodCutoff.ToString)
                SqlParameterJobType.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.JobType.ToString)
                SqlParameterJobOption.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.JobOption.ToString)

                SqlParameterIncludeNonBillableTimeDetail.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.IncludeNonBillableTimeDetail.ToString)
                SqlParameterIncludeNonBillableAPIODetail.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.IncludeNonBillableAPIODetail.ToString)
                SqlParameterPrintItemDetail.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.PrintItemDetail.ToString)
                SqlParameterIncludeContingency.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.IncludeContingency.ToString)
                SqlParameterUserCode.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.UserCode.ToString)

                SqlParameterPopulateTimeComments.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.PopulateTimeComments.ToString)
                SqlParameterPopulateAPComments.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.PopulateAPComments.ToString)
                SqlParameterPopulateIOComments.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.PopulateIOComments.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.BillingCommandCenterID.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.BillingCommandCenterID.ToString) IsNot Nothing Then

                    SqlParameterBillingCommandCenterID.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.BillingCommandCenterID.ToString)

                Else

                    SqlParameterBillingCommandCenterID.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedJobs.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedJobs.ToString) IsNot Nothing Then

                    SqlParameterSelectedJobList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.SelectedJobs.ToString), IEnumerable(Of Integer)).ToArray)

                Else

                    SqlParameterSelectedJobList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeStartDate.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeStartDate.ToString) IsNot Nothing Then

                    SqlParameterNonbillableTimeFromDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeStartDate.ToString)

                Else

                    SqlParameterNonbillableTimeFromDate.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeEndDate.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeEndDate.ToString) IsNot Nothing Then

                    SqlParameterNonbillableTimeToDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingWorksheetInitialCriteria.NonBillableTimeEndDate.ToString)

                Else

                    SqlParameterNonbillableTimeToDate.Value = System.DBNull.Value

                End If

                BillingWorksheetProductionReportV2s = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.BillingWorksheetProductionReportV2) _
                                                                                ("EXEC [dbo].[advsp_bcc_billing_worksheet_production_v2] @et_date_cutoff, @io_date_cutoff, @ap_pp_cutoff, @job_type, @job_option, " &
                                                                                 "@include_non_billable_time_detail, @include_non_billable_ap_io_detail, @print_item_detail, @IncludeContingency, @user_code, " &
                                                                                 "@ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList, @AECodeList, @BillingCommandCenterID, @SelectedJobList, " &
                                                                                 "@non_billable_from_date, @non_billable_to_date, @populate_time_comments, @populate_ap_comments, @populate_io_comments",
                                                                                 SqlParameterEmployeeDateCutoff, SqlParameterIncomeOnlyDateCutoff, SqlParameterAccountsPayablePostingPeriodCutoff, SqlParameterJobType, SqlParameterJobOption,
                                                                                 SqlParameterIncludeNonBillableTimeDetail, SqlParameterIncludeNonBillableAPIODetail, SqlParameterPrintItemDetail, SqlParameterIncludeContingency, SqlParameterUserCode,
                                                                                 SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList,
                                                                                 SqlParameterBillingCommandCenterID, SqlParameterSelectedJobList, SqlParameterNonbillableTimeFromDate, SqlParameterNonbillableTimeToDate,
                                                                                 SqlParameterPopulateTimeComments, SqlParameterPopulateAPComments, SqlParameterPopulateIOComments).ToList

            Catch ex As Exception
                BillingWorksheetProductionReportV2s = Nothing
            Finally
                LoadBillingWorksheetProductionDetailV2 = BillingWorksheetProductionReportV2s
            End Try

        End Function

        Public Function LoadCashManagementProductionData(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal Criteria As Integer, ByVal From As Date, ByVal [To] As Date, ByVal ShowJobsWithNoDetails As Boolean,
                                               ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CashManagementProduction)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.CashManagementProduction) = Nothing
            Dim SQLString As String = String.Empty
            Dim ReportColumnString As String = String.Empty
            'Dim ObjectQuery As IQueryable = Nothing
            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PriorPostPeriodCode As String = String.Empty
            Dim JobDateCriteria As Integer = 0
            Dim StartDate As Date = Date.MinValue
            Dim EndDate As Date = Date.MinValue
            Dim IncludeClosedJobs As Boolean = False
            Dim ClientCodes As String = String.Empty
            Dim ClientDivisionCodes As String = String.Empty
            Dim ClientDivisionProductCodes As String = String.Empty
            Dim AccountExecutiveCodes As String = String.Empty
            Dim CampaignIDs As String = String.Empty
            Dim JobTypeCodes As String = String.Empty
            Dim EmployeeTimeCutoffDate As Date = Date.MinValue
            Dim IncomeOnlyCutoffDate As Date = Date.MinValue
            Dim APCutoffDate As Date = Date.MinValue
            Dim APPostPeriodCode As String = String.Empty
            Dim IncludeBilledRange As Boolean = False
            Dim BilledStartPostPeriodCode As String = String.Empty
            Dim BilledEndPostPeriodCode As String = String.Empty
            Dim CurrentStartDate As Date = Date.MinValue
            Dim CurrentEndDate As Date = Date.MinValue
            Dim CurrentPostPeriodCode As String = String.Empty
            Dim PriorEndDate As Date = Date.MinValue
            Dim SqlParameterEmployeeDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncomeOnlyDateCutoff As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAccountsPayablePostingPeriodCutoff As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCriteria As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterFromDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterToDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterShowJobsWithNoDetails As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeClosedJobs As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterIncludeBilledRange As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStartPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriodBilled As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterAECodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCampaignIDList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterJobTypeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeList As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterCurrentStartDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentEndDate As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterCurrentPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterDateOption As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeNonbillable As System.Data.SqlClient.SqlParameter = Nothing


            Try

                'SqlParameterEmployeeDateCutoff = New System.Data.SqlClient.SqlParameter("@et_date_cutoff", SqlDbType.SmallDateTime)
                'SqlParameterIncomeOnlyDateCutoff = New System.Data.SqlClient.SqlParameter("@io_date_cutoff", SqlDbType.SmallDateTime)
                'SqlParameterAccountsPayablePostingPeriodCutoff = New System.Data.SqlClient.SqlParameter("@ap_pp_cutoff", SqlDbType.VarChar)

                SqlParameterCriteria = New System.Data.SqlClient.SqlParameter("@DATE_TYPE", SqlDbType.Int)
                SqlParameterFromDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterToDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterShowJobsWithNoDetails = New System.Data.SqlClient.SqlParameter("@SHOW_JOBS_WO_DETAILS", SqlDbType.Bit)
                SqlParameterIncludeClosedJobs = New System.Data.SqlClient.SqlParameter("@OPEN_JOB_ONLY", SqlDbType.Bit)
                SqlParameterIncludeNonbillable = New System.Data.SqlClient.SqlParameter("@INCLUDE_NONBILLABLE", SqlDbType.Bit)

                'SqlParameterIncludeBilledRange = New System.Data.SqlClient.SqlParameter("@IncludeBilledRange", SqlDbType.Bit)
                'SqlParameterStartPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_START_PERIOD", SqlDbType.VarChar)
                'SqlParameterEndPeriodBilled = New System.Data.SqlClient.SqlParameter("@BILLED_END_PERIOD", SqlDbType.VarChar)

                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
                SqlParameterAECodeList = New System.Data.SqlClient.SqlParameter("@ACCT_EXEC_LIST", SqlDbType.VarChar)
                'SqlParameterCampaignIDList = New System.Data.SqlClient.SqlParameter("@CampaignIDList", SqlDbType.VarChar)
                'SqlParameterJobTypeList = New System.Data.SqlClient.SqlParameter("@JobTypeList", SqlDbType.VarChar)
                SqlParameterOfficeList = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@USER_CODE", SqlDbType.VarChar)

                'SqlParameterCurrentStartDate = New System.Data.SqlClient.SqlParameter("@Current_StartDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentEndDate = New System.Data.SqlClient.SqlParameter("@Current_EndDate", SqlDbType.SmallDateTime)
                'SqlParameterCurrentPeriod = New System.Data.SqlClient.SqlParameter("@CURRENT_PERIOD", SqlDbType.VarChar)

                'SqlParameterDateOption = New System.Data.SqlClient.SqlParameter("@DateOption", SqlDbType.VarChar)

                'SqlParameterEmployeeDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EmployeeDateCutoff.ToString)
                'SqlParameterIncomeOnlyDateCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncomeOnlyDateCutoff.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString) IsNot Nothing Then
                '    SqlParameterAccountsPayablePostingPeriodCutoff.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.AccountsPayablePostingPeriodCutoff.ToString)
                'Else
                '    SqlParameterAccountsPayablePostingPeriodCutoff.Value = System.DBNull.Value
                'End If

                'SqlParameterCurrentStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentStartDate.ToString)
                'SqlParameterCurrentEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentEndDate.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString) IsNot Nothing Then
                '    SqlParameterCurrentPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.CurrentPeriod.ToString)
                'Else
                '    SqlParameterCurrentPeriod.Value = System.DBNull.Value
                'End If

                SqlParameterCriteria.Value = DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.JobDateCriteria.ToString)
                SqlParameterFromDate.Value = DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.JobStartDate.ToString)
                SqlParameterToDate.Value = DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.JobEndDate.ToString)
                SqlParameterShowJobsWithNoDetails.Value = DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.ShowJobsWithNoDetails.ToString)
                SqlParameterIncludeClosedJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.IncludeClosed.ToString)
                SqlParameterIncludeNonbillable.Value = ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.IncludeNonBillable.ToString)

                'SqlParameterIncludeBilledRange.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.IncludeBilledRange.ToString)
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterStartPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.StartingPostPeriodCode.ToString)
                'Else
                '    SqlParameterStartPeriodBilled.Value = System.DBNull.Value
                'End If
                'If ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString) IsNot Nothing Then
                '    SqlParameterEndPeriodBilled.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.EndingPostPeriodCode.ToString)
                'Else
                '    SqlParameterEndPeriodBilled.Value = System.DBNull.Value
                'End If
                'SqlParameterCampaignIDList.Value = ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAECodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAECodeList.Value = System.DBNull.Value

                End If

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString) IsNot Nothing Then

                '    SqlParameterCampaignIDList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedCampaigns.ToString), IEnumerable(Of Integer)).ToArray)

                'Else

                '    SqlParameterCampaignIDList.Value = System.DBNull.Value

                'End If

                'If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString) IsNot Nothing Then

                '    SqlParameterJobTypeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.SelectedJobTypes.ToString), IEnumerable(Of String)).ToArray)

                'Else

                '    SqlParameterJobTypeList.Value = System.DBNull.Value

                'End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedOffices.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedOffices.ToString) IsNot Nothing Then

                    SqlParameterOfficeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.CashManagementProductionInitialParameters.SelectedOffices.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOfficeList.Value = System.DBNull.Value

                End If

                'SqlParameterDateOption.Value = System.DBNull.Value 'ParameterDictionary(AdvantageFramework.Reporting.JobDetailInitialParameters.DateOption.ToString)
                SqlParameterUserCode.Value = DbContext.UserCode

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.CashManagementProduction) _
                                                                                    ("EXEC [dbo].[advsp_cash_management_production] @DATE_TYPE, @START_DATE, @END_DATE, @OPEN_JOB_ONLY, @OFFICE_LIST, " &
                                                                                     "@CLIENT_LIST, @DIVISION_LIST, @PRODUCT_LIST, @ACCT_EXEC_LIST, @USER_CODE, @INCLUDE_NONBILLABLE",
                                                                                     SqlParameterCriteria, SqlParameterFromDate, SqlParameterToDate, SqlParameterIncludeClosedJobs, SqlParameterOfficeList,
                                                                                     SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterAECodeList, SqlParameterUserCode, SqlParameterIncludeNonbillable).ToList





            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadCashManagementProductionData = DynamicReportObjects
            End Try

        End Function
        Private Function GetNielsenRadioRatingAndShareData(Session As AdvantageFramework.Security.Session, NielsenRadioMarketNumber As Integer, NielsenRadioPeriodIDs() As String, GeoIndicator As Short,
                                                           StationComboIDs() As String, SelectedMediaDemographicIDs() As String,
                                                           MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType),
                                                           MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType),
                                                           MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)) As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData)

            'objects
            Dim RadioWorksheetRatingDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim SqlParameterNielsenRadioMarketNumber As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterRadioPeriodIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterGeoIndicator As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterStationComboIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterSelectedMediaDemographicIDs As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoDetailType As System.Data.SqlClient.SqlParameter = Nothing

            Dim SqlParameterMediaSpotTVResearchDaytimeType As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterHostedClientCode As System.Data.SqlClient.SqlParameter = Nothing

            SqlParameterNielsenRadioMarketNumber = New System.Data.SqlClient.SqlParameter("@NIELSEN_RADIO_MARKET_NUMBER", SqlDbType.Int)
            SqlParameterNielsenRadioMarketNumber.Value = NielsenRadioMarketNumber

            SqlParameterRadioPeriodIDs = New System.Data.SqlClient.SqlParameter("@NIELSEN_RADIO_PERIOD_IDs", SqlDbType.VarChar)
            SqlParameterRadioPeriodIDs.Value = Join(NielsenRadioPeriodIDs, ",")

            SqlParameterGeoIndicator = New System.Data.SqlClient.SqlParameter("@GEO_INDICATOR", SqlDbType.SmallInt)
            SqlParameterGeoIndicator.Value = GeoIndicator

            SqlParameterStationComboIDs = New System.Data.SqlClient.SqlParameter("@STATION_COMBO_IDs", SqlDbType.VarChar)
            SqlParameterStationComboIDs.Value = Join(StationComboIDs, ",")

            SqlParameterSelectedMediaDemographicIDs = New System.Data.SqlClient.SqlParameter("@SelectedMediaDemographicIDs", SqlDbType.VarChar)
            SqlParameterSelectedMediaDemographicIDs.Value = Join(SelectedMediaDemographicIDs, ",")

            SqlParameterMediaSpotTVResearchDaytimeType = New System.Data.SqlClient.SqlParameter("@MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE", SqlDbType.Structured)
            SqlParameterMediaSpotTVResearchDaytimeType.TypeName = "MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE"
            SqlParameterMediaSpotTVResearchDaytimeType.Value = AdvantageFramework.Database.ToDataTable(MediaSpotTVResearchDaytimeTypes)

            SqlParameterMediaDemoType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoType.TypeName = "MEDIA_DEMO_TYPE"
            SqlParameterMediaDemoType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoTypes)

            SqlParameterMediaDemoDetailType = New System.Data.SqlClient.SqlParameter("@MEDIA_DEMO_DETAIL_TYPE", SqlDbType.Structured)
            SqlParameterMediaDemoDetailType.TypeName = "MEDIA_DEMO_DETAIL_TYPE"
            SqlParameterMediaDemoDetailType.Value = AdvantageFramework.Database.ToDataTable(MediaDemoDetailTypes)

            SqlParameterHostedClientCode = New System.Data.SqlClient.SqlParameter("@HOSTED_CLIENT_CODE", SqlDbType.VarChar)

            Using DbContext = New AdvantageFramework.Database.DbContext(Session.ConnectionString, Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext) Then

                    SqlParameterHostedClientCode.Value = Session.NielsenClientCodeForHosted

                Else

                    SqlParameterHostedClientCode.Value = System.DBNull.Value

                End If

            End Using

            Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                NielsenDbContext.Database.Connection.Open()

                RadioWorksheetRatingDataList = NielsenDbContext.Database.SqlQuery(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData)("EXEC advsp_radio_worksheet_postbuy_rating @NIELSEN_RADIO_MARKET_NUMBER, @NIELSEN_RADIO_PERIOD_IDs, @GEO_INDICATOR, @STATION_COMBO_IDs, @SelectedMediaDemographicIDs, @MEDIA_SPOT_TV_RESEARCH_DAYTIME_TYPE, @MEDIA_DEMO_TYPE, @MEDIA_DEMO_DETAIL_TYPE, @HOSTED_CLIENT_CODE",
                    SqlParameterNielsenRadioMarketNumber, SqlParameterRadioPeriodIDs, SqlParameterGeoIndicator, SqlParameterStationComboIDs, SqlParameterSelectedMediaDemographicIDs,
                    SqlParameterMediaSpotTVResearchDaytimeType, SqlParameterMediaDemoType, SqlParameterMediaDemoDetailType, SqlParameterHostedClientCode).ToList()

            End Using

            GetNielsenRadioRatingAndShareData = RadioWorksheetRatingDataList

        End Function
        Public Function LoadMediaBroadcastWorksheetRadioPreBuyData(DbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport)

            'objects
            Dim Session As AdvantageFramework.Security.Session = Nothing
            Dim MediaBroadcastWorksheetMarketBookList As Generic.List(Of DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook) = Nothing
            Dim MediaBroadcastWorksheetIDs As IEnumerable(Of Integer) = Nothing
            Dim DemographicID As Nullable(Of Integer) = Nothing
            Dim SqlParameterMediaBroadcastWorksheetID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaBroadcastWorksheetMarkets As SqlClient.SqlParameter = Nothing
            Dim SqlParameterMediaDemoID As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUsePrimaryRating As SqlClient.SqlParameter = Nothing
            Dim SqlParameterUseImpressions As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastStartYearMonth As SqlClient.SqlParameter = Nothing
            Dim SqlParameterBroadcastEndYearMonth As SqlClient.SqlParameter = Nothing
            Dim AllMediaBroadcastWorksheetRadioPreBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport) = Nothing
            Dim MediaBroadcastWorksheetRadioPreBuyReports As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport) = Nothing
            Dim MediaBroadcastWorksheetController As AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController = Nothing
            Dim MediaBroadcastWorksheetRadioPreBuyReport As AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport = Nothing
            Dim MediaBroadcastWorksheetMarketBook As DTO.Reporting.MediaBroadcastWorksheetPreBuy.MediaBroadcastWorksheetMarketBook = Nothing
            Dim BookIDs As Generic.List(Of String) = Nothing
            Dim MediaDemographic As AdvantageFramework.Database.Entities.MediaDemographic = Nothing
            Dim MediaDemoTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) = Nothing
            Dim MediaDemoDetailTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType) = Nothing
            Dim StationCodes() As String = Nothing
            Dim MediaSpotTVResearchDaytimeTypes As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType) = Nothing
            Dim MediaBroadcastWorksheetMarketDetailIDs As IEnumerable(Of Integer) = Nothing
            Dim RadioWorksheetRatingDataList As Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.RadioWorksheetRatingData) = Nothing
            Dim NielsenMarketNumber As Integer = Nothing
            Dim UsePrimary As Boolean = True
            Dim WorksheetMarketVendors As Generic.List(Of AdvantageFramework.DTO.Reporting.WorksheetMarketVendor) = Nothing
            Dim MediaBroadcastWorksheetMarketIDs As Generic.List(Of Integer) = Nothing
            Dim MediaBroadcastWorksheetMarket As AdvantageFramework.Database.Entities.MediaBroadcastWorksheetMarket = Nothing
            Dim UpdatedBooks As String = Nothing
            Dim WorksheetBooks As String = Nothing
            Dim NielsenRadioPeriod As AdvantageFramework.DTO.Media.NielsenRadioPeriod = Nothing
            Dim IsAgencyASP As Boolean = False

            Try

                Session = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.Session.ToString)

                MediaBroadcastWorksheetMarketBookList = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.MediaBroadcastWorksheetMarketBooks.ToString)
                WorksheetMarketVendors = ParameterDictionary(AdvantageFramework.Reporting.MediaBroadcastWorksheetInitialCriteria.WorksheetMarketVendors.ToString)

                MediaBroadcastWorksheetIDs = (From Entity In MediaBroadcastWorksheetMarketBookList
                                              Select Entity.MediaBroadcastWorksheetID).Distinct.ToArray

                AllMediaBroadcastWorksheetRadioPreBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport)

                IsAgencyASP = AdvantageFramework.Database.Procedures.Agency.IsAgencyASP(DbContext)

                For Each MediaBroadcastWorksheetID In MediaBroadcastWorksheetIDs

                    MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).First

                    If MediaBroadcastWorksheetMarketBook.UsePrimaryDemo = True Then

                        If MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.PrimaryMediaDemographicID.Value

                        End If

                    Else

                        If MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.HasValue Then

                            DemographicID = MediaBroadcastWorksheetMarketBook.SecondaryMediaDemographicID.Value

                        End If

                        UsePrimary = False

                    End If

                    SqlParameterMediaBroadcastWorksheetID = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_ID", SqlDbType.Int)
                    SqlParameterMediaBroadcastWorksheetMarkets = New SqlClient.SqlParameter("@MEDIA_BROADCAST_WORKSHEET_MARKETS", SqlDbType.VarChar)
                    SqlParameterMediaDemoID = New SqlClient.SqlParameter("@MEDIA_DEMO_ID", SqlDbType.Int)
                    SqlParameterUsePrimaryRating = New SqlClient.SqlParameter("@USE_PRIMARY_RATING", SqlDbType.Bit)
                    SqlParameterUseImpressions = New SqlClient.SqlParameter("@USE_IMPRESSIONS", SqlDbType.Bit)
                    SqlParameterBroadcastStartYearMonth = New SqlClient.SqlParameter("@BROADCAST_START_DATE", SqlDbType.Date)
                    SqlParameterBroadcastEndYearMonth = New SqlClient.SqlParameter("@BROADCAST_END_DATE", SqlDbType.Date)

                    SqlParameterMediaBroadcastWorksheetID.Value = MediaBroadcastWorksheetID
                    SqlParameterMediaBroadcastWorksheetMarkets.Value = String.Join(",", MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetID = MediaBroadcastWorksheetID).Select(Function(MB) MB.MediaBroadcastWorksheetMarketID).ToArray)
                    SqlParameterMediaDemoID.Value = If(DemographicID.HasValue, DemographicID.Value, System.DBNull.Value)
                    SqlParameterUsePrimaryRating.Value = UsePrimary
                    SqlParameterUseImpressions.Value = MediaBroadcastWorksheetMarketBook.UseImpressions
                    SqlParameterBroadcastStartYearMonth.Value = MediaBroadcastWorksheetMarketBook.StartDate
                    SqlParameterBroadcastEndYearMonth.Value = MediaBroadcastWorksheetMarketBook.EndDate

                    AllMediaBroadcastWorksheetRadioPreBuyReports.AddRange(DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport)("exec advsp_media_broadcast_worksheet_radio_prebuy_report @MEDIA_BROADCAST_WORKSHEET_ID, @MEDIA_BROADCAST_WORKSHEET_MARKETS, @MEDIA_DEMO_ID, @USE_PRIMARY_RATING, @USE_IMPRESSIONS, @BROADCAST_START_DATE, @BROADCAST_END_DATE",
                        SqlParameterMediaBroadcastWorksheetID, SqlParameterMediaBroadcastWorksheetMarkets, SqlParameterMediaDemoID, SqlParameterUsePrimaryRating, SqlParameterUseImpressions, SqlParameterBroadcastStartYearMonth, SqlParameterBroadcastEndYearMonth).ToList)

                Next

                MediaBroadcastWorksheetRadioPreBuyReports = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaBroadcastWorksheetRadioPreBuyReport)

                If AllMediaBroadcastWorksheetRadioPreBuyReports IsNot Nothing AndAlso AllMediaBroadcastWorksheetRadioPreBuyReports.Count > 0 Then

                    If WorksheetMarketVendors IsNot Nothing AndAlso WorksheetMarketVendors.Count > 0 Then

                        For Each WorksheetMarketVendor In WorksheetMarketVendors

                            For Each MediaBroadcastWorksheetRadioPreBuyReport In AllMediaBroadcastWorksheetRadioPreBuyReports.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = WorksheetMarketVendor.MediaBroadcastWorksheetMarketID AndAlso
                                                                                                                                                     Entity.VendorCode = WorksheetMarketVendor.VendorCode).ToList

                                MediaBroadcastWorksheetRadioPreBuyReports.Add(MediaBroadcastWorksheetRadioPreBuyReport)

                            Next

                        Next

                    End If

                End If

                If MediaBroadcastWorksheetRadioPreBuyReports IsNot Nothing AndAlso MediaBroadcastWorksheetRadioPreBuyReports.Count > 0 Then

                    MediaBroadcastWorksheetController = New AdvantageFramework.Controller.Media.MediaBroadcastWorksheetController(Session)

                    Using NielsenDbContext = New AdvantageFramework.Nielsen.Database.DbContext(Session.NielsenConnectionString, Nothing)

                        NielsenDbContext.Database.Connection.Open()

                        MediaBroadcastWorksheetMarketIDs = MediaBroadcastWorksheetRadioPreBuyReports.Select(Function(Book) Book.MediaBroadcastWorksheetMarketID).Distinct.ToList

                        For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetMarketIDs

                            MediaBroadcastWorksheetMarket = AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarket.LoadByMediaBroadcastWorksheetMarketID(DbContext, MediaBroadcastWorksheetMarketID)

                            MediaBroadcastWorksheetMarketBook = (From Entity In MediaBroadcastWorksheetMarketBookList
                                                                 Where Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID
                                                                 Select Entity).FirstOrDefault

                            If MediaBroadcastWorksheetMarketBook IsNot Nothing Then

                                BookIDs = MediaBroadcastWorksheetMarketBook.GetRadioBookIDs()
                                UpdatedBooks = String.Empty
                                WorksheetBooks = String.Empty

                                If (MediaBroadcastWorksheetMarketBook.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen AndAlso Session.IsNielsenSetup) OrElse
                                        (MediaBroadcastWorksheetMarketBook.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan AndAlso Session.IsEastlanSetup) Then

                                    For Each RadioBook In (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.Load(NielsenDbContext)
                                                           Where BookIDs.Contains(Entity.ID)
                                                           Select Entity).OrderByDescending(Function(Entity) Entity.EndDate).ToList

                                        NielsenRadioPeriod = New AdvantageFramework.DTO.Media.NielsenRadioPeriod(RadioBook)

                                        UpdatedBooks += NielsenRadioPeriod.Description & ", "

                                    Next

                                    If UpdatedBooks.Length > 2 Then

                                        UpdatedBooks = Mid(UpdatedBooks, 1, UpdatedBooks.Length - 2)

                                    End If

                                    If MediaBroadcastWorksheetMarket IsNot Nothing Then

                                        BookIDs = MediaBroadcastWorksheetMarket.GetNeilsenRadioPeriodIDs()

                                        For Each RadioBook In (From Entity In AdvantageFramework.Nielsen.Database.Procedures.NielsenRadioPeriod.Load(NielsenDbContext)
                                                               Where BookIDs.Contains(Entity.ID)
                                                               Select Entity).OrderByDescending(Function(Entity) Entity.EndDate).ToList

                                            NielsenRadioPeriod = New AdvantageFramework.DTO.Media.NielsenRadioPeriod(RadioBook)

                                            WorksheetBooks += NielsenRadioPeriod.Description & ", "

                                        Next

                                        If String.IsNullOrWhiteSpace(WorksheetBooks) = False Then

                                            WorksheetBooks = Mid(WorksheetBooks, 1, WorksheetBooks.Length - 2)

                                        End If

                                    End If

                                    For Each PreBuyReport In MediaBroadcastWorksheetRadioPreBuyReports.Where(Function(R) R.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).ToList

                                        PreBuyReport.UpdatedBooks = UpdatedBooks
                                        PreBuyReport.WorksheetBooks = WorksheetBooks

                                    Next

                                    'ElseIf MediaBroadcastWorksheetRadioPostBuyReport.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.NielsenCounty AndAlso Session.IsNielsenCountySetup  Then

                                End If

                            End If

                        Next

                        MediaDemographic = AdvantageFramework.Database.Procedures.MediaDemographic.Load(DbContext).SingleOrDefault(Function(Entity) Entity.ID = DemographicID)

                        If (MediaBroadcastWorksheetMarketBook.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Nielsen AndAlso Session.IsNielsenSetup) OrElse
                                (MediaBroadcastWorksheetMarketBook.ExternalRadioSource = AdvantageFramework.Nielsen.Database.Entities.RadioSource.Eastlan AndAlso Session.IsEastlanSetup) Then

                            For Each MediaBroadcastWorksheetMarketID In MediaBroadcastWorksheetRadioPreBuyReports.Select(Function(Entity) Entity.MediaBroadcastWorksheetMarketID).Distinct.ToList

                                MediaBroadcastWorksheetMarketBook = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First

                                BookIDs = MediaBroadcastWorksheetMarketBook.GetRadioBookIDs()

                                If MediaDemographic IsNot Nothing Then

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType) From {New AdvantageFramework.Classes.Media.Nielsen.MediaDemoType With {.ID = MediaDemographic.ID,
                                                                                                                                                                                                        .Description = MediaDemographic.Description}}

                                Else

                                    MediaDemoTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaDemoType)

                                End If

                                MediaDemoDetailTypes = (From MediaDemographicDetail In AdvantageFramework.Database.Procedures.MediaDemographicDetail.Load(DbContext).Where(Function(Entity) Entity.MediaDemographicID = DemographicID).ToList
                                                        Select New AdvantageFramework.Classes.Media.Nielsen.MediaDemoDetailType With {.MediaDemographicID = MediaDemographicDetail.MediaDemographicID,
                                                                                                                                      .NielsenDemographicID = MediaDemographicDetail.NielsenDemographicID}).ToList

                                NielsenMarketNumber = MediaBroadcastWorksheetMarketBookList.Where(Function(Entity) Entity.MediaBroadcastWorksheetMarketID = MediaBroadcastWorksheetMarketID).First.NielsenMarketNumber

                                StationCodes = (From Entity In MediaBroadcastWorksheetRadioPreBuyReports
                                                Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                      Entity.NielsenRadioStationComboID.HasValue
                                                Select CStr(Entity.NielsenRadioStationComboID.Value)).Distinct.ToArray

                                For Each StationCode In StationCodes

                                    MediaBroadcastWorksheetRadioPreBuyReport = (From Entity In MediaBroadcastWorksheetRadioPreBuyReports
                                                                                Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                      Entity.NielsenRadioStationComboID = StationCode
                                                                                Select Entity).FirstOrDefault

                                    If MediaBroadcastWorksheetRadioPreBuyReport IsNot Nothing Then

                                        MediaBroadcastWorksheetMarketDetailIDs = (From Entity In MediaBroadcastWorksheetRadioPreBuyReports
                                                                                  Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                        Entity.NielsenRadioStationComboID = StationCode
                                                                                  Select Entity.MediaBroadcastWorksheetMarketDetailID).Distinct.ToArray

                                        MediaSpotTVResearchDaytimeTypes = New Generic.List(Of AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType)

                                        MediaSpotTVResearchDaytimeTypes.AddRange(From Entity In AdvantageFramework.Database.Procedures.MediaBroadcastWorksheetMarketDetail.LoadByMediaBroadcastWorksheetMarketDetailIDs(DbContext, MediaBroadcastWorksheetMarketDetailIDs).ToList
                                                                                 Select New AdvantageFramework.Classes.Media.Nielsen.MediaSpotTVResearchDaytimeType(Entity))

                                        If BookIDs.Count > 0 Then

                                            RadioWorksheetRatingDataList = MediaBroadcastWorksheetController.GetNielsenRadioRatingData(DbContext, NielsenDbContext, NielsenMarketNumber, BookIDs.ToArray, MediaBroadcastWorksheetMarketBook.MediaBroadcastWorksheetMarketRadioGeographyID,
                                                                                                                                       New String() {StationCode}, {DemographicID}, MediaSpotTVResearchDaytimeTypes, MediaDemoTypes, MediaDemoDetailTypes, IsAgencyASP)

                                            For Each MediaBroadcastWorksheetMarketDetailID In MediaBroadcastWorksheetMarketDetailIDs

                                                MediaBroadcastWorksheetRadioPreBuyReport = (From Entity In MediaBroadcastWorksheetRadioPreBuyReports
                                                                                            Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                                                                                  Entity.NielsenRadioStationComboID = StationCode AndAlso
                                                                                                  Entity.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).SingleOrDefault

                                                If MediaBroadcastWorksheetRadioPreBuyReport IsNot Nothing Then

                                                    If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                                        MediaBroadcastWorksheetRadioPreBuyReport.SpotUpdatedEstimate = Math.Round(RadioWorksheetRatingDataList.Where(Function(DL) DL.NielsenRadioStationComboID = StationCode AndAlso
                                                                                                                             DL.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(DL) DL.AQH) / 100, 2, MidpointRounding.AwayFromZero)

                                                    Else

                                                        MediaBroadcastWorksheetRadioPreBuyReport.SpotUpdatedEstimate = Math.Round(RadioWorksheetRatingDataList.Where(Function(DL) DL.NielsenRadioStationComboID = StationCode AndAlso
                                                                                                                             DL.MediaBroadcastWorksheetMarketDetailID = MediaBroadcastWorksheetMarketDetailID).Average(Function(DL) DL.AQHRating), 2, MidpointRounding.AwayFromZero)

                                                    End If

                                                End If

                                            Next

                                            'For Each RadioWorksheetRatingData In RadioWorksheetRatingDataList

                                            '    MediaBroadcastWorksheetRadioPreBuyReport = (From Entity In MediaBroadcastWorksheetRadioPreBuyReports
                                            '                                                Where Entity.NielsenMarketNumber = NielsenMarketNumber AndAlso
                                            '                                                      Entity.NielsenRadioStationComboID = RadioWorksheetRatingData.NielsenRadioStationComboID AndAlso
                                            '                                                      Entity.MediaBroadcastWorksheetMarketDetailID = RadioWorksheetRatingData.MediaBroadcastWorksheetMarketDetailID).SingleOrDefault

                                            '    If MediaBroadcastWorksheetRadioPreBuyReport IsNot Nothing Then

                                            '        If MediaBroadcastWorksheetMarketBook.UseImpressions Then

                                            '            MediaBroadcastWorksheetRadioPreBuyReport.SpotUpdatedEstimate = FormatNumber(RadioWorksheetRatingData.AQH / 100, 2)

                                            '        Else

                                            '            MediaBroadcastWorksheetRadioPreBuyReport.SpotUpdatedEstimate = FormatNumber(RadioWorksheetRatingData.AQHRating, 2)

                                            '        End If

                                            '    End If

                                            'Next

                                        End If

                                    End If

                                Next

                            Next

                        End If

                    End Using

                End If

            Catch ex As Exception
                MediaBroadcastWorksheetRadioPreBuyReports = Nothing
            Finally
                LoadMediaBroadcastWorksheetRadioPreBuyData = MediaBroadcastWorksheetRadioPreBuyReports
            End Try

        End Function
        Public Function LoadMediaTrafficMissingInstructions(ReportingDbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaTrafficMissingInstructionDataset)

            'objects
            Dim MediaBroadcastWorksheetMarketIDs As IEnumerable(Of Integer) = Nothing

            If ParameterDictionary IsNot Nothing AndAlso ParameterDictionary.ContainsKey(AdvantageFramework.Reporting.MediaTrafficMissingInstructionsInitialCriteria.MediaBroadcastWorksheetMarketIDs.ToString) Then

                MediaBroadcastWorksheetMarketIDs = ParameterDictionary(AdvantageFramework.Reporting.MediaTrafficMissingInstructionsInitialCriteria.MediaBroadcastWorksheetMarketIDs.ToString)

                LoadMediaTrafficMissingInstructions = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaTrafficMissingInstructionDataset)(String.Format("exec dbo.advsp_media_traffic_missing_instructions NULL, NULL, '{0}'", String.Join(",", MediaBroadcastWorksheetMarketIDs.ToArray))).ToList

            Else

                LoadMediaTrafficMissingInstructions = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaTrafficMissingInstructionDataset)

            End If

        End Function
        Public Function LoadMediaTrafficInstructions(ReportingDbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaTrafficInstructionDataset)

            'objects
            Dim MediaBroadcastWorksheetMarketIDs As IEnumerable(Of Integer) = Nothing
            Dim IncludeAllMediaTrafficRevisions As Short = 0

            If ParameterDictionary IsNot Nothing AndAlso ParameterDictionary.ContainsKey(AdvantageFramework.Reporting.MediaTrafficInstructionsInitialCriteria.MediaBroadcastWorksheetMarketIDs.ToString) Then

                MediaBroadcastWorksheetMarketIDs = ParameterDictionary(AdvantageFramework.Reporting.MediaTrafficInstructionsInitialCriteria.MediaBroadcastWorksheetMarketIDs.ToString)

                If ParameterDictionary.ContainsKey(AdvantageFramework.Reporting.MediaTrafficInstructionsInitialCriteria.MediaBroadcastWorksheetMarketIDs.ToString) Then

                    IncludeAllMediaTrafficRevisions = If(ParameterDictionary(AdvantageFramework.Reporting.MediaTrafficInstructionsInitialCriteria.IncludeAllMediaTrafficRevisions.ToString), 1, 0)

                End If

                LoadMediaTrafficInstructions = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.MediaTrafficInstructionDataset)(String.Format("exec dbo.advsp_media_traffic_instructions_dataset '{0}', {1}", String.Join(",", MediaBroadcastWorksheetMarketIDs.ToArray), IncludeAllMediaTrafficRevisions)).ToList

            Else

                LoadMediaTrafficInstructions = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.MediaTrafficInstructionDataset)

            End If

        End Function
        Public Function LoadVendorSpendWithEEOCAndMinorityStatusSummary(ReportingDbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusSummary)

            If ParameterDictionary IsNot Nothing AndAlso ParameterDictionary.ContainsKey(AdvantageFramework.Reporting.VendorSpendWithEEOCAndMinorityStatusSummaryParameters.StartingPostPeriodCode.ToString) AndAlso
                    ParameterDictionary.ContainsKey(AdvantageFramework.Reporting.VendorSpendWithEEOCAndMinorityStatusSummaryParameters.EndingPostPeriodCode.ToString) Then

                LoadVendorSpendWithEEOCAndMinorityStatusSummary = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusSummary)(String.Format("exec dbo.advsp_vendor_spend_with_eeoc_minority_status_summary_dataset '{0}', '{1}'", ParameterDictionary(AdvantageFramework.Reporting.VendorSpendWithEEOCAndMinorityStatusSummaryParameters.StartingPostPeriodCode.ToString), ParameterDictionary(AdvantageFramework.Reporting.VendorSpendWithEEOCAndMinorityStatusSummaryParameters.EndingPostPeriodCode.ToString))).ToList

            Else

                LoadVendorSpendWithEEOCAndMinorityStatusSummary = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusSummary)

            End If

        End Function
        Public Function LoadVendorSpendWithEEOCAndMinorityStatusDetail(ReportingDbContext As AdvantageFramework.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusDetail)

            If ParameterDictionary IsNot Nothing AndAlso ParameterDictionary.ContainsKey(AdvantageFramework.Reporting.VendorSpendWithEEOCAndMinorityStatusSummaryParameters.StartingPostPeriodCode.ToString) AndAlso
                    ParameterDictionary.ContainsKey(AdvantageFramework.Reporting.VendorSpendWithEEOCAndMinorityStatusSummaryParameters.EndingPostPeriodCode.ToString) Then

                LoadVendorSpendWithEEOCAndMinorityStatusDetail = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusDetail)(String.Format("exec dbo.advsp_vendor_spend_with_eeoc_minority_status_detail_dataset '{0}', '{1}'", ParameterDictionary(AdvantageFramework.Reporting.VendorSpendWithEEOCAndMinorityStatusSummaryParameters.StartingPostPeriodCode.ToString), ParameterDictionary(AdvantageFramework.Reporting.VendorSpendWithEEOCAndMinorityStatusSummaryParameters.EndingPostPeriodCode.ToString))).ToList

            Else

                LoadVendorSpendWithEEOCAndMinorityStatusDetail = New Generic.List(Of AdvantageFramework.Reporting.Database.Classes.VendorSpendWithEEOCAndMinorityStatusDetail)

            End If

        End Function
        Public Function LoadBillingApproval(ReportingDbContext As AdvantageFramework.Reporting.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BillingApprovalReport)

            'objects
            Try
                Dim SqlParameterIncludeOption As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterFromInvDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterToInvDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeJobs As System.Data.SqlClient.SqlParameter = Nothing

                Dim SqlParameterAEList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterJobList As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterUserCode As System.Data.SqlClient.SqlParameter = Nothing

                SqlParameterIncludeOption = New System.Data.SqlClient.SqlParameter("@include_option", SqlDbType.SmallInt)
                SqlParameterFromInvDate = New System.Data.SqlClient.SqlParameter("@from_inv_date", SqlDbType.DateTime)
                SqlParameterToInvDate = New System.Data.SqlClient.SqlParameter("@to_inv_date", SqlDbType.DateTime)
                SqlParameterIncludeJobs = New System.Data.SqlClient.SqlParameter("@include_jobs", SqlDbType.SmallInt)

                SqlParameterAEList = New System.Data.SqlClient.SqlParameter("@ACCT_EXEC_LIST", SqlDbType.VarChar)
                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@CLIENT_LIST", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@DIVISION_LIST", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@PRODUCT_LIST", SqlDbType.VarChar)
                SqlParameterJobList = New System.Data.SqlClient.SqlParameter("@JOB_LIST", SqlDbType.VarChar)
                SqlParameterUserCode = New System.Data.SqlClient.SqlParameter("@USER_CODE", SqlDbType.VarChar)

                SqlParameterIncludeOption.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.IncludeOptions.ToString)
                SqlParameterFromInvDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.FromInvDate.ToString)
                SqlParameterToInvDate.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.ToInvDate.ToString)
                SqlParameterIncludeJobs.Value = ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.IncludeJobs.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedAccountExecutives.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedAccountExecutives.ToString) IsNot Nothing Then

                    SqlParameterAEList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedAccountExecutives.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterAEList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedJobs.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedJobs.ToString) IsNot Nothing Then

                    SqlParameterJobList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BillingApprovalInitialParameters.SelectedJobs.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterJobList.Value = DBNull.Value

                End If
                SqlParameterUserCode.Value = ReportingDbContext.UserCode

                LoadBillingApproval = ReportingDbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.BillingApprovalReport)("exec dbo.advsp_billing_approval_report @include_option, @from_inv_date, @to_inv_date, @include_jobs, @ACCT_EXEC_LIST, @CLIENT_LIST, @DIVISION_LIST, @PRODUCT_LIST, @JOB_LIST, @USER_CODE",
                                                     SqlParameterIncludeOption, SqlParameterFromInvDate, SqlParameterToInvDate, SqlParameterIncludeJobs, SqlParameterAEList, SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList, SqlParameterJobList, SqlParameterUserCode).ToList
            Catch ex As Exception
                LoadBillingApproval = Nothing
            End Try


        End Function
        Private Function LoadBroadcastInvoiceSummary(DbContext As AdvantageFramework.Reporting.Database.DbContext, ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BroadcastInvoiceSummary)

            'objects
            Dim DynamicReportObjects As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.BroadcastInvoiceSummary) = Nothing
            Dim SqlParameterStartPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterEndPeriod As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeTV As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterIncludeRadio As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOrderStatus As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterOfficeCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionCodeList As System.Data.SqlClient.SqlParameter = Nothing
            Dim SqlParameterClientDivisionProductCodeList As System.Data.SqlClient.SqlParameter = Nothing

            Try

                SqlParameterStartPeriod = New System.Data.SqlClient.SqlParameter("@StartPeriod", SqlDbType.Int)
                SqlParameterEndPeriod = New System.Data.SqlClient.SqlParameter("@EndPeriod", SqlDbType.Int)
                SqlParameterIncludeTV = New System.Data.SqlClient.SqlParameter("@IncludeTV", SqlDbType.Bit)
                SqlParameterIncludeRadio = New System.Data.SqlClient.SqlParameter("@IncludeRadio", SqlDbType.Bit)
                SqlParameterOrderStatus = New System.Data.SqlClient.SqlParameter("@OrderStatus", SqlDbType.SmallInt)
                SqlParameterOfficeCodeList = New System.Data.SqlClient.SqlParameter("@OfficeCodeList", SqlDbType.VarChar)
                SqlParameterClientCodeList = New System.Data.SqlClient.SqlParameter("@ClientCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionCodeList", SqlDbType.VarChar)
                SqlParameterClientDivisionProductCodeList = New System.Data.SqlClient.SqlParameter("@ClientDivisionProductCodeList", SqlDbType.VarChar)

                SqlParameterStartPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.StartPeriod.ToString)
                SqlParameterEndPeriod.Value = ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.EndPeriod.ToString)
                SqlParameterIncludeTV.Value = ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.IncludeTV.ToString)
                SqlParameterIncludeRadio.Value = ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.IncludeRadio.ToString)
                SqlParameterOrderStatus.Value = ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.OrderStatus.ToString)

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedOffices.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedOffices.ToString) IsNot Nothing Then

                    SqlParameterOfficeCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedOffices.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOfficeCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedClients.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedClients.ToString) IsNot Nothing Then

                    SqlParameterClientCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedClients.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedDivisions.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedDivisions.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedDivisions.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionCodeList.Value = System.DBNull.Value

                End If

                If ParameterDictionary.Keys.Contains(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedProducts.ToString) AndAlso ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedProducts.ToString) IsNot Nothing Then

                    SqlParameterClientDivisionProductCodeList.Value = String.Join(",", DirectCast(ParameterDictionary(AdvantageFramework.Reporting.BroadcastInvoiceSummaryParameters.SelectedProducts.ToString), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterClientDivisionProductCodeList.Value = System.DBNull.Value

                End If

                DynamicReportObjects = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.BroadcastInvoiceSummary) _
                                                          ("EXEC [dbo].[advsp_broadcast_invoice_summary_report] @StartPeriod, @EndPeriod, @IncludeTV, @IncludeRadio, @OrderStatus, " &
                                                           "@OfficeCodeList, @ClientCodeList, @ClientDivisionCodeList, @ClientDivisionProductCodeList",
                                                           SqlParameterStartPeriod, SqlParameterEndPeriod, SqlParameterIncludeTV, SqlParameterIncludeRadio, SqlParameterOrderStatus,
                                                           SqlParameterOfficeCodeList, SqlParameterClientCodeList, SqlParameterClientDivisionCodeList, SqlParameterClientDivisionProductCodeList).ToList

            Catch ex As Exception
                DynamicReportObjects = Nothing
            Finally
                LoadBroadcastInvoiceSummary = DynamicReportObjects
            End Try

        End Function

        Public Function LoadEmployeeTimeAnaylsisData(ByVal DbContext As AdvantageFramework.Reporting.Database.DbContext, ByVal ParameterDictionary As Generic.Dictionary(Of String, Object)) As Generic.List(Of AdvantageFramework.Reporting.Database.Classes.EmployeeTimeAnalysisReport)
            Try
                'objects
                Dim SelectedOffices As Generic.List(Of String) = Nothing
                Dim SelectedDepartments As Generic.List(Of String) = Nothing
                Dim SelectedEmployees As Generic.List(Of String) = Nothing

                'Dim SqlParameterReportType As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterStartDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEndDate As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterDepartments As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterOffices As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterEmployees As System.Data.SqlClient.SqlParameter = Nothing
                'Dim SqlParameterUserID As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterIncludeInastiveEmployees As System.Data.SqlClient.SqlParameter = Nothing
                Dim SqlParameterFeeTimeOption As System.Data.SqlClient.SqlParameter = Nothing

                'SqlParameterReportType = New System.Data.SqlClient.SqlParameter("@ReportType", SqlDbType.SmallInt)
                SqlParameterStartDate = New System.Data.SqlClient.SqlParameter("@START_DATE", SqlDbType.SmallDateTime)
                SqlParameterEndDate = New System.Data.SqlClient.SqlParameter("@END_DATE", SqlDbType.SmallDateTime)
                SqlParameterDepartments = New System.Data.SqlClient.SqlParameter("@DepartmentsList", SqlDbType.VarChar)
                SqlParameterOffices = New System.Data.SqlClient.SqlParameter("@OFFICE_LIST", SqlDbType.VarChar)
                SqlParameterEmployees = New System.Data.SqlClient.SqlParameter("@EmployeesList", SqlDbType.VarChar)
                'SqlParameterUserID = New System.Data.SqlClient.SqlParameter("@UserID", SqlDbType.VarChar)
                SqlParameterIncludeInastiveEmployees = New System.Data.SqlClient.SqlParameter("@IncludeInactiveEmployees", SqlDbType.SmallInt)
                SqlParameterFeeTimeOption = New System.Data.SqlClient.SqlParameter("@FeeTimeOption", SqlDbType.SmallInt)


                'SqlParameterReportType.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeHoursAllocationParameters.ReportType.ToString)
                'SqlParameterEmpCode.Value = ""
                SqlParameterStartDate.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeTimeAnalysisInitialParameters.StartDate.ToString)
                SqlParameterEndDate.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeTimeAnalysisInitialParameters.EndDate.ToString)
                'SqlParameterSummaryLevel.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeHoursAllocationParameters.ReportBy.ToString)

                If ParameterDictionary.ContainsKey("SelectedDepartments") AndAlso ParameterDictionary("SelectedDepartments") IsNot Nothing Then

                    SqlParameterDepartments.Value = String.Join(",", DirectCast(ParameterDictionary("SelectedDepartments"), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterDepartments.Value = System.DBNull.Value

                End If

                If ParameterDictionary.ContainsKey("SelectedOffices") AndAlso ParameterDictionary("SelectedOffices") IsNot Nothing Then

                    SqlParameterOffices.Value = String.Join(",", DirectCast(ParameterDictionary("SelectedOffices"), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterOffices.Value = System.DBNull.Value

                End If

                If ParameterDictionary.ContainsKey("SelectedEmployees") AndAlso ParameterDictionary("SelectedEmployees") IsNot Nothing Then

                    SqlParameterEmployees.Value = String.Join(",", DirectCast(ParameterDictionary("SelectedEmployees"), IEnumerable(Of String)).ToArray)

                Else

                    SqlParameterEmployees.Value = System.DBNull.Value

                End If


                'SqlParameterUserID.Value = DbContext.UserCode
                SqlParameterIncludeInastiveEmployees.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeTimeAnalysisInitialParameters.IncludeInactiveEmployees.ToString)
                SqlParameterFeeTimeOption.Value = ParameterDictionary(AdvantageFramework.Reporting.EmployeeTimeAnalysisInitialParameters.FeeTimeOption.ToString)



                LoadEmployeeTimeAnaylsisData = DbContext.Database.SqlQuery(Of AdvantageFramework.Reporting.Database.Classes.EmployeeTimeAnalysisReport)("exec dbo.advsp_employee_time_analysis @START_DATE, @END_DATE, @OFFICE_LIST, @DepartmentsList, @EmployeesList, @IncludeInactiveEmployees, @FeeTimeOption",
                                                         SqlParameterStartDate, SqlParameterEndDate, SqlParameterOffices, SqlParameterDepartments, SqlParameterEmployees, SqlParameterIncludeInastiveEmployees, SqlParameterFeeTimeOption).ToList


            Catch ex As Exception
                LoadEmployeeTimeAnaylsisData = Nothing
            End Try
        End Function

#End Region

    End Module

End Namespace
