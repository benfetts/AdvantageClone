// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using AdvantageFramework.Core.Security.Database.Entities;

#nullable disable

namespace AdvantageFramework.Core.Security.Database
{
    public partial class DbContext : Microsoft.EntityFrameworkCore.DbContext
    {
        private string connectionString;
        private string userCode;

        public DbContext()
        {
        }

        public DbContext(DbContextOptions<DbContext> options)
            : base(options)
        {
        }

        public DbContext(string connectionString, string userCode)
        {
            this.connectionString = connectionString;
            this.userCode = userCode;
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(connectionString);
        }


        public virtual DbSet<ApplicationSetting> AppVars { get; set; }
        public virtual DbSet<AdassistUser> ApprPasswords { get; set; }
        public virtual DbSet<AdvantageUserLicenseInUse> Aulus { get; set; }
        public virtual DbSet<ClientContactDetail> CdpContactDtls { get; set; }
        public virtual DbSet<ClientContact> ClientContact { get; set; }
        public virtual DbSet<CDPSecurityGroup> CDPSecurityGroup { get; set; }
        public virtual DbSet<CDPSecurityGroupEmployee> CDPSecurityGroupEmployee { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientPortalUser> ClientPortalUser { get; set; }
        public virtual DbSet<CPUserFavoriteModule> CPUserFavoriteModule { get; set; }
        public virtual DbSet<ClientPortalUserWorkspace> ClientPortalUserWorkspace { get; set; }
        public virtual DbSet<ClientPortalWorkspaceObject> ClientPortalWorkspaceObject { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<Views.Employee> Employees { get; set; }
        public virtual DbSet<Office> Offices { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<Application> SecApplications { get; set; }
        public virtual DbSet<ApplicationModule> ApplicationModules { get; set; }
        public virtual DbSet<UserClientDivisionProductAccess> UserClientDivisionProductAccess { get; set; }
        public virtual DbSet<ClientPortalUserApplicationAccess> ClientPortalUserApplicationAccess { get; set; }
        public virtual DbSet<ClientPortalUserModuleAccess> ClientPortalUserModuleAccess { get; set; }
        public virtual DbSet<UserEmployeeAccess> UserEmployeeAccess { get; set; }
        public virtual DbSet<Group> Group { get; set; }
        public virtual DbSet<GroupApplicationAccess> GroupApplicationAccess { get; set; }
        public virtual DbSet<GroupModuleAccess> GroupModuleAccess { get; set; }
        public virtual DbSet<GroupSetting> GroupSettings { get; set; }
        public virtual DbSet<GroupUserDefinedReportAccess> GroupUserDefinedReportAccess { get; set; }
        public virtual DbSet<GroupUser> GroupUsers { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<ModuleInformation> ModuleInformation { get; set; }
        public virtual DbSet<ModuleSub> ModuleSubs { get; set; }
        public virtual DbSet<PasswordHistory> PasswordHistory { get; set; }
        public virtual DbSet<PasswordLockout> PasswordLockout { get; set; }
        public virtual DbSet<ReportAccess> ReportAccess { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserApplicationAccess> UserApplicationAccess { get; set; }
        public virtual DbSet<UserLoginAudit> UserLoginAudit { get; set; }
        public virtual DbSet<UserMenu> UserMenus { get; set; }
        public virtual DbSet<UserMenuTab> UserMenuTabs { get; set; }
        public virtual DbSet<UserModuleAccess> UserModuleAccess { get; set; }
        public virtual DbSet<UserSetting> UserSettings { get; set; }
        public virtual DbSet<UserUserDefinedReportAccess> UserUserDefinedReportAccesss { get; set; }
        public virtual DbSet<ServiceFeeReconciliationSetting> ServiceFeeReconciliationSettings { get; set; }
        public virtual DbSet<ServiceFeeReconciliationSettingCDP> ServiceFeeReconciliationSettingCDPs { get; set; }
        public virtual DbSet<ServiceFeeReconciliationSettingDetail> ServiceFeeReconciliationSettingDetails { get; set; }
        public virtual DbSet<ServiceFeeReconciliationReport> ServiceFeeReconciliationReports { get; set; }
        public virtual DbSet<ServiceFeeReconciliationReportColumn> ServiceFeeReconciliationReportColumns { get; set; }
        public virtual DbSet<ServiceFeeReconciliationReportSummaryItem> ServiceFeeReconciliationReportSummaryItems { get; set; }
        public virtual DbSet<Views.DatabaseSQLUser> DatabaseSQLUser { get; set; }
        public virtual DbSet<Views.EmployeeSummary> EmployeeSummary { get; set; }
        public virtual DbSet<Views.GroupPermissionsReport> GroupPermissionsReports { get; set; }
        public virtual DbSet<Views.UserPermissionsReport> UserPermissionsReports { get; set; }
        public virtual DbSet<Views.GroupPermission> GroupPermissions { get; set; }
        public virtual DbSet<Views.ModuleView> ModuleViews { get; set; }
        public virtual DbSet<Views.ModuleStructure> ModuleStructures { get; set; }
        public virtual DbSet<Views.UserPermission> UserPermissions { get; set; }
        public virtual DbSet<Views.UserUserDefinedReportPermission> UserUserDefinedReportPermissions { get; set; }
        public virtual DbSet<Views.ServerSQLUser> ServerSQLUsers { get; set; }
        public virtual DbSet<UserFavoriteModule> UserFavoriteModules { get; set; }
        public virtual DbSet<UserWorkspace> UserWorkspaces { get; set; }
        public virtual DbSet<WorkspaceObject> WorkspaceObjects { get; set; }
        public virtual DbSet<WorkspaceTemplateDetail> WorkspaceTemplateDetails { get; set; }
        public virtual DbSet<WorkspaceTemplate> WorkspaceTemplates { get; set; }
        public virtual DbSet<WorkspaceTemplateItem> WorkspaceTemplateItems { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CS_AS");

            modelBuilder.Entity<ApplicationSetting>(entity =>
            {
                entity.Property(e => e.Application).IsUnicode(false);

                entity.Property(e => e.Userid).IsUnicode(false);

                entity.Property(e => e.VariableGroup).IsUnicode(false);

                entity.Property(e => e.VariableName).IsUnicode(false);

                entity.Property(e => e.VariableType).IsUnicode(false);

                entity.Property(e => e.VariableValue).IsUnicode(false);
            });

            modelBuilder.Entity<AdassistUser>(entity =>
            {
                entity.Property(e => e.AcctExec).IsUnicode(false);

                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PasswordId).IsUnicode(false);

                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<AdvantageUserLicenseInUse>(entity =>
            {
                entity.Property(e => e.AuluAssign).IsUnicode(false);
            });

            modelBuilder.Entity<ClientContactDetail>(entity =>
            {
                entity.HasKey(e => new { e.CdpContactId, e.SeqNbr });

                entity.HasIndex(e => new { e.CdpContactId, e.DivCode, e.PrdCode }, "IDX_CDP_CONTACT_CDP")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DivCode).IsUnicode(false);

                entity.Property(e => e.PrdCode).IsUnicode(false);

                entity.HasOne(d => d.CdpContact)
                    .WithMany(p => p.CdpContactDtls)
                    .HasForeignKey(d => d.CdpContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CDP_CONTACT");
            });

            modelBuilder.Entity<ClientContact>(entity =>
            {
                entity.HasIndex(e => new { e.CdpContactId, e.CpUser, e.EmailRcpt, e.EmailAddress }, "IDX_CDP_CONTACT_HDR_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ContCode, e.ClCode }, "IDX_CDP_CONT_HDR_CL")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CellPhone).IsUnicode(false);

                entity.Property(e => e.ClCode).IsUnicode(false);

                entity.Property(e => e.ContAddress1).IsUnicode(false);

                entity.Property(e => e.ContAddress2).IsUnicode(false);

                entity.Property(e => e.ContCity).IsUnicode(false);

                entity.Property(e => e.ContCode).IsUnicode(false);

                entity.Property(e => e.ContCountry).IsUnicode(false);

                entity.Property(e => e.ContCounty).IsUnicode(false);

                entity.Property(e => e.ContExtention).IsUnicode(false);

                entity.Property(e => e.ContFax).IsUnicode(false);

                entity.Property(e => e.ContFaxExtention).IsUnicode(false);

                entity.Property(e => e.ContFml)
                    .IsUnicode(false)
                    .HasComputedColumnSql("(coalesce((rtrim([CONT_FNAME]) + ' '),' ') + coalesce((ltrim(rtrim([CONT_MI]))),'') + case when (datalength(ltrim(rtrim([CONT_MI]))) = 0) then '' when (datalength(ltrim(rtrim([CONT_MI]))) is null) then '' else '. ' end + coalesce([CONT_LNAME],''))", false);

                entity.Property(e => e.ContFname).IsUnicode(false);

                entity.Property(e => e.ContLf)
                    .IsUnicode(false)
                    .HasComputedColumnSql("(coalesce(([CONT_LNAME] + ', '),'') + coalesce((rtrim([CONT_FNAME])),''))", false);

                entity.Property(e => e.ContLname).IsUnicode(false);

                entity.Property(e => e.ContMi).IsUnicode(false);

                entity.Property(e => e.ContState).IsUnicode(false);

                entity.Property(e => e.ContTelephone).IsUnicode(false);

                entity.Property(e => e.ContTitle).IsUnicode(false);

                entity.Property(e => e.ContZip).IsUnicode(false);

                entity.Property(e => e.DefaultTask).IsUnicode(false);

                entity.Property(e => e.EmailAddress).IsUnicode(false);

                entity.HasOne(d => d.ClCodeNavigation)
                    .WithMany(p => p.CdpContactHdrs)
                    .HasForeignKey(d => d.ClCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CDP_CONT_HDR_CLI");
            });

            modelBuilder.Entity<CDPSecurityGroup>(entity =>
            {
                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<CDPSecurityGroupEmployee>(entity =>
            {
                entity.Property(e => e.EmpCode).IsUnicode(false);

                entity.HasOne(d => d.CdpGroup)
                    .WithMany(p => p.CdpGroupEmployees)
                    .HasForeignKey(d => d.CdpGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CDP_GROUP_EMPLOYEE_CDP_GROUP");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.HasIndex(e => new { e.ClCode, e.ClName, e.ActiveFlag }, "IDX_CLCODE_CLNAME")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ClCode).IsUnicode(false);

                entity.Property(e => e.AvalaraScCode).IsUnicode(false);

                entity.Property(e => e.BatchName).IsUnicode(false);

                entity.Property(e => e.BillerEmpCode).IsUnicode(false);

                entity.Property(e => e.BinvFormat).IsUnicode(false);

                entity.Property(e => e.ClAddress1).IsUnicode(false);

                entity.Property(e => e.ClAddress2).IsUnicode(false);

                entity.Property(e => e.ClAlphaSort).IsUnicode(false);

                entity.Property(e => e.ClAttention).IsUnicode(false);

                entity.Property(e => e.ClBaddress1).IsUnicode(false);

                entity.Property(e => e.ClBaddress2).IsUnicode(false);

                entity.Property(e => e.ClBcity).IsUnicode(false);

                entity.Property(e => e.ClBcountry).IsUnicode(false);

                entity.Property(e => e.ClBcounty).IsUnicode(false);

                entity.Property(e => e.ClBstate).IsUnicode(false);

                entity.Property(e => e.ClBzip).IsUnicode(false);

                entity.Property(e => e.ClCity).IsUnicode(false);

                entity.Property(e => e.ClCountry).IsUnicode(false);

                entity.Property(e => e.ClCounty).IsUnicode(false);

                entity.Property(e => e.ClFooter).IsUnicode(false);

                entity.Property(e => e.ClMattention).IsUnicode(false);

                entity.Property(e => e.ClMfooter).IsUnicode(false);

                entity.Property(e => e.ClName).IsUnicode(false);

                entity.Property(e => e.ClSaddress1).IsUnicode(false);

                entity.Property(e => e.ClSaddress2).IsUnicode(false);

                entity.Property(e => e.ClScity).IsUnicode(false);

                entity.Property(e => e.ClScountry).IsUnicode(false);

                entity.Property(e => e.ClScounty).IsUnicode(false);

                entity.Property(e => e.ClSstate).IsUnicode(false);

                entity.Property(e => e.ClState).IsUnicode(false);

                entity.Property(e => e.ClSzip).IsUnicode(false);

                entity.Property(e => e.ClZip).IsUnicode(false);

                entity.Property(e => e.ClientDiscountCode).IsUnicode(false);

                entity.Property(e => e.CurrencyCode).IsUnicode(false);

                entity.Property(e => e.DcOauth2Token).IsUnicode(false);

                entity.Property(e => e.IinvFormat).IsUnicode(false);

                entity.Property(e => e.InvByJobOnNull).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvFormat).IsUnicode(false);

                entity.Property(e => e.InvoiceLocationId).IsUnicode(false);

                entity.Property(e => e.OinvFormat).IsUnicode(false);

                entity.Property(e => e.PinvFormat).IsUnicode(false);

                entity.Property(e => e.PinvFormat2).IsUnicode(false);

                entity.Property(e => e.VatNumber).IsUnicode(false);
            });

            modelBuilder.Entity<ClientPortalUser>(entity =>
            {
                entity.Property(e => e.UserGuid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.AgencyContactCode).IsUnicode(false);

                entity.Property(e => e.AlertGroupCode).IsUnicode(false);

                entity.Property(e => e.ClCode).IsUnicode(false);

                entity.Property(e => e.CreatedBy).IsUnicode(false);

                entity.Property(e => e.CsPassword).IsUnicode(false);

                entity.Property(e => e.CultureCode).IsUnicode(false);

                entity.Property(e => e.EmailAddress).IsUnicode(false);

                entity.Property(e => e.FullName).IsUnicode(false);

                entity.Property(e => e.IsLocked).HasDefaultValueSql("(0)");

                entity.Property(e => e.LoweredUserName).IsUnicode(false);

                entity.Property(e => e.PasswordHash).IsUnicode(false);

                entity.Property(e => e.Theme).IsUnicode(false);

                entity.Property(e => e.TimeZoneId).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.WebId).IsUnicode(false);

                entity.HasOne(d => d.CdpContact)
                    .WithMany(p => p.CpUsers)
                    .HasForeignKey(d => d.CdpContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CP_USER_CONTACT");
            });

            modelBuilder.Entity<CPUserFavoriteModule>(entity =>
            {
                entity.HasKey(e => new { e.CdpContactId, e.TabId, e.ApplicationId })
                    .HasName("PK_CP_USER_QUICK_LAUNCH_APPS_1");
            });

            modelBuilder.Entity<ClientPortalUserWorkspace>(entity =>
            {
                entity.HasKey(e => e.WorkspaceId)
                    .HasName("PK_CP_USER_WORKSPACES");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.CdpContact)
                    .WithMany(p => p.CpUserWorkspaces)
                    .HasForeignKey(d => d.CdpContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CP_USER_WORKSPACE_SEC_USER");
            });

            modelBuilder.Entity<ClientPortalWorkspaceObject>(entity =>
            {
                entity.Property(e => e.ZoneId).IsUnicode(false);

                entity.HasOne(d => d.Workspace)
                    .WithMany(p => p.CpWorkspaceObjects)
                    .HasForeignKey(d => d.WorkspaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CP_WORKSPACE_OBJECT_WV_USER_WORKSPACE");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.Property(e => e.DpTmCode).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.ColorCode).IsUnicode(false);

                entity.Property(e => e.DpTmDesc).IsUnicode(false);

                entity.Property(e => e.PoApprRuleCode).IsUnicode(false);

                entity.Property(e => e.ServiceFeeTypeCode).IsUnicode(false);
            });

            modelBuilder.Entity<Division>(entity =>
            {
                entity.HasKey(e => new { e.ClCode, e.DivCode });

                entity.HasIndex(e => e.ClCode, "XDIV_CLIENT")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DivCode, "XDIV_DIVISION")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ClCode).IsUnicode(false);

                entity.Property(e => e.DivCode).IsUnicode(false);

                entity.Property(e => e.BatchName).IsUnicode(false);

                entity.Property(e => e.DivAlphaSort).IsUnicode(false);

                entity.Property(e => e.DivAttention).IsUnicode(false);

                entity.Property(e => e.DivBaddress1).IsUnicode(false);

                entity.Property(e => e.DivBaddress2).IsUnicode(false);

                entity.Property(e => e.DivBcity).IsUnicode(false);

                entity.Property(e => e.DivBcountry).IsUnicode(false);

                entity.Property(e => e.DivBcounty).IsUnicode(false);

                entity.Property(e => e.DivBstate).IsUnicode(false);

                entity.Property(e => e.DivBzip).IsUnicode(false);

                entity.Property(e => e.DivName).IsUnicode(false);

                entity.Property(e => e.DivSaddress1).IsUnicode(false);

                entity.Property(e => e.DivSaddress2).IsUnicode(false);

                entity.Property(e => e.DivScity).IsUnicode(false);

                entity.Property(e => e.DivScountry).IsUnicode(false);

                entity.Property(e => e.DivScounty).IsUnicode(false);

                entity.Property(e => e.DivSstate).IsUnicode(false);

                entity.Property(e => e.DivSzip).IsUnicode(false);

                entity.HasOne(d => d.ClCodeNavigation)
                    .WithMany(p => p.Divisions)
                    .HasForeignKey(d => d.ClCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DIVISION_CLIENT");
            });

            modelBuilder.Entity<Views.Employee>(entity =>
            {
                entity.ToView("EMPLOYEE");

                entity.Property(e => e.AdobeSignatureFilePassword).IsUnicode(false);

                entity.Property(e => e.CalTimeEmail).IsUnicode(false);

                entity.Property(e => e.CalTimeHost).IsUnicode(false);

                entity.Property(e => e.CalTimePassword).IsUnicode(false);

                entity.Property(e => e.CalTimeUsername).IsUnicode(false);

                entity.Property(e => e.CcDesc).IsUnicode(false);

                entity.Property(e => e.CcGlAccount).IsUnicode(false);

                entity.Property(e => e.CcNumber).IsUnicode(false);

                entity.Property(e => e.CreatedBy).IsUnicode(false);

                entity.Property(e => e.CsPassword).IsUnicode(false);

                entity.Property(e => e.CultureCode).IsUnicode(false);

                entity.Property(e => e.DefFncCode).IsUnicode(false);

                entity.Property(e => e.DefTrfRole).IsUnicode(false);

                entity.Property(e => e.DpTmCode).IsUnicode(false);

                entity.Property(e => e.EmailPwd).IsUnicode(false);

                entity.Property(e => e.EmailReplyTo).IsUnicode(false);

                entity.Property(e => e.EmailUsername).IsUnicode(false);

                entity.Property(e => e.EmpAccountNbr).IsUnicode(false);

                entity.Property(e => e.EmpAddress1).IsUnicode(false);

                entity.Property(e => e.EmpAddress2).IsUnicode(false);

                entity.Property(e => e.EmpAlphaSort).IsUnicode(false);

                entity.Property(e => e.EmpCity).IsUnicode(false);

                entity.Property(e => e.EmpCode).IsUnicode(false);

                entity.Property(e => e.EmpCountry).IsUnicode(false);

                entity.Property(e => e.EmpCounty).IsUnicode(false);

                entity.Property(e => e.EmpEmail).IsUnicode(false);

                entity.Property(e => e.EmpFname).IsUnicode(false);

                entity.Property(e => e.EmpLname).IsUnicode(false);

                entity.Property(e => e.EmpMi).IsUnicode(false);

                entity.Property(e => e.EmpOtherInfo).IsUnicode(false);

                entity.Property(e => e.EmpPayToAddr1).IsUnicode(false);

                entity.Property(e => e.EmpPayToAddr2).IsUnicode(false);

                entity.Property(e => e.EmpPayToCity).IsUnicode(false);

                entity.Property(e => e.EmpPayToCountry).IsUnicode(false);

                entity.Property(e => e.EmpPayToCounty).IsUnicode(false);

                entity.Property(e => e.EmpPayToState).IsUnicode(false);

                entity.Property(e => e.EmpPayToZip).IsUnicode(false);

                entity.Property(e => e.EmpPhone).IsUnicode(false);

                entity.Property(e => e.EmpPhoneAlt).IsUnicode(false);

                entity.Property(e => e.EmpPhoneCell).IsUnicode(false);

                entity.Property(e => e.EmpPhoneWork).IsUnicode(false);

                entity.Property(e => e.EmpPhoneWorkExt).IsUnicode(false);

                entity.Property(e => e.EmpState).IsUnicode(false);

                entity.Property(e => e.EmpTitle).IsUnicode(false);

                entity.Property(e => e.EmpWorkDays).IsUnicode(false);

                entity.Property(e => e.EmpZip).IsUnicode(false);

                entity.Property(e => e.ExpRptApprover).IsUnicode(false);

                entity.Property(e => e.GoogleToken).IsUnicode(false);

                entity.Property(e => e.IsApiUser).IsUnicode(false);

                entity.Property(e => e.LastModifiedBy).IsUnicode(false);

                entity.Property(e => e.Method).IsUnicode(false);

                entity.Property(e => e.OfficeCode).IsUnicode(false);

                entity.Property(e => e.PoApprRuleCode).IsUnicode(false);

                entity.Property(e => e.ProofhqPassword).IsUnicode(false);

                entity.Property(e => e.ProofhqUsername).IsUnicode(false);

                entity.Property(e => e.SignaturePath).IsUnicode(false);

                entity.Property(e => e.SmtpServer).IsUnicode(false);

                entity.Property(e => e.SugarPassword).IsUnicode(false);

                entity.Property(e => e.SugarUsername).IsUnicode(false);

                entity.Property(e => e.SupervisorCode).IsUnicode(false);

                entity.Property(e => e.TimeZoneId).IsUnicode(false);

                entity.Property(e => e.VccPassword).IsUnicode(false);

                entity.Property(e => e.VccUsername).IsUnicode(false);

                entity.Property(e => e.VnCodeExp).IsUnicode(false);
            });

            modelBuilder.Entity<Office>(entity =>
            {
                entity.Property(e => e.OfficeCode).IsUnicode(false);

                entity.Property(e => e.AvataxCompanyCode).IsUnicode(false);

                entity.Property(e => e.GlacodeAp).IsUnicode(false);

                entity.Property(e => e.GlacodeApDisc).IsUnicode(false);

                entity.Property(e => e.GlacodeApWh).IsUnicode(false);

                entity.Property(e => e.GlacodeAr).IsUnicode(false);

                entity.Property(e => e.GlacodeCity).IsUnicode(false);

                entity.Property(e => e.GlacodeClientLatePaymentFee).IsUnicode(false);

                entity.Property(e => e.GlacodeCounty).IsUnicode(false);

                entity.Property(e => e.GlacodeCrncyGainLoss).IsUnicode(false);

                entity.Property(e => e.GlacodeState).IsUnicode(false);

                entity.Property(e => e.GlacodeSuspense).IsUnicode(false);

                entity.Property(e => e.GlacodeVolDisc).IsUnicode(false);

                entity.Property(e => e.MglacodeAccAp).IsUnicode(false);

                entity.Property(e => e.MglacodeAccCos).IsUnicode(false);

                entity.Property(e => e.MglacodeAccTax).IsUnicode(false);

                entity.Property(e => e.MglacodeCos).IsUnicode(false);

                entity.Property(e => e.MglacodeDefCos).IsUnicode(false);

                entity.Property(e => e.MglacodeDefSales).IsUnicode(false);

                entity.Property(e => e.MglacodeSales).IsUnicode(false);

                entity.Property(e => e.MglacodeWip).IsUnicode(false);

                entity.Property(e => e.OfficeName).IsUnicode(false);

                entity.Property(e => e.PglacodeAccAp).IsUnicode(false);

                entity.Property(e => e.PglacodeAccCos).IsUnicode(false);

                entity.Property(e => e.PglacodeAccTax).IsUnicode(false);

                entity.Property(e => e.PglacodeCos).IsUnicode(false);

                entity.Property(e => e.PglacodeDefCos).IsUnicode(false);

                entity.Property(e => e.PglacodeDefSales).IsUnicode(false);

                entity.Property(e => e.PglacodeSales).IsUnicode(false);

                entity.Property(e => e.PglacodeWip).IsUnicode(false);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => new { e.ClCode, e.DivCode, e.PrdCode });

                entity.HasIndex(e => e.ClCode, "XPRD_CLIENT")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DivCode, "XPRD_DIVISION")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OfficeCode, "XPRD_OFFICE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PrdCode, "XPRD_PRODUCT")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ClCode).IsUnicode(false);

                entity.Property(e => e.DivCode).IsUnicode(false);

                entity.Property(e => e.PrdCode).IsUnicode(false);

                entity.Property(e => e.BatchName).IsUnicode(false);

                entity.Property(e => e.CurrencyCode).IsUnicode(false);

                entity.Property(e => e.EmailGrCode).IsUnicode(false);

                entity.Property(e => e.OfficeCode).IsUnicode(false);

                entity.Property(e => e.PrdAlphaSort).IsUnicode(false);

                entity.Property(e => e.PrdAttention).IsUnicode(false);

                entity.Property(e => e.PrdBillAddress1).IsUnicode(false);

                entity.Property(e => e.PrdBillAddress2).IsUnicode(false);

                entity.Property(e => e.PrdBillCity).IsUnicode(false);

                entity.Property(e => e.PrdBillCountry).IsUnicode(false);

                entity.Property(e => e.PrdBillCounty).IsUnicode(false);

                entity.Property(e => e.PrdBillEmpTime).HasComputedColumnSql("([dbo].[udf_get_prod_bill_emp_time]([CL_CODE], [DIV_CODE], [PRD_CODE]))", false);

                entity.Property(e => e.PrdBillExtention).IsUnicode(false);

                entity.Property(e => e.PrdBillFax).IsUnicode(false);

                entity.Property(e => e.PrdBillFaxExt).IsUnicode(false);

                entity.Property(e => e.PrdBillRate).HasComputedColumnSql("([dbo].[udf_get_prod_bill_rate]([CL_CODE], [DIV_CODE], [PRD_CODE]))", false);

                entity.Property(e => e.PrdBillState).IsUnicode(false);

                entity.Property(e => e.PrdBillTelephone).IsUnicode(false);

                entity.Property(e => e.PrdBillZip).IsUnicode(false);

                entity.Property(e => e.PrdDescription).IsUnicode(false);

                entity.Property(e => e.PrdMagTaxCode).IsUnicode(false);

                entity.Property(e => e.PrdMediaBcycle).IsUnicode(false);

                entity.Property(e => e.PrdMiscTaxCode).IsUnicode(false);

                entity.Property(e => e.PrdNewsTaxCode).IsUnicode(false);

                entity.Property(e => e.PrdOtdrTaxCode).IsUnicode(false);

                entity.Property(e => e.PrdProdBcycle).IsUnicode(false);

                entity.Property(e => e.PrdProdTaxCode).IsUnicode(false);

                entity.Property(e => e.PrdRadioTaxCode).IsUnicode(false);

                entity.Property(e => e.PrdSfBcycle).IsUnicode(false);

                entity.Property(e => e.PrdSfReconCode).IsUnicode(false);

                entity.Property(e => e.PrdStateAddr1).IsUnicode(false);

                entity.Property(e => e.PrdStateAddr2).IsUnicode(false);

                entity.Property(e => e.PrdStateCity).IsUnicode(false);

                entity.Property(e => e.PrdStateCountry).IsUnicode(false);

                entity.Property(e => e.PrdStateCounty).IsUnicode(false);

                entity.Property(e => e.PrdStateExt).IsUnicode(false);

                entity.Property(e => e.PrdStateFax).IsUnicode(false);

                entity.Property(e => e.PrdStateFaxExt).IsUnicode(false);

                entity.Property(e => e.PrdStateState).IsUnicode(false);

                entity.Property(e => e.PrdStateTelephon).IsUnicode(false);

                entity.Property(e => e.PrdStateZip).IsUnicode(false);

                entity.Property(e => e.PrdTvTaxCode).IsUnicode(false);

                entity.Property(e => e.UserDefined1).IsUnicode(false);

                entity.Property(e => e.UserDefined2).IsUnicode(false);

                entity.Property(e => e.UserDefined3).IsUnicode(false);

                entity.Property(e => e.UserDefined4).IsUnicode(false);

                entity.HasOne(d => d.CdpGroup)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CdpGroupId)
                    .HasConstraintName("FK_PRODUCT_CDP_GROUP");

                entity.HasOne(d => d.OfficeCodeNavigation)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRODUCT_OFFICE");

                entity.HasOne(d => d.Division)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => new { d.ClCode, d.DivCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRODUCT_DIVISION");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.Property(e => e.Reportfile).IsUnicode(false);

                entity.Property(e => e.Reportactive).IsUnicode(false);

                entity.Property(e => e.Reportcategory).IsUnicode(false);

                entity.Property(e => e.Reportname).IsUnicode(false);
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<ApplicationModule>(entity =>
            {
                entity.HasOne(d => d.SecApplication)
                    .WithMany(p => p.SecApplicationMods)
                    .HasForeignKey(d => d.SecApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_APPLICATION_MOD_SEC_APPLICATION");

                entity.HasOne(d => d.SecModule)
                    .WithMany(p => p.SecApplicationMods)
                    .HasForeignKey(d => d.SecModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_APPLICATION_MOD_SEC_MODULE");
            });

            modelBuilder.Entity<UserClientDivisionProductAccess>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ClCode, e.DivCode, e.PrdCode });

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.Property(e => e.ClCode).IsUnicode(false);

                entity.Property(e => e.DivCode).IsUnicode(false);

                entity.Property(e => e.PrdCode).IsUnicode(false);

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.SecClients)
                    .HasForeignKey(d => new { d.ClCode, d.DivCode, d.PrdCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_CLIENT_SECCLI");
            });

            modelBuilder.Entity<ClientPortalUserApplicationAccess>(entity =>
            {
                entity.HasOne(d => d.CpuserGu)
                    .WithMany(p => p.SecCpuserAppaccesses)
                    .HasForeignKey(d => d.CpuserGuid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_CPUSER_APPACCESS_CP_USER");

                entity.HasOne(d => d.SecApplication)
                    .WithMany(p => p.SecCpuserAppaccesses)
                    .HasForeignKey(d => d.SecApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_CPUSER_APPACCESS_SEC_APPLICATION");
            });

            modelBuilder.Entity<ClientPortalUserModuleAccess>(entity =>
            {
                entity.HasOne(d => d.CpuserGu)
                    .WithMany(p => p.SecCpuserModaccesses)
                    .HasForeignKey(d => d.CpuserGuid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_CPUSER_MODACCESS_CP_USER");

                entity.HasOne(d => d.SecModule)
                    .WithMany(p => p.SecCpuserModaccesses)
                    .HasForeignKey(d => d.SecModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_CPUSER_MODACCESS_SEC_MODULE");
            });

            modelBuilder.Entity<UserEmployeeAccess>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.EmpCode });

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.Property(e => e.EmpCode).IsUnicode(false);
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<GroupApplicationAccess>(entity =>
            {
                entity.HasOne(d => d.SecApplication)
                    .WithMany(p => p.SecGroupAppaccesses)
                    .HasForeignKey(d => d.SecApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_GROUP_APPACCESS_SEC_APPLICATION");

                entity.HasOne(d => d.SecGroup)
                    .WithMany(p => p.SecGroupAppaccesses)
                    .HasForeignKey(d => d.SecGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_GROUP_APPACCESS_SEC_GROUP");
            });

            modelBuilder.Entity<GroupModuleAccess>(entity =>
            {
                entity.HasIndex(e => e.SecModuleId, "XSEC_GROUP_MODACCESS")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.SecGroup)
                    .WithMany(p => p.SecGroupModaccesses)
                    .HasForeignKey(d => d.SecGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_GROUP_MODACCESS_SEC_GROUP");

                entity.HasOne(d => d.SecModule)
                    .WithMany(p => p.SecGroupModaccesses)
                    .HasForeignKey(d => d.SecModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_GROUP_MODACCESS_SEC_MODULE");
            });

            modelBuilder.Entity<GroupSetting>(entity =>
            {
                entity.HasKey(e => new { e.SecGroupId, e.SettingCode });

                entity.Property(e => e.SettingCode).IsUnicode(false);

                entity.Property(e => e.SecGroupSettingId).ValueGeneratedOnAdd();

                entity.Property(e => e.StringValue).IsUnicode(false);

                entity.HasOne(d => d.SecGroup)
                    .WithMany(p => p.SecGroupSettings)
                    .HasForeignKey(d => d.SecGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_GROUP_SETTING_SEC_GROUP");
            });

            modelBuilder.Entity<GroupUserDefinedReportAccess>(entity =>
            {
                entity.HasOne(d => d.SecGroup)
                    .WithMany(p => p.SecGroupUdraccesses)
                    .HasForeignKey(d => d.SecGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_GROUP_UDRACCESS_SEC_GROUP");
            });

            modelBuilder.Entity<GroupUser>(entity =>
            {
                entity.HasOne(d => d.SecGroup)
                    .WithMany(p => p.SecGroupUsers)
                    .HasForeignKey(d => d.SecGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_GROUP_USER_SEC_GROUP");

                entity.HasOne(d => d.SecUser)
                    .WithMany(p => p.SecGroupUsers)
                    .HasForeignKey(d => d.SecUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_GROUP_USER_SEC_USER");
            });

            modelBuilder.Entity<Module>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.SecModuleCode).IsUnicode(false);

                entity.HasOne(d => d.SecModuleInfo)
                    .WithMany(p => p.SecModules)
                    .HasForeignKey(d => d.SecModuleInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_MODULE_SEC_MODULE_INFO");
            });

            modelBuilder.Entity<ModuleInformation>(entity =>
            {
                entity.Property(e => e.Imagename).IsUnicode(false);

                entity.Property(e => e.PbAppname).IsUnicode(false);

                entity.Property(e => e.PbCommandString).IsUnicode(false);

                entity.Property(e => e.PbMenu).IsUnicode(false);

                entity.Property(e => e.PbName).IsUnicode(false);

                entity.Property(e => e.WvDoName).IsUnicode(false);

                entity.Property(e => e.WvImagepath).IsUnicode(false);

                entity.Property(e => e.WvImagepathactive).IsUnicode(false);

                entity.Property(e => e.WvImagepathlarge).IsUnicode(false);

                entity.Property(e => e.WvRptDescription).IsUnicode(false);

                entity.Property(e => e.WvRptImagepath).IsUnicode(false);

                entity.Property(e => e.WvRptImagepathactive).IsUnicode(false);

                entity.Property(e => e.WvRptImagepathlarge).IsUnicode(false);

                entity.Property(e => e.WvRptPreviewlocation).IsUnicode(false);

                entity.Property(e => e.WvRptUrl).IsUnicode(false);

                entity.Property(e => e.WvUrl).IsUnicode(false);
            });

            modelBuilder.Entity<ModuleSub>(entity =>
            {
                entity.HasOne(d => d.ParentModule)
                    .WithMany(p => p.SecModuleSubParentModules)
                    .HasForeignKey(d => d.ParentModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_MODULE_SUB_SEC_MODULE1");

                entity.HasOne(d => d.SecModule)
                    .WithMany(p => p.SecModuleSubSecModules)
                    .HasForeignKey(d => d.SecModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_MODULE_SUB_SEC_MODULE");
            });

            modelBuilder.Entity<PasswordHistory>(entity =>
            {
                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.UserCode).IsUnicode(false);
            });

            modelBuilder.Entity<PasswordLockout>(entity =>
            {
                entity.Property(e => e.UserCode).IsUnicode(false);

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.SecPwdLocks)
                    .HasPrincipalKey(p => p.UserCode)
                    .HasForeignKey(d => d.UserCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_PWD_LOCK_SEC_USER");
            });

            modelBuilder.Entity<ReportAccess>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Reportfile });

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.Property(e => e.Reportfile).IsUnicode(false);

                entity.Property(e => e.Enable).IsUnicode(false);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasIndex(e => e.UserCode, "IDX_SEC_USER_CODES")
                    .HasFillFactor((byte)95);

                entity.Property(e => e.AuthKey).IsUnicode(false);

                entity.Property(e => e.EmpCode).IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserCode).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.WebId).IsUnicode(false);
            });

            modelBuilder.Entity<UserApplicationAccess>(entity =>
            {
                entity.HasOne(d => d.SecApplication)
                    .WithMany(p => p.SecUserAppaccesses)
                    .HasForeignKey(d => d.SecApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_USER_APPACCESS_SEC_APPLICATION");

                entity.HasOne(d => d.SecUser)
                    .WithMany(p => p.SecUserAppaccesses)
                    .HasForeignKey(d => d.SecUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_USER_APPACCESS_SEC_USER");
            });

            modelBuilder.Entity<UserLoginAudit>(entity =>
            {
                entity.Property(e => e.FailureReason).IsUnicode(false);

                entity.Property(e => e.IpAddress).IsUnicode(false);

                entity.Property(e => e.LoginDatetime).HasPrecision(0);

                entity.Property(e => e.LogoutDatetime)
                    .HasPrecision(0)
                    .HasDefaultValueSql("('01/01/0001 00:00:00')");

                entity.Property(e => e.UserCode).IsUnicode(false);

                entity.HasOne(d => d.SecApplication)
                    .WithMany(p => p.SecUserLoginAudits)
                    .HasForeignKey(d => d.SecApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_USER_LOGIN_AUDIT_SEC_APPLICATION");
            });

            modelBuilder.Entity<UserMenuTab>(entity =>
            {
                entity.Property(e => e.TabName).IsUnicode(false);
            });

            modelBuilder.Entity<UserModuleAccess>(entity =>
            {
                entity.HasIndex(e => e.SecModuleId, "XSEC_USER_MODACCESS")
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.SecModule)
                    .WithMany(p => p.SecUserModaccesses)
                    .HasForeignKey(d => d.SecModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_USER_MODACCESS_SEC_MODULE");

                entity.HasOne(d => d.SecUser)
                    .WithMany(p => p.SecUserModaccesses)
                    .HasForeignKey(d => d.SecUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_USER_MODACCESS_SEC_USER");
            });

            modelBuilder.Entity<UserSetting>(entity =>
            {
                entity.HasKey(e => new { e.SecUserId, e.SettingCode })
                    .HasName("PK_SEC_USER_SETTING_1");

                entity.Property(e => e.SettingCode).IsUnicode(false);

                entity.Property(e => e.SecUserSettingId).ValueGeneratedOnAdd();

                entity.Property(e => e.StringValue).IsUnicode(false);

                entity.HasOne(d => d.SecUser)
                    .WithMany(p => p.SecUserSettings)
                    .HasForeignKey(d => d.SecUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_USER_SETTING_SEC_USER");
            });

            modelBuilder.Entity<UserUserDefinedReportAccess>(entity =>
            {
                entity.HasOne(d => d.SecUser)
                    .WithMany(p => p.SecUserUdraccesses)
                    .HasForeignKey(d => d.SecUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEC_USER_UDRACCESS_SEC_USER");
            });

            modelBuilder.Entity<ServiceFeeReconciliationSetting>(entity =>
            {
                entity.Property(e => e.UserId).IsUnicode(false);
            });

            modelBuilder.Entity<ServiceFeeReconciliationSettingCDP>(entity =>
            {
                entity.Property(e => e.ClCode).IsUnicode(false);

                entity.Property(e => e.DivCode).IsUnicode(false);

                entity.Property(e => e.PrdCode).IsUnicode(false);
            });

            modelBuilder.Entity<ServiceFeeReconciliationSettingDetail>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.DtlType, e.DtlCode });

                entity.Property(e => e.UserId).IsUnicode(false);

                entity.Property(e => e.DtlType).IsUnicode(false);

                entity.Property(e => e.DtlCode).IsUnicode(false);
            });

            modelBuilder.Entity<ServiceFeeReconciliationReport>(entity =>
            {
                entity.Property(e => e.ActiveFilter).IsUnicode(false);

                entity.Property(e => e.CreatedBy).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ServiceGroupBy).HasDefaultValueSql("((1))");

                entity.Property(e => e.ServiceSummaryStyle).HasDefaultValueSql("((1))");

                entity.Property(e => e.UpdatedBy).IsUnicode(false);
            });

            modelBuilder.Entity<ServiceFeeReconciliationReportColumn>(entity =>
            {
                entity.Property(e => e.FieldName).IsUnicode(false);

                entity.Property(e => e.HeaderText).IsUnicode(false);

                entity.HasOne(d => d.ServiceFeeReport)
                    .WithMany(p => p.ServiceFeeReportCols)
                    .HasForeignKey(d => d.ServiceFeeReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SERVICE_FEE_REPORT_COL");
            });

            modelBuilder.Entity<ServiceFeeReconciliationReportSummaryItem>(entity =>
            {
                entity.Property(e => e.ColumnName).IsUnicode(false);

                entity.Property(e => e.DisplayFormat).IsUnicode(false);

                entity.Property(e => e.FieldName).IsUnicode(false);

                entity.HasOne(d => d.ServiceFeeReport)
                    .WithMany(p => p.ServiceFeeReportSums)
                    .HasForeignKey(d => d.ServiceFeeReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SERVICE_FEE_REPORT_SUM");
            });

            modelBuilder.Entity<Views.DatabaseSQLUser>(entity =>
            {
                entity.ToView("V_DATABASE_SQLUSER");

                entity.Property(e => e.Type)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Views.EmployeeSummary>(entity =>
            {
                entity.ToView("V_RPT_SEC_EMP_SUMMARY");

                entity.Property(e => e.Employee).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.EmployeeName).IsUnicode(false);

                entity.Property(e => e.Group).IsUnicode(false);

                entity.Property(e => e.GroupDescription).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.UserCode).IsUnicode(false);
            });

            modelBuilder.Entity<Views.GroupPermissionsReport>(entity =>
            {
                entity.ToView("V_RPT_SEC_GROUP_PERMISSION");

                entity.Property(e => e.GroupDescription).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.Module).IsUnicode(false);

                entity.Property(e => e.ModuleCode).IsUnicode(false);

                entity.Property(e => e.ParentModule).IsUnicode(false);

                entity.Property(e => e.SubParentModule).IsUnicode(false);

                entity.Property(e => e.SubSubParentModule).IsUnicode(false);
            });

            modelBuilder.Entity<Views.UserPermissionsReport>(entity =>
            {
                entity.ToView("V_RPT_SEC_PERMISSION");

                entity.Property(e => e.Employee).IsUnicode(false);

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.Module).IsUnicode(false);

                entity.Property(e => e.ModuleCode).IsUnicode(false);

                entity.Property(e => e.ParentModule).IsUnicode(false);

                entity.Property(e => e.SubParentModule).IsUnicode(false);

                entity.Property(e => e.SubSubParentModule).IsUnicode(false);

                entity.Property(e => e.UserCode).IsUnicode(false);
            });

            modelBuilder.Entity<Views.GroupPermission>(entity =>
            {
                entity.ToView("V_SEC_GROUP_PERMISSION");

                entity.Property(e => e.GroupDescription).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.Module).IsUnicode(false);

                entity.Property(e => e.ModuleCode).IsUnicode(false);
            });

            modelBuilder.Entity<Views.ModuleView>(entity =>
            {
                entity.ToView("V_SEC_MODULES");

                entity.Property(e => e.AdvantageApplicationCode).IsUnicode(false);

                entity.Property(e => e.AdvantageApplicationName).IsUnicode(false);

                entity.Property(e => e.AdvantageCommandString).IsUnicode(false);

                entity.Property(e => e.AdvantageMenuName).IsUnicode(false);

                entity.Property(e => e.ApplicationDescription).IsUnicode(false);

                entity.Property(e => e.ApplicationName).IsUnicode(false);

                entity.Property(e => e.DesktopObjectName).IsUnicode(false);

                entity.Property(e => e.ImageName).IsUnicode(false);

                entity.Property(e => e.ModuleCode).IsUnicode(false);

                entity.Property(e => e.ModuleDescription).IsUnicode(false);

                entity.Property(e => e.ParentModuleCode).IsUnicode(false);

                entity.Property(e => e.ParentModuleDescription).IsUnicode(false);

                entity.Property(e => e.ReportDescription).IsUnicode(false);

                entity.Property(e => e.ReportImagePath).IsUnicode(false);

                entity.Property(e => e.ReportImagePathActive).IsUnicode(false);

                entity.Property(e => e.ReportLargeImagePath).IsUnicode(false);

                entity.Property(e => e.ReportPreviewLocation).IsUnicode(false);

                entity.Property(e => e.ReportUrl).IsUnicode(false);

                entity.Property(e => e.WebvantageImagePath).IsUnicode(false);

                entity.Property(e => e.WebvantageImagePathActive).IsUnicode(false);

                entity.Property(e => e.WebvantageLargeImagePath).IsUnicode(false);

                entity.Property(e => e.WebvantageUrl).IsUnicode(false);
            });

            modelBuilder.Entity<Views.ModuleStructure>(entity =>
            {
                entity.ToView("V_SEC_MODULES_STRUCT");

                entity.Property(e => e.Module).IsUnicode(false);

                entity.Property(e => e.ModuleCode).IsUnicode(false);

                entity.Property(e => e.ModuleId).ValueGeneratedOnAdd();

                entity.Property(e => e.ParentModule).IsUnicode(false);

                entity.Property(e => e.SubParentModule).IsUnicode(false);

                entity.Property(e => e.SubSubParentModule).IsUnicode(false);
            });

            modelBuilder.Entity<Views.UserPermission>(entity =>
            {
                entity.ToView("V_SEC_PERMISSION");

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.Module).IsUnicode(false);

                entity.Property(e => e.ModuleCode).IsUnicode(false);

                entity.Property(e => e.UserCode).IsUnicode(false);
            });

            modelBuilder.Entity<Views.UserUserDefinedReportPermission>(entity =>
            {
                entity.ToView("V_SEC_UDR_PERMISSION");

                entity.Property(e => e.EmployeeCode).IsUnicode(false);

                entity.Property(e => e.UserCode).IsUnicode(false);

                entity.Property(e => e.UserDefinedReportName).IsUnicode(false);
            });

            modelBuilder.Entity<Views.ServerSQLUser>(entity =>
            {
                entity.ToView("V_SERVER_SQLUSER");

                entity.Property(e => e.Type)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<UserFavoriteModule>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Tabno, e.Appid })
                    .HasName("PK_WV_USER_QUICK_LAUNCH_APPS_1");

                entity.Property(e => e.Userid).IsUnicode(false);
            });

            modelBuilder.Entity<UserWorkspace>(entity =>
            {
                entity.HasKey(e => e.WorkspaceId)
                    .HasName("PK_WV_USER_WORKSPACES");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.UserCode).IsUnicode(false);

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.WvUserWorkspaces)
                    .HasPrincipalKey(p => p.UserCode)
                    .HasForeignKey(d => d.UserCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WV_USER_WORKSPACE_SEC_USER");
            });

            modelBuilder.Entity<WorkspaceObject>(entity =>
            {
                entity.Property(e => e.ZoneId).IsUnicode(false);

                entity.HasOne(d => d.Workspace)
                    .WithMany(p => p.WvWorkspaceObjects)
                    .HasForeignKey(d => d.WorkspaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WV_WORKSPACE_OBJECT_WV_USER_WORKSPACE");
            });

            modelBuilder.Entity<WorkspaceTemplateDetail>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.WvWorkspaceTmpltDtls)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WV_WORKSPACE_TMPLT_DTL_WV_WORKSPACE_TMPLT_HDR");
            });

            modelBuilder.Entity<WorkspaceTemplate>(entity =>
            {
                entity.HasKey(e => e.TemplateId)
                    .HasName("PK_WV_WORKSPACE_TMPLT");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<WorkspaceTemplateItem>(entity =>
            {
                entity.Property(e => e.ZoneId).IsUnicode(false);

                entity.HasOne(d => d.Workspace)
                    .WithMany(p => p.WvWorkspaceTmpltItems)
                    .HasForeignKey(d => d.WorkspaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WV_WORKSPACE_TMPLT_ITEM_WV_WORKSPACE_TMPLT_DTL");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
