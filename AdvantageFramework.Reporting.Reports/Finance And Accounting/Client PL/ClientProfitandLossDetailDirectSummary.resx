<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="BindingSource.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="$this.ScriptsSource" xml:space="preserve">
    <value>'00 June 2, 2016
Dim cTotalGrossIncome As System.Double = 0 '(GI)
Dim cTotalGrossIncomeCurrent As System.Double = 0 '(GI)
Dim cBilledTotal As System.Double = 0 '(BL)
Dim cBilledTotalCurrent As System.Double = 0 '(BL)
Dim cTotalDirectCosts As System.Double = 0 '(DC)
Dim cTotalDirectCostsCurrent As System.Double = 0 '(DC)
Dim cTotalIncome As System.Double = 0 '(TI)
Dim cTotalIncomeCurrent As System.Double = 0 '(TI)
Dim cOverhead As System.Double = 0 '(OH)
Dim cOverheadCurrent As System.Double = 0 '(OH)
Dim cTotalCost As System.Double = 0 '(TC)
Dim cTotalCostCurrent As System.Double = 0 '(TC)
Dim cIncomeLessOverhead As System.Double = 0 '(NP)
Dim cIncomeLessOverheadCurrent As System.Double = 0 '(NP)
Dim cHours As System.Double = 0 '(HR)
Dim cHoursCurrent As System.Double = 0 '(HR)

'==========YEAR-TO-DATE==========
'GROSS INCOME PCT OF BILLING
Private Sub OnSummaryResetYTDcGIPctBL(ByVal sender As Object, ByVal e As System.EventArgs)
	cBilledTotal = 0
	cTotalGrossIncome = 0
End Sub

Private Sub OnSummaryRowChangedYTDcGIPctBL(ByVal sender As Object, ByVal e As System.EventArgs)
	cBilledTotal += GetCurrentColumnValue("BilledTotal")
	cTotalGrossIncome += GetCurrentColumnValue("TotalGrossIncome")
End Sub

Private Sub OnSummaryGetResultYTDcGIPctBL(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncome &lt;&gt; 0 Then e.Result = cTotalGrossIncome / cBilledTotal Else e.Result = 0
	e.Handled = True
End Sub

'TOTAL DIRECT COSTS PCT OF GROSS INCOME
Private Sub OnSummaryResetYTDcDCPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cTotalDirectCosts = 0
	cTotalGrossIncome = 0
End Sub

Private Sub OnSummaryRowChangedYTDcDCPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cTotalDirectCosts += GetCurrentColumnValue("TotalDirectCosts")
	cTotalGrossIncome = cTotalGrossIncome
End Sub

Private Sub OnSummaryGetResultYTDcDCPctGI(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncome &lt;&gt; 0 Then e.Result = cTotalDirectCosts / cTotalGrossIncome Else e.Result = 0
	e.Handled = True
End Sub

'TOTAL INCOME PCT OF GROSS INCOME
Private Sub OnSummaryResetYTDcTIPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cTotalIncome = 0
	cTotalGrossIncome = 0
End Sub

Private Sub OnSummaryRowChangedYTDcTIPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cTotalIncome += GetCurrentColumnValue("TotalIncome")
	cTotalGrossIncome = cTotalGrossIncome
End Sub

Private Sub OnSummaryGetResultYTDcTIPctGI(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncome &lt;&gt; 0 Then e.Result = cTotalIncome / cTotalGrossIncome Else e.Result = 0
	e.handled = True
End Sub

'OVERHEAD PCT OF GROSS INCOME
Private Sub OnSummaryResetYTDcOHPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cOverhead = 0
	cTotalGrossIncome = 0
End Sub

Private Sub OnSummaryRowChangedYTDcOHPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cOverhead += GetCurrentColumnValue("Overhead")
	cTotalGrossIncome = cTotalGrossIncome
End Sub

Private Sub OnSummaryGetResultYTDcOHPctGI(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncome &lt;&gt; 0 Then e.Result = cOverhead / cTotalGrossIncome Else e.Result = 0
	e.Handled = True
End Sub

'TOTAL COST PCT OF GROSS INCOME
Private Sub OnSummaryResetYTDcTCPctGI(ByVal sender As object, ByVal e As System.EventArgs)
	cTotalCost = 0
	cTotalGrossIncome = 0
End Sub

Private Sub OnSummaryRowChangedYTDcTCPctGI(ByVal sender As object, ByVal e As System.EventArgs)
	cTotalCost += GetCurrentColumnValue("TotalCost")
	cTotalGrossIncome = cTotalGrossIncome
End Sub

Private Sub OnSummaryGetResultYTDcTCPctGI(ByVal sender As object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncome &lt;&gt; 0 Then e.Result = cTotalCost / cTotalGrossIncome Else e.Result = 0
	e.Handled = True
End Sub

'INCOME LESS OVERHEAD (NET PROFIT) PCT OF GROSS INCOME
Private Sub OnSummaryResetYTDcNPPctGI(ByVal sender As object, ByVal e As System.EventArgs)
	cIncomeLessOverhead = 0
	cTotalGrossIncome = 0
End Sub

Private Sub OnSummaryRowChangedYTDcNPPctGI(ByVal sender As object, ByVal e As System.EventArgs)
	cIncomeLessOverhead += GetCurrentColumnValue("IncomeLessOverhead")
	cTotalGrossIncome = cTotalGrossIncome
End Sub

Private Sub OnSummaryGetResultYTDcNPPctGI(ByVal sender As object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncome &lt;&gt; 0 Then e.Result = cIncomeLessOverhead / cTotalGrossIncome Else e.Result = 0
	e.Handled = True
End Sub

'GROSS INCOME AVERAGE HOURLY RATE
Private Sub OnSummaryResetYTDcHRRateGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cHours = 0
	cTotalGrossIncome = 0
End Sub

Private Sub OnSummaryRowChangedYTDcHRRateGI(ByVal sender As object, ByVal e As System.EventArgs)
	cHours += GetCurrentColumnValue("Hours")
	cTotalGrossIncome = cTotalGrossIncome
End Sub

Private Sub OnSummaryGetResultYTDcHRRateGI(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cHours &lt;&gt; 0 Then e.Result = cTotalGrossIncome / cHours Else e.result = 0
	e.Handled = True
End Sub

'==========CURRENT==========
'GROSS INCOME PCT OF BILLING
Private Sub OnSummaryResetCURRENTcGIPctBL(ByVal sender As Object, ByVal e As System.EventArgs)
	cBilledTotalCurrent = 0
	cTotalGrossIncomeCurrent = 0
End Sub

Private Sub OnSummaryRowChangedCURRENTcGIPctBL(ByVal sender As Object, ByVal e As System.EventArgs)
	cBilledTotalCurrent += GetCurrentColumnValue("BilledTotalCurrent")
	cTotalGrossIncomeCurrent += GetCurrentColumnValue("TotalGrossIncomeCurrent")
End Sub

Private Sub OnSummaryGetResultCURRENTcGIPctBL(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncomeCurrent &lt;&gt; 0 Then e.Result = cTotalGrossIncomeCurrent / cBilledTotalCurrent Else e.Result = 0
	e.Handled = True
End Sub

'TOTAL DIRECT COSTS PCT OF GROSS INCOME
Private Sub OnSummaryResetCURRENTcDCPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cTotalDirectCostsCurrent = 0
	cTotalGrossIncomeCurrent = 0
End Sub

Private Sub OnSummaryRowChangedCURRENTcDCPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cTotalDirectCostsCurrent += GetCurrentColumnValue("TotalDirectCostsCurrent")
	cTotalGrossIncomeCurrent = cTotalGrossIncomeCurrent
End Sub

Private Sub OnSummaryGetResultCURRENTcDCPctGI(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncomeCurrent &lt;&gt; 0 Then e.Result = cTotalDirectCostsCurrent / cTotalGrossIncomeCurrent Else e.Result = 0
	e.Handled = True
End Sub

'TOTAL INCOME PCT OF GROSS INCOME
Private Sub OnSummaryResetCURRENTcTIPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cTotalIncomeCurrent = 0
	cTotalGrossIncomeCurrent = 0
End Sub

Private Sub OnSummaryRowChangedCURRENTcTIPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cTotalIncomeCurrent += GetCurrentColumnValue("TotalIncomeCurrent")
	cTotalGrossIncomeCurrent = cTotalGrossIncomeCurrent
End Sub

Private Sub OnSummaryGetResultCURRENTcTIPctGI(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncomeCurrent &lt;&gt; 0 Then e.Result = cTotalIncomeCurrent / cTotalGrossIncomeCurrent Else e.Result = 0
	e.handled = True
End Sub

'OVERHEAD PCT OF GROSS INCOME
Private Sub OnSummaryResetCURRENTcOHPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cOverheadCurrent = 0
	cTotalGrossIncomeCurrent = 0
End Sub

Private Sub OnSummaryRowChangedCURRENTcOHPctGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cOverheadCurrent += GetCurrentColumnValue("OverheadCurrent")
	cTotalGrossIncomeCurrent = cTotalGrossIncomeCurrent
End Sub

Private Sub OnSummaryGetResultCURRENTcOHPctGI(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncomeCurrent &lt;&gt; 0 Then e.Result = cOverheadCurrent / cTotalGrossIncomeCurrent Else e.Result = 0
	e.Handled = True
End Sub

'TOTAL COST PCT OF GROSS INCOME
Private Sub OnSummaryResetCURRENTcTCPctGI(ByVal sender As object, ByVal e As System.EventArgs)
	cTotalCostCurrent = 0
	cTotalGrossIncomeCurrent = 0
End Sub

Private Sub OnSummaryRowChangedCURRENTcTCPctGI(ByVal sender As object, ByVal e As System.EventArgs)
	cTotalCostCurrent += GetCurrentColumnValue("TotalCostCurrent")
	cTotalGrossIncomeCurrent = cTotalGrossIncomeCurrent
End Sub

Private Sub OnSummaryGetResultCURRENTcTCPctGI(ByVal sender As object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncomeCurrent &lt;&gt; 0 Then e.Result = cTotalCostCurrent / cTotalGrossIncomeCurrent Else e.Result = 0
	e.Handled = True
End Sub

'INCOME LESS OVERHEAD (NET PROFIT) PCT OF GROSS INCOME
Private Sub OnSummaryResetCURRENTcNPPctGI(ByVal sender As object, ByVal e As System.EventArgs)
	cIncomeLessOverheadCurrent = 0
	cTotalGrossIncomeCurrent = 0
End Sub

Private Sub OnSummaryRowChangedCURRENTcNPPctGI(ByVal sender As object, ByVal e As System.EventArgs)
	cIncomeLessOverheadCurrent += GetCurrentColumnValue("IncomeLessOverheadCurrent")
	cTotalGrossIncomeCurrent = cTotalGrossIncomeCurrent
End Sub

Private Sub OnSummaryGetResultCURRENTcNPPctGI(ByVal sender As object, ByVal e As SummaryGetResultEventArgs)
	If cTotalGrossIncomeCurrent &lt;&gt; 0 Then e.Result = cIncomeLessOverheadCurrent / cTotalGrossIncomeCurrent Else e.Result = 0
	e.Handled = True
End Sub

'GROSS INCOME AVERAGE HOURLY RATE
Private Sub OnSummaryResetCURRENTcHRRateGI(ByVal sender As Object, ByVal e As System.EventArgs)
	cHoursCurrent = 0
	cTotalGrossIncomeCurrent = 0
End Sub

Private Sub OnSummaryRowChangedCURRENTcHRRateGI(ByVal sender As object, ByVal e As System.EventArgs)
	cHoursCurrent += GetCurrentColumnValue("HoursCurrent")
	cTotalGrossIncomeCurrent = cTotalGrossIncomeCurrent
End Sub

Private Sub OnSummaryGetResultCURRENTcHRRateGI(ByVal sender As Object, ByVal e As SummaryGetResultEventArgs)
	If cHoursCurrent &lt;&gt; 0 Then e.Result = cTotalGrossIncomeCurrent / cHoursCurrent Else e.result = 0
	e.Handled = True
End Sub</value>
  </data>
</root>