Namespace WinForm.Presentation.Controls

    Public Class AccountsPayableControl

        Public Event SelectedTabChanged()
        Public Event NonClientInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event NonClientSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event TotalsChanged(ByVal Balance As Decimal)
        Public Event ProductionInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event ProductionSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event VendorInvoiceChanged()
        Public Event CollapseVendor(ByVal VendorCode As String)
        Public Event MagazineInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event MagazineSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event NewspaperInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event NewspaperSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event InternetInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event InternetSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event OutOfHomeInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event OutOfHomeSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event RadioInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event RadioSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event RadioDetailInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event RadioDetailSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event TVInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event TVSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event TVDetailInitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs)
        Public Event TVDetailSelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs)
        Public Event SelectedDocumentChanged()
        Public Event SelectedExpenseReceiptChanged()
        Public Event Saved(ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable)

#Region " Constants "

        Protected Const _GLSourceCode As String = "AP"
        Protected Const _CommentWidth As Integer = 400

#End Region

#Region " Enum "

        Public Enum MultipleOrderTypes
            Internet
            Magazine
            Newspaper
            OutOfHome
            Radio
            Television
        End Enum

        Private Enum HeaderModifyState
            NoRestrictions = 1
            PaymentOrPostPeriodClosed = 2
            SelectedForCheckwriting = 3
            IntercompanyTransactionsExist = 4
        End Enum

#End Region

#Region " Variables "

        Private _FormSettingsLoaded As Boolean = False
        Private _Session As AdvantageFramework.Security.Session = Nothing
        Private _SelectedTab As DevComponents.DotNetBar.TabItem = Nothing
        Private _ID As Integer = Nothing
        Private _SequenceNumber As Integer = Nothing
        Private _IsLoading As Boolean = False
        Private _CalculatingDiscount As Boolean = False
        Private _IsSetVendorMode As Boolean = False
        Private _NonClientNewRowInitialized As Boolean = False
        Private _BatchDate As Date = Nothing
        Private _IsDeleted As Boolean = False
        Private _ShowGrossColumns As Boolean = False
        Private _IsClearing As Boolean = False
        Private _CanUserPrint As Boolean = False
        Private _CanUserUpdate As Boolean = False
        Private _CanUserAdd As Boolean = False
        Private _HasAccessToDocuments As Boolean = False
        Private _HeaderModifyState As HeaderModifyState = HeaderModifyState.NoRestrictions
        Private _SelectDocumentsTab As Boolean = False
        Private _DocumentSubLevel As AdvantageFramework.Database.Entities.DocumentSubLevel = Database.Entities.DocumentSubLevel.Default
        Private _IsMultiCurrencyEnabled As Boolean = False
        Private _CurrencyCodeHome As String = Nothing
        Private _DefaultTemplateID As Integer = 0
        Private _DefaultStateID As Integer = 0
        'Private _ShowHomeColumns As Boolean = False
        Private _CanUserCustom1 As Boolean = False
        Private _IsQuickbooksEnabled As Boolean = False
        Private _IsLinkedInQuickbooks As Boolean = False
        Private _QBVendorID As String = Nothing
        Private _APDetails As Generic.List(Of AdvantageFramework.Quickbooks.Classes.APDetail) = Nothing

#End Region

#Region " Properties "

        Public ReadOnly Property SelectedTab() As DevComponents.DotNetBar.TabItem
            Get
                SelectedTab = _SelectedTab
            End Get
        End Property
        Public ReadOnly Property IsDeleted() As Boolean
            Get
                IsDeleted = _IsDeleted
            End Get
        End Property
        Public ReadOnly Property DataGridViewNonClientDistributionDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewNonClientDistributionDetailsHasASelectedRow = DataGridViewNonClient_DistributionDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewNonClientDistributionDetailsHasOnlyOneSelectedRow() As Boolean
            Get
                DataGridViewNonClientDistributionDetailsHasOnlyOneSelectedRow = DataGridViewNonClient_DistributionDetails.HasOnlyOneSelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewNonClientDistributionDetailIsNewItemRow() As Boolean
            Get
                DataGridViewNonClientDistributionDetailIsNewItemRow = DataGridViewNonClient_DistributionDetails.CurrentView.IsNewItemRow(DataGridViewNonClient_DistributionDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewProductionDistributionDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewProductionDistributionDetailsHasASelectedRow = DataGridViewProduction_DistributionDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewProductionDistributionDetailsHasOnlyOneSelectedRow() As Boolean
            Get
                DataGridViewProductionDistributionDetailsHasOnlyOneSelectedRow = DataGridViewProduction_DistributionDetails.HasOnlyOneSelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewProductionDistributionDetailIsNewItemRow() As Boolean
            Get
                DataGridViewProductionDistributionDetailIsNewItemRow = DataGridViewProduction_DistributionDetails.CurrentView.IsNewItemRow(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewMagazineDistributionDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewMagazineDistributionDetailsHasASelectedRow = DataGridViewMagazine_DistributionDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewMagazineDistributionDetailsHasOnlyOneSelectedRow() As Boolean
            Get
                DataGridViewMagazineDistributionDetailsHasOnlyOneSelectedRow = DataGridViewMagazine_DistributionDetails.HasOnlyOneSelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewMagazineDistributionDetailIsNewItemRow() As Boolean
            Get
                DataGridViewMagazineDistributionDetailIsNewItemRow = DataGridViewMagazine_DistributionDetails.CurrentView.IsNewItemRow(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewNewspaperDistributionDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewNewspaperDistributionDetailsHasASelectedRow = DataGridViewNewspaper_DistributionDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewNewspaperDistributionDetailsHasOnlyOneSelectedRow() As Boolean
            Get
                DataGridViewNewspaperDistributionDetailsHasOnlyOneSelectedRow = DataGridViewNewspaper_DistributionDetails.HasOnlyOneSelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewNewspaperDistributionDetailIsNewItemRow() As Boolean
            Get
                DataGridViewNewspaperDistributionDetailIsNewItemRow = DataGridViewNewspaper_DistributionDetails.CurrentView.IsNewItemRow(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewInternetDistributionDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewInternetDistributionDetailsHasASelectedRow = DataGridViewInternet_DistributionDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewInternetDistributionDetailsHasOnlyOneSelectedRow() As Boolean
            Get
                DataGridViewInternetDistributionDetailsHasOnlyOneSelectedRow = DataGridViewInternet_DistributionDetails.HasOnlyOneSelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewInternetDistributionDetailIsNewItemRow() As Boolean
            Get
                DataGridViewInternetDistributionDetailIsNewItemRow = DataGridViewInternet_DistributionDetails.CurrentView.IsNewItemRow(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewOutOfHomeDistributionDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewOutOfHomeDistributionDetailsHasASelectedRow = DataGridViewOutOfHome_DistributionDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewOutOfHomeDistributionDetailsHasOnlyOneSelectedRow() As Boolean
            Get
                DataGridViewOutOfHomeDistributionDetailsHasOnlyOneSelectedRow = DataGridViewOutOfHome_DistributionDetails.HasOnlyOneSelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewOutOfHomeDistributionDetailIsNewItemRow() As Boolean
            Get
                DataGridViewOutOfHomeDistributionDetailIsNewItemRow = DataGridViewOutOfHome_DistributionDetails.CurrentView.IsNewItemRow(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewRadioDistributionDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewRadioDistributionDetailsHasASelectedRow = DataGridViewRadio_DistributionDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewRadioDistributionDetailsHasOnlyOneSelectedRow() As Boolean
            Get
                DataGridViewRadioDistributionDetailsHasOnlyOneSelectedRow = DataGridViewRadio_DistributionDetails.HasOnlyOneSelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewRadioDistributionDetailIsNewItemRow() As Boolean
            Get
                DataGridViewRadioDistributionDetailIsNewItemRow = DataGridViewRadio_DistributionDetails.CurrentView.IsNewItemRow(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewTVDistributionDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewTVDistributionDetailsHasASelectedRow = DataGridViewTV_DistributionDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewTVDistributionDetailsHasOnlyOneSelectedRow() As Boolean
            Get
                DataGridViewTVDistributionDetailsHasOnlyOneSelectedRow = DataGridViewTV_DistributionDetails.HasOnlyOneSelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewTVDistributionDetailIsNewItemRow() As Boolean
            Get
                DataGridViewTVDistributionDetailIsNewItemRow = DataGridViewTV_DistributionDetails.CurrentView.IsNewItemRow(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewRadioBroadcastDetailsIsNewItemRow() As Boolean
            Get
                DataGridViewRadioBroadcastDetailsIsNewItemRow = DataGridViewRadioDetails_BroadcastDetails.CurrentView.IsNewItemRow(DataGridViewRadioDetails_BroadcastDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewRadioBroadcastDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewRadioBroadcastDetailsHasASelectedRow = DataGridViewRadioDetails_BroadcastDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DataGridViewTVBroadcastDetailsIsNewItemRow() As Boolean
            Get
                DataGridViewTVBroadcastDetailsIsNewItemRow = DataGridViewTVDetails_BroadcastDetails.CurrentView.IsNewItemRow(DataGridViewTVDetails_BroadcastDetails.CurrentView.FocusedRowHandle)
            End Get
        End Property
        Public ReadOnly Property DataGridViewTVBroadcastDetailsHasASelectedRow() As Boolean
            Get
                DataGridViewTVBroadcastDetailsHasASelectedRow = DataGridViewTVDetails_BroadcastDetails.HasASelectedRow
            End Get
        End Property
        Public ReadOnly Property DocumentManager() As AdvantageFramework.WinForm.Presentation.Controls.DocumentManagerControl
            Get
                DocumentManager = DocumentManagerControlDocuments_APDocuments
            End Get
        End Property
        Public ReadOnly Property CanPrint As Boolean
            Get
                CanPrint = _CanUserPrint
            End Get
        End Property
        Public ReadOnly Property CanUpdate As Boolean
            Get
                CanUpdate = _CanUserUpdate
            End Get
        End Property
        Public ReadOnly Property CanAdd As Boolean
            Get
                CanAdd = _CanUserAdd
            End Get
        End Property
        Public ReadOnly Property HasAccessToDocuments As Boolean
            Get
                HasAccessToDocuments = _HasAccessToDocuments
            End Get
        End Property
        Public ReadOnly Property ProductionPONumber As Nullable(Of Integer)
            Get
                If DataGridViewProduction_DistributionDetails.HasOnlyOneSelectedRow Then
                    ProductionPONumber = DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).PONumber
                End If
            End Get
        End Property
        Public ReadOnly Property ProductionPOLineNumber As Nullable(Of Short)
            Get
                If DataGridViewProduction_DistributionDetails.HasOnlyOneSelectedRow Then
                    ProductionPOLineNumber = DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).PODetailLineNumber
                End If
            End Get
        End Property
        Public ReadOnly Property NonClientPONumber As Nullable(Of Integer)
            Get
                If DataGridViewNonClient_DistributionDetails.HasOnlyOneSelectedRow Then
                    NonClientPONumber = DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(DataGridViewNonClient_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail).PONumber
                End If
            End Get
        End Property
        Public ReadOnly Property NonClientPOLineNumber As Nullable(Of Short)
            Get
                If DataGridViewNonClient_DistributionDetails.HasOnlyOneSelectedRow Then
                    NonClientPOLineNumber = DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(DataGridViewNonClient_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail).PODetailLineNumber
                End If
            End Get
        End Property
        Public ReadOnly Property IsLoading As Boolean
            Get
                IsLoading = _IsLoading
            End Get
        End Property
        Public ReadOnly Property IsClearing As Boolean
            Get
                IsClearing = _IsClearing
            End Get
        End Property
        Public ReadOnly Property AccountPayableID As Integer
            Get
                AccountPayableID = _ID
            End Get
        End Property
        Public ReadOnly Property SequenceNumber As Integer
            Get
                SequenceNumber = _SequenceNumber
            End Get
        End Property
        Public ReadOnly Property ShowHomeCurrency As Boolean
            Get
                ShowHomeCurrency = _IsMultiCurrencyEnabled AndAlso (_CurrencyCodeHome <> SearchableComboBoxControl_CurrencyCode.GetSelectedValue)
            End Get
        End Property
        Public WriteOnly Property ShowGross As Boolean
            Set(value As Boolean)
                _ShowGrossColumns = value
                SetVisibleGridColumns(_SelectedTab)
            End Set
        End Property
        'Public WriteOnly Property ShowHome As Boolean
        '    Set(value As Boolean)
        '        _ShowHomeColumns = value
        '        SetVisibleGridColumns(_SelectedTab)
        '    End Set
        'End Property
        Public ReadOnly Property IsQuickbooksEnabled() As Boolean
            Get
                IsQuickbooksEnabled = _IsQuickbooksEnabled
            End Get
        End Property
        Public ReadOnly Property IsLinkedInQuickbooks() As Boolean
            Get
                IsLinkedInQuickbooks = _IsLinkedInQuickbooks
            End Get
        End Property
        Public ReadOnly Property SendToQuickbooksEnabled() As Boolean
            Get
                SendToQuickbooksEnabled = Me.IsQuickbooksEnabled AndAlso Me.IsLinkedInQuickbooks = False AndAlso String.IsNullOrWhiteSpace(_QBVendorID) = False
            End Get
        End Property
        Public ReadOnly Property UpdateQuickbooksEnabled() As Boolean
            Get
                UpdateQuickbooksEnabled = Me.IsQuickbooksEnabled AndAlso Me.IsLinkedInQuickbooks
            End Get
        End Property

#End Region

#Region " Methods "

        Public Sub New()

            ' This call is required by the designer.
            InitializeComponent()

            Me.DoubleBuffered = True

        End Sub
        Protected Overrides Sub LoadFormSettings(ByVal Form As System.Windows.Forms.Form)

            Dim PropertyDescriptorsList As Generic.List(Of System.ComponentModel.PropertyDescriptor) = Nothing

            If _FormSettingsLoaded = False AndAlso Me.Name <> "" AndAlso
                    Form.Controls.Find(Me.Name, True).Any Then

                If TypeOf Form Is AdvantageFramework.WinForm.Presentation.BaseForms.Interfaces.IBaseForm Then

                    If DirectCast(Form, AdvantageFramework.WinForm.Presentation.BaseForms.Interfaces.IBaseForm).SuperValidator IsNot Nothing Then

                        DirectCast(Form, AdvantageFramework.WinForm.Presentation.BaseForms.Interfaces.IBaseForm).SuperValidator.SetValidator1(Me, New AdvantageFramework.WinForm.Presentation.Controls.Validation.CustomValidatorControl)

                    End If

                    _Session = DirectCast(Form, AdvantageFramework.WinForm.Presentation.BaseForms.Interfaces.IBaseForm).Session

                    If _Session IsNot Nothing Then

                        _CanUserCustom1 = AdvantageFramework.Security.CanUserCustom1InModule(_Session, AdvantageFramework.Security.Modules.Maintenance_Accounting_Vendor)

                        _CanUserPrint = AdvantageFramework.Security.CanUserPrintInModule(_Session, AdvantageFramework.Security.Modules.FinanceAccounting_AccountsPayable)
                        _CanUserUpdate = AdvantageFramework.Security.CanUserUpdateInModule(_Session, AdvantageFramework.Security.Modules.FinanceAccounting_AccountsPayable)
                        _CanUserAdd = AdvantageFramework.Security.CanUserAddInModule(_Session, AdvantageFramework.Security.Modules.FinanceAccounting_AccountsPayable)
                        _HasAccessToDocuments = AdvantageFramework.Security.DoesUserHaveAccessToModule(_Session, AdvantageFramework.Security.Modules.Desktop_DocumentManagerLevels_APInvoice)

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            Using DataContext = New AdvantageFramework.Database.DataContext(_Session.ConnectionString, _Session.UserCode)

                                PropertyDescriptorsList = System.ComponentModel.TypeDescriptor.GetProperties(GetType(AdvantageFramework.Database.Entities.AccountPayable)).OfType(Of System.ComponentModel.PropertyDescriptor).ToList

                                DbContext.Database.Connection.Open()

                                _IsQuickbooksEnabled = AdvantageFramework.Quickbooks.IsQuickBooksEnabled(DbContext)

                                RefreshControl(DbContext, DataContext)

                                SearchableComboBoxControl_CurrencyCode.ReadOnly = True
                                SearchableComboBoxControl_CurrencyCode.Properties.DisplayMember = "Code"

                                TextBoxDropDownControl_Note.ReadOnly = True

                                'SearchableComboBoxControl_Vendor.DataSource = AdvantageFramework.Database.Procedures.Vendor.LoadAllActive(DbContext)

                                'If SearchableComboBoxControl_Vendor.DataSource.Count = 0 Then

                                '    SearchableComboBoxControl_Vendor.DataSource = Nothing

                                'End If

                                SearchableComboBoxControl_Vendor.AddInactiveItemsOnSelectedValue = True
                                SearchableComboBoxControl_Vendor.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.VendorCode)

                                'If AdvantageFramework.Database.Procedures.Agency.APFlagVendor1099(DbContext) = 0 Then

                                '    CheckBoxControl_1099Invoice.Visible = False

                                'End If

                                SearchableComboBoxControl_InvoiceNumber.SetRequired(False)
                                TextBoxControl_InvoiceNumber.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.InvoiceNumber)
                                TextBoxControl_Description.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.InvoiceDescription)

                                NumericInputControl_InvoiceAmount.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.InvoiceAmount)
                                NumericInputControl_InvoiceAmount.Properties.MinValue = NumericInputControl_InvoiceAmount.Properties.MaxValue * -1

                                NumericInputControl_SalesTax.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.SalesTaxAmount)
                                NumericInputControl_SalesTax.Properties.MinValue = NumericInputControl_SalesTax.Properties.MaxValue * -1

                                NumericInputControl_Discount.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.InvoiceAmount)
                                NumericInputControl_Discount.SetPropertySettings("Discount Amount", True)
                                NumericInputControl_Discount.Properties.MinValue = NumericInputControl_Discount.Properties.MaxValue * -1

                                NumericInputControl_DiscountPercentage.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.DiscountPercentage)
                                NumericInputControl_DiscountPercentage.Properties.MinValue = 0
                                NumericInputControl_DiscountPercentage.Properties.MaxValue = 100

                                ComboBoxControl_APAccount.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.GLACode)

                                'If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) OrElse AdvantageFramework.Database.Procedures.Agency.IsInterCompanyTransactionsEnabled(DbContext) Then

                                '    ComboBoxControl_Office.Visible = True
                                '    LabelControl_Office.Visible = True
                                '    ComboBoxControl_Office.SetRequired(True)
                                '    ComboBoxControl_Office.DataSource = AdvantageFramework.Database.Procedures.Office.LoadAllActive(DbContext)

                                'Else

                                '    ComboBoxControl_Office.Visible = False
                                '    LabelControl_Office.Visible = False
                                '    ComboBoxControl_Office.SetRequired(False)
                                '    ComboBoxControl_APAccount.DataSource = (From Entity In AdvantageFramework.Database.Procedures.GeneralLedgerAccount.LoadAllActive(DbContext, True, True) _
                                '                                            Where Entity.Type = "5").ToList

                                'End If

                                'If AdvantageFramework.Database.Procedures.Agency.APLockGLAccountCode(DbContext) = 1 Then

                                '    ComboBoxControl_APAccount.ReadOnly = True
                                '    ComboBoxControl_APAccount.Tag = "READONLY"

                                'Else

                                '    ComboBoxControl_APAccount.Enabled = True

                                'End If

                                'ComboBoxControl_Terms.DataSource = AdvantageFramework.Database.Procedures.VendorTerm.LoadAllActive(DbContext)
                                ComboBoxControl_Terms.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.VendorTermCode)

                                'ComboBoxControl_PostPeriod.DataSource = AdvantageFramework.Database.Procedures.PostPeriod.LoadAllActiveAPPostPeriods(DbContext)
                                ComboBoxControl_PostPeriod.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.PostPeriodCode)

                                'ComboBoxControl_PostPeriodForMod.DataSource = AdvantageFramework.Database.Procedures.PostPeriod.LoadAllActiveAPPostPeriods(DbContext)
                                ComboBoxControl_PostPeriodForMod.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.PostPeriodCode)

                                DateTimePickerControl_EntryDate.ReadOnly = True

                                DateTimePickerControl_DateToPay.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.PaidDate)
                                DateTimePickerControl_DateToPay.SetRequired(True)

                                DateTimePickerControl_InvoiceDate.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.InvoiceDate)
                                DateTimePickerControl_InvoiceDate.SetRequired(True)

                                NumericInputControl_VendorTaxableAmount.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.VendorTaxableAmount)

                                NumericInputControl_VendorCurrencyRate.Visible = _IsMultiCurrencyEnabled
                                NumericInputControl_VendorCurrencyRate.SetPropertySettings(PropertyDescriptorsList, AdvantageFramework.Database.Entities.AccountPayable.Properties.CurrencyRate)
                                NumericInputControl_VendorCurrencyRate.SetRequired(_IsMultiCurrencyEnabled)
                                NumericInputControl_VendorCurrencyRate.Properties.AllowNullInput = If(_IsMultiCurrencyEnabled, DevExpress.Utils.DefaultBoolean.False, DevExpress.Utils.DefaultBoolean.True)

                                NumericInputControl_ExchangeAmount.SetFormat("n2")

                                _DefaultTemplateID = AdvantageFramework.Agency.GetOptionAPApprovalAlertDefaultTemplate(DbContext)
                                _DefaultStateID = AdvantageFramework.Agency.GetOptionAPApprovalAlertDefaultState(DbContext)

                                DbContext.Database.Connection.Close()

                            End Using

                        End Using

                        SearchableComboBoxControl_Vendor.ByPassUserEntryChanged = True
                        SearchableComboBoxControl_InvoiceNumber.ByPassUserEntryChanged = True

                        TextBoxControl_PayTo.ByPassUserEntryChanged = True
                        Address3LineControlControl_Address.ByPassUserEntryChanged = True

                        DateTimePickerControl_EntryDate.ByPassUserEntryChanged = True

                        NumericInputControl_InvoiceTotal.SetFormat("n2")
                        NumericInputControl_TotalDue.SetFormat("n2")
                        NumericInputControl_HomeCurrencyAmount.SetFormat("n2")

                        NumericInputInvoiceInformation_TotalPaidToVendor.ByPassUserEntryChanged = True
                        NumericInputInvoiceInformation_TotalPaidToVendor.SetFormat("n2")

                        NumericInputDistribution_Clients.ByPassUserEntryChanged = True
                        NumericInputDistribution_NonClient.ByPassUserEntryChanged = True
                        NumericInputDistribution_Balance.ByPassUserEntryChanged = True
                        NumericInputDistribution_ForeignTotal.ByPassUserEntryChanged = True

                        NumericInputDistribution_Clients.SetFormat("n2")
                        NumericInputDistribution_NonClient.SetFormat("n2")
                        NumericInputDistribution_Balance.SetFormat("n2")
                        NumericInputDistribution_ForeignTotal.SetFormat("n2")

                        TextBoxControl_MessageDetails.ByPassUserEntryChanged = True

                        DataGridViewTransactions_GLTransactions.MultiSelect = False
                        DataGridViewChecksWritten_ChecksWritten.MultiSelect = False

                        DataGridViewTransactions_GLTransactions.OptionsView.ShowFooter = False
                        DataGridViewChecksWritten_ChecksWritten.OptionsView.ShowFooter = False

                        DataGridViewNonClient_DistributionDetails.AutoloadRepositoryDatasource = False
                        DataGridViewProduction_DistributionDetails.AutoloadRepositoryDatasource = False
                        DataGridViewMagazine_DistributionDetails.AutoloadRepositoryDatasource = False
                        DataGridViewNewspaper_DistributionDetails.AutoloadRepositoryDatasource = False
                        DataGridViewInternet_DistributionDetails.AutoloadRepositoryDatasource = False
                        DataGridViewOutOfHome_DistributionDetails.AutoloadRepositoryDatasource = False
                        DataGridViewRadio_DistributionDetails.AutoloadRepositoryDatasource = False
                        DataGridViewTV_DistributionDetails.AutoloadRepositoryDatasource = False

                        DataGridViewProduction_DistributionDetails.AutoFilterLookupColumns = False 'do not change this
                        DataGridViewInternet_DistributionDetails.AutoFilterLookupColumns = True
                        DataGridViewMagazine_DistributionDetails.AutoFilterLookupColumns = True
                        DataGridViewNewspaper_DistributionDetails.AutoFilterLookupColumns = True
                        DataGridViewOutOfHome_DistributionDetails.AutoFilterLookupColumns = True
                        DataGridViewRadio_DistributionDetails.AutoFilterLookupColumns = True
                        DataGridViewTV_DistributionDetails.AutoFilterLookupColumns = True

                        If Not Me.FindForm.Modal Then

                            SearchableComboBoxControl_Vendor.SetRequired(False)
                            SearchableComboBoxControl_InvoiceNumber.SetRequired(False)

                        End If

                    End If

                End If

                _FormSettingsLoaded = True

            End If

        End Sub
        Private Function CalculateTotalAmount() As Boolean

            Dim AccountPayableGLDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail) = Nothing
            Dim TotalNonClient As Decimal = 0, TotalNonClientForeign As Decimal = 0
            Dim TotalProduction As Decimal = 0, TotalProductionForeign As Decimal = 0
            Dim AccountPayableProductionDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail) = Nothing
            Dim AccountPayableMagazineDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) = Nothing
            Dim AccountPayableNewspaperDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) = Nothing
            Dim AccountPayableInternetDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) = Nothing
            Dim AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim TotalClientsPaid As Decimal = 0
            Dim TotalMagazine As Decimal = 0, TotalMagazineForeign As Decimal = 0
            Dim TotalNewspaper As Decimal = 0, TotalNewspaperForeign As Decimal = 0
            Dim TotalInternet As Decimal = 0, TotalInternetForeign As Decimal = 0
            Dim TotalOutOfHome As Decimal = 0, TotalOutOfHomeForeign As Decimal = 0
            Dim TotalRadio As Decimal = 0, TotalRadioForeign As Decimal = 0
            Dim TotalTV As Decimal = 0, TotalTVForeign As Decimal = 0
            Dim AccountPayableGLDistributions As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableGLDistribution) = Nothing
            Dim AccountPayableProductions As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableProduction) = Nothing
            Dim AccountPayableInternets As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableInternet) = Nothing
            Dim AccountPayableMagazines As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableMagazine) = Nothing
            Dim AccountPayableNewspapers As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableNewspaper) = Nothing
            Dim AccountPayableOutOfHomes As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableOutOfHome) = Nothing
            Dim AccountPayableRadios As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableRadio) = Nothing
            Dim AccountPayableTVs As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableTV) = Nothing

            If Not _IsLoading AndAlso Me.FindForm IsNot Nothing AndAlso Not _IsClearing Then

                NumericInputControl_InvoiceTotal.EditValue = NumericInputControl_InvoiceAmount.EditValue + NumericInputControl_SalesTax.EditValue

                If _IsMultiCurrencyEnabled Then

                    NumericInputControl_HomeCurrencyAmount.EditValue = CDec(FormatNumber(NumericInputControl_InvoiceAmount.GetValue * NumericInputControl_VendorCurrencyRate.GetValue, 2)) +
                            CDec(FormatNumber(NumericInputControl_SalesTax.GetValue * NumericInputControl_VendorCurrencyRate.GetValue, 2))

                    NumericInputControl_ExchangeAmount.EditValue = FormatNumber(NumericInputControl_InvoiceTotal.GetValue - NumericInputControl_HomeCurrencyAmount.GetValue, 2)

                End If

                NumericInputDistribution_NonClient.EditValue = 0

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    'Non-Client tab
                    If Me.FindForm.Modal OrElse TabItemAPDetails_NonClientTab.Tag = True Then

                        AccountPayableGLDistributionDetailList = DataGridViewNonClient_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)().ToList
                        TotalNonClient = AccountPayableGLDistributionDetailList.Where(Function(ap) ap.IsDeleted = False).Sum(Function(ap) ap.Amount)
                        TotalNonClientForeign = AccountPayableGLDistributionDetailList.Where(Function(ap) ap.IsDeleted = False).Sum(Function(ap) ap.ForeignAmount)

                    ElseIf _ID <> 0 Then

                        AccountPayableGLDistributions = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.Load(DbContext)
                                                         Where Entity.AccountPayableID = _ID AndAlso
                                                               (Entity.IsDeleted Is Nothing OrElse
                                                                Entity.IsDeleted = 0)
                                                         Select Entity).ToList

                        TotalNonClient = AccountPayableGLDistributions.Sum(Function(Entity) Entity.Amount)
                        TotalNonClientForeign = FormatNumber(TotalNonClient / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        If AccountPayableGLDistributions.Any Then

                            TabItemAPDetails_NonClientTab.Text = "Non-Client *"

                        Else

                            TabItemAPDetails_NonClientTab.Text = "Non-Client"

                        End If

                    End If

                    'Production tab
                    If Me.FindForm.Modal OrElse TabItemAPDetails_ProductionTab.Tag = True Then

                        AccountPayableProductionDistributionDetailList = DataGridViewProduction_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)().ToList
                        TotalProduction = AccountPayableProductionDistributionDetailList.Where(Function(app) app.IsDeleted = False).Sum(Function(app) app.Disbursed.GetValueOrDefault(0))
                        TotalProductionForeign = AccountPayableProductionDistributionDetailList.Where(Function(app) app.IsDeleted = False).Sum(Function(app) app.ForeignDisbursed)

                    ElseIf _ID <> 0 Then

                        AccountPayableProductions = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableProduction.Load(DbContext)
                                                     Where Entity.AccountPayableID = _ID AndAlso
                                                           (Entity.IsDeleted Is Nothing OrElse
                                                            Entity.IsDeleted = 0)
                                                     Select Entity).ToList

                        TotalProduction = AccountPayableProductions.Sum(Function(Entity) Entity.ExtendedAmount.GetValueOrDefault(0) + Entity.ExtendedNonResaleTax.GetValueOrDefault(0))
                        TotalProductionForeign = FormatNumber(TotalProduction / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        If AccountPayableProductions.Any Then

                            TabItemAPDetails_ProductionTab.Text = "Production *"

                        Else

                            TabItemAPDetails_ProductionTab.Text = "Production"

                        End If

                    End If

                    'Magazine tab
                    If Me.FindForm.Modal OrElse TabItemAPDetails_MagazineTab.Tag = True Then

                        AccountPayableMagazineDistributionDetailList = DataGridViewMagazine_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)().ToList
                        TotalMagazine = AccountPayableMagazineDistributionDetailList.Where(Function(app) app.IsDeleted = False).Sum(Function(app) app.DisbursedAmount.GetValueOrDefault(0))
                        TotalMagazineForeign = AccountPayableMagazineDistributionDetailList.Where(Function(app) app.IsDeleted = False).Sum(Function(app) app.ForeignDisbursedAmount)

                    ElseIf _ID <> 0 Then

                        AccountPayableMagazines = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableMagazine.Load(DbContext)
                                                   Where Entity.AccountPayableID = _ID AndAlso
                                                         (Entity.IsDeleted Is Nothing OrElse
                                                          Entity.IsDeleted = 0)
                                                   Select Entity).ToList

                        TotalMagazine = AccountPayableMagazines.Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))
                        TotalMagazineForeign = FormatNumber(TotalMagazine / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        If AccountPayableMagazines.Any Then

                            TabItemAPDetails_MagazineTab.Text = "Magazine *"
                            TabItemAPDetails_MagazineTab.Visible = True

                        Else

                            TabItemAPDetails_MagazineTab.Text = "Magazine"

                        End If

                    End If

                    'Newspaper tab
                    If Me.FindForm.Modal OrElse TabItemAPDetails_NewspaperTab.Tag = True Then

                        AccountPayableNewspaperDistributionDetailList = DataGridViewNewspaper_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)().ToList
                        TotalNewspaper = AccountPayableNewspaperDistributionDetailList.Where(Function(apn) apn.IsDeleted = False).Sum(Function(apn) apn.DisbursedAmount.GetValueOrDefault(0))
                        TotalNewspaperForeign = AccountPayableNewspaperDistributionDetailList.Where(Function(apn) apn.IsDeleted = False).Sum(Function(apn) apn.ForeignDisbursedAmount.GetValueOrDefault(0))

                    ElseIf _ID <> 0 Then

                        AccountPayableNewspapers = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableNewspaper.Load(DbContext)
                                                    Where Entity.AccountPayableID = _ID AndAlso
                                                          (Entity.IsDeleted Is Nothing OrElse
                                                           Entity.IsDeleted = 0)
                                                    Select Entity).ToList

                        TotalNewspaper = AccountPayableNewspapers.Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))
                        TotalNewspaperForeign = FormatNumber(TotalNewspaper / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        If AccountPayableNewspapers.Any Then

                            TabItemAPDetails_NewspaperTab.Text = "Newspaper *"
                            TabItemAPDetails_NewspaperTab.Visible = True

                        Else

                            TabItemAPDetails_NewspaperTab.Text = "Newspaper"

                        End If

                    End If

                    'Internet tab
                    If Me.FindForm.Modal OrElse TabItemAPDetails_InternetTab.Tag = True Then

                        AccountPayableInternetDistributionDetailList = DataGridViewInternet_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)().ToList
                        TotalInternet = AccountPayableInternetDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))
                        TotalInternetForeign = AccountPayableInternetDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False).Sum(Function(Entity) Entity.ForeignDisbursedAmount.GetValueOrDefault(0))

                    ElseIf _ID <> 0 Then

                        AccountPayableInternets = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableInternet.Load(DbContext)
                                                   Where Entity.AccountPayableID = _ID AndAlso
                                                         (Entity.IsDeleted Is Nothing OrElse
                                                          Entity.IsDeleted = 0)
                                                   Select Entity).ToList

                        TotalInternet = AccountPayableInternets.Sum(Function(I) I.NetAmount.GetValueOrDefault(0) + I.DiscountAmount.GetValueOrDefault(0) + I.NetCharges.GetValueOrDefault(0) + I.VendorTax.GetValueOrDefault(0))
                        TotalInternetForeign = FormatNumber(TotalInternet / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        If AccountPayableInternets.Any Then

                            TabItemAPDetails_InternetTab.Text = "Internet *"
                            TabItemAPDetails_InternetTab.Visible = True

                        Else

                            TabItemAPDetails_InternetTab.Text = "Internet"

                        End If

                    End If

                    'OutOfHome tab
                    If Me.FindForm.Modal OrElse TabItemAPDetails_OutOfHomeTab.Tag = True Then

                        AccountPayableOutOfHomeDistributionDetailList = DataGridViewOutOfHome_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)().ToList
                        TotalOutOfHome = AccountPayableOutOfHomeDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))
                        TotalOutOfHomeForeign = AccountPayableOutOfHomeDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False).Sum(Function(Entity) Entity.ForeignDisbursedAmount.GetValueOrDefault(0))

                    ElseIf _ID <> 0 Then

                        AccountPayableOutOfHomes = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.Load(DbContext)
                                                    Where Entity.AccountPayableID = _ID AndAlso
                                                          (Entity.IsDeleted Is Nothing OrElse
                                                           Entity.IsDeleted = 0)
                                                    Select Entity).ToList

                        TotalOutOfHome = AccountPayableOutOfHomes.Sum(Function(O) O.NetAmount.GetValueOrDefault(0) + O.DiscountAmount.GetValueOrDefault(0) + O.NetCharges.GetValueOrDefault(0) + O.VendorTax.GetValueOrDefault(0))
                        TotalOutOfHomeForeign = FormatNumber(TotalOutOfHome / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        If AccountPayableOutOfHomes.Any Then

                            TabItemAPDetails_OutOfHomeTab.Text = "Out of Home *"
                            TabItemAPDetails_OutOfHomeTab.Visible = True

                        Else

                            TabItemAPDetails_OutOfHomeTab.Text = "Out of Home"

                        End If

                    End If

                    'Radio tab
                    If Me.FindForm.Modal OrElse TabItemAPDetails_RadioTab.Tag = True Then

                        AccountPayableRadioDistributionDetailList = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)().ToList
                        TotalRadio = AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))
                        TotalRadioForeign = AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False).Sum(Function(Entity) Entity.ForeignDisbursedAmount.GetValueOrDefault(0))

                    ElseIf _ID <> 0 Then

                        AccountPayableRadios = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableRadio.Load(DbContext)
                                                Where Entity.AccountPayableID = _ID AndAlso
                                                      (Entity.IsDeleted Is Nothing OrElse
                                                       Entity.IsDeleted = 0)
                                                Select Entity).ToList

                        TotalRadio = AccountPayableRadios.Sum(Function(R) R.ExtendedNetAmount.GetValueOrDefault(0) + R.DiscountAmount.GetValueOrDefault(0) + R.NetCharges.GetValueOrDefault(0) + R.VendorTax.GetValueOrDefault(0))
                        TotalRadioForeign = FormatNumber(TotalRadio / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        If AccountPayableRadios.Any Then

                            TabItemAPDetails_RadioTab.Text = "Radio *"
                            TabItemAPDetails_RadioTab.Visible = True
                            TabItemAPDetails_RadioDetailsTab.Visible = True

                        Else

                            TabItemAPDetails_RadioTab.Text = "Radio"

                        End If

                    End If

                    'TV tab
                    If Me.FindForm.Modal OrElse TabItemAPDetails_TVTab.Tag = True Then

                        AccountPayableTVDistributionDetailList = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)().ToList
                        TotalTV = AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))
                        TotalTVForeign = AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False).Sum(Function(Entity) Entity.ForeignDisbursedAmount.GetValueOrDefault(0))

                    ElseIf _ID <> 0 Then

                        AccountPayableTVs = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableTV.Load(DbContext)
                                             Where Entity.AccountPayableID = _ID AndAlso
                                                   (Entity.IsDeleted Is Nothing OrElse
                                                    Entity.IsDeleted = 0)
                                             Select Entity).ToList

                        TotalTV = AccountPayableTVs.Sum(Function(T) T.ExtendedNetAmount.GetValueOrDefault(0) + T.DiscountAmount.GetValueOrDefault(0) + T.NetCharges.GetValueOrDefault(0) + T.VendorTax.GetValueOrDefault(0))
                        TotalTVForeign = FormatNumber(TotalTV / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        If AccountPayableTVs.Any Then

                            TabItemAPDetails_TVTab.Text = "TV *"
                            TabItemAPDetails_TVTab.Visible = True
                            TabItemAPDetails_TVDetailsTab.Visible = True

                        Else

                            TabItemAPDetails_TVTab.Text = "TV"

                        End If

                    End If

                    TotalClientsPaid = TotalProduction + TotalMagazine + TotalNewspaper + TotalInternet + TotalOutOfHome + TotalRadio + TotalTV

                    NumericInputDistribution_NonClient.EditValue = TotalNonClient
                    NumericInputDistribution_Clients.EditValue = TotalClientsPaid
                    NumericInputDistribution_Balance.EditValue = FormatNumber(NumericInputControl_InvoiceTotal.EditValue - NumericInputDistribution_Clients.EditValue - NumericInputDistribution_NonClient.EditValue - NumericInputControl_ExchangeAmount.EditValue, 2)
                    NumericInputDistribution_ForeignTotal.EditValue = TotalNonClientForeign + TotalProductionForeign + TotalMagazineForeign + TotalNewspaperForeign + TotalInternetForeign + TotalOutOfHomeForeign + TotalRadioForeign + TotalTVForeign
                    LabelDistribution_ForeignTotal.Text = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Total:"

                    RaiseEvent TotalsChanged(NumericInputDistribution_Balance.EditValue)

                End Using

            End If

            If NumericInputDistribution_Balance.EditValue = 0 Then

                CalculateTotalAmount = True

            Else

                CalculateTotalAmount = False

            End If

        End Function
        Private Sub CalculateCheckAmount()

            NumericInputControl_TotalDue.EditValue = NumericInputControl_InvoiceTotal.EditValue - NumericInputControl_Discount.EditValue

        End Sub
        Private Sub CalculateCurrencyNonClient()

            For Each AccountPayableGLDistributionDetail In DataGridViewNonClient_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)

                AccountPayableGLDistributionDetail.Amount = FormatNumber(AccountPayableGLDistributionDetail.ForeignAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

            Next

        End Sub
        Private Sub CalculateDateToPay()

            Dim VendorTerm As AdvantageFramework.Database.Entities.VendorTerm = Nothing

            If Not _IsLoading AndAlso ComboBoxControl_Terms.HasASelectedValue Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    VendorTerm = AdvantageFramework.Database.Procedures.VendorTerm.LoadByVendorTermCode(DbContext, ComboBoxControl_Terms.GetSelectedValue)

                    If VendorTerm IsNot Nothing Then

                        If DateTimePickerControl_InvoiceDate.Value = #12:00:00 AM# Then

                            DateTimePickerControl_DateToPay.Value = DateAdd(DateInterval.Day, CDbl(VendorTerm.DaysToPay.GetValueOrDefault(0)), CDate(Now.ToShortDateString))

                        Else

                            DateTimePickerControl_DateToPay.Value = DateAdd(DateInterval.Day, CDbl(VendorTerm.DaysToPay.GetValueOrDefault(0)), CDate(DateTimePickerControl_InvoiceDate.Value))

                        End If

                        NumericInputControl_DiscountPercentage.EditValue = VendorTerm.DiscountPercentage.GetValueOrDefault(0)

                        CalculateTotalDiscount()

                    End If

                End Using

            End If

        End Sub
        Private Sub CalculateProductionRowValues(ByRef AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail,
                                                 ByVal CalculateTax As Boolean,
                                                 Optional ByVal BypassMarkupCalculation As Boolean = False)

            If Not BypassMarkupCalculation Then

                AccountPayableProductionDistributionDetail.ExtendedMarkupAmount = FormatNumber(AccountPayableProductionDistributionDetail.ExtendedAmount.GetValueOrDefault(0) *
                                                                                               AccountPayableProductionDistributionDetail.CommissionPercent.GetValueOrDefault(0) / 100, 2)

                'AccountPayableProductionDistributionDetail.ForeignExtendedMarkupAmount = FormatNumber(AccountPayableProductionDistributionDetail.ForeignExtendedAmount *
                '                                                                               AccountPayableProductionDistributionDetail.CommissionPercent.GetValueOrDefault(0) / 100, 2)

            ElseIf AccountPayableProductionDistributionDetail.ExtendedAmount.GetValueOrDefault(0) <> 0 Then

                AccountPayableProductionDistributionDetail.CommissionPercent = FormatNumber(AccountPayableProductionDistributionDetail.ExtendedMarkupAmount.GetValueOrDefault(0) * 100 /
                                                                                            AccountPayableProductionDistributionDetail.ExtendedAmount.GetValueOrDefault(0), 3)

            End If

            If CalculateTax Then

                Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.CalculateTax(DbContext, AccountPayableProductionDistributionDetail.AccountPayableProduction)

                End Using

            End If

            AccountPayableProductionDistributionDetail.ForeignExtendedAmount = FormatNumber(AccountPayableProductionDistributionDetail.ExtendedAmount.GetValueOrDefault(0) / AccountPayableProductionDistributionDetail.CurrencyRate, 2)
            AccountPayableProductionDistributionDetail.ForeignExtendedNonResaleTax = FormatNumber(AccountPayableProductionDistributionDetail.ExtendedNonResaleTax.GetValueOrDefault(0) / AccountPayableProductionDistributionDetail.CurrencyRate, 2)

            If AccountPayableProductionDistributionDetail.Rate.HasValue Then

                AccountPayableProductionDistributionDetail.ForeignRate = FormatNumber(AccountPayableProductionDistributionDetail.Rate.Value / AccountPayableProductionDistributionDetail.CurrencyRate, 3)

            End If

        End Sub
        Private Sub CalculateTotalDiscount()

            _CalculatingDiscount = True

            If NumericInputControl_DiscountPercentage.EditValue <> 0 Then

                NumericInputControl_Discount.EditValue = FormatNumber((NumericInputControl_InvoiceAmount.EditValue) * NumericInputControl_DiscountPercentage.EditValue / 100, 2)

            Else

                NumericInputControl_Discount.EditValue = 0

            End If

            _CalculatingDiscount = False

        End Sub
        Public Function CheckForUnsavedChanges() As Boolean

            Dim IsOkay As Boolean = True
            Dim VendorCode As String = Nothing
            Dim ErrorMessage As String = Nothing

            If _CanUserUpdate AndAlso AdvantageFramework.WinForm.Presentation.Controls.CheckUserEntryChangedSetting(Me) AndAlso NumericInputDistribution_Balance.EditValue = 0 Then

                If AdvantageFramework.WinForm.MessageBox.Show("You have unsaved changes. Do you want to save your changes?", WinForm.MessageBox.MessageBoxButtons.YesNo) = WinForm.MessageBox.DialogResults.Yes Then

                    IsOkay = ValidateControl(ErrorMessage)

                    If IsOkay Then

                        Me.ShowWaitForm("Processing...")

                        If Me.FindForm.Modal = True Then

                            Try

                                IsOkay = Insert(VendorCode, Nothing, Nothing, _BatchDate)

                                If IsOkay Then

                                    RaiseEvent CollapseVendor(VendorCode)

                                End If

                            Catch ex As Exception
                                IsOkay = False
                                AdvantageFramework.WinForm.MessageBox.Show(ex.Message)
                            End Try

                        Else

                            Try

                                IsOkay = Save(Nothing)

                                If IsOkay Then

                                    RaiseEvent CollapseVendor(SearchableComboBoxControl_Vendor.GetSelectedValue)

                                End If

                            Catch ex As Exception
                                IsOkay = False
                                AdvantageFramework.WinForm.MessageBox.Show(ex.Message)
                            End Try

                        End If

                        Me.CloseWaitForm()

                    Else

                        AdvantageFramework.WinForm.MessageBox.Show(ErrorMessage)

                    End If

                Else

                    AdvantageFramework.WinForm.Presentation.Controls.ClearUserEntryChangedSetting(Me)

                End If

            ElseIf _CanUserUpdate AndAlso AdvantageFramework.WinForm.Presentation.Controls.CheckUserEntryChangedSetting(Me) AndAlso NumericInputDistribution_Balance.EditValue <> 0 Then

                If AdvantageFramework.WinForm.MessageBox.Show("You have unsaved changes, but the amount disbursed and the invoice amount are not equal." & vbCrLf & "Discard changes?", MessageBox.MessageBoxButtons.YesNo, "Save not allowed", Windows.Forms.MessageBoxIcon.Question, Windows.Forms.MessageBoxDefaultButton.Button2) = MessageBox.DialogResults.No Then

                    IsOkay = False

                Else

                    RefreshInvoice(_ID, _SequenceNumber, _BatchDate)

                End If

            End If

            CheckForUnsavedChanges = IsOkay

        End Function
        Private Sub ClearTabText()

            TabItemAPDetails_NonClientTab.Text = "Non-Client"
            TabItemAPDetails_ProductionTab.Text = "Production"
            TabItemAPDetails_NewspaperTab.Text = "Newspaper"
            TabItemAPDetails_MagazineTab.Text = "Magazine"
            TabItemAPDetails_RadioTab.Text = "Radio"
            TabItemAPDetails_TVTab.Text = "TV"
            TabItemAPDetails_OutOfHomeTab.Text = "Out of Home"
            TabItemAPDetails_InternetTab.Text = "Internet"

        End Sub
        Private Sub ClearInternetRow(ByVal RowHandle As Integer, ByVal AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)

            AccountPayableInternetDistributionDetail.StartDate = Nothing
            AccountPayableInternetDistributionDetail.EndDate = Nothing
            AccountPayableInternetDistributionDetail.Impressions = Nothing
            AccountPayableInternetDistributionDetail.Rate = Nothing
            AccountPayableInternetDistributionDetail.GrossAmount = Nothing
            AccountPayableInternetDistributionDetail.NetAmount = Nothing
            AccountPayableInternetDistributionDetail.NetCharges = Nothing
            AccountPayableInternetDistributionDetail.DiscountAmount = Nothing
            AccountPayableInternetDistributionDetail.VendorTax = Nothing
            AccountPayableInternetDistributionDetail.PreviouslyPosted = 0
            AccountPayableInternetDistributionDetail.OrderNetAmount = 0
            AccountPayableInternetDistributionDetail.OrderNetBalance = 0
            AccountPayableInternetDistributionDetail.SalesTaxCode = Nothing
            AccountPayableInternetDistributionDetail.OfficeCode = Nothing
            AccountPayableInternetDistributionDetail.GLACode = ""
            AccountPayableInternetDistributionDetail.NewApprovalStatus = Nothing
            AccountPayableInternetDistributionDetail.NewApprovalComments = Nothing
            AccountPayableInternetDistributionDetail.CostType = Nothing

            DataGridViewInternet_DistributionDetails.CurrentView.RefreshRow(RowHandle)

            CalculateTotalAmount()

        End Sub
        Private Sub ClearMagazineRow(ByVal RowHandle As Integer, ByVal AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)

            AccountPayableMagazineDistributionDetail.InsertionDate = Nothing
            AccountPayableMagazineDistributionDetail.GrossAmount = Nothing
            AccountPayableMagazineDistributionDetail.NetAmount = Nothing
            AccountPayableMagazineDistributionDetail.BleedGrossAmount = Nothing
            AccountPayableMagazineDistributionDetail.BleedNetAmount = Nothing
            AccountPayableMagazineDistributionDetail.PositionGrossAmount = Nothing
            AccountPayableMagazineDistributionDetail.PositionNetAmount = Nothing
            AccountPayableMagazineDistributionDetail.PremiumGrossAmount = Nothing
            AccountPayableMagazineDistributionDetail.PremiumNetAmount = Nothing
            AccountPayableMagazineDistributionDetail.ColorGrossAmount = Nothing
            AccountPayableMagazineDistributionDetail.ColorNetAmount = Nothing
            AccountPayableMagazineDistributionDetail.NetCharges = Nothing
            AccountPayableMagazineDistributionDetail.DiscountLN = Nothing
            AccountPayableMagazineDistributionDetail.VendorTax = Nothing
            AccountPayableMagazineDistributionDetail.DisbursedAmount = Nothing
            AccountPayableMagazineDistributionDetail.PreviouslyPosted = 0
            AccountPayableMagazineDistributionDetail.OrderNetAmount = 0
            AccountPayableMagazineDistributionDetail.OrderNetBalance = 0
            AccountPayableMagazineDistributionDetail.SalesTaxCode = Nothing
            AccountPayableMagazineDistributionDetail.OfficeCode = Nothing
            AccountPayableMagazineDistributionDetail.GLACode = ""
            AccountPayableMagazineDistributionDetail.NewApprovalStatus = Nothing
            AccountPayableMagazineDistributionDetail.NewApprovalComments = Nothing

            DataGridViewMagazine_DistributionDetails.CurrentView.RefreshRow(RowHandle)

            CalculateTotalAmount()

        End Sub
        Private Sub ClearNewspaperRow(ByVal RowHandle As Integer, ByVal AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)

            AccountPayableNewspaperDistributionDetail.InsertionDate = Nothing
            AccountPayableNewspaperDistributionDetail.PrintLines = Nothing
            AccountPayableNewspaperDistributionDetail.Rate = Nothing
            AccountPayableNewspaperDistributionDetail.GrossAmount = Nothing
            AccountPayableNewspaperDistributionDetail.NetAmount = Nothing
            AccountPayableNewspaperDistributionDetail.NetCharges = Nothing
            AccountPayableNewspaperDistributionDetail.DiscountLN = Nothing
            AccountPayableNewspaperDistributionDetail.VendorTax = Nothing
            AccountPayableNewspaperDistributionDetail.DisbursedAmount = Nothing
            AccountPayableNewspaperDistributionDetail.PreviouslyPosted = 0
            AccountPayableNewspaperDistributionDetail.OrderNetAmount = 0
            AccountPayableNewspaperDistributionDetail.OrderNetBalance = 0
            AccountPayableNewspaperDistributionDetail.SalesTaxCode = Nothing
            AccountPayableNewspaperDistributionDetail.OfficeCode = Nothing
            AccountPayableNewspaperDistributionDetail.GLACode = ""
            AccountPayableNewspaperDistributionDetail.NewApprovalStatus = Nothing
            AccountPayableNewspaperDistributionDetail.NewApprovalComments = Nothing
            AccountPayableNewspaperDistributionDetail.CostType = Nothing

            DataGridViewNewspaper_DistributionDetails.CurrentView.RefreshRow(RowHandle)

            CalculateTotalAmount()

        End Sub
        Private Sub ClearOutOfHomeRow(RowHandle As Integer, ByVal AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)

            AccountPayableOutOfHomeDistributionDetail.PostDate = Nothing
            AccountPayableOutOfHomeDistributionDetail.GrossAmount = 0
            AccountPayableOutOfHomeDistributionDetail.NetAmount = 0
            AccountPayableOutOfHomeDistributionDetail.NetCharges = 0
            AccountPayableOutOfHomeDistributionDetail.DiscountAmount = 0
            AccountPayableOutOfHomeDistributionDetail.VendorTax = 0
            AccountPayableOutOfHomeDistributionDetail.PreviouslyPosted = 0
            AccountPayableOutOfHomeDistributionDetail.OrderNetAmount = 0
            AccountPayableOutOfHomeDistributionDetail.OrderNetBalance = 0
            AccountPayableOutOfHomeDistributionDetail.SalesTaxCode = Nothing
            AccountPayableOutOfHomeDistributionDetail.OfficeCode = Nothing
            AccountPayableOutOfHomeDistributionDetail.GLACode = ""
            AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus = Nothing
            AccountPayableOutOfHomeDistributionDetail.NewApprovalComments = Nothing

            DataGridViewOutOfHome_DistributionDetails.CurrentView.RefreshRow(RowHandle)

            CalculateTotalAmount()

        End Sub
        Private Sub ClearRadioRow(ByVal RowHandle As Integer, ByVal AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

            AccountPayableRadioDistributionDetail.BroadcastMonth = Nothing
            AccountPayableRadioDistributionDetail.BroadcastYear = Nothing
            AccountPayableRadioDistributionDetail.TotalSpots = Nothing
            AccountPayableRadioDistributionDetail.OrderDate = Nothing
            AccountPayableRadioDistributionDetail.GrossAmount = Nothing
            AccountPayableRadioDistributionDetail.ExtendedNetAmount = Nothing
            AccountPayableRadioDistributionDetail.NetCharges = Nothing
            AccountPayableRadioDistributionDetail.DiscountAmount = Nothing
            AccountPayableRadioDistributionDetail.VendorTax = Nothing
            AccountPayableRadioDistributionDetail.PreviouslyPosted = 0
            AccountPayableRadioDistributionDetail.OrderNetAmount = 0
            AccountPayableRadioDistributionDetail.OrderNetBalance = 0
            AccountPayableRadioDistributionDetail.SalesTaxCode = Nothing
            AccountPayableRadioDistributionDetail.OfficeCode = Nothing
            AccountPayableRadioDistributionDetail.GLACode = Nothing
            AccountPayableRadioDistributionDetail.NewApprovalStatus = Nothing
            AccountPayableRadioDistributionDetail.NewApprovalComments = Nothing

            DataGridViewRadio_DistributionDetails.CurrentView.RefreshRow(RowHandle)

            CalculateTotalAmount()

        End Sub
        Private Sub ClearTVRow(ByVal RowHandle As Integer, ByVal AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

            AccountPayableTVDistributionDetail.BroadcastMonth = Nothing
            AccountPayableTVDistributionDetail.BroadcastYear = Nothing
            AccountPayableTVDistributionDetail.TotalSpots = Nothing
            AccountPayableTVDistributionDetail.OrderDate = Nothing
            AccountPayableTVDistributionDetail.GrossAmount = Nothing
            AccountPayableTVDistributionDetail.ExtendedNetAmount = Nothing
            AccountPayableTVDistributionDetail.NetCharges = Nothing
            AccountPayableTVDistributionDetail.DiscountAmount = Nothing
            AccountPayableTVDistributionDetail.VendorTax = Nothing
            AccountPayableTVDistributionDetail.PreviouslyPosted = 0
            AccountPayableTVDistributionDetail.OrderNetAmount = 0
            AccountPayableTVDistributionDetail.OrderNetBalance = 0
            AccountPayableTVDistributionDetail.SalesTaxCode = Nothing
            AccountPayableTVDistributionDetail.OfficeCode = Nothing
            AccountPayableTVDistributionDetail.GLACode = Nothing
            AccountPayableTVDistributionDetail.NewApprovalStatus = Nothing
            AccountPayableTVDistributionDetail.NewApprovalComments = Nothing

            DataGridViewTV_DistributionDetails.CurrentView.RefreshRow(RowHandle)

            CalculateTotalAmount()

        End Sub
        Private Function CurrencyMatchesHomeCurrency(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal VendorCode As String) As Boolean

            Dim Vendor As AdvantageFramework.Database.Entities.Vendor = Nothing
            Dim MatchesHomeCurrency As Boolean = True

            Vendor = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, VendorCode)

            If Vendor IsNot Nothing Then

                If Not String.IsNullOrWhiteSpace(Vendor.CurrencyCode) Then

                    If _CurrencyCodeHome IsNot Nothing AndAlso _CurrencyCodeHome <> Vendor.CurrencyCode Then

                        MatchesHomeCurrency = False

                    End If

                End If

            Else

                MatchesHomeCurrency = False

            End If

            CurrencyMatchesHomeCurrency = MatchesHomeCurrency

        End Function
        Private Sub EnableDisableOffice()

            If ComboBoxControl_Office.Visible AndAlso _Session IsNot Nothing Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                        If DataGridViewNonClient_DistributionDetails.CurrentView.RowCount = 0 AndAlso
                            DataGridViewProduction_DistributionDetails.CurrentView.RowCount = 0 AndAlso
                            DataGridViewInternet_DistributionDetails.CurrentView.RowCount = 0 AndAlso
                            DataGridViewMagazine_DistributionDetails.CurrentView.RowCount = 0 AndAlso
                            DataGridViewNewspaper_DistributionDetails.CurrentView.RowCount = 0 AndAlso
                            DataGridViewOutOfHome_DistributionDetails.CurrentView.RowCount = 0 AndAlso
                            DataGridViewRadio_DistributionDetails.CurrentView.RowCount = 0 AndAlso
                            DataGridViewTV_DistributionDetails.CurrentView.RowCount = 0 Then

                            ComboBoxControl_Office.ReadOnly = False

                        Else

                            ComboBoxControl_Office.ReadOnly = True

                        End If

                    End If

                End Using

            End If

        End Sub
        Private Sub EnableGrids(ByVal Enabled As Boolean)

            If Enabled Then

                DataGridViewProduction_DistributionDetails.OptionsBehavior.Editable = True
                DataGridViewNewspaper_DistributionDetails.OptionsBehavior.Editable = True
                DataGridViewMagazine_DistributionDetails.OptionsBehavior.Editable = True
                DataGridViewRadio_DistributionDetails.OptionsBehavior.Editable = True
                DataGridViewTV_DistributionDetails.OptionsBehavior.Editable = True
                DataGridViewOutOfHome_DistributionDetails.OptionsBehavior.Editable = True
                DataGridViewInternet_DistributionDetails.OptionsBehavior.Editable = True
                DataGridViewNonClient_DistributionDetails.OptionsBehavior.Editable = True

            Else

                DataGridViewProduction_DistributionDetails.OptionsBehavior.Editable = False
                DataGridViewNewspaper_DistributionDetails.OptionsBehavior.Editable = False
                DataGridViewMagazine_DistributionDetails.OptionsBehavior.Editable = False
                DataGridViewRadio_DistributionDetails.OptionsBehavior.Editable = False
                DataGridViewTV_DistributionDetails.OptionsBehavior.Editable = False
                DataGridViewOutOfHome_DistributionDetails.OptionsBehavior.Editable = False
                DataGridViewInternet_DistributionDetails.OptionsBehavior.Editable = False
                DataGridViewNonClient_DistributionDetails.OptionsBehavior.Editable = False

            End If

        End Sub
        Private Sub EnableVendorSearchControls(ByVal Enabled As Boolean)

            TextBoxControl_Description.ReadOnly = Not Enabled
            TextBoxControl_Description.TabStop = Enabled

            DateTimePickerControl_InvoiceDate.ReadOnly = Not Enabled
            DateTimePickerControl_DateToPay.ReadOnly = Not Enabled

            ComboBoxControl_PostPeriod.Enabled = Enabled
            ComboBoxControl_PostPeriodForMod.Enabled = Enabled
            ComboBoxControl_Office.Enabled = Enabled
            ComboBoxControl_Terms.Enabled = Enabled
            ComboBoxControl_APAccount.Enabled = Enabled

            CheckBoxControl_1099Invoice.AutoCheck = Enabled
            CheckBoxControl_1099Invoice.TabStop = Enabled
            CheckBoxControl_OnHold.AutoCheck = Enabled
            CheckBoxControl_OnHold.TabStop = Enabled

            TabControlControl_APDetails.Enabled = Enabled

            NumericInputControl_InvoiceAmount.ReadOnly = Not Enabled

            NumericInputControl_SalesTax.ReadOnly = Not Enabled

            NumericInputControl_DiscountPercentage.ReadOnly = Not Enabled

            NumericInputControl_Discount.ReadOnly = Not Enabled

            NumericInputControl_VendorCurrencyRate.ReadOnly = Not Enabled
            PictureUpdateCurrency_Image.Enabled = Enabled

            CheckBoxControl_VendorTaxEnabled.AutoCheck = Enabled
            CheckBoxControl_VendorTaxEnabled.TabStop = Enabled

            EnableOrDisableActions()

        End Sub
        Private Sub LoadHeaderGLTransactions()

            Dim TransactionList As IEnumerable(Of Object) = Nothing

            DataGridViewTransactions_GLTransactions.DataSource = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                TransactionList = (From APProduction In AdvantageFramework.Database.Procedures.AccountPayableProduction.Load(DbContext).Include("GeneralLedger")
                                   Where APProduction.AccountPayableID = _ID
                                   Select (New With {.Transaction = APProduction.GLTransaction,
                                                     .PostPeriod = APProduction.GeneralLedger.PostPeriodCode,
                                                     .CreatedBy = APProduction.GeneralLedger.UserCode})).Union(
                                   From AP In AdvantageFramework.Database.Procedures.AccountPayable.Load(DbContext).Include("GeneralLedger")
                                   Where AP.ID = _ID
                                   Select (New With {.Transaction = AP.GLTransaction,
                                                     .PostPeriod = AP.GeneralLedger.PostPeriodCode,
                                                     .CreatedBy = AP.GeneralLedger.UserCode})).Union(
                                   From APNonClient In AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.Load(DbContext).Include("GeneralLedger")
                                   Where APNonClient.AccountPayableID = _ID
                                   Select (New With {.Transaction = APNonClient.GLTransaction,
                                                     .PostPeriod = APNonClient.GeneralLedger.PostPeriodCode,
                                                     .CreatedBy = APNonClient.GeneralLedger.UserCode})).Union(
                                   From APInternet In AdvantageFramework.Database.Procedures.AccountPayableInternet.Load(DbContext).Include("GeneralLedger")
                                   Where APInternet.AccountPayableID = _ID
                                   Select (New With {.Transaction = APInternet.GLTransaction,
                                                     .PostPeriod = APInternet.GeneralLedger.PostPeriodCode,
                                                     .CreatedBy = APInternet.GeneralLedger.UserCode})).Union(
                                   From APMagazine In AdvantageFramework.Database.Procedures.AccountPayableMagazine.Load(DbContext).Include("GeneralLedger")
                                   Where APMagazine.AccountPayableID = _ID
                                   Select (New With {.Transaction = APMagazine.GLTransaction,
                                                     .PostPeriod = APMagazine.GeneralLedger.PostPeriodCode,
                                                     .CreatedBy = APMagazine.GeneralLedger.UserCode})).Union(
                                   From APNewspaper In AdvantageFramework.Database.Procedures.AccountPayableNewspaper.Load(DbContext).Include("GeneralLedger")
                                   Where APNewspaper.AccountPayableID = _ID
                                   Select (New With {.Transaction = APNewspaper.GLTransaction,
                                                     .PostPeriod = APNewspaper.GeneralLedger.PostPeriodCode,
                                                     .CreatedBy = APNewspaper.GeneralLedger.UserCode})).Union(
                                   From APOutdoor In AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.Load(DbContext).Include("GeneralLedger")
                                   Where APOutdoor.AccountPayableID = _ID
                                   Select (New With {.Transaction = APOutdoor.GLTransaction,
                                                     .PostPeriod = APOutdoor.GeneralLedger.PostPeriodCode,
                                                     .CreatedBy = APOutdoor.GeneralLedger.UserCode})).Union(
                                   From APRadio In AdvantageFramework.Database.Procedures.AccountPayableRadio.Load(DbContext).Include("GeneralLedger")
                                   Where APRadio.AccountPayableID = _ID
                                   Select (New With {.Transaction = APRadio.GLTransaction,
                                                     .PostPeriod = APRadio.GeneralLedger.PostPeriodCode,
                                                     .CreatedBy = APRadio.GeneralLedger.UserCode})).Union(
                                   From APTV In AdvantageFramework.Database.Procedures.AccountPayableTV.Load(DbContext).Include("GeneralLedger")
                                   Where APTV.AccountPayableID = _ID
                                   Select (New With {.Transaction = APTV.GLTransaction,
                                                     .PostPeriod = APTV.GeneralLedger.PostPeriodCode,
                                                     .CreatedBy = APTV.GeneralLedger.UserCode})).
                                   Select(Function(ALL) New With {ALL.Transaction, ALL.PostPeriod, ALL.CreatedBy}).Where(Function(ALL) ALL.Transaction IsNot Nothing).ToList

            End Using

            DataGridViewTransactions_GLTransactions.DataSource = TransactionList

            DataGridViewTransactions_GLTransactions.CurrentView.BestFitColumns()

            TabItemInvoiceDetails_TransactionsTab.Tag = True

        End Sub
        Private Sub LoadAccountPayableEntity(ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable)

            If AccountPayable IsNot Nothing Then

                AccountPayable.Type = "V"

                If _ID = 0 Then

                    AccountPayable.VendorCode = SearchableComboBoxControl_Vendor.GetSelectedValue
                    AccountPayable.InvoiceNumber = TextBoxControl_InvoiceNumber.Text
                    AccountPayable.CreatedDate = Now

                End If

                If CheckBoxControl_1099Invoice.Checked Then
                    AccountPayable.Is1099Invoice = 1
                Else
                    AccountPayable.Is1099Invoice = 0
                End If

                If CheckBoxControl_OnHold.Checked Then
                    AccountPayable.IsOnHold = 1
                Else
                    AccountPayable.IsOnHold = 0
                End If

                AccountPayable.InvoiceDescription = TextBoxControl_Description.Text

                If ComboBoxControl_Office.HasASelectedValue Then

                    AccountPayable.OfficeCode = ComboBoxControl_Office.GetSelectedValue

                End If

                If ComboBoxControl_Terms.HasASelectedValue Then

                    AccountPayable.VendorTermCode = ComboBoxControl_Terms.GetSelectedValue

                End If

                AccountPayable.GLACode = ComboBoxControl_APAccount.GetSelectedValue
                AccountPayable.PostPeriodCode = ComboBoxControl_PostPeriodForMod.GetSelectedValue

                AccountPayable.InvoiceDate = DateTimePickerControl_InvoiceDate.GetValue
                AccountPayable.PaidDate = DateTimePickerControl_DateToPay.GetValue

                AccountPayable.CreatedByUserCode = _Session.UserCode

                If _IsMultiCurrencyEnabled Then

                    AccountPayable.InvoiceAmount = FormatNumber(NumericInputControl_InvoiceAmount.GetValue * NumericInputControl_VendorCurrencyRate.GetValue, 2)
                    AccountPayable.ShippingAmount = 0
                    AccountPayable.SalesTaxAmount = FormatNumber(NumericInputControl_SalesTax.GetValue * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    If SearchableComboBoxControl_CurrencyCode.GetSelectedValue <> _CurrencyCodeHome Then

                        AccountPayable.CurrencyCode = SearchableComboBoxControl_CurrencyCode.GetSelectedValue
                        AccountPayable.CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

                        AccountPayable.ForeignInvoiceAmount = NumericInputControl_InvoiceAmount.GetValue
                        AccountPayable.ForeignSalesTaxAmount = NumericInputControl_SalesTax.GetValue

                        AccountPayable.ExchangeAmount = NumericInputControl_ExchangeAmount.EditValue

                    End If

                Else

                    AccountPayable.InvoiceAmount = NumericInputControl_InvoiceAmount.EditValue
                    AccountPayable.ShippingAmount = 0
                    AccountPayable.SalesTaxAmount = NumericInputControl_SalesTax.EditValue

                End If

                If NumericInputControl_DiscountPercentage.EditValue IsNot Nothing Then

                    AccountPayable.DiscountPercentage = NumericInputControl_DiscountPercentage.EditValue

                End If

                If CheckBoxControl_VendorTaxEnabled.Checked Then

                    AccountPayable.VendorServiceTaxEnabled = CheckBoxControl_VendorTaxEnabled.Checked
                    AccountPayable.VendorServiceTaxID = SearchableComboBoxControl_VendorTaxCode.GetSelectedValue
                    AccountPayable.VendorTaxableAmount = NumericInputControl_VendorTaxableAmount.EditValue

                Else

                    AccountPayable.VendorServiceTaxEnabled = False
                    AccountPayable.VendorServiceTaxID = Nothing
                    AccountPayable.VendorTaxableAmount = Nothing

                End If

            End If

        End Sub
        Private Sub LoadDocumentsTab()

            'objects
            Dim DocumentLevelSetting As AdvantageFramework.Database.Classes.DocumentLevelSetting = Nothing

            DocumentManagerControlDocuments_APDocuments.ClearControl()

            If _ID <> 0 Then

                DocumentLevelSetting = New AdvantageFramework.Database.Classes.DocumentLevelSetting(AdvantageFramework.Database.Entities.DocumentLevel.AccountPayableInvoice) With {.AccountPayableID = _ID}

                DocumentManagerControlDocuments_APDocuments.Enabled = DocumentManagerControlDocuments_APDocuments.LoadControl(Database.Entities.DocumentLevel.AccountPayableInvoice, DocumentLevelSetting, DocumentManagerControl.Type.Default, Database.Entities.DocumentSubLevel.Default)

            End If

            TabItemAPDetails_DocumentsTab.Tag = True

        End Sub
        Private Sub LoadHeaderChecksWritten()

            If _Session IsNot Nothing Then

                DataGridViewChecksWritten_ChecksWritten.SuspendLayout()

                DataGridViewChecksWritten_ChecksWritten.DataSource = Nothing

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    DataGridViewChecksWritten_ChecksWritten.DataSource = AdvantageFramework.AccountPayable.LoadChecksWritten(DbContext, _ID)

                End Using

                DataGridViewChecksWritten_ChecksWritten.Columns(3).Visible = False
                DataGridViewChecksWritten_ChecksWritten.Columns(4).Visible = False

                DataGridViewChecksWritten_ChecksWritten.CurrentView.BestFitColumns()

                TabItemInvoiceDetails_ChecksWrittenTab.Tag = True

                DataGridViewChecksWritten_ChecksWritten.ResumeLayout()

            End If

        End Sub
        Private Sub AddInternetOrders(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal SelectedOrders As IEnumerable)

            Dim AccountPayableInternetDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) = Nothing
            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing
            Dim InternetOrderDetail As AdvantageFramework.Database.Entities.InternetOrderDetail = Nothing
            Dim OrdersAdded As Boolean = False

            AccountPayableInternetDistributionDetailList = DataGridViewInternet_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)().ToList

            For Each Order As AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableInternetOrders In SelectedOrders

                If AccountPayableInternetDistributionDetailList.Where(Function(Entity) Entity.InternetOrderNumber IsNot Nothing AndAlso Entity.InternetOrderNumber.Value = Order.OrderNumber AndAlso
                                                                                       Entity.InternetDetailLineNumber IsNot Nothing AndAlso Entity.InternetDetailLineNumber = Order.LineNumber).Any = False Then

                    InternetOrderDetail = AdvantageFramework.Database.Procedures.InternetOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, Order.OrderNumber, Order.LineNumber)

                    If InternetOrderDetail IsNot Nothing Then

                        AccountPayableInternetDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail(DbContext, InternetOrderDetail, NumericInputControl_VendorCurrencyRate.GetValue)

                        AccountPayableInternetDistributionDetailList.Add(AccountPayableInternetDistributionDetail)

                        OrdersAdded = True

                    End If

                End If

            Next

            DataGridViewInternet_DistributionDetails.DataSource = AccountPayableInternetDistributionDetailList

            CalculateTotalAmount()

            SetVisibleGridColumns(TabItemAPDetails_InternetTab)

            If OrdersAdded Then

                DataGridViewInternet_DistributionDetails.SetUserEntryChanged()
                DataGridViewInternet_DistributionDetails.ValidateAllRows()

            End If

        End Sub
        Private Sub AddMagazineOrders(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal SelectedOrders As IEnumerable)

            Dim AccountPayableMagazineDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) = Nothing
            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing
            Dim MagazineDetail As AdvantageFramework.Database.Views.MagazineDetail = Nothing
            Dim OrdersAdded As Boolean = False

            AccountPayableMagazineDistributionDetailList = DataGridViewMagazine_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)().ToList

            For Each Order As AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableMagazineOrders In SelectedOrders

                If AccountPayableMagazineDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber.Value = Order.OrderNumber AndAlso
                                                                                       Entity.OrderLineNumber IsNot Nothing AndAlso Entity.OrderLineNumber = Order.LineNumber).Any = False Then

                    MagazineDetail = AdvantageFramework.Database.Procedures.MagazineDetailView.LoadActiveByOrderNumberLineNumber(DbContext, Order.OrderNumber, Order.LineNumber)

                    If MagazineDetail IsNot Nothing Then

                        AccountPayableMagazineDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail(DbContext, MagazineDetail, NumericInputControl_VendorCurrencyRate.GetValue)

                        AccountPayableMagazineDistributionDetailList.Add(AccountPayableMagazineDistributionDetail)

                        OrdersAdded = True

                    End If

                End If

            Next

            DataGridViewMagazine_DistributionDetails.DataSource = AccountPayableMagazineDistributionDetailList

            CalculateTotalAmount()

            SetVisibleGridColumns(TabItemAPDetails_MagazineTab)

            If OrdersAdded Then

                DataGridViewMagazine_DistributionDetails.SetUserEntryChanged()
                DataGridViewMagazine_DistributionDetails.ValidateAllRows()

            End If

        End Sub
        Private Sub AddNewspaperOrders(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal SelectedOrders As IEnumerable)

            Dim AccountPayableNewspaperDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) = Nothing
            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing
            Dim NewspaperDetail As AdvantageFramework.Database.Views.NewspaperDetail = Nothing
            Dim OrdersAdded As Boolean = False

            AccountPayableNewspaperDistributionDetailList = DataGridViewNewspaper_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)().ToList

            For Each Order As AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableNewspaperOrders In SelectedOrders

                If AccountPayableNewspaperDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber.Value = Order.OrderNumber AndAlso
                                                                                        Entity.OrderLineNumber IsNot Nothing AndAlso Entity.OrderLineNumber = Order.LineNumber).Any = False Then

                    NewspaperDetail = AdvantageFramework.Database.Procedures.NewspaperDetailView.LoadActiveByOrderNumberLineNumber(DbContext, Order.OrderNumber, Order.LineNumber)

                    If NewspaperDetail IsNot Nothing Then

                        AccountPayableNewspaperDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail(DbContext, NewspaperDetail, NumericInputControl_VendorCurrencyRate.GetValue)

                        AccountPayableNewspaperDistributionDetailList.Add(AccountPayableNewspaperDistributionDetail)

                        OrdersAdded = True

                    End If

                End If

            Next

            DataGridViewNewspaper_DistributionDetails.DataSource = AccountPayableNewspaperDistributionDetailList

            CalculateTotalAmount()

            SetVisibleGridColumns(TabItemAPDetails_NewspaperTab)

            If OrdersAdded Then

                DataGridViewNewspaper_DistributionDetails.SetUserEntryChanged()
                DataGridViewNewspaper_DistributionDetails.ValidateAllRows()

            End If

        End Sub
        Private Sub AddOutOfHomeOrders(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal SelectedOrders As IEnumerable)

            Dim AccountPayableOutOfHomeDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing
            Dim OutOfHomeOrderDetail As AdvantageFramework.Database.Entities.OutOfHomeOrderDetail = Nothing
            Dim OrdersAdded As Boolean = False

            AccountPayableOutOfHomeDistributionDetailList = DataGridViewOutOfHome_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)().ToList

            For Each Order As AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableOutOfHomeOrders In SelectedOrders

                If AccountPayableOutOfHomeDistributionDetailList.Where(Function(Entity) Entity.OutdoorOrderNumber IsNot Nothing AndAlso Entity.OutdoorOrderNumber.Value = Order.OrderNumber AndAlso
                                                                                        Entity.OutdoorDetailLineNumber IsNot Nothing AndAlso Entity.OutdoorDetailLineNumber = Order.LineNumber).Any = False Then

                    OutOfHomeOrderDetail = AdvantageFramework.Database.Procedures.OutOfHomeOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, Order.OrderNumber, Order.LineNumber)

                    If OutOfHomeOrderDetail IsNot Nothing Then

                        AccountPayableOutOfHomeDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail(DbContext, OutOfHomeOrderDetail, NumericInputControl_VendorCurrencyRate.GetValue)

                        AccountPayableOutOfHomeDistributionDetailList.Add(AccountPayableOutOfHomeDistributionDetail)

                        OrdersAdded = True

                    End If

                End If

            Next

            DataGridViewOutOfHome_DistributionDetails.DataSource = AccountPayableOutOfHomeDistributionDetailList

            CalculateTotalAmount()

            SetVisibleGridColumns(TabItemAPDetails_OutOfHomeTab)

            If OrdersAdded Then

                DataGridViewOutOfHome_DistributionDetails.SetUserEntryChanged()
                DataGridViewOutOfHome_DistributionDetails.ValidateAllRows()

            End If

        End Sub
        Private Sub AddRadioOrders(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal SelectedOrders As IEnumerable)

            Dim AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing
            Dim RadioOrderDetail As AdvantageFramework.Database.Entities.RadioOrderDetail = Nothing
            Dim OrdersAdded As Boolean = False

            AccountPayableRadioDistributionDetailList = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)().ToList

            For Each Order As AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableRadioOrders In SelectedOrders

                If AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber.Value = Order.OrderNumber AndAlso
                                                                                    Entity.OrderLineNumber IsNot Nothing AndAlso Entity.OrderLineNumber = Order.LineNumber).Any = False Then

                    RadioOrderDetail = AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, Order.OrderNumber, Order.LineNumber)

                    If RadioOrderDetail IsNot Nothing Then

                        AccountPayableRadioDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail()

                        AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.SetBaseValues(AccountPayableRadioDistributionDetail, RadioOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                        AccountPayableRadioDistributionDetailList.Add(AccountPayableRadioDistributionDetail)

                        OrdersAdded = True

                    End If

                End If

            Next

            DataGridViewRadio_DistributionDetails.DataSource = AccountPayableRadioDistributionDetailList

            CalculateTotalAmount()

            SetVisibleGridColumns(TabItemAPDetails_RadioTab)

            If OrdersAdded Then

                DataGridViewRadio_DistributionDetails.SetUserEntryChanged()
                DataGridViewRadio_DistributionDetails.ValidateAllRows()

            End If

        End Sub
        Private Sub AddTVOrders(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal SelectedOrders As IEnumerable)

            Dim AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing
            Dim TVOrderDetail As AdvantageFramework.Database.Entities.TVOrderDetail = Nothing

            AccountPayableTVDistributionDetailList = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)().ToList
            Dim OrdersAdded As Boolean = False

            For Each Order As AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableTVOrders In SelectedOrders

                If AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber.Value = Order.OrderNumber AndAlso
                                                                                 Entity.OrderLineNumber IsNot Nothing AndAlso Entity.OrderLineNumber = Order.LineNumber).Any = False Then

                    TVOrderDetail = AdvantageFramework.Database.Procedures.TVOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, Order.OrderNumber, Order.LineNumber)

                    If TVOrderDetail IsNot Nothing Then

                        AccountPayableTVDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail()

                        AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.SetBaseValues(AccountPayableTVDistributionDetail, TVOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                        AccountPayableTVDistributionDetailList.Add(AccountPayableTVDistributionDetail)

                        OrdersAdded = True

                    End If

                End If

            Next

            DataGridViewTV_DistributionDetails.DataSource = AccountPayableTVDistributionDetailList

            CalculateTotalAmount()

            SetVisibleGridColumns(TabItemAPDetails_TVTab)

            If OrdersAdded Then

                DataGridViewTV_DistributionDetails.SetUserEntryChanged()
                DataGridViewTV_DistributionDetails.ValidateAllRows()

            End If

        End Sub
        Public Sub AddMultipleOrders(ByVal MultipleOrderType As MultipleOrderTypes)

            Dim OfficeCode As String = Nothing
            Dim CanContinue As Boolean = True
            Dim AllowVendorNotOnOrder As Boolean = False
            Dim ParameterDictionary As Generic.Dictionary(Of String, Object) = Nothing
            Dim SelectedOrders As IEnumerable = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                    If ComboBoxControl_Office.HasASelectedValue Then

                        OfficeCode = ComboBoxControl_Office.GetSelectedValue

                    Else

                        AdvantageFramework.WinForm.MessageBox.Show("Please select an office.")
                        CanContinue = False

                    End If

                End If

                If CanContinue AndAlso SearchableComboBoxControl_Vendor.HasASelectedValue Then

                    ParameterDictionary = New Generic.Dictionary(Of String, Object)

                    AllowVendorNotOnOrder = AdvantageFramework.Agency.GetOptionAPAllowOrderNotMatchingVendor(DbContext)

                    ParameterDictionary.Add("AllowVendorNotOnOrder", AllowVendorNotOnOrder)
                    ParameterDictionary.Add("VendorCode", SearchableComboBoxControl_Vendor.GetSelectedValue)
                    ParameterDictionary.Add("OfficeCode", OfficeCode)

                    Select Case MultipleOrderType

                        Case MultipleOrderTypes.Internet

                            If AdvantageFramework.WinForm.Presentation.CRUDDialog.ShowFormDialog(CRUDDialog.Type.InternetOrder, True, False, SelectedOrders, True, Nothing, False, False, ParameterDictionary) = Windows.Forms.DialogResult.OK Then

                                AddInternetOrders(DbContext, SelectedOrders)

                            End If

                        Case MultipleOrderTypes.Magazine

                            If AdvantageFramework.WinForm.Presentation.CRUDDialog.ShowFormDialog(CRUDDialog.Type.MagazineOrder, True, False, SelectedOrders, True, Nothing, False, False, ParameterDictionary) = Windows.Forms.DialogResult.OK Then

                                AddMagazineOrders(DbContext, SelectedOrders)

                            End If

                        Case MultipleOrderTypes.Newspaper

                            If AdvantageFramework.WinForm.Presentation.CRUDDialog.ShowFormDialog(CRUDDialog.Type.NewspaperOrder, True, False, SelectedOrders, True, Nothing, False, False, ParameterDictionary) = Windows.Forms.DialogResult.OK Then

                                AddNewspaperOrders(DbContext, SelectedOrders)

                            End If

                        Case MultipleOrderTypes.OutOfHome

                            If AdvantageFramework.WinForm.Presentation.CRUDDialog.ShowFormDialog(CRUDDialog.Type.OutOfHomeOrder, True, False, SelectedOrders, True, Nothing, False, False, ParameterDictionary) = Windows.Forms.DialogResult.OK Then

                                AddOutOfHomeOrders(DbContext, SelectedOrders)

                            End If

                        Case MultipleOrderTypes.Radio

                            If AdvantageFramework.WinForm.Presentation.CRUDDialog.ShowFormDialog(CRUDDialog.Type.RadioOrder, True, False, SelectedOrders, True, Nothing, False, False, ParameterDictionary) = Windows.Forms.DialogResult.OK Then

                                AddRadioOrders(DbContext, SelectedOrders)

                            End If

                        Case MultipleOrderTypes.Television

                            If AdvantageFramework.WinForm.Presentation.CRUDDialog.ShowFormDialog(CRUDDialog.Type.TVOrder, True, False, SelectedOrders, True, Nothing, False, False, ParameterDictionary) = Windows.Forms.DialogResult.OK Then

                                AddTVOrders(DbContext, SelectedOrders)

                            End If


                    End Select

                End If

            End Using

        End Sub
        Private Sub AddNavigatorCustomButton(ByRef DataGridView As AdvantageFramework.WinForm.Presentation.Controls.DataGridView, ByVal ImageCollection As DevExpress.Utils.ImageCollection)

            Dim Button As DevExpress.XtraEditors.NavigatorCustomButton = Nothing

            Button = DataGridView.EmbeddedNavigator.Buttons.CustomButtons.Add()
            Button.Tag = DevExpress.XtraEditors.NavigatorButtonType.Custom
            Button.Enabled = True
            Button.Visible = True
            Button.Hint = "Add Multiple Orders"
            Button.ImageIndex = ImageCollection.Images.Count - 1

        End Sub
        Private Sub LoadModalOptions()

            Dim ImageCollection As DevExpress.Utils.ImageCollection = Nothing

            If Me.FindForm.Modal Then

                DataGridViewNonClient_DistributionDetails.UseEmbeddedNavigator = True
                DataGridViewNonClient_DistributionDetails.CurrentView.EnableDisabledRows = False

                DataGridViewProduction_DistributionDetails.UseEmbeddedNavigator = True
                DataGridViewProduction_DistributionDetails.CurrentView.EnableDisabledRows = False

                DataGridViewNewspaper_DistributionDetails.UseEmbeddedNavigator = True
                DataGridViewNewspaper_DistributionDetails.CurrentView.EnableDisabledRows = False
                ImageCollection = DataGridViewNewspaper_DistributionDetails.EmbeddedNavigator.Buttons.DefaultImageList
                ImageCollection.AddImage(AdvantageFramework.My.Resources.DetailAddImage)
                AddNavigatorCustomButton(DataGridViewNewspaper_DistributionDetails, ImageCollection)

                DataGridViewMagazine_DistributionDetails.UseEmbeddedNavigator = True
                DataGridViewMagazine_DistributionDetails.CurrentView.EnableDisabledRows = False
                ImageCollection = DataGridViewMagazine_DistributionDetails.EmbeddedNavigator.Buttons.DefaultImageList
                ImageCollection.AddImage(AdvantageFramework.My.Resources.DetailAddImage)
                AddNavigatorCustomButton(DataGridViewMagazine_DistributionDetails, ImageCollection)

                DataGridViewRadio_DistributionDetails.UseEmbeddedNavigator = True
                DataGridViewRadio_DistributionDetails.CurrentView.EnableDisabledRows = False
                ImageCollection = DataGridViewRadio_DistributionDetails.EmbeddedNavigator.Buttons.DefaultImageList
                ImageCollection.AddImage(AdvantageFramework.My.Resources.DetailAddImage)
                AddNavigatorCustomButton(DataGridViewRadio_DistributionDetails, ImageCollection)

                DataGridViewRadioDetails_BroadcastDetails.UseEmbeddedNavigator = True
                DataGridViewRadioDetails_BroadcastDetails.CurrentView.EnableDisabledRows = False

                DataGridViewTV_DistributionDetails.UseEmbeddedNavigator = True
                DataGridViewTV_DistributionDetails.CurrentView.EnableDisabledRows = False
                ImageCollection = DataGridViewTV_DistributionDetails.EmbeddedNavigator.Buttons.DefaultImageList
                ImageCollection.AddImage(AdvantageFramework.My.Resources.DetailAddImage)
                AddNavigatorCustomButton(DataGridViewTV_DistributionDetails, ImageCollection)

                DataGridViewTVDetails_BroadcastDetails.UseEmbeddedNavigator = True
                DataGridViewTVDetails_BroadcastDetails.CurrentView.EnableDisabledRows = False

                DataGridViewOutOfHome_DistributionDetails.UseEmbeddedNavigator = True
                DataGridViewOutOfHome_DistributionDetails.CurrentView.EnableDisabledRows = False
                ImageCollection = DataGridViewOutOfHome_DistributionDetails.EmbeddedNavigator.Buttons.DefaultImageList
                ImageCollection.AddImage(AdvantageFramework.My.Resources.DetailAddImage)
                AddNavigatorCustomButton(DataGridViewOutOfHome_DistributionDetails, ImageCollection)

                DataGridViewInternet_DistributionDetails.UseEmbeddedNavigator = True
                DataGridViewInternet_DistributionDetails.CurrentView.EnableDisabledRows = False
                ImageCollection = DataGridViewInternet_DistributionDetails.EmbeddedNavigator.Buttons.DefaultImageList
                ImageCollection.AddImage(AdvantageFramework.My.Resources.DetailAddImage)
                AddNavigatorCustomButton(DataGridViewInternet_DistributionDetails, ImageCollection)

            Else

                DataGridViewNonClient_DistributionDetails.UseEmbeddedNavigator = False
                DataGridViewNonClient_DistributionDetails.CurrentView.EnableDisabledRows = True

                DataGridViewProduction_DistributionDetails.UseEmbeddedNavigator = False
                DataGridViewProduction_DistributionDetails.CurrentView.EnableDisabledRows = True

                DataGridViewNewspaper_DistributionDetails.UseEmbeddedNavigator = False
                DataGridViewNewspaper_DistributionDetails.CurrentView.EnableDisabledRows = True

                DataGridViewMagazine_DistributionDetails.UseEmbeddedNavigator = False
                DataGridViewMagazine_DistributionDetails.CurrentView.EnableDisabledRows = True

                DataGridViewRadio_DistributionDetails.UseEmbeddedNavigator = False
                DataGridViewRadio_DistributionDetails.CurrentView.EnableDisabledRows = True

                DataGridViewRadioDetails_BroadcastDetails.UseEmbeddedNavigator = False
                DataGridViewRadioDetails_BroadcastDetails.CurrentView.EnableDisabledRows = True

                DataGridViewTV_DistributionDetails.UseEmbeddedNavigator = False
                DataGridViewTV_DistributionDetails.CurrentView.EnableDisabledRows = True

                DataGridViewTVDetails_BroadcastDetails.UseEmbeddedNavigator = False
                DataGridViewTVDetails_BroadcastDetails.CurrentView.EnableDisabledRows = True

                DataGridViewOutOfHome_DistributionDetails.UseEmbeddedNavigator = False
                DataGridViewOutOfHome_DistributionDetails.CurrentView.EnableDisabledRows = True

                DataGridViewInternet_DistributionDetails.UseEmbeddedNavigator = False
                DataGridViewInternet_DistributionDetails.CurrentView.EnableDisabledRows = True

            End If

        End Sub
        Private Sub LoadNonClient(ByVal DbContext As AdvantageFramework.Database.DbContext)

            Dim AccountPayableGLDistributionDetail As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail) = Nothing

            DataGridViewNonClient_DistributionDetails.CurrentView.BeginUpdate()

            AccountPayableGLDistributionDetail = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)

            If _ID <> 0 Then

                If _IsDeleted Then

                    AccountPayableGLDistributionDetail.AddRange(From APGLDist In AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.LoadAllByAccountPayableID(DbContext, _ID).ToList
                                                                Order By APGLDist.GLACode
                                                                Select New AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail(DbContext, APGLDist))

                Else

                    AccountPayableGLDistributionDetail.AddRange(From APGLDist In AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.Load(DbContext).ToList
                                                                Where APGLDist.AccountPayableID = _ID AndAlso
                                                                        (APGLDist.ModifyDelete Is Nothing OrElse
                                                                        APGLDist.ModifyDelete = 0)
                                                                Order By APGLDist.GLACode
                                                                Select New AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail(DbContext, APGLDist))

                End If

            End If

            If AccountPayableGLDistributionDetail.Count > 0 Then

                TabItemAPDetails_NonClientTab.Text = "Non-Client *"

            End If

            DataGridViewNonClient_DistributionDetails.ItemDescription = "Accounts Payable GL Distribution Detail(s)"
            DataGridViewNonClient_DistributionDetails.DataSource = AccountPayableGLDistributionDetail

            SetNonClientOfficeCodeVisibility(DbContext)

            TabItemAPDetails_NonClientTab.Tag = True

            SetVisibleGridColumns(TabItemAPDetails_NonClientTab)

            DataGridViewNonClient_DistributionDetails.CurrentView.BestFitColumns()

            If DataGridViewNonClient_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.Comment.ToString) IsNot Nothing Then

                DataGridViewNonClient_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.Comment.ToString).Width = _CommentWidth

            End If

            DataGridViewNonClient_DistributionDetails.ClearChanged()

            DataGridViewNonClient_DistributionDetails.CurrentView.EndUpdate()

            _SelectedTab = TabItemAPDetails_NonClientTab

            LoadNonClientRepositoryItems()

        End Sub
        Private Sub LoadNonClientRepositoryItems()

            'objects
            Dim SubItemGridLookUpEditControl As AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl = Nothing

            For Each GridColumn In DataGridViewNonClient_DistributionDetails.CurrentView.Columns.OfType(Of DevExpress.XtraGrid.Columns.GridColumn).ToList

                If GridColumn.Visible AndAlso TypeOf GridColumn.ColumnEdit Is AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl Then

                    Try

                        SubItemGridLookUpEditControl = DirectCast(GridColumn.ColumnEdit, AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl)

                    Catch ex As Exception
                        SubItemGridLookUpEditControl = Nothing
                    End Try

                    If SubItemGridLookUpEditControl IsNot Nothing Then

                        Select Case GridColumn.FieldName

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.PONumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLPurchaseOrders)

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.PODetailLineNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.PurchaseOrderDetail)

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.OfficeCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Office)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.GLACode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.GeneralLedgerAccount)

                        End Select

                    End If

                End If

            Next

        End Sub
        Private Sub LoadProduction(ByVal DbContext As AdvantageFramework.Database.DbContext)

            Dim AccountPayableProductionDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail) = Nothing
            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing

            DataGridViewProduction_DistributionDetails.CurrentView.BeginUpdate()

            AccountPayableProductionDistributionDetails = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)

            If _ID <> 0 Then

                If _IsDeleted Then

                    AccountPayableProductionDistributionDetails.AddRange(From APP In AdvantageFramework.Database.Procedures.AccountPayableProduction.LoadAllByAccountPayableID(DbContext, _ID).Include("[Function]").ToList
                                                                         Order By APP.JobNumber Ascending, APP.JobComponentNumber Descending
                                                                         Select New AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail(DbContext, APP, _Session))

                Else

                    AccountPayableProductionDistributionDetails.AddRange(From APP In AdvantageFramework.Database.Procedures.AccountPayableProduction.LoadActiveByAccountPayableID(DbContext, _ID).Include("[Function]").ToList
                                                                         Order By APP.JobNumber Ascending, APP.JobComponentNumber Descending
                                                                         Select New AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail(DbContext, APP, _Session))

                End If

            End If

            If AccountPayableProductionDistributionDetails.Count > 0 Then

                TabItemAPDetails_ProductionTab.Text = "Production *"

            End If

            DataGridViewProduction_DistributionDetails.ItemDescription = "Accounts Payable Production Distribution Detail(s)"
            DataGridViewProduction_DistributionDetails.DataSource = AccountPayableProductionDistributionDetails

            If Not _IsDeleted AndAlso AdvantageFramework.Database.Procedures.Agency.InvoiceTaxFlag(DbContext) = True Then

                For Each AccountPayableProductionDistributionDetail In AccountPayableProductionDistributionDetails

                    If AccountPayableProductionDistributionDetail.IsResaleTax.GetValueOrDefault(0) = 1 Then

                        AccountPayableProductionDistributionDetail.ClearSalesTax()

                    End If

                Next

            End If

            For RowHandle As Integer = 0 To DataGridViewProduction_DistributionDetails.CurrentView.RowCount - 1

                AccountPayableProductionDistributionDetail = DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)
                AccountPayableProductionDistributionDetail.DbContext = DbContext

                If AccountPayableProductionDistributionDetail.AccountPayableProduction.IsAdvanceBilling = 1 OrElse
                        AccountPayableProductionDistributionDetail.AccountPayableProduction.Job.IsOpen = 0 OrElse
                        AccountPayableProductionDistributionDetail.AccountPayableProduction.BillingCommandCenterID IsNot Nothing Then

                    DataGridViewProduction_DistributionDetails.CurrentView.DisableRow(DataGridViewProduction_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandle), AdvantageFramework.WinForm.Presentation.Controls.Classes.DisabledRow.RowType.Readonly)

                    AccountPayableProductionDistributionDetail.ValidateEntity(Nothing)

                ElseIf AccountPayableProductionDistributionDetail.AccountPayableProduction.AccountReceivableInvoiceNumber IsNot Nothing Then

                    AccountPayableProductionDistributionDetail.ValidateEntity(Nothing)

                End If

            Next

            TabItemAPDetails_ProductionTab.Tag = True

            SetProductionColumnHeaders()

            SetVisibleGridColumns(TabItemAPDetails_ProductionTab)

            DataGridViewProduction_DistributionDetails.CurrentView.BestFitColumns()

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Comment.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Comment.ToString).Width = _CommentWidth

            End If

            DataGridViewProduction_DistributionDetails.ClearChanged()

            DataGridViewProduction_DistributionDetails.CurrentView.EndUpdate()

            _SelectedTab = TabItemAPDetails_ProductionTab

            LoadProductionRepositoryItems()

        End Sub
        Private Sub LoadProductionRepositoryItems()

            'objects
            Dim SubItemGridLookUpEditControl As AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl = Nothing

            For Each GridColumn In DataGridViewProduction_DistributionDetails.CurrentView.Columns.OfType(Of DevExpress.XtraGrid.Columns.GridColumn).ToList

                If GridColumn.Visible AndAlso TypeOf GridColumn.ColumnEdit Is AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl Then

                    Try

                        SubItemGridLookUpEditControl = DirectCast(GridColumn.ColumnEdit, AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl)

                    Catch ex As Exception
                        SubItemGridLookUpEditControl = Nothing
                    End Try

                    If SubItemGridLookUpEditControl IsNot Nothing Then

                        Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            Select Case GridColumn.FieldName

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.PONumber.ToString

                                    SubItemGridLookUpEditControl.DataSource = AdvantageFramework.AccountPayable.GetOpenPurchaseOrders(DbContext, DbContext.UserCode, SearchableComboBoxControl_Vendor.GetSelectedValue, False)

                                    GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.PODetailLineNumber.ToString

                                    SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.PurchaseOrderDetail)

                                    GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ClientCode.ToString

                                    SubItemGridLookUpEditControl.DataSource = AdvantageFramework.Database.Procedures.Client.LoadAllActive(DbContext).ToList

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.DivisionCode.ToString

                                    SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Division)

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ProductCode.ToString

                                    SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Product)

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.FunctionCode.ToString

                                    SubItemGridLookUpEditControl.DataSource = AdvantageFramework.Database.Procedures.Function.LoadForSubItemGridLookupEditActiveByType(DbContext, "V")

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.JobNumber.ToString

                                    SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Job)

                                    GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.JobComponentNumber.ToString

                                    SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.JobComponent)

                                    GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.SalesTaxCode.ToString

                                    SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.SalesTax)

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.GLACode.ToString,
                                        AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.GLADescription.ToString

                                    SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.GeneralLedgerAccount)

                                Case AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.OfficeCode.ToString

                                    SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Office)

                            End Select

                        End Using

                    End If

                End If

                If GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.FunctionDescription.ToString Then

                    GridColumn.OptionsColumn.AllowFocus = False

                End If

            Next

        End Sub
        Private Sub LoadNewspaper(ByVal DbContext As AdvantageFramework.Database.DbContext)

            Dim AccountPayableNewspaperDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) = Nothing
            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing

            DataGridViewNewspaper_DistributionDetails.CurrentView.BeginUpdate()

            AccountPayableNewspaperDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)

            If _ID <> 0 Then

                If _IsDeleted Then

                    AccountPayableNewspaperDistributionDetailList.AddRange(From APN In AdvantageFramework.Database.Procedures.AccountPayableNewspaper.LoadAllByAccountPayableID(DbContext, _ID).ToList
                                                                           Order By APN.OrderNumber Descending, APN.OrderLineNumber Ascending
                                                                           Select New AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail(DbContext, APN, False))

                Else

                    AccountPayableNewspaperDistributionDetailList.AddRange(From APN In AdvantageFramework.Database.Procedures.AccountPayableNewspaper.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                           Order By APN.OrderNumber Descending, APN.OrderLineNumber Ascending
                                                                           Select New AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail(DbContext, APN, True))

                End If

            End If

            If AccountPayableNewspaperDistributionDetailList.Count > 0 Then

                TabItemAPDetails_NewspaperTab.Text = "Newspaper *"

            End If

            DataGridViewNewspaper_DistributionDetails.ItemDescription = "Accounts Payable Newspaper Distribution Detail(s)"
            DataGridViewNewspaper_DistributionDetails.DataSource = AccountPayableNewspaperDistributionDetailList

            TabItemAPDetails_NewspaperTab.Tag = True

            SetNewspaperColumnHeaders()

            SetVisibleGridColumns(TabItemAPDetails_NewspaperTab)

            DataGridViewNewspaper_DistributionDetails.CurrentView.BestFitColumns()

            DataGridViewNewspaper_DistributionDetails.ClearChanged()

            DataGridViewNewspaper_DistributionDetails.CurrentView.EndUpdate()

            _SelectedTab = TabItemAPDetails_NewspaperTab

            LoadNewspaperRepositoryItems()

        End Sub
        Private Sub LoadMagazine(ByVal DbContext As AdvantageFramework.Database.DbContext)

            Dim AccountPayableMagazineDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) = Nothing
            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing

            DataGridViewMagazine_DistributionDetails.CurrentView.BeginUpdate()

            AccountPayableMagazineDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)

            If _ID <> 0 Then

                If _IsDeleted Then

                    AccountPayableMagazineDistributionDetailList.AddRange(From APM In AdvantageFramework.Database.Procedures.AccountPayableMagazine.LoadAllByAccountPayableID(DbContext, _ID).ToList
                                                                          Order By APM.OrderNumber Descending, APM.OrderLineNumber Ascending
                                                                          Select New AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail(DbContext, APM, False))

                Else

                    AccountPayableMagazineDistributionDetailList.AddRange(From APM In AdvantageFramework.Database.Procedures.AccountPayableMagazine.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                          Order By APM.OrderNumber Descending, APM.OrderLineNumber Ascending
                                                                          Select New AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail(DbContext, APM, True))

                End If

            End If

            If AccountPayableMagazineDistributionDetailList.Count > 0 Then

                TabItemAPDetails_MagazineTab.Text = "Magazine *"

            End If

            DataGridViewMagazine_DistributionDetails.ItemDescription = "Accounts Payable Magazine Distribution Detail(s)"
            DataGridViewMagazine_DistributionDetails.DataSource = AccountPayableMagazineDistributionDetailList

            TabItemAPDetails_MagazineTab.Tag = True

            SetMagazineColumnHeaders()

            SetVisibleGridColumns(TabItemAPDetails_MagazineTab)

            DataGridViewMagazine_DistributionDetails.CurrentView.BestFitColumns()

            DataGridViewMagazine_DistributionDetails.ClearChanged()

            DataGridViewMagazine_DistributionDetails.CurrentView.EndUpdate()

            _SelectedTab = TabItemAPDetails_MagazineTab

            LoadMagazineRepositoryItems()

        End Sub
        Private Sub LoadMagazineRepositoryItems()

            'objects
            Dim SubItemGridLookUpEditControl As AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl = Nothing

            For Each GridColumn In DataGridViewMagazine_DistributionDetails.CurrentView.Columns.OfType(Of DevExpress.XtraGrid.Columns.GridColumn).ToList

                If GridColumn.Visible AndAlso TypeOf GridColumn.ColumnEdit Is AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl Then

                    Try

                        SubItemGridLookUpEditControl = DirectCast(GridColumn.ColumnEdit, AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl)

                    Catch ex As Exception
                        SubItemGridLookUpEditControl = Nothing
                    End Try

                    If SubItemGridLookUpEditControl IsNot Nothing Then

                        Select Case GridColumn.FieldName

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ClientCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Client)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DivisionCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Division)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ProductCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Product)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableMagazineOrders)
                                SubItemGridLookUpEditControl.ValueMember = "OrderNumber"

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderLineNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Views.MagazineDetail)

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.SalesTaxCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.SalesTax)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NewApprovalStatus.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly), GetType(Int16))

                        End Select

                    End If

                End If

            Next

        End Sub
        Private Sub LoadNewspaperRepositoryItems()

            'objects
            Dim SubItemGridLookUpEditControl As AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl = Nothing

            For Each GridColumn In DataGridViewNewspaper_DistributionDetails.CurrentView.Columns.OfType(Of DevExpress.XtraGrid.Columns.GridColumn).ToList

                If GridColumn.Visible AndAlso TypeOf GridColumn.ColumnEdit Is AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl Then

                    Try

                        SubItemGridLookUpEditControl = DirectCast(GridColumn.ColumnEdit, AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl)

                    Catch ex As Exception
                        SubItemGridLookUpEditControl = Nothing
                    End Try

                    If SubItemGridLookUpEditControl IsNot Nothing Then

                        Select Case GridColumn.FieldName

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ClientCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Client)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DivisionCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Division)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ProductCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Product)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableNewspaperOrders)
                                SubItemGridLookUpEditControl.ValueMember = "OrderNumber"

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderLineNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Views.NewspaperDetail)

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.SalesTaxCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.SalesTax)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NewApprovalStatus.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly), GetType(Int16))

                        End Select

                    End If

                End If

            Next

        End Sub
        Private Sub LoadRadio(ByVal DbContext As AdvantageFramework.Database.DbContext)

            Dim AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing

            DataGridViewRadio_DistributionDetails.CurrentView.BeginUpdate()

            AccountPayableRadioDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

            If _ID <> 0 Then

                If _IsDeleted Then

                    AccountPayableRadioDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableRadio.LoadAllByAccountPayableID(DbContext, _ID).ToList
                                                                       Order By Entity.OrderNumber Descending, Entity.OrderLineNumber Ascending
                                                                       Select New AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail(DbContext, Entity, False))

                Else

                    AccountPayableRadioDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableRadio.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                       Order By Entity.OrderNumber Descending, Entity.OrderLineNumber Ascending
                                                                       Select New AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail(DbContext, Entity, True))

                End If

            End If

            If AccountPayableRadioDistributionDetailList.Count > 0 Then

                TabItemAPDetails_RadioTab.Text = "Radio *"

            End If

            DataGridViewRadio_DistributionDetails.ItemDescription = "Accounts Payable Radio Distribution Detail(s)"
            DataGridViewRadio_DistributionDetails.DataSource = AccountPayableRadioDistributionDetailList

            TabItemAPDetails_RadioTab.Tag = True

            SetRadioColumnHeaders()

            SetVisibleGridColumns(TabItemAPDetails_RadioTab)

            DataGridViewRadio_DistributionDetails.CurrentView.BestFitColumns()

            DataGridViewRadio_DistributionDetails.ClearChanged()

            DataGridViewRadio_DistributionDetails.CurrentView.EndUpdate()

            _SelectedTab = TabItemAPDetails_RadioTab

            LoadRadioRepositoryItems()

        End Sub
        Private Sub LoadRadioRepositoryItems()

            'objects
            Dim SubItemGridLookUpEditControl As AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl = Nothing
            Dim OrderNumber As Integer = Nothing

            For Each GridColumn In DataGridViewRadio_DistributionDetails.CurrentView.Columns.OfType(Of DevExpress.XtraGrid.Columns.GridColumn).ToList

                If GridColumn.Visible AndAlso TypeOf GridColumn.ColumnEdit Is AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl Then

                    Try

                        SubItemGridLookUpEditControl = DirectCast(GridColumn.ColumnEdit, AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl)

                    Catch ex As Exception
                        SubItemGridLookUpEditControl = Nothing
                    End Try

                    If SubItemGridLookUpEditControl IsNot Nothing Then

                        Select Case GridColumn.FieldName

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ClientCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Client)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DivisionCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Division)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ProductCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Product)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableRadioOrders)
                                SubItemGridLookUpEditControl.ValueMember = "OrderNumber"

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderLineNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.RadioOrderDetail)

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.BroadcastMonth.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.Database.Procedures.RadioOrderLegacy.GetAllMonths
                                SubItemGridLookUpEditControl.ValueMember = "Column"

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.BroadcastYear.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.Database.Procedures.RadioOrderLegacy.GetAllYears
                                SubItemGridLookUpEditControl.ValueMember = "Column"

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.SalesTaxCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.SalesTax)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NewApprovalStatus.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly), GetType(Int16))

                        End Select

                    End If

                End If

            Next

        End Sub
        Private Sub LoadTV(ByVal DbContext As AdvantageFramework.Database.DbContext)

            Dim AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing

            DataGridViewTV_DistributionDetails.CurrentView.BeginUpdate()

            AccountPayableTVDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

            If _ID <> 0 Then

                If _IsDeleted Then

                    AccountPayableTVDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableTV.LoadAllByAccountPayableID(DbContext, _ID).ToList
                                                                    Order By Entity.OrderNumber Descending, Entity.OrderLineNumber Ascending
                                                                    Select New AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail(DbContext, Entity, False))

                Else

                    AccountPayableTVDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableTV.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                    Order By Entity.OrderNumber Descending, Entity.OrderLineNumber Ascending
                                                                    Select New AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail(DbContext, Entity, True))

                End If

            End If

            If AccountPayableTVDistributionDetailList.Count > 0 Then

                TabItemAPDetails_TVTab.Text = "TV *"

            End If

            DataGridViewTV_DistributionDetails.ItemDescription = "Accounts Payable TV Distribution Detail(s)"
            DataGridViewTV_DistributionDetails.DataSource = AccountPayableTVDistributionDetailList

            TabItemAPDetails_TVTab.Tag = True

            SetTVColumnHeaders()

            SetVisibleGridColumns(TabItemAPDetails_TVTab)

            DataGridViewTV_DistributionDetails.CurrentView.BestFitColumns()

            DataGridViewTV_DistributionDetails.ClearChanged()

            DataGridViewTV_DistributionDetails.CurrentView.EndUpdate()

            _SelectedTab = TabItemAPDetails_TVTab

            LoadTVRepositoryItems()

        End Sub
        Private Sub LoadTVRepositoryItems()

            'objects
            Dim SubItemGridLookUpEditControl As AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl = Nothing
            Dim OrderNumber As Integer = Nothing

            For Each GridColumn In DataGridViewTV_DistributionDetails.CurrentView.Columns.OfType(Of DevExpress.XtraGrid.Columns.GridColumn).ToList

                If GridColumn.Visible AndAlso TypeOf GridColumn.ColumnEdit Is AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl Then

                    Try

                        SubItemGridLookUpEditControl = DirectCast(GridColumn.ColumnEdit, AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl)

                    Catch ex As Exception
                        SubItemGridLookUpEditControl = Nothing
                    End Try

                    If SubItemGridLookUpEditControl IsNot Nothing Then

                        Select Case GridColumn.FieldName

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ClientCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Client)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DivisionCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Division)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ProductCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Product)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableTVOrders)
                                SubItemGridLookUpEditControl.ValueMember = "OrderNumber"

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderLineNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.TVOrderDetail)

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.BroadcastMonth.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.Database.Procedures.TVOrderLegacy.GetAllMonths()

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.BroadcastYear.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.Database.Procedures.TVOrderLegacy.GetAllYears()

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.SalesTaxCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.SalesTax)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NewApprovalStatus.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly), GetType(Int16))

                        End Select

                    End If

                End If

            Next

        End Sub
        Private Sub LoadOutofHome(ByVal DbContext As AdvantageFramework.Database.DbContext)

            Dim AccountPayableOutOfHomeDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing

            DataGridViewOutOfHome_DistributionDetails.CurrentView.BeginUpdate()

            AccountPayableOutOfHomeDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)

            If _ID <> 0 Then

                If _IsDeleted Then

                    AccountPayableOutOfHomeDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.LoadAllByAccountPayableID(DbContext, _ID).ToList
                                                                           Order By Entity.OutdoorOrderNumber Descending, Entity.OutdoorDetailLineNumber Ascending
                                                                           Select New AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail(DbContext, Entity, False))

                Else

                    AccountPayableOutOfHomeDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                           Order By Entity.OutdoorOrderNumber Descending, Entity.OutdoorDetailLineNumber Ascending
                                                                           Select New AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail(DbContext, Entity, True))

                End If

            End If

            If AccountPayableOutOfHomeDistributionDetailList.Count > 0 Then

                TabItemAPDetails_OutOfHomeTab.Text = "Out of Home *"

            End If

            DataGridViewOutOfHome_DistributionDetails.ItemDescription = "Accounts Payable Out of Home Distribution Detail(s)"
            DataGridViewOutOfHome_DistributionDetails.DataSource = AccountPayableOutOfHomeDistributionDetailList

            TabItemAPDetails_OutOfHomeTab.Tag = True

            SetOutOfHomeColumnHeaders()

            SetVisibleGridColumns(TabItemAPDetails_OutOfHomeTab)

            DataGridViewOutOfHome_DistributionDetails.CurrentView.BestFitColumns()

            DataGridViewOutOfHome_DistributionDetails.ClearChanged()

            DataGridViewOutOfHome_DistributionDetails.CurrentView.EndUpdate()

            _SelectedTab = TabItemAPDetails_OutOfHomeTab

            LoadOutOfHomeRepositoryItems()

        End Sub
        Private Sub LoadOutOfHomeRepositoryItems()

            'objects
            Dim SubItemGridLookUpEditControl As AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl = Nothing

            For Each GridColumn In DataGridViewOutOfHome_DistributionDetails.CurrentView.Columns.OfType(Of DevExpress.XtraGrid.Columns.GridColumn).ToList

                If GridColumn.Visible AndAlso TypeOf GridColumn.ColumnEdit Is AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl Then

                    Try

                        SubItemGridLookUpEditControl = DirectCast(GridColumn.ColumnEdit, AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl)

                    Catch ex As Exception
                        SubItemGridLookUpEditControl = Nothing
                    End Try

                    If SubItemGridLookUpEditControl IsNot Nothing Then

                        Select Case GridColumn.FieldName

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ClientCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Client)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DivisionCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Division)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ProductCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Product)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorOrderNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableOutOfHomeOrders)
                                SubItemGridLookUpEditControl.ValueMember = "OrderNumber"

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorDetailLineNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.OutOfHomeOrderDetail)

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.SalesTaxCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.SalesTax)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NewApprovalStatus.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly), GetType(Int16))

                        End Select

                    End If

                End If

            Next

        End Sub
        Private Sub LoadInternet(ByVal DbContext As AdvantageFramework.Database.DbContext)

            Dim AccountPayableInternetDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) = Nothing
            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing

            DataGridViewInternet_DistributionDetails.CurrentView.BeginUpdate()

            AccountPayableInternetDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)

            If _ID <> 0 Then

                If _IsDeleted Then

                    AccountPayableInternetDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableInternet.LoadAllByAccountPayableID(DbContext, _ID).ToList
                                                                          Order By Entity.InternetOrderNumber Descending, Entity.InternetDetailLineNumber Ascending
                                                                          Select New AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail(DbContext, Entity, False))

                Else

                    AccountPayableInternetDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableInternet.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                          Order By Entity.InternetOrderNumber Descending, Entity.InternetDetailLineNumber Ascending
                                                                          Select New AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail(DbContext, Entity, True))

                End If

            End If

            If AccountPayableInternetDistributionDetailList.Count > 0 Then

                TabItemAPDetails_InternetTab.Text = "Internet *"

            End If

            DataGridViewInternet_DistributionDetails.ItemDescription = "Accounts Payable Internet Distribution Detail(s)"
            DataGridViewInternet_DistributionDetails.DataSource = AccountPayableInternetDistributionDetailList

            TabItemAPDetails_InternetTab.Tag = True

            SetInternetColumnHeaders()

            SetVisibleGridColumns(TabItemAPDetails_InternetTab)

            DataGridViewInternet_DistributionDetails.CurrentView.BestFitColumns()

            DataGridViewInternet_DistributionDetails.ClearChanged()

            DataGridViewInternet_DistributionDetails.CurrentView.EndUpdate()

            _SelectedTab = TabItemAPDetails_InternetTab

            LoadInternetRepositoryItems()

        End Sub
        Private Sub LoadInternetRepositoryItems()

            'objects
            Dim SubItemGridLookUpEditControl As AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl = Nothing

            For Each GridColumn In DataGridViewInternet_DistributionDetails.CurrentView.Columns.OfType(Of DevExpress.XtraGrid.Columns.GridColumn).ToList

                If GridColumn.Visible AndAlso TypeOf GridColumn.ColumnEdit Is AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl Then

                    Try

                        SubItemGridLookUpEditControl = DirectCast(GridColumn.ColumnEdit, AdvantageFramework.WinForm.Presentation.Controls.SubItemGridLookUpEditControl)

                    Catch ex As Exception
                        SubItemGridLookUpEditControl = Nothing
                    End Try

                    If SubItemGridLookUpEditControl IsNot Nothing Then

                        Select Case GridColumn.FieldName

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ClientCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Client)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DivisionCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Division)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ProductCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.Product)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetOrderNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableInternetOrders)
                                SubItemGridLookUpEditControl.ValueMember = "OrderNumber"

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetDetailLineNumber.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.InternetOrderDetail)

                                GridColumn.SortMode = DevExpress.XtraGrid.ColumnSortMode.Value

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.SalesTaxCode.ToString

                                SubItemGridLookUpEditControl.DataSource = New Generic.List(Of AdvantageFramework.Database.Entities.SalesTax)

                            Case AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NewApprovalStatus.ToString

                                SubItemGridLookUpEditControl.DataSource = AdvantageFramework.EnumUtilities.GetEnumDataTable(GetType(AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly), GetType(Int16))

                        End Select

                    End If

                End If

            Next

        End Sub
        Private Sub LoadAPDetails(ByVal TabItem As DevComponents.DotNetBar.TabItem, ByVal DbContext As AdvantageFramework.Database.DbContext)

            'objects
            Dim CloseConnection As Boolean = False

            If DbContext.Database.Connection.State = ConnectionState.Closed Then

                DbContext.Database.Connection.Open()
                CloseConnection = True

            End If

            TabControlControl_APDetails.SuspendLayout()

            If TabItem Is TabItemAPDetails_NonClientTab Then

                If TabItem.Tag = False Then

                    LoadNonClient(DbContext)
                    TabControlPanelNonClientTab_NonClient.Update()

                End If

                If Me.FindForm.Modal Then

                    DataGridViewNonClient_DistributionDetails.Focus()

                End If

            ElseIf TabItem Is TabItemAPDetails_ProductionTab Then

                If TabItem.Tag = False Then

                    LoadProduction(DbContext)
                    TabControlPanelProductionTab_Production.Update()

                End If

                If Me.FindForm.Modal Then

                    DataGridViewProduction_DistributionDetails.Focus()

                End If

            ElseIf TabItem Is TabItemAPDetails_NewspaperTab AndAlso TabItem.Tag = False Then

                LoadNewspaper(DbContext)
                TabControlPanelNewspaperTab_Newspaper.Update()

            ElseIf TabItem Is TabItemAPDetails_MagazineTab AndAlso TabItem.Tag = False Then

                LoadMagazine(DbContext)
                TabControlPanelMagazineTab_Magazine.Update()

            ElseIf TabItem Is TabItemAPDetails_RadioTab AndAlso TabItem.Tag = False Then

                LoadRadio(DbContext)
                TabControlPanelRadioTab_Radio.Update()

            ElseIf TabItem Is TabItemAPDetails_TVTab AndAlso TabItem.Tag = False Then

                LoadTV(DbContext)
                TabControlPanelTVTab_TV.Update()

            ElseIf TabItem Is TabItemAPDetails_OutOfHomeTab AndAlso TabItem.Tag = False Then

                LoadOutofHome(DbContext)
                TabControlPanelOutOfHomeTab_OutOfHome.Update()

            ElseIf TabItem Is TabItemAPDetails_InternetTab AndAlso TabItem.Tag = False Then

                LoadInternet(DbContext)
                TabControlPanelInternetTab_Internet.Update()

            ElseIf TabItem Is TabItemAPDetails_DocumentsTab AndAlso TabItem.Tag = False Then

                LoadDocumentsTab()
                TabControlPanelDocumentsTab_Documents.Update()

            ElseIf TabItem Is TabItemAPDetails_ExpenseReceiptsTab AndAlso TabItem.Tag = False Then

                LoadExpenseReceiptsTab()
                TabControlPanelExpenseReceiptsTab_ExpenseReceipts.Update()

            ElseIf TabItem Is TabItemAPDetails_ExpenseReceiptsTab Then

                If _DocumentSubLevel = Database.Entities.DocumentSubLevel.ExpenseDetailDocument Then

                    FilterDocuments(Database.Entities.DocumentSubLevel.ExpenseDetailDocument)

                End If

            End If

            If CloseConnection Then

                DbContext.Database.Connection.Close()

            End If

            TabControlControl_APDetails.ResumeLayout()

        End Sub
        Private Sub LoadAPDetails(ByVal TabItem As DevComponents.DotNetBar.TabItem)

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                LoadAPDetails(TabItem, DbContext)

            End Using

        End Sub
        Private Sub LoadInvoiceDetails(ByVal TabItem As DevComponents.DotNetBar.TabItem)

            If TabItem Is TabItemInvoiceDetails_TransactionsTab AndAlso TabItem.Tag = False Then

                LoadHeaderGLTransactions()

            ElseIf TabItem Is TabItemInvoiceDetails_ChecksWrittenTab AndAlso TabItem.Tag = False Then

                LoadHeaderChecksWritten()

            End If

        End Sub
        Private Function GetHomeCurrencyCaption(ColumnCaption As String) As String

            Dim Caption As String = Nothing

            If _IsMultiCurrencyEnabled AndAlso ((SearchableComboBoxControl_CurrencyCode.HasASelectedValue AndAlso _CurrencyCodeHome <> SearchableComboBoxControl_CurrencyCode.GetSelectedValue) OrElse
                    SearchableComboBoxControl_CurrencyCode.HasASelectedValue = False) Then

                Caption = _CurrencyCodeHome & Space(1) & ColumnCaption

            Else

                Caption = ColumnCaption

            End If

            GetHomeCurrencyCaption = Caption

        End Function
        Private Function InternetComplete(ByRef IsValid As Boolean) As String

            Dim AccountPayableInternetDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) = Nothing
            Dim ErrorText As String = Nothing
            Dim PropertyErrorText As String = Nothing
            Dim FailedOnce As Boolean = False

            AccountPayableInternetDistributionDetails = DataGridViewInternet_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)().ToList

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                For Each AccountPayableInternetDistributionDetail In AccountPayableInternetDistributionDetails

                    AccountPayableInternetDistributionDetail.DbContext = DbContext

                    PropertyErrorText = AccountPayableInternetDistributionDetail.ValidateEntity(IsValid)

                    If IsValid = False Then

                        ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)

                        FailedOnce = True

                    End If

                Next

            End Using

            IsValid = Not FailedOnce

            InternetComplete = ErrorText

        End Function
        Private Function MagazineComplete(ByRef IsValid As Boolean) As String

            Dim AccountPayableMagazineDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) = Nothing
            Dim ErrorText As String = Nothing
            Dim PropertyErrorText As String = Nothing
            Dim FailedOnce As Boolean = False

            AccountPayableMagazineDistributionDetails = DataGridViewMagazine_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)().ToList

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                For Each AccountPayableMagazineDistributionDetail In AccountPayableMagazineDistributionDetails

                    AccountPayableMagazineDistributionDetail.DbContext = DbContext

                    PropertyErrorText = AccountPayableMagazineDistributionDetail.ValidateEntity(IsValid)

                    If IsValid = False Then

                        ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)

                        FailedOnce = True

                    End If

                Next

            End Using

            IsValid = Not FailedOnce

            MagazineComplete = ErrorText

        End Function
        Private Function NewspaperComplete(ByRef IsValid As Boolean) As String

            Dim AccountPayableNewspaperDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) = Nothing
            Dim ErrorText As String = Nothing
            Dim PropertyErrorText As String = Nothing
            Dim FailedOnce As Boolean = False

            AccountPayableNewspaperDistributionDetails = DataGridViewNewspaper_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)().ToList

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                For Each AccountPayableNewspaperDistributionDetail In AccountPayableNewspaperDistributionDetails

                    AccountPayableNewspaperDistributionDetail.DbContext = DbContext

                    PropertyErrorText = AccountPayableNewspaperDistributionDetail.ValidateEntity(IsValid)

                    If IsValid = False Then

                        ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)

                        FailedOnce = True

                    End If

                Next

            End Using

            IsValid = Not FailedOnce

            NewspaperComplete = ErrorText

        End Function
        Private Function NonClientComplete(ByRef IsValid As Boolean) As String

            Dim AccountPayableGLDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail) = Nothing
            Dim ErrorText As String = Nothing
            Dim PropertyErrorText As String = Nothing
            Dim FailedOnce As Boolean = False

            AccountPayableGLDistributionDetails = DataGridViewNonClient_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)().ToList

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                For Each AccountPayableGLDistributionDetail In AccountPayableGLDistributionDetails

                    AccountPayableGLDistributionDetail.DbContext = DbContext

                    PropertyErrorText = AccountPayableGLDistributionDetail.ValidateEntity(IsValid)

                    If IsValid = False Then

                        ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)

                        FailedOnce = True

                    End If

                Next

            End Using

            IsValid = Not FailedOnce

            NonClientComplete = ErrorText

        End Function
        Private Function MonthToInteger(Month As String) As Integer

            Dim MonthInteger As Integer

            For MonthInteger = 1 To 12

                If MonthName(MonthInteger, True).ToUpper = Month Then

                    Exit For

                End If

            Next

            MonthToInteger = MonthInteger

        End Function
        Private Function NonVoidedChecksExist(ByVal DbContext As AdvantageFramework.Database.DbContext) As Boolean

            NonVoidedChecksExist = (From Entity In AdvantageFramework.Database.Procedures.AccountPayablePayment.Load(DbContext).Include("CheckRegister")
                                    Where Entity.AccountPayableID = _ID AndAlso
                                          Entity.CheckRegister.IsVoid Is Nothing OrElse Entity.CheckRegister.IsVoid = 0
                                    Select Entity).Any

        End Function
        Private Function OkayToDelete(ByRef PostPeriodCode As String) As Boolean

            Dim IsOkay As Boolean = False
            Dim NonVoidedChecksWritten As Boolean = False
            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing
            Dim AccountPayableProductionDistributionDetailList As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableProduction) = Nothing
            Dim SelectedPostPeriods As IEnumerable = Nothing
            Dim ContinueDelete As Boolean = True
            Dim VendorSelectedForCheckWriting As Boolean = False
            Dim APJobs As Generic.List(Of Integer) = Nothing
            Dim ClosedJobExists As Boolean = False
            Dim JobComponents As Generic.List(Of String) = Nothing
            Dim JobComponentSelectedForReview As Boolean = False

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                NonVoidedChecksWritten = NonVoidedChecksExist(DbContext)

                AccountPayable = AdvantageFramework.Database.Procedures.AccountPayable.LoadByAccountPayableIDAndSequenceNumber(DbContext, _ID, _SequenceNumber)

                AccountPayableProductionDistributionDetailList = AdvantageFramework.Database.Procedures.AccountPayableProduction.LoadActiveByAccountPayableID(DbContext, _ID).ToList

                VendorSelectedForCheckWriting = AdvantageFramework.Database.Procedures.CheckWritingSelection.LoadByVendorCode(DbContext, AccountPayable.VendorCode).Any()

                APJobs = AccountPayableProductionDistributionDetailList.Select(Function(APP) APP.JobNumber).ToList

                If APJobs IsNot Nothing Then

                    If (From Job In AdvantageFramework.Database.Procedures.Job.Load(DbContext)
                        Where APJobs.Contains(Job.Number) AndAlso
                              Job.IsOpen = 0).Any Then

                        ClosedJobExists = True

                    End If

                End If

                JobComponents = AccountPayableProductionDistributionDetailList.Select(Function(APP) APP.JobNumber & "|" & APP.JobComponentNumber).ToList

                If JobComponents IsNot Nothing Then

                    If (From JobComponent In AdvantageFramework.Database.Procedures.JobComponent.Load(DbContext)
                        Where JobComponents.Contains(JobComponent.JobNumber & "|" & JobComponent.Number) AndAlso
                              JobComponent.BillingCommandCenterID IsNot Nothing).Any Then

                        JobComponentSelectedForReview = True

                    End If

                End If

            End Using

            If NonVoidedChecksWritten = False Then

                If AccountPayable.CheckWriting = 1 Then

                    AdvantageFramework.WinForm.MessageBox.Show("Invoice has been selected for checkwriting or payment has been applied.")

                ElseIf VendorSelectedForCheckWriting Then

                    AdvantageFramework.WinForm.MessageBox.Show("Vendor is selected for checkwriting.  Deletion not allowed.")

                ElseIf ClosedJobExists Then

                    AdvantageFramework.WinForm.MessageBox.Show("One or more job(s) is closed.  Please re-open before deleting invoice.")

                ElseIf JobComponentSelectedForReview Then

                    AdvantageFramework.WinForm.MessageBox.Show("One or more job component(s) has been selected for review in Billing Command Center.")

                Else

                    If AccountPayableProductionDistributionDetailList.Where(Function(E) E.AccountReceivableInvoiceNumber IsNot Nothing).Any Then

                        If AdvantageFramework.WinForm.MessageBox.Show("Production billing has been processed for the selected invoice, are you sure you want to delete?", WinForm.MessageBox.MessageBoxButtons.YesNo) = AdvantageFramework.WinForm.MessageBox.DialogResults.No Then

                            ContinueDelete = False

                        End If

                    End If

                    If ContinueDelete Then

                        If AdvantageFramework.WinForm.Presentation.CRUDDialog.ShowFormDialog(WinForm.Presentation.CRUDDialog.Type.PostPeriodActiveAP, True, True, SelectedPostPeriods) = System.Windows.Forms.DialogResult.OK Then

                            If SelectedPostPeriods IsNot Nothing Then

                                Try

                                    PostPeriodCode = (From Entity In SelectedPostPeriods
                                                      Select Entity.Code).FirstOrDefault

                                Catch ex As Exception
                                    PostPeriodCode = Nothing
                                End Try

                            End If

                            If PostPeriodCode IsNot Nothing AndAlso PostPeriodCode <> "" Then

                                If AdvantageFramework.WinForm.MessageBox.Show("Last chance to back out of deleting this invoice.  Continue?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Delete Invoice") = AdvantageFramework.WinForm.MessageBox.DialogResults.Yes Then

                                    IsOkay = True

                                End If

                            Else

                                AdvantageFramework.WinForm.MessageBox.Show("You must select a posting period!", , "Delete Invoice")

                            End If

                        Else

                            AdvantageFramework.WinForm.MessageBox.Show("You must select a posting period!", , "Delete Invoice")

                        End If

                    End If

                End If

            Else

                AdvantageFramework.WinForm.MessageBox.Show("Check(s) have been processed.  Deletion not allowed.")

            End If

            OkayToDelete = IsOkay

        End Function
        Private Function JobComponentSelectedForReviewInBCC(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal JobNumber As Integer, ByVal JobComponentNumber As Short, ByRef ErrorMessage As String) As Boolean

            Dim IsSelected As Boolean = False
            Dim JobComponent As AdvantageFramework.Database.Entities.JobComponent = Nothing

            JobComponent = AdvantageFramework.Database.Procedures.JobComponent.LoadByJobNumberAndJobComponentNumber(DbContext, JobNumber, JobComponentNumber)

            If JobComponent Is Nothing Then

                IsSelected = True
                ErrorMessage += "Job Component not found.  "

            ElseIf JobComponent IsNot Nothing AndAlso JobComponent.BillingCommandCenterID IsNot Nothing Then

                IsSelected = True
                ErrorMessage += "Job/Component " & JobComponent.JobNumber & "/" & JobComponent.Number & " has been selected for review in Billing Command Center.  "

            End If

            JobComponentSelectedForReviewInBCC = IsSelected

        End Function
        Private Function OkayToSave(ByRef ErrorMessage As String) As Boolean

            Dim ChecksWritten As Boolean = False
            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing
            Dim IsOkay As Boolean = True
            Dim PostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PostPeriodCode As String = Nothing
            Dim AccountPayableProductionDistributionDetails As IEnumerable(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail) = Nothing
            Dim Job As AdvantageFramework.Database.Entities.Job = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                AccountPayableProductionDistributionDetails = DataGridViewProduction_DistributionDetails.GetAllModifiedRows.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)().Where(Function(AP) AP.JobNumber.HasValue).ToList

                For Each AccountPayableProductionDistributionDetail In AccountPayableProductionDistributionDetails

                    Job = AdvantageFramework.Database.Procedures.Job.LoadByJobNumber(DbContext, AccountPayableProductionDistributionDetail.JobNumber)

                    If Job.IsOpen.GetValueOrDefault(1) = 0 Then

                        IsOkay = False
                        ErrorMessage = "Job " & Job.Number & " has been closed.  "
                        Exit For

                    End If

                    ' AccountPayableProductionDistributionDetail.LineNumber is 0 for new rows
                    If AccountPayableProductionDistributionDetail.LineNumber <> 0 AndAlso JobComponentSelectedForReviewInBCC(DbContext, AccountPayableProductionDistributionDetail.JobNumber, AccountPayableProductionDistributionDetail.JobComponentNumber, ErrorMessage) Then

                        IsOkay = False
                        Exit For

                    End If

                Next

                If ComboBoxControl_PostPeriodForMod.HasASelectedValue Then

                    PostPeriodCode = ComboBoxControl_PostPeriodForMod.GetSelectedValue()

                    PostPeriod = AdvantageFramework.Database.Procedures.PostPeriod.LoadByPostPeriodCode(DbContext, PostPeriodCode)

                    If PostPeriod IsNot Nothing AndAlso PostPeriod.APStatus = "X" Then

                        IsOkay = False
                        ErrorMessage += "Posting period has been closed.  "

                    End If

                End If

                If _ID <> 0 AndAlso (_HeaderModifyState = HeaderModifyState.NoRestrictions OrElse _HeaderModifyState = HeaderModifyState.IntercompanyTransactionsExist) Then

                    ChecksWritten = NonVoidedChecksExist(DbContext)

                    AccountPayable = AdvantageFramework.Database.Procedures.AccountPayable.LoadByAccountPayableIDAndSequenceNumber(DbContext, _ID, _SequenceNumber)

                    If ChecksWritten OrElse AccountPayable.CheckWriting = 1 Then

                        IsOkay = False
                        ErrorMessage += "Invoice has been selected for checkwriting or payment has been applied."

                    ElseIf AdvantageFramework.Database.Procedures.CheckWritingSelection.LoadByVendorCode(DbContext, AccountPayable.VendorCode).Any Then

                        IsOkay = False
                        ErrorMessage += "Vendor is selected for checkwriting.  You will not be able to change any of the header information.  You will be able to modify the detail distribution only."

                    End If

                End If

            End Using

            OkayToSave = IsOkay

        End Function
        Private Function OutOfHomeComplete(ByRef IsValid As Boolean) As String

            Dim AccountPayableOutOfHomeDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) = Nothing
            Dim ErrorText As String = Nothing
            Dim PropertyErrorText As String = Nothing
            Dim FailedOnce As Boolean = False

            AccountPayableOutOfHomeDistributionDetails = DataGridViewOutOfHome_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)().ToList

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                For Each AccountPayableOutOfHomeDistributionDetail In AccountPayableOutOfHomeDistributionDetails

                    AccountPayableOutOfHomeDistributionDetail.DbContext = DbContext

                    PropertyErrorText = AccountPayableOutOfHomeDistributionDetail.ValidateEntity(IsValid)

                    If IsValid = False Then

                        ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)

                        FailedOnce = True

                    End If

                Next

            End Using

            IsValid = Not FailedOnce

            OutOfHomeComplete = ErrorText

        End Function
        Private Function ProductionComplete(ByRef IsValid As Boolean) As String

            Dim AccountPayableProductionDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail) = Nothing
            Dim ErrorText As String = Nothing
            Dim PropertyErrorText As String = Nothing
            Dim FailedOnce As Boolean = False

            AccountPayableProductionDistributionDetails = DataGridViewProduction_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)().ToList

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                For Each AccountPayableProductionDistributionDetail In AccountPayableProductionDistributionDetails

                    AccountPayableProductionDistributionDetail.DbContext = DbContext

                    PropertyErrorText = AccountPayableProductionDistributionDetail.ValidateEntity(IsValid)

                    If IsValid = False Then

                        ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)

                        FailedOnce = True

                    End If

                Next

            End Using

            IsValid = Not FailedOnce

            ProductionComplete = ErrorText

        End Function
        Private Sub SetCurrentPostPeriod(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal HeaderPostPeriodCode As String)

            Dim CurrentPostPeriod As AdvantageFramework.Database.Entities.PostPeriod = Nothing
            Dim PostPeriodList As Generic.List(Of AdvantageFramework.Database.Entities.PostPeriod) = Nothing

            If (_HeaderModifyState = HeaderModifyState.NoRestrictions OrElse _HeaderModifyState = HeaderModifyState.IntercompanyTransactionsExist) Then

                PostPeriodList = AdvantageFramework.Database.Procedures.PostPeriod.LoadAllActiveAPPostPeriods(DbContext).ToList

            Else

                PostPeriodList = (From Entity In AdvantageFramework.Database.Procedures.PostPeriod.LoadAllActiveAPPostPeriods(DbContext)
                                  Where Entity.Code >= HeaderPostPeriodCode
                                  Select Entity).ToList

            End If

            ComboBoxControl_PostPeriodForMod.DataSource = PostPeriodList
            ComboBoxControl_PostPeriodForMod.SelectedIndex = -1

            CurrentPostPeriod = AdvantageFramework.Database.Procedures.PostPeriod.LoadCurrentAPPostPeriod(DbContext)

            If HeaderPostPeriodCode IsNot Nothing Then

                If PostPeriodList.Select(Function(PPL) PPL.Code).ToArray.Contains(HeaderPostPeriodCode) Then

                    ComboBoxControl_PostPeriodForMod.SelectedValue = HeaderPostPeriodCode

                ElseIf CurrentPostPeriod IsNot Nothing Then

                    ComboBoxControl_PostPeriodForMod.SelectedValue = CurrentPostPeriod.Code

                End If

            Else

                If CurrentPostPeriod IsNot Nothing Then

                    ComboBoxControl_PostPeriod.SelectedValue = CurrentPostPeriod.Code
                    ComboBoxControl_PostPeriodForMod.SelectedValue = CurrentPostPeriod.Code

                Else

                    ComboBoxControl_PostPeriodForMod.SelectedValue = ComboBoxControl_PostPeriod.SelectedValue

                End If

            End If

            'If CurrentPostPeriod IsNot Nothing Then

            '    If _ID = 0 Then

            '        ComboBoxControl_PostPeriod.SelectedValue = CurrentPostPeriod.Code

            '    End If

            '    ComboBoxControl_PostPeriodForMod.SelectedValue = CurrentPostPeriod.Code

            'Else

            '    If _ID = 0 Then

            '        If Not ComboBoxControl_PostPeriod.SelectSingleItemDataSource() Then

            '            ComboBoxControl_PostPeriod.SelectedIndex = -1

            '        End If

            '        If Not ComboBoxControl_PostPeriodForMod.SelectSingleItemDataSource() Then

            '            ComboBoxControl_PostPeriodForMod.SelectedIndex = -1

            '        End If

            '    End If

            'End If

            'If _ID <> 0 AndAlso ComboBoxControl_PostPeriodForMod.HasASelectedValue = False Then

            '    ComboBoxControl_PostPeriodForMod.SelectedValue = HeaderPostPeriodCode

            '    If ComboBoxControl_PostPeriodForMod.HasASelectedValue = False AndAlso ComboBoxControl_PostPeriodForMod.SelectSingleItemDataSource = False Then

            '        ComboBoxControl_PostPeriodForMod.SelectedIndex = -1

            '    End If

            'End If

            If PostPeriodList.Count = 0 AndAlso Not _IsDeleted Then

                AdvantageFramework.WinForm.MessageBox.Show("All AP Posting Periods are closed.")

                TextBoxControl_MessageDetails.Text += Space(2) & "All AP Posting Periods are closed."
                TextBoxControl_MessageDetails.Text = Trim(TextBoxControl_MessageDetails.Text)

            End If

        End Sub
        Private Sub SetHeaderControlsEnabled()

            If _IsDeleted Then

                TextBoxControl_MessageDetails.ForeColor = Drawing.Color.Red
                TextBoxControl_MessageDetails.Font = New System.Drawing.Font("Microsoft Sans Serif", 10, Drawing.FontStyle.Bold)
                TextBoxControl_MessageDetails.Text = "DELETED"
                TextBoxControl_MessageDetails.BackColor = TextBoxControl_MessageDetails.BackColor

                NumericInputControl_InvoiceAmount.ReadOnly = True

                ComboBoxControl_APAccount.ReadOnly = True
                ComboBoxControl_Office.ReadOnly = True
                ComboBoxControl_Terms.ReadOnly = True

                EnableGrids(False)

                CheckBoxControl_1099Invoice.AutoCheck = False
                CheckBoxControl_OnHold.AutoCheck = False

                TextBoxControl_Description.ReadOnly = True
                DateTimePickerControl_DateToPay.ReadOnly = True
                DateTimePickerControl_InvoiceDate.ReadOnly = True

                NumericInputControl_SalesTax.ReadOnly = True
                NumericInputControl_DiscountPercentage.ReadOnly = True
                NumericInputControl_Discount.ReadOnly = True

                NumericInputControl_VendorTaxableAmount.ReadOnly = True
                CheckBoxControl_VendorTaxEnabled.AutoCheck = False
                SearchableComboBoxControl_VendorTaxCode.ReadOnly = True

                NumericInputControl_VendorCurrencyRate.ReadOnly = True
                PictureUpdateCurrency_Image.Enabled = False

            Else

                TextBoxControl_MessageDetails.ForeColor = Drawing.Color.Black
                TextBoxControl_MessageDetails.Font = New System.Drawing.Font("Microsoft Sans Serif", 8.25, Drawing.FontStyle.Regular)

                CheckBoxControl_1099Invoice.AutoCheck = Not (_HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)
                CheckBoxControl_1099Invoice.TabStop = True
                CheckBoxControl_OnHold.AutoCheck = Not (_HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)
                CheckBoxControl_OnHold.TabStop = True

                TextBoxControl_Description.ReadOnly = Not (_HeaderModifyState = HeaderModifyState.NoRestrictions OrElse HeaderModifyState.IntercompanyTransactionsExist OrElse _HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed) OrElse
                    _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting
                DateTimePickerControl_DateToPay.ReadOnly = Not (_HeaderModifyState = HeaderModifyState.NoRestrictions OrElse HeaderModifyState.IntercompanyTransactionsExist OrElse
                    _HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed) OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting

                DateTimePickerControl_InvoiceDate.ReadOnly = Not (_HeaderModifyState = HeaderModifyState.NoRestrictions OrElse HeaderModifyState.IntercompanyTransactionsExist) OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting

                NumericInputControl_InvoiceAmount.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)

                NumericInputControl_SalesTax.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)
                NumericInputControl_DiscountPercentage.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)
                NumericInputControl_Discount.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)

                ComboBoxControl_Terms.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)
                ComboBoxControl_Office.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting OrElse
                                                   _HeaderModifyState = HeaderModifyState.IntercompanyTransactionsExist)

                If ComboBoxControl_APAccount.Tag <> "READONLY" Then

                    ComboBoxControl_APAccount.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting OrElse
                                                          _HeaderModifyState = HeaderModifyState.IntercompanyTransactionsExist)

                End If

                NumericInputControl_VendorTaxableAmount.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)

                CheckBoxControl_VendorTaxEnabled.AutoCheck = Not (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)
                SearchableComboBoxControl_VendorTaxCode.Properties.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)
                SearchableComboBoxControl_VendorTaxCode.BackColor = If(Not SearchableComboBoxControl_VendorTaxCode.Properties.ReadOnly, System.Drawing.SystemColors.Window, System.Drawing.SystemColors.Control)

                NumericInputControl_VendorCurrencyRate.ReadOnly = (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)
                PictureUpdateCurrency_Image.Enabled = Not (_HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed OrElse _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)

                ComboBoxControl_PostPeriodForMod.ByPassUserEntryChanged = Not (_HeaderModifyState = HeaderModifyState.NoRestrictions OrElse _HeaderModifyState = HeaderModifyState.IntercompanyTransactionsExist)
                ComboBoxControl_PostPeriodForMod.ReadOnly = (_HeaderModifyState = HeaderModifyState.SelectedForCheckwriting)

            End If

        End Sub
        Private Sub SetInternetColumnHeaders()

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.Rate.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.Rate.ToString).Caption = GetHomeCurrencyCaption("Rate")

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.GrossAmount.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.GrossAmount.ToString).Caption = GetHomeCurrencyCaption("Gross Amount")

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NetAmount.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NetAmount.ToString).Caption = GetHomeCurrencyCaption("Net Amount")

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DiscountAmount.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DiscountAmount.ToString).Caption = GetHomeCurrencyCaption("Discount Amount")

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NetCharges.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NetCharges.ToString).Caption = GetHomeCurrencyCaption("Net Charges")

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.VendorTax.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.VendorTax.ToString).Caption = GetHomeCurrencyCaption("Vendor Tax")

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DisbursedAmount.ToString).Caption = GetHomeCurrencyCaption("Disbursed Amount")

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignRate.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignRate.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Rate"

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignGrossAmount.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Gross Amount"

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignNetAmount.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Amount"

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignDiscountAmount.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignDiscountAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Discount Amount"

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignNetCharges.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignNetCharges.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Charges"

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignVendorTax.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignVendorTax.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Vendor Tax"

            End If

            If DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignDisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewInternet_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignDisbursedAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Disbursed Amount"

            End If

        End Sub
        Private Sub SetInternetOrderLineNumber(ByVal OrderLineNumber As Integer, ByVal RowHandle As Integer)

            'Dim AccountPayableInternetDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) = Nothing
            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim InternetOrderDetail As AdvantageFramework.Database.Entities.InternetOrderDetail = Nothing

            AccountPayableInternetDistributionDetail = DirectCast(DataGridViewInternet_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)

            AccountPayableInternetDistributionDetail.InternetDetailLineNumber = OrderLineNumber

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                OrderNumber = DataGridViewInternet_DistributionDetails.CurrentView.GetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetOrderNumber.ToString)

                If OrderNumber <> 0 Then

                    InternetOrderDetail = AdvantageFramework.Database.Procedures.InternetOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, OrderNumber, OrderLineNumber)

                End If

                If InternetOrderDetail IsNot Nothing Then

                    'AccountPayableInternetDistributionDetailList = DataGridViewInternet_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)().ToList

                    'If (RowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableInternetDistributionDetailList.Where(Function(AP) AP.InternetOrderNumber IsNot Nothing AndAlso AP.InternetOrderNumber = InternetOrderDetail.InternetOrderOrderNumber AndAlso AP.InternetDetailLineNumber IsNot Nothing AndAlso AP.InternetDetailLineNumber = InternetOrderDetail.LineNumber).Any) OrElse
                    '    RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableInternetDistributionDetailList.Where(Function(AP) AP.InternetOrderNumber IsNot Nothing AndAlso AP.InternetOrderNumber = InternetOrderDetail.InternetOrderOrderNumber AndAlso AP.InternetDetailLineNumber IsNot Nothing AndAlso AP.InternetDetailLineNumber = InternetOrderDetail.LineNumber).Count > 1 Then

                    '    AdvantageFramework.WinForm.MessageBox.Show("This Order Number/Line has already been added.  Please choose another.")

                    '    DirectCast(DataGridViewInternet_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail).InternetOrderNumber = Nothing

                    'Else

                    AccountPayableInternetDistributionDetail.CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue
                    AccountPayable.Classes.AccountPayableInternetDistributionDetail.SetBaseValues(AccountPayableInternetDistributionDetail, InternetOrderDetail, DbContext)

                    'End If

                End If

            End Using

        End Sub
        Private Sub SetInternetOrderNumber(ByVal OrderNumber As Integer, ByVal FocusOrderLine As Boolean, ByVal RowHandle As Integer, Optional ByVal OrderLineNumber As Short = -1)

            Dim InternetOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.InternetOrderDetail) = Nothing
            Dim AccountPayableInternetDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) = Nothing
            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing
            Dim AddDetail As Boolean = True
            Dim GridColumn As DevExpress.XtraGrid.Columns.GridColumn = Nothing
            Dim StartDate As Nullable(Of Date) = Nothing
            Dim MonthYearInternetOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.InternetOrderDetail) = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                AccountPayableInternetDistributionDetailList = DataGridViewInternet_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)().ToList

                InternetOrderDetails = AdvantageFramework.Database.Procedures.InternetOrderDetail.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber).ToList

                DirectCast(DataGridViewInternet_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail).InternetOrderNumber = OrderNumber

                If RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle Then

                    If OrderLineNumber = -1 Then

                        If InternetOrderDetails.Count = 1 Then

                            SetInternetOrderLineNumber(InternetOrderDetails(0).LineNumber, RowHandle)

                        Else

                            DataGridViewInternet_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetDetailLineNumber.ToString, Nothing)

                        End If

                    Else

                        SetInternetOrderLineNumber(OrderLineNumber, RowHandle)

                    End If

                Else

                    If InternetOrderDetails.Count > 1 AndAlso AccountPayableInternetDistributionDetailList.Where(Function(Entity) Entity.InternetOrderNumber IsNot Nothing AndAlso Entity.InternetOrderNumber = OrderNumber).Any = False Then

                        MonthYearInternetOrderDetails = New Generic.List(Of AdvantageFramework.Database.Entities.InternetOrderDetail)

                        If OrderLineNumber <> -1 Then

                            StartDate = InternetOrderDetails.Where(Function(Entity) Entity.InternetOrderOrderNumber = OrderNumber AndAlso Entity.LineNumber = OrderLineNumber).Select(Function(S) S.StartDate.Value).FirstOrDefault

                            If StartDate IsNot Nothing Then

                                MonthYearInternetOrderDetails.AddRange(InternetOrderDetails.Where(Function(Entity) Month(Entity.StartDate.Value) = Month(StartDate.Value) AndAlso Year(Entity.StartDate.Value) = Year(StartDate.Value)))

                            End If

                        End If

                        If MonthYearInternetOrderDetails.Count > 1 Then

                            If AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines for month/year?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", System.Windows.Forms.MessageBoxIcon.None, System.Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                                AddDetail = False

                            Else

                                InternetOrderDetails = MonthYearInternetOrderDetails

                            End If

                        ElseIf AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines from this Order?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Windows.Forms.MessageBoxIcon.None, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                            If OrderLineNumber = -1 Then

                                AddDetail = False

                            Else

                                AddDetail = False

                                SetInternetOrderLineNumber(OrderLineNumber, RowHandle)

                                GridColumn = DataGridViewInternet_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetDetailLineNumber.ToString)
                                DataGridViewInternet_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                            End If

                        End If

                    ElseIf OrderLineNumber <> -1 Then

                        AddDetail = False

                        SetInternetOrderLineNumber(OrderLineNumber, RowHandle)

                    ElseIf InternetOrderDetails.Count > 1 Then

                        AddDetail = False

                    End If

                    If AddDetail AndAlso InternetOrderDetails.Count > 1 Then

                        For Each InternetOrderDetail In InternetOrderDetails

                            AccountPayableInternetDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail(DbContext, InternetOrderDetail, NumericInputControl_VendorCurrencyRate.GetValue)

                            AccountPayableInternetDistributionDetailList.Add(AccountPayableInternetDistributionDetail)

                        Next

                        DataGridViewInternet_DistributionDetails.DataSource = AccountPayableInternetDistributionDetailList

                        CalculateTotalAmount()

                        SetVisibleGridColumns(TabItemAPDetails_InternetTab)

                        FocusOrderLine = False

                        LoadInternetRepositoryItems()

                    ElseIf AddDetail AndAlso InternetOrderDetails.Count = 1 Then

                        SetInternetOrderLineNumber(InternetOrderDetails(0).LineNumber, RowHandle)

                    End If

                End If

                If FocusOrderLine AndAlso AddDetail Then

                    GridColumn = DataGridViewInternet_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetDetailLineNumber.ToString)
                    DataGridViewInternet_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                End If

            End Using

        End Sub
        Private Sub SetInvoiceNumberDatasource(ByVal VendorCode As String)

            Dim Vendor As AdvantageFramework.Database.Entities.Vendor = Nothing
            Dim AccountPayableList As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayable) = Nothing

            SearchableComboBoxControl_InvoiceNumber.DataSource = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                AccountPayableList = AdvantageFramework.AccountPayable.GetAllAccountPayableListByVendor(DbContext, VendorCode)

                SearchableComboBoxControl_InvoiceNumber.DataSource = AccountPayableList

                Vendor = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, VendorCode)

                If Vendor IsNot Nothing Then

                    SetVisibleTabs(Vendor)

                End If

            End Using

        End Sub
        Private Sub SetMagazineColumnHeaders()

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.GrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.GrossAmount.ToString).Caption = GetHomeCurrencyCaption("Gross Amount")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NetAmount.ToString).Caption = GetHomeCurrencyCaption("Net Amount")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.BleedGrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.BleedGrossAmount.ToString).Caption = GetHomeCurrencyCaption("Bleed Gross Amount")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.BleedNetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.BleedNetAmount.ToString).Caption = GetHomeCurrencyCaption("Bleed Net Amount ")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PositionGrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PositionGrossAmount.ToString).Caption = GetHomeCurrencyCaption("Position Gross Amount ")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PositionNetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PositionNetAmount.ToString).Caption = GetHomeCurrencyCaption("Position Net Amount")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PremiumGrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PremiumGrossAmount.ToString).Caption = GetHomeCurrencyCaption("Premium Gross Amount")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PremiumNetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PremiumNetAmount.ToString).Caption = GetHomeCurrencyCaption("Premium Net Amount")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ColorGrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ColorGrossAmount.ToString).Caption = GetHomeCurrencyCaption("Color Gross Amount")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ColorNetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ColorNetAmount.ToString).Caption = GetHomeCurrencyCaption("Color Net Amount")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DiscountLN.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DiscountLN.ToString).Caption = GetHomeCurrencyCaption("Discount Line Net")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NetCharges.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NetCharges.ToString).Caption = GetHomeCurrencyCaption("Net Charges")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.VendorTax.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.VendorTax.ToString).Caption = GetHomeCurrencyCaption("Vendor Tax")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DisbursedAmount.ToString).Caption = GetHomeCurrencyCaption("Disbursed Amount")

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignGrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Gross Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignNetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignBleedGrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignBleedGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Bleed Gross Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignBleedNetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignBleedNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Bleed Net Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPositionGrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPositionGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Position Gross Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPositionNetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPositionNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Position Net Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPremiumGrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPremiumGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Premium Gross Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPremiumNetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPremiumNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Premium Net Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignColorGrossAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignColorGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Color Gross Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignColorNetAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignColorNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Color Net Amount"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignDiscountLineNet.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignDiscountLineNet.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Discount Line Net"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignNetCharges.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignNetCharges.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Charges"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignVendorTax.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignVendorTax.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Vendor Tax"

            End If

            If DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignDisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewMagazine_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignDisbursedAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Disbursed Amount"

            End If

        End Sub
        Private Sub SetMagazineOrderLineNumber(ByVal OrderLineNumber As Integer, ByVal RowHandle As Integer)

            'Dim AccountPayableMagazineDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) = Nothing
            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim MagazineDetail As AdvantageFramework.Database.Views.MagazineDetail = Nothing

            AccountPayableMagazineDistributionDetail = DirectCast(DataGridViewMagazine_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)

            AccountPayableMagazineDistributionDetail.OrderLineNumber = OrderLineNumber

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                OrderNumber = DataGridViewMagazine_DistributionDetails.CurrentView.GetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderNumber.ToString)

                If OrderNumber <> 0 Then

                    MagazineDetail = AdvantageFramework.Database.Procedures.MagazineDetailView.LoadActiveByOrderNumberLineNumber(DbContext, OrderNumber, OrderLineNumber)

                End If

                If MagazineDetail IsNot Nothing Then

                    'AccountPayableMagazineDistributionDetailList = DataGridViewMagazine_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)().ToList

                    'If (RowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableMagazineDistributionDetailList.Where(Function(APM) APM.OrderNumber IsNot Nothing AndAlso APM.OrderNumber = MagazineDetail.OrderNumber AndAlso APM.OrderLineNumber IsNot Nothing AndAlso APM.OrderLineNumber = MagazineDetail.LineNumber).Any) OrElse
                    '    RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableMagazineDistributionDetailList.Where(Function(APM) APM.OrderNumber IsNot Nothing AndAlso APM.OrderNumber = MagazineDetail.OrderNumber AndAlso APM.OrderLineNumber IsNot Nothing AndAlso APM.OrderLineNumber = MagazineDetail.LineNumber).Count > 1 Then

                    '    AdvantageFramework.WinForm.MessageBox.Show("This Order Number/Line has already been added.  Please choose another.")

                    '    AccountPayableMagazineDistributionDetail.OrderLineNumber = Nothing

                    'Else

                    AccountPayable.Classes.AccountPayableMagazineDistributionDetail.SetBaseValues(AccountPayableMagazineDistributionDetail, MagazineDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                    'End If

                End If

            End Using

        End Sub
        Private Sub SetMagazineOrderNumber(ByVal OrderNumber As Integer, ByVal FocusOrderLine As Boolean, ByVal RowHandle As Integer, Optional ByVal OrderLineNumber As Short = -1)

            Dim MagazineDetails As Generic.List(Of AdvantageFramework.Database.Views.MagazineDetail) = Nothing
            Dim AccountPayableMagazineDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) = Nothing
            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing
            Dim AddDetail As Boolean = True
            Dim GridColumn As DevExpress.XtraGrid.Columns.GridColumn = Nothing
            Dim InsertDate As Nullable(Of Date) = Nothing
            Dim MonthYearMagazineDetails As Generic.List(Of AdvantageFramework.Database.Views.MagazineDetail) = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                AccountPayableMagazineDistributionDetailList = DataGridViewMagazine_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)().ToList

                MagazineDetails = AdvantageFramework.Database.Procedures.MagazineDetailView.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber).ToList

                DirectCast(DataGridViewMagazine_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail).OrderNumber = OrderNumber

                If RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle Then

                    If OrderLineNumber = -1 Then

                        If MagazineDetails.Count = 1 Then

                            SetMagazineOrderLineNumber(MagazineDetails(0).LineNumber, RowHandle)

                        Else

                            DataGridViewMagazine_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderLineNumber.ToString, Nothing)

                        End If

                    Else

                        SetMagazineOrderLineNumber(OrderLineNumber, RowHandle)

                    End If

                Else

                    If MagazineDetails.Count > 1 AndAlso AccountPayableMagazineDistributionDetailList.Where(Function(APM) APM.OrderNumber IsNot Nothing AndAlso APM.OrderNumber = OrderNumber).Any = False Then

                        MonthYearMagazineDetails = New Generic.List(Of AdvantageFramework.Database.Views.MagazineDetail)

                        If OrderLineNumber <> -1 Then

                            InsertDate = MagazineDetails.Where(Function(Entity) Entity.OrderNumber = OrderNumber AndAlso Entity.LineNumber = OrderLineNumber).Select(Function(S) S.InsertDate.Value).FirstOrDefault

                            If InsertDate IsNot Nothing Then

                                MonthYearMagazineDetails.AddRange(MagazineDetails.Where(Function(Entity) Month(Entity.InsertDate.Value) = Month(InsertDate.Value) AndAlso Year(Entity.InsertDate.Value) = Year(InsertDate.Value)))

                            End If

                        End If

                        If MonthYearMagazineDetails.Count > 1 Then

                            If AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines for month/year?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                                AddDetail = False

                            Else

                                MagazineDetails = MonthYearMagazineDetails

                            End If

                        ElseIf AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines from this Order?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                            If OrderLineNumber = -1 Then

                                AddDetail = False

                            Else

                                AddDetail = False

                                SetMagazineOrderLineNumber(OrderLineNumber, RowHandle)

                                GridColumn = DataGridViewMagazine_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderLineNumber.ToString)
                                DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                            End If

                        End If

                    ElseIf OrderLineNumber <> -1 Then

                        AddDetail = False

                        SetMagazineOrderLineNumber(OrderLineNumber, RowHandle)

                    ElseIf MagazineDetails.Count > 1 Then

                        AddDetail = False

                    End If

                    If AddDetail AndAlso MagazineDetails.Count > 1 Then

                        For Each MagazineDetail In MagazineDetails

                            AccountPayableMagazineDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail(DbContext, MagazineDetail, NumericInputControl_VendorCurrencyRate.GetValue)

                            AccountPayableMagazineDistributionDetailList.Add(AccountPayableMagazineDistributionDetail)

                        Next

                        DataGridViewMagazine_DistributionDetails.DataSource = AccountPayableMagazineDistributionDetailList

                        CalculateTotalAmount()

                        SetVisibleGridColumns(TabItemAPDetails_MagazineTab)

                        FocusOrderLine = False

                        LoadMagazineRepositoryItems()

                    ElseIf AddDetail AndAlso MagazineDetails.Count = 1 Then

                        SetMagazineOrderLineNumber(MagazineDetails(0).LineNumber, RowHandle)

                    End If

                End If

                If FocusOrderLine AndAlso AddDetail Then

                    GridColumn = DataGridViewMagazine_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderLineNumber.ToString)
                    DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                End If

            End Using

        End Sub
        Private Sub SetNewspaperColumnHeaders()

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.Rate.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.Rate.ToString).Caption = GetHomeCurrencyCaption("Rate")

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.GrossAmount.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.GrossAmount.ToString).Caption = GetHomeCurrencyCaption("Gross Amount")

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NetAmount.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NetAmount.ToString).Caption = GetHomeCurrencyCaption("Net Amount")

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DiscountLN.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DiscountLN.ToString).Caption = GetHomeCurrencyCaption("Discount Line Net")

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NetCharges.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NetCharges.ToString).Caption = GetHomeCurrencyCaption("Net Charges")

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.VendorTax.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.VendorTax.ToString).Caption = GetHomeCurrencyCaption("Vendor Tax")

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DisbursedAmount.ToString).Caption = GetHomeCurrencyCaption("Disbursed Amount")

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignRate.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignRate.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Rate"

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignGrossAmount.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Gross Amount"

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignNetAmount.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Amount"

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignDiscountLineNet.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignDiscountLineNet.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Discount Line Net"

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignNetCharges.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignNetCharges.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Charges"

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignVendorTax.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignVendorTax.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Vendor Tax"

            End If

            If DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignDisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewNewspaper_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignDisbursedAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Disbursed Amount"

            End If

        End Sub
        Private Sub SetNewspaperOrderLineNumber(ByVal OrderLineNumber As Integer, ByVal RowHandle As Integer)

            'Dim AccountPayableNewspaperDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) = Nothing
            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim NewspaperDetail As AdvantageFramework.Database.Views.NewspaperDetail = Nothing

            AccountPayableNewspaperDistributionDetail = DirectCast(DataGridViewNewspaper_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)

            AccountPayableNewspaperDistributionDetail.OrderLineNumber = OrderLineNumber

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                OrderNumber = DataGridViewNewspaper_DistributionDetails.CurrentView.GetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderNumber.ToString)

                If OrderNumber <> 0 Then

                    NewspaperDetail = AdvantageFramework.Database.Procedures.NewspaperDetailView.LoadActiveByOrderNumberLineNumber(DbContext, OrderNumber, OrderLineNumber)

                End If

                If NewspaperDetail IsNot Nothing Then

                    'AccountPayableNewspaperDistributionDetailList = DataGridViewNewspaper_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)().ToList

                    'If (RowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableNewspaperDistributionDetailList.Where(Function(AP) AP.OrderNumber IsNot Nothing AndAlso AP.OrderNumber = NewspaperDetail.OrderNumber AndAlso AP.OrderLineNumber IsNot Nothing AndAlso AP.OrderLineNumber = NewspaperDetail.LineNumber).Any) OrElse
                    '    RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableNewspaperDistributionDetailList.Where(Function(AP) AP.OrderNumber IsNot Nothing AndAlso AP.OrderNumber = NewspaperDetail.OrderNumber AndAlso AP.OrderLineNumber IsNot Nothing AndAlso AP.OrderLineNumber = NewspaperDetail.LineNumber).Count > 1 Then

                    '    AdvantageFramework.WinForm.MessageBox.Show("This Order Number/Line has already been added.  Please choose another.")

                    '    AccountPayableNewspaperDistributionDetail.OrderLineNumber = Nothing

                    'Else

                    AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.SetBaseValues(AccountPayableNewspaperDistributionDetail, NewspaperDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                    'End If

                End If

            End Using

        End Sub
        Private Sub SetNewspaperOrderNumber(ByVal OrderNumber As Integer, ByVal FocusOrderLine As Boolean, ByVal RowHandle As Integer, Optional ByVal OrderLineNumber As Short = -1)

            Dim NewspaperDetails As Generic.List(Of AdvantageFramework.Database.Views.NewspaperDetail) = Nothing
            Dim AccountPayableNewspaperDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) = Nothing
            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing
            Dim AddDetail As Boolean = True
            Dim GridColumn As DevExpress.XtraGrid.Columns.GridColumn = Nothing
            Dim InsertDate As Nullable(Of Date) = Nothing
            Dim MonthYearNewspaperDetails As Generic.List(Of AdvantageFramework.Database.Views.NewspaperDetail) = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                AccountPayableNewspaperDistributionDetailList = DataGridViewNewspaper_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)().ToList

                NewspaperDetails = AdvantageFramework.Database.Procedures.NewspaperDetailView.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber).ToList

                DirectCast(DataGridViewNewspaper_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail).OrderNumber = OrderNumber

                If RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle Then

                    If OrderLineNumber = -1 Then

                        If NewspaperDetails.Count = 1 Then

                            SetNewspaperOrderLineNumber(NewspaperDetails(0).LineNumber, RowHandle)

                        Else

                            DataGridViewNewspaper_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderLineNumber.ToString, Nothing)

                        End If

                    Else

                        SetNewspaperOrderLineNumber(OrderLineNumber, RowHandle)

                    End If

                Else

                    If NewspaperDetails.Count > 1 AndAlso AccountPayableNewspaperDistributionDetailList.Where(Function(AP) AP.OrderNumber IsNot Nothing AndAlso AP.OrderNumber = OrderNumber).Any = False Then

                        MonthYearNewspaperDetails = New Generic.List(Of AdvantageFramework.Database.Views.NewspaperDetail)

                        If OrderLineNumber <> -1 Then

                            InsertDate = NewspaperDetails.Where(Function(Entity) Entity.OrderNumber = OrderNumber AndAlso Entity.LineNumber = OrderLineNumber).Select(Function(S) S.InsertDate.Value).FirstOrDefault

                            If InsertDate IsNot Nothing Then

                                MonthYearNewspaperDetails.AddRange(NewspaperDetails.Where(Function(Entity) Month(Entity.InsertDate.Value) = Month(InsertDate.Value) AndAlso Year(Entity.InsertDate.Value) = Year(InsertDate.Value)))

                            End If

                        End If

                        If MonthYearNewspaperDetails.Count > 1 Then

                            If AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines for month/year?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                                AddDetail = False

                            Else

                                NewspaperDetails = MonthYearNewspaperDetails

                            End If

                        ElseIf AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines from this Order?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                            If OrderLineNumber = -1 Then

                                AddDetail = False

                            Else

                                AddDetail = False

                                SetNewspaperOrderLineNumber(OrderLineNumber, RowHandle)

                                GridColumn = DataGridViewNewspaper_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderLineNumber.ToString)
                                DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                            End If

                        End If

                    ElseIf OrderLineNumber <> -1 Then

                        AddDetail = False

                        SetNewspaperOrderLineNumber(OrderLineNumber, RowHandle)

                    ElseIf NewspaperDetails.Count > 1 Then

                        AddDetail = False

                    End If

                    If AddDetail AndAlso NewspaperDetails.Count > 1 Then

                        For Each NewspaperDetail In NewspaperDetails

                            AccountPayableNewspaperDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail(DbContext, NewspaperDetail, NumericInputControl_VendorCurrencyRate.GetValue)

                            AccountPayableNewspaperDistributionDetailList.Add(AccountPayableNewspaperDistributionDetail)

                        Next

                        DataGridViewNewspaper_DistributionDetails.DataSource = AccountPayableNewspaperDistributionDetailList

                        CalculateTotalAmount()

                        SetVisibleGridColumns(TabItemAPDetails_NewspaperTab)

                        FocusOrderLine = False

                        LoadNewspaperRepositoryItems()

                    ElseIf AddDetail AndAlso NewspaperDetails.Count = 1 Then

                        SetNewspaperOrderLineNumber(NewspaperDetails(0).LineNumber, RowHandle)

                    End If

                End If

                If FocusOrderLine AndAlso AddDetail Then

                    GridColumn = DataGridViewNewspaper_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderLineNumber.ToString)
                    DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                End If

            End Using

        End Sub
        Private Sub SetNonClientOfficeCodeVisibility(ByVal DbContext As AdvantageFramework.Database.DbContext)

            If DataGridViewNonClient_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.OfficeCode.ToString) IsNot Nothing Then

                If AdvantageFramework.Database.Procedures.Agency.IsInterCompanyTransactionsEnabled(DbContext) = False AndAlso
                    DataGridViewNonClient_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.OfficeCode.ToString).Visible Then

                    DataGridViewNonClient_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.OfficeCode.ToString).Visible = False

                End If

            End If

        End Sub
        Private Sub SetNonClientPONumber(ByVal PurchaseOrderNumber As Integer, ByVal RowHandle As Integer)

            Dim PurchaseOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.PurchaseOrderDetail) = Nothing
            Dim AccountPayableGLDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail) = Nothing
            Dim AccountPayableGLDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail = Nothing
            Dim AddDetail As Boolean = True
            Dim PONumber As Integer = Nothing
            Dim LineNumber As Integer = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                AccountPayableGLDistributionDetailList = DataGridViewNonClient_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)().ToList

                PurchaseOrderDetails = AdvantageFramework.Database.Procedures.PurchaseOrderDetail.LoadByPurchaseOrderNumberForAccountPayableGLDistribution(DbContext, PurchaseOrderNumber).ToList

                If RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle Then

                    DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail).PODetailLineNumber = Nothing
                    DataGridViewNonClient_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.POComplete.ToString, 0)
                    DataGridViewNonClient_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.POAmount.ToString, Nothing)
                    DataGridViewNonClient_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.POBalance.ToString, Nothing)

                Else

                    If PurchaseOrderDetails.Count > 1 AndAlso AccountPayableGLDistributionDetailList.Where(Function(apg) apg.PONumber IsNot Nothing AndAlso apg.PONumber = PurchaseOrderNumber).Any = False Then

                        If AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines from this PO?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "PO Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                            AddDetail = False

                        End If

                    ElseIf PurchaseOrderDetails.Count > 1 Then

                        AddDetail = False

                    End If

                    If AddDetail AndAlso PurchaseOrderDetails.Count > 1 Then

                        For Each PurchaseOrderDetail In PurchaseOrderDetails

                            PONumber = PurchaseOrderDetail.PurchaseOrderNumber
                            LineNumber = PurchaseOrderDetail.LineNumber

                            If AccountPayableGLDistributionDetailList.Where(Function(apg) apg.PONumber IsNot Nothing AndAlso apg.PODetailLineNumber IsNot Nothing AndAlso apg.PONumber = PONumber AndAlso apg.PODetailLineNumber = LineNumber).Any = False Then

                                AccountPayableGLDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail(
                                        DbContext,
                                        PurchaseOrderDetail.PurchaseOrderNumber,
                                        PurchaseOrderDetail.LineNumber,
                                        If(PurchaseOrderDetail.ExtendedAmount Is Nothing, 0, PurchaseOrderDetail.ExtendedAmount),
                                        If(PurchaseOrderDetail.GLACode Is Nothing, "", PurchaseOrderDetail.GLACode), NumericInputControl_VendorCurrencyRate.GetValue)

                                AccountPayableGLDistributionDetailList.Add(AccountPayableGLDistributionDetail)

                            End If

                        Next

                        DataGridViewNonClient_DistributionDetails.DataSource = AccountPayableGLDistributionDetailList

                        SetVisibleGridColumns(TabItemAPDetails_NonClientTab)

                        CalculateTotalAmount()

                        LoadNonClientRepositoryItems()

                        SetNonClientOfficeCodeVisibility(DbContext)

                    ElseIf AddDetail AndAlso PurchaseOrderDetails.Count = 1 Then

                        DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail).PONumber = PurchaseOrderNumber
                        SetNonClientPODetailLineNumber(PurchaseOrderDetails(0).LineNumber, RowHandle)

                    End If

                End If

            End Using

        End Sub
        Private Sub SetNonClientPODetailLineNumber(ByVal PODetailLineNumber As Short, ByVal RowHandle As Integer)

            Dim PONumber As Integer = 0
            Dim PurchaseOrderDetail As AdvantageFramework.Database.Entities.PurchaseOrderDetail = Nothing
            Dim AccountPayableGLDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail) = Nothing
            Dim AccountPayableGLDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail = Nothing
            Dim GLAOfficeXREFCode As String = Nothing
            Dim GeneralLedgerOfficeCrossReference As AdvantageFramework.Database.Entities.GeneralLedgerOfficeCrossReference = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                PONumber = DataGridViewNonClient_DistributionDetails.CurrentView.GetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.PONumber.ToString)

                If PONumber <> 0 Then

                    PurchaseOrderDetail = AdvantageFramework.Database.Procedures.PurchaseOrderDetail.LoadByPONumberAndLineNumber(DbContext, PONumber, PODetailLineNumber)

                End If

                AccountPayableGLDistributionDetail = DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)

                If PurchaseOrderDetail IsNot Nothing Then

                    AccountPayableGLDistributionDetailList = DataGridViewNonClient_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)().ToList

                    AccountPayableGLDistributionDetail.PODetailLineNumber = PODetailLineNumber
                    AccountPayableGLDistributionDetail.POComplete = 1
                    AccountPayableGLDistributionDetail.POAmount = PurchaseOrderDetail.ExtendedAmount
                    AccountPayableGLDistributionDetail.Comment = PurchaseOrderDetail.LineDescription

                    If PurchaseOrderDetail.GLACode IsNot Nothing Then

                        AccountPayableGLDistributionDetail.GLACode = PurchaseOrderDetail.GLACode
                        AccountPayableGLDistributionDetail.GLADescription = PurchaseOrderDetail.GeneralLedgerAccount.Description

                        GLAOfficeXREFCode = AdvantageFramework.Database.Procedures.GeneralLedgerAccount.LoadByGLACode(DbContext, PurchaseOrderDetail.GLACode).GeneralLedgerOfficeCrossReferenceCode

                        If GLAOfficeXREFCode IsNot Nothing Then

                            GeneralLedgerOfficeCrossReference = AdvantageFramework.Database.Procedures.GeneralLedgerOfficeCrossReference.LoadByCode(DbContext, GLAOfficeXREFCode)

                            If GeneralLedgerOfficeCrossReference IsNot Nothing Then

                                DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail).OfficeCode = GeneralLedgerOfficeCrossReference.OfficeCode

                            End If

                        End If

                    End If

                    AccountPayableGLDistributionDetail.POBalance = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.CalculatePOBalance(DbContext, PurchaseOrderDetail.ExtendedAmount.GetValueOrDefault(0), PONumber, PODetailLineNumber)

                    AccountPayableGLDistributionDetail.Amount = AccountPayableGLDistributionDetail.POBalance
                    AccountPayableGLDistributionDetail.ForeignAmount = AccountPayableGLDistributionDetail.Amount / NumericInputControl_VendorCurrencyRate.GetValue

                Else

                    AccountPayableGLDistributionDetail.POComplete = 0
                    AccountPayableGLDistributionDetail.POAmount = Nothing
                    AccountPayableGLDistributionDetail.GLACode = ""
                    AccountPayableGLDistributionDetail.POBalance = Nothing
                    AccountPayableGLDistributionDetail.Comment = Nothing

                End If

            End Using

        End Sub
        Private Sub SetProductionPODetailLineNumber(ByVal PODetailLineNumber As Integer, ByVal RowHandle As Integer)

            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing
            Dim PONumber As Integer = Nothing
            Dim PurchaseOrderDetail As AdvantageFramework.Database.Entities.PurchaseOrderDetail = Nothing
            Dim JobProcessNumberList As Generic.List(Of Short) = Nothing
            Dim IsAPLimitByOfficeEnabled As Boolean = False

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                IsAPLimitByOfficeEnabled = AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext)

                PONumber = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.PONumber.ToString)

                If PONumber <> 0 Then

                    PurchaseOrderDetail = AdvantageFramework.Database.Procedures.PurchaseOrderDetail.LoadByPONumberAndLineNumber(DbContext, PONumber, PODetailLineNumber)

                End If

                AccountPayableProductionDistributionDetail = DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)

                If PurchaseOrderDetail IsNot Nothing Then

                    JobProcessNumberList = New Generic.List(Of Short)
                    JobProcessNumberList.AddRange({1, 3, 4, 8, 9, 13})

                    If (IsAPLimitByOfficeEnabled AndAlso PurchaseOrderDetail.Job.OfficeCode <> ComboBoxControl_Office.GetSelectedValue) Then

                        AccountPayableProductionDistributionDetail.PODetailLineNumber = Nothing

                        AdvantageFramework.WinForm.MessageBox.Show("Entry is not allowed due to office mismatch.")

                    ElseIf JobProcessNumberList.Contains(PurchaseOrderDetail.JobComponent.JobProcessNumber.GetValueOrDefault(0)) = False Then

                        AccountPayableProductionDistributionDetail.PODetailLineNumber = Nothing

                        AdvantageFramework.WinForm.MessageBox.Show("Entry is not allowed due to jobs process control.")

                    Else

                        AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.SetValuesFromPODetail(AccountPayableProductionDistributionDetail, PurchaseOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                        CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                    End If

                Else

                    AccountPayableProductionDistributionDetail.POComplete = 0
                    AccountPayableProductionDistributionDetail.POAmount = 0
                    AccountPayableProductionDistributionDetail.GLACode = ""
                    AccountPayableProductionDistributionDetail.POBalance = 0

                End If

                DataGridViewProduction_DistributionDetails.CurrentView.RefreshRow(RowHandle)

            End Using

        End Sub
        Private Sub SetOutOfHomeColumnHeaders()

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.GrossAmount.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.GrossAmount.ToString).Caption = GetHomeCurrencyCaption("Gross Amount")

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NetAmount.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NetAmount.ToString).Caption = GetHomeCurrencyCaption("Net Amount")

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DiscountAmount.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DiscountAmount.ToString).Caption = GetHomeCurrencyCaption("Discount Amount")

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NetCharges.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NetCharges.ToString).Caption = GetHomeCurrencyCaption("Net Charges")

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.VendorTax.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.VendorTax.ToString).Caption = GetHomeCurrencyCaption("Vendor Tax")

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DisbursedAmount.ToString).Caption = GetHomeCurrencyCaption("Disbursed Amount")

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignGrossAmount.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Gross Amount"

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignNetAmount.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Amount"

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignDiscountAmount.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignDiscountAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Discount Amount"

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignNetCharges.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignNetCharges.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Charges"

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignVendorTax.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignVendorTax.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Vendor Tax"

            End If

            If DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignDisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewOutOfHome_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignDisbursedAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Disbursed Amount"

            End If

        End Sub
        Private Sub SetOutOfHomeOrderLineNumber(ByVal OrderLineNumber As Integer, ByVal RowHandle As Integer)

            'Dim AccountPayableOutOfHomeDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim OutOfHomeOrderDetail As AdvantageFramework.Database.Entities.OutOfHomeOrderDetail = Nothing

            AccountPayableOutOfHomeDistributionDetail = DirectCast(DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)

            AccountPayableOutOfHomeDistributionDetail.OutdoorDetailLineNumber = OrderLineNumber

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                OrderNumber = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorOrderNumber.ToString)

                If OrderNumber <> 0 Then

                    OutOfHomeOrderDetail = AdvantageFramework.Database.Procedures.OutOfHomeOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, OrderNumber, OrderLineNumber)

                End If

                If OutOfHomeOrderDetail IsNot Nothing Then

                    'AccountPayableOutOfHomeDistributionDetailList = DataGridViewOutOfHome_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)().ToList

                    'If (RowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableOutOfHomeDistributionDetailList.Where(Function(Entity) Entity.OutdoorOrderNumber IsNot Nothing AndAlso Entity.OutdoorOrderNumber = OutOfHomeOrderDetail.OutofHomeOrderNumber AndAlso Entity.OutdoorDetailLineNumber IsNot Nothing AndAlso Entity.OutdoorDetailLineNumber = OutOfHomeOrderDetail.LineNumber).Any) OrElse
                    '    RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableOutOfHomeDistributionDetailList.Where(Function(Entity) Entity.OutdoorOrderNumber IsNot Nothing AndAlso Entity.OutdoorOrderNumber = OutOfHomeOrderDetail.OutofHomeOrderNumber AndAlso Entity.OutdoorDetailLineNumber IsNot Nothing AndAlso Entity.OutdoorDetailLineNumber = OutOfHomeOrderDetail.LineNumber).Count > 1 Then

                    '    AdvantageFramework.WinForm.MessageBox.Show("This Order Number/Line has already been added.  Please choose another.")

                    '    DirectCast(DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail).OutdoorOrderNumber = Nothing

                    'Else

                    AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.SetBaseValues(AccountPayableOutOfHomeDistributionDetail, OutOfHomeOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                    'End If

                End If

            End Using

        End Sub
        Private Sub SetOutOfHomeOrderNumber(ByVal OrderNumber As Integer, ByVal FocusOrderLine As Boolean, ByVal RowHandle As Integer, Optional ByVal OrderLineNumber As Short = -1)

            Dim OutOfHomeOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.OutOfHomeOrderDetail) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing
            Dim AddDetail As Boolean = True
            Dim GridColumn As DevExpress.XtraGrid.Columns.GridColumn = Nothing
            Dim PostDate As Nullable(Of Date) = Nothing
            Dim MonthYearOutOfHomeOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.OutOfHomeOrderDetail) = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                AccountPayableOutOfHomeDistributionDetailList = DataGridViewOutOfHome_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)().ToList

                OutOfHomeOrderDetails = AdvantageFramework.Database.Procedures.OutOfHomeOrderDetail.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber).ToList

                DirectCast(DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail).OutdoorOrderNumber = OrderNumber

                If RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle Then

                    If OrderLineNumber = -1 Then

                        If OutOfHomeOrderDetails.Count = 1 Then

                            SetOutOfHomeOrderLineNumber(OutOfHomeOrderDetails(0).LineNumber, RowHandle)

                        Else

                            DataGridViewOutOfHome_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorDetailLineNumber.ToString, Nothing)

                        End If

                    Else

                        SetOutOfHomeOrderLineNumber(OrderLineNumber, RowHandle)

                    End If

                Else

                    If OutOfHomeOrderDetails.Count > 1 AndAlso AccountPayableOutOfHomeDistributionDetailList.Where(Function(Entity) Entity.OutdoorOrderNumber IsNot Nothing AndAlso Entity.OutdoorOrderNumber = OrderNumber).Any = False Then

                        MonthYearOutOfHomeOrderDetails = New Generic.List(Of AdvantageFramework.Database.Entities.OutOfHomeOrderDetail)

                        If OrderLineNumber <> -1 Then

                            PostDate = OutOfHomeOrderDetails.Where(Function(Entity) Entity.OutofHomeOrderNumber = OrderNumber AndAlso Entity.LineNumber = OrderLineNumber).Select(Function(S) S.PostDate.Value).FirstOrDefault

                            If PostDate IsNot Nothing Then

                                MonthYearOutOfHomeOrderDetails.AddRange(OutOfHomeOrderDetails.Where(Function(Entity) Month(Entity.PostDate.Value) = Month(PostDate.Value) AndAlso Year(Entity.PostDate.Value) = Year(PostDate.Value)))

                            End If

                        End If

                        If MonthYearOutOfHomeOrderDetails.Count > 1 Then

                            If AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines for month/year?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                                AddDetail = False

                            Else

                                OutOfHomeOrderDetails = MonthYearOutOfHomeOrderDetails

                            End If

                        ElseIf AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines from this Order?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                            If OrderLineNumber = -1 Then

                                AddDetail = False

                            Else

                                AddDetail = False

                                SetOutOfHomeOrderLineNumber(OrderLineNumber, RowHandle)

                                GridColumn = DataGridViewOutOfHome_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorDetailLineNumber.ToString)
                                DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                            End If

                        End If

                    ElseIf OrderLineNumber <> -1 Then

                        AddDetail = False

                        SetOutOfHomeOrderLineNumber(OrderLineNumber, RowHandle)

                    ElseIf OutOfHomeOrderDetails.Count > 1 Then

                        AddDetail = False

                    End If

                    If AddDetail AndAlso OutOfHomeOrderDetails.Count > 1 Then

                        For Each OutOfHomeOrderDetail In OutOfHomeOrderDetails

                            AccountPayableOutOfHomeDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail(DbContext, OutOfHomeOrderDetail, NumericInputControl_VendorCurrencyRate.GetValue)

                            AccountPayableOutOfHomeDistributionDetailList.Add(AccountPayableOutOfHomeDistributionDetail)

                        Next

                        DataGridViewOutOfHome_DistributionDetails.DataSource = AccountPayableOutOfHomeDistributionDetailList

                        CalculateTotalAmount()

                        SetVisibleGridColumns(TabItemAPDetails_OutOfHomeTab)

                        FocusOrderLine = False

                        LoadOutOfHomeRepositoryItems()

                    ElseIf AddDetail AndAlso OutOfHomeOrderDetails.Count = 1 Then

                        SetOutOfHomeOrderLineNumber(OutOfHomeOrderDetails(0).LineNumber, RowHandle)

                    End If

                End If

                If FocusOrderLine AndAlso AddDetail Then

                    GridColumn = DataGridViewOutOfHome_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorDetailLineNumber.ToString)
                    DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                End If

            End Using

        End Sub
        Private Sub SetProductionColumnHeaders()

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Rate.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Rate.ToString).Caption = GetHomeCurrencyCaption("Rate")

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignRate.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignRate.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Rate"

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedAmount.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedAmount.ToString).Caption = GetHomeCurrencyCaption("Extended Amount")

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignExtendedAmount.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignExtendedAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Extended Amount"

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedNonResaleTax.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedNonResaleTax.ToString).Caption = GetHomeCurrencyCaption("Vendor Tax")

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignExtendedNonResaleTax.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignExtendedNonResaleTax.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Vendor Tax"

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ResaleTax.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ResaleTax.ToString).Caption = GetHomeCurrencyCaption("Resale Tax")

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedMarkupAmount.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedMarkupAmount.ToString).Caption = GetHomeCurrencyCaption("Markup Amount")

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.LineTotal.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.LineTotal.ToString).Caption = GetHomeCurrencyCaption("Total")

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Disbursed.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Disbursed.ToString).Caption = GetHomeCurrencyCaption("Disbursed")

            End If

            If DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignDisbursed.ToString) IsNot Nothing Then

                DataGridViewProduction_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignDisbursed.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Disbursed"

            End If

        End Sub
        Private Sub SetProductionPONumber(ByVal PurchaseOrderNumber As Integer, ByVal RowHandle As Integer)

            Dim PurchaseOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.PurchaseOrderDetail) = Nothing
            Dim AccountPayableProductionDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail) = Nothing
            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing
            Dim AddDetail As Boolean = True
            Dim GridColumn As DevExpress.XtraGrid.Columns.GridColumn = Nothing
            Dim IsAPLimitByOfficeEnabled As Boolean = False
            Dim JobProcessNumberList As Generic.List(Of Short) = Nothing
            Dim Failed As Boolean = False
            Dim POStatus As String = Nothing
            Dim AllowContinue As Boolean = True

            JobProcessNumberList = New Generic.List(Of Short)
            JobProcessNumberList.AddRange({1, 3, 4, 8, 9, 13})

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                IsAPLimitByOfficeEnabled = AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext)

                AccountPayableProductionDistributionDetailList = DataGridViewProduction_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)().ToList

                PurchaseOrderDetails = AdvantageFramework.AccountPayable.GetPurchaseOrderLineNumbers(DbContext, PurchaseOrderNumber)

                If PurchaseOrderDetails.FirstOrDefault IsNot Nothing AndAlso PurchaseOrderDetails.FirstOrDefault.PurchaseOrder IsNot Nothing Then

                    If PurchaseOrderDetails.FirstOrDefault.PurchaseOrder.PurchaseOrderApprovalRuleCode IsNot Nothing AndAlso PurchaseOrderDetails.FirstOrDefault.PurchaseOrder.ApprovalFlag = 1 Then

                        POStatus = "Pending"

                    ElseIf PurchaseOrderDetails.FirstOrDefault.PurchaseOrder.PurchaseOrderApprovalRuleCode IsNot Nothing AndAlso PurchaseOrderDetails.FirstOrDefault.PurchaseOrder.ApprovalFlag = 3 Then

                        POStatus = "Denied"

                    ElseIf PurchaseOrderDetails.FirstOrDefault.PurchaseOrder.PurchaseOrderApprovalRuleCode IsNot Nothing _
                            AndAlso PurchaseOrderDetails.FirstOrDefault.PurchaseOrder.ApprovalFlag.GetValueOrDefault(0) = 0 _
                            AndAlso PurchaseOrderDetails.FirstOrDefault.PurchaseOrder.IsPrinted.GetValueOrDefault(0) = 0 Then

                        POStatus = "Incomplete"

                    End If

                End If

                If POStatus IsNot Nothing AndAlso AdvantageFramework.WinForm.MessageBox.Show("Continue posting against a PO with status of '" & POStatus & "'?", MessageBox.MessageBoxButtons.YesNo, , Windows.Forms.MessageBoxIcon.Exclamation, Windows.Forms.MessageBoxDefaultButton.Button2) = MessageBox.DialogResults.No Then

                    DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).PONumber = Nothing

                    AllowContinue = False

                End If

                If AllowContinue Then

                    DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).PONumber = PurchaseOrderNumber

                    If RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle Then

                        If PurchaseOrderDetails.Count = 1 Then

                            SetProductionPODetailLineNumber(PurchaseOrderDetails(0).LineNumber, RowHandle)

                        End If

                    Else

                        If PurchaseOrderDetails.Count > 1 AndAlso AccountPayableProductionDistributionDetailList.Where(Function(app) app.PONumber IsNot Nothing AndAlso app.PONumber = PurchaseOrderNumber).Any = False Then

                            If AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines from this PO?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "PO Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.No Then

                                AddDetail = False

                            End If

                        ElseIf PurchaseOrderDetails.Count > 1 Then

                            AddDetail = False

                        End If

                        If AddDetail AndAlso PurchaseOrderDetails.Count > 1 Then

                            For Each PurchaseOrderDetail In PurchaseOrderDetails

                                If ((IsAPLimitByOfficeEnabled AndAlso PurchaseOrderDetail.Job.OfficeCode = ComboBoxControl_Office.GetSelectedValue) OrElse (IsAPLimitByOfficeEnabled = False)) AndAlso
                                        JobProcessNumberList.Contains(PurchaseOrderDetail.JobComponent.JobProcessNumber.GetValueOrDefault(0)) Then

                                    AccountPayableProductionDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail(DbContext, PurchaseOrderDetail, NumericInputControl_VendorCurrencyRate.GetValue, _Session)

                                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                                    AccountPayableProductionDistributionDetailList.Add(AccountPayableProductionDistributionDetail)

                                Else

                                    Failed = True

                                End If

                            Next

                            DataGridViewProduction_DistributionDetails.DataSource = AccountPayableProductionDistributionDetailList

                            SetVisibleGridColumns(TabItemAPDetails_ProductionTab)

                            CalculateTotalAmount()

                            LoadProductionRepositoryItems()

                            If Failed Then

                                AdvantageFramework.WinForm.MessageBox.Show("One or more PO Lines failed to add due to either office mismatch or job process control.")

                            End If

                        ElseIf AddDetail AndAlso PurchaseOrderDetails.Count = 1 Then

                            SetProductionPODetailLineNumber(PurchaseOrderDetails(0).LineNumber, RowHandle)
                            GridColumn = DataGridViewProduction_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.PODetailLineNumber.ToString)
                            DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                        End If

                    End If

                End If

            End Using

        End Sub
        Private Sub SetProductionJob(ByVal JobNumber As Integer, ByVal RowHandle As Integer)

            Dim Job As AdvantageFramework.Database.Entities.Job = Nothing
            Dim JobComponentList As Generic.List(Of AdvantageFramework.Database.Entities.JobComponent) = Nothing
            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Job = AdvantageFramework.Database.Procedures.Job.LoadByJobNumber(DbContext, JobNumber)

                If Job IsNot Nothing Then

                    AccountPayableProductionDistributionDetail = DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)

                    AccountPayableProductionDistributionDetail.ClientCode = Job.ClientCode
                    AccountPayableProductionDistributionDetail.DivisionCode = Job.DivisionCode
                    AccountPayableProductionDistributionDetail.ProductCode = Job.ProductCode
                    AccountPayableProductionDistributionDetail.OfficeCode = Job.OfficeCode
                    AccountPayableProductionDistributionDetail.JobDescription = Job.Description
                    AccountPayableProductionDistributionDetail.IsNonBillable = 0

                    JobComponentList = AdvantageFramework.Database.Procedures.JobComponent.LoadAndFilterByClientDivisionProductAndJob(DbContext, Job.ClientCode, Job.DivisionCode, Job.ProductCode, Job.Number).ToList

                    If JobComponentList.Count = 1 Then

                        AccountPayableProductionDistributionDetail.JobComponentNumber = JobComponentList(0).Number
                        AccountPayableProductionDistributionDetail.JobCompDescription = JobComponentList(0).Description
                        AccountPayableProductionDistributionDetail.IsAdvanceBilling = If(JobComponentList(0).IsAdvanceBilling.GetValueOrDefault(0) = 0, 0, 2)

                        SetProductionJobComponentDetails(JobNumber, JobComponentList(0).Number, RowHandle)

                    End If

                End If

            End Using

        End Sub
        Private Sub SetProductionJobComponentDetails(ByVal JobNumber As Integer, ByVal JobComponentNumber As Integer, ByVal RowHandle As Integer)

            Dim JobComponent As AdvantageFramework.Database.Entities.JobComponent = Nothing
            Dim BillingRate As AdvantageFramework.Database.Classes.BillingRate = Nothing
            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing
            Dim Job As AdvantageFramework.Database.Entities.Job = Nothing
            Dim Vendor As AdvantageFramework.Database.Entities.Vendor = Nothing
            Dim [Function] As AdvantageFramework.Database.Entities.Function = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                JobComponent = AdvantageFramework.Database.Procedures.JobComponent.LoadByJobNumberAndJobComponentNumber(DbContext, JobNumber, JobComponentNumber)

                If JobComponent IsNot Nothing Then

                    AccountPayableProductionDistributionDetail = DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)

                    AccountPayableProductionDistributionDetail.JobNumber = JobNumber
                    AccountPayableProductionDistributionDetail.JobComponentNumber = JobComponentNumber
                    AccountPayableProductionDistributionDetail.JobCompDescription = JobComponent.Description
                    AccountPayableProductionDistributionDetail.IsAdvanceBilling = If(JobComponent.IsAdvanceBilling.GetValueOrDefault(0) = 0, 0, 2)
                    AccountPayableProductionDistributionDetail.IsNonBillable = JobComponent.IsNonbillable

                    If String.IsNullOrEmpty(AccountPayableProductionDistributionDetail.FunctionCode) Then

                        Vendor = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, SearchableComboBoxControl_Vendor.SelectedValue)

                        If Vendor.FunctionCode IsNot Nothing Then

                            AccountPayableProductionDistributionDetail.FunctionCode = Vendor.FunctionCode

                            [Function] = AdvantageFramework.Database.Procedures.Function.LoadByFunctionCode(DbContext, Vendor.FunctionCode)

                            If [Function] IsNot Nothing Then

                                AccountPayableProductionDistributionDetail.FunctionDescription = [Function].Description

                            End If

                        End If

                    End If

                    If AccountPayableProductionDistributionDetail.FunctionCode IsNot Nothing Then

                        BillingRate = AdvantageFramework.ExpenseReports.LoadBillingRate(DbContext, AccountPayableProductionDistributionDetail.FunctionCode, AccountPayableProductionDistributionDetail.ClientCode,
                                                                AccountPayableProductionDistributionDetail.DivisionCode, AccountPayableProductionDistributionDetail.ProductCode, JobNumber,
                                                                JobComponentNumber, JobComponent.Job.SalesClassCode, Nothing, Nothing)

                        If BillingRate IsNot Nothing Then

                            AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.ProcessBillingRate(BillingRate, DbContext, AccountPayableProductionDistributionDetail, False)

                            If String.IsNullOrEmpty(AccountPayableProductionDistributionDetail.GLACode) Then

                                AdvantageFramework.WinForm.MessageBox.Show("This function selected is non-billable, select a GL account.")

                            End If

                        End If

                        CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                    ElseIf AccountPayableProductionDistributionDetail.IsNonBillable.GetValueOrDefault(0) = 1 Then

                        AdvantageFramework.WinForm.MessageBox.Show("The job component selected is non-billable, select a GL account.")
                        AccountPayableProductionDistributionDetail.OfficeCode = Nothing
                        AccountPayableProductionDistributionDetail.GLACode = Nothing
                        AccountPayableProductionDistributionDetail.GLADescription = Nothing

                    End If

                    If AccountPayableProductionDistributionDetail.IsNonBillable.GetValueOrDefault(0) = 0 Then

                        Job = AdvantageFramework.Database.Procedures.Job.LoadByJobNumber(DbContext, JobNumber)

                        If Job IsNot Nothing AndAlso Job.Office IsNot Nothing Then

                            AccountPayableProductionDistributionDetail.OfficeCode = Job.Office.Code
                            AccountPayableProductionDistributionDetail.GLACode = Job.Office.ProductionWorkInProgressGLACode
                            AccountPayableProductionDistributionDetail.GLADescription = AdvantageFramework.AccountPayable.GetGeneralLedgerAccountDescription(DbContext, AccountPayableProductionDistributionDetail.GLACode)

                        End If

                    End If

                End If

            End Using

        End Sub
        Private Sub RefreshBillingRate(ByVal RowHandle As Integer)

            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing
            Dim Job As AdvantageFramework.Database.Entities.Job = Nothing
            Dim BillingRate As AdvantageFramework.Database.Classes.BillingRate = Nothing

            AccountPayableProductionDistributionDetail = DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)

            If AccountPayableProductionDistributionDetail.JobNumber IsNot Nothing AndAlso AccountPayableProductionDistributionDetail.JobComponentNumber IsNot Nothing Then

                Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    Job = AdvantageFramework.Database.Procedures.Job.LoadByJobNumber(DbContext, AccountPayableProductionDistributionDetail.JobNumber)

                    If Job IsNot Nothing Then

                        BillingRate = AdvantageFramework.ExpenseReports.LoadBillingRate(DbContext, AccountPayableProductionDistributionDetail.FunctionCode, AccountPayableProductionDistributionDetail.ClientCode,
                                                                                        AccountPayableProductionDistributionDetail.DivisionCode, AccountPayableProductionDistributionDetail.ProductCode, AccountPayableProductionDistributionDetail.JobNumber,
                                                                                        AccountPayableProductionDistributionDetail.JobComponentNumber, Job.SalesClassCode, Nothing, Nothing)

                        If BillingRate IsNot Nothing Then

                            AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.ProcessBillingRate(BillingRate, DbContext, AccountPayableProductionDistributionDetail, False)

                            If String.IsNullOrEmpty(AccountPayableProductionDistributionDetail.GLACode) AndAlso AccountPayableProductionDistributionDetail.FunctionCode IsNot Nothing Then

                                AdvantageFramework.WinForm.MessageBox.Show("This function selected is non-billable, select a GL account.")

                            End If

                        End If

                        If AccountPayableProductionDistributionDetail.IsNonBillable.GetValueOrDefault(0) = 0 Then

                            If Job.Office IsNot Nothing Then

                                AccountPayableProductionDistributionDetail.OfficeCode = Job.Office.Code
                                AccountPayableProductionDistributionDetail.GLACode = Job.Office.ProductionWorkInProgressGLACode
                                AccountPayableProductionDistributionDetail.GLADescription = AdvantageFramework.AccountPayable.GetGeneralLedgerAccountDescription(DbContext, AccountPayableProductionDistributionDetail.GLACode)

                            End If

                        End If

                        CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                    End If

                End Using

            End If

        End Sub
        Private Sub SetRadioDetailFromNewOrder(ByVal OrderLineNumber As Integer, ByVal RowHandle As Integer)

            'Dim AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim RadioOrderDetail As AdvantageFramework.Database.Entities.RadioOrderDetail = Nothing

            AccountPayableRadioDistributionDetail = DirectCast(DataGridViewRadio_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

            AccountPayableRadioDistributionDetail.OrderLineNumber = OrderLineNumber
            AccountPayableRadioDistributionDetail.RewriteFlag = 1

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                OrderNumber = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderNumber.ToString)

                If OrderNumber <> 0 Then

                    RadioOrderDetail = AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, OrderNumber, OrderLineNumber)

                End If

                If RadioOrderDetail IsNot Nothing Then

                    'AccountPayableRadioDistributionDetailList = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)().ToList

                    'If (RowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = RadioOrderDetail.RadioOrderNumber AndAlso Entity.OrderLineNumber IsNot Nothing AndAlso Entity.OrderLineNumber = RadioOrderDetail.LineNumber).Any) OrElse
                    '    RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = RadioOrderDetail.RadioOrderNumber AndAlso Entity.OrderLineNumber IsNot Nothing AndAlso Entity.OrderLineNumber = RadioOrderDetail.LineNumber).Count > 1 Then

                    '    AdvantageFramework.WinForm.MessageBox.Show("This Order Number/Line has already been added.  Please choose another.")

                    '    AccountPayableRadioDistributionDetail.OrderNumber = Nothing
                    '    AccountPayableRadioDistributionDetail.OrderLineNumber = Nothing

                    'Else

                    AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.SetBaseValues(AccountPayableRadioDistributionDetail, RadioOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                    'End If

                End If

            End Using

        End Sub
        Private Sub SetRadioColumnHeaders()

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.GrossAmount.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.GrossAmount.ToString).Caption = GetHomeCurrencyCaption("Gross Amount")

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ExtendedNetAmount.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ExtendedNetAmount.ToString).Caption = GetHomeCurrencyCaption("Extended Net Amount")

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DiscountAmount.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DiscountAmount.ToString).Caption = GetHomeCurrencyCaption("Discount Amount")

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NetCharges.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NetCharges.ToString).Caption = GetHomeCurrencyCaption("Net Charges")

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.VendorTax.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.VendorTax.ToString).Caption = GetHomeCurrencyCaption("Vendor Tax")

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DisbursedAmount.ToString).Caption = GetHomeCurrencyCaption("Disbursed Amount")

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignGrossAmount.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Gross Amount"

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignExtendedNetAmount.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignExtendedNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Extended Net Amount"

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignDiscountAmount.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignDiscountAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Discount Amount"

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignNetCharges.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignNetCharges.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Charges"

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignVendorTax.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignVendorTax.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Vendor Tax"

            End If

            If DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignDisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewRadio_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignDisbursedAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Disbursed Amount"

            End If

        End Sub
        Private Sub SetRadioDetailFromLegacyOrder(ByVal OrderNumber As Integer, ByVal BroadcastMonth As String, ByVal BroadcastYear As Short, ByVal RowHandle As Integer)

            'Dim AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing
            Dim RadioOrderLegacy As AdvantageFramework.Database.Entities.RadioOrderLegacy = Nothing

            AccountPayableRadioDistributionDetail = DirectCast(DataGridViewRadio_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

            AccountPayableRadioDistributionDetail.OrderNumber = OrderNumber
            AccountPayableRadioDistributionDetail.BroadcastMonth = BroadcastMonth
            AccountPayableRadioDistributionDetail.BroadcastYear = BroadcastYear

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If OrderNumber <> 0 Then

                    RadioOrderLegacy = AdvantageFramework.Database.Procedures.RadioOrderLegacy.LoadByOrderNumber(DbContext, OrderNumber)

                End If

                If RadioOrderLegacy IsNot Nothing Then

                    'AccountPayableRadioDistributionDetailList = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)().ToList

                    'If (RowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = OrderNumber AndAlso Entity.BroadcastMonth = BroadcastMonth AndAlso Entity.BroadcastYear IsNot Nothing AndAlso Entity.BroadcastYear = BroadcastYear).Any) OrElse
                    '    RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = OrderNumber AndAlso Entity.BroadcastMonth = BroadcastMonth AndAlso Entity.BroadcastYear IsNot Nothing AndAlso Entity.BroadcastYear = BroadcastYear).Count > 1 Then

                    '    AdvantageFramework.WinForm.MessageBox.Show("The selected order has already been disbursed to this broadcast month.  Please choose another.")

                    '    AccountPayableRadioDistributionDetail.OrderNumber = Nothing

                    'Else

                    AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.SetBaseValues(AccountPayableRadioDistributionDetail, RadioOrderLegacy, BroadcastYear, BroadcastMonth, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                    'End If

                End If

            End Using

        End Sub
        Private Sub SetRadioOrderNumber(ByVal OrderNumber As Integer, ByVal RowHandle As Integer, ByVal MonthName As String, Optional ByVal OrderLineNumber As Integer = -1)

            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing
            Dim RadioOrderDetailList As Generic.List(Of AdvantageFramework.Database.Entities.RadioOrderDetail) = Nothing
            Dim RadioOrderDetail As AdvantageFramework.Database.Entities.RadioOrderDetail = Nothing
            Dim MonthList As Generic.List(Of String) = Nothing
            Dim YearList As Generic.List(Of Short) = Nothing
            Dim NumberOfMonths As Integer = 0
            Dim AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim GridColumn As DevExpress.XtraGrid.Columns.GridColumn = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                AccountPayableRadioDistributionDetailList = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)().ToList

                AccountPayableRadioDistributionDetail = DirectCast(DataGridViewRadio_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

                AccountPayableRadioDistributionDetail.RewriteFlag = 1
                AccountPayableRadioDistributionDetail.BroadcastMonth = Nothing
                AccountPayableRadioDistributionDetail.BroadcastYear = Nothing

                RadioOrderDetailList = AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadNonCancelledByOrderNumber(DbContext, OrderNumber).ToList

                If RadioOrderDetailList.Count = 0 Then

                    AccountPayableRadioDistributionDetail.RewriteFlag = 0

                    MonthList = AdvantageFramework.Database.Procedures.RadioOrderLegacy.GetMonthsByOrderNumber(DbContext, OrderNumber)

                    If MonthList.Count = 1 Then

                        AccountPayableRadioDistributionDetail.BroadcastMonth = MonthList.FirstOrDefault

                        YearList = AdvantageFramework.Database.Procedures.RadioOrderLegacy.GetYearsByOrderNumberMonth(DbContext, OrderNumber, MonthList.FirstOrDefault)

                        If YearList.Count = 1 Then

                            AccountPayableRadioDistributionDetail.BroadcastYear = YearList.FirstOrDefault
                            SetRadioDetailFromLegacyOrder(OrderNumber, AccountPayableRadioDistributionDetail.BroadcastMonth, AccountPayableRadioDistributionDetail.BroadcastYear, RowHandle)

                        End If

                    ElseIf MonthList.Count > 1 And MonthName IsNot Nothing Then

                        AccountPayableRadioDistributionDetail.BroadcastMonth = MonthName

                        YearList = AdvantageFramework.Database.Procedures.RadioOrderLegacy.GetYearsByOrderNumberMonth(DbContext, OrderNumber, MonthName)

                        If YearList.Count = 1 Then

                            AccountPayableRadioDistributionDetail.BroadcastYear = YearList.FirstOrDefault
                            SetRadioDetailFromLegacyOrder(OrderNumber, AccountPayableRadioDistributionDetail.BroadcastMonth, AccountPayableRadioDistributionDetail.BroadcastYear, RowHandle)

                        End If

                    End If

                ElseIf RadioOrderDetailList.Count = 1 Then

                    AccountPayableRadioDistributionDetail.OrderNumber = OrderNumber
                    SetRadioDetailFromNewOrder(RadioOrderDetailList(0).LineNumber, RowHandle)

                ElseIf RadioOrderDetailList.Count > 1 AndAlso AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = OrderNumber).Any = False Then

                    RadioOrderDetail = AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, OrderNumber, OrderLineNumber)

                    If RadioOrderDetail IsNot Nothing Then

                        MonthName = Microsoft.VisualBasic.MonthName(RadioOrderDetail.MonthNumber, True).ToUpper

                    End If

                    If MonthName IsNot Nothing Then

                        NumberOfMonths = (From Entity In RadioOrderDetailList
                                          Select Entity.MonthNumber).Distinct.Count

                        If NumberOfMonths > 1 Then

                            If AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines for broadcast month?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.Yes Then

                                For Each RadioOrderDetail In RadioOrderDetailList.Where(Function(E) E.MonthNumber = MonthToInteger(MonthName))

                                    AccountPayableRadioDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail()

                                    AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.SetBaseValues(AccountPayableRadioDistributionDetail, RadioOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                                    AccountPayableRadioDistributionDetailList.Add(AccountPayableRadioDistributionDetail)

                                Next

                                DataGridViewRadio_DistributionDetails.DataSource = AccountPayableRadioDistributionDetailList

                                CalculateTotalAmount()

                                SetVisibleGridColumns(TabItemAPDetails_RadioTab)

                                LoadRadioRepositoryItems()

                            ElseIf OrderLineNumber <> -1 Then

                                AccountPayableRadioDistributionDetail.OrderNumber = OrderNumber
                                SetRadioDetailFromNewOrder(OrderLineNumber, RowHandle)

                                GridColumn = DataGridViewRadio_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderLineNumber.ToString)
                                DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                            End If

                        ElseIf AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines from this Order?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.Yes Then

                            For Each RadioOrderDetail In RadioOrderDetailList

                                AccountPayableRadioDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail()

                                AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.SetBaseValues(AccountPayableRadioDistributionDetail, RadioOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                                AccountPayableRadioDistributionDetailList.Add(AccountPayableRadioDistributionDetail)

                            Next

                            DataGridViewRadio_DistributionDetails.DataSource = AccountPayableRadioDistributionDetailList

                            CalculateTotalAmount()

                            SetVisibleGridColumns(TabItemAPDetails_RadioTab)

                            LoadRadioRepositoryItems()

                        ElseIf OrderLineNumber <> -1 Then

                            AccountPayableRadioDistributionDetail.OrderNumber = OrderNumber
                            SetRadioDetailFromNewOrder(OrderLineNumber, RowHandle)

                            GridColumn = DataGridViewRadio_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderLineNumber.ToString)
                            DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                        Else

                            AccountPayableRadioDistributionDetail.OrderNumber = OrderNumber
                            SetRadioDetailFromNewOrder(RadioOrderDetailList(0).LineNumber, RowHandle)

                        End If

                    End If

                End If

            End Using

        End Sub
        Private Sub SetTVColumnHeaders()

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.GrossAmount.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.GrossAmount.ToString).Caption = GetHomeCurrencyCaption("Gross Amount")

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ExtendedNetAmount.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ExtendedNetAmount.ToString).Caption = GetHomeCurrencyCaption("Extended Net Amount")

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DiscountAmount.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DiscountAmount.ToString).Caption = GetHomeCurrencyCaption("Discount Amount")

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NetCharges.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NetCharges.ToString).Caption = GetHomeCurrencyCaption("Net Charges")

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.VendorTax.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.VendorTax.ToString).Caption = GetHomeCurrencyCaption("Vendor Tax")

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DisbursedAmount.ToString).Caption = GetHomeCurrencyCaption("Disbursed Amount")

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignGrossAmount.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignGrossAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Gross Amount"

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignExtendedNetAmount.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignExtendedNetAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Extended Net Amount"

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignDiscountAmount.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignDiscountAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Discount Amount"

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignNetCharges.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignNetCharges.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Net Charges"

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignVendorTax.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignVendorTax.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Vendor Tax"

            End If

            If DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignDisbursedAmount.ToString) IsNot Nothing Then

                DataGridViewTV_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignDisbursedAmount.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Disbursed Amount"

            End If

        End Sub
        Private Sub SetTVDetailFromLegacyOrder(ByVal OrderNumber As Integer, ByVal BroadcastMonth As String, ByVal BroadcastYear As Short, ByVal RowHandle As Integer)

            'Dim AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing
            Dim TVOrderLegacy As AdvantageFramework.Database.Entities.TVOrderLegacy = Nothing

            AccountPayableTVDistributionDetail = DirectCast(DataGridViewTV_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

            AccountPayableTVDistributionDetail.OrderNumber = OrderNumber
            AccountPayableTVDistributionDetail.BroadcastMonth = BroadcastMonth
            AccountPayableTVDistributionDetail.BroadcastYear = BroadcastYear

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If OrderNumber <> 0 Then

                    TVOrderLegacy = AdvantageFramework.Database.Procedures.TVOrderLegacy.LoadByOrderNumber(DbContext, OrderNumber)

                End If

                If TVOrderLegacy IsNot Nothing Then

                    'AccountPayableTVDistributionDetailList = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)().ToList

                    'If (RowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = OrderNumber AndAlso Entity.BroadcastMonth = BroadcastMonth AndAlso Entity.BroadcastYear IsNot Nothing AndAlso Entity.BroadcastYear = BroadcastYear).Any) OrElse
                    '    RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = OrderNumber AndAlso Entity.BroadcastMonth = BroadcastMonth AndAlso Entity.BroadcastYear IsNot Nothing AndAlso Entity.BroadcastYear = BroadcastYear).Count > 1 Then

                    '    AdvantageFramework.WinForm.MessageBox.Show("The selected order has already been disbursed to this broadcast month.  Please choose another.")

                    '    AccountPayableTVDistributionDetail.OrderNumber = Nothing

                    'Else

                    AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.SetBaseValues(AccountPayableTVDistributionDetail, TVOrderLegacy, BroadcastYear, BroadcastMonth, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                    'End If

                End If

            End Using

        End Sub
        Private Sub SetTVDetailFromNewOrder(ByVal OrderLineNumber As Integer, ByVal RowHandle As Integer)

            'Dim AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim TVOrderDetail As AdvantageFramework.Database.Entities.TVOrderDetail = Nothing

            AccountPayableTVDistributionDetail = DirectCast(DataGridViewTV_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

            AccountPayableTVDistributionDetail.OrderLineNumber = OrderLineNumber
            AccountPayableTVDistributionDetail.RewriteFlag = 1

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                OrderNumber = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderNumber.ToString)

                If OrderNumber <> 0 Then

                    TVOrderDetail = AdvantageFramework.Database.Procedures.TVOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, OrderNumber, OrderLineNumber)

                End If

                If TVOrderDetail IsNot Nothing Then

                    'AccountPayableTVDistributionDetailList = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)().ToList

                    'If (RowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = TVOrderDetail.TVOrderNumber AndAlso Entity.OrderLineNumber IsNot Nothing AndAlso Entity.OrderLineNumber = TVOrderDetail.LineNumber).Any) OrElse
                    '    RowHandle <> DevExpress.XtraGrid.GridControl.NewItemRowHandle AndAlso AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = TVOrderDetail.TVOrderNumber AndAlso Entity.OrderLineNumber IsNot Nothing AndAlso Entity.OrderLineNumber = TVOrderDetail.LineNumber).Count > 1 Then

                    '    AdvantageFramework.WinForm.MessageBox.Show("This Order Number/Line has already been added.  Please choose another.")

                    '    AccountPayableTVDistributionDetail.OrderNumber = Nothing
                    '    AccountPayableTVDistributionDetail.OrderLineNumber = Nothing

                    'Else

                    AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.SetBaseValues(AccountPayableTVDistributionDetail, TVOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                    'End If

                End If

            End Using

        End Sub
        Private Sub SetTVOrderNumber(ByVal OrderNumber As Integer, ByVal RowHandle As Integer, ByVal MonthName As String, Optional ByVal OrderLineNumber As Integer = -1)

            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing
            Dim TVOrderDetailList As Generic.List(Of AdvantageFramework.Database.Entities.TVOrderDetail) = Nothing
            Dim TVOrderDetail As AdvantageFramework.Database.Entities.TVOrderDetail = Nothing
            Dim MonthList As Generic.List(Of String) = Nothing
            Dim YearList As Generic.List(Of Short) = Nothing
            Dim NumberOfMonths As Integer = 0
            Dim AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim GridColumn As DevExpress.XtraGrid.Columns.GridColumn = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                AccountPayableTVDistributionDetailList = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)().ToList

                AccountPayableTVDistributionDetail = DirectCast(DataGridViewTV_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

                AccountPayableTVDistributionDetail.RewriteFlag = 1
                AccountPayableTVDistributionDetail.BroadcastMonth = Nothing
                AccountPayableTVDistributionDetail.BroadcastYear = Nothing

                TVOrderDetailList = AdvantageFramework.Database.Procedures.TVOrderDetail.LoadNonCancelledByOrderNumber(DbContext, OrderNumber).ToList

                If TVOrderDetailList.Count = 0 Then

                    AccountPayableTVDistributionDetail.RewriteFlag = 0

                    MonthList = AdvantageFramework.Database.Procedures.TVOrderLegacy.GetMonthsByOrderNumber(DbContext, OrderNumber)

                    If MonthList.Count = 1 Then

                        AccountPayableTVDistributionDetail.BroadcastMonth = MonthList.FirstOrDefault

                        YearList = AdvantageFramework.Database.Procedures.TVOrderLegacy.GetYearsByOrderNumberMonth(DbContext, OrderNumber, MonthList.FirstOrDefault)

                        If YearList.Count = 1 Then

                            AccountPayableTVDistributionDetail.BroadcastYear = YearList.FirstOrDefault
                            SetTVDetailFromLegacyOrder(OrderNumber, AccountPayableTVDistributionDetail.BroadcastMonth, AccountPayableTVDistributionDetail.BroadcastYear, RowHandle)

                        End If

                    ElseIf MonthList.Count > 1 And MonthName IsNot Nothing Then

                        AccountPayableTVDistributionDetail.BroadcastMonth = MonthName

                        YearList = AdvantageFramework.Database.Procedures.TVOrderLegacy.GetYearsByOrderNumberMonth(DbContext, OrderNumber, MonthName)

                        If YearList.Count = 1 Then

                            AccountPayableTVDistributionDetail.BroadcastYear = YearList.FirstOrDefault
                            SetTVDetailFromLegacyOrder(OrderNumber, AccountPayableTVDistributionDetail.BroadcastMonth, AccountPayableTVDistributionDetail.BroadcastYear, RowHandle)

                        End If

                    End If

                ElseIf TVOrderDetailList.Count = 1 Then

                    AccountPayableTVDistributionDetail.OrderNumber = OrderNumber
                    SetTVDetailFromNewOrder(TVOrderDetailList(0).LineNumber, RowHandle)

                ElseIf TVOrderDetailList.Count > 1 AndAlso AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.OrderNumber IsNot Nothing AndAlso Entity.OrderNumber = OrderNumber).Any = False Then

                    TVOrderDetail = AdvantageFramework.Database.Procedures.TVOrderDetail.LoadActiveByOrderNumberLineNumber(DbContext, OrderNumber, OrderLineNumber)

                    If TVOrderDetail IsNot Nothing Then

                        MonthName = Microsoft.VisualBasic.MonthName(TVOrderDetail.MonthNumber, True).ToUpper

                    End If

                    If MonthName IsNot Nothing Then

                        NumberOfMonths = (From Entity In TVOrderDetailList
                                          Select Entity.MonthNumber).Distinct.Count

                        If NumberOfMonths > 1 Then

                            If AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines for broadcast month?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.Yes Then

                                For Each TVOrderDetail In TVOrderDetailList.Where(Function(E) E.MonthNumber = MonthToInteger(MonthName))

                                    AccountPayableTVDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail()

                                    AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.SetBaseValues(AccountPayableTVDistributionDetail, TVOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                                    AccountPayableTVDistributionDetailList.Add(AccountPayableTVDistributionDetail)

                                Next

                                DataGridViewTV_DistributionDetails.DataSource = AccountPayableTVDistributionDetailList

                                CalculateTotalAmount()

                                SetVisibleGridColumns(TabItemAPDetails_TVTab)

                                LoadTVRepositoryItems()

                            ElseIf OrderLineNumber <> -1 Then

                                AccountPayableTVDistributionDetail.OrderNumber = OrderNumber
                                SetTVDetailFromNewOrder(OrderLineNumber, RowHandle)

                                GridColumn = DataGridViewTV_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderLineNumber.ToString)
                                DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                            End If

                        ElseIf AdvantageFramework.WinForm.MessageBox.Show("Do you want to load all lines from this Order?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo, "Media Message", Nothing, Windows.Forms.MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.Yes Then

                            For Each TVOrderDetail In TVOrderDetailList

                                AccountPayableTVDistributionDetail = New AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail()

                                AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.SetBaseValues(AccountPayableTVDistributionDetail, TVOrderDetail, DbContext, NumericInputControl_VendorCurrencyRate.GetValue)

                                AccountPayableTVDistributionDetailList.Add(AccountPayableTVDistributionDetail)

                            Next

                            DataGridViewTV_DistributionDetails.DataSource = AccountPayableTVDistributionDetailList

                            CalculateTotalAmount()

                            SetVisibleGridColumns(TabItemAPDetails_TVTab)

                            LoadTVRepositoryItems()

                        ElseIf OrderLineNumber <> -1 Then

                            AccountPayableTVDistributionDetail.OrderNumber = OrderNumber
                            SetTVDetailFromNewOrder(OrderLineNumber, RowHandle)

                            GridColumn = DataGridViewTV_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderLineNumber.ToString)
                            DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn = GridColumn

                        Else

                            AccountPayableTVDistributionDetail.OrderNumber = OrderNumber
                            SetTVDetailFromNewOrder(TVOrderDetailList(0).LineNumber, RowHandle)

                        End If

                    End If

                End If

            End Using

        End Sub
        Private Sub SetVendorDefaults()

            Dim Vendor As AdvantageFramework.Database.Entities.Vendor = Nothing
            Dim GeneralLedgerAccount As AdvantageFramework.Database.Entities.GeneralLedgerAccount = Nothing

            If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    Vendor = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, SearchableComboBoxControl_Vendor.GetSelectedValue)

                    If Vendor IsNot Nothing Then

                        SetVendorPayToAddress(Vendor)

                        SetVisibleTabs(Vendor)

                        Using DataContext = New AdvantageFramework.Database.DataContext(_Session.ConnectionString, _Session.UserCode)

                            If _ID = 0 AndAlso AdvantageFramework.Agency.GetOptionDefaultAPDescriptionFromVendorAccount(DataContext) Then

                                TextBoxControl_Description.Text = Vendor.AccountNumber

                            End If

                        End Using

                        SearchableComboBoxControl_CurrencyCode.SelectedValue = Vendor.CurrencyCode

                        TextBoxControl_VendorNote.Text = Vendor.Notes
                        TextBoxDropDownControl_Note.Text = Vendor.Notes

                        If Vendor.Vendor1099Flag = 1 Then

                            CheckBoxControl_1099Invoice.Checked = True

                        Else

                            CheckBoxControl_1099Invoice.Checked = False

                        End If

                        If ComboBoxControl_Office.Visible Then

                            If Vendor.OfficeCode IsNot Nothing AndAlso (AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) OrElse AdvantageFramework.Database.Procedures.Agency.IsInterCompanyTransactionsEnabled(DbContext)) Then

                                ComboBoxControl_Office.SelectedValue = Vendor.OfficeCode

                            ElseIf Vendor.OfficeCode Is Nothing AndAlso (AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) OrElse AdvantageFramework.Database.Procedures.Agency.IsInterCompanyTransactionsEnabled(DbContext)) Then

                                ComboBoxControl_Office.SelectedIndex = -1

                            End If

                        End If

                        ComboBoxControl_Terms.SelectedValue = Vendor.VendorTermCode

                        If Vendor.VendorTerm IsNot Nothing Then

                            NumericInputControl_DiscountPercentage.EditValue = Vendor.VendorTerm.DiscountPercentage.GetValueOrDefault(0)

                        End If

                        ComboBoxControl_APAccount.RemoveAddedItemsFromDataSource()
                        ComboBoxControl_APAccount.SelectedValue = Vendor.DefaultAPAccount

                        If ComboBoxControl_APAccount.SelectedValue <> Vendor.DefaultAPAccount Then

                            GeneralLedgerAccount = AdvantageFramework.Database.Procedures.GeneralLedgerAccount.LoadByGLACode(DbContext, Vendor.DefaultAPAccount)
                            ComboBoxControl_APAccount.AddComboItemToExistingDataSource(GeneralLedgerAccount.ToString, GeneralLedgerAccount.Code, True)
                            ComboBoxControl_APAccount.SelectedValue = Vendor.DefaultAPAccount

                        End If

                        SearchableComboBoxControl_VendorTaxCode.SelectedValue = Vendor.VendorServiceTaxID
                        CheckBoxControl_VendorTaxEnabled.Checked = Vendor.ServiceTaxEnabled.GetValueOrDefault(False)

                    End If

                End Using

            End If

        End Sub
        Private Sub SetVendorPayToAddress(ByVal Vendor As AdvantageFramework.Database.Entities.Vendor)

            Dim VendorPayTo As AdvantageFramework.Database.Entities.Vendor = Nothing
            Dim APShowPayToInformation As Boolean = False

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If Vendor Is Nothing Then

                    Vendor = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, SearchableComboBoxControl_Vendor.GetSelectedValue)

                End If

                APShowPayToInformation = AdvantageFramework.Database.Procedures.Agency.APShowPayToInformation(DbContext)

            End Using

            Address3LineControlControl_Address.ClearControl()

            If Vendor IsNot Nothing Then

                SearchableComboBoxControl_CurrencyCode.SelectedValue = Vendor.CurrencyCode

                If Not SearchableComboBoxControl_CurrencyCode.HasASelectedValue AndAlso _IsMultiCurrencyEnabled Then

                    SearchableComboBoxControl_CurrencyCode.SelectedValue = _CurrencyCodeHome

                End If

                TextBoxControl_VendorNote.Text = Vendor.Notes
                TextBoxDropDownControl_Note.Text = Vendor.Notes

                If APShowPayToInformation Then

                    If Vendor.Code = Vendor.PayToCode Then

                        TextBoxControl_PayTo.Text = Vendor.PayToName
                        Address3LineControlControl_Address.Address = Vendor.PayToAddressLine1
                        Address3LineControlControl_Address.Address2 = Vendor.PayToAddressLine2
                        Address3LineControlControl_Address.Address3 = Vendor.PayToStreetAddressLine3
                        Address3LineControlControl_Address.City = Vendor.PayToCity
                        Address3LineControlControl_Address.County = Vendor.PayToCounty
                        Address3LineControlControl_Address.State = Vendor.PayToState
                        Address3LineControlControl_Address.Zip = Vendor.PayToZipCode
                        Address3LineControlControl_Address.Country = Vendor.PayToCountry

                    Else

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            VendorPayTo = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, Vendor.PayToCode)

                        End Using

                        If VendorPayTo IsNot Nothing Then

                            TextBoxControl_PayTo.Text = VendorPayTo.PayToName
                            Address3LineControlControl_Address.Address = VendorPayTo.PayToAddressLine1
                            Address3LineControlControl_Address.Address2 = VendorPayTo.PayToAddressLine2
                            Address3LineControlControl_Address.Address3 = VendorPayTo.PayToStreetAddressLine3
                            Address3LineControlControl_Address.City = VendorPayTo.PayToCity
                            Address3LineControlControl_Address.County = VendorPayTo.PayToCounty
                            Address3LineControlControl_Address.State = VendorPayTo.PayToState
                            Address3LineControlControl_Address.Zip = VendorPayTo.PayToZipCode
                            Address3LineControlControl_Address.Country = VendorPayTo.PayToCountry

                        End If

                    End If

                Else

                    TextBoxControl_PayTo.Text = Vendor.Name
                    Address3LineControlControl_Address.Address = Vendor.StreetAddressLine1
                    Address3LineControlControl_Address.Address2 = Vendor.StreetAddressLine2
                    Address3LineControlControl_Address.Address3 = Vendor.PayToStreetAddressLine3
                    Address3LineControlControl_Address.City = Vendor.City
                    Address3LineControlControl_Address.County = Vendor.County
                    Address3LineControlControl_Address.State = Vendor.State
                    Address3LineControlControl_Address.Zip = Vendor.ZipCode
                    Address3LineControlControl_Address.Country = Vendor.Country

                End If

            End If

        End Sub
        Private Sub SetVisibleTabs(ByVal Vendor As AdvantageFramework.Database.Entities.Vendor)

            TabControlControl_APDetails.SuspendLayout()

            Select Case Vendor.VendorCategory

                Case "N"

                    TabItemAPDetails_NewspaperTab.Visible = True
                    TabItemAPDetails_InternetTab.Visible = False
                    TabItemAPDetails_MagazineTab.Visible = False
                    TabItemAPDetails_OutOfHomeTab.Visible = False
                    TabItemAPDetails_RadioTab.Visible = False
                    TabItemAPDetails_RadioDetailsTab.Visible = False
                    TabItemAPDetails_TVTab.Visible = False
                    TabItemAPDetails_TVDetailsTab.Visible = False

                    _SelectedTab = Me.TabItemAPDetails_NewspaperTab

                Case "M"

                    TabItemAPDetails_MagazineTab.Visible = True
                    TabItemAPDetails_InternetTab.Visible = False
                    TabItemAPDetails_NewspaperTab.Visible = False
                    TabItemAPDetails_OutOfHomeTab.Visible = False
                    TabItemAPDetails_RadioTab.Visible = False
                    TabItemAPDetails_RadioDetailsTab.Visible = False
                    TabItemAPDetails_TVTab.Visible = False
                    TabItemAPDetails_TVDetailsTab.Visible = False

                    _SelectedTab = Me.TabItemAPDetails_MagazineTab

                Case "R"

                    TabItemAPDetails_RadioTab.Visible = True
                    TabItemAPDetails_RadioDetailsTab.Visible = True
                    TabItemAPDetails_InternetTab.Visible = False
                    TabItemAPDetails_MagazineTab.Visible = False
                    TabItemAPDetails_NewspaperTab.Visible = False
                    TabItemAPDetails_OutOfHomeTab.Visible = False
                    TabItemAPDetails_TVTab.Visible = False
                    TabItemAPDetails_TVDetailsTab.Visible = False

                    _SelectedTab = Me.TabItemAPDetails_RadioTab

                Case "T"

                    TabItemAPDetails_TVTab.Visible = True
                    TabItemAPDetails_TVDetailsTab.Visible = True
                    TabItemAPDetails_InternetTab.Visible = False
                    TabItemAPDetails_MagazineTab.Visible = False
                    TabItemAPDetails_NewspaperTab.Visible = False
                    TabItemAPDetails_OutOfHomeTab.Visible = False
                    TabItemAPDetails_RadioTab.Visible = False
                    TabItemAPDetails_RadioDetailsTab.Visible = False

                    _SelectedTab = Me.TabItemAPDetails_TVTab

                Case "O"

                    TabItemAPDetails_OutOfHomeTab.Visible = True
                    TabItemAPDetails_InternetTab.Visible = False
                    TabItemAPDetails_MagazineTab.Visible = False
                    TabItemAPDetails_NewspaperTab.Visible = False
                    TabItemAPDetails_RadioTab.Visible = False
                    TabItemAPDetails_RadioDetailsTab.Visible = False
                    TabItemAPDetails_TVTab.Visible = False
                    TabItemAPDetails_TVDetailsTab.Visible = False

                    _SelectedTab = Me.TabItemAPDetails_OutOfHomeTab

                Case "I"

                    TabItemAPDetails_InternetTab.Visible = True
                    TabItemAPDetails_MagazineTab.Visible = False
                    TabItemAPDetails_NewspaperTab.Visible = False
                    TabItemAPDetails_OutOfHomeTab.Visible = False
                    TabItemAPDetails_RadioTab.Visible = False
                    TabItemAPDetails_RadioDetailsTab.Visible = False
                    TabItemAPDetails_TVTab.Visible = False
                    TabItemAPDetails_TVDetailsTab.Visible = False

                    _SelectedTab = Me.TabItemAPDetails_InternetTab

                Case "P"

                    TabItemAPDetails_InternetTab.Visible = False
                    TabItemAPDetails_MagazineTab.Visible = False
                    TabItemAPDetails_NewspaperTab.Visible = False
                    TabItemAPDetails_OutOfHomeTab.Visible = False
                    TabItemAPDetails_RadioTab.Visible = False
                    TabItemAPDetails_RadioDetailsTab.Visible = False
                    TabItemAPDetails_TVTab.Visible = False
                    TabItemAPDetails_TVDetailsTab.Visible = False

                    _SelectedTab = Me.TabItemAPDetails_ProductionTab

                Case Else

                    TabItemAPDetails_InternetTab.Visible = False
                    TabItemAPDetails_MagazineTab.Visible = False
                    TabItemAPDetails_NewspaperTab.Visible = False
                    TabItemAPDetails_OutOfHomeTab.Visible = False
                    TabItemAPDetails_RadioTab.Visible = False
                    TabItemAPDetails_RadioDetailsTab.Visible = False
                    TabItemAPDetails_TVTab.Visible = False
                    TabItemAPDetails_TVDetailsTab.Visible = False

                    _SelectedTab = Me.TabItemAPDetails_NonClientTab

            End Select

            TabControlControl_APDetails.SelectedTab = _SelectedTab

            If Vendor.NewspaperCategory = 1 Then

                TabItemAPDetails_NewspaperTab.Visible = True

            End If

            If Vendor.MagazineCategory = 1 Then

                TabItemAPDetails_MagazineTab.Visible = True

            End If

            If Vendor.RadioCategory = 1 Then

                TabItemAPDetails_RadioTab.Visible = True
                TabItemAPDetails_RadioDetailsTab.Visible = True

            End If

            If Vendor.TVCategory = 1 Then

                TabItemAPDetails_TVTab.Visible = True
                TabItemAPDetails_TVDetailsTab.Visible = True

            End If

            If Vendor.OutOfHomeCategory = 1 Then

                TabItemAPDetails_OutOfHomeTab.Visible = True

            End If

            If Vendor.InternetCategory = 1 Then

                TabItemAPDetails_InternetTab.Visible = True

            End If

            TabControlControl_APDetails.ResumeLayout()

        End Sub
        Private Sub SetVisibleGridColumns(TabItem As DevComponents.DotNetBar.TabItem)

            Dim GridColumn As DevExpress.XtraGrid.Columns.GridColumn = Nothing
            Dim VisibleIndex As Integer = 0
            Dim HomeValueVisible As Boolean = True
            Dim ForeignValueVisible As Boolean = False

            'HomeValueVisible = (_IsMultiCurrencyEnabled AndAlso (_ShowHomeColumns OrElse _CurrencyCodeHome = SearchableComboBoxControl_CurrencyCode.GetSelectedValue)) OrElse Not _IsMultiCurrencyEnabled OrElse
            '    (_IsMultiCurrencyEnabled AndAlso Me.SearchableComboBoxControl_CurrencyCode.GetSelectedValue <> _CurrencyCodeHome)

            ForeignValueVisible = _IsMultiCurrencyEnabled AndAlso _CurrencyCodeHome <> SearchableComboBoxControl_CurrencyCode.GetSelectedValue

            If TabItem Is TabItemAPDetails_NonClientTab Then

                For Each GridColumn In DataGridViewNonClient_DistributionDetails.Columns

                    If EntityColumnShowsInGrid(GetType(AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail), GridColumn.FieldName) Then

                        If GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.Amount.ToString Then

                            If HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                                GridColumn.Caption = GetHomeCurrencyCaption("Amount")

                            Else

                                GridColumn.VisibleIndex = -1
                                GridColumn.Visible = False

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.ForeignAmount.ToString Then

                            If ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                                GridColumn.Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Amount"

                            Else

                                GridColumn.VisibleIndex = -1
                                GridColumn.Visible = False

                            End If

                        Else

                            GridColumn.VisibleIndex = VisibleIndex
                            VisibleIndex += 1
                            GridColumn.Visible = True

                        End If

                    End If

                Next

            ElseIf TabItem Is TabItemAPDetails_ProductionTab Then

                Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    For Each GridColumn In DataGridViewProduction_DistributionDetails.Columns

                        If EntityColumnShowsInGrid(GetType(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail), GridColumn.FieldName) Then

                            GridColumn.VisibleIndex = -1
                            GridColumn.Visible = False

                            If GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Rate.ToString OrElse
                                    GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedAmount.ToString OrElse
                                    GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedNonResaleTax.ToString OrElse
                                    GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedMarkupAmount.ToString OrElse
                                    GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.LineTotal.ToString OrElse
                                    GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Disbursed.ToString Then

                                If HomeValueVisible Then

                                    GridColumn.VisibleIndex = VisibleIndex
                                    VisibleIndex += 1
                                    GridColumn.Visible = True

                                End If

                            ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ResaleTax.ToString Then

                                If HomeValueVisible AndAlso Not AdvantageFramework.Database.Procedures.Agency.InvoiceTaxFlag(DbContext) Then

                                    GridColumn.VisibleIndex = VisibleIndex
                                    VisibleIndex += 1
                                    GridColumn.Visible = True

                                End If

                            ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignDisbursed.ToString OrElse
                                    GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignExtendedAmount.ToString OrElse
                                    GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignExtendedNonResaleTax.ToString OrElse
                                    GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignRate.ToString Then

                                If ForeignValueVisible Then

                                    GridColumn.VisibleIndex = VisibleIndex
                                    VisibleIndex += 1
                                    GridColumn.Visible = True

                                End If

                            Else

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        End If

                    Next

                End Using

            ElseIf TabItem Is TabItemAPDetails_InternetTab Then

                For Each GridColumn In DataGridViewInternet_DistributionDetails.Columns

                    If EntityColumnShowsInGrid(GetType(AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail), GridColumn.FieldName) Then

                        GridColumn.VisibleIndex = -1
                        GridColumn.Visible = False

                        If GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.Rate.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DiscountAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.VendorTax.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DisbursedAmount.ToString Then

                            If HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.GrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignDisbursedAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignDiscountAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignNetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignRate.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignVendorTax.ToString Then

                            If ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        Else

                            GridColumn.VisibleIndex = VisibleIndex
                            VisibleIndex += 1
                            GridColumn.Visible = True

                        End If

                    End If

                Next

            ElseIf TabItem Is TabItemAPDetails_MagazineTab Then

                For Each GridColumn In DataGridViewMagazine_DistributionDetails.Columns

                    If EntityColumnShowsInGrid(GetType(AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail), GridColumn.FieldName) Then

                        GridColumn.VisibleIndex = -1
                        GridColumn.Visible = False

                        If GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.BleedNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ColorNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DisbursedAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DiscountLN.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PositionNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PremiumNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.VendorTax.ToString Then

                            If HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.BleedGrossAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ColorGrossAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.GrossAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PositionGrossAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PremiumGrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignBleedGrossAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignColorGrossAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignGrossAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPositionGrossAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPremiumGrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignBleedNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignColorNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignDisbursedAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignDiscountLineNet.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignNetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPositionNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPremiumNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignVendorTax.ToString Then

                            If ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        Else

                            GridColumn.VisibleIndex = VisibleIndex
                            VisibleIndex += 1
                            GridColumn.Visible = True

                        End If

                    End If

                Next

            ElseIf TabItem Is TabItemAPDetails_NewspaperTab Then

                For Each GridColumn In DataGridViewNewspaper_DistributionDetails.Columns

                    If EntityColumnShowsInGrid(GetType(AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail), GridColumn.FieldName) Then

                        GridColumn.VisibleIndex = -1
                        GridColumn.Visible = False

                        If GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.Rate.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DiscountLN.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.VendorTax.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DisbursedAmount.ToString Then

                            If HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.GrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignDisbursedAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignDiscountLineNet.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignNetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignRate.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignVendorTax.ToString Then

                            If ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        Else

                            GridColumn.VisibleIndex = VisibleIndex
                            VisibleIndex += 1
                            GridColumn.Visible = True

                        End If

                    End If

                Next

            ElseIf TabItem Is TabItemAPDetails_OutOfHomeTab Then

                For Each GridColumn In DataGridViewOutOfHome_DistributionDetails.Columns

                    If EntityColumnShowsInGrid(GetType(AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail), GridColumn.FieldName) Then

                        GridColumn.VisibleIndex = -1
                        GridColumn.Visible = False

                        If GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DiscountAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.VendorTax.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DisbursedAmount.ToString Then

                            If HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.GrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignDiscountAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignNetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignVendorTax.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignDisbursedAmount.ToString Then

                            If ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        Else

                            GridColumn.VisibleIndex = VisibleIndex
                            VisibleIndex += 1
                            GridColumn.Visible = True

                        End If

                    End If

                Next

            ElseIf TabItem Is TabItemAPDetails_RadioTab Then

                For Each GridColumn In DataGridViewRadio_DistributionDetails.Columns

                    If EntityColumnShowsInGrid(GetType(AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail), GridColumn.FieldName) Then

                        GridColumn.VisibleIndex = -1
                        GridColumn.Visible = False

                        If GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ExtendedNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DiscountAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.VendorTax.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DisbursedAmount.ToString Then

                            If HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.GrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignExtendedNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignDiscountAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignNetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignVendorTax.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignDisbursedAmount.ToString Then

                            If ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        Else

                            GridColumn.VisibleIndex = VisibleIndex
                            VisibleIndex += 1
                            GridColumn.Visible = True

                        End If

                    End If

                Next

            ElseIf TabItem Is TabItemAPDetails_TVTab Then

                For Each GridColumn In DataGridViewTV_DistributionDetails.Columns

                    If EntityColumnShowsInGrid(GetType(AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail), GridColumn.FieldName) Then

                        GridColumn.VisibleIndex = -1
                        GridColumn.Visible = False

                        If GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ExtendedNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DiscountAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.VendorTax.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DisbursedAmount.ToString Then

                            If HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.GrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso HomeValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                            If _ShowGrossColumns AndAlso ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        ElseIf GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignExtendedNetAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignDiscountAmount.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignNetCharges.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignVendorTax.ToString OrElse
                                GridColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignDisbursedAmount.ToString Then

                            If ForeignValueVisible Then

                                GridColumn.VisibleIndex = VisibleIndex
                                VisibleIndex += 1
                                GridColumn.Visible = True

                            End If

                        Else

                            GridColumn.VisibleIndex = VisibleIndex
                            VisibleIndex += 1
                            GridColumn.Visible = True

                        End If

                    End If

                Next

            End If

        End Sub
        Private Function TVComplete(ByRef IsValid As Boolean) As String

            Dim AccountPayableTVDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim ErrorText As String = Nothing
            Dim PropertyErrorText As String = Nothing
            Dim FailedOnce As Boolean = False

            AccountPayableTVDistributionDetails = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)().ToList

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                For Each AccountPayableTVDistributionDetail In AccountPayableTVDistributionDetails

                    AccountPayableTVDistributionDetail.DbContext = DbContext

                    PropertyErrorText = AccountPayableTVDistributionDetail.ValidateEntity(IsValid)

                    If IsValid = False Then

                        ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)

                        FailedOnce = True

                    End If

                Next

                If Not ValidateTVBroadcastDetails() Then

                    PropertyErrorText = "Please enter a valid Order."
                    ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)
                    FailedOnce = True

                End If

            End Using

            IsValid = Not FailedOnce

            TVComplete = ErrorText

        End Function
        Private Sub ValidateProductionGLACode(ByVal GLACode As String, ByVal RowHandle As Integer)

            Dim GeneralLedgerAccount As AdvantageFramework.Database.Entities.GeneralLedgerAccount = Nothing
            Dim GeneralLedgerOfficeCrossReference As AdvantageFramework.Database.Entities.GeneralLedgerOfficeCrossReference = Nothing
            Dim Office As AdvantageFramework.Database.Entities.Office = Nothing

            If DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.IsNonBillable.ToString) = 1 AndAlso
                    GLACode IsNot Nothing AndAlso GLACode <> "" Then

                Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    GeneralLedgerAccount = AdvantageFramework.Database.Procedures.GeneralLedgerAccount.LoadByGLACode(DbContext, GLACode)

                    If GeneralLedgerAccount IsNot Nothing Then

                        DataGridViewProduction_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.GLADescription.ToString, GeneralLedgerAccount.Description)

                    End If

                    If GeneralLedgerAccount IsNot Nothing AndAlso GeneralLedgerAccount.GeneralLedgerOfficeCrossReference IsNot Nothing Then

                        Office = AdvantageFramework.Database.Procedures.Office.LoadByOfficeCode(DbContext, GeneralLedgerAccount.GeneralLedgerOfficeCrossReference.OfficeCode)

                        If Office IsNot Nothing Then

                            DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).OfficeCode = Office.Code

                            If Office.ProductionWorkInProgressGLACode = GLACode Then

                                AdvantageFramework.WinForm.MessageBox.Show("The account chosen is your office WIP account.  Please select another account.")

                                DataGridViewProduction_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.GLACode.ToString, "")

                            End If

                        End If

                    ElseIf GeneralLedgerAccount IsNot Nothing AndAlso GeneralLedgerAccount.GeneralLedgerOfficeCrossReference Is Nothing Then

                        Office = AdvantageFramework.Database.Procedures.Office.Load(DbContext).FirstOrDefault

                        If Office IsNot Nothing Then

                            DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).OfficeCode = Office.Code

                        End If

                    End If

                End Using

            End If

        End Sub
        Private Function ValidateControl(ByRef ErrorText As String) As Boolean

            Dim IsNonClientValid As Boolean = True
            Dim IsProductionValid As Boolean = True
            Dim IsMagazineValid As Boolean = True
            Dim IsNewspaperValid As Boolean = True
            Dim IsInternetValid As Boolean = True
            Dim IsOutOfHomeValid As Boolean = True
            Dim IsRadioValid As Boolean = True
            Dim IsTVValid As Boolean = True
            Dim IsValid As Boolean = False

            DataGridViewNonClient_DistributionDetails.CurrentView.CloseEditorForUpdating()
            DataGridViewProduction_DistributionDetails.CurrentView.CloseEditorForUpdating()
            DataGridViewMagazine_DistributionDetails.CurrentView.CloseEditorForUpdating()
            DataGridViewNewspaper_DistributionDetails.CurrentView.CloseEditorForUpdating()
            DataGridViewInternet_DistributionDetails.CurrentView.CloseEditorForUpdating()
            DataGridViewOutOfHome_DistributionDetails.CurrentView.CloseEditorForUpdating()
            DataGridViewRadio_DistributionDetails.CurrentView.CloseEditorForUpdating()
            DataGridViewRadioDetails_BroadcastDetails.CurrentView.CloseEditorForUpdating()
            DataGridViewTV_DistributionDetails.CurrentView.CloseEditorForUpdating()
            DataGridViewTVDetails_BroadcastDetails.CurrentView.CloseEditorForUpdating()

            If CalculateTotalAmount() = True Then

                ErrorText = NonClientComplete(IsNonClientValid)
                ErrorText += ProductionComplete(IsProductionValid)
                ErrorText += MagazineComplete(IsMagazineValid)
                ErrorText += NewspaperComplete(IsNewspaperValid)
                ErrorText += InternetComplete(IsInternetValid)
                ErrorText += OutOfHomeComplete(IsOutOfHomeValid)
                ErrorText += RadioComplete(IsRadioValid)
                ErrorText += TVComplete(IsTVValid)

                If Me.Validate AndAlso IsNonClientValid AndAlso IsProductionValid AndAlso IsMagazineValid AndAlso IsNewspaperValid AndAlso IsInternetValid _
                    AndAlso IsOutOfHomeValid AndAlso IsRadioValid AndAlso IsTVValid Then

                    IsValid = True

                End If

            Else

                ErrorText += "The amount disbursed and the invoice amount are not equal."

            End If

            ValidateControl = IsValid

        End Function
        Private Function VendorHasDefaultExpenseAccount(Optional ByVal RowHandle As Integer = -1) As Boolean

            Dim Vendor As AdvantageFramework.Database.Entities.Vendor = Nothing
            Dim OfficeCode As String = Nothing
            Dim GeneralLedgerAccountList As Generic.List(Of AdvantageFramework.Database.Entities.GeneralLedgerAccount) = Nothing
            Dim GeneralLedgerAccount As AdvantageFramework.Database.Entities.GeneralLedgerAccount = Nothing
            Dim ReturnValue As Boolean = False

            If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    Vendor = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, SearchableComboBoxControl_Vendor.GetSelectedValue)

                    If Vendor IsNot Nothing AndAlso Vendor.DefaultExpenseAccount IsNot Nothing Then

                        Try

                            GeneralLedgerAccount = AdvantageFramework.Database.Procedures.GeneralLedgerAccount.LoadByGLACode(DbContext, Vendor.DefaultExpenseAccount)

                            If GeneralLedgerAccount IsNot Nothing Then

                                OfficeCode = DataGridViewNonClient_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNonClient_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.OfficeCode.ToString)

                                GeneralLedgerAccountList = AdvantageFramework.AccountPayable.GetNonClientGLAccountList(DbContext, _Session, ComboBoxControl_Office.GetSelectedValue, OfficeCode)

                                If GeneralLedgerAccountList.Where(Function(Entity) Entity.Code = GeneralLedgerAccount.Code).Any = False Then

                                    GeneralLedgerAccount = Nothing

                                End If

                            End If

                        Catch ex As Exception
                            GeneralLedgerAccount = Nothing
                        End Try

                        If GeneralLedgerAccount IsNot Nothing Then

                            ReturnValue = True

                            If RowHandle <> -1 Then

                                If GeneralLedgerAccount.GeneralLedgerOfficeCrossReference IsNot Nothing AndAlso GeneralLedgerAccount.GeneralLedgerOfficeCrossReference.OfficeCode IsNot Nothing Then

                                    DataGridViewNonClient_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, DataGridViewNonClient_DistributionDetails.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.OfficeCode.ToString), GeneralLedgerAccount.GeneralLedgerOfficeCrossReference.OfficeCode)

                                End If

                                DataGridViewNonClient_DistributionDetails.CurrentView.SetRowCellValue(RowHandle, DataGridViewNonClient_DistributionDetails.CurrentView.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.GLACode.ToString), Vendor.DefaultExpenseAccount)

                            End If

                        End If

                    End If

                End Using

            End If

            VendorHasDefaultExpenseAccount = ReturnValue

        End Function
        Private Function IsHeaderDirty(ByVal AccountPayableOld As AdvantageFramework.Database.Entities.AccountPayable, ByVal AccountPayableNew As AdvantageFramework.Database.Entities.AccountPayable) As Boolean

            Dim IsDirty As Boolean = False

            If AccountPayableOld.InvoiceDescription <> AccountPayableNew.InvoiceDescription OrElse
                    Not Nullable.Equals(AccountPayableOld.IsOnHold, AccountPayableNew.IsOnHold) OrElse
                    Not Nullable.Equals(AccountPayableOld.Is1099Invoice, AccountPayableNew.Is1099Invoice) OrElse
                    AccountPayableOld.VendorTermCode <> AccountPayableNew.VendorTermCode OrElse
                    AccountPayableOld.InvoiceDate <> AccountPayableNew.InvoiceDate OrElse
                    AccountPayableOld.PaidDate <> AccountPayableNew.PaidDate OrElse
                    Not Nullable.Equals(AccountPayableOld.SalesTaxAmount, AccountPayableNew.SalesTaxAmount) OrElse
                    AccountPayableOld.OfficeCode <> AccountPayableNew.OfficeCode OrElse
                    Not Nullable.Equals(AccountPayableOld.VendorServiceTaxID, AccountPayableNew.VendorServiceTaxID) OrElse
                    Not Nullable.Equals(AccountPayableOld.VendorServiceTaxEnabled, AccountPayableNew.VendorServiceTaxEnabled) OrElse
                    Not Nullable.Equals(AccountPayableOld.VendorTaxableAmount, AccountPayableNew.VendorTaxableAmount) OrElse
                    Not Nullable.Equals(AccountPayableOld.DiscountPercentage, AccountPayableNew.DiscountPercentage) Then

                IsDirty = True

            End If

            IsHeaderDirty = IsDirty

        End Function
        Private Function IsInternetRowDirty(ByVal AccountPayableInternetOld As AdvantageFramework.Database.Entities.AccountPayableInternet, ByVal AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) As Boolean

            Dim IsDirty As Boolean = False

            If AccountPayableInternetOld.InternetOrderNumber <> AccountPayableInternetDistributionDetail.InternetOrderNumber.GetValueOrDefault(0) OrElse
                    AccountPayableInternetOld.InternetDetailLineNumber <> AccountPayableInternetDistributionDetail.InternetDetailLineNumber.GetValueOrDefault(0) OrElse
                    Not Nullable.Equals(AccountPayableInternetOld.NetAmount, AccountPayableInternetDistributionDetail.NetAmount) OrElse
                    Math.Abs(AccountPayableInternetOld.DiscountAmount.GetValueOrDefault(0)) <> Math.Abs(AccountPayableInternetDistributionDetail.DiscountAmount.GetValueOrDefault(0)) OrElse
                    Not Nullable.Equals(AccountPayableInternetOld.NetCharges, AccountPayableInternetDistributionDetail.NetCharges) OrElse
                    Not Nullable.Equals(AccountPayableInternetOld.VendorTax, AccountPayableInternetDistributionDetail.VendorTax) OrElse
                    AccountPayableInternetOld.SalesTaxCode <> AccountPayableInternetDistributionDetail.SalesTaxCode OrElse
                    Not Nullable.Equals(AccountPayableInternetOld.Impressions, AccountPayableInternetDistributionDetail.Impressions) OrElse
                    Not Nullable.Equals(AccountPayableInternetOld.Rate, AccountPayableInternetDistributionDetail.Rate) Then

                IsDirty = True

            End If

            IsInternetRowDirty = IsDirty

        End Function
        Private Function IsNonClientRowDirty(ByVal AccountPayableGLDistributionOld As AdvantageFramework.Database.Entities.AccountPayableGLDistribution, ByVal AccountPayableGLDistributionNew As AdvantageFramework.Database.Entities.AccountPayableGLDistribution) As Boolean

            Dim IsDirty As Boolean = False

            If AccountPayableGLDistributionOld.Amount <> AccountPayableGLDistributionNew.Amount OrElse
                    Not Nullable.Equals(AccountPayableGLDistributionOld.PONumber, AccountPayableGLDistributionNew.PONumber) OrElse
                    Not Nullable.Equals(AccountPayableGLDistributionOld.PODetailLineNumber, AccountPayableGLDistributionNew.PODetailLineNumber) OrElse
                    AccountPayableGLDistributionOld.GLACode <> AccountPayableGLDistributionNew.GLACode Then

                IsDirty = True

            End If

            IsNonClientRowDirty = IsDirty

        End Function
        Private Function IsMagazineRowDirty(ByVal AccountPayableMagazineOld As AdvantageFramework.Database.Entities.AccountPayableMagazine, ByVal AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) As Boolean

            Dim IsDirty As Boolean = False

            If AccountPayableMagazineOld.OrderNumber <> AccountPayableMagazineDistributionDetail.OrderNumber.GetValueOrDefault(0) OrElse
                    AccountPayableMagazineOld.OrderLineNumber <> AccountPayableMagazineDistributionDetail.OrderLineNumber.GetValueOrDefault(0) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.GrossAmount, AccountPayableMagazineDistributionDetail.GrossAmount) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.NetAmount, AccountPayableMagazineDistributionDetail.NetAmount) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.BleedGrossAmount, AccountPayableMagazineDistributionDetail.BleedGrossAmount) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.BleedNetAmount, AccountPayableMagazineDistributionDetail.BleedNetAmount) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.PositionGrossAmount, AccountPayableMagazineDistributionDetail.PositionGrossAmount) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.PositionNetAmount, AccountPayableMagazineDistributionDetail.PositionNetAmount) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.PremiumGrossAmount, AccountPayableMagazineDistributionDetail.PremiumGrossAmount) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.PremiumNetAmount, AccountPayableMagazineDistributionDetail.PremiumNetAmount) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.ColorGrossAmount, AccountPayableMagazineDistributionDetail.ColorGrossAmount) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.ColorNetAmount, AccountPayableMagazineDistributionDetail.ColorNetAmount) OrElse
                    Math.Abs(AccountPayableMagazineOld.DiscountLN.GetValueOrDefault(0)) <> Math.Abs(AccountPayableMagazineDistributionDetail.DiscountLN.GetValueOrDefault(0)) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.NetCharges, AccountPayableMagazineDistributionDetail.NetCharges) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.VendorTax, AccountPayableMagazineDistributionDetail.VendorTax) OrElse
                    Not Nullable.Equals(AccountPayableMagazineOld.DisbursedAmount, AccountPayableMagazineDistributionDetail.DisbursedAmount) OrElse
                    AccountPayableMagazineOld.SalesTaxCode <> AccountPayableMagazineDistributionDetail.SalesTaxCode Then

                IsDirty = True

            End If

            IsMagazineRowDirty = IsDirty

        End Function
        Private Function IsNewspaperRowDirty(ByVal AccountPayableNewspaperOld As AdvantageFramework.Database.Entities.AccountPayableNewspaper, ByVal AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) As Boolean

            Dim IsDirty As Boolean = False

            If AccountPayableNewspaperOld.OrderNumber <> AccountPayableNewspaperDistributionDetail.OrderNumber.GetValueOrDefault(0) OrElse
                    AccountPayableNewspaperOld.OrderLineNumber <> AccountPayableNewspaperDistributionDetail.OrderLineNumber.GetValueOrDefault(0) OrElse
                    Not Nullable.Equals(AccountPayableNewspaperOld.GrossAmount, AccountPayableNewspaperDistributionDetail.GrossAmount) OrElse
                    Not Nullable.Equals(AccountPayableNewspaperOld.NetAmount, AccountPayableNewspaperDistributionDetail.NetAmount) OrElse
                    Math.Abs(AccountPayableNewspaperOld.DiscountLN.GetValueOrDefault(0)) <> Math.Abs(AccountPayableNewspaperDistributionDetail.DiscountLN.GetValueOrDefault(0)) OrElse
                    Not Nullable.Equals(AccountPayableNewspaperOld.NetCharges, AccountPayableNewspaperDistributionDetail.NetCharges) OrElse
                    Not Nullable.Equals(AccountPayableNewspaperOld.VendorTax, AccountPayableNewspaperDistributionDetail.VendorTax) OrElse
                    Not Nullable.Equals(AccountPayableNewspaperOld.DisbursedAmount, AccountPayableNewspaperDistributionDetail.DisbursedAmount) OrElse
                    AccountPayableNewspaperOld.SalesTaxCode <> AccountPayableNewspaperDistributionDetail.SalesTaxCode Then 'PrintLines and Rate cannot be manually altered

                IsDirty = True

            End If

            IsNewspaperRowDirty = IsDirty

        End Function
        Private Function IsOutOfHomeRowDirty(ByVal AccountPayableOutOfHomeOld As AdvantageFramework.Database.Entities.AccountPayableOutOfHome, ByVal AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) As Boolean

            Dim IsDirty As Boolean = False

            If AccountPayableOutOfHomeOld.OutdoorOrderNumber <> AccountPayableOutOfHomeDistributionDetail.OutdoorOrderNumber.GetValueOrDefault(0) OrElse
                    AccountPayableOutOfHomeOld.OutdoorDetailLineNumber <> AccountPayableOutOfHomeDistributionDetail.OutdoorDetailLineNumber.GetValueOrDefault(0) OrElse
                    Not Nullable.Equals(AccountPayableOutOfHomeOld.NetAmount, AccountPayableOutOfHomeDistributionDetail.NetAmount) OrElse
                    Math.Abs(AccountPayableOutOfHomeOld.DiscountAmount.GetValueOrDefault(0)) <> Math.Abs(AccountPayableOutOfHomeDistributionDetail.DiscountAmount.GetValueOrDefault(0)) OrElse
                    Not Nullable.Equals(AccountPayableOutOfHomeOld.NetCharges, AccountPayableOutOfHomeDistributionDetail.NetCharges) OrElse
                    Not Nullable.Equals(AccountPayableOutOfHomeOld.VendorTax, AccountPayableOutOfHomeDistributionDetail.VendorTax) OrElse
                    AccountPayableOutOfHomeOld.SalesTaxCode <> AccountPayableOutOfHomeDistributionDetail.SalesTaxCode Then

                IsDirty = True

            End If

            IsOutOfHomeRowDirty = IsDirty

        End Function
        Private Function IsRadioRowDirty(ByVal AccountPayableRadioOld As AdvantageFramework.Database.Entities.AccountPayableRadio, ByVal AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) As Boolean

            Dim IsDirty As Boolean = False

            If AccountPayableRadioOld.OrderNumber <> AccountPayableRadioDistributionDetail.OrderNumber.GetValueOrDefault(0) OrElse
                    Not Nullable.Equals(AccountPayableRadioOld.OrderLineNumber, AccountPayableRadioDistributionDetail.OrderLineNumber) OrElse
                    Not Nullable.Equals(AccountPayableRadioOld.ExtendedNetAmount, AccountPayableRadioDistributionDetail.ExtendedNetAmount) OrElse
                    Math.Abs(AccountPayableRadioOld.DiscountAmount.GetValueOrDefault(0)) <> Math.Abs(AccountPayableRadioDistributionDetail.DiscountAmount.GetValueOrDefault(0)) OrElse
                    Not Nullable.Equals(AccountPayableRadioOld.NetCharges, AccountPayableRadioDistributionDetail.NetCharges) OrElse
                    Not Nullable.Equals(AccountPayableRadioOld.VendorTax, AccountPayableRadioDistributionDetail.VendorTax) OrElse
                    AccountPayableRadioOld.SalesTaxCode <> AccountPayableRadioDistributionDetail.SalesTaxCode OrElse
                    Not Nullable.Equals(AccountPayableRadioOld.TotalSpots, AccountPayableRadioDistributionDetail.TotalSpots) Then

                IsDirty = True

            End If

            IsRadioRowDirty = IsDirty

        End Function
        Private Function IsTVRowDirty(ByVal AccountPayableTVOld As AdvantageFramework.Database.Entities.AccountPayableTV, ByVal AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) As Boolean

            Dim IsDirty As Boolean = False

            If AccountPayableTVOld.OrderNumber <> AccountPayableTVDistributionDetail.OrderNumber.GetValueOrDefault(0) OrElse
                    Not Nullable.Equals(AccountPayableTVOld.OrderLineNumber, AccountPayableTVDistributionDetail.OrderLineNumber) OrElse
                    Not Nullable.Equals(AccountPayableTVOld.ExtendedNetAmount, AccountPayableTVDistributionDetail.ExtendedNetAmount) OrElse
                    Math.Abs(AccountPayableTVOld.DiscountAmount.GetValueOrDefault(0)) <> Math.Abs(AccountPayableTVDistributionDetail.DiscountAmount.GetValueOrDefault(0)) OrElse
                    Not Nullable.Equals(AccountPayableTVOld.NetCharges, AccountPayableTVDistributionDetail.NetCharges) OrElse
                    Not Nullable.Equals(AccountPayableTVOld.VendorTax, AccountPayableTVDistributionDetail.VendorTax) OrElse
                    AccountPayableTVOld.SalesTaxCode <> AccountPayableTVDistributionDetail.SalesTaxCode OrElse
                    Not Nullable.Equals(AccountPayableTVOld.TotalSpots, AccountPayableTVDistributionDetail.TotalSpots) Then

                IsDirty = True

            End If

            IsTVRowDirty = IsDirty

        End Function
        Private Sub SaveNonClient(ByVal DbContext As AdvantageFramework.Database.DbContext, ByRef GLTransaction As Integer, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable,
                                  ByVal VendorName As String, ByVal PostPeriodChanged As Boolean, ByVal GLReversalTransaction As Integer)

            Dim AccountPayableGLDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail) = Nothing
            Dim AccountPayableGLDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail = Nothing
            Dim AccountPayableGLDistributionOld As AdvantageFramework.Database.Entities.AccountPayableGLDistribution = Nothing
            Dim LineNumber As Short = Nothing
            Dim RemarkOld As String = Nothing
            Dim Remark As String = Nothing
            Dim POComplete As Short = 0

            If TabItemAPDetails_NonClientTab.Tag = True Then

                AccountPayableGLDistributionDetailList = DataGridViewNonClient_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)().ToList

                For Each AccountPayableGLDistributionDetail In AccountPayableGLDistributionDetailList

                    If AccountPayableGLDistributionDetail.AccountPayableGLDistribution.IsEntityBeingAdded() Then 'new rows added to NonClient

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayableGLDistributionDetail.Comment
                        AdvantageFramework.AccountPayable.AddNonClient(DbContext, GLTransaction, AccountPayableGLDistributionDetail.GLACode, AccountPayableGLDistributionDetail.Amount, Remark, _GLSourceCode, AccountPayableGLDistributionDetail.PODetailLineNumber, AccountPayableGLDistributionDetail.PONumber, _Session.UserCode, AccountPayableGLDistributionDetail.OfficeCode, AccountPayableGLDistributionDetail.Comment, AccountPayable, VendorName, _BatchDate, AccountPayableGLDistributionDetail.AccountPayableGLDistribution.ExpenseReportDetailID)

                    Else

                        LineNumber = AccountPayableGLDistributionDetail.LineNumber

                        Try

                            AccountPayableGLDistributionOld = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.Load(DbContext)
                                                               Where Entity.AccountPayableID = AccountPayable.ID AndAlso
                                                                     Entity.LineNumber = LineNumber AndAlso
                                                                     (Entity.ModifyDelete Is Nothing OrElse
                                                                      Entity.ModifyDelete = 0)
                                                               Select Entity).SingleOrDefault

                        Catch ex As Exception
                            Throw New Exception("Error gathering AP_GL_DIST row.")
                        End Try

                        If AccountPayableGLDistributionDetail.IsDeleted OrElse IsNonClientRowDirty(AccountPayableGLDistributionOld, AccountPayableGLDistributionDetail.AccountPayableGLDistribution) OrElse PostPeriodChanged Then

                            If GLTransaction = -1 Then

                                GLTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayable, VendorName, False, False, _GLSourceCode, _BatchDate)

                            End If

                            RemarkOld = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayableGLDistributionOld.Comment
                            Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayableGLDistributionDetail.Comment

                            If Not PostPeriodChanged Then

                                ReverseNonClient(DbContext, AccountPayableGLDistributionDetail.IsDeleted, AccountPayableGLDistributionOld, GLTransaction, RemarkOld, AccountPayable.ID, AccountPayable.PostPeriodCode, Remark, PostPeriodChanged)

                            Else

                                ReverseNonClient(DbContext, False, AccountPayableGLDistributionOld, GLReversalTransaction, RemarkOld, AccountPayable.ID, AccountPayableGLDistributionOld.PostPeriodCode, Remark, PostPeriodChanged)

                            End If

                            If Not AccountPayableGLDistributionDetail.IsDeleted Then

                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayableGLDistributionDetail.Comment
                                AdvantageFramework.AccountPayable.AddNonClient(DbContext, GLTransaction, AccountPayableGLDistributionDetail.GLACode, AccountPayableGLDistributionDetail.Amount, Remark, _GLSourceCode, AccountPayableGLDistributionDetail.PODetailLineNumber, AccountPayableGLDistributionDetail.PONumber, _Session.UserCode, AccountPayableGLDistributionDetail.OfficeCode, AccountPayableGLDistributionDetail.Comment, AccountPayable, VendorName, _BatchDate, AccountPayableGLDistributionDetail.AccountPayableGLDistribution.ExpenseReportDetailID)

                            End If

                        ElseIf AccountPayableGLDistributionOld.Comment <> AccountPayableGLDistributionDetail.AccountPayableGLDistribution.Comment Then

                            AccountPayableGLDistributionDetail.AccountPayableGLDistribution.ModifiedBy = _Session.UserCode
                            AccountPayableGLDistributionDetail.AccountPayableGLDistribution.ModifyDate = Now
                            If AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.Update(DbContext, AccountPayableGLDistributionDetail.AccountPayableGLDistribution) = False Then

                                Throw New Exception("Problem updating AP GL Comment.")

                            End If

                        End If

                    End If

                    If AccountPayableGLDistributionDetail.PONumber IsNot Nothing AndAlso AccountPayableGLDistributionDetail.PODetailLineNumber IsNot Nothing Then

                        POComplete = 0

                        If (From Entity In AccountPayableGLDistributionDetailList
                            Where Entity.PONumber = AccountPayableGLDistributionDetail.PONumber AndAlso
                                  Entity.PODetailLineNumber = AccountPayableGLDistributionDetail.PODetailLineNumber AndAlso
                                  Entity.IsDeleted = False AndAlso
                                  Entity.POComplete = 1).Any Then

                            POComplete = 1

                        End If

                        If AdvantageFramework.Database.Procedures.PurchaseOrderDetail.UpdateIsCompleteAndParentPO(DbContext, AccountPayableGLDistributionDetail.PONumber, AccountPayableGLDistributionDetail.PODetailLineNumber, POComplete) = False Then

                            Throw New Exception("Failed to update purchase order.")

                        End If

                    End If

                Next

            ElseIf PostPeriodChanged Then

                AccountPayableGLDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)

                AccountPayableGLDistributionDetailList.AddRange(From APGLDist In AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.Load(DbContext).ToList
                                                                Where APGLDist.AccountPayableID = _ID AndAlso
                                                                      (APGLDist.ModifyDelete Is Nothing OrElse
                                                                       APGLDist.ModifyDelete = 0)
                                                                Select New AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail(DbContext, APGLDist))

                For Each AccountPayableGLDistributionDetail In AccountPayableGLDistributionDetailList

                    RemarkOld = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayableGLDistributionDetail.Comment
                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayableGLDistributionDetail.Comment

                    ReverseNonClient(DbContext, False, AccountPayableGLDistributionDetail.AccountPayableGLDistribution, GLReversalTransaction, RemarkOld, AccountPayable.ID, AccountPayableGLDistributionDetail.AccountPayableGLDistribution.PostPeriodCode, Remark, PostPeriodChanged)

                    AdvantageFramework.AccountPayable.AddNonClient(DbContext, GLTransaction, AccountPayableGLDistributionDetail.GLACode, AccountPayableGLDistributionDetail.Amount, Remark, _GLSourceCode, AccountPayableGLDistributionDetail.PODetailLineNumber, AccountPayableGLDistributionDetail.PONumber, _Session.UserCode, AccountPayableGLDistributionDetail.OfficeCode, AccountPayableGLDistributionDetail.Comment, AccountPayable, VendorName, _BatchDate, AccountPayableGLDistributionDetail.AccountPayableGLDistribution.ExpenseReportDetailID)

                Next

            End If

        End Sub
        Private Sub ReverseNonClient(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal IsDeleted As Boolean,
                                     ByVal AccountPayableGLDistributionOld As AdvantageFramework.Database.Entities.AccountPayableGLDistribution, ByVal GLTransaction As Integer,
                                     ByVal RemarkOld As String, ByVal AccountPayableID As Integer, ByVal PostPeriodCode As String, ByVal RemarkNew As String, ByVal PostPeriodChanged As Boolean)

            Dim GeneralLedgerDetail As AdvantageFramework.Database.Entities.GeneralLedgerDetail = Nothing
            Dim DuplicateAccountPayableGLDistribution As AdvantageFramework.Database.Entities.AccountPayableGLDistribution = Nothing

            If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableGLDistributionOld.GLACode,
                       AccountPayableGLDistributionOld.Amount * -1, RemarkOld, _GLSourceCode) = False Then

                Throw New Exception("Problem inserting General Ledger Detail.")

            End If

            AccountPayableGLDistributionOld.ModifyDelete = 1
            AccountPayableGLDistributionOld.ModifiedBy = _Session.UserCode
            AccountPayableGLDistributionOld.ModifyDate = Now

            If AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.Update(DbContext, AccountPayableGLDistributionOld) = False Then

                Throw New Exception("Problem updating AP GL Distribution.")

            End If

            'debit AP_GL_DIST
            DuplicateAccountPayableGLDistribution = New AdvantageFramework.Database.Entities.AccountPayableGLDistribution
            DuplicateAccountPayableGLDistribution.DbContext = DbContext

            DuplicateAccountPayableGLDistribution = AccountPayableGLDistributionOld.Copy()

            DuplicateAccountPayableGLDistribution.AccountPayableID = AccountPayableID
            DuplicateAccountPayableGLDistribution.AccountPayableSequenceNumber = 0
            DuplicateAccountPayableGLDistribution.GLACode = AccountPayableGLDistributionOld.GLACode
            DuplicateAccountPayableGLDistribution.Amount = -1 * AccountPayableGLDistributionOld.Amount
            DuplicateAccountPayableGLDistribution.PODetailLineNumber = AccountPayableGLDistributionOld.PODetailLineNumber
            DuplicateAccountPayableGLDistribution.GLTransaction = GeneralLedgerDetail.GLTransaction
            DuplicateAccountPayableGLDistribution.GLSequenceNumber = GeneralLedgerDetail.SequenceNumber
            DuplicateAccountPayableGLDistribution.PostPeriodCode = PostPeriodCode
            DuplicateAccountPayableGLDistribution.PONumber = AccountPayableGLDistributionOld.PONumber
            DuplicateAccountPayableGLDistribution.Comment = AccountPayableGLDistributionOld.Comment
            DuplicateAccountPayableGLDistribution.OfficeCode = AccountPayableGLDistributionOld.OfficeCode
            DuplicateAccountPayableGLDistribution.ModifyDelete = 1
            DuplicateAccountPayableGLDistribution.ModifyDate = Now
            DuplicateAccountPayableGLDistribution.ModifiedBy = _Session.UserCode
            DuplicateAccountPayableGLDistribution.IsDeleted = Nothing
            DuplicateAccountPayableGLDistribution.CreateDate = Now
            DuplicateAccountPayableGLDistribution.CreatedBy = _Session.UserCode

            If AccountPayableGLDistributionOld.GLSequenceNumberDueFrom IsNot Nothing AndAlso AccountPayableGLDistributionOld.GLSequenceNumberDueFrom <> 0 Then

                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableGLDistributionOld.GLACodeDueFrom,
                       AccountPayableGLDistributionOld.Amount * -1, RemarkNew, _GLSourceCode) = False Then

                    Throw New Exception("Problem inserting General Ledger Detail.")

                End If

                DuplicateAccountPayableGLDistribution.GLACodeDueFrom = AccountPayableGLDistributionOld.GLACodeDueFrom
                DuplicateAccountPayableGLDistribution.GLSequenceNumberDueFrom = GeneralLedgerDetail.SequenceNumber

                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableGLDistributionOld.GLACodeDueTo,
                        AccountPayableGLDistributionOld.Amount, RemarkNew, _GLSourceCode) = False Then

                    Throw New Exception("Problem inserting General Ledger Detail.")

                End If

                DuplicateAccountPayableGLDistribution.GLACodeDueTo = AccountPayableGLDistributionOld.GLACodeDueTo
                DuplicateAccountPayableGLDistribution.GLSequenceNumberDueTo = GeneralLedgerDetail.SequenceNumber

            End If

            If IsDeleted Then

                If DuplicateAccountPayableGLDistribution.PONumber IsNot Nothing AndAlso DuplicateAccountPayableGLDistribution.PODetailLineNumber IsNot Nothing Then

                    DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.PURCHASE_ORDER SET PO_COMPLETE=NULL WHERE PO_NUMBER={0}", DuplicateAccountPayableGLDistribution.PONumber))
                    DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.PURCHASE_ORDER_DET SET PO_COMPLETE=NULL WHERE PO_NUMBER={0}", DuplicateAccountPayableGLDistribution.PONumber))

                End If

                DuplicateAccountPayableGLDistribution.PONumber = Nothing
                DuplicateAccountPayableGLDistribution.PODetailLineNumber = Nothing

            End If

            If AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.InsertWithoutValidate(DbContext, DuplicateAccountPayableGLDistribution) = False Then

                Throw New Exception("Problem inserting AP GL Distribution.")

            End If

        End Sub
        Private Function RadioComplete(ByRef IsValid As Boolean) As String

            Dim AccountPayableRadioDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim ErrorText As String = Nothing
            Dim PropertyErrorText As String = Nothing
            Dim FailedOnce As Boolean = False

            AccountPayableRadioDistributionDetails = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)().ToList

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                For Each AccountPayableRadioDistributionDetail In AccountPayableRadioDistributionDetails

                    AccountPayableRadioDistributionDetail.DbContext = DbContext

                    PropertyErrorText = AccountPayableRadioDistributionDetail.ValidateEntity(IsValid)

                    If IsValid = False Then

                        ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)

                        FailedOnce = True

                    End If

                Next

                If Not ValidateRadioBroadcastDetails() Then

                    PropertyErrorText = "Please enter a valid Order."
                    ErrorText = IIf(ErrorText = "", PropertyErrorText, ErrorText & Environment.NewLine & PropertyErrorText)
                    FailedOnce = True

                End If

            End Using

            IsValid = Not FailedOnce

            RadioComplete = ErrorText

        End Function
        Private Sub RefreshInvoice(ByVal ID As Integer, ByVal SequenceNumber As Short, ByVal BatchDate As Date)

            _ID = 0
            _SequenceNumber = 0

            LoadControl(Nothing, ID, SequenceNumber, _BatchDate, _ShowGrossColumns, _SelectDocumentsTab) ', _ShowHomeColumns)

        End Sub
        Private Function RequiresMediaApproval(ByVal Media As AdvantageFramework.AccountPayable.MediaType, ByVal TotalDisbursed As Decimal, ByVal OrderNetAmount As Decimal) As Boolean

            RequiresMediaApproval = AdvantageFramework.AccountPayable.RequiresMediaApproval(_Session, Media, TotalDisbursed, OrderNetAmount)

        End Function
        Private Sub ReverseInternet(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail,
                                    ByVal AccountPayableInternetOld As AdvantageFramework.Database.Entities.AccountPayableInternet,
                                    ByVal GLTransaction As Integer, ByVal Remark As String, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable, ByRef Orders As Collection,
                                    ByVal AccountPayableInternetDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail),
                                    ByRef OfficeCodeList As Generic.List(Of String), ByRef DueFromSeqNo As Collection, ByRef DueToSeqNo As Collection,
                                    ByVal VendorName As String, ByVal IsFullAPDelete As Boolean, ByVal PostPeriodCode As String, ByVal PostPeriodChanged As Boolean)

            Dim GeneralLedgerDetail As AdvantageFramework.Database.Entities.GeneralLedgerDetail = Nothing
            Dim AccountPayableInternet As AdvantageFramework.Database.Entities.AccountPayableInternet = Nothing
            Dim Amount As Decimal = Nothing
            Dim OldAmount As Decimal = Nothing
            Dim OrderKey As String = Nothing
            Dim InterCompanyKey As String = Nothing

            If PostPeriodChanged Then

                OrderKey = "Reversal" & AccountPayableInternetOld.InternetOrderNumber

            Else

                OrderKey = AccountPayableInternetOld.InternetOrderNumber

            End If

            If Orders.Contains(OrderKey) = False Then

                Amount = AccountPayableInternetDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False AndAlso
                                                                            Entity.InternetOrderNumber = AccountPayableInternetOld.InternetOrderNumber).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                Try

                    OldAmount = AdvantageFramework.Database.Procedures.AccountPayableInternet.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID) _
                                    .Where(Function(Entity) Entity.InternetOrderNumber = AccountPayableInternetOld.InternetOrderNumber).ToList.Sum(Function(Entity) Entity.NetAmount.GetValueOrDefault(0) + Entity.DiscountAmount.GetValueOrDefault(0) + Entity.NetCharges.GetValueOrDefault(0) + Entity.VendorTax.GetValueOrDefault(0))

                Catch ex As Exception
                    OldAmount = 0
                End Try

                If IsFullAPDelete OrElse PostPeriodChanged Then

                    Amount = OldAmount * -1

                Else

                    Amount = Amount - OldAmount

                End If

                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableInternetOld.GLACode,
                       Amount, Remark, _GLSourceCode, AccountPayableInternetDistributionDetail.ClientCode, AccountPayableInternetDistributionDetail.DivisionCode,
                       AccountPayableInternetDistributionDetail.ProductCode) = False Then

                    Throw New Exception("Problem inserting General Ledger Detail.")

                End If

                Orders.Add(GeneralLedgerDetail.SequenceNumber, OrderKey)

            End If

            'debit AP_INTERNET
            AccountPayableInternet = New AdvantageFramework.Database.Entities.AccountPayableInternet
            AccountPayableInternet.DbContext = DbContext

            AccountPayableInternet = AccountPayableInternetOld.Copy()

            AccountPayableInternet.AccountPayableID = AccountPayable.ID
            AccountPayableInternet.AccountPayableSequenceNumber = 0
            AccountPayableInternet.GLTransaction = GLTransaction
            AccountPayableInternet.GLSequenceNumber = Orders.Item(OrderKey)
            AccountPayableInternet.NetAmount = AccountPayableInternetOld.NetAmount * -1

            AccountPayableInternet.CommissionAmount = AccountPayableInternetOld.CommissionAmount * -1
            AccountPayableInternet.RebateAmount = AccountPayableInternetOld.RebateAmount * -1
            AccountPayableInternet.VendorTax = AccountPayableInternetOld.VendorTax * -1
            AccountPayableInternet.StateTax = AccountPayableInternetOld.StateTax * -1
            AccountPayableInternet.CountyTax = AccountPayableInternetOld.CountyTax * -1
            AccountPayableInternet.CityTax = AccountPayableInternetOld.CityTax * -1
            AccountPayableInternet.NetCharges = AccountPayableInternetOld.NetCharges * -1
            AccountPayableInternet.DiscountAmount = Math.Abs(AccountPayableInternetOld.DiscountAmount.GetValueOrDefault(0))
            AccountPayableInternet.Impressions = AccountPayableInternetOld.Impressions * -1

            AccountPayableInternet.LineTotal = AccountPayableInternetOld.LineTotal * -1
            AccountPayableInternet.ModifyDelete = 1
            AccountPayableInternet.ModifiedBy = _Session.UserCode
            AccountPayableInternet.ModifyDate = Now
            AccountPayableInternet.IsDeleted = Nothing
            AccountPayableInternet.PostPeriodCode = PostPeriodCode
            AccountPayableInternet.CreateDate = Now
            AccountPayableInternet.CreatedBy = _Session.UserCode

            If AccountPayableInternetOld.GLSequenceNumberDueFrom IsNot Nothing AndAlso AccountPayableInternetOld.GLSequenceNumberDueFrom <> 0 Then

                If PostPeriodChanged Then

                    InterCompanyKey = "Reversal" & AccountPayableInternetOld.OfficeCode

                Else

                    InterCompanyKey = AccountPayableInternetOld.OfficeCode

                End If

                If OfficeCodeList.Contains(InterCompanyKey) = False Then

                    OfficeCodeList.Add(InterCompanyKey)

                    Amount = AccountPayableInternetDistributionDetailList.Where(Function(Entity) Entity.OfficeCode = AccountPayableInternetOld.OfficeCode AndAlso Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                    Try

                        OldAmount = AdvantageFramework.Database.Procedures.AccountPayableInternet.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID).
                                        Where(Function(Entity) Entity.OfficeCode = AccountPayableInternetOld.OfficeCode).ToList.Sum(Function(Entity) Entity.NetAmount.GetValueOrDefault(0) + Entity.DiscountAmount.GetValueOrDefault(0) + Entity.NetCharges.GetValueOrDefault(0) + Entity.VendorTax.GetValueOrDefault(0))

                    Catch ex As Exception
                        OldAmount = 0
                    End Try

                    If IsFullAPDelete OrElse PostPeriodChanged Then

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " - " & IIf(PostPeriodChanged, "POST PERIOD MODIFY", "DELETE") & " [IC]"
                        Amount = OldAmount * -1

                    Else

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " [IC]"
                        Amount = Amount - OldAmount

                    End If

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableInternetOld.GLACodeDueFrom,
                            Amount, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueFromSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableInternet.GLACodeDueFrom = AccountPayableInternetOld.GLACodeDueFrom
                    AccountPayableInternet.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableInternetOld.GLACodeDueTo,
                            Amount * -1, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueToSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableInternet.GLACodeDueTo = AccountPayableInternetOld.GLACodeDueTo
                    AccountPayableInternet.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                Else

                    AccountPayableInternet.GLACodeDueFrom = AccountPayableInternetOld.GLACodeDueFrom
                    AccountPayableInternet.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    AccountPayableInternet.GLACodeDueTo = AccountPayableInternetOld.GLACodeDueTo
                    AccountPayableInternet.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                End If

            End If

            If AdvantageFramework.Database.Procedures.AccountPayableInternet.InsertWithoutValidate(DbContext, AccountPayableInternet) = False Then

                Throw New Exception("Problem inserting AP Internet.")

            End If

            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_INTERNET SET MODIFY_DELETE=1, MODIFIED_BY='{2}', MODIFY_DATE=getdate() WHERE AP_ID={0} AND AP_SEQ=0 AND LINE_NUMBER={1}", AccountPayable.ID, AccountPayableInternetOld.LineNumber, _Session.UserCode))

        End Sub
        Private Sub ReverseMagazine(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail,
                                    ByVal AccountPayableMagazineOld As AdvantageFramework.Database.Entities.AccountPayableMagazine,
                                    ByVal GLTransaction As Integer, ByVal Remark As String, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable, ByRef Orders As Collection,
                                    ByVal AccountPayableMagazineDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail),
                                    ByRef OfficeCodeList As Generic.List(Of String), ByRef DueFromSeqNo As Collection, ByRef DueToSeqNo As Collection,
                                    ByVal VendorName As String, ByVal IsFullAPDelete As Boolean, ByVal PostPeriodCode As String, ByVal PostPeriodChanged As Boolean)

            Dim GeneralLedgerDetail As AdvantageFramework.Database.Entities.GeneralLedgerDetail = Nothing
            Dim AccountPayableMagazine As AdvantageFramework.Database.Entities.AccountPayableMagazine = Nothing
            Dim Amount As Decimal = Nothing
            Dim OldAmount As Decimal = Nothing
            Dim OrderKey As String = Nothing
            Dim InterCompanyKey As String = Nothing

            If PostPeriodChanged Then

                OrderKey = "Reversal" & AccountPayableMagazineOld.OrderNumber

            Else

                OrderKey = AccountPayableMagazineOld.OrderNumber

            End If

            If Orders.Contains(OrderKey) = False Then

                Amount = AccountPayableMagazineDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False AndAlso
                                                                            Entity.OrderNumber = AccountPayableMagazineOld.OrderNumber).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                Try

                    OldAmount = AdvantageFramework.Database.Procedures.AccountPayableMagazine.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID) _
                                    .Where(Function(Entity) Entity.OrderNumber = AccountPayableMagazineOld.OrderNumber).ToList.Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                Catch ex As Exception
                    OldAmount = 0
                End Try

                If IsFullAPDelete OrElse PostPeriodChanged Then

                    Amount = OldAmount * -1

                Else

                    Amount = Amount - OldAmount

                End If

                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableMagazineOld.GLACode,
                       Amount, Remark, _GLSourceCode, AccountPayableMagazineDistributionDetail.ClientCode, AccountPayableMagazineDistributionDetail.DivisionCode,
                       AccountPayableMagazineDistributionDetail.ProductCode) = False Then

                    Throw New Exception("Problem inserting General Ledger Detail.")

                End If

                Orders.Add(GeneralLedgerDetail.SequenceNumber, OrderKey)

            End If

            'debit AP_MAGAZINE
            AccountPayableMagazine = New AdvantageFramework.Database.Entities.AccountPayableMagazine
            AccountPayableMagazine.DbContext = DbContext

            AccountPayableMagazine = AccountPayableMagazineOld.Copy()

            AccountPayableMagazine.AccountPayableID = AccountPayable.ID
            AccountPayableMagazine.AccountPayableSequenceNumber = 0
            AccountPayableMagazine.GLTransaction = GLTransaction
            AccountPayableMagazine.GLSequenceNumber = Orders.Item(OrderKey)
            AccountPayableMagazine.NetAmount = AccountPayableMagazineOld.NetAmount * -1
            AccountPayableMagazine.GrossAmount = AccountPayableMagazineOld.GrossAmount * -1
            AccountPayableMagazine.CommissionAmount = AccountPayableMagazineOld.CommissionAmount * -1
            AccountPayableMagazine.RebateAmount = AccountPayableMagazineOld.RebateAmount * -1
            AccountPayableMagazine.VendorTax = AccountPayableMagazineOld.VendorTax * -1
            AccountPayableMagazine.StateTax = AccountPayableMagazineOld.StateTax * -1
            AccountPayableMagazine.CountyTax = AccountPayableMagazineOld.CountyTax * -1
            AccountPayableMagazine.CityTax = AccountPayableMagazineOld.CityTax * -1
            AccountPayableMagazine.BleedNetAmount = AccountPayableMagazineOld.BleedNetAmount * -1
            AccountPayableMagazine.BleedGrossAmount = AccountPayableMagazineOld.BleedGrossAmount * -1
            AccountPayableMagazine.ColorNetAmount = AccountPayableMagazineOld.ColorNetAmount * -1
            AccountPayableMagazine.ColorGrossAmount = AccountPayableMagazineOld.ColorGrossAmount * -1
            AccountPayableMagazine.PositionNetAmount = AccountPayableMagazineOld.PositionNetAmount * -1
            AccountPayableMagazine.PositionGrossAmount = AccountPayableMagazineOld.PositionGrossAmount * -1
            AccountPayableMagazine.PremiumNetAmount = AccountPayableMagazineOld.PremiumNetAmount * -1
            AccountPayableMagazine.PremiumGrossAmount = AccountPayableMagazineOld.PremiumGrossAmount * -1
            AccountPayableMagazine.NetCharges = AccountPayableMagazineOld.NetCharges * -1
            AccountPayableMagazine.DiscountLN = Math.Abs(AccountPayableMagazineOld.DiscountLN.GetValueOrDefault(0))

            AccountPayableMagazine.NetPlus = AccountPayableMagazineOld.NetPlus * -1
            AccountPayableMagazine.GrossPlus = AccountPayableMagazineOld.GrossPlus * -1
            AccountPayableMagazine.DisbursedAmount = AccountPayableMagazineOld.DisbursedAmount * -1
            AccountPayableMagazine.LineTotal = AccountPayableMagazineOld.LineTotal * -1
            AccountPayableMagazine.ModifyDelete = 1
            AccountPayableMagazine.ModifiedBy = _Session.UserCode
            AccountPayableMagazine.ModifyDate = Now
            AccountPayableMagazine.IsDeleted = Nothing
            AccountPayableMagazine.PostPeriodCode = PostPeriodCode
            AccountPayableMagazine.CreateDate = Now
            AccountPayableMagazine.CreatedBy = _Session.UserCode

            If AccountPayableMagazineOld.GLSequenceNumberDueFrom IsNot Nothing AndAlso AccountPayableMagazineOld.GLSequenceNumberDueFrom <> 0 Then

                If PostPeriodChanged Then

                    InterCompanyKey = "Reversal" & AccountPayableMagazineOld.OfficeCode

                Else

                    InterCompanyKey = AccountPayableMagazineOld.OfficeCode

                End If

                If OfficeCodeList.Contains(InterCompanyKey) = False Then

                    OfficeCodeList.Add(InterCompanyKey)

                    Amount = AccountPayableMagazineDistributionDetailList.Where(Function(Entity) Entity.OfficeCode = AccountPayableMagazineOld.OfficeCode AndAlso Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                    Try

                        OldAmount = AdvantageFramework.Database.Procedures.AccountPayableMagazine.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID).Where(Function(Entity) Entity.OfficeCode = AccountPayableMagazineOld.OfficeCode).ToList.Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                    Catch ex As Exception
                        OldAmount = 0
                    End Try

                    If IsFullAPDelete OrElse PostPeriodChanged Then

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " - " & IIf(PostPeriodChanged, "POST PERIOD MODIFY", "DELETE") & " [IC]"
                        Amount = OldAmount * -1

                    Else

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " [IC]"
                        Amount = Amount - OldAmount

                    End If

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableMagazineOld.GLACodeDueFrom,
                            Amount, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueFromSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableMagazine.GLACodeDueFrom = AccountPayableMagazineOld.GLACodeDueFrom
                    AccountPayableMagazine.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableMagazineOld.GLACodeDueTo,
                            Amount * -1, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueToSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableMagazine.GLACodeDueTo = AccountPayableMagazineOld.GLACodeDueTo
                    AccountPayableMagazine.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                Else

                    AccountPayableMagazine.GLACodeDueFrom = AccountPayableMagazineOld.GLACodeDueFrom
                    AccountPayableMagazine.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    AccountPayableMagazine.GLACodeDueTo = AccountPayableMagazineOld.GLACodeDueTo
                    AccountPayableMagazine.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                End If

            End If

            If AdvantageFramework.Database.Procedures.AccountPayableMagazine.InsertWithoutValidate(DbContext, AccountPayableMagazine) = False Then

                Throw New Exception("Problem inserting AP Magazine.")

            End If

            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_MAGAZINE SET MODIFY_DELETE=1, MODIFIED_BY='{2}', MODIFY_DATE=getdate() WHERE AP_ID={0} AND AP_SEQ=0 AND LINE_NUMBER={1}", AccountPayable.ID, AccountPayableMagazineOld.LineNumber, _Session.UserCode))

        End Sub
        Private Sub ReverseNewspaper(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail,
                                     ByVal AccountPayableNewspaperOld As AdvantageFramework.Database.Entities.AccountPayableNewspaper,
                                     ByVal GLTransaction As Integer, ByVal Remark As String, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable, ByRef Orders As Collection,
                                     ByVal AccountPayableNewspaperDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail),
                                     ByRef OfficeCodeList As Generic.List(Of String), ByRef DueFromSeqNo As Collection, ByRef DueToSeqNo As Collection,
                                     ByVal VendorName As String, ByVal IsFullAPDelete As Boolean, ByVal PostPeriodCode As String, ByVal PostPeriodChanged As Boolean)

            Dim GeneralLedgerDetail As AdvantageFramework.Database.Entities.GeneralLedgerDetail = Nothing
            Dim AccountPayableNewspaper As AdvantageFramework.Database.Entities.AccountPayableNewspaper = Nothing
            Dim Amount As Decimal = Nothing
            Dim OldAmount As Decimal = Nothing
            Dim OrderKey As String = Nothing
            Dim InterCompanyKey As String = Nothing

            If PostPeriodChanged Then

                OrderKey = "Reversal" & AccountPayableNewspaperOld.OrderNumber

            Else

                OrderKey = AccountPayableNewspaperOld.OrderNumber

            End If

            If Orders.Contains(OrderKey) = False Then

                Amount = AccountPayableNewspaperDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False AndAlso
                                                                                              Entity.OrderNumber = AccountPayableNewspaperOld.OrderNumber).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                Try

                    OldAmount = AdvantageFramework.Database.Procedures.AccountPayableNewspaper.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID) _
                                    .Where(Function(Entity) Entity.OrderNumber = AccountPayableNewspaperOld.OrderNumber).ToList.Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                Catch ex As Exception
                    OldAmount = 0
                End Try

                If IsFullAPDelete OrElse PostPeriodChanged Then

                    Amount = OldAmount * -1

                Else

                    Amount = Amount - OldAmount

                End If

                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableNewspaperOld.GLACode,
                       Amount, Remark, _GLSourceCode, AccountPayableNewspaperDistributionDetail.ClientCode, AccountPayableNewspaperDistributionDetail.DivisionCode,
                       AccountPayableNewspaperDistributionDetail.ProductCode) = False Then

                    Throw New Exception("Problem inserting General Ledger Detail.")

                End If

                Orders.Add(GeneralLedgerDetail.SequenceNumber, OrderKey)

            End If

            'debit AP_NEWSPAPER
            AccountPayableNewspaper = New AdvantageFramework.Database.Entities.AccountPayableNewspaper
            AccountPayableNewspaper.DbContext = DbContext

            AccountPayableNewspaper = AccountPayableNewspaperOld.Copy()

            AccountPayableNewspaper.AccountPayableID = AccountPayable.ID
            AccountPayableNewspaper.AccountPayableSequenceNumber = 0
            AccountPayableNewspaper.GLTransaction = GLTransaction
            AccountPayableNewspaper.GLSequenceNumber = Orders.Item(OrderKey)
            AccountPayableNewspaper.NetAmount = AccountPayableNewspaperOld.NetAmount * -1
            AccountPayableNewspaper.GrossAmount = AccountPayableNewspaperOld.GrossAmount * -1
            AccountPayableNewspaper.CommissionAmount = AccountPayableNewspaperOld.CommissionAmount * -1
            AccountPayableNewspaper.RebateAmount = AccountPayableNewspaperOld.RebateAmount * -1
            AccountPayableNewspaper.VendorTax = AccountPayableNewspaperOld.VendorTax * -1
            AccountPayableNewspaper.StateTax = AccountPayableNewspaperOld.StateTax * -1
            AccountPayableNewspaper.CountyTax = AccountPayableNewspaperOld.CountyTax * -1
            AccountPayableNewspaper.CityTax = AccountPayableNewspaperOld.CityTax * -1
            AccountPayableNewspaper.ColorNetAmount = AccountPayableNewspaperOld.ColorNetAmount * -1
            AccountPayableNewspaper.ColorGrossAmount = AccountPayableNewspaperOld.ColorGrossAmount * -1
            AccountPayableNewspaper.NetCharges = AccountPayableNewspaperOld.NetCharges * -1
            AccountPayableNewspaper.DiscountLN = Math.Abs(AccountPayableNewspaperOld.DiscountLN.GetValueOrDefault(0))

            AccountPayableNewspaper.NetPlus = AccountPayableNewspaperOld.NetPlus * -1
            AccountPayableNewspaper.GrossPlus = AccountPayableNewspaperOld.GrossPlus * -1
            AccountPayableNewspaper.DisbursedAmount = AccountPayableNewspaperOld.DisbursedAmount * -1
            AccountPayableNewspaper.LineTotal = AccountPayableNewspaperOld.LineTotal * -1
            AccountPayableNewspaper.PrintLines = AccountPayableNewspaperOld.PrintLines * -1

            AccountPayableNewspaper.ModifyDelete = 1
            AccountPayableNewspaper.ModifiedBy = _Session.UserCode
            AccountPayableNewspaper.ModifyDate = Now
            AccountPayableNewspaper.IsDeleted = Nothing
            AccountPayableNewspaper.PostPeriodCode = PostPeriodCode
            AccountPayableNewspaper.CreateDate = Now
            AccountPayableNewspaper.CreatedBy = _Session.UserCode

            If AccountPayableNewspaperOld.GLSequenceNumberDueFrom IsNot Nothing AndAlso AccountPayableNewspaperOld.GLSequenceNumberDueFrom <> 0 Then

                If PostPeriodChanged Then

                    InterCompanyKey = "Reversal" & AccountPayableNewspaperOld.OfficeCode

                Else

                    InterCompanyKey = AccountPayableNewspaperOld.OfficeCode

                End If

                If OfficeCodeList.Contains(InterCompanyKey) = False Then

                    OfficeCodeList.Add(InterCompanyKey)

                    Amount = AccountPayableNewspaperDistributionDetailList.Where(Function(Entity) Entity.OfficeCode = AccountPayableNewspaperOld.OfficeCode AndAlso Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                    Try

                        OldAmount = AdvantageFramework.Database.Procedures.AccountPayableNewspaper.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID).Where(Function(Entity) Entity.OfficeCode = AccountPayableNewspaperOld.OfficeCode).ToList.Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                    Catch ex As Exception
                        OldAmount = 0
                    End Try

                    If IsFullAPDelete OrElse PostPeriodChanged Then

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " - " & IIf(PostPeriodChanged, "POST PERIOD MODIFY", "DELETE") & " [IC]"
                        Amount = OldAmount * -1

                    Else

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " [IC]"
                        Amount = Amount - OldAmount

                    End If

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableNewspaperOld.GLACodeDueFrom,
                            Amount, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueFromSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableNewspaper.GLACodeDueFrom = AccountPayableNewspaperOld.GLACodeDueFrom
                    AccountPayableNewspaper.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableNewspaperOld.GLACodeDueTo,
                            Amount * -1, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueToSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableNewspaper.GLACodeDueTo = AccountPayableNewspaperOld.GLACodeDueTo
                    AccountPayableNewspaper.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                Else

                    AccountPayableNewspaper.GLACodeDueFrom = AccountPayableNewspaperOld.GLACodeDueFrom
                    AccountPayableNewspaper.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    AccountPayableNewspaper.GLACodeDueTo = AccountPayableNewspaperOld.GLACodeDueTo
                    AccountPayableNewspaper.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                End If

            End If

            If AdvantageFramework.Database.Procedures.AccountPayableNewspaper.InsertWithoutValidate(DbContext, AccountPayableNewspaper) = False Then

                Throw New Exception("Problem inserting AP Newspaper.")

            End If

            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_NEWSPAPER SET MODIFY_DELETE=1, MODIFIED_BY='{2}', MODIFY_DATE=getdate() WHERE AP_ID={0} AND AP_SEQ=0 AND LINE_NUMBER={1}", AccountPayable.ID, AccountPayableNewspaperOld.LineNumber, _Session.UserCode))

        End Sub
        Private Sub ReverseOutOfHome(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail,
                                     ByVal AccountPayableOutOfHomeOld As AdvantageFramework.Database.Entities.AccountPayableOutOfHome,
                                     ByVal GLTransaction As Integer, ByVal Remark As String, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable, ByRef Orders As Collection,
                                     ByVal AccountPayableOutOfHomeDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail),
                                     ByRef OfficeCodeList As Generic.List(Of String), ByRef DueFromSeqNo As Collection, ByRef DueToSeqNo As Collection,
                                     ByVal VendorName As String, ByVal IsFullAPDelete As Boolean, ByVal PostPeriodCode As String, ByVal PostPeriodChanged As Boolean)

            Dim GeneralLedgerDetail As AdvantageFramework.Database.Entities.GeneralLedgerDetail = Nothing
            Dim AccountPayableOutOfHome As AdvantageFramework.Database.Entities.AccountPayableOutOfHome = Nothing
            Dim Amount As Decimal = Nothing
            Dim OldAmount As Decimal = Nothing
            Dim OrderKey As String = Nothing
            Dim InterCompanyKey As String = Nothing

            If PostPeriodChanged Then

                OrderKey = "Reversal" & AccountPayableOutOfHomeOld.OutdoorOrderNumber

            Else

                OrderKey = AccountPayableOutOfHomeOld.OutdoorOrderNumber

            End If

            If Orders.Contains(OrderKey) = False Then

                Amount = AccountPayableOutOfHomeDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False AndAlso
                                                                             Entity.OutdoorOrderNumber = AccountPayableOutOfHomeOld.OutdoorOrderNumber).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                Try

                    OldAmount = AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID) _
                                    .Where(Function(Entity) Entity.OutdoorOrderNumber = AccountPayableOutOfHomeOld.OutdoorOrderNumber).ToList.Sum(Function(Entity) Entity.NetAmount.GetValueOrDefault(0) + Entity.DiscountAmount.GetValueOrDefault(0) + Entity.NetCharges.GetValueOrDefault(0) + Entity.VendorTax.GetValueOrDefault(0))

                Catch ex As Exception
                    OldAmount = 0
                End Try

                If IsFullAPDelete OrElse PostPeriodChanged Then

                    Amount = OldAmount * -1

                Else

                    Amount = Amount - OldAmount

                End If

                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableOutOfHomeOld.GLACode,
                       Amount, Remark, _GLSourceCode, AccountPayableOutOfHomeDistributionDetail.ClientCode, AccountPayableOutOfHomeDistributionDetail.DivisionCode,
                       AccountPayableOutOfHomeDistributionDetail.ProductCode) = False Then

                    Throw New Exception("Problem inserting General Ledger Detail.")

                End If

                Orders.Add(GeneralLedgerDetail.SequenceNumber, OrderKey)

            End If

            'debit AP_OUTDOOR
            AccountPayableOutOfHome = New AdvantageFramework.Database.Entities.AccountPayableOutOfHome
            AccountPayableOutOfHome.DbContext = DbContext

            AccountPayableOutOfHome = AccountPayableOutOfHomeOld.Copy()

            AccountPayableOutOfHome.AccountPayableID = AccountPayable.ID
            AccountPayableOutOfHome.AccountPayableSequenceNumber = 0
            AccountPayableOutOfHome.GLTransaction = GLTransaction
            AccountPayableOutOfHome.GLSequenceNumber = Orders.Item(OrderKey)
            AccountPayableOutOfHome.NetAmount = AccountPayableOutOfHomeOld.NetAmount * -1

            AccountPayableOutOfHome.CommissionAmount = AccountPayableOutOfHomeOld.CommissionAmount * -1
            AccountPayableOutOfHome.RebateAmount = AccountPayableOutOfHomeOld.RebateAmount * -1
            AccountPayableOutOfHome.VendorTax = AccountPayableOutOfHomeOld.VendorTax * -1
            AccountPayableOutOfHome.StateTax = AccountPayableOutOfHomeOld.StateTax * -1
            AccountPayableOutOfHome.CountyTax = AccountPayableOutOfHomeOld.CountyTax * -1
            AccountPayableOutOfHome.CityTax = AccountPayableOutOfHomeOld.CityTax * -1
            AccountPayableOutOfHome.NetCharges = AccountPayableOutOfHomeOld.NetCharges * -1
            AccountPayableOutOfHome.DiscountAmount = Math.Abs(AccountPayableOutOfHomeOld.DiscountAmount.GetValueOrDefault(0))

            AccountPayableOutOfHome.LineTotal = AccountPayableOutOfHomeOld.LineTotal * -1
            AccountPayableOutOfHome.ModifyDelete = 1
            AccountPayableOutOfHome.ModifiedBy = _Session.UserCode
            AccountPayableOutOfHome.ModifyDate = Now
            AccountPayableOutOfHome.IsDeleted = Nothing
            AccountPayableOutOfHome.PostPeriodCode = PostPeriodCode
            AccountPayableOutOfHome.CreateDate = Now
            AccountPayableOutOfHome.CreatedBy = _Session.UserCode

            If AccountPayableOutOfHomeOld.GLSequenceNumberDueFrom IsNot Nothing AndAlso AccountPayableOutOfHomeOld.GLSequenceNumberDueFrom <> 0 Then

                If PostPeriodChanged Then

                    InterCompanyKey = "Reversal" & AccountPayableOutOfHomeOld.OfficeCode

                Else

                    InterCompanyKey = AccountPayableOutOfHomeOld.OfficeCode

                End If

                If OfficeCodeList.Contains(InterCompanyKey) = False Then

                    OfficeCodeList.Add(InterCompanyKey)

                    Amount = AccountPayableOutOfHomeDistributionDetailList.Where(Function(Entity) Entity.OfficeCode = AccountPayableOutOfHomeOld.OfficeCode AndAlso Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                    Try

                        OldAmount = AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID).
                                        Where(Function(Entity) Entity.OfficeCode = AccountPayableOutOfHomeOld.OfficeCode).ToList.Sum(Function(Entity) Entity.NetAmount.GetValueOrDefault(0) + Entity.DiscountAmount.GetValueOrDefault(0) + Entity.NetCharges.GetValueOrDefault(0) + Entity.VendorTax.GetValueOrDefault(0))

                    Catch ex As Exception
                        OldAmount = 0
                    End Try

                    If IsFullAPDelete OrElse PostPeriodChanged Then

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " - " & IIf(PostPeriodChanged, "POST PERIOD MODIFY", "DELETE") & " [IC]"
                        Amount = OldAmount * -1

                    Else

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " [IC]"
                        Amount = Amount - OldAmount

                    End If

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableOutOfHomeOld.GLACodeDueFrom,
                            Amount, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueFromSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableOutOfHome.GLACodeDueFrom = AccountPayableOutOfHomeOld.GLACodeDueFrom
                    AccountPayableOutOfHome.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableOutOfHomeOld.GLACodeDueTo,
                            Amount * -1, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueToSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableOutOfHome.GLACodeDueTo = AccountPayableOutOfHomeOld.GLACodeDueTo
                    AccountPayableOutOfHome.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                Else

                    AccountPayableOutOfHome.GLACodeDueFrom = AccountPayableOutOfHomeOld.GLACodeDueFrom
                    AccountPayableOutOfHome.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    AccountPayableOutOfHome.GLACodeDueTo = AccountPayableOutOfHomeOld.GLACodeDueTo
                    AccountPayableOutOfHome.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                End If

            End If

            If AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.InsertWithoutValidate(DbContext, AccountPayableOutOfHome) = False Then

                Throw New Exception("Problem inserting AP Outdoor.")

            End If

            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_OUTDOOR SET MODIFY_DELETE=1, MODIFIED_BY='{2}', MODIFY_DATE=getdate() WHERE AP_ID={0} AND AP_SEQ=0 AND LINE_NUMBER={1}", AccountPayable.ID, AccountPayableOutOfHomeOld.LineNumber, _Session.UserCode))

        End Sub
        Private Sub ReverseRadio(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail,
                                 ByVal AccountPayableRadioOld As AdvantageFramework.Database.Entities.AccountPayableRadio,
                                 ByVal GLTransaction As Integer, ByVal Remark As String, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable, ByRef Orders As Collection,
                                 ByVal AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail),
                                 ByRef OfficeCodeList As Generic.List(Of String), ByRef DueFromSeqNo As Collection, ByRef DueToSeqNo As Collection,
                                 ByVal VendorName As String, ByVal IsFullAPDelete As Boolean, ByVal PostPeriodCode As String, ByVal PostPeriodChanged As Boolean)

            Dim GeneralLedgerDetail As AdvantageFramework.Database.Entities.GeneralLedgerDetail = Nothing
            Dim AccountPayableRadio As AdvantageFramework.Database.Entities.AccountPayableRadio = Nothing
            Dim Amount As Decimal = Nothing
            Dim OldAmount As Decimal = Nothing
            Dim OrderKey As String = Nothing
            Dim InterCompanyKey As String = Nothing

            If PostPeriodChanged Then

                OrderKey = "Reversal" & AccountPayableRadioOld.OrderNumber

            Else

                OrderKey = AccountPayableRadioOld.OrderNumber

            End If

            If Orders.Contains(OrderKey) = False Then

                Amount = AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False AndAlso
                                                                                          Entity.OrderNumber = AccountPayableRadioOld.OrderNumber).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                Try

                    OldAmount = AdvantageFramework.Database.Procedures.AccountPayableRadio.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID) _
                                    .Where(Function(Entity) Entity.OrderNumber = AccountPayableRadioOld.OrderNumber).ToList _
                                    .Sum(Function(Entity) Entity.ExtendedNetAmount.GetValueOrDefault(0) + Entity.DiscountAmount.GetValueOrDefault(0) + Entity.NetCharges.GetValueOrDefault(0) + Entity.VendorTax.GetValueOrDefault(0))

                Catch ex As Exception
                    OldAmount = 0
                End Try

                If IsFullAPDelete OrElse PostPeriodChanged Then

                    Amount = OldAmount * -1

                Else

                    Amount = Amount - OldAmount

                End If

                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableRadioOld.GLACode,
                       Amount, Remark, _GLSourceCode, AccountPayableRadioDistributionDetail.ClientCode, AccountPayableRadioDistributionDetail.DivisionCode,
                       AccountPayableRadioDistributionDetail.ProductCode) = False Then

                    Throw New Exception("Problem inserting General Ledger Detail.")

                End If

                Orders.Add(GeneralLedgerDetail.SequenceNumber, OrderKey)

            End If

            'debit AP_RADIO
            AccountPayableRadio = New AdvantageFramework.Database.Entities.AccountPayableRadio
            AccountPayableRadio.DbContext = DbContext

            AccountPayableRadio = AccountPayableRadioOld.Copy()

            AccountPayableRadio.AccountPayableID = AccountPayable.ID
            AccountPayableRadio.AccountPayableSequenceNumber = 0
            AccountPayableRadio.GLTransaction = GLTransaction
            AccountPayableRadio.GLSequenceNumber = Orders.Item(OrderKey)
            AccountPayableRadio.ExtendedNetAmount = AccountPayableRadioOld.ExtendedNetAmount * -1

            AccountPayableRadio.CommissionAmount = AccountPayableRadioOld.CommissionAmount * -1
            AccountPayableRadio.RebateAmount = AccountPayableRadioOld.RebateAmount * -1
            AccountPayableRadio.VendorTax = AccountPayableRadioOld.VendorTax * -1
            AccountPayableRadio.StateTax = AccountPayableRadioOld.StateTax * -1
            AccountPayableRadio.CountyTax = AccountPayableRadioOld.CountyTax * -1
            AccountPayableRadio.CityTax = AccountPayableRadioOld.CityTax * -1
            AccountPayableRadio.NetCharges = AccountPayableRadioOld.NetCharges * -1
            AccountPayableRadio.DiscountAmount = Math.Abs(AccountPayableRadioOld.DiscountAmount.GetValueOrDefault(0))

            AccountPayableRadio.TotalSpots = AccountPayableRadioOld.TotalSpots * -1

            AccountPayableRadio.LineTotal = AccountPayableRadioOld.LineTotal * -1
            AccountPayableRadio.ModifyDelete = 1
            AccountPayableRadio.ModifiedBy = _Session.UserCode
            AccountPayableRadio.ModifyDate = Now
            AccountPayableRadio.IsDeleted = Nothing
            AccountPayableRadio.PostPeriodCode = PostPeriodCode
            AccountPayableRadio.CreateDate = Now
            AccountPayableRadio.CreatedBy = _Session.UserCode

            If AccountPayableRadioOld.GLSequenceNumberDueFrom IsNot Nothing AndAlso AccountPayableRadioOld.GLSequenceNumberDueFrom <> 0 Then

                If PostPeriodChanged Then

                    InterCompanyKey = "Reversal" & AccountPayableRadioOld.OfficeCode

                Else

                    InterCompanyKey = AccountPayableRadioOld.OfficeCode

                End If

                If OfficeCodeList.Contains(InterCompanyKey) = False Then

                    OfficeCodeList.Add(InterCompanyKey)

                    Amount = AccountPayableRadioDistributionDetailList.Where(Function(Entity) Entity.OfficeCode = AccountPayableRadioOld.OfficeCode AndAlso Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                    Try

                        OldAmount = AdvantageFramework.Database.Procedures.AccountPayableRadio.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID).
                                        Where(Function(Entity) Entity.OfficeCode = AccountPayableRadioOld.OfficeCode).ToList.Sum(Function(Entity) Entity.ExtendedNetAmount.GetValueOrDefault(0) + Entity.DiscountAmount.GetValueOrDefault(0) + Entity.NetCharges.GetValueOrDefault(0) + Entity.VendorTax.GetValueOrDefault(0))

                    Catch ex As Exception
                        OldAmount = 0
                    End Try

                    If IsFullAPDelete OrElse PostPeriodChanged Then

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " - " & IIf(PostPeriodChanged, "POST PERIOD MODIFY", "DELETE") & " [IC]"
                        Amount = OldAmount * -1

                    Else

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " [IC]"
                        Amount = Amount - OldAmount

                    End If

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableRadioOld.GLACodeDueFrom,
                            Amount, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueFromSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableRadio.GLACodeDueFrom = AccountPayableRadioOld.GLACodeDueFrom
                    AccountPayableRadio.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableRadioOld.GLACodeDueTo,
                            Amount * -1, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueToSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableRadio.GLACodeDueTo = AccountPayableRadioOld.GLACodeDueTo
                    AccountPayableRadio.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                Else

                    AccountPayableRadio.GLACodeDueFrom = AccountPayableRadioOld.GLACodeDueFrom
                    AccountPayableRadio.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    AccountPayableRadio.GLACodeDueTo = AccountPayableRadioOld.GLACodeDueTo
                    AccountPayableRadio.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                End If

            End If

            If AdvantageFramework.Database.Procedures.AccountPayableRadio.InsertWithoutValidate(DbContext, AccountPayableRadio) = False Then

                Throw New Exception("Problem inserting AP Radio.")

            End If

            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_RADIO SET MODIFY_DELETE=1, MODIFIED_BY='{2}', MODIFY_DATE=getdate() WHERE AP_ID={0} AND AP_SEQ=0 AND LINE_NUMBER={1}", AccountPayable.ID, AccountPayableRadioOld.LineNumber, _Session.UserCode))

        End Sub
        Private Sub ReverseTV(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail,
                              ByVal AccountPayableTVOld As AdvantageFramework.Database.Entities.AccountPayableTV,
                              ByVal GLTransaction As Integer, ByVal Remark As String, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable, ByRef Orders As Collection,
                              ByVal AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail),
                              ByRef OfficeCodeList As Generic.List(Of String), ByRef DueFromSeqNo As Collection, ByRef DueToSeqNo As Collection,
                              ByVal VendorName As String, ByVal IsFullAPDelete As Boolean, ByVal PostPeriodCode As String, ByVal PostPeriodChanged As Boolean)

            Dim GeneralLedgerDetail As AdvantageFramework.Database.Entities.GeneralLedgerDetail = Nothing
            Dim AccountPayableTV As AdvantageFramework.Database.Entities.AccountPayableTV = Nothing
            Dim Amount As Decimal = Nothing
            Dim OldAmount As Decimal = Nothing
            Dim OrderKey As String = Nothing
            Dim InterCompanyKey As String = Nothing

            If PostPeriodChanged Then

                OrderKey = "Reversal" & AccountPayableTVOld.OrderNumber

            Else

                OrderKey = AccountPayableTVOld.OrderNumber

            End If

            If Orders.Contains(OrderKey) = False Then

                Amount = AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.IsDeleted = False AndAlso
                                                                                       Entity.OrderNumber = AccountPayableTVOld.OrderNumber).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                Try

                    OldAmount = AdvantageFramework.Database.Procedures.AccountPayableTV.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID) _
                                    .Where(Function(Entity) Entity.OrderNumber = AccountPayableTVOld.OrderNumber).ToList _
                                    .Sum(Function(Entity) Entity.ExtendedNetAmount.GetValueOrDefault(0) + Entity.DiscountAmount.GetValueOrDefault(0) + Entity.NetCharges.GetValueOrDefault(0) + Entity.VendorTax.GetValueOrDefault(0))

                Catch ex As Exception
                    OldAmount = 0
                End Try

                If IsFullAPDelete OrElse PostPeriodChanged Then

                    Amount = OldAmount * -1

                Else

                    Amount = Amount - OldAmount

                End If

                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableTVOld.GLACode,
                       Amount, Remark, _GLSourceCode, AccountPayableTVDistributionDetail.ClientCode, AccountPayableTVDistributionDetail.DivisionCode,
                       AccountPayableTVDistributionDetail.ProductCode) = False Then

                    Throw New Exception("Problem inserting General Ledger Detail.")

                End If

                Orders.Add(GeneralLedgerDetail.SequenceNumber, OrderKey)

            End If

            'debit AP_TV
            AccountPayableTV = New AdvantageFramework.Database.Entities.AccountPayableTV
            AccountPayableTV.DbContext = DbContext

            AccountPayableTV = AccountPayableTVOld.Copy()

            AccountPayableTV.AccountPayableID = AccountPayable.ID
            AccountPayableTV.AccountPayableSequenceNumber = 0
            AccountPayableTV.GLTransaction = GLTransaction
            AccountPayableTV.GLSequenceNumber = Orders.Item(OrderKey)
            AccountPayableTV.ExtendedNetAmount = AccountPayableTVOld.ExtendedNetAmount * -1

            AccountPayableTV.CommissionAmount = AccountPayableTVOld.CommissionAmount * -1
            AccountPayableTV.RebateAmount = AccountPayableTVOld.RebateAmount * -1
            AccountPayableTV.VendorTax = AccountPayableTVOld.VendorTax * -1
            AccountPayableTV.StateTax = AccountPayableTVOld.StateTax * -1
            AccountPayableTV.CountyTax = AccountPayableTVOld.CountyTax * -1
            AccountPayableTV.CityTax = AccountPayableTVOld.CityTax * -1
            AccountPayableTV.NetCharges = AccountPayableTVOld.NetCharges * -1
            AccountPayableTV.DiscountAmount = Math.Abs(AccountPayableTVOld.DiscountAmount.GetValueOrDefault(0))

            AccountPayableTV.TotalSpots = AccountPayableTVOld.TotalSpots * -1

            AccountPayableTV.LineTotal = AccountPayableTVOld.LineTotal * -1
            AccountPayableTV.ModifyDelete = 1
            AccountPayableTV.ModifiedBy = _Session.UserCode
            AccountPayableTV.ModifyDate = Now
            AccountPayableTV.IsDeleted = Nothing
            AccountPayableTV.PostPeriodCode = PostPeriodCode
            AccountPayableTV.CreateDate = Now
            AccountPayableTV.CreatedBy = _Session.UserCode

            If AccountPayableTVOld.GLSequenceNumberDueFrom IsNot Nothing AndAlso AccountPayableTVOld.GLSequenceNumberDueFrom <> 0 Then

                If PostPeriodChanged Then

                    InterCompanyKey = "Reversal" & AccountPayableTVOld.OfficeCode

                Else

                    InterCompanyKey = AccountPayableTVOld.OfficeCode

                End If

                If OfficeCodeList.Contains(InterCompanyKey) = False Then

                    OfficeCodeList.Add(InterCompanyKey)

                    Amount = AccountPayableTVDistributionDetailList.Where(Function(Entity) Entity.OfficeCode = AccountPayableTVOld.OfficeCode AndAlso Entity.IsDeleted = False).Sum(Function(Entity) Entity.DisbursedAmount.GetValueOrDefault(0))

                    Try

                        OldAmount = AdvantageFramework.Database.Procedures.AccountPayableTV.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID).
                                        Where(Function(Entity) Entity.OfficeCode = AccountPayableTVOld.OfficeCode).ToList.Sum(Function(Entity) Entity.ExtendedNetAmount.GetValueOrDefault(0) + Entity.DiscountAmount.GetValueOrDefault(0) + Entity.NetCharges.GetValueOrDefault(0) + Entity.VendorTax.GetValueOrDefault(0))

                    Catch ex As Exception
                        OldAmount = 0
                    End Try

                    If IsFullAPDelete OrElse PostPeriodChanged Then

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " - " & IIf(PostPeriodChanged, "POST PERIOD MODIFY", "DELETE") & " [IC]"
                        Amount = OldAmount * -1

                    Else

                        Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " [IC]"
                        Amount = Amount - OldAmount

                    End If

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableTVOld.GLACodeDueFrom,
                            Amount, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueFromSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableTV.GLACodeDueFrom = AccountPayableTVOld.GLACodeDueFrom
                    AccountPayableTV.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableTVOld.GLACodeDueTo,
                            Amount * -1, Remark, _GLSourceCode) = False Then

                        Throw New Exception("Problem inserting General Ledger Detail.")

                    End If

                    DueToSeqNo.Add(GeneralLedgerDetail.SequenceNumber, InterCompanyKey)

                    AccountPayableTV.GLACodeDueTo = AccountPayableTVOld.GLACodeDueTo
                    AccountPayableTV.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                Else

                    AccountPayableTV.GLACodeDueFrom = AccountPayableTVOld.GLACodeDueFrom
                    AccountPayableTV.GLSequenceNumberDueFrom = DueFromSeqNo.Item(InterCompanyKey)

                    AccountPayableTV.GLACodeDueTo = AccountPayableTVOld.GLACodeDueTo
                    AccountPayableTV.GLSequenceNumberDueTo = DueToSeqNo.Item(InterCompanyKey)

                End If

            End If

            If AdvantageFramework.Database.Procedures.AccountPayableTV.InsertWithoutValidate(DbContext, AccountPayableTV) = False Then

                Throw New Exception("Problem inserting AP TV.")

            End If

            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_TV SET MODIFY_DELETE=1, MODIFIED_BY='{2}', MODIFY_DATE=getdate() WHERE AP_ID={0} AND AP_SEQ=0 AND LINE_NUMBER={1}", AccountPayable.ID, AccountPayableTVOld.LineNumber, _Session.UserCode))

        End Sub
        Private Sub SaveHeader(ByVal DbContext As AdvantageFramework.Database.DbContext, ByRef AccountPayableOld As AdvantageFramework.Database.Entities.AccountPayable,
                               AccountPayable As AdvantageFramework.Database.Entities.AccountPayable, DoNotApplyCurrencyRequirement As Boolean)

            AccountPayableOld.OfficeCode = AccountPayable.OfficeCode
            AccountPayableOld.InvoiceDescription = AccountPayable.InvoiceDescription
            AccountPayableOld.IsOnHold = AccountPayable.IsOnHold
            AccountPayableOld.Is1099Invoice = AccountPayable.Is1099Invoice
            AccountPayableOld.VendorTermCode = AccountPayable.VendorTermCode
            AccountPayableOld.InvoiceDate = AccountPayable.InvoiceDate
            AccountPayableOld.PaidDate = AccountPayable.PaidDate
            AccountPayableOld.SalesTaxAmount = AccountPayable.SalesTaxAmount
            AccountPayableOld.InvoiceAmount = AccountPayable.InvoiceAmount
            AccountPayableOld.DiscountPercentage = AccountPayable.DiscountPercentage
            AccountPayableOld.ModifiedDate = Now
            AccountPayableOld.ModifiedByUserCode = _Session.UserCode
            AccountPayableOld.VendorServiceTaxID = AccountPayable.VendorServiceTaxID
            AccountPayableOld.VendorServiceTaxEnabled = AccountPayable.VendorServiceTaxEnabled
            AccountPayableOld.VendorTaxableAmount = AccountPayable.VendorTaxableAmount

            If AdvantageFramework.Database.Procedures.AccountPayable.Update(DbContext, AccountPayableOld, DoNotApplyCurrencyRequirement) = False Then

                Throw New Exception("Problem updating AP Header.")

            End If

        End Sub
        Private Sub SaveInternet(ByVal DbContext As AdvantageFramework.Database.DbContext, ByRef GLTransaction As Integer, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable,
                                 ByVal VendorName As String, ByVal PostPeriodChanged As Boolean, ByVal GLReversalTransaction As Integer)

            Dim AccountPayableInternetDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) = Nothing
            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing
            Dim AccountPayableInternetOld As AdvantageFramework.Database.Entities.AccountPayableInternet = Nothing
            Dim Orders As Collection = Nothing
            Dim OfficeCodeList As Generic.List(Of String) = Nothing
            Dim DueFromSeqNo As Collection = Nothing
            Dim DueToSeqNo As Collection = Nothing
            Dim Remark As String = Nothing

            Orders = New Collection
            OfficeCodeList = New Generic.List(Of String)
            DueFromSeqNo = New Collection
            DueToSeqNo = New Collection

            If TabItemAPDetails_InternetTab.Tag = True Then

                AccountPayableInternetDistributionDetailList = DataGridViewInternet_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)().ToList

                For Each AccountPayableInternetDistributionDetail In AccountPayableInternetDistributionDetailList

                    If AccountPayableInternetDistributionDetail.AccountPayableInternet.IsEntityBeingAdded() Then

                        AdvantageFramework.AccountPayable.AddInternet(DbContext, AccountPayableInternetDistributionDetail, AccountPayableInternetDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, False, _BatchDate)

                    Else

                        Try

                            AccountPayableInternetOld = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableInternet.Load(DbContext)
                                                         Where Entity.AccountPayableID = AccountPayable.ID AndAlso
                                                               Entity.LineNumber = AccountPayableInternetDistributionDetail.AccountPayableInternet.LineNumber AndAlso
                                                               (Entity.ModifyDelete Is Nothing OrElse
                                                                Entity.ModifyDelete = 0)
                                                         Select Entity).SingleOrDefault

                        Catch ex As Exception
                            Throw New Exception("Error gathering AP_INTERNET row.")
                        End Try

                        If AccountPayableInternetDistributionDetail.IsDeleted OrElse PostPeriodChanged OrElse IsInternetRowDirty(AccountPayableInternetOld, AccountPayableInternetDistributionDetail) Then

                            If GLTransaction = -1 Then

                                GLTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayable, VendorName, False, False, _GLSourceCode, _BatchDate)

                            End If

                            Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableInternetOld.InternetOrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [IN]"

                            If Not PostPeriodChanged Then

                                ReverseInternet(DbContext, AccountPayableInternetDistributionDetail, AccountPayableInternetOld, GLTransaction, Remark, AccountPayable, Orders, AccountPayableInternetDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayable.PostPeriodCode, False)

                            Else

                                ReverseInternet(DbContext, AccountPayableInternetDistributionDetail, AccountPayableInternetOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableInternetDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableInternetOld.PostPeriodCode, PostPeriodChanged)

                            End If

                            If Not AccountPayableInternetDistributionDetail.IsDeleted Then

                                AdvantageFramework.AccountPayable.AddInternet(DbContext, AccountPayableInternetDistributionDetail, AccountPayableInternetDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, GLReversalTransaction <> -1)

                            End If

                        ElseIf AccountPayableInternetDistributionDetail.NewApprovalStatus IsNot Nothing Then

                            If AccountPayableInternetDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None Then

                                AccountPayableInternetDistributionDetail.NewApprovalStatus = Nothing

                            End If

                            If AdvantageFramework.AccountPayable.SaveMediaApproval(DbContext, AccountPayable.ID, AccountPayableInternetDistributionDetail.InternetOrderNumber,
                                                                                   AccountPayableInternetDistributionDetail.InternetDetailLineNumber, "I", AccountPayableInternetDistributionDetail.NewApprovalStatus,
                                                                                   _Session.UserCode, AccountPayableInternetDistributionDetail.NewApprovalComments) = False Then

                                Throw New Exception("Failed to insert AP Media Approval.")

                            End If

                        End If

                    End If

                Next

            ElseIf PostPeriodChanged Then

                AccountPayableInternetDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)

                AccountPayableInternetDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableInternet.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                      Select New AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail(DbContext, Entity, True))

                For Each AccountPayableInternetDistributionDetail In AccountPayableInternetDistributionDetailList

                    AccountPayableInternetOld = AccountPayableInternetDistributionDetail.AccountPayableInternet

                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayable.InvoiceDescription & ", Order: " & AccountPayableInternetOld.InternetOrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [IN]"

                    ReverseInternet(DbContext, AccountPayableInternetDistributionDetail, AccountPayableInternetOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableInternetDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableInternetOld.PostPeriodCode, True)

                    AdvantageFramework.AccountPayable.AddInternet(DbContext, AccountPayableInternetDistributionDetail, AccountPayableInternetDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, True)

                Next

            End If

        End Sub
        Private Sub SaveMagazine(ByVal DbContext As AdvantageFramework.Database.DbContext, ByRef GLTransaction As Integer, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable,
                                 ByVal VendorName As String, ByVal PostPeriodChanged As Boolean, ByVal GLReversalTransaction As Integer)

            Dim AccountPayableMagazineDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) = Nothing
            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing
            Dim AccountPayableMagazineOld As AdvantageFramework.Database.Entities.AccountPayableMagazine = Nothing
            Dim Orders As Collection = Nothing
            Dim OfficeCodeList As Generic.List(Of String) = Nothing
            Dim DueFromSeqNo As Collection = Nothing
            Dim DueToSeqNo As Collection = Nothing
            Dim Remark As String = Nothing

            Orders = New Collection
            OfficeCodeList = New Generic.List(Of String)
            DueFromSeqNo = New Collection
            DueToSeqNo = New Collection

            If TabItemAPDetails_MagazineTab.Tag = True Then

                AccountPayableMagazineDistributionDetailList = DataGridViewMagazine_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)().ToList

                For Each AccountPayableMagazineDistributionDetail In AccountPayableMagazineDistributionDetailList

                    If AccountPayableMagazineDistributionDetail.AccountPayableMagazine.IsEntityBeingAdded() Then

                        AdvantageFramework.AccountPayable.AddMagazine(DbContext, AccountPayableMagazineDistributionDetail, AccountPayableMagazineDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, False, _BatchDate)

                    Else

                        Try

                            AccountPayableMagazineOld = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableMagazine.Load(DbContext)
                                                         Where Entity.AccountPayableID = AccountPayable.ID AndAlso
                                                               Entity.LineNumber = AccountPayableMagazineDistributionDetail.AccountPayableMagazine.LineNumber AndAlso
                                                               (Entity.ModifyDelete Is Nothing OrElse
                                                                Entity.ModifyDelete = 0)
                                                         Select Entity).SingleOrDefault

                        Catch ex As Exception
                            Throw New Exception("Error gathering AP_MAGAZINE row.")
                        End Try

                        If AccountPayableMagazineDistributionDetail.IsDeleted OrElse PostPeriodChanged OrElse IsMagazineRowDirty(AccountPayableMagazineOld, AccountPayableMagazineDistributionDetail) Then

                            If GLTransaction = -1 Then

                                GLTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayable, VendorName, False, False, _GLSourceCode, _BatchDate)

                            End If

                            Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableMagazineOld.OrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [MA]"

                            If Not PostPeriodChanged Then

                                ReverseMagazine(DbContext, AccountPayableMagazineDistributionDetail, AccountPayableMagazineOld, GLTransaction, Remark, AccountPayable, Orders, AccountPayableMagazineDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayable.PostPeriodCode, False)

                            Else

                                ReverseMagazine(DbContext, AccountPayableMagazineDistributionDetail, AccountPayableMagazineOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableMagazineDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableMagazineOld.PostPeriodCode, PostPeriodChanged)

                            End If

                            If Not AccountPayableMagazineDistributionDetail.IsDeleted Then

                                AdvantageFramework.AccountPayable.AddMagazine(DbContext, AccountPayableMagazineDistributionDetail, AccountPayableMagazineDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, GLReversalTransaction <> -1)

                            End If

                        ElseIf AccountPayableMagazineDistributionDetail.NewApprovalStatus IsNot Nothing Then

                            If AccountPayableMagazineDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None Then

                                AccountPayableMagazineDistributionDetail.NewApprovalStatus = Nothing

                            End If

                            If AdvantageFramework.AccountPayable.SaveMediaApproval(DbContext, AccountPayable.ID, AccountPayableMagazineDistributionDetail.OrderNumber,
                                                                       AccountPayableMagazineDistributionDetail.OrderLineNumber, "M", AccountPayableMagazineDistributionDetail.NewApprovalStatus,
                                                                       _Session.UserCode, AccountPayableMagazineDistributionDetail.NewApprovalComments) = False Then

                                Throw New Exception("Failed to insert AP Media Approval.")

                            End If

                        End If

                    End If

                Next

            ElseIf PostPeriodChanged Then

                AccountPayableMagazineDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)

                AccountPayableMagazineDistributionDetailList.AddRange(From APM In AdvantageFramework.Database.Procedures.AccountPayableMagazine.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                      Select New AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail(DbContext, APM, True))

                For Each AccountPayableMagazineDistributionDetail In AccountPayableMagazineDistributionDetailList

                    AccountPayableMagazineOld = AccountPayableMagazineDistributionDetail.AccountPayableMagazine

                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayable.InvoiceDescription & ", Order: " & AccountPayableMagazineOld.OrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [MA]"

                    ReverseMagazine(DbContext, AccountPayableMagazineDistributionDetail, AccountPayableMagazineOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableMagazineDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableMagazineOld.PostPeriodCode, True)

                    AdvantageFramework.AccountPayable.AddMagazine(DbContext, AccountPayableMagazineDistributionDetail, AccountPayableMagazineDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, True)

                Next

            End If

        End Sub
        Private Sub SaveNewspaper(ByVal DbContext As AdvantageFramework.Database.DbContext, ByRef GLTransaction As Integer, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable,
                                  ByVal VendorName As String, ByVal PostPeriodChanged As Boolean, ByVal GLReversalTransaction As Integer)

            Dim AccountPayableNewspaperDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) = Nothing
            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing
            Dim AccountPayableNewspaperOld As AdvantageFramework.Database.Entities.AccountPayableNewspaper = Nothing
            Dim Orders As Collection = Nothing
            Dim OfficeCodeList As Generic.List(Of String) = Nothing
            Dim DueFromSeqNo As Collection = Nothing
            Dim DueToSeqNo As Collection = Nothing
            Dim Remark As String = Nothing

            Orders = New Collection
            OfficeCodeList = New Generic.List(Of String)
            DueFromSeqNo = New Collection
            DueToSeqNo = New Collection

            If TabItemAPDetails_NewspaperTab.Tag = True Then

                AccountPayableNewspaperDistributionDetailList = DataGridViewNewspaper_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)().ToList

                For Each AccountPayableNewspaperDistributionDetail In AccountPayableNewspaperDistributionDetailList

                    If AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.IsEntityBeingAdded() Then

                        AdvantageFramework.AccountPayable.AddNewspaper(DbContext, AccountPayableNewspaperDistributionDetail, AccountPayableNewspaperDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, False, _BatchDate)

                    Else

                        Try

                            AccountPayableNewspaperOld = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableNewspaper.Load(DbContext)
                                                          Where Entity.AccountPayableID = AccountPayable.ID AndAlso
                                                                Entity.LineNumber = AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.LineNumber AndAlso
                                                                (Entity.ModifyDelete Is Nothing OrElse
                                                                 Entity.ModifyDelete = 0)
                                                          Select Entity).SingleOrDefault

                        Catch ex As Exception
                            Throw New Exception("Error gathering AP_NEWSPAPER row.")
                        End Try

                        If AccountPayableNewspaperDistributionDetail.IsDeleted OrElse PostPeriodChanged OrElse IsNewspaperRowDirty(AccountPayableNewspaperOld, AccountPayableNewspaperDistributionDetail) Then

                            If GLTransaction = -1 Then

                                GLTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayable, VendorName, False, False, _GLSourceCode, _BatchDate)

                            End If

                            Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableNewspaperOld.OrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [NP]"

                            If Not PostPeriodChanged Then

                                ReverseNewspaper(DbContext, AccountPayableNewspaperDistributionDetail, AccountPayableNewspaperOld, GLTransaction, Remark, AccountPayable, Orders, AccountPayableNewspaperDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayable.PostPeriodCode, False)

                            Else

                                ReverseNewspaper(DbContext, AccountPayableNewspaperDistributionDetail, AccountPayableNewspaperOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableNewspaperDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableNewspaperOld.PostPeriodCode, PostPeriodChanged)

                            End If

                            If Not AccountPayableNewspaperDistributionDetail.IsDeleted Then

                                AdvantageFramework.AccountPayable.AddNewspaper(DbContext, AccountPayableNewspaperDistributionDetail, AccountPayableNewspaperDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, GLReversalTransaction <> -1)

                            End If

                        ElseIf AccountPayableNewspaperDistributionDetail.NewApprovalStatus IsNot Nothing Then

                            If AccountPayableNewspaperDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None Then

                                AccountPayableNewspaperDistributionDetail.NewApprovalStatus = Nothing

                            End If

                            If AdvantageFramework.AccountPayable.SaveMediaApproval(DbContext, AccountPayable.ID, AccountPayableNewspaperDistributionDetail.OrderNumber,
                                                                       AccountPayableNewspaperDistributionDetail.OrderLineNumber, "N", AccountPayableNewspaperDistributionDetail.NewApprovalStatus,
                                                                       _Session.UserCode, AccountPayableNewspaperDistributionDetail.NewApprovalComments) = False Then

                                Throw New Exception("Failed to insert AP Media Approval.")

                            End If

                        End If

                    End If

                Next

            ElseIf PostPeriodChanged Then

                AccountPayableNewspaperDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)

                AccountPayableNewspaperDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableNewspaper.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                       Select New AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail(DbContext, Entity, True))

                For Each AccountPayableNewspaperDistributionDetail In AccountPayableNewspaperDistributionDetailList

                    AccountPayableNewspaperOld = AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper

                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayable.InvoiceDescription & ", Order: " & AccountPayableNewspaperOld.OrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [NP]"

                    ReverseNewspaper(DbContext, AccountPayableNewspaperDistributionDetail, AccountPayableNewspaperOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableNewspaperDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableNewspaperOld.PostPeriodCode, True)

                    AdvantageFramework.AccountPayable.AddNewspaper(DbContext, AccountPayableNewspaperDistributionDetail, AccountPayableNewspaperDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, True)

                Next

            End If

        End Sub
        Private Sub SaveOutOfHome(ByVal DbContext As AdvantageFramework.Database.DbContext, ByRef GLTransaction As Integer, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable,
                                  ByVal VendorName As String, ByVal PostPeriodChanged As Boolean, ByVal GLReversalTransaction As Integer)

            Dim AccountPayableOutOfHomeDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing
            Dim AccountPayableOutOfHomeOld As AdvantageFramework.Database.Entities.AccountPayableOutOfHome = Nothing
            Dim Orders As Collection = Nothing
            Dim OfficeCodeList As Generic.List(Of String) = Nothing
            Dim DueFromSeqNo As Collection = Nothing
            Dim DueToSeqNo As Collection = Nothing
            Dim Remark As String = Nothing

            Orders = New Collection
            OfficeCodeList = New Generic.List(Of String)
            DueFromSeqNo = New Collection
            DueToSeqNo = New Collection

            If TabItemAPDetails_OutOfHomeTab.Tag = True Then

                AccountPayableOutOfHomeDistributionDetailList = DataGridViewOutOfHome_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)().ToList

                For Each AccountPayableOutOfHomeDistributionDetail In AccountPayableOutOfHomeDistributionDetailList

                    If AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.IsEntityBeingAdded() Then

                        AdvantageFramework.AccountPayable.AddOutOfHome(DbContext, AccountPayableOutOfHomeDistributionDetail, AccountPayableOutOfHomeDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, False, _BatchDate)

                    Else

                        Try

                            AccountPayableOutOfHomeOld = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.Load(DbContext)
                                                          Where Entity.AccountPayableID = AccountPayable.ID AndAlso
                                                                Entity.LineNumber = AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.LineNumber AndAlso
                                                                (Entity.ModifyDelete Is Nothing OrElse
                                                                 Entity.ModifyDelete = 0)
                                                          Select Entity).SingleOrDefault

                        Catch ex As Exception
                            Throw New Exception("Error gathering AP_OUTDOOR row.")
                        End Try

                        If AccountPayableOutOfHomeDistributionDetail.IsDeleted OrElse PostPeriodChanged OrElse IsOutOfHomeRowDirty(AccountPayableOutOfHomeOld, AccountPayableOutOfHomeDistributionDetail) Then

                            If GLTransaction = -1 Then

                                GLTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayable, VendorName, False, False, _GLSourceCode, _BatchDate)

                            End If

                            Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableOutOfHomeOld.OutdoorOrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [OD]"

                            If Not PostPeriodChanged Then

                                ReverseOutOfHome(DbContext, AccountPayableOutOfHomeDistributionDetail, AccountPayableOutOfHomeOld, GLTransaction, Remark, AccountPayable, Orders, AccountPayableOutOfHomeDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayable.PostPeriodCode, False)

                            Else

                                ReverseOutOfHome(DbContext, AccountPayableOutOfHomeDistributionDetail, AccountPayableOutOfHomeOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableOutOfHomeDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableOutOfHomeOld.PostPeriodCode, PostPeriodChanged)

                            End If

                            If Not AccountPayableOutOfHomeDistributionDetail.IsDeleted Then

                                AdvantageFramework.AccountPayable.AddOutOfHome(DbContext, AccountPayableOutOfHomeDistributionDetail, AccountPayableOutOfHomeDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, GLReversalTransaction <> -1)

                            End If

                        ElseIf AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus IsNot Nothing Then

                            If AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None Then

                                AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus = Nothing

                            End If

                            If AdvantageFramework.AccountPayable.SaveMediaApproval(DbContext, AccountPayable.ID, AccountPayableOutOfHomeDistributionDetail.OutdoorOrderNumber,
                                                                       AccountPayableOutOfHomeDistributionDetail.OutdoorDetailLineNumber, "O", AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus,
                                                                       _Session.UserCode, AccountPayableOutOfHomeDistributionDetail.NewApprovalComments) = False Then

                                Throw New Exception("Failed to insert AP Media Approval.")

                            End If

                        End If

                    End If

                Next

            ElseIf PostPeriodChanged Then

                AccountPayableOutOfHomeDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)

                AccountPayableOutOfHomeDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                       Select New AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail(DbContext, Entity, True))

                For Each AccountPayableOutOfHomeDistributionDetail In AccountPayableOutOfHomeDistributionDetailList

                    AccountPayableOutOfHomeOld = AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome

                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayable.InvoiceDescription & ", Order: " & AccountPayableOutOfHomeOld.OutdoorOrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [OD]"

                    ReverseOutOfHome(DbContext, AccountPayableOutOfHomeDistributionDetail, AccountPayableOutOfHomeOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableOutOfHomeDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableOutOfHomeOld.PostPeriodCode, True)

                    AdvantageFramework.AccountPayable.AddOutOfHome(DbContext, AccountPayableOutOfHomeDistributionDetail, AccountPayableOutOfHomeDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, True)

                Next

            End If

        End Sub
        Private Sub SaveProduction(ByVal DbContext As AdvantageFramework.Database.DbContext, ByRef GLTransaction As Integer, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable,
                                   ByVal VendorName As String, ByVal PostPeriodChanged As Boolean, ByVal GLReversalTransaction As Integer,
                                   ReversalPostPeriodCode As String)

            Dim AccountPayableProductionDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail) = Nothing
            Dim AccountPayableProductionComment As AdvantageFramework.Database.Entities.AccountPayableProductionComment = Nothing
            Dim AccountPayableProductionOld As AdvantageFramework.Database.Entities.AccountPayableProduction = Nothing
            Dim AccountPayableProductionNew As AdvantageFramework.Database.Entities.AccountPayableProduction = Nothing
            Dim JobComponent As Collection = Nothing
            Dim OfficeCodeList As Generic.List(Of String) = Nothing
            Dim DueFromSeqNo As Collection = Nothing
            Dim DueToSeqNo As Collection = Nothing
            Dim Remark As String = Nothing
            Dim AgencyInvoiceTaxFlag As Boolean = False

            JobComponent = New Collection
            OfficeCodeList = New Generic.List(Of String)
            DueFromSeqNo = New Collection
            DueToSeqNo = New Collection

            AgencyInvoiceTaxFlag = AdvantageFramework.Database.Procedures.Agency.InvoiceTaxFlag(DbContext)

            If TabItemAPDetails_ProductionTab.Tag = True Then

                AccountPayableProductionDistributionDetailList = DataGridViewProduction_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)().ToList

                AdvantageFramework.AccountPayable.SaveProduction(DbContext, GLTransaction, AccountPayable, VendorName, PostPeriodChanged, GLReversalTransaction, AccountPayableProductionDistributionDetailList, JobComponent, OfficeCodeList, DueFromSeqNo, DueToSeqNo, AgencyInvoiceTaxFlag, _GLSourceCode, _BatchDate, ReversalPostPeriodCode:=ReversalPostPeriodCode)

            ElseIf PostPeriodChanged Then

                AccountPayableProductionDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)

                AccountPayableProductionDistributionDetailList.AddRange(From APP In AdvantageFramework.Database.Procedures.AccountPayableProduction.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                        Select New AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail(DbContext, APP, _Session))

                For Each AccountPayableProductionDistributionDetail In AccountPayableProductionDistributionDetailList

                    AccountPayableProductionOld = AccountPayableProductionDistributionDetail.AccountPayableProduction

                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayable.InvoiceDescription & ", Job: " & AccountPayableProductionOld.JobNumber.ToString.PadLeft(6, "0") & "-" & AccountPayableProductionOld.JobComponentNumber.ToString.PadLeft(3, "0") & " - MODIFY [PR]"

                    AdvantageFramework.AccountPayable.ReverseProduction(DbContext, False, AccountPayableProductionOld, GLReversalTransaction, Remark, AccountPayable, JobComponent, AccountPayableProductionDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, False, If(ReversalPostPeriodCode Is Nothing, AccountPayableProductionOld.PostPeriodCode, ReversalPostPeriodCode), True, _GLSourceCode, False)

                    AccountPayableProductionNew = New AdvantageFramework.Database.Entities.AccountPayableProduction

                    AccountPayableProductionNew = AccountPayableProductionDistributionDetail.AccountPayableProduction.Copy()

                    AccountPayableProductionNew.PostPeriodCode = AccountPayable.PostPeriodCode
                    AccountPayableProductionNew.IsWriteOff = 0

                    AdvantageFramework.AccountPayable.AddProduction(DbContext, AccountPayableProductionDistributionDetail, AccountPayableProductionDistributionDetailList, AccountPayableProductionNew, GLTransaction, Remark, AccountPayable, JobComponent, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, PostPeriodChanged, AgencyInvoiceTaxFlag, _GLSourceCode, Nothing, False)

                    If AccountPayableProductionDistributionDetail.Comment IsNot Nothing AndAlso AccountPayableProductionDistributionDetail.Comment <> "" Then

                        AccountPayableProductionComment = New AdvantageFramework.Database.Entities.AccountPayableProductionComment
                        AccountPayableProductionComment.DbContext = DbContext
                        AccountPayableProductionComment.AccountPayableID = AccountPayable.ID
                        AccountPayableProductionComment.LineNumber = AccountPayableProductionNew.LineNumber
                        AccountPayableProductionComment.JobNumber = AccountPayableProductionDistributionDetail.JobNumber
                        AccountPayableProductionComment.JobComponentNumber = AccountPayableProductionDistributionDetail.JobComponentNumber
                        AccountPayableProductionComment.FunctionCode = AccountPayableProductionDistributionDetail.FunctionCode
                        AccountPayableProductionComment.Comment = AccountPayableProductionDistributionDetail.Comment

                        If AdvantageFramework.Database.Procedures.AccountPayableProductionComment.Insert(DbContext, AccountPayableProductionComment) = False Then

                            Throw New Exception("Failed to Insert AP Prod Comment.")

                        End If

                    End If

                Next

            End If

        End Sub
        Private Sub SaveRadio(ByVal DbContext As AdvantageFramework.Database.DbContext, ByRef GLTransaction As Integer, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable,
                              ByVal VendorName As String, ByVal PostPeriodChanged As Boolean, ByVal GLReversalTransaction As Integer)

            Dim AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing
            Dim AccountPayableRadioOld As AdvantageFramework.Database.Entities.AccountPayableRadio = Nothing
            Dim AccountPayableRadioBroadcastDetail As AdvantageFramework.Database.Entities.AccountPayableRadioBroadcastDetail = Nothing
            Dim Orders As Collection = Nothing
            Dim OfficeCodeList As Generic.List(Of String) = Nothing
            Dim DueFromSeqNo As Collection = Nothing
            Dim DueToSeqNo As Collection = Nothing
            Dim Remark As String = Nothing
            'Dim DeletedOrderLines As Generic.List(Of String) = Nothing

            Orders = New Collection
            OfficeCodeList = New Generic.List(Of String)
            DueFromSeqNo = New Collection
            DueToSeqNo = New Collection

            If TabItemAPDetails_RadioTab.Tag = True Then

                AccountPayableRadioDistributionDetailList = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)().ToList

                For Each AccountPayableRadioDistributionDetail In AccountPayableRadioDistributionDetailList

                    If AccountPayableRadioDistributionDetail.AccountPayableRadio.IsEntityBeingAdded() Then

                        AdvantageFramework.AccountPayable.AddRadio(DbContext, AccountPayableRadioDistributionDetail, AccountPayableRadioDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, False, _BatchDate)

                    Else

                        Try

                            AccountPayableRadioOld = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableRadio.Load(DbContext)
                                                      Where Entity.AccountPayableID = AccountPayable.ID AndAlso
                                                            Entity.LineNumber = AccountPayableRadioDistributionDetail.AccountPayableRadio.LineNumber AndAlso
                                                            (Entity.ModifyDelete Is Nothing OrElse
                                                             Entity.ModifyDelete = 0)
                                                      Select Entity).SingleOrDefault

                        Catch ex As Exception
                            Throw New Exception("Error gathering AP_RADIO row.")
                        End Try

                        If AccountPayableRadioDistributionDetail.IsDeleted OrElse PostPeriodChanged OrElse IsRadioRowDirty(AccountPayableRadioOld, AccountPayableRadioDistributionDetail) Then

                            If GLTransaction = -1 Then

                                GLTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayable, VendorName, False, False, _GLSourceCode, _BatchDate)

                            End If

                            Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableRadioOld.OrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [RA]"

                            If Not PostPeriodChanged Then

                                ReverseRadio(DbContext, AccountPayableRadioDistributionDetail, AccountPayableRadioOld, GLTransaction, Remark, AccountPayable, Orders, AccountPayableRadioDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayable.PostPeriodCode, False)

                            Else

                                ReverseRadio(DbContext, AccountPayableRadioDistributionDetail, AccountPayableRadioOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableRadioDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableRadioOld.PostPeriodCode, PostPeriodChanged)

                            End If

                            If Not AccountPayableRadioDistributionDetail.IsDeleted Then

                                AdvantageFramework.AccountPayable.AddRadio(DbContext, AccountPayableRadioDistributionDetail, AccountPayableRadioDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, GLReversalTransaction <> -1)

                            Else

                                'If DeletedOrderLines Is Nothing Then

                                '    DeletedOrderLines = New Generic.List(Of String)

                                'End If

                                'DeletedOrderLines.Add(AccountPayableRadioDistributionDetail.AccountPayableRadio.OrderNumber & "|" & AccountPayableRadioDistributionDetail.AccountPayableRadio.OrderLineNumber.GetValueOrDefault(0))

                                'DbContext.Database.ExecuteSqlCommand(String.Format("DELETE FROM dbo.AP_RADIO_BROADCAST_DTL WHERE AP_ID = {0} AND ORDER_NBR = {1} AND COALESCE(ORDER_LINE_NBR, 0) = {2}", AccountPayableRadioDistributionDetail.AccountPayableRadio.AccountPayableID, AccountPayableRadioDistributionDetail.AccountPayableRadio.OrderNumber, AccountPayableRadioDistributionDetail.AccountPayableRadio.OrderLineNumber.GetValueOrDefault(0)))

                            End If

                        ElseIf AccountPayableRadioDistributionDetail.NewApprovalStatus Then

                            If AccountPayableRadioDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None Then

                                AccountPayableRadioDistributionDetail.NewApprovalStatus = Nothing

                            End If

                            If AdvantageFramework.AccountPayable.SaveMediaApproval(DbContext, AccountPayable.ID, AccountPayableRadioDistributionDetail.OrderNumber,
                                                                       AccountPayableRadioDistributionDetail.OrderLineNumber, "R", AccountPayableRadioDistributionDetail.NewApprovalStatus,
                                                                       _Session.UserCode, AccountPayableRadioDistributionDetail.NewApprovalComments) = False Then

                                Throw New Exception("Failed to insert AP Media Approval.")

                            End If

                        End If

                    End If

                Next

            ElseIf PostPeriodChanged Then

                AccountPayableRadioDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

                AccountPayableRadioDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableRadio.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                   Select New AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail(DbContext, Entity, True))

                For Each AccountPayableRadioDistributionDetail In AccountPayableRadioDistributionDetailList

                    AccountPayableRadioOld = AccountPayableRadioDistributionDetail.AccountPayableRadio

                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayable.InvoiceDescription & ", Order: " & AccountPayableRadioOld.OrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [RA]"

                    ReverseRadio(DbContext, AccountPayableRadioDistributionDetail, AccountPayableRadioOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableRadioDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableRadioOld.PostPeriodCode, True)

                    AdvantageFramework.AccountPayable.AddRadio(DbContext, AccountPayableRadioDistributionDetail, AccountPayableRadioDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, True)

                Next

            End If

            If DataGridViewRadioDetails_BroadcastDetails.HasRows Then

                For Each BroadcastOrderDetailView In DataGridViewRadioDetails_BroadcastDetails.GetAllModifiedRows.OfType(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView).ToList

                    AccountPayableRadioBroadcastDetail = BroadcastOrderDetailView.GetAccountPayableRadioBroadcastDetail(DbContext)

                    If AccountPayableRadioBroadcastDetail IsNot Nothing Then

                        AccountPayableRadioBroadcastDetail.AccountPayableID = AccountPayable.ID
                        AccountPayableRadioBroadcastDetail.AccountPayableSequenceNumber = AccountPayable.SequenceNumber

                        If AccountPayableRadioBroadcastDetail.IsEntityBeingAdded() Then

                            AdvantageFramework.Database.Procedures.AccountPayableRadioBroadcastDetail.Insert(DbContext, AccountPayableRadioBroadcastDetail)

                        Else

                            AdvantageFramework.Database.Procedures.AccountPayableRadioBroadcastDetail.Update(DbContext, AccountPayableRadioBroadcastDetail)

                        End If

                    End If

                Next

                'If DeletedOrderLines IsNot Nothing Then

                '    For Each DeletedOrderLine In DeletedOrderLines

                '        DbContext.Database.ExecuteSqlCommand(String.Format("DELETE FROM dbo.AP_RADIO_BROADCAST_DTL WHERE AP_ID = {0} AND ORDER_NBR = {1} AND COALESCE(ORDER_LINE_NBR, 0) = {2}", AccountPayable.ID, DeletedOrderLine.Split("|").First, DeletedOrderLine.Split("|").Last))

                '    Next

                'End If

            End If

        End Sub
        Private Sub SaveTV(ByVal DbContext As AdvantageFramework.Database.DbContext, ByRef GLTransaction As Integer, ByVal AccountPayable As AdvantageFramework.Database.Entities.AccountPayable,
                           ByVal VendorName As String, ByVal PostPeriodChanged As Boolean, ByVal GLReversalTransaction As Integer)

            Dim AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing
            Dim AccountPayableTVOld As AdvantageFramework.Database.Entities.AccountPayableTV = Nothing
            Dim AccountPayableTVBroadcastDetail As AdvantageFramework.Database.Entities.AccountPayableTVBroadcastDetail = Nothing
            Dim Orders As Collection = Nothing
            Dim OfficeCodeList As Generic.List(Of String) = Nothing
            Dim DueFromSeqNo As Collection = Nothing
            Dim DueToSeqNo As Collection = Nothing
            Dim Remark As String = Nothing
            'Dim DeletedOrderLines As Generic.List(Of String) = Nothing

            Orders = New Collection
            OfficeCodeList = New Generic.List(Of String)
            DueFromSeqNo = New Collection
            DueToSeqNo = New Collection

            If TabItemAPDetails_TVTab.Tag = True Then

                AccountPayableTVDistributionDetailList = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)().ToList

                For Each AccountPayableTVDistributionDetail In AccountPayableTVDistributionDetailList

                    If AccountPayableTVDistributionDetail.AccountPayableTV.IsEntityBeingAdded() Then

                        AdvantageFramework.AccountPayable.AddTV(DbContext, AccountPayableTVDistributionDetail, AccountPayableTVDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, False, _BatchDate)

                    Else

                        Try

                            AccountPayableTVOld = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableTV.Load(DbContext)
                                                   Where Entity.AccountPayableID = AccountPayable.ID AndAlso
                                                         Entity.LineNumber = AccountPayableTVDistributionDetail.AccountPayableTV.LineNumber AndAlso
                                                         (Entity.ModifyDelete Is Nothing OrElse
                                                          Entity.ModifyDelete = 0)
                                                   Select Entity).SingleOrDefault

                        Catch ex As Exception
                            Throw New Exception("Error gathering AP_TV row.")
                        End Try

                        If AccountPayableTVDistributionDetail.IsDeleted OrElse PostPeriodChanged OrElse IsTVRowDirty(AccountPayableTVOld, AccountPayableTVDistributionDetail) Then

                            If GLTransaction = -1 Then

                                GLTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayable, VendorName, False, False, _GLSourceCode, _BatchDate)

                            End If

                            Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableTVOld.OrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [TV]"

                            If Not PostPeriodChanged Then

                                ReverseTV(DbContext, AccountPayableTVDistributionDetail, AccountPayableTVOld, GLTransaction, Remark, AccountPayable, Orders, AccountPayableTVDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayable.PostPeriodCode, False)

                            Else

                                ReverseTV(DbContext, AccountPayableTVDistributionDetail, AccountPayableTVOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableTVDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableTVOld.PostPeriodCode, PostPeriodChanged)

                            End If

                            If Not AccountPayableTVDistributionDetail.IsDeleted Then

                                AdvantageFramework.AccountPayable.AddTV(DbContext, AccountPayableTVDistributionDetail, AccountPayableTVDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, GLReversalTransaction <> -1)

                            Else

                                'If DeletedOrderLines Is Nothing Then

                                '    DeletedOrderLines = New Generic.List(Of String)

                                'End If

                                'DeletedOrderLines.Add(AccountPayableTVDistributionDetail.AccountPayableTV.OrderNumber & "|" & AccountPayableTVDistributionDetail.AccountPayableTV.OrderLineNumber.GetValueOrDefault(0))

                                'DbContext.Database.ExecuteSqlCommand(String.Format("DELETE FROM dbo.AP_TV_BROADCAST_DTL WHERE AP_ID = {0} AND ORDER_NBR = {1} AND COALESCE(ORDER_LINE_NBR, 0) = {2}", AccountPayableTVDistributionDetail.AccountPayableTV.AccountPayableID, AccountPayableTVDistributionDetail.AccountPayableTV.OrderNumber, AccountPayableTVDistributionDetail.AccountPayableTV.OrderLineNumber.GetValueOrDefault(0)))

                            End If

                        ElseIf AccountPayableTVDistributionDetail.NewApprovalStatus IsNot Nothing Then

                            If AccountPayableTVDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None Then

                                AccountPayableTVDistributionDetail.NewApprovalStatus = Nothing

                            End If

                            If AdvantageFramework.AccountPayable.SaveMediaApproval(DbContext, AccountPayable.ID, AccountPayableTVDistributionDetail.OrderNumber,
                                                                       AccountPayableTVDistributionDetail.OrderLineNumber, "T", AccountPayableTVDistributionDetail.NewApprovalStatus,
                                                                       _Session.UserCode, AccountPayableTVDistributionDetail.NewApprovalComments) = False Then

                                Throw New Exception("Failed to insert AP Media Approval.")

                            End If

                        End If

                    End If

                Next

            ElseIf PostPeriodChanged Then

                AccountPayableTVDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

                AccountPayableTVDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableTV.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                Select New AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail(DbContext, Entity, True))

                For Each AccountPayableTVDistributionDetail In AccountPayableTVDistributionDetailList

                    AccountPayableTVOld = AccountPayableTVDistributionDetail.AccountPayableTV

                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayable.InvoiceDescription & ", Order: " & AccountPayableTVOld.OrderNumber.ToString.PadLeft(6, "0") & " - MODIFY [TV]"

                    ReverseTV(DbContext, AccountPayableTVDistributionDetail, AccountPayableTVOld, GLReversalTransaction, Remark, AccountPayable, Orders, AccountPayableTVDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, False, AccountPayableTVOld.PostPeriodCode, True)

                    AdvantageFramework.AccountPayable.AddTV(DbContext, AccountPayableTVDistributionDetail, AccountPayableTVDistributionDetailList, GLTransaction, AccountPayable, Orders, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, _GLSourceCode, True)

                Next

            End If

            If DataGridViewTVDetails_BroadcastDetails.HasRows Then

                For Each BroadcastOrderDetailView In DataGridViewTVDetails_BroadcastDetails.GetAllModifiedRows.OfType(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView).ToList

                    AccountPayableTVBroadcastDetail = BroadcastOrderDetailView.GetAccountPayableTVBroadcastDetail(DbContext)

                    If AccountPayableTVBroadcastDetail IsNot Nothing Then

                        AccountPayableTVBroadcastDetail.AccountPayableID = AccountPayable.ID
                        AccountPayableTVBroadcastDetail.AccountPayableSequenceNumber = AccountPayable.SequenceNumber

                        If AccountPayableTVBroadcastDetail.IsEntityBeingAdded() Then

                            AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Insert(DbContext, AccountPayableTVBroadcastDetail)

                        Else

                            AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.Update(DbContext, AccountPayableTVBroadcastDetail)

                        End If

                    End If

                Next

                'If DeletedOrderLines IsNot Nothing Then

                '    For Each DeletedOrderLine In DeletedOrderLines

                '        DbContext.Database.ExecuteSqlCommand(String.Format("DELETE FROM dbo.AP_TV_BROADCAST_DTL WHERE AP_ID = {0} AND ORDER_NBR = {1} AND COALESCE(ORDER_LINE_NBR, 0) = {2}", AccountPayable.ID, DeletedOrderLine.Split("|").First, DeletedOrderLine.Split("|").Last))

                '    Next

                'End If

            End If

        End Sub
        Private Sub LoadExpenseReceiptsTab()

            LoadExpenseReportDocuments()

            TabItemAPDetails_ExpenseReceiptsTab.Tag = True

        End Sub
        Private Sub LoadExpenseReportDocuments()

            'objects
            Dim VendorCode As String = Nothing
            Dim InvoiceNumber As Integer = 0
            Dim ExpenseReport As AdvantageFramework.Database.Entities.ExpenseReport = Nothing
            Dim DocumentLevelSettings As Generic.List(Of AdvantageFramework.Database.Classes.DocumentLevelSetting) = Nothing

            If _ID <> 0 Then

                DocumentManagerControlExpenseReceipts_Receipts.ClearControl()

                VendorCode = SearchableComboBoxControl_Vendor.GetSelectedValue

                Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If IsNumeric(SearchableComboBoxControl_InvoiceNumber.GetSelectedValue) AndAlso
                            AdvantageFramework.StringUtilities.RemoveAllNonNumeric(SearchableComboBoxControl_InvoiceNumber.GetSelectedValue) = SearchableComboBoxControl_InvoiceNumber.GetSelectedValue Then

                        InvoiceNumber = SearchableComboBoxControl_InvoiceNumber.GetSelectedValue

                        ExpenseReport = (From Entity In AdvantageFramework.Database.Procedures.ExpenseReport.Load(DbContext)
                                         Where Entity.VendorCode = VendorCode AndAlso
                                               Entity.InvoiceNumber = InvoiceNumber
                                         Select Entity).FirstOrDefault

                        If ExpenseReport IsNot Nothing Then

                            Try

                                If _DocumentSubLevel = Database.Entities.DocumentSubLevel.ExpenseDetailDocument Then

                                    DocumentLevelSettings = (From APP In DataGridViewProduction_DistributionDetails.GetAllSelectedRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).ToList
                                                             Where APP.AccountPayableProduction.ExpenseReportDetailID IsNot Nothing
                                                             Select New AdvantageFramework.Database.Classes.DocumentLevelSetting(AdvantageFramework.Database.Entities.DocumentLevel.ExpenseReceipts, _DocumentSubLevel) With {.ExpenseReportInvoiceNumber = ExpenseReport.InvoiceNumber,
                                                                                                                                                                                                                              .ExpenseDetailID = APP.AccountPayableProduction.ExpenseReportDetailID.Value}).ToList

                                    If DocumentLevelSettings IsNot Nothing AndAlso DocumentLevelSettings.Count = 0 Then

                                        DocumentLevelSettings = (From APGL In DataGridViewNonClient_DistributionDetails.GetAllSelectedRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail).ToList
                                                                 Where APGL.AccountPayableGLDistribution.ExpenseReportDetailID IsNot Nothing
                                                                 Select New AdvantageFramework.Database.Classes.DocumentLevelSetting(AdvantageFramework.Database.Entities.DocumentLevel.ExpenseReceipts, _DocumentSubLevel) With {.ExpenseReportInvoiceNumber = ExpenseReport.InvoiceNumber,
                                                                                                                                                                                                                                  .ExpenseDetailID = APGL.AccountPayableGLDistribution.ExpenseReportDetailID.Value}).ToList

                                    End If

                                End If

                            Catch ex As Exception
                                DocumentLevelSettings = Nothing
                            End Try

                            If DocumentLevelSettings Is Nothing OrElse DocumentLevelSettings.Count = 0 Then

                                DocumentLevelSettings = New Generic.List(Of AdvantageFramework.Database.Classes.DocumentLevelSetting)

                                DocumentLevelSettings.Add(New AdvantageFramework.Database.Classes.DocumentLevelSetting(AdvantageFramework.Database.Entities.DocumentLevel.ExpenseReceipts) With {.ExpenseReportInvoiceNumber = ExpenseReport.InvoiceNumber})

                            End If

                            DocumentManagerControlExpenseReceipts_Receipts.Enabled = DocumentManagerControlExpenseReceipts_Receipts.LoadControl(Database.Entities.DocumentLevel.ExpenseReceipts, DocumentLevelSettings,
                                                                                                                                                AdvantageFramework.WinForm.Presentation.Controls.DocumentManagerControl.Type.Default, _DocumentSubLevel)

                        End If

                    End If

                End Using

            End If

        End Sub
        Private Sub EnableOrDisableActions()

            SearchableComboBoxControl_VendorTaxCode.Properties.ReadOnly = Not CheckBoxControl_VendorTaxEnabled.Checked
            SearchableComboBoxControl_VendorTaxCode.SetRequired(CheckBoxControl_VendorTaxEnabled.Checked)

            NumericInputControl_VendorTaxableAmount.ReadOnly = Not CheckBoxControl_VendorTaxEnabled.Checked
            NumericInputControl_VendorTaxableAmount.SetRequired(CheckBoxControl_VendorTaxEnabled.Checked)

        End Sub
        Private Sub RefreshCurrencyTooltip(DbContext As AdvantageFramework.Database.DbContext, UpdateRate As Boolean)

            Dim CurrencyDetail As AdvantageFramework.Database.Entities.CurrencyDetail = Nothing

            CurrencyDetail = AdvantageFramework.Database.Procedures.CurrencyDetail.LoadLatestByCurrencyCodeAndCurrencyCodeComparison(DbContext, SearchableComboBoxControl_CurrencyCode.GetSelectedValue, _CurrencyCodeHome)

            If CurrencyDetail IsNot Nothing Then

                If UpdateRate Then

                    NumericInputControl_VendorCurrencyRate.EditValue = CurrencyDetail.ExchangeRate

                End If

                NumericInputControl_VendorCurrencyRate.ToolTip = FormatNumber(CurrencyDetail.ExchangeRate, 6).ToString & " @ " & CurrencyDetail.ExchangeDate

            End If

        End Sub
        Private Sub RecalculateProduction(DbContext As AdvantageFramework.Database.DbContext)

            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing
            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing
            Dim POMessage As String = Nothing

            RowHandlesAndDataBoundItems = DataGridViewProduction_DistributionDetails.GetAllEnabledRowsRowHandlesAndDataBoundItems

            For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                Try

                    AccountPayableProductionDistributionDetail = RowHandlesAndDataBoundItem.Value

                Catch ex As Exception
                    AccountPayableProductionDistributionDetail = Nothing
                End Try

                If AccountPayableProductionDistributionDetail IsNot Nothing Then

                    AccountPayableProductionDistributionDetail.CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

                    AccountPayableProductionDistributionDetail.ExtendedAmount = FormatNumber(AccountPayableProductionDistributionDetail.ForeignExtendedAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.CalculateQuantityRateAndAmount(BillingSystem.QtyRateAmount.Amount, AccountPayableProductionDistributionDetail, DbContext)

                    AccountPayableProductionDistributionDetail.ForeignExtendedAmount = FormatNumber(AccountPayableProductionDistributionDetail.ExtendedAmount / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                    DataGridViewProduction_DistributionDetails.AddToModifiedRows(RowHandlesAndDataBoundItem.Key)

                    POMessage = AccountPayableProductionDistributionDetail.CalculatePOBalance(AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedAmount.ToString, _ID)

                    If POMessage IsNot Nothing Then

                        AdvantageFramework.WinForm.MessageBox.Show(POMessage)

                    End If

                End If

            Next

            DataGridViewProduction_DistributionDetails.CurrentView.RefreshData()

        End Sub
        Private Sub RecalculateNonClient(DbContext As AdvantageFramework.Database.DbContext)

            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing
            Dim AccountPayableGLDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail = Nothing
            Dim POMessage As String = Nothing

            RowHandlesAndDataBoundItems = DataGridViewNonClient_DistributionDetails.GetAllEnabledRowsRowHandlesAndDataBoundItems

            For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                Try

                    AccountPayableGLDistributionDetail = RowHandlesAndDataBoundItem.Value

                Catch ex As Exception
                    AccountPayableGLDistributionDetail = Nothing
                End Try

                If AccountPayableGLDistributionDetail IsNot Nothing Then

                    AccountPayableGLDistributionDetail.Amount = FormatNumber(AccountPayableGLDistributionDetail.ForeignAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    DataGridViewNonClient_DistributionDetails.AddToModifiedRows(RowHandlesAndDataBoundItem.Key)

                    POMessage = AccountPayableGLDistributionDetail.CalculatePOBalance(DbContext)

                    If POMessage IsNot Nothing Then

                        AdvantageFramework.WinForm.MessageBox.Show(POMessage)

                    End If

                End If

            Next

            DataGridViewNonClient_DistributionDetails.CurrentView.RefreshData()

        End Sub
        Private Sub RecalculateInternet(DbContext As AdvantageFramework.Database.DbContext)

            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing
            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing

            RowHandlesAndDataBoundItems = DataGridViewInternet_DistributionDetails.GetAllEnabledRowsRowHandlesAndDataBoundItems

            For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                Try

                    AccountPayableInternetDistributionDetail = RowHandlesAndDataBoundItem.Value

                Catch ex As Exception
                    AccountPayableInternetDistributionDetail = Nothing
                End Try

                If AccountPayableInternetDistributionDetail IsNot Nothing Then

                    AccountPayableInternetDistributionDetail.CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

                    AccountPayableInternetDistributionDetail.NetAmount = FormatNumber(AccountPayableInternetDistributionDetail.ForeignNetAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableInternetDistributionDetail.Impressions, AccountPayableInternetDistributionDetail.Rate, AccountPayableInternetDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, UseCPM:=(AccountPayableInternetDistributionDetail.CostType = "CPM"))

                    AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.DiscountAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.MarkupPercent, AccountPayableInternetDistributionDetail.GrossAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                    AccountPayableInternetDistributionDetail.ReCalculate(True)

                    DataGridViewInternet_DistributionDetails.AddToModifiedRows(RowHandlesAndDataBoundItem.Key)

                End If

            Next

            DataGridViewInternet_DistributionDetails.CurrentView.RefreshData()

        End Sub
        Private Sub RecalculateMagazine(DbContext As AdvantageFramework.Database.DbContext)

            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing
            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing

            RowHandlesAndDataBoundItems = DataGridViewMagazine_DistributionDetails.GetAllEnabledRowsRowHandlesAndDataBoundItems

            For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                Try

                    AccountPayableMagazineDistributionDetail = RowHandlesAndDataBoundItem.Value

                Catch ex As Exception
                    AccountPayableMagazineDistributionDetail = Nothing
                End Try

                If AccountPayableMagazineDistributionDetail IsNot Nothing Then

                    AccountPayableMagazineDistributionDetail.CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

                    AccountPayableMagazineDistributionDetail.NetAmount = FormatNumber(AccountPayableMagazineDistributionDetail.ForeignNetAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    AccountPayableMagazineDistributionDetail.GrossAmount = AdvantageFramework.AccountPayable.NetToGross(AccountPayableMagazineDistributionDetail.NetAmount.GetValueOrDefault(0), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    AccountPayableMagazineDistributionDetail.ReCalculate(True)

                    DataGridViewMagazine_DistributionDetails.AddToModifiedRows(RowHandlesAndDataBoundItem.Key)

                End If

            Next

            DataGridViewMagazine_DistributionDetails.CurrentView.RefreshData()

        End Sub
        Private Sub RecalculateNewspaper(DbContext As AdvantageFramework.Database.DbContext)

            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing
            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing

            RowHandlesAndDataBoundItems = DataGridViewNewspaper_DistributionDetails.GetAllEnabledRowsRowHandlesAndDataBoundItems

            For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                Try

                    AccountPayableNewspaperDistributionDetail = RowHandlesAndDataBoundItem.Value

                Catch ex As Exception
                    AccountPayableNewspaperDistributionDetail = Nothing
                End Try

                If AccountPayableNewspaperDistributionDetail IsNot Nothing Then

                    AccountPayableNewspaperDistributionDetail.CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

                    AccountPayableNewspaperDistributionDetail.NetAmount = FormatNumber(AccountPayableNewspaperDistributionDetail.ForeignNetAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.PrintLines, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.Rate, AccountPayableNewspaperDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, 2, UseCPM:=AccountPayableNewspaperDistributionDetail.UseCPM)

                    AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.DiscountLN, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.MarkupPercent, AccountPayableNewspaperDistributionDetail.GrossAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                    AccountPayableNewspaperDistributionDetail.ReCalculate(True)

                    DataGridViewNewspaper_DistributionDetails.AddToModifiedRows(RowHandlesAndDataBoundItem.Key)

                End If

            Next

            DataGridViewNewspaper_DistributionDetails.CurrentView.RefreshData()

        End Sub
        Private Sub RecalculateOutOfHome(DbContext As AdvantageFramework.Database.DbContext)

            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing

            RowHandlesAndDataBoundItems = DataGridViewOutOfHome_DistributionDetails.GetAllEnabledRowsRowHandlesAndDataBoundItems

            For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                Try

                    AccountPayableOutOfHomeDistributionDetail = RowHandlesAndDataBoundItem.Value

                Catch ex As Exception
                    AccountPayableOutOfHomeDistributionDetail = Nothing
                End Try

                If AccountPayableOutOfHomeDistributionDetail IsNot Nothing Then

                    AccountPayableOutOfHomeDistributionDetail.CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

                    AccountPayableOutOfHomeDistributionDetail.NetAmount = FormatNumber(AccountPayableOutOfHomeDistributionDetail.ForeignNetAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableOutOfHomeDistributionDetail.NetAmount, AccountPayableOutOfHomeDistributionDetail.DiscountAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.MarkupPercent, AccountPayableOutOfHomeDistributionDetail.GrossAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CommissionAmount)

                    AccountPayableOutOfHomeDistributionDetail.ReCalculate(True)

                    DataGridViewOutOfHome_DistributionDetails.AddToModifiedRows(RowHandlesAndDataBoundItem.Key)

                End If

            Next

            DataGridViewOutOfHome_DistributionDetails.CurrentView.RefreshData()

        End Sub
        Private Sub RecalculateRadio(DbContext As AdvantageFramework.Database.DbContext)

            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing

            RowHandlesAndDataBoundItems = DataGridViewRadio_DistributionDetails.GetAllEnabledRowsRowHandlesAndDataBoundItems

            For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                Try

                    AccountPayableRadioDistributionDetail = RowHandlesAndDataBoundItem.Value

                Catch ex As Exception
                    AccountPayableRadioDistributionDetail = Nothing
                End Try

                If AccountPayableRadioDistributionDetail IsNot Nothing Then

                    AccountPayableRadioDistributionDetail.CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

                    AccountPayableRadioDistributionDetail.ExtendedNetAmount = FormatNumber(AccountPayableRadioDistributionDetail.ForeignExtendedNetAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableRadioDistributionDetail.ExtendedNetAmount, AccountPayableRadioDistributionDetail.DiscountAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.MarkupPercent, AccountPayableRadioDistributionDetail.GrossAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.CommissionAmount)

                    AccountPayableRadioDistributionDetail.ReCalculate(True)

                    DataGridViewRadio_DistributionDetails.AddToModifiedRows(RowHandlesAndDataBoundItem.Key)

                End If

            Next

            DataGridViewRadio_DistributionDetails.CurrentView.RefreshData()

        End Sub
        Private Sub RecalculateTV(DbContext As AdvantageFramework.Database.DbContext)

            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing

            RowHandlesAndDataBoundItems = DataGridViewTV_DistributionDetails.GetAllEnabledRowsRowHandlesAndDataBoundItems

            For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                Try

                    AccountPayableTVDistributionDetail = RowHandlesAndDataBoundItem.Value

                Catch ex As Exception
                    AccountPayableTVDistributionDetail = Nothing
                End Try

                If AccountPayableTVDistributionDetail IsNot Nothing Then

                    AccountPayableTVDistributionDetail.CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

                    AccountPayableTVDistributionDetail.ExtendedNetAmount = FormatNumber(AccountPayableTVDistributionDetail.ForeignExtendedNetAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableTVDistributionDetail.ExtendedNetAmount, AccountPayableTVDistributionDetail.DiscountAmount, AccountPayableTVDistributionDetail.AccountPayableTV.MarkupPercent, AccountPayableTVDistributionDetail.GrossAmount, AccountPayableTVDistributionDetail.AccountPayableTV.CommissionAmount)

                    AccountPayableTVDistributionDetail.ReCalculate(True)

                    DataGridViewTV_DistributionDetails.AddToModifiedRows(RowHandlesAndDataBoundItem.Key)

                End If

            Next

            DataGridViewTV_DistributionDetails.CurrentView.RefreshData()

        End Sub
        Private Sub RecalculateCurrencyDetail()

            Dim TabItem As DevComponents.DotNetBar.TabItem = Nothing

            For Each TabItem In TabControlControl_APDetails.Tabs

                If TabItem.Visible AndAlso TabItem.Tag = False AndAlso TabItem.Name <> Me.TabItemAPDetails_DocumentsTab.Name Then

                    LoadAPDetails(TabItem)

                End If

            Next

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                RecalculateProduction(DbContext)

                RecalculateNonClient(DbContext)

                RecalculateInternet(DbContext)

                RecalculateMagazine(DbContext)

                RecalculateNewspaper(DbContext)

                RecalculateOutOfHome(DbContext)

                RecalculateRadio(DbContext)

                RecalculateTV(DbContext)

            End Using

            CalculateTotalAmount()

        End Sub
        Private Sub LoadRadioBroadcastDetails()

            'objects
            Dim BroadcastOrderDetailViews As Generic.List(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView) = Nothing

            BroadcastOrderDetailViews = New List(Of Database.Views.BroadcastOrderDetailView)

            If _ID > 0 Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    BroadcastOrderDetailViews.AddRange(AdvantageFramework.Database.Procedures.BroadcastOrderDetailView.LoadRadioByAccountPayableID(DbContext, _ID).ToList)

                End Using

            End If

            DataGridViewRadioDetails_BroadcastDetails.DataSource = BroadcastOrderDetailViews

            If DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderLineNumber.ToString) IsNot Nothing Then

                DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderLineNumber.ToString).Visible = False

            End If

            If DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Approved.ToString) IsNot Nothing Then

                DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Approved.ToString).OptionsColumn.AllowEdit = False

            End If

            If DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Comment.ToString) IsNot Nothing AndAlso
               DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Comment.ToString).RealColumnEdit IsNot Nothing Then

                DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Comment.ToString).RealColumnEdit.ReadOnly = True

            End If

            If DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString) IsNot Nothing Then

                DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString).Visible = False
                'DirectCast(DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString).RealColumnEdit, DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit).View.Columns("Code").Visible = True
                'DirectCast(DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString).RealColumnEdit, DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit).ValueMember = "Code"
                'DirectCast(DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString).RealColumnEdit, DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit).DisplayMember = "Code"

            End If

            If DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString) IsNot Nothing Then

                DataGridViewRadioDetails_BroadcastDetails.OptionsView.ShowFooter = True
                DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString).SummaryItem.SummaryType = DevExpress.Data.SummaryItemType.Sum
                DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString).SummaryItem.DisplayFormat = "{0:c2}"

            End If

            SetRadioBroadcastDetailsColumnHeaders()

            DataGridViewRadioDetails_BroadcastDetails.CurrentView.BestFitColumns()

        End Sub
        Private Sub LoadTVBroadcastDetails()

            'objects
            Dim BroadcastOrderDetailViews As Generic.List(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView) = Nothing

            BroadcastOrderDetailViews = New List(Of Database.Views.BroadcastOrderDetailView)

            If _ID > 0 Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    BroadcastOrderDetailViews.AddRange(AdvantageFramework.Database.Procedures.BroadcastOrderDetailView.LoadTVByAccountPayableID(DbContext, _ID).ToList)

                End Using

            End If

            DataGridViewTVDetails_BroadcastDetails.DataSource = BroadcastOrderDetailViews

            If DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderLineNumber.ToString) IsNot Nothing Then

                DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderLineNumber.ToString).Visible = False

            End If

            If DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Approved.ToString) IsNot Nothing Then

                DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Approved.ToString).OptionsColumn.AllowEdit = False

            End If

            If DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Comment.ToString) IsNot Nothing AndAlso
               DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Comment.ToString).RealColumnEdit IsNot Nothing Then

                DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Comment.ToString).RealColumnEdit.ReadOnly = True

            End If

            If DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString) IsNot Nothing Then

                DirectCast(DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString).RealColumnEdit, DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit).View.Columns("Code").Visible = True
                DirectCast(DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString).RealColumnEdit, DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit).ValueMember = "Code"
                DirectCast(DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString).RealColumnEdit, DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit).DisplayMember = "Code"

            End If

            If DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString) IsNot Nothing Then

                DataGridViewTVDetails_BroadcastDetails.OptionsView.ShowFooter = True
                DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString).SummaryItem.SummaryType = DevExpress.Data.SummaryItemType.Sum
                DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString).SummaryItem.DisplayFormat = "{0:c2}"

            End If

            SetTVBroadcastDetailsColumnHeaders()

            DataGridViewTVDetails_BroadcastDetails.CurrentView.BestFitColumns()

        End Sub
        Private Sub SetupRadioBroadcastDetailsTab()

            'objects
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing
            Dim NewItemRowPosition As DevExpress.XtraGrid.Views.Grid.NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.None

            If Me.IsDeleted = False Then

                If DataGridViewRadio_DistributionDetails.CurrentView.SelectedRowsCount = 1 Then

                    AccountPayableRadioDistributionDetail = DirectCast(DataGridViewRadio_DistributionDetails.GetFirstSelectedRowDataBoundItem, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

                    If AccountPayableRadioDistributionDetail.IsDeleted = False AndAlso AccountPayableRadioDistributionDetail.OrderLineNumber.GetValueOrDefault(0) > 0 Then

                        NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.Top

                    End If

                End If

            Else

                DataGridViewRadioDetails_BroadcastDetails.CurrentView.OptionsBehavior.Editable = False

            End If

            DataGridViewRadioDetails_BroadcastDetails.NewItemRowPosition = NewItemRowPosition

        End Sub
        Private Sub SetupTVBroadcastDetailsTab()

            'objects
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing
            Dim NewItemRowPosition As DevExpress.XtraGrid.Views.Grid.NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.None

            If Me.IsDeleted = False Then

                If DataGridViewTV_DistributionDetails.CurrentView.SelectedRowsCount = 1 Then

                    AccountPayableTVDistributionDetail = DirectCast(DataGridViewTV_DistributionDetails.GetFirstSelectedRowDataBoundItem, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

                    If AccountPayableTVDistributionDetail.IsDeleted = False AndAlso AccountPayableTVDistributionDetail.OrderLineNumber.GetValueOrDefault(0) > 0 Then

                        NewItemRowPosition = DevExpress.XtraGrid.Views.Grid.NewItemRowPosition.Top

                    End If

                End If

            Else

                DataGridViewTVDetails_BroadcastDetails.CurrentView.OptionsBehavior.Editable = False

            End If

            DataGridViewTVDetails_BroadcastDetails.NewItemRowPosition = NewItemRowPosition

        End Sub
        Private Function ValidateRadioBroadcastDetails()

            'objects
            Dim BroadcastOrderDetailViews As Generic.List(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView) = Nothing
            Dim OrderLines As String() = Nothing
            Dim IsValid As Boolean = True
            Dim AllValid As Boolean = True

            BroadcastOrderDetailViews = DataGridViewRadioDetails_BroadcastDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView).ToList
            OrderLines = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail).Where(Function(dtl) dtl.OrderNumber.HasValue AndAlso
                                                                                                                                                                                                       dtl.OrderLineNumber.HasValue AndAlso
                                                                                                                                                                                                       dtl.IsDeleted = False).Select(Function(dtl) dtl.OrderNumber.Value.ToString & "|" & dtl.OrderLineNumber.Value.ToString).ToArray

            For Each BroadcastOrderDetailView In BroadcastOrderDetailViews

                BroadcastOrderDetailView.ValidateOrderLine(OrderLines, IsValid)

                If Not IsValid Then

                    AllValid = False

                End If

            Next

            DataGridViewRadioDetails_BroadcastDetails.CurrentView.RefreshData()

            ValidateRadioBroadcastDetails = AllValid

        End Function
        Private Function ValidateTVBroadcastDetails()

            'objects
            Dim BroadcastOrderDetailViews As Generic.List(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView) = Nothing
            Dim OrderLines As String() = Nothing
            Dim IsValid As Boolean = True
            Dim AllValid As Boolean = True

            BroadcastOrderDetailViews = DataGridViewTVDetails_BroadcastDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView).ToList
            OrderLines = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail).Where(Function(dtl) dtl.OrderNumber.HasValue AndAlso
                                                                                                                                                                                                 dtl.OrderLineNumber.HasValue AndAlso
                                                                                                                                                                                                 dtl.IsDeleted = False).Select(Function(dtl) dtl.OrderNumber.Value.ToString & "|" & dtl.OrderLineNumber.Value.ToString).ToArray

            For Each BroadcastOrderDetailView In BroadcastOrderDetailViews

                BroadcastOrderDetailView.ValidateOrderLine(OrderLines, IsValid)

                If Not IsValid Then

                    AllValid = False

                End If

            Next

            DataGridViewTVDetails_BroadcastDetails.CurrentView.RefreshData()

            ValidateTVBroadcastDetails = AllValid

        End Function
        Private Sub SetTVBroadcastDetailsColumnHeaders()

            If DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString) IsNot Nothing Then

                DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString).Caption = GetHomeCurrencyCaption("Rate")

            End If

            If DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.ForeignGrossRate.ToString) IsNot Nothing Then

                If _IsMultiCurrencyEnabled Then

                    DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.ForeignGrossRate.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Rate"

                Else

                    DataGridViewTVDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.ForeignGrossRate.ToString).Visible = False

                End If

            End If

        End Sub
        Private Sub SetRadioBroadcastDetailsColumnHeaders()

            If DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString) IsNot Nothing Then

                DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString).Caption = GetHomeCurrencyCaption("Rate")

            End If

            If DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.ForeignGrossRate.ToString) IsNot Nothing Then

                If _IsMultiCurrencyEnabled Then

                    DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.ForeignGrossRate.ToString).Caption = SearchableComboBoxControl_CurrencyCode.GetSelectedValue & " Rate"

                Else

                    DataGridViewRadioDetails_BroadcastDetails.Columns(AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.ForeignGrossRate.ToString).Visible = False

                End If

            End If

        End Sub

#Region "  Public "

        Public Sub CancelAddNewNonClient()

            DataGridViewNonClient_DistributionDetails.CancelNewItemRow()

        End Sub
        Public Sub CancelAddNewProduction()

            DataGridViewProduction_DistributionDetails.CancelNewItemRow()

        End Sub
        Public Sub CancelAddNewNewspaper()

            DataGridViewNewspaper_DistributionDetails.CancelNewItemRow()

        End Sub
        Public Sub CancelAddNewMagazine()

            DataGridViewMagazine_DistributionDetails.CancelNewItemRow()

        End Sub
        Public Sub CancelAddNewRadio()

            DataGridViewRadio_DistributionDetails.CancelNewItemRow()

        End Sub
        Public Sub CancelAddNewTV()

            DataGridViewTV_DistributionDetails.CancelNewItemRow()

        End Sub
        Public Sub CancelAddNewOutOfHome()

            DataGridViewOutOfHome_DistributionDetails.CancelNewItemRow()

        End Sub
        Public Sub CancelAddNewInternet()

            DataGridViewInternet_DistributionDetails.CancelNewItemRow()

        End Sub
        Public Sub ClearControl(Optional ByVal ClearVendor As Boolean = True)

            Me.SuspendLayout()

            _IsClearing = True

            _ID = 0
            _SequenceNumber = 0

            'header
            If ClearVendor Then

                SearchableComboBoxControl_Vendor.SelectedValue = Nothing
                CheckBoxControl_1099Invoice.Checked = False

                SearchableComboBoxControl_InvoiceNumber.SelectedValue = Nothing
                SearchableComboBoxControl_InvoiceNumber.DataSource = Nothing

            End If

            SearchableComboBoxControl_InvoiceNumber.SelectedValue = Nothing

            SearchableComboBoxControl_CurrencyCode.SelectedValue = Nothing
            TextBoxControl_InvoiceNumber.Text = Nothing

            CheckBoxControl_1099Invoice.Checked = False
            CheckBoxControl_OnHold.Checked = False
            TextBoxControl_Description.Text = Nothing

            TextBoxDropDownControl_Note.Text = Nothing

            ComboBoxControl_Office.SelectedValue = Nothing
            ComboBoxControl_Terms.SelectedValue = Nothing
            ComboBoxControl_APAccount.SelectedValue = Nothing
            ComboBoxControl_PostPeriod.SelectedValue = Nothing
            ComboBoxControl_PostPeriodForMod.SelectedValue = Nothing

            NumericInputDistribution_Clients.EditValue = Nothing
            NumericInputDistribution_Balance.EditValue = Nothing
            NumericInputDistribution_NonClient.EditValue = Nothing
            NumericInputDistribution_ForeignTotal.EditValue = Nothing

            NumericInputControl_InvoiceAmount.EditValue = Nothing
            NumericInputControl_SalesTax.EditValue = Nothing
            NumericInputControl_InvoiceTotal.EditValue = Nothing
            NumericInputControl_DiscountPercentage.EditValue = Nothing
            NumericInputControl_Discount.EditValue = Nothing
            NumericInputControl_TotalDue.EditValue = Nothing

            NumericInputControl_VendorTaxableAmount.EditValue = Nothing
            CheckBoxControl_VendorTaxEnabled.Checked = False
            SearchableComboBoxControl_VendorTaxCode.EditValue = Nothing
            NumericInputControl_VendorCurrencyRate.EditValue = Nothing

            DateTimePickerControl_EntryDate.Value = Nothing
            DateTimePickerControl_InvoiceDate.Value = Nothing
            DateTimePickerControl_DateToPay.Value = Nothing

            TextBoxControl_PayTo.Text = Nothing

            Address3LineControlControl_Address.ClearControl()
            Address3LineControlControl_Address.ReadOnly = True

            DataGridViewTransactions_GLTransactions.ClearGridCustomization()
            DataGridViewTransactions_GLTransactions.ItemDescription = "GL Transaction(s)"

            DataGridViewChecksWritten_ChecksWritten.ClearGridCustomization()
            DataGridViewChecksWritten_ChecksWritten.ItemDescription = "Check(s) Written"

            TextBoxControl_MessageDetails.Text = ""

            NumericInputInvoiceInformation_TotalPaidToVendor.EditValue = Nothing

            TabControlControl_InvoiceDetails.SelectedTab = TabItemInvoiceDetails_DistributionTab

            ClearTabText()

            'Non-Client tab
            DataGridViewNonClient_DistributionDetails.ClearGridCustomization()
            DataGridViewNonClient_DistributionDetails.CurrentView.ClearDisabledRows()

            'Production tab
            DataGridViewProduction_DistributionDetails.ClearGridCustomization()
            DataGridViewProduction_DistributionDetails.CurrentView.ClearDisabledRows()

            'Newspaper tab
            DataGridViewNewspaper_DistributionDetails.ClearGridCustomization()
            DataGridViewNewspaper_DistributionDetails.CurrentView.ClearDisabledRows()

            'Magazine tab
            DataGridViewMagazine_DistributionDetails.ClearGridCustomization()
            DataGridViewMagazine_DistributionDetails.CurrentView.ClearDisabledRows()

            'Radio tab
            DataGridViewRadio_DistributionDetails.ClearGridCustomization()
            DataGridViewRadio_DistributionDetails.CurrentView.ClearDisabledRows()

            'TV tab
            DataGridViewTV_DistributionDetails.ClearGridCustomization()
            DataGridViewTV_DistributionDetails.CurrentView.ClearDisabledRows()

            'Out of home tab
            DataGridViewOutOfHome_DistributionDetails.ClearGridCustomization()
            DataGridViewOutOfHome_DistributionDetails.CurrentView.ClearDisabledRows()

            'Internet tab
            DataGridViewInternet_DistributionDetails.ClearGridCustomization()
            DataGridViewInternet_DistributionDetails.CurrentView.ClearDisabledRows()

            If ClearVendor Then

                EnableVendorSearchControls(False)

            End If

            AdvantageFramework.WinForm.Presentation.Controls.ClearUserEntryChangedSetting(Me)

            _IsClearing = False

            Me.ResumeLayout()

        End Sub
        Public Sub DeleteSelectedNonClient()

            Dim AccountPayableGLDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail = Nothing
            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing

            If DataGridViewNonClient_DistributionDetails.HasASelectedRow Then

                DataGridViewNonClient_DistributionDetails.CurrentView.CloseEditorForUpdating()

                RowHandlesAndDataBoundItems = DataGridViewNonClient_DistributionDetails.GetAllSelectedRowsRowHandlesAndDataBoundItems

                If _ID <> 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                            Try

                                AccountPayableGLDistributionDetail = RowHandlesAndDataBoundItem.Value

                            Catch ex As Exception
                                AccountPayableGLDistributionDetail = Nothing
                            End Try

                            If AccountPayableGLDistributionDetail IsNot Nothing AndAlso Not AccountPayableGLDistributionDetail.HasError Then

                                If AccountPayableGLDistributionDetail.AccountPayableGLDistribution.IsEntityBeingAdded() = False Then

                                    If DataGridViewNonClient_DistributionDetails.CurrentView.DisabledRows.Where(Function(dr) dr.DataSourceRowIndex = DataGridViewNonClient_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)).Any Then

                                        DataGridViewNonClient_DistributionDetails.CurrentView.EnableRow(DataGridViewNonClient_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableGLDistributionDetail.IsDeleted = False

                                    Else

                                        DataGridViewNonClient_DistributionDetails.CurrentView.DisableRow(DataGridViewNonClient_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableGLDistributionDetail.IsDeleted = True

                                    End If

                                    DataGridViewNonClient_DistributionDetails.SetUserEntryChanged()

                                    DataGridViewNonClient_DistributionDetails.Focus()

                                Else

                                    DataGridViewNonClient_DistributionDetails.CurrentView.DeleteFromDataSource(AccountPayableGLDistributionDetail)

                                End If

                            Else

                                AdvantageFramework.WinForm.MessageBox.Show("Invalid rows cannot be deleted, please fix and try again.")
                                Exit For

                            End If

                        Next

                    End Using

                Else

                    For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                        DataGridViewNonClient_DistributionDetails.CurrentView.DeleteFromDataSource(RowHandlesAndDataBoundItem.Value)

                    Next

                End If

                CalculateTotalAmount()

            End If

        End Sub
        Public Sub DeleteSelectedProduction()

            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing
            Dim AllowDelete As Boolean = True
            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing

            If DataGridViewProduction_DistributionDetails.HasASelectedRow Then

                DataGridViewProduction_DistributionDetails.CurrentView.CloseEditorForUpdating()

                Me.ShowWaitForm("Processing...")

                RowHandlesAndDataBoundItems = DataGridViewProduction_DistributionDetails.GetAllSelectedRowsRowHandlesAndDataBoundItems

                If _ID <> 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                            Try

                                AccountPayableProductionDistributionDetail = RowHandlesAndDataBoundItem.Value

                            Catch ex As Exception
                                AccountPayableProductionDistributionDetail = Nothing
                            End Try

                            If AccountPayableProductionDistributionDetail IsNot Nothing AndAlso Not AccountPayableProductionDistributionDetail.HasError Then

                                If AccountPayableProductionDistributionDetail.AccountPayableProduction.IsEntityBeingAdded() = False Then

                                    If AccountPayableProductionDistributionDetail.IsOpen = 0 Then

                                        AdvantageFramework.WinForm.MessageBox.Show("The job/component has been flagged closed.  You cannot modify this line.")
                                        AllowDelete = False

                                    ElseIf AccountPayableProductionDistributionDetail.IsAdvanceBilling = 1 Then

                                        AdvantageFramework.WinForm.MessageBox.Show("Item has been selected to be Included in an Advance Billing. Changes or deletion not allowed.")
                                        AllowDelete = False

                                    ElseIf AccountPayableProductionDistributionDetail.BillingCommandCenterID IsNot Nothing OrElse JobComponentSelectedForReviewInBCC(DbContext, AccountPayableProductionDistributionDetail.JobNumber, AccountPayableProductionDistributionDetail.JobComponentNumber, Nothing) Then

                                        AdvantageFramework.WinForm.MessageBox.Show("Item has been selected for review in Billing Command Center. Changes or deletion not allowed.")
                                        AllowDelete = False

                                    ElseIf AccountPayableProductionDistributionDetail.AccountPayableProduction.AccountReceivableInvoiceNumber IsNot Nothing AndAlso AccountPayableProductionDistributionDetail.IsDeleted = False Then

                                        If AdvantageFramework.WinForm.MessageBox.Show("Item has been billed, are you sure you want to delete it?", AdvantageFramework.WinForm.MessageBox.MessageBoxButtons.YesNo) = AdvantageFramework.WinForm.MessageBox.DialogResults.No Then

                                            AllowDelete = False

                                        End If

                                    End If

                                    If AllowDelete Then

                                        If DataGridViewProduction_DistributionDetails.CurrentView.IsRowDisabledAsDeleted(DataGridViewProduction_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)) Then

                                            DataGridViewProduction_DistributionDetails.CurrentView.EnableRow(DataGridViewProduction_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                            AccountPayableProductionDistributionDetail.IsDeleted = False

                                        ElseIf DataGridViewProduction_DistributionDetails.CurrentView.IsRowDisabledAsReadonly(DataGridViewProduction_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)) = False Then

                                            DataGridViewProduction_DistributionDetails.CurrentView.DisableRow(DataGridViewProduction_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                            AccountPayableProductionDistributionDetail.IsDeleted = True

                                        ElseIf DataGridViewProduction_DistributionDetails.CurrentView.IsRowDisabledAsReadonly(DataGridViewProduction_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)) = True AndAlso
                                                AccountPayableProductionDistributionDetail.AccountPayableProduction.AccountReceivableInvoiceNumber IsNot Nothing Then

                                            DataGridViewProduction_DistributionDetails.CurrentView.DisableRow(DataGridViewProduction_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                            AccountPayableProductionDistributionDetail.IsDeleted = True

                                        End If

                                        DataGridViewProduction_DistributionDetails.SetUserEntryChanged()

                                    End If

                                    DataGridViewProduction_DistributionDetails.Focus()

                                Else

                                    DataGridViewProduction_DistributionDetails.CurrentView.DeleteFromDataSource(AccountPayableProductionDistributionDetail)

                                End If

                            Else

                                AdvantageFramework.WinForm.MessageBox.Show("Invalid rows cannot be deleted, please fix and try again.")
                                Exit For

                            End If

                        Next

                    End Using

                Else

                    For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                        DataGridViewProduction_DistributionDetails.CurrentView.DeleteFromDataSource(RowHandlesAndDataBoundItem.Value)

                    Next

                End If

                CalculateTotalAmount()

                Me.CloseWaitForm()

            End If

        End Sub
        Public Sub DeleteSelectedNewspaper()

            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing
            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing

            If DataGridViewNewspaper_DistributionDetails.HasASelectedRow Then

                DataGridViewNewspaper_DistributionDetails.CurrentView.CloseEditorForUpdating()

                RowHandlesAndDataBoundItems = DataGridViewNewspaper_DistributionDetails.GetAllSelectedRowsRowHandlesAndDataBoundItems

                If _ID <> 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                            Try

                                AccountPayableNewspaperDistributionDetail = RowHandlesAndDataBoundItem.Value

                            Catch ex As Exception
                                AccountPayableNewspaperDistributionDetail = Nothing
                            End Try

                            If AccountPayableNewspaperDistributionDetail IsNot Nothing AndAlso Not AccountPayableNewspaperDistributionDetail.HasError Then

                                If AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.IsEntityBeingAdded() = False Then

                                    If DataGridViewNewspaper_DistributionDetails.CurrentView.DisabledRows.Where(Function(dr) dr.DataSourceRowIndex = DataGridViewNewspaper_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)).Any Then

                                        DataGridViewNewspaper_DistributionDetails.CurrentView.EnableRow(DataGridViewNewspaper_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableNewspaperDistributionDetail.IsDeleted = False

                                    Else

                                        DataGridViewNewspaper_DistributionDetails.CurrentView.DisableRow(DataGridViewNewspaper_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableNewspaperDistributionDetail.IsDeleted = True

                                    End If

                                    DataGridViewNewspaper_DistributionDetails.SetUserEntryChanged()

                                    DataGridViewNewspaper_DistributionDetails.Focus()

                                Else

                                    DataGridViewNewspaper_DistributionDetails.CurrentView.DeleteFromDataSource(AccountPayableNewspaperDistributionDetail)

                                End If

                            Else

                                AdvantageFramework.WinForm.MessageBox.Show("Invalid rows cannot be deleted, please fix and try again.")
                                Exit For

                            End If

                        Next

                    End Using

                Else

                    For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                        DataGridViewNewspaper_DistributionDetails.CurrentView.DeleteFromDataSource(RowHandlesAndDataBoundItem.Value)

                    Next

                End If

                CalculateTotalAmount()

            End If

        End Sub
        Public Sub DeleteSelectedMagazine()

            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing
            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing

            If DataGridViewMagazine_DistributionDetails.HasASelectedRow Then

                DataGridViewMagazine_DistributionDetails.CurrentView.CloseEditorForUpdating()

                RowHandlesAndDataBoundItems = DataGridViewMagazine_DistributionDetails.GetAllSelectedRowsRowHandlesAndDataBoundItems

                If _ID <> 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                            Try

                                AccountPayableMagazineDistributionDetail = RowHandlesAndDataBoundItem.Value

                            Catch ex As Exception
                                AccountPayableMagazineDistributionDetail = Nothing
                            End Try

                            If AccountPayableMagazineDistributionDetail IsNot Nothing AndAlso Not AccountPayableMagazineDistributionDetail.HasError Then

                                If AccountPayableMagazineDistributionDetail.AccountPayableMagazine.IsEntityBeingAdded() = False Then

                                    If DataGridViewMagazine_DistributionDetails.CurrentView.DisabledRows.Where(Function(dr) dr.DataSourceRowIndex = DataGridViewMagazine_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)).Any Then

                                        DataGridViewMagazine_DistributionDetails.CurrentView.EnableRow(DataGridViewMagazine_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableMagazineDistributionDetail.IsDeleted = False

                                    Else

                                        DataGridViewMagazine_DistributionDetails.CurrentView.DisableRow(DataGridViewMagazine_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableMagazineDistributionDetail.IsDeleted = True

                                    End If

                                    DataGridViewMagazine_DistributionDetails.SetUserEntryChanged()

                                    DataGridViewMagazine_DistributionDetails.Focus()

                                Else

                                    DataGridViewMagazine_DistributionDetails.CurrentView.DeleteFromDataSource(AccountPayableMagazineDistributionDetail)

                                End If

                            Else

                                AdvantageFramework.WinForm.MessageBox.Show("Invalid rows cannot be deleted, please fix and try again.")
                                Exit For

                            End If

                        Next

                    End Using

                Else

                    For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                        DataGridViewMagazine_DistributionDetails.CurrentView.DeleteFromDataSource(RowHandlesAndDataBoundItem.Value)

                    Next

                End If

                CalculateTotalAmount()

            End If

        End Sub
        Public Sub DeleteSelectedRadio()

            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing
            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing

            If DataGridViewRadio_DistributionDetails.HasASelectedRow Then

                DataGridViewRadio_DistributionDetails.CurrentView.CloseEditorForUpdating()

                RowHandlesAndDataBoundItems = DataGridViewRadio_DistributionDetails.GetAllSelectedRowsRowHandlesAndDataBoundItems

                If _ID <> 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                            Try

                                AccountPayableRadioDistributionDetail = RowHandlesAndDataBoundItem.Value

                            Catch ex As Exception
                                AccountPayableRadioDistributionDetail = Nothing
                            End Try

                            If AccountPayableRadioDistributionDetail IsNot Nothing AndAlso Not AccountPayableRadioDistributionDetail.HasError Then

                                If AccountPayableRadioDistributionDetail.AccountPayableRadio.IsEntityBeingAdded() = False Then

                                    If DataGridViewRadio_DistributionDetails.CurrentView.DisabledRows.Where(Function(dr) dr.DataSourceRowIndex = DataGridViewRadio_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)).Any Then

                                        DataGridViewRadio_DistributionDetails.CurrentView.EnableRow(DataGridViewRadio_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableRadioDistributionDetail.IsDeleted = False

                                    Else

                                        DataGridViewRadio_DistributionDetails.CurrentView.DisableRow(DataGridViewRadio_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableRadioDistributionDetail.IsDeleted = True

                                    End If

                                    DataGridViewRadio_DistributionDetails.SetUserEntryChanged()

                                    DataGridViewRadio_DistributionDetails.Focus()

                                Else

                                    DataGridViewRadio_DistributionDetails.CurrentView.DeleteFromDataSource(AccountPayableRadioDistributionDetail)

                                End If

                                DataGridViewRadio_DistributionDetails.GridViewSelectionChanged()

                            Else

                                AdvantageFramework.WinForm.MessageBox.Show("Invalid rows cannot be deleted, please fix and try again.")
                                Exit For

                            End If

                        Next

                    End Using

                Else

                    For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                        DataGridViewRadio_DistributionDetails.CurrentView.DeleteFromDataSource(RowHandlesAndDataBoundItem.Value)

                    Next

                End If

                CalculateTotalAmount()

            End If

        End Sub
        Public Sub DeleteSelectedTV()

            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing
            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing

            If DataGridViewTV_DistributionDetails.HasASelectedRow Then

                DataGridViewTV_DistributionDetails.CurrentView.CloseEditorForUpdating()

                RowHandlesAndDataBoundItems = DataGridViewTV_DistributionDetails.GetAllSelectedRowsRowHandlesAndDataBoundItems

                If _ID <> 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                            Try

                                AccountPayableTVDistributionDetail = RowHandlesAndDataBoundItem.Value

                            Catch ex As Exception
                                AccountPayableTVDistributionDetail = Nothing
                            End Try

                            If AccountPayableTVDistributionDetail IsNot Nothing AndAlso Not AccountPayableTVDistributionDetail.HasError Then

                                If AccountPayableTVDistributionDetail.AccountPayableTV.IsEntityBeingAdded() = False Then

                                    If DataGridViewTV_DistributionDetails.CurrentView.DisabledRows.Where(Function(dr) dr.DataSourceRowIndex = DataGridViewTV_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)).Any Then

                                        DataGridViewTV_DistributionDetails.CurrentView.EnableRow(DataGridViewTV_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableTVDistributionDetail.IsDeleted = False

                                    Else

                                        DataGridViewTV_DistributionDetails.CurrentView.DisableRow(DataGridViewTV_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableTVDistributionDetail.IsDeleted = True

                                    End If

                                    DataGridViewTV_DistributionDetails.SetUserEntryChanged()

                                    DataGridViewTV_DistributionDetails.Focus()

                                Else

                                    DataGridViewTV_DistributionDetails.CurrentView.DeleteFromDataSource(AccountPayableTVDistributionDetail)

                                End If

                                DataGridViewTV_DistributionDetails.CurrentView.GridViewSelectionChanged()

                            Else

                                AdvantageFramework.WinForm.MessageBox.Show("Invalid rows cannot be deleted, please fix and try again.")
                                Exit For

                            End If

                        Next

                    End Using

                Else

                    For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                        DataGridViewTV_DistributionDetails.CurrentView.DeleteFromDataSource(RowHandlesAndDataBoundItem.Value)

                    Next

                End If

                CalculateTotalAmount()

            End If

        End Sub
        Public Sub DeleteSelectedOutOfHome()

            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing
            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing

            If DataGridViewOutOfHome_DistributionDetails.HasASelectedRow Then

                DataGridViewOutOfHome_DistributionDetails.CurrentView.CloseEditorForUpdating()

                RowHandlesAndDataBoundItems = DataGridViewOutOfHome_DistributionDetails.GetAllSelectedRowsRowHandlesAndDataBoundItems

                If _ID <> 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                            Try

                                AccountPayableOutOfHomeDistributionDetail = RowHandlesAndDataBoundItem.Value

                            Catch ex As Exception
                                AccountPayableOutOfHomeDistributionDetail = Nothing
                            End Try

                            If AccountPayableOutOfHomeDistributionDetail IsNot Nothing AndAlso Not AccountPayableOutOfHomeDistributionDetail.HasError Then

                                If AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.IsEntityBeingAdded() = False Then

                                    If DataGridViewOutOfHome_DistributionDetails.CurrentView.DisabledRows.Where(Function(dr) dr.DataSourceRowIndex = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)).Any Then

                                        DataGridViewOutOfHome_DistributionDetails.CurrentView.EnableRow(DataGridViewOutOfHome_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableOutOfHomeDistributionDetail.IsDeleted = False

                                    Else

                                        DataGridViewOutOfHome_DistributionDetails.CurrentView.DisableRow(DataGridViewOutOfHome_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableOutOfHomeDistributionDetail.IsDeleted = True

                                    End If

                                    DataGridViewOutOfHome_DistributionDetails.SetUserEntryChanged()

                                    DataGridViewOutOfHome_DistributionDetails.Focus()

                                Else

                                    DataGridViewOutOfHome_DistributionDetails.CurrentView.DeleteFromDataSource(AccountPayableOutOfHomeDistributionDetail)

                                End If

                            Else

                                AdvantageFramework.WinForm.MessageBox.Show("Invalid rows cannot be deleted, please fix and try again.")
                                Exit For

                            End If

                        Next

                    End Using

                Else

                    For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                        DataGridViewOutOfHome_DistributionDetails.CurrentView.DeleteFromDataSource(RowHandlesAndDataBoundItem.Value)

                    Next

                End If

                CalculateTotalAmount()

            End If

        End Sub
        Public Sub DeleteSelectedInternet()

            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing
            Dim RowHandlesAndDataBoundItems As Generic.Dictionary(Of Integer, Object) = Nothing

            If DataGridViewInternet_DistributionDetails.HasASelectedRow Then

                DataGridViewInternet_DistributionDetails.CurrentView.CloseEditorForUpdating()

                RowHandlesAndDataBoundItems = DataGridViewInternet_DistributionDetails.GetAllSelectedRowsRowHandlesAndDataBoundItems

                If _ID <> 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                            Try

                                AccountPayableInternetDistributionDetail = RowHandlesAndDataBoundItem.Value

                            Catch ex As Exception
                                AccountPayableInternetDistributionDetail = Nothing
                            End Try

                            If AccountPayableInternetDistributionDetail IsNot Nothing AndAlso Not AccountPayableInternetDistributionDetail.HasError Then

                                If AccountPayableInternetDistributionDetail.AccountPayableInternet.IsEntityBeingAdded() = False Then

                                    If DataGridViewInternet_DistributionDetails.CurrentView.DisabledRows.Where(Function(dr) dr.DataSourceRowIndex = DataGridViewInternet_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key)).Any Then

                                        DataGridViewInternet_DistributionDetails.CurrentView.EnableRow(DataGridViewInternet_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableInternetDistributionDetail.IsDeleted = False

                                    Else

                                        DataGridViewInternet_DistributionDetails.CurrentView.DisableRow(DataGridViewInternet_DistributionDetails.CurrentView.GetDataSourceRowIndex(RowHandlesAndDataBoundItem.Key))
                                        AccountPayableInternetDistributionDetail.IsDeleted = True

                                    End If

                                    DataGridViewInternet_DistributionDetails.SetUserEntryChanged()

                                    DataGridViewInternet_DistributionDetails.Focus()

                                Else

                                    DataGridViewInternet_DistributionDetails.CurrentView.DeleteFromDataSource(AccountPayableInternetDistributionDetail)

                                End If

                            Else

                                AdvantageFramework.WinForm.MessageBox.Show("Invalid rows cannot be deleted, please fix and try again.")
                                Exit For

                            End If

                        Next

                    End Using

                Else

                    For Each RowHandlesAndDataBoundItem In RowHandlesAndDataBoundItems

                        DataGridViewInternet_DistributionDetails.CurrentView.DeleteFromDataSource(RowHandlesAndDataBoundItem.Value)

                    Next

                End If

                CalculateTotalAmount()

            End If

        End Sub
        Public Function FillObject(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal IsNew As Boolean) As AdvantageFramework.Database.Entities.AccountPayable

            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing

            Try

                If IsNew Then

                    AccountPayable = New AdvantageFramework.Database.Entities.AccountPayable

                    AccountPayable.DbContext = DbContext

                    LoadAccountPayableEntity(AccountPayable)

                Else

                    AccountPayable = AdvantageFramework.Database.Procedures.AccountPayable.LoadByAccountPayableIDAndSequenceNumber(DbContext, _ID, _SequenceNumber)

                    AccountPayable.DbContext = DbContext

                    LoadAccountPayableEntity(AccountPayable)

                End If

            Catch ex As Exception
                AccountPayable = Nothing
            End Try

            FillObject = AccountPayable

        End Function
        Public Sub LaunchMediaApprovalDialog(ByVal MediaType As AdvantageFramework.Database.Entities.MediaOrderType)

            Dim OrderNumber As Integer = Nothing
            Dim OrderLineNumber As Short = Nothing
            Dim MediaStatus As Short
            Dim MediaComment As String = Nothing
            Dim IsOnHold As Short = Nothing
            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing
            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing
            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing
            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing

            Select Case MediaType

                Case Database.Entities.MediaOrderType.Magazine

                    AccountPayableMagazineDistributionDetail = DataGridViewMagazine_DistributionDetails.CurrentView.GetRow(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle)

                    If AccountPayableMagazineDistributionDetail IsNot Nothing Then

                        OrderNumber = AccountPayableMagazineDistributionDetail.OrderNumber
                        OrderLineNumber = AccountPayableMagazineDistributionDetail.OrderLineNumber
                        MediaStatus = AccountPayableMagazineDistributionDetail.NewApprovalStatus.GetValueOrDefault(0)
                        MediaComment = AccountPayableMagazineDistributionDetail.NewApprovalComments
                        IsOnHold = If(Me.CheckBoxControl_OnHold.Checked, 1, 0)

                        If AdvantageFramework.FinanceAndAccounting.Presentation.AccountsPayableApprovalDialog.ShowFormDialog(_ID, OrderNumber, OrderLineNumber, MediaType, MediaStatus, MediaComment, IsOnHold) = System.Windows.Forms.DialogResult.OK Then

                            AccountPayableMagazineDistributionDetail.NewApprovalStatus = MediaStatus
                            AccountPayableMagazineDistributionDetail.NewApprovalComments = MediaComment

                            CheckBoxControl_OnHold.Checked = CBool(IsOnHold)

                            DataGridViewMagazine_DistributionDetails.SetUserEntryChanged()
                            DataGridViewMagazine_DistributionDetails.CurrentView.RefreshRow(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle)

                        End If

                    End If

                Case Database.Entities.MediaOrderType.Newspaper

                    AccountPayableNewspaperDistributionDetail = DataGridViewNewspaper_DistributionDetails.CurrentView.GetRow(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle)

                    If AccountPayableNewspaperDistributionDetail IsNot Nothing Then

                        OrderNumber = AccountPayableNewspaperDistributionDetail.OrderNumber
                        OrderLineNumber = AccountPayableNewspaperDistributionDetail.OrderLineNumber
                        MediaStatus = AccountPayableNewspaperDistributionDetail.NewApprovalStatus.GetValueOrDefault(0)
                        MediaComment = AccountPayableNewspaperDistributionDetail.NewApprovalComments
                        IsOnHold = If(Me.CheckBoxControl_OnHold.Checked, 1, 0)

                        If AdvantageFramework.FinanceAndAccounting.Presentation.AccountsPayableApprovalDialog.ShowFormDialog(_ID, OrderNumber, OrderLineNumber, MediaType, MediaStatus, MediaComment, IsOnHold) = System.Windows.Forms.DialogResult.OK Then

                            AccountPayableNewspaperDistributionDetail.NewApprovalStatus = MediaStatus
                            AccountPayableNewspaperDistributionDetail.NewApprovalComments = MediaComment

                            CheckBoxControl_OnHold.Checked = CBool(IsOnHold)

                            DataGridViewNewspaper_DistributionDetails.SetUserEntryChanged()
                            DataGridViewNewspaper_DistributionDetails.CurrentView.RefreshRow(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle)

                        End If

                    End If

                Case Database.Entities.MediaOrderType.Internet

                    AccountPayableInternetDistributionDetail = DataGridViewInternet_DistributionDetails.CurrentView.GetRow(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle)

                    If AccountPayableInternetDistributionDetail IsNot Nothing Then

                        OrderNumber = AccountPayableInternetDistributionDetail.InternetOrderNumber
                        OrderLineNumber = AccountPayableInternetDistributionDetail.InternetDetailLineNumber
                        MediaStatus = AccountPayableInternetDistributionDetail.NewApprovalStatus.GetValueOrDefault(0)
                        MediaComment = AccountPayableInternetDistributionDetail.NewApprovalComments
                        IsOnHold = If(Me.CheckBoxControl_OnHold.Checked, 1, 0)

                        If AdvantageFramework.FinanceAndAccounting.Presentation.AccountsPayableApprovalDialog.ShowFormDialog(_ID, OrderNumber, OrderLineNumber, MediaType, MediaStatus, MediaComment, IsOnHold) = System.Windows.Forms.DialogResult.OK Then

                            AccountPayableInternetDistributionDetail.NewApprovalStatus = MediaStatus
                            AccountPayableInternetDistributionDetail.NewApprovalComments = MediaComment

                            CheckBoxControl_OnHold.Checked = CBool(IsOnHold)

                            DataGridViewInternet_DistributionDetails.SetUserEntryChanged()
                            DataGridViewInternet_DistributionDetails.CurrentView.RefreshRow(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle)

                        End If

                    End If

                Case Database.Entities.MediaOrderType.OutOfHome

                    AccountPayableOutOfHomeDistributionDetail = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle)

                    If AccountPayableOutOfHomeDistributionDetail IsNot Nothing Then

                        OrderNumber = AccountPayableOutOfHomeDistributionDetail.OutdoorOrderNumber
                        OrderLineNumber = AccountPayableOutOfHomeDistributionDetail.OutdoorDetailLineNumber
                        MediaStatus = AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus.GetValueOrDefault(0)
                        MediaComment = AccountPayableOutOfHomeDistributionDetail.NewApprovalComments
                        IsOnHold = If(Me.CheckBoxControl_OnHold.Checked, 1, 0)

                        If AdvantageFramework.FinanceAndAccounting.Presentation.AccountsPayableApprovalDialog.ShowFormDialog(_ID, OrderNumber, OrderLineNumber, MediaType, MediaStatus, MediaComment, IsOnHold) = System.Windows.Forms.DialogResult.OK Then

                            AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus = MediaStatus
                            AccountPayableOutOfHomeDistributionDetail.NewApprovalComments = MediaComment

                            CheckBoxControl_OnHold.Checked = CBool(IsOnHold)

                            DataGridViewOutOfHome_DistributionDetails.SetUserEntryChanged()
                            DataGridViewOutOfHome_DistributionDetails.CurrentView.RefreshRow(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle)

                        End If

                    End If

                Case Database.Entities.MediaOrderType.Radio

                    AccountPayableRadioDistributionDetail = DataGridViewRadio_DistributionDetails.CurrentView.GetRow(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle)

                    If AccountPayableRadioDistributionDetail IsNot Nothing Then

                        OrderNumber = AccountPayableRadioDistributionDetail.OrderNumber
                        OrderLineNumber = AccountPayableRadioDistributionDetail.OrderLineNumber
                        MediaStatus = AccountPayableRadioDistributionDetail.NewApprovalStatus.GetValueOrDefault(0)
                        MediaComment = AccountPayableRadioDistributionDetail.NewApprovalComments
                        IsOnHold = If(Me.CheckBoxControl_OnHold.Checked, 1, 0)

                        If AdvantageFramework.FinanceAndAccounting.Presentation.AccountsPayableApprovalDialog.ShowFormDialog(_ID, OrderNumber, OrderLineNumber, MediaType, MediaStatus, MediaComment, IsOnHold) = System.Windows.Forms.DialogResult.OK Then

                            AccountPayableRadioDistributionDetail.NewApprovalStatus = MediaStatus
                            AccountPayableRadioDistributionDetail.NewApprovalComments = MediaComment

                            CheckBoxControl_OnHold.Checked = CBool(IsOnHold)

                            DataGridViewRadio_DistributionDetails.SetUserEntryChanged()
                            DataGridViewRadio_DistributionDetails.CurrentView.RefreshRow(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle)

                        End If

                    End If

                Case Database.Entities.MediaOrderType.Television

                    AccountPayableTVDistributionDetail = DataGridViewTV_DistributionDetails.CurrentView.GetRow(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle)

                    If AccountPayableTVDistributionDetail IsNot Nothing Then

                        OrderNumber = AccountPayableTVDistributionDetail.OrderNumber
                        OrderLineNumber = AccountPayableTVDistributionDetail.OrderLineNumber
                        MediaStatus = AccountPayableTVDistributionDetail.NewApprovalStatus.GetValueOrDefault(0)
                        MediaComment = AccountPayableTVDistributionDetail.NewApprovalComments
                        IsOnHold = If(Me.CheckBoxControl_OnHold.Checked, 1, 0)

                        If AdvantageFramework.FinanceAndAccounting.Presentation.AccountsPayableApprovalDialog.ShowFormDialog(_ID, OrderNumber, OrderLineNumber, MediaType, MediaStatus, MediaComment, IsOnHold) = System.Windows.Forms.DialogResult.OK Then

                            AccountPayableTVDistributionDetail.NewApprovalStatus = MediaStatus
                            AccountPayableTVDistributionDetail.NewApprovalComments = MediaComment

                            CheckBoxControl_OnHold.Checked = CBool(IsOnHold)

                            DataGridViewTV_DistributionDetails.SetUserEntryChanged()
                            DataGridViewTV_DistributionDetails.CurrentView.RefreshRow(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle)

                        End If

                    End If

            End Select

        End Sub
        Public Function LoadControl(ByRef VendorCode As String, ByVal ID As Integer, ByVal SequenceNumber As Integer, ByVal BatchDate As Date, ByVal ShowGross As Boolean, ByVal SelectDocumentsTab As Boolean) ', ShowHome As Boolean) As Boolean

            'objects
            Dim Loaded As Boolean = True
            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing
            Dim TotalPaidToVendor As Decimal = Nothing
            Dim GeneralLedgerAccount As AdvantageFramework.Database.Entities.GeneralLedgerAccount = Nothing
            Dim AccountPayableList As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayable) = Nothing
            Dim ExpenseReport As AdvantageFramework.Database.Entities.ExpenseReport = Nothing
            Dim CurrencyControlsVisible As Boolean = False

            _IsLoading = True

            _BatchDate = BatchDate
            _ShowGrossColumns = ShowGross
            _SelectDocumentsTab = SelectDocumentsTab
            '_ShowHomeColumns = ShowHome

            Me.SuspendLayout()

            _ID = ID
            _SequenceNumber = SequenceNumber
            _QBVendorID = Nothing

            EnableGrids(True)

            EnableVendorSearchControls(True)
            _IsSetVendorMode = False

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                DataGridViewNonClient_DistributionDetails.CurrentView.ClearDisabledRows()
                DataGridViewProduction_DistributionDetails.CurrentView.ClearDisabledRows()
                DataGridViewMagazine_DistributionDetails.CurrentView.ClearDisabledRows()
                DataGridViewNewspaper_DistributionDetails.CurrentView.ClearDisabledRows()
                DataGridViewInternet_DistributionDetails.CurrentView.ClearDisabledRows()
                DataGridViewOutOfHome_DistributionDetails.CurrentView.ClearDisabledRows()
                DataGridViewRadio_DistributionDetails.CurrentView.ClearDisabledRows()
                DataGridViewTV_DistributionDetails.CurrentView.ClearDisabledRows()

                ClearTabText()

                DbContext.Database.Connection.Open()

                If _ID <> 0 Then

                    For Each TabItem In TabControlControl_APDetails.Tabs.OfType(Of DevComponents.DotNetBar.TabItem)()

                        TabItem.Tag = False

                    Next

                    For Each TabItem In TabControlControl_InvoiceDetails.Tabs.OfType(Of DevComponents.DotNetBar.TabItem)()

                        TabItem.Tag = False

                    Next

                    AccountPayable = AdvantageFramework.Database.Procedures.AccountPayable.LoadByAccountPayableIDAndSequenceNumber(DbContext, _ID, _SequenceNumber)

                    If AccountPayable IsNot Nothing Then

                        _IsDeleted = CBool(AccountPayable.Deleted.GetValueOrDefault(0))

                        If _IsQuickbooksEnabled Then

                            _QBVendorID = AdvantageFramework.Quickbooks.GetVendorCrossReferenceVendorID(DbContext, AccountPayable.VendorCode, Nothing)

                            If String.IsNullOrWhiteSpace(_QBVendorID) = False Then

                                _APDetails = DbContext.Database.SqlQuery(Of AdvantageFramework.Quickbooks.Classes.APDetail)(String.Format("exec advsp_quickbooks_bill_detail {0}", _ID)).ToList

                            End If

                        End If

                        SetVendorPayToAddress(AccountPayable.Vendor)

                        SearchableComboBoxControl_Vendor.RemoveAddedItemsFromDataSource()
                        SearchableComboBoxControl_Vendor.SelectedValue = AccountPayable.VendorCode
                        SearchableComboBoxControl_CurrencyCode.SelectedValue = AccountPayable.CurrencyCode

                        TextBoxControl_VendorNote.Text = AccountPayable.Vendor.Notes
                        TextBoxDropDownControl_Note.Text = AccountPayable.Vendor.Notes

                        SetInvoiceNumberDatasource(AccountPayable.VendorCode)
                        SearchableComboBoxControl_InvoiceNumber.Visible = True
                        SearchableComboBoxControl_InvoiceNumber.Text = AccountPayable.InvoiceNumber

                        TextBoxControl_InvoiceNumber.SetRequired(False)
                        TextBoxControl_InvoiceNumber.Visible = False

                        CheckBoxControl_1099Invoice.Checked = CBool(AccountPayable.Is1099Invoice.GetValueOrDefault(0))

                        If AccountPayable.IsOnHold IsNot Nothing Then
                            CheckBoxControl_OnHold.Checked = AccountPayable.IsOnHold
                        End If

                        TextBoxControl_Description.Text = AccountPayable.InvoiceDescription

                        If String.IsNullOrWhiteSpace(AccountPayable.OfficeCode) = False Then

                            ComboBoxControl_Office.SelectedValue = AccountPayable.OfficeCode

                        ElseIf AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) OrElse AdvantageFramework.Database.Procedures.Agency.IsInterCompanyTransactionsEnabled(DbContext) Then

                            If AccountPayable.GeneralLedgerAccount IsNot Nothing AndAlso AccountPayable.GeneralLedgerAccount.GeneralLedgerOfficeCrossReference IsNot Nothing Then

                                ComboBoxControl_Office.SelectedValue = AccountPayable.GeneralLedgerAccount.GeneralLedgerOfficeCrossReference.OfficeCode

                            End If

                        Else

                            ComboBoxControl_Office.SelectedValue = Nothing

                        End If

                        If _SelectDocumentsTab Then

                            TabControlControl_APDetails.SelectedTab = Me.TabItemAPDetails_DocumentsTab
                            _SelectedTab = Me.TabItemAPDetails_DocumentsTab

                        End If

                        'LoadAPDetails(TabControlControl_APDetails.SelectedTab, DbContext)

                        NumericInputControl_ExchangeAmount.EditValue = AccountPayable.ExchangeAmount

                        If AccountPayable.CurrencyRate.HasValue = False OrElse AccountPayable.CurrencyRate = 0 Then

                            NumericInputControl_VendorCurrencyRate.EditValue = 1

                        Else

                            NumericInputControl_VendorCurrencyRate.EditValue = AccountPayable.CurrencyRate.GetValueOrDefault(1)

                        End If

                        If _IsDeleted Then

                            AccountPayableList = AdvantageFramework.Database.Procedures.AccountPayable.LoadAllByAccountPayableID(DbContext, AccountPayable.ID).ToList
                            NumericInputControl_InvoiceAmount.EditValue = AccountPayableList.Sum(Function(AP) AP.InvoiceAmount) + AccountPayableList.Sum(Function(AP) AP.ShippingAmount.GetValueOrDefault(0))
                            NumericInputControl_SalesTax.EditValue = AccountPayableList.Sum(Function(AP) AP.SalesTaxAmount.GetValueOrDefault(0))

                            SearchableComboBoxControl_VendorTaxCode.SelectedValue = Nothing
                            CheckBoxControl_VendorTaxEnabled.Checked = False
                            NumericInputControl_VendorTaxableAmount.EditValue = AccountPayableList.Sum(Function(AP) AP.VendorTaxableAmount.GetValueOrDefault(0))

                            ComboBoxControl_PostPeriodForMod.ReadOnly = True

                        Else

                            If AccountPayable.CurrencyCode IsNot Nothing Then

                                NumericInputControl_InvoiceAmount.EditValue = AccountPayable.ForeignInvoiceAmount
                                NumericInputControl_SalesTax.EditValue = AccountPayable.ForeignSalesTaxAmount

                            Else

                                NumericInputControl_InvoiceAmount.EditValue = (AccountPayable.InvoiceAmount + AccountPayable.ShippingAmount.GetValueOrDefault(0))
                                NumericInputControl_SalesTax.EditValue = AccountPayable.SalesTaxAmount.GetValueOrDefault(0)

                            End If

                            SearchableComboBoxControl_VendorTaxCode.SelectedValue = AccountPayable.VendorServiceTaxID
                            CheckBoxControl_VendorTaxEnabled.Checked = AccountPayable.VendorServiceTaxEnabled.GetValueOrDefault(False)
                            NumericInputControl_VendorTaxableAmount.EditValue = AccountPayable.VendorTaxableAmount

                            ComboBoxControl_PostPeriodForMod.ReadOnly = False

                        End If

                        NumericInputControl_DiscountPercentage.EditValue = AccountPayable.DiscountPercentage.GetValueOrDefault(0)
                        NumericInputDistribution_Balance.EditValue = FormatNumber(NumericInputControl_InvoiceAmount.Value + NumericInputControl_SalesTax.Value - NumericInputDistribution_Clients.Value - NumericInputDistribution_NonClient.Value, 2)

                        If AccountPayable.CreatedDate IsNot Nothing Then

                            DateTimePickerControl_EntryDate.Value = CDate(AccountPayable.CreatedDate).ToShortDateString

                        End If

                        DateTimePickerControl_InvoiceDate.Value = AccountPayable.InvoiceDate
                        DateTimePickerControl_DateToPay.Value = AccountPayable.PaidDate

                        ComboBoxControl_APAccount.Enabled = True
                        ComboBoxControl_Terms.Enabled = True
                        ComboBoxControl_PostPeriod.ReadOnly = True

                        LabelControl_PostingPeriodForMod.Visible = True
                        ComboBoxControl_PostPeriodForMod.Visible = True
                        ComboBoxControl_PostPeriodForMod.Enabled = True

                        ComboBoxControl_APAccount.RemoveAddedItemsFromDataSource()
                        ComboBoxControl_APAccount.SelectedValue = AccountPayable.GLACode

                        If ComboBoxControl_APAccount.SelectedValue <> AccountPayable.GLACode Then

                            GeneralLedgerAccount = AdvantageFramework.Database.Procedures.GeneralLedgerAccount.LoadByGLACode(DbContext, AccountPayable.GLACode)
                            ComboBoxControl_APAccount.AddComboItemToExistingDataSource(GeneralLedgerAccount.ToString, GeneralLedgerAccount.Code, True)
                            ComboBoxControl_APAccount.SelectedValue = AccountPayable.GLACode

                        End If

                        If AccountPayable.VendorTermCode IsNot Nothing Then

                            ComboBoxControl_Terms.SelectedValue = AccountPayable.VendorTermCode

                        End If

                        ComboBoxControl_PostPeriod.RemoveAddedItemsFromDataSource()

                        If AccountPayable.PostPeriod.APStatus = "X" Then

                            ComboBoxControl_PostPeriod.AddComboItemToExistingDataSource(AccountPayable.PostPeriod.ToString, AccountPayable.PostPeriodCode, True)

                        End If

                        ComboBoxControl_PostPeriod.SelectedValue = AccountPayable.PostPeriodCode
                        ComboBoxControl_PostPeriod.Tag = AccountPayable.PostPeriodCode

                        TextBoxControl_MessageDetails.Text = ""

                        If AccountPayable.CheckWriting = 1 Then

                            TextBoxControl_MessageDetails.Text = "Invoice is selected for checkwriting.  You will not be able to change any of the header information.  You will be able to modify the detail distribution only."

                            _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting

                        ElseIf AdvantageFramework.Database.Procedures.CheckWritingSelection.LoadByVendorCode(DbContext, AccountPayable.VendorCode).Any Then

                            TextBoxControl_MessageDetails.Text = "Vendor is selected for checkwriting.  You will not be able to change any of the header information.  You will be able to modify the detail distribution only."

                            _HeaderModifyState = HeaderModifyState.SelectedForCheckwriting

                        ElseIf NonVoidedChecksExist(DbContext) Then

                            TextBoxControl_MessageDetails.Text = "Payment has been made to this invoice.  You will not be able to change key header information.  You will be able to modify the detail distribution."

                            _HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed

                        ElseIf AccountPayable.PostPeriod.APStatus = "X" Then

                            TextBoxControl_MessageDetails.Text = "Posting period has been closed.  You will not be able to change key header information.  You will be able to modify the detail distribution."

                            _HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed

                        ElseIf AdvantageFramework.Database.Procedures.Agency.IsInterCompanyTransactionsEnabled(DbContext) AndAlso
                                DbContext.Database.SqlQuery(Of Boolean)(String.Format("SELECT dbo.[advfn_ap_intercompany_tx_exist]({0})", AccountPayableID)).FirstOrDefault = True Then

                            TextBoxControl_MessageDetails.Text = "Intercompany transactions exist.  You will not be able to change the header office or GL account."

                            _HeaderModifyState = HeaderModifyState.IntercompanyTransactionsExist

                        Else

                            _HeaderModifyState = HeaderModifyState.NoRestrictions

                        End If

                        SetHeaderControlsEnabled()

                        Try

                            TotalPaidToVendor = (From Entity In AdvantageFramework.Database.Procedures.AccountPayablePayment.Load(DbContext)
                                                 Where Entity.AccountPayableID = _ID).ToList.Sum(Function(APP) APP.CheckAmount.GetValueOrDefault(0))

                        Catch ex As Exception
                            TotalPaidToVendor = 0
                        End Try

                        NumericInputInvoiceInformation_TotalPaidToVendor.EditValue = TotalPaidToVendor

                        SetCurrentPostPeriod(DbContext, AccountPayable.PostPeriodCode)

                        RaiseEvent VendorInvoiceChanged()

                        VendorCode = AccountPayable.VendorCode

                        TabItemAPDetails_DocumentsTab.Visible = _HasAccessToDocuments

                        If ComboBoxControl_Office.Visible AndAlso AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                            ComboBoxControl_Office.ReadOnly = True

                        End If

                        If IsNumeric(AccountPayable.InvoiceNumber) Then

                            ExpenseReport = (From Entity In AdvantageFramework.Database.Procedures.ExpenseReport.Load(DbContext)
                                             Where Entity.VendorCode = AccountPayable.VendorCode AndAlso
                                                   Entity.InvoiceNumber = AccountPayable.InvoiceNumber
                                             Select Entity).FirstOrDefault

                        End If

                        _IsLinkedInQuickbooks = (String.IsNullOrWhiteSpace(AccountPayable.QuickbooksBillID) = False)

                        If ExpenseReport IsNot Nothing Then

                            TabItemAPDetails_ExpenseReceiptsTab.Visible = AdvantageFramework.Database.Procedures.ExpenseReportDocument.LoadByInvoiceNumber(DbContext, ExpenseReport.InvoiceNumber).Any

                        Else

                            TabItemAPDetails_ExpenseReceiptsTab.Visible = False

                        End If

                    Else

                        Loaded = False

                    End If

                Else

                    TabItemAPDetails_ExpenseReceiptsTab.Visible = False

                    _HeaderModifyState = HeaderModifyState.NoRestrictions

                    SearchableComboBoxControl_InvoiceNumber.Visible = False

                    TextBoxControl_InvoiceNumber.SetRequired(True)
                    TextBoxControl_InvoiceNumber.ReadOnly = False
                    TextBoxControl_InvoiceNumber.Focus()

                    TextBoxControl_PayTo.Text = Nothing

                    Address3LineControlControl_Address.ClearControl()
                    Address3LineControlControl_Address.ReadOnly = True

                    ComboBoxControl_Office.SelectedIndex = -1
                    ComboBoxControl_Terms.SelectedIndex = -1
                    ComboBoxControl_APAccount.SelectedIndex = -1

                    SetCurrentPostPeriod(DbContext, Nothing)

                    LabelControl_PostingPeriodForMod.Visible = False
                    ComboBoxControl_PostPeriodForMod.Visible = False

                    DateTimePickerControl_EntryDate.Value = CDate(Now.ToShortDateString)
                    DateTimePickerControl_InvoiceDate.Value = Nothing
                    DateTimePickerControl_DateToPay.Value = Nothing

                    TabItemAPDetails_NewspaperTab.Visible = False
                    TabItemAPDetails_MagazineTab.Visible = False
                    TabItemAPDetails_RadioTab.Visible = False
                    TabItemAPDetails_RadioDetailsTab.Visible = False
                    TabItemAPDetails_TVTab.Visible = False
                    TabItemAPDetails_TVDetailsTab.Visible = False
                    TabItemAPDetails_OutOfHomeTab.Visible = False
                    TabItemAPDetails_InternetTab.Visible = False
                    TabItemAPDetails_DocumentsTab.Visible = False

                    Try

                        SearchableComboBoxControl_Vendor.SelectedValue = VendorCode

                    Catch ex As Exception

                    End Try

                    SearchableComboBoxControl_Vendor.Enabled = False

                    SetVendorDefaults()

                    'LoadAPDetails(TabControlControl_APDetails.SelectedTab, DbContext)

                    CalculateDateToPay()

                    SetNonClientOfficeCodeVisibility(DbContext)

                    NumericInputControl_VendorCurrencyRate.EditValue = AdvantageFramework.AccountPayable.GetCurrencyRate(DbContext, _CurrencyCodeHome, SearchableComboBoxControl_CurrencyCode.GetSelectedValue)

                End If

                TabControlControl_InvoiceDetails.SelectedTab = TabItemInvoiceDetails_DistributionTab

                If Not SearchableComboBoxControl_CurrencyCode.HasASelectedValue AndAlso _IsMultiCurrencyEnabled Then

                    SearchableComboBoxControl_CurrencyCode.SelectedValue = _CurrencyCodeHome

                End If

                If _IsMultiCurrencyEnabled AndAlso SearchableComboBoxControl_CurrencyCode.GetSelectedValue <> _CurrencyCodeHome Then

                    CurrencyControlsVisible = True

                End If

                LoadAPDetails(TabControlControl_APDetails.SelectedTab, DbContext)

                LabelControl_Currency.Visible = CurrencyControlsVisible
                SearchableComboBoxControl_CurrencyCode.Visible = CurrencyControlsVisible
                NumericInputControl_VendorCurrencyRate.Visible = CurrencyControlsVisible
                NumericInputControl_VendorCurrencyRate.Properties.AllowNullInput = If(CurrencyControlsVisible, DevExpress.Utils.DefaultBoolean.False, DevExpress.Utils.DefaultBoolean.True)

                LabelControl_HomeCurrency.Visible = CurrencyControlsVisible
                NumericInputControl_HomeCurrencyAmount.Visible = CurrencyControlsVisible
                LabelControl_ExchangeAmount.Visible = CurrencyControlsVisible
                NumericInputControl_ExchangeAmount.Visible = CurrencyControlsVisible
                PictureUpdateCurrency_Image.Visible = CurrencyControlsVisible
                LabelDistribution_ForeignTotal.Visible = CurrencyControlsVisible
                NumericInputDistribution_ForeignTotal.Visible = CurrencyControlsVisible

                If CurrencyControlsVisible Then

                    RefreshCurrencyTooltip(DbContext, False)

                End If

                DbContext.Database.Connection.Close()

            End Using

            _IsLoading = False

            CalculateTotalAmount()

            CalculateCheckAmount()

            Me.ResumeLayout()

            AdvantageFramework.WinForm.Presentation.Controls.ClearUserEntryChangedSetting(Me)

            LoadControl = Loaded

        End Function
        Public Function Save(ByRef VendorCode As String) As Boolean

            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing
            Dim VendorName As String = Nothing
            Dim DbTransaction As System.Data.Entity.DbContextTransaction = Nothing
            Dim AccountPayableOld As AdvantageFramework.Database.Entities.AccountPayable = Nothing
            Dim GeneralLedgerDetail As AdvantageFramework.Database.Entities.GeneralLedgerDetail = Nothing
            Dim Saved As Boolean = False
            Dim AllowContinue As Boolean = True
            Dim ErrorMessage As String = Nothing
            Dim PostPeriodChanged As Boolean = False
            Dim GLTransaction As Integer = -1
            Dim AccountPayableID As Integer = Nothing
            Dim SequenceNumber As Short = Nothing
            Dim Remark As String = Nothing
            Dim ContinueSave As Boolean = True
            Dim GLReversalTransaction As Integer = -1
            Dim ReversalSequenceNumber As Short = -1
            Dim BypassPostPeriodVerify As Boolean = False
            Dim IsBalanced As Integer = -1
            Dim IsValid As Boolean = True
            Dim ReversalPostPeriodCode As String = Nothing

            If _CanUserUpdate AndAlso OkayToSave(ErrorMessage) Then

                If ValidateControl(ErrorMessage) Then

                    ErrorMessage = ""

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        AccountPayable = FillObject(DbContext, False)

                        If AccountPayable IsNot Nothing Then

                            AccountPayable.DoNotApplyCurrencyRequirement = Not NumericInputControl_VendorCurrencyRate.Visible

                            ErrorMessage = AccountPayable.ValidateEntity(IsValid)

                            If IsValid AndAlso AdvantageFramework.AccountPayable.IsDateOutsidePostPeriod(DbContext, AccountPayable.InvoiceDate, AccountPayable.PostPeriodCode) Then

                                If AdvantageFramework.WinForm.MessageBox.Show("The invoice date is outside of normal range based on the posting period selected, are you sure you want to continue?", MessageBox.MessageBoxButtons.YesNo) = MessageBox.DialogResults.No Then

                                    ContinueSave = False
                                    DateTimePickerControl_InvoiceDate.Focus()

                                End If

                            End If

                            If IsValid AndAlso ContinueSave Then

                                'If _HeaderModifyState = HeaderModifyState.NoRestrictions AndAlso ComboBoxControl_PostPeriod.Tag <> ComboBoxControl_PostPeriod.GetSelectedValue Then

                                '    If AdvantageFramework.WinForm.MessageBox.Show("You are about to change the posting period for this entry which will reverse the entire entry from the original period and move it to the selected period.  Are you sure you want to continue?", MessageBox.MessageBoxButtons.YesNo) = MessageBox.DialogResults.No Then

                                '        ContinueSave = False
                                '        ComboBoxControl_PostPeriod.SelectedValue = ComboBoxControl_PostPeriod.Tag

                                '    End If

                                '    BypassPostPeriodVerify = True

                                'End If

                                If ContinueSave Then

                                    VendorName = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, AccountPayable.VendorCode).Name

                                    AccountPayableOld = (From AP In AdvantageFramework.Database.Procedures.AccountPayable.Load(DbContext)
                                                         Where AP.ID = AccountPayable.ID AndAlso
                                                               (AP.IsArchived Is Nothing OrElse
                                                               AP.IsArchived = 0) AndAlso
                                                               AP.Modified Is Nothing AndAlso
                                                               AP.Deleted Is Nothing
                                                         Select AP).SingleOrDefault

                                    AccountPayableOld.DbContext = DbContext

                                    If (AccountPayableOld.PostPeriodCode <> AccountPayable.PostPeriodCode AndAlso (_HeaderModifyState = HeaderModifyState.NoRestrictions OrElse
                                                                                                                   _HeaderModifyState = HeaderModifyState.IntercompanyTransactionsExist)) OrElse
                                            (AccountPayableOld.OfficeCode <> AccountPayable.OfficeCode AndAlso _HeaderModifyState = HeaderModifyState.NoRestrictions) Then

                                        PostPeriodChanged = True

                                    End If

                                    If (AccountPayableOld.InvoiceAmount + AccountPayableOld.SalesTaxAmount.GetValueOrDefault(0)) <> (AccountPayable.InvoiceAmount + AccountPayable.SalesTaxAmount.GetValueOrDefault(0)) OrElse
                                            AccountPayableOld.GLACode <> AccountPayable.GLACode Then

                                        If Not BypassPostPeriodVerify AndAlso AdvantageFramework.WinForm.MessageBox.Show("Have you verified Posting Period?", MessageBox.MessageBoxButtons.YesNo) = MessageBox.DialogResults.No Then

                                            AllowContinue = False

                                        End If

                                    End If

                                    If AllowContinue Then

                                        Try

                                            DbContext.Database.Connection.Open()

                                            DbTransaction = DbContext.Database.BeginTransaction

                                            If _HeaderModifyState = HeaderModifyState.PaymentOrPostPeriodClosed Then

                                                If IsHeaderDirty(AccountPayableOld, AccountPayable) Then

                                                    SaveHeader(DbContext, AccountPayableOld, AccountPayable, Not NumericInputControl_VendorCurrencyRate.Visible)

                                                End If

                                            ElseIf (AccountPayableOld.InvoiceAmount + AccountPayableOld.SalesTaxAmount.GetValueOrDefault(0)) <> (AccountPayable.InvoiceAmount + AccountPayable.SalesTaxAmount.GetValueOrDefault(0)) OrElse
                                                    AccountPayableOld.GLACode <> AccountPayable.GLACode OrElse PostPeriodChanged Then

                                                If PostPeriodChanged Then

                                                    GLReversalTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayableOld, VendorName, AccountPayableOld.PostPeriodCode <> AccountPayable.PostPeriodCode, AccountPayableOld.OfficeCode <> AccountPayable.OfficeCode, _GLSourceCode, _BatchDate)

                                                    'Detail 1 (before)
                                                    Remark = "Vendor:" & AccountPayableOld.VendorCode & "-" & VendorName & ", Inv: " & AccountPayableOld.InvoiceNumber & " " & AccountPayableOld.InvoiceDescription & " - MODIFY"

                                                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLReversalTransaction, AccountPayableOld.GLACode,
                                                            AccountPayableOld.InvoiceAmount + AccountPayableOld.ShippingAmount.GetValueOrDefault(0) + AccountPayableOld.SalesTaxAmount.GetValueOrDefault(0), Remark, _GLSourceCode) = False Then

                                                        Throw New Exception("Problem inserting General Ledger Detail.")

                                                    End If

                                                    ReversalSequenceNumber = GeneralLedgerDetail.SequenceNumber

                                                    GLTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayable, VendorName, False, False, _GLSourceCode, _BatchDate)

                                                    ReversalPostPeriodCode = AccountPayableOld.PostPeriodCode

                                                ElseIf (AccountPayableOld.InvoiceAmount + AccountPayableOld.SalesTaxAmount.GetValueOrDefault(0)) <> (AccountPayable.InvoiceAmount + AccountPayable.SalesTaxAmount.GetValueOrDefault(0)) OrElse
                                                        AccountPayableOld.GLACode <> AccountPayable.GLACode Then

                                                    GLTransaction = AdvantageFramework.AccountPayable.WriteGLHeader(DbContext, AccountPayable, VendorName, False, False, _GLSourceCode, _BatchDate)

                                                    'Detail 1 (before)
                                                    Remark = "Vendor:" & AccountPayableOld.VendorCode & "-" & VendorName & ", Inv: " & AccountPayableOld.InvoiceNumber & " " & AccountPayableOld.InvoiceDescription & " - MODIFY"

                                                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayableOld.GLACode,
                                                            AccountPayableOld.InvoiceAmount + AccountPayableOld.ShippingAmount.GetValueOrDefault(0) + AccountPayableOld.SalesTaxAmount.GetValueOrDefault(0), Remark, _GLSourceCode) = False Then

                                                        Throw New Exception("Problem inserting General Ledger Detail.")

                                                    End If

                                                End If

                                                'Detail 2 (after)
                                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & " - MODIFY"

                                                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GLTransaction, AccountPayable.GLACode,
                                                        (AccountPayable.InvoiceAmount + AccountPayable.SalesTaxAmount.GetValueOrDefault(0)) * -1, Remark, _GLSourceCode) = False Then

                                                    Throw New Exception("Problem inserting General Ledger Detail.")

                                                End If

                                                DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE AP_HEADER SET MODIFY_FLAG = 1, MODIFY_DATE =getdate(), MODIFIED_BY = '{0}' WHERE AP_ID = {1} AND (MODIFY_FLAG IS NULL OR MODIFY_FLAG = 0)", _Session.UserCode, AccountPayableOld.ID))

                                                AccountPayableOld.SequenceNumber = 0
                                                AccountPayableOld.GLTransaction = IIf(GLReversalTransaction = -1, GLTransaction, GLReversalTransaction)
                                                AccountPayableOld.GLSequenceNumber = IIf(ReversalSequenceNumber = -1, GeneralLedgerDetail.SequenceNumber, ReversalSequenceNumber)
                                                AccountPayableOld.InvoiceAmount = AccountPayableOld.InvoiceAmount * -1
                                                AccountPayableOld.ShippingAmount = AccountPayableOld.ShippingAmount * -1
                                                AccountPayableOld.SalesTaxAmount = AccountPayableOld.SalesTaxAmount * -1
                                                AccountPayableOld.PostPeriodCode = IIf(GLReversalTransaction = -1, AccountPayable.PostPeriodCode, AccountPayableOld.PostPeriodCode)
                                                AccountPayableOld.Modified = 1
                                                AccountPayableOld.ModifiedDate = Now
                                                AccountPayableOld.ModifiedByUserCode = _Session.UserCode
                                                AccountPayableOld.VendorTaxableAmount = -AccountPayableOld.VendorTaxableAmount
                                                AccountPayableOld.ExchangeAmount = -AccountPayableOld.ExchangeAmount

                                                AccountPayableOld.DoNotApplyCurrencyRequirement = Not NumericInputControl_VendorCurrencyRate.Visible

                                                If AdvantageFramework.Database.Procedures.AccountPayable.Insert(DbContext, AccountPayableOld) = False Then

                                                    Throw New Exception("Failed trying to save data to the AP_HEADER.")

                                                End If

                                                AccountPayable.DbContext = DbContext
                                                AccountPayable.SequenceNumber = 0
                                                AccountPayable.GLTransaction = GLTransaction
                                                AccountPayable.GLSequenceNumber = GeneralLedgerDetail.SequenceNumber
                                                AccountPayable.Modified = Nothing
                                                AccountPayable.ModifiedDate = Nothing
                                                AccountPayable.ModifiedByUserCode = Nothing

                                                If AdvantageFramework.Database.Procedures.AccountPayable.Insert(DbContext, AccountPayable) = False Then

                                                    Throw New Exception("Failed trying to save data to the AP_HEADER.")

                                                End If

                                            ElseIf IsHeaderDirty(AccountPayableOld, AccountPayable) Then

                                                SaveHeader(DbContext, AccountPayableOld, AccountPayable, Not NumericInputControl_VendorCurrencyRate.Visible)

                                            End If

                                            SaveNonClient(DbContext, GLTransaction, AccountPayable, VendorName, PostPeriodChanged, GLReversalTransaction)

                                            SaveProduction(DbContext, GLTransaction, AccountPayable, VendorName, PostPeriodChanged, GLReversalTransaction, If(ReversalPostPeriodCode IsNot Nothing, ReversalPostPeriodCode, AccountPayable.PostPeriodCode))

                                            SaveMagazine(DbContext, GLTransaction, AccountPayable, VendorName, PostPeriodChanged, GLReversalTransaction)

                                            SaveNewspaper(DbContext, GLTransaction, AccountPayable, VendorName, PostPeriodChanged, GLReversalTransaction)

                                            SaveInternet(DbContext, GLTransaction, AccountPayable, VendorName, PostPeriodChanged, GLReversalTransaction)

                                            SaveOutOfHome(DbContext, GLTransaction, AccountPayable, VendorName, PostPeriodChanged, GLReversalTransaction)

                                            SaveRadio(DbContext, GLTransaction, AccountPayable, VendorName, PostPeriodChanged, GLReversalTransaction)

                                            SaveTV(DbContext, GLTransaction, AccountPayable, VendorName, PostPeriodChanged, GLReversalTransaction)

                                            DbContext.Database.ExecuteSqlCommand(String.Format("exec dbo.advsp_ap_remove_orphaned_media_approvals {0}", AccountPayable.ID))

                                            If GLReversalTransaction <> -1 Then

                                                IsBalanced = DbContext.Database.SqlQuery(Of Integer)(String.Format("exec [advsp_ap_invoice_balanced] {0}, {1}", AccountPayable.ID, GLReversalTransaction)).FirstOrDefault

                                                If IsBalanced <> 1 Then

                                                    Throw New Exception("Cannot save.  Reversal GL entries are out of balance.")

                                                End If

                                            End If

                                            If GLTransaction <> -1 Then

                                                IsBalanced = DbContext.Database.SqlQuery(Of Integer)(String.Format("exec [advsp_ap_invoice_balanced] {0}, {1}", AccountPayable.ID, GLTransaction)).FirstOrDefault

                                                If IsBalanced = 1 Then

                                                    DbTransaction.Commit()

                                                Else

                                                    Throw New Exception("Cannot save.  Invoice out of balance.")

                                                End If

                                            Else

                                                DbTransaction.Commit()

                                            End If

                                            Saved = True

                                            VendorCode = AccountPayable.VendorCode

                                            RefreshInvoice(AccountPayable.ID, AccountPayable.SequenceNumber, _BatchDate)

                                            RaiseEvent Saved(AccountPayable)

                                        Catch ex As Exception
                                            If Not Saved Then
                                                DbTransaction.Rollback()
                                                ErrorMessage = "Failed trying to save data to the database. Please contact software support."
                                                ErrorMessage += vbCrLf & ex.Message
                                                'ErrorMessage += vbCrLf & vbCrLf & ex.StackTrace
                                            End If
                                        Finally

                                            If DbContext.Database.Connection.State = ConnectionState.Open Then

                                                DbContext.Database.Connection.Close()

                                            End If

                                        End Try

                                    End If

                                End If

                            End If

                        End If

                    End Using

                End If

                If ErrorMessage <> "" Then

                    Throw New System.Exception(ErrorMessage)

                End If

            Else

                AccountPayableID = _ID
                SequenceNumber = _SequenceNumber

                AdvantageFramework.WinForm.MessageBox.Show(ErrorMessage, , "Invoice Will Refresh")

                RefreshInvoice(AccountPayableID, SequenceNumber, _BatchDate)

            End If

            Save = Saved

        End Function
        Public Function Insert(ByRef VendorCode As String, ByRef AccountPayableID As Integer, ByRef SequenceNumber As Short, ByVal BatchDate As Date) As Boolean

            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing
            Dim Inserted As Boolean = False
            Dim ErrorMessage As String = Nothing
            Dim AccountPayableGLDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail) = Nothing
            Dim AccountPayableInternetDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) = Nothing
            Dim AccountPayableMagazineDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) = Nothing
            Dim AccountPayableNewspaperDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) = Nothing
            Dim AccountPayableProductionDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail) = Nothing
            Dim AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim RadioBroadcastOrderDetailViewList As Generic.List(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView) = Nothing
            Dim TVBroadcastOrderDetailViewList As Generic.List(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView) = Nothing
            Dim AccountPayableRadioBroadcastDetail As AdvantageFramework.Database.Entities.AccountPayableRadioBroadcastDetail = Nothing
            Dim AccountPayableTVBroadcastDetail As AdvantageFramework.Database.Entities.AccountPayableTVBroadcastDetail = Nothing
            Dim IsValid As Boolean = True
            Dim ContinueInsert As Boolean = True

            If _CanUserAdd AndAlso ValidateControl(ErrorMessage) AndAlso OkayToSave(ErrorMessage) Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    AccountPayable = FillObject(DbContext, True)

                    If AccountPayable IsNot Nothing Then

                        AccountPayable.DoNotApplyCurrencyRequirement = Not NumericInputControl_VendorCurrencyRate.Visible

                        ErrorMessage = AccountPayable.ValidateEntity(IsValid)

                        If AdvantageFramework.AccountPayable.IsDateOutsidePostPeriod(DbContext, AccountPayable.InvoiceDate, AccountPayable.PostPeriodCode) Then

                            If AdvantageFramework.WinForm.MessageBox.Show("The invoice date is outside of normal range based on the posting period selected, are you sure you want to continue?", MessageBox.MessageBoxButtons.YesNo) = MessageBox.DialogResults.No Then

                                ContinueInsert = False
                                DateTimePickerControl_InvoiceDate.Focus()

                            End If

                        End If

                        If IsValid AndAlso ContinueInsert Then

                            AccountPayableGLDistributionDetailList = DataGridViewNonClient_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)().ToList
                            AccountPayableInternetDistributionDetailList = DataGridViewInternet_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)().ToList
                            AccountPayableMagazineDistributionDetailList = DataGridViewMagazine_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)().ToList
                            AccountPayableNewspaperDistributionDetailList = DataGridViewNewspaper_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)().ToList
                            AccountPayableOutOfHomeDistributionDetailList = DataGridViewOutOfHome_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)().ToList
                            AccountPayableProductionDistributionDetailList = DataGridViewProduction_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)().ToList
                            AccountPayableRadioDistributionDetailList = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)().ToList
                            AccountPayableTVDistributionDetailList = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)().ToList
                            RadioBroadcastOrderDetailViewList = DataGridViewRadioDetails_BroadcastDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView).ToList
                            TVBroadcastOrderDetailViewList = DataGridViewTVDetails_BroadcastDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView).ToList

                            Inserted = AdvantageFramework.AccountPayable.CreateAccountPayable(DbContext, AccountPayable,
                                                                                              AccountPayableGLDistributionDetailList,
                                                                                              AccountPayableInternetDistributionDetailList,
                                                                                              AccountPayableMagazineDistributionDetailList,
                                                                                              AccountPayableNewspaperDistributionDetailList,
                                                                                              AccountPayableOutOfHomeDistributionDetailList,
                                                                                              AccountPayableProductionDistributionDetailList,
                                                                                              AccountPayableRadioDistributionDetailList,
                                                                                              RadioBroadcastOrderDetailViewList,
                                                                                              AccountPayableTVDistributionDetailList,
                                                                                              TVBroadcastOrderDetailViewList,
                                                                                              _GLSourceCode,
                                                                                              BatchDate, VendorCode, AccountPayableID, SequenceNumber, ErrorMessage)

                        End If

                    End If

                End Using

            End If

            If ErrorMessage <> "" Then

                Throw New System.Exception(ErrorMessage)

            End If

            Insert = Inserted

        End Function
        Public Function Delete(ByRef VendorCode As String) As Boolean

            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing
            Dim DbTransaction As System.Data.Entity.DbContextTransaction = Nothing
            Dim VendorName As String = Nothing
            Dim GeneralLedger As AdvantageFramework.Database.Entities.GeneralLedger = Nothing
            Dim GeneralLedgerDetail As AdvantageFramework.Database.Entities.GeneralLedgerDetail = Nothing
            Dim AccountPayableGLDistributionList As Generic.List(Of AdvantageFramework.Database.Entities.AccountPayableGLDistribution) = Nothing
            Dim AccountPayableProductionDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail) = Nothing
            Dim AccountPayableMagazineDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail) = Nothing
            Dim AccountPayableNewspaperDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail) = Nothing
            Dim AccountPayableInternetDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail) = Nothing
            Dim AccountPayableOutOfHomeDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail) = Nothing
            Dim AccountPayableRadioDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim AccountPayableTVDistributionDetailList As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim APSequenceNumber As Integer = Nothing
            Dim OriginalDistributionAmount As Decimal = Nothing
            Dim ErrorMessage As String = Nothing
            Dim Deleted As Boolean = False
            Dim Remark As String = Nothing
            Dim EntityKey As Collection = Nothing
            Dim OfficeCodeList As Generic.List(Of String) = Nothing
            Dim DueFromSeqNo As Collection = Nothing
            Dim DueToSeqNo As Collection = Nothing
            Dim PostPeriodCode As String = Nothing
            Dim AgencyInvoiceTaxFlag As Boolean = False
            Dim IsBalanced As Integer = -1
            Dim CurrentDateTime As Date = Nothing
            Dim AccountPayableNew As AdvantageFramework.Database.Entities.AccountPayable = Nothing

            CurrentDateTime = Now

            If OkayToDelete(PostPeriodCode) Then

                EntityKey = New Collection
                OfficeCodeList = New Generic.List(Of String)
                DueFromSeqNo = New Collection
                DueToSeqNo = New Collection

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    AccountPayable = AdvantageFramework.Database.Procedures.AccountPayable.LoadByAccountPayableIDAndSequenceNumber(DbContext, _ID, _SequenceNumber)

                    If AccountPayable IsNot Nothing Then

                        Try

                            DbContext.Database.Connection.Open()

                            DbTransaction = DbContext.Database.BeginTransaction

                            VendorName = AdvantageFramework.Database.Procedures.Vendor.LoadByVendorCode(DbContext, AccountPayable.VendorCode).Name

                            If AdvantageFramework.GeneralLedger.InsertGeneralLedger(GeneralLedger, DbContext, PostPeriodCode, _Session.UserCode,
                                    "VN:" & AccountPayable.VendorCode & "-" & VendorName & ",Inv:" & AccountPayable.InvoiceNumber & "-DELETE", _GLSourceCode, _BatchDate) = False Then

                                Throw New Exception("Problem inserting General Ledger.")

                            End If

                            Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & " - DELETE"

                            If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GeneralLedger.Transaction, AccountPayable.GLACode,
                                    AccountPayable.InvoiceAmount + AccountPayable.ShippingAmount + AccountPayable.SalesTaxAmount, Remark, _GLSourceCode) = False Then

                                Throw New Exception("Problem inserting General Ledger Detail.")

                            End If

                            APSequenceNumber = GeneralLedgerDetail.SequenceNumber

                            AccountPayableGLDistributionList = (From Entity In AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.Load(DbContext)
                                                                Where Entity.AccountPayableID = AccountPayable.ID AndAlso
                                                                      (Entity.ModifyDelete Is Nothing OrElse
                                                                       Entity.ModifyDelete = 0)
                                                                Select Entity).ToList

                            For Each AccountPayableGLDistribution In AccountPayableGLDistributionList

                                OriginalDistributionAmount = AccountPayableGLDistribution.Amount

                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayableGLDistribution.Comment

                                If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GeneralLedger.Transaction, AccountPayableGLDistribution.GLACode,
                                        OriginalDistributionAmount * -1, Remark, _GLSourceCode) = False Then

                                    Throw New Exception("Problem inserting General Ledger Detail.")

                                End If

                                AccountPayableGLDistribution.Amount = AccountPayableGLDistribution.Amount * -1
                                AccountPayableGLDistribution.GLTransaction = GeneralLedger.Transaction
                                AccountPayableGLDistribution.GLSequenceNumber = GeneralLedgerDetail.SequenceNumber
                                AccountPayableGLDistribution.PostPeriodCode = PostPeriodCode
                                AccountPayableGLDistribution.ModifyDelete = 1
                                AccountPayableGLDistribution.ModifyDate = CurrentDateTime
                                AccountPayableGLDistribution.ModifiedBy = _Session.UserCode
                                AccountPayableGLDistribution.IsDeleted = 1
                                If AdvantageFramework.Database.Procedures.AccountPayableGLDistribution.Insert(DbContext, AccountPayableGLDistribution) = False Then

                                    Throw New Exception("Problem inserting AP GL Dist.")

                                End If

                                If AccountPayableGLDistribution.PONumber IsNot Nothing AndAlso AccountPayableGLDistribution.PODetailLineNumber IsNot Nothing Then

                                    DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.PURCHASE_ORDER SET PO_COMPLETE=NULL WHERE PO_NUMBER={0}", AccountPayableGLDistribution.PONumber))
                                    DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.PURCHASE_ORDER_DET SET PO_COMPLETE=NULL WHERE PO_NUMBER={0}", AccountPayableGLDistribution.PONumber))

                                End If

                                DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_GL_DIST SET MODIFY_DELETE=1, DELETE_FLAG=1, MODIFIED_BY='{1}', MODIFY_DATE=getdate() WHERE AP_ID={0}", AccountPayable.ID, _Session.UserCode))


                                If AccountPayableGLDistribution.GLACodeDueFrom IsNot Nothing Then

                                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayableGLDistribution.Comment

                                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GeneralLedger.Transaction, AccountPayableGLDistribution.GLACodeDueFrom,
                                            OriginalDistributionAmount * -1, Remark, _GLSourceCode) = False Then

                                        Throw New Exception("Problem inserting General Ledger Detail.")

                                    End If

                                End If

                                If AccountPayableGLDistribution.GLACodeDueTo IsNot Nothing Then

                                    Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AccountPayable.InvoiceNumber & " " & AccountPayableGLDistribution.Comment

                                    If AdvantageFramework.GeneralLedger.InsertGeneralLedgerDetail(GeneralLedgerDetail, DbContext, GeneralLedger.Transaction, AccountPayableGLDistribution.GLACodeDueTo,
                                            OriginalDistributionAmount, Remark, _GLSourceCode) = False Then

                                        Throw New Exception("Problem inserting General Ledger Detail.")

                                    End If

                                End If

                            Next


                            'Delete AP_PRODUCTION
                            AccountPayableProductionDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail)

                            AccountPayableProductionDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableProduction.LoadActiveByAccountPayableID(DbContext, AccountPayable.ID).ToList
                                                                                    Select New AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail(DbContext, Entity, _Session))

                            AgencyInvoiceTaxFlag = AdvantageFramework.Database.Procedures.Agency.InvoiceTaxFlag(DbContext)

                            For Each AccountPayableProductionDistributionDetail In AccountPayableProductionDistributionDetailList

                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Job: " & AccountPayableProductionDistributionDetail.JobNumber.ToString.PadLeft(6, "0") & "-" & AccountPayableProductionDistributionDetail.JobComponentNumber.ToString.PadLeft(3, "0") & " - DELETE [PR]"

                                AdvantageFramework.AccountPayable.ReverseProduction(DbContext, False, AccountPayableProductionDistributionDetail.AccountPayableProduction, GeneralLedger.Transaction, Remark, AccountPayable, EntityKey, AccountPayableProductionDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, True, PostPeriodCode, False, _GLSourceCode, False)

                                If AccountPayableProductionDistributionDetail.PONumber IsNot Nothing AndAlso AccountPayableProductionDistributionDetail.PODetailLineNumber IsNot Nothing Then

                                    DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.PURCHASE_ORDER SET PO_COMPLETE=NULL WHERE PO_NUMBER={0}", AccountPayableProductionDistributionDetail.PONumber))
                                    DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.PURCHASE_ORDER_DET SET PO_COMPLETE=NULL WHERE PO_NUMBER={0}", AccountPayableProductionDistributionDetail.PONumber))

                                End If

                            Next

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_PRODUCTION SET MODIFY_DELETE=1, DELETE_FLAG=1, MODIFIED_BY='{1}', MODIFY_DATE=getdate() WHERE AP_ID={0}", AccountPayable.ID, _Session.UserCode))

                            EntityKey.Clear()
                            OfficeCodeList.Clear()
                            DueFromSeqNo.Clear()
                            DueToSeqNo.Clear()


                            'Delete AP_MAGAZINE
                            AccountPayableMagazineDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)

                            AccountPayableMagazineDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableMagazine.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                                  Select New AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail(DbContext, Entity, True))

                            For Each AccountPayableMagazineDistributionDetail In AccountPayableMagazineDistributionDetailList

                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableMagazineDistributionDetail.OrderNumber.ToString.PadLeft(6, "0") & " - DELETE [MA]"

                                ReverseMagazine(DbContext, AccountPayableMagazineDistributionDetail, AccountPayableMagazineDistributionDetail.AccountPayableMagazine, GeneralLedger.Transaction, Remark, AccountPayable, EntityKey, AccountPayableMagazineDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, True, PostPeriodCode, False)

                            Next

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_MAGAZINE SET MODIFY_DELETE=1, DELETE_FLAG=1, MODIFIED_BY='{1}', MODIFY_DATE=getdate() WHERE AP_ID={0}", AccountPayable.ID, _Session.UserCode))

                            EntityKey.Clear()
                            OfficeCodeList.Clear()
                            DueFromSeqNo.Clear()
                            DueToSeqNo.Clear()


                            'Delete AP_NEWSPAPER
                            AccountPayableNewspaperDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)

                            AccountPayableNewspaperDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableNewspaper.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                                   Select New AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail(DbContext, Entity, True))

                            For Each AccountPayableNewspaperDistributionDetail In AccountPayableNewspaperDistributionDetailList

                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableNewspaperDistributionDetail.OrderNumber.ToString.PadLeft(6, "0") & " - DELETE [NP]"

                                ReverseNewspaper(DbContext, AccountPayableNewspaperDistributionDetail, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper, GeneralLedger.Transaction, Remark, AccountPayable, EntityKey, AccountPayableNewspaperDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, True, PostPeriodCode, False)

                            Next

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_NEWSPAPER SET MODIFY_DELETE=1, DELETE_FLAG=1, MODIFIED_BY='{1}', MODIFY_DATE=getdate() WHERE AP_ID={0}", AccountPayable.ID, _Session.UserCode))

                            EntityKey.Clear()
                            OfficeCodeList.Clear()
                            DueFromSeqNo.Clear()
                            DueToSeqNo.Clear()


                            'Delete AP_INTERNET
                            AccountPayableInternetDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)

                            AccountPayableInternetDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableInternet.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                                  Select New AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail(DbContext, Entity, True))

                            For Each AccountPayableInternetDistributionDetail In AccountPayableInternetDistributionDetailList

                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableInternetDistributionDetail.InternetOrderNumber.ToString.PadLeft(6, "0") & " - DELETE [IN]"

                                ReverseInternet(DbContext, AccountPayableInternetDistributionDetail, AccountPayableInternetDistributionDetail.AccountPayableInternet, GeneralLedger.Transaction, Remark, AccountPayable, EntityKey, AccountPayableInternetDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, True, PostPeriodCode, False)

                            Next

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_INTERNET SET MODIFY_DELETE=1, DELETE_FLAG=1, MODIFIED_BY='{1}', MODIFY_DATE=getdate() WHERE AP_ID={0}", AccountPayable.ID, _Session.UserCode))

                            EntityKey.Clear()
                            OfficeCodeList.Clear()
                            DueFromSeqNo.Clear()
                            DueToSeqNo.Clear()


                            'Delete AP_OUTDOOR
                            AccountPayableOutOfHomeDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)

                            AccountPayableOutOfHomeDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableOutOfHome.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                                   Select New AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail(DbContext, Entity, True))

                            For Each AccountPayableOutOfHomeDistributionDetail In AccountPayableOutOfHomeDistributionDetailList

                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableOutOfHomeDistributionDetail.OutdoorOrderNumber.ToString.PadLeft(6, "0") & " - DELETE [OD]"

                                ReverseOutOfHome(DbContext, AccountPayableOutOfHomeDistributionDetail, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome, GeneralLedger.Transaction, Remark, AccountPayable, EntityKey, AccountPayableOutOfHomeDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, True, PostPeriodCode, False)

                            Next

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_OUTDOOR SET MODIFY_DELETE=1, DELETE_FLAG=1, MODIFIED_BY='{1}', MODIFY_DATE=getdate() WHERE AP_ID={0}", AccountPayable.ID, _Session.UserCode))

                            EntityKey.Clear()
                            OfficeCodeList.Clear()
                            DueFromSeqNo.Clear()
                            DueToSeqNo.Clear()


                            'Delete AP_RADIO
                            AccountPayableRadioDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

                            AccountPayableRadioDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableRadio.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                               Select New AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail(DbContext, Entity, True))

                            For Each AccountPayableRadioDistributionDetail In AccountPayableRadioDistributionDetailList

                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableRadioDistributionDetail.OrderNumber.ToString.PadLeft(6, "0") & " - DELETE [RA]"

                                ReverseRadio(DbContext, AccountPayableRadioDistributionDetail, AccountPayableRadioDistributionDetail.AccountPayableRadio, GeneralLedger.Transaction, Remark, AccountPayable, EntityKey, AccountPayableRadioDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, True, PostPeriodCode, False)

                            Next

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_RADIO SET MODIFY_DELETE=1, DELETE_FLAG=1, MODIFIED_BY='{1}', MODIFY_DATE=getdate() WHERE AP_ID={0}", AccountPayable.ID, _Session.UserCode))

                            EntityKey.Clear()
                            OfficeCodeList.Clear()
                            DueFromSeqNo.Clear()
                            DueToSeqNo.Clear()

                            'Delete AP_RADIO_BROADCAST_DTL
                            DbContext.Database.ExecuteSqlCommand(String.Format("DELETE FROM dbo.AP_RADIO_BROADCAST_DTL WHERE AP_ID = {0}", AccountPayable.ID))

                            'Delete AP_TV
                            AccountPayableTVDistributionDetailList = New Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

                            AccountPayableTVDistributionDetailList.AddRange(From Entity In AdvantageFramework.Database.Procedures.AccountPayableTV.LoadActiveByAccountPayableID(DbContext, _ID).ToList
                                                                            Select New AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail(DbContext, Entity, True))

                            For Each AccountPayableTVDistributionDetail In AccountPayableTVDistributionDetailList

                                Remark = "Vendor:" & AccountPayable.VendorCode & "-" & VendorName & ", Inv: " & AdvantageFramework.AccountPayable.FormatInvoice(AccountPayable) & ", Order: " & AccountPayableTVDistributionDetail.OrderNumber.ToString.PadLeft(6, "0") & " - DELETE [TV]"

                                ReverseTV(DbContext, AccountPayableTVDistributionDetail, AccountPayableTVDistributionDetail.AccountPayableTV, GeneralLedger.Transaction, Remark, AccountPayable, EntityKey, AccountPayableTVDistributionDetailList, OfficeCodeList, DueFromSeqNo, DueToSeqNo, VendorName, True, PostPeriodCode, False)

                            Next

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_TV SET MODIFY_DELETE=1, DELETE_FLAG=1, MODIFIED_BY='{1}', MODIFY_DATE=getdate() WHERE AP_ID={0}", AccountPayable.ID, _Session.UserCode))

                            'Delete AP_TV_BROADCAST_DTL
                            DbContext.Database.ExecuteSqlCommand(String.Format("DELETE FROM dbo.AP_TV_BROADCAST_DTL WHERE AP_ID = {0}", AccountPayable.ID))

                            'Delete AP_HEADER
                            AccountPayableNew = AccountPayable.DuplicateEntity

                            AccountPayableNew.ID = _ID
                            AccountPayableNew.SequenceNumber = _SequenceNumber

                            AccountPayableNew.InvoiceAmount = AccountPayableNew.InvoiceAmount * -1
                            AccountPayableNew.ShippingAmount = AccountPayableNew.ShippingAmount * -1
                            AccountPayableNew.SalesTaxAmount = AccountPayableNew.SalesTaxAmount * -1
                            AccountPayableNew.PostPeriodCode = PostPeriodCode
                            AccountPayableNew.GLTransaction = GeneralLedger.Transaction
                            AccountPayableNew.GLSequenceNumber = APSequenceNumber
                            AccountPayableNew.ModifiedByUserCode = _Session.UserCode
                            AccountPayableNew.ModifiedDate = CurrentDateTime
                            AccountPayableNew.VendorTaxableAmount = AccountPayableNew.VendorTaxableAmount * -1

                            If AdvantageFramework.Database.Procedures.AccountPayable.Insert(DbContext, AccountPayableNew) = False Then

                                Throw New Exception("Problem inserting AP Header.")

                            End If

                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_HEADER set DELETE_FLAG=1, DELETE_DATE=getdate(), DELETED_BY='{0}', MODIFY_DATE=getdate(), MODIFIED_BY='{0}' WHERE AP_ID={1} AND DELETE_FLAG IS NULL", _Session.UserCode, AccountPayable.ID))
                            DbContext.Database.ExecuteSqlCommand(String.Format("UPDATE dbo.AP_HEADER set DELETE_FLAG=1, DELETE_DATE=getdate(), DELETED_BY='{0}' WHERE AP_ID={1}", _Session.UserCode, AccountPayable.ID))

                            DbContext.Database.ExecuteSqlCommand(String.Format("exec dbo.advsp_ap_remove_orphaned_media_approvals {0}", AccountPayable.ID))

                            IsBalanced = DbContext.Database.SqlQuery(Of Integer)(String.Format("exec [advsp_ap_invoice_balanced_for_delete] {0}, {1}", AccountPayable.ID, GeneralLedger.Transaction)).First

                            If IsBalanced = 1 Then

                                DbTransaction.Commit()
                                Deleted = True

                                If _IsQuickbooksEnabled AndAlso _IsLinkedInQuickbooks Then

                                    Try

                                        Me.DeleteBillFromQuickbooks()

                                    Catch ex As Exception

                                    End Try

                                End If

                            Else

                                Throw New Exception("Cannot delete.  Invoice out of balance.")

                            End If

                            VendorCode = AccountPayable.VendorCode

                        Catch ex As Exception
                            DbTransaction.Rollback()
                            ErrorMessage = "Failed trying to delete from the database. Please contact software support."
                        Finally

                            If DbContext.Database.Connection.State = ConnectionState.Open Then

                                DbContext.Database.Connection.Close()

                            End If

                        End Try

                        If ErrorMessage <> "" Then

                            Throw New System.Exception(ErrorMessage)

                        End If

                    End If

                End Using

            End If

            Delete = Deleted

        End Function
        Public Sub SetBatchDate(ByVal BatchDate As Date)

            _BatchDate = BatchDate

        End Sub
        Public Sub SetVendor(ByVal VendorCode As String, ByVal BatchDate As Date)

            _IsLoading = True

            _BatchDate = BatchDate

            _IsSetVendorMode = True

            SearchableComboBoxControl_Vendor.SelectedValue = VendorCode

            TextBoxControl_InvoiceNumber.Visible = False

            SearchableComboBoxControl_InvoiceNumber.Visible = True

            EnableVendorSearchControls(False)

            _IsLoading = False

            AdvantageFramework.WinForm.Presentation.Controls.ClearUserEntryChangedSetting(Me)

        End Sub
        Public Sub UploadDocument()

            DocumentManagerControlDocuments_APDocuments.UploadNewDocument()

        End Sub
        Public Sub SendASPUploadEmail()

            DocumentManagerControlDocuments_APDocuments.SendASPUploadEmail()

        End Sub
        Public Sub DeleteDocument()

            DocumentManagerControlDocuments_APDocuments.DeleteSelectedDocument()

        End Sub
        Public Sub DownloadDocument()

            DocumentManagerControlDocuments_APDocuments.DownloadSelectedDocument()

        End Sub
        Public Sub NewAlertAssignment()

            AdvantageFramework.Desktop.Presentation.AlertAssignmentEditDialog.ShowFormDialog(SearchableComboBoxControl_Vendor.SelectedValue, _ID, _SequenceNumber, SearchableComboBoxControl_InvoiceNumber.Text, DateTimePickerControl_InvoiceDate.Value, _DefaultTemplateID, _DefaultStateID)

        End Sub
        Public Sub ViewAlerts()

            AdvantageFramework.Desktop.Presentation.LinkedAlertsSetupDialog.ShowFormDialog(_ID, _SequenceNumber)

        End Sub
        Public Function ValidateInvoiceNumber() As Boolean

            'objects
            Dim VendorCode As String = Nothing
            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing
            Dim IsValid As Boolean = True

            If SearchableComboBoxControl_Vendor.HasASelectedValue AndAlso _ID = 0 Then

                TextBoxControl_InvoiceNumber.Text = TextBoxControl_InvoiceNumber.Text.Trim()

                Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    VendorCode = SearchableComboBoxControl_Vendor.GetSelectedValue

                    Try

                        AccountPayable = (From Entity In AdvantageFramework.Database.Procedures.AccountPayable.Load(DbContext)
                                          Where Entity.VendorCode = VendorCode AndAlso
                                                Entity.InvoiceNumber.ToUpper = TextBoxControl_InvoiceNumber.Text.ToUpper).FirstOrDefault

                    Catch ex As Exception
                        AccountPayable = Nothing
                    End Try

                    If AccountPayable IsNot Nothing Then

                        If AccountPayable.Deleted.GetValueOrDefault(0) = 1 Then

                            AdvantageFramework.WinForm.MessageBox.Show("Invoice on file as deleted.")

                        Else

                            AdvantageFramework.WinForm.MessageBox.Show("Invoice on file.")

                        End If

                        TextBoxControl_InvoiceNumber.Text = ""

                        IsValid = False

                    End If

                End Using

            End If

            ValidateInvoiceNumber = IsValid

        End Function
        Public Sub SelectDocumentsTab()

            TabControlControl_APDetails.SelectedTab = Me.TabItemAPDetails_DocumentsTab

            LoadAPDetails(TabControlControl_APDetails.SelectedTab)

        End Sub
        Public Sub FilterDocuments(ByVal DocumentSubLevel As AdvantageFramework.Database.Entities.DocumentSubLevel)

            _DocumentSubLevel = DocumentSubLevel

            LoadExpenseReportDocuments()

        End Sub
        Public Sub RefreshControl()

            If _Session IsNot Nothing Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    Using DataContext = New AdvantageFramework.Database.DataContext(_Session.ConnectionString, _Session.UserCode)

                        DbContext.Database.Connection.Open()

                        RefreshControl(DbContext, DataContext)

                        DbContext.Database.Connection.Close()

                    End Using

                End Using

            End If

        End Sub
        Public Sub RefreshControl(ByVal DbContext As AdvantageFramework.Database.DbContext, ByVal DataContext As AdvantageFramework.Database.DataContext)

            'objects
            Dim VendorCategories As IEnumerable(Of String) = Nothing

            VendorCategories = {"I", "M", "N", "O", "R", "T"}

            _IsMultiCurrencyEnabled = AdvantageFramework.Database.Procedures.Agency.IsMultiCurrencyEnabled(DbContext)

            SearchableComboBoxControl_Vendor.DataSource = (From Vendor In AdvantageFramework.Database.Procedures.Vendor.LoadAllActiveWithOfficeLimits(DbContext, _Session)
                                                           Where Not _CanUserCustom1 OrElse
                                                                 (_CanUserCustom1 AndAlso
                                                                  (VendorCategories.Contains(Vendor.VendorCategory) OrElse
                                                                   Vendor.InternetCategory = 1 OrElse Vendor.MagazineCategory = 1 OrElse Vendor.NewspaperCategory = 1 OrElse
                                                                   Vendor.OutOfHomeCategory = 1 OrElse Vendor.RadioCategory = 1 OrElse Vendor.TVCategory = 1))
                                                           Select Vendor)

            If SearchableComboBoxControl_Vendor.DataSource.Count = 0 Then

                SearchableComboBoxControl_Vendor.DataSource = Nothing

            End If

            If AdvantageFramework.Database.Procedures.Agency.APFlagVendor1099(DbContext) = 0 Then

                CheckBoxControl_1099Invoice.Visible = False

            End If

            If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) OrElse AdvantageFramework.Database.Procedures.Agency.IsInterCompanyTransactionsEnabled(DbContext) Then

                ComboBoxControl_Office.Visible = True
                LabelControl_Office.Visible = True
                ComboBoxControl_Office.SetRequired(True)
                ComboBoxControl_Office.DataSource = AdvantageFramework.Database.Procedures.Office.LoadAllActiveWithOfficeLimits(DbContext, _Session)
                ComboBoxControl_Office.AddInactiveItemsOnSelectedValue = True

            Else

                ComboBoxControl_Office.Visible = False
                LabelControl_Office.Visible = False
                ComboBoxControl_Office.SetRequired(False)
                ComboBoxControl_APAccount.DataSource = (From Entity In AdvantageFramework.Database.Procedures.GeneralLedgerAccount.LoadAllActiveWithOfficeLimits(DbContext, _Session, True, True)
                                                        Where Entity.Type = "5").ToList

            End If

            If AdvantageFramework.Database.Procedures.Agency.APLockGLAccountCode(DbContext) = 1 Then

                ComboBoxControl_APAccount.ReadOnly = True
                ComboBoxControl_APAccount.Tag = "READONLY"

            Else

                ComboBoxControl_APAccount.Enabled = True

            End If

            SearchableComboBoxControl_CurrencyCode.DataSource = AdvantageFramework.Database.Procedures.CurrencyCode.LoadAllActive(DbContext)
            ComboBoxControl_Terms.DataSource = AdvantageFramework.Database.Procedures.VendorTerm.LoadAllActive(DbContext)
            ComboBoxControl_PostPeriod.DataSource = AdvantageFramework.Database.Procedures.PostPeriod.LoadAllActiveAPPostPeriods(DbContext)
            'ComboBoxControl_PostPeriodForMod.DataSource = AdvantageFramework.Database.Procedures.PostPeriod.LoadAllActiveAPPostPeriods(DbContext)

            SearchableComboBoxControl_VendorTaxCode.DataSource = AdvantageFramework.Database.Procedures.VendorServiceTax.LoadAllActive(DataContext)

            If Not Agency.GetOptionServiceTaxEnabled(DataContext) Then

                LabelControl_VendorTaxCode.Visible = False
                SearchableComboBoxControl_VendorTaxCode.Visible = False
                CheckBoxControl_VendorTaxEnabled.Visible = False
                LabelControl_VendorTaxableAmount.Visible = False
                NumericInputControl_VendorTaxableAmount.Visible = False

                ComboBoxControl_Office.Width = 352
                ComboBoxControl_Terms.Width = 352
                ComboBoxControl_APAccount.Width = 352

            End If

            If _IsMultiCurrencyEnabled Then

                _CurrencyCodeHome = AdvantageFramework.Database.Procedures.Agency.GetHomeCurrency(DbContext)

                TabControlControl_InvoiceDetails.Height = 178

                LabelControl_HomeCurrency.Text = "Total " & _CurrencyCodeHome & ":"

            Else

                TabControlControl_InvoiceDetails.Height = 204

            End If

            LabelControl_Currency.Visible = _IsMultiCurrencyEnabled
            SearchableComboBoxControl_CurrencyCode.Visible = _IsMultiCurrencyEnabled
            NumericInputControl_VendorCurrencyRate.Visible = _IsMultiCurrencyEnabled
            NumericInputControl_VendorCurrencyRate.Properties.AllowNullInput = If(_IsMultiCurrencyEnabled, DevExpress.Utils.DefaultBoolean.False, DevExpress.Utils.DefaultBoolean.True)

            LabelControl_HomeCurrency.Visible = _IsMultiCurrencyEnabled
            NumericInputControl_HomeCurrencyAmount.Visible = _IsMultiCurrencyEnabled
            LabelControl_ExchangeAmount.Visible = _IsMultiCurrencyEnabled
            NumericInputControl_ExchangeAmount.Visible = _IsMultiCurrencyEnabled
            LabelDistribution_ForeignTotal.Visible = _IsMultiCurrencyEnabled
            NumericInputDistribution_ForeignTotal.Visible = _IsMultiCurrencyEnabled

        End Sub
        Public Sub DeleteRadioDetail()

            'objects
            Dim AccountPayableRadioBroadcastDetail As AdvantageFramework.Database.Entities.AccountPayableRadioBroadcastDetail = Nothing

            If DataGridViewRadioDetails_BroadcastDetails.HasASelectedRow Then

                If AdvantageFramework.Navigation.ShowMessageBox("Are you sure you want to delete?", MessageBox.MessageBoxButtons.YesNo) = MessageBox.DialogResults.Yes Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each BroadcastOrderDetailView In DataGridViewRadioDetails_BroadcastDetails.GetAllSelectedRowsDataBoundItems.OfType(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView).ToList

                            If BroadcastOrderDetailView.IsEntityBeingAdded = False Then

                                AccountPayableRadioBroadcastDetail = AdvantageFramework.Database.Procedures.AccountPayableRadioBroadcastDetail.LoadByID(DbContext, BroadcastOrderDetailView.DetailID)

                                If AccountPayableRadioBroadcastDetail IsNot Nothing Then

                                    DbContext.DeleteEntityObject(AccountPayableRadioBroadcastDetail)

                                End If

                            End If

                            DataGridViewRadioDetails_BroadcastDetails.CurrentView.DeleteFromDataSource(BroadcastOrderDetailView)

                        Next

                        DbContext.SaveChanges()

                    End Using

                End If

            End If

        End Sub
        Public Sub CancelAddNewRadioDetail()

            DataGridViewRadioDetails_BroadcastDetails.CancelNewItemRow()

        End Sub
        Public Sub DeleteTVDetail()

            'objects
            Dim AccountPayableTVBroadcastDetail As AdvantageFramework.Database.Entities.AccountPayableTVBroadcastDetail = Nothing

            If DataGridViewTVDetails_BroadcastDetails.HasASelectedRow Then

                If AdvantageFramework.Navigation.ShowMessageBox("Are you sure you want to delete?", MessageBox.MessageBoxButtons.YesNo) = MessageBox.DialogResults.Yes Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        For Each BroadcastOrderDetailView In DataGridViewTVDetails_BroadcastDetails.GetAllSelectedRowsDataBoundItems.OfType(Of AdvantageFramework.Database.Views.BroadcastOrderDetailView).ToList

                            If BroadcastOrderDetailView.IsEntityBeingAdded = False Then

                                AccountPayableTVBroadcastDetail = AdvantageFramework.Database.Procedures.AccountPayableTVBroadcastDetail.LoadByID(DbContext, BroadcastOrderDetailView.DetailID)

                                If AccountPayableTVBroadcastDetail IsNot Nothing Then

                                    DbContext.DeleteEntityObject(AccountPayableTVBroadcastDetail)

                                End If

                            End If

                            DataGridViewTVDetails_BroadcastDetails.CurrentView.DeleteFromDataSource(BroadcastOrderDetailView)

                        Next

                        DbContext.SaveChanges()

                    End Using

                End If

            End If

        End Sub
        Public Sub CancelAddNewTVDetail()

            DataGridViewTVDetails_BroadcastDetails.CancelNewItemRow()

        End Sub
        Public Sub SendBillToQuickbooks()

            Dim ErrorMessage As String = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Quickbooks.CreateBill(_Session, _ID, _SequenceNumber, _QBVendorID, _APDetails, ErrorMessage) = False Then

                    AdvantageFramework.WinForm.MessageBox.Show(ErrorMessage)

                Else

                    AdvantageFramework.WinForm.MessageBox.Show("AP invoice successfully sent to QuickBooks.")

                End If

                RefreshQuickBooksLink(DbContext)
                EnableOrDisableActions()

            End Using

        End Sub
        Public Sub DeleteBillFromQuickbooks()

            Dim ErrorMessage As String = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Quickbooks.DeleteBill(_Session, _ID, _SequenceNumber, ErrorMessage) = False Then

                    AdvantageFramework.WinForm.MessageBox.Show(ErrorMessage)

                End If

                RefreshQuickBooksLink(DbContext)
                EnableOrDisableActions()

            End Using

        End Sub
        Private Sub RefreshQuickBooksLink(DbContext As AdvantageFramework.Database.DbContext)

            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing

            AccountPayable = AdvantageFramework.Database.Procedures.AccountPayable.LoadByAccountPayableIDAndSequenceNumber(DbContext, _ID, _SequenceNumber)

            If AccountPayable IsNot Nothing Then

                _IsLinkedInQuickbooks = (String.IsNullOrWhiteSpace(AccountPayable.QuickbooksBillID) = False)

            End If

        End Sub
        Public Sub UpdateBillQuickbooks()

            Dim ErrorMessage As String = Nothing

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Quickbooks.UpdateBill(_Session, _ID, _SequenceNumber, _APDetails, ErrorMessage) = False Then

                    AdvantageFramework.WinForm.MessageBox.Show(ErrorMessage)

                Else

                    AdvantageFramework.WinForm.MessageBox.Show("AP invoice successfully updated in QuickBooks.")

                End If

                RefreshQuickBooksLink(DbContext)
                EnableOrDisableActions()

            End Using

        End Sub

#End Region

#Region "  Control Event Handlers "

        Private Sub AccountsPayableControl_HandleCreated(sender As Object, e As EventArgs) Handles Me.HandleCreated

            'AddHandler AdvantageFramework.WinForm.Presentation.Controls.LoadFormSettingsEvent, AddressOf LoadFormSettings

        End Sub
        Private Sub AccountsPayableControl_HandleDestroyed(sender As Object, e As EventArgs) Handles Me.HandleDestroyed

            'RemoveHandler AdvantageFramework.WinForm.Presentation.Controls.LoadFormSettingsEvent, AddressOf LoadFormSettings

        End Sub
        Private Sub AccountsPayableControl_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load

            PictureUpdateCurrency_Image.Image = AdvantageFramework.My.Resources.SmallCurrencyDollarImage
            PictureUpdateCurrency_Image.ToolTip = "Click to update rate"

            LoadModalOptions()
            TextBoxDropDownControl_Note.TabStop = False

        End Sub

#End Region

#Region "  Custom Control Event Handlers "

        Private Sub SearchableComboBoxControl_InvoiceNumber_EditValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles SearchableComboBoxControl_InvoiceNumber.EditValueChanged

            Dim AccountPayable As AdvantageFramework.Database.Entities.AccountPayable = Nothing
            Dim VendorCode As String = Nothing

            If Not _IsLoading AndAlso SearchableComboBoxControl_Vendor.HasASelectedValue AndAlso SearchableComboBoxControl_InvoiceNumber.HasASelectedValue Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    AccountPayable = AdvantageFramework.Database.Procedures.AccountPayable.LoadByVendorAndInvoiceNumber(DbContext, SearchableComboBoxControl_Vendor.GetSelectedValue, SearchableComboBoxControl_InvoiceNumber.GetSelectedValue)

                    If AccountPayable IsNot Nothing Then

                        Me.ShowWaitForm("Processing...")

                        LoadControl(SearchableComboBoxControl_Vendor.GetSelectedValue, AccountPayable.ID, AccountPayable.SequenceNumber, _BatchDate, _ShowGrossColumns, _SelectDocumentsTab) ', _ShowHomeColumns)
                        AdvantageFramework.WinForm.Presentation.Controls.ClearUserEntryChangedSetting(Me)

                        Me.CloseWaitForm()

                    End If

                End Using

                RaiseEvent VendorInvoiceChanged()

            ElseIf Not _IsLoading AndAlso SearchableComboBoxControl_Vendor.HasASelectedValue AndAlso SearchableComboBoxControl_InvoiceNumber.HasASelectedValue = False Then

                VendorCode = SearchableComboBoxControl_Vendor.GetSelectedValue
                Me.ClearControl()
                SetVendor(VendorCode, _BatchDate)

            End If

        End Sub
        Private Sub SearchableComboBoxControl_InvoiceNumber_EditValueChanging(ByVal sender As Object, ByVal e As DevExpress.XtraEditors.Controls.ChangingEventArgs) Handles SearchableComboBoxControl_InvoiceNumber.EditValueChanging

            If Not _IsLoading AndAlso e.NewValue IsNot Nothing AndAlso Not _IsClearing Then

                e.Cancel = Not CheckForUnsavedChanges()

            End If

        End Sub
        Private Sub ComboBoxControl_Office_SelectedValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBoxControl_Office.SelectedValueChanged

            Dim Office As AdvantageFramework.Database.Entities.Office = Nothing
            Dim GeneralLedgerOfficeCrossReference As AdvantageFramework.Database.Entities.GeneralLedgerOfficeCrossReference = Nothing
            Dim GeneralLedgerOfficeCrossReferenceCode As String = Nothing

            If ComboBoxControl_Office.HasASelectedValue Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    Office = AdvantageFramework.Database.Procedures.Office.LoadByOfficeCode(DbContext, ComboBoxControl_Office.GetSelectedValue)

                    If Office IsNot Nothing Then

                        GeneralLedgerOfficeCrossReference = AdvantageFramework.Database.Procedures.GeneralLedgerOfficeCrossReference.LoadByOfficeCode(DbContext, Office.Code)

                        If GeneralLedgerOfficeCrossReference IsNot Nothing Then

                            GeneralLedgerOfficeCrossReferenceCode = GeneralLedgerOfficeCrossReference.Code

                        End If

                        ComboBoxControl_APAccount.DataSource = AdvantageFramework.AccountPayable.GetAccountPayableGeneralLedgerDatasource(DbContext, GeneralLedgerOfficeCrossReferenceCode, _Session)

                        ComboBoxControl_APAccount.SelectedValue = Office.AccountsPayableGLACode

                    End If

                End Using

            End If

        End Sub
        Private Sub ComboBoxControl_Terms_SelectedValueChanged(sender As Object, e As EventArgs) Handles ComboBoxControl_Terms.SelectedValueChanged

            If Not _IsLoading AndAlso ComboBoxControl_Terms.HasASelectedValue Then

                CalculateDateToPay()

            End If

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_AddNewRowEvent(ByVal RowObject As Object) Handles DataGridViewNonClient_DistributionDetails.AddNewRowEvent

            DataGridViewNonClient_DistributionDetails.SetUserEntryChanged()

            _NonClientNewRowInitialized = False

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewNonClient_DistributionDetails.CellValueChangedEvent

            Dim AccountPayableGLDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail = Nothing
            Dim POMessage As String = Nothing

            If TypeOf DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail Then

                AccountPayableGLDistributionDetail = DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.PONumber.ToString Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) Then

                        SetNonClientPONumber(e.Value, e.RowHandle)

                    Else

                        AccountPayableGLDistributionDetail.PODetailLineNumber = Nothing

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.Amount.ToString Then

                    AccountPayableGLDistributionDetail.ForeignAmount = e.Value / NumericInputControl_VendorCurrencyRate.GetValue

                    CalculateTotalAmount()

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.ForeignAmount.ToString Then

                    AccountPayableGLDistributionDetail.Amount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    CalculateTotalAmount()

                End If

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.Amount.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.ForeignAmount.ToString Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        POMessage = AccountPayableGLDistributionDetail.CalculatePOBalance(DbContext)

                    End Using

                    If POMessage IsNot Nothing Then

                        AdvantageFramework.WinForm.MessageBox.Show(POMessage)

                    End If

                End If

            End If

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_ColumnValueChangedEvent(ByVal e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs, ByVal ViaCellValueChangedEvent As Boolean) Handles DataGridViewNonClient_DistributionDetails.ColumnValueChangedEvent

            Dim GeneralLedgerAccount As AdvantageFramework.Database.Entities.GeneralLedgerAccount = Nothing
            Dim GeneralLedgerOfficeCrossReference As AdvantageFramework.Database.Entities.GeneralLedgerOfficeCrossReference = Nothing
            Dim AccountPayableGLDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail = Nothing

            If TypeOf DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail Then

                AccountPayableGLDistributionDetail = DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.PODetailLineNumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) Then

                        SetNonClientPODetailLineNumber(e.Value, e.RowHandle)

                    Else

                        AccountPayableGLDistributionDetail.POComplete = 0
                        AccountPayableGLDistributionDetail.POAmount = Nothing
                        AccountPayableGLDistributionDetail.POBalance = Nothing

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.GLACode.ToString Then

                    If Not String.IsNullOrWhiteSpace(e.Value) Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            GeneralLedgerAccount = AdvantageFramework.Database.Procedures.GeneralLedgerAccount.LoadByGLACode(DbContext, e.Value)

                            If GeneralLedgerAccount IsNot Nothing Then

                                AccountPayableGLDistributionDetail.GLADescription = GeneralLedgerAccount.Description

                                If GeneralLedgerAccount.GeneralLedgerOfficeCrossReferenceCode IsNot Nothing Then

                                    GeneralLedgerOfficeCrossReference = AdvantageFramework.Database.Procedures.GeneralLedgerOfficeCrossReference.LoadByCode(DbContext, GeneralLedgerAccount.GeneralLedgerOfficeCrossReferenceCode)

                                    If GeneralLedgerOfficeCrossReference IsNot Nothing Then

                                        AccountPayableGLDistributionDetail.OfficeCode = GeneralLedgerOfficeCrossReference.OfficeCode

                                    End If

                                End If

                            End If

                        End Using

                    Else

                        AccountPayableGLDistributionDetail.GLADescription = Nothing

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.OfficeCode.ToString Then

                    If String.IsNullOrWhiteSpace(e.Value) Then

                        AccountPayableGLDistributionDetail.GLACode = Nothing
                        AccountPayableGLDistributionDetail.GLADescription = Nothing

                    End If

                End If

            End If

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridViewNonClient_DistributionDetails.Enter

            Dim DataGridView As AdvantageFramework.WinForm.Presentation.Controls.DataGridView = Nothing

            DataGridView = CType(sender, AdvantageFramework.WinForm.Presentation.Controls.DataGridView)

            If DataGridView.GridControl.MainView.DataRowCount = 0 Then

                If DataGridView.CurrentView.FocusedRowHandle = DevExpress.XtraGrid.GridControl.InvalidRowHandle Then

                    DataGridView.CurrentView.FocusedRowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle
                    DataGridView.CurrentView.FocusedColumn = DataGridViewNonClient_DistributionDetails.CurrentView.VisibleColumns(0)

                End If

            End If

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_RowCountChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridViewNonClient_DistributionDetails.RowCountChangedEvent

            EnableDisableOffice()

            If Not _IsLoading Then

                CalculateTotalAmount()

            End If

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_RowDoubleClickEvent() Handles DataGridViewNonClient_DistributionDetails.RowDoubleClickEvent

            If Me.DataGridViewNonClientDistributionDetailsHasOnlyOneSelectedRow AndAlso
                    Me.NonClientPONumber IsNot Nothing AndAlso
                    Me.NonClientPOLineNumber IsNot Nothing Then

                AdvantageFramework.FinanceAndAccounting.Presentation.AccountsPayablePurchaseOrderDetailDialog.ShowFormDialog(Me.NonClientPONumber, Me.NonClientPOLineNumber)

            End If

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_SelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridViewNonClient_DistributionDetails.SelectionChangedEvent

            RaiseEvent NonClientSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_ShownEditorEvent(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridViewNonClient_DistributionDetails.ShownEditorEvent

            Dim VendorCode As String = Nothing
            Dim PONumber As Integer = 0
            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim OfficeCode As String = Nothing
            Dim AllowContinue As Boolean = True

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                    If ComboBoxControl_Office.HasASelectedValue = False Then

                        AdvantageFramework.WinForm.MessageBox.Show("Please select an office.")
                        AllowContinue = False

                    End If

                End If

                If AllowContinue Then

                    If DataGridViewNonClient_DistributionDetails.CurrentView.IsNewItemRow(DataGridViewNonClient_DistributionDetails.CurrentView.FocusedRowHandle) AndAlso VendorHasDefaultExpenseAccount() Then

                        DataGridViewNonClient_DistributionDetails.CurrentView.ActiveEditor.IsModified = True

                    End If

                    If TypeOf DataGridViewNonClient_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.GridLookUpEdit Then

                        GridLookUpEdit = DataGridViewNonClient_DistributionDetails.CurrentView.ActiveEditor

                        If DataGridViewNonClient_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.PONumber.ToString Then

                            If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                                VendorCode = SearchableComboBoxControl_Vendor.GetSelectedValue

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = DbContext.Database.SqlQuery(Of AdvantageFramework.AccountPayable.Classes.AccountPayableGLPurchaseOrders)(String.Format("exec advsp_ap_gl_purchase_orders '{0}'", SearchableComboBoxControl_Vendor.GetSelectedValue)).ToList

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            End If

                        ElseIf DataGridViewNonClient_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.PODetailLineNumber.ToString Then

                            PONumber = DataGridViewNonClient_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNonClient_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.PONumber.ToString)

                            If PONumber <> 0 Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = (From Entity In AdvantageFramework.Database.Procedures.PurchaseOrderDetail.Load(DbContext)
                                                            Where Entity.PurchaseOrderNumber = PONumber AndAlso
                                                                  Entity.JobNumber Is Nothing AndAlso
                                                                  (Entity.IsComplete Is Nothing OrElse
                                                                   Entity.IsComplete = 0)
                                                            Select Entity.LineNumber,
                                                                   Entity.LineDescription).ToList

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            Else

                                DataGridViewNonClient_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        ElseIf DataGridViewNonClient_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.OfficeCode.ToString Then

                            BindingSource = New System.Windows.Forms.BindingSource
                            BindingSource.DataSource = (From Entity In AdvantageFramework.Database.Procedures.Office.LoadAllActiveWithOfficeLimits(DbContext, _Session)
                                                        Select Entity.Code,
                                                               Entity.Name).ToList

                            GridLookUpEdit.Properties.DataSource = BindingSource

                        ElseIf DataGridViewNonClient_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.GLACode.ToString Then

                            OfficeCode = DataGridViewNonClient_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNonClient_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail.Properties.OfficeCode.ToString)

                            BindingSource = New System.Windows.Forms.BindingSource
                            BindingSource.DataSource = AdvantageFramework.AccountPayable.GetNonClientGLAccountList(DbContext, _Session, ComboBoxControl_Office.GetSelectedValue, OfficeCode)

                            GridLookUpEdit.Properties.DataSource = BindingSource

                        End If

                    End If

                Else

                    DataGridViewNonClient_DistributionDetails.CurrentView.CloseEditorForUpdating()
                    ComboBoxControl_Office.Focus()

                End If

            End Using

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_InitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewNonClient_DistributionDetails.InitNewRowEvent

            _NonClientNewRowInitialized = True

            VendorHasDefaultExpenseAccount(e.RowHandle)

            If TypeOf DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail Then

                DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail).AccountPayableID = _ID
                DirectCast(DataGridViewNonClient_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableGLDistributionDetail).AccountPayableSequenceNumber = _SequenceNumber

            End If

            RaiseEvent NonClientInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewNonClient_DistributionDetails_EmbeddedNavigatorButtonClick(ByVal sender As Object, ByVal e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewNonClient_DistributionDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewNonClient()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteSelectedNonClient()

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewOutOfHome_DistributionDetails_AddNewRowEvent(RowObject As Object) Handles DataGridViewOutOfHome_DistributionDetails.AddNewRowEvent

            DataGridViewOutOfHome_DistributionDetails.SetUserEntryChanged()

        End Sub
        Private Sub DataGridViewOutOfHome_DistributionDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewOutOfHome_DistributionDetails.CellValueChangedEvent

            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing

            If TypeOf DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail Then

                AccountPayableOutOfHomeDistributionDetail = DirectCast(DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ClientCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DivisionCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ProductCode.ToString Then

                    AccountPayableOutOfHomeDistributionDetail.OutdoorOrderNumber = Nothing
                    AccountPayableOutOfHomeDistributionDetail.OutdoorDetailLineNumber = Nothing
                    ClearOutOfHomeRow(e.RowHandle, AccountPayableOutOfHomeDistributionDetail)

                End If

                If AccountPayableOutOfHomeDistributionDetail.OutdoorOrderNumber <> 0 Then

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                        AccountPayableOutOfHomeDistributionDetail.GrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(AccountPayableOutOfHomeDistributionDetail.GrossAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CommissionPercent, AccountPayableOutOfHomeDistributionDetail.NetAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.GrossAmount.ToString Then

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(CDec(e.Value), AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CommissionPercent, AccountPayableOutOfHomeDistributionDetail.NetAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignNetAmount.ToString Then

                        AccountPayableOutOfHomeDistributionDetail.NetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableOutOfHomeDistributionDetail.NetAmount, AccountPayableOutOfHomeDistributionDetail.DiscountAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.MarkupPercent, AccountPayableOutOfHomeDistributionDetail.GrossAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NetAmount.ToString Then

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(CDec(e.Value), AccountPayableOutOfHomeDistributionDetail.DiscountAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.MarkupPercent, AccountPayableOutOfHomeDistributionDetail.GrossAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignDiscountAmount.ToString Then

                        If e.Value < 0 Then

                            AccountPayableOutOfHomeDistributionDetail.ForeignDiscountAmount = Math.Abs(e.Value)

                        End If

                        AccountPayableOutOfHomeDistributionDetail.DiscountAmount = FormatNumber(AccountPayableOutOfHomeDistributionDetail.ForeignDiscountAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableOutOfHomeDistributionDetail.NetAmount, AccountPayableOutOfHomeDistributionDetail.DiscountAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.MarkupPercent, AccountPayableOutOfHomeDistributionDetail.GrossAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DiscountAmount.ToString Then

                        If e.Value < 0 Then

                            AccountPayableOutOfHomeDistributionDetail.DiscountAmount = Math.Abs(e.Value)

                        End If

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableOutOfHomeDistributionDetail.NetAmount, AccountPayableOutOfHomeDistributionDetail.DiscountAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.MarkupPercent, AccountPayableOutOfHomeDistributionDetail.GrossAmount, AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CommissionAmount)

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.VendorTax.ToString OrElse
                            e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ForeignVendorTax.ToString Then

                        AccountPayableOutOfHomeDistributionDetail.ReCalculate(False)

                    Else

                        AccountPayableOutOfHomeDistributionDetail.ReCalculate(True)

                    End If

                    If e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus Is Nothing AndAlso
                            RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.OutOfHome, AccountPayableOutOfHomeDistributionDetail.PreviouslyPosted + AccountPayableOutOfHomeDistributionDetail.DisbursedAmount, AccountPayableOutOfHomeDistributionDetail.OrderNetAmount) Then

                        AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.PendingApproval

                        CheckBoxControl_OnHold.Checked = True

                    ElseIf e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus IsNot Nothing AndAlso
                            DataGridViewOutOfHomeDistributionDetailIsNewItemRow AndAlso
                            Not RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.OutOfHome, AccountPayableOutOfHomeDistributionDetail.PreviouslyPosted + AccountPayableOutOfHomeDistributionDetail.DisbursedAmount, AccountPayableOutOfHomeDistributionDetail.OrderNetAmount) Then

                        AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NewApprovalStatus.ToString Then

                        If e.Value Is Nothing Then

                            AccountPayableOutOfHomeDistributionDetail.NewApprovalComments = Nothing

                        ElseIf e.Value = 1 Then

                            CheckBoxControl_OnHold.Checked = True

                        Else

                            CheckBoxControl_OnHold.Checked = False

                        End If

                    End If

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewOutOfHome_DistributionDetails_ColumnValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs, ViaCellValueChangedEvent As Boolean) Handles DataGridViewOutOfHome_DistributionDetails.ColumnValueChangedEvent

            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim OrderLineNumber As Short = Nothing
            Dim PipePosition As Integer = Nothing
            Dim SalesTax As AdvantageFramework.Database.Entities.SalesTax = Nothing

            If TypeOf DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail Then

                AccountPayableOutOfHomeDistributionDetail = DirectCast(DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorOrderNumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing Then

                        If IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                            SetOutOfHomeOrderNumber(e.Value, False, e.RowHandle)

                        Else

                            PipePosition = InStr(1, e.Value, "|")

                            If PipePosition > 0 Then

                                OrderNumber = Strings.Left(e.Value, PipePosition - 1)
                                OrderLineNumber = Strings.Mid(e.Value, PipePosition + 1)

                                SetOutOfHomeOrderNumber(OrderNumber, True, e.RowHandle, OrderLineNumber)

                            Else

                                SetOutOfHomeOrderNumber(e.Value, True, e.RowHandle)

                            End If

                        End If

                    Else

                        AccountPayableOutOfHomeDistributionDetail.OutdoorOrderNumber = Nothing
                        AccountPayableOutOfHomeDistributionDetail.OutdoorDetailLineNumber = Nothing

                        ClearOutOfHomeRow(e.RowHandle, AccountPayableOutOfHomeDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorDetailLineNumber.ToString Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                        SetOutOfHomeOrderLineNumber(e.Value, e.RowHandle)

                    Else

                        AccountPayableOutOfHomeDistributionDetail.OutdoorDetailLineNumber = Nothing

                        ClearOutOfHomeRow(e.RowHandle, AccountPayableOutOfHomeDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.SalesTaxCode.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing And e.Value <> "" Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            SalesTax = AdvantageFramework.Database.Procedures.SalesTax.LoadBySalesTaxCode(DbContext, e.Value)

                        End Using

                        If SalesTax IsNot Nothing Then

                            AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.SalesTaxCode = e.Value
                            AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CityTaxPercent = SalesTax.CityPercent.GetValueOrDefault(0)
                            AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CountyTaxPercent = SalesTax.CountyPercent.GetValueOrDefault(0)
                            AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.StateTaxPercent = SalesTax.StatePercent.GetValueOrDefault(0)
                            AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.IsResaleTax = SalesTax.Resale.GetValueOrDefault(0)

                        End If

                    Else

                        AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.SalesTaxCode = Nothing
                        AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CityTaxPercent = 0
                        AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.CountyTaxPercent = 0
                        AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.StateTaxPercent = 0
                        AccountPayableOutOfHomeDistributionDetail.AccountPayableOutOfHome.IsResaleTax = Nothing

                    End If

                    AccountPayableOutOfHomeDistributionDetail.ReCalculate(True)

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewOutOfHome_DistributionDetails_EmbeddedNavigatorButtonClick(sender As Object, e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewOutOfHome_DistributionDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewOutOfHome()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteSelectedOutOfHome()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Custom

                        AddMultipleOrders(MultipleOrderTypes.OutOfHome)

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewOutOfHome_DistributionDetails_InitNewRowEvent(sender As Object, e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewOutOfHome_DistributionDetails.InitNewRowEvent

            DirectCast(DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail).CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

            RaiseEvent OutOfHomeInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewOutOfHome_DistributionDetails_QueryPopupNeedDatasourceEvent(FieldName As String, ByRef OverrideDefaultDatasource As Boolean, ByRef Datasource As Object) Handles DataGridViewOutOfHome_DistributionDetails.QueryPopupNeedDatasourceEvent

            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing

            OverrideDefaultDatasource = True

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ClientCode.ToString Then

                        Datasource = AdvantageFramework.Database.Procedures.Client.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext).ToList

                    ElseIf DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DivisionCode.ToString Then

                        ClientCode = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ClientCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Division.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext)
                                      Where Entity.ClientCode = ClientCode
                                      Select Entity).ToList

                    ElseIf DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ProductCode.ToString Then

                        ClientCode = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ClientCode.ToString)
                        DivisionCode = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DivisionCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Product.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext, False, True)
                                      Where Entity.ClientCode = ClientCode AndAlso
                                            Entity.DivisionCode = DivisionCode
                                      Select Entity).ToList

                    End If

                End Using

            End Using

        End Sub
        Private Sub DataGridViewOutOfHome_DistributionDetails_RowCountChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewOutOfHome_DistributionDetails.RowCountChangedEvent

            EnableDisableOffice()

            If Not _IsLoading Then

                CalculateTotalAmount()

            End If

        End Sub
        Private Sub DataGridViewOutOfHome_DistributionDetails_SelectionChangedEvent(sender As Object, e As System.EventArgs) Handles DataGridViewOutOfHome_DistributionDetails.SelectionChangedEvent

            RaiseEvent OutOfHomeSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewOutOfHome_DistributionDetails_ShownEditorEvent(sender As Object, e As System.EventArgs) Handles DataGridViewOutOfHome_DistributionDetails.ShownEditorEvent

            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim MemoExEdit As DevExpress.XtraEditors.MemoExEdit = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing
            Dim ProductCode As String = Nothing
            Dim OfficeCode As String = Nothing
            Dim AllowContinue As Boolean = True
            Dim AllowVendorNotOnOrder As Boolean = False
            Dim AccountPayableOutOfHomeDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                    If ComboBoxControl_Office.HasASelectedValue Then

                        OfficeCode = ComboBoxControl_Office.GetSelectedValue

                    Else

                        AdvantageFramework.WinForm.MessageBox.Show("Please select an office.")
                        AllowContinue = False

                    End If

                End If

                AccountPayableOutOfHomeDistributionDetail = DirectCast(DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRow(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail)

                If AllowContinue Then

                    If TypeOf DataGridViewOutOfHome_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.GridLookUpEdit Then

                        GridLookUpEdit = DataGridViewOutOfHome_DistributionDetails.CurrentView.ActiveEditor

                        If DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorOrderNumber.ToString Then

                            ClientCode = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ClientCode.ToString)
                            DivisionCode = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.DivisionCode.ToString)
                            ProductCode = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.ProductCode.ToString)

                            If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                                AllowVendorNotOnOrder = AdvantageFramework.Agency.GetOptionAPAllowOrderNotMatchingVendor(DbContext)

                                BindingSource = New System.Windows.Forms.BindingSource

                                BindingSource.DataSource = AdvantageFramework.AccountPayable.GetAvailableOutOfHomeOrders(DbContext, AllowVendorNotOnOrder, SearchableComboBoxControl_Vendor.GetSelectedValue, OfficeCode,
                                                                                                                         ClientCode, DivisionCode, ProductCode, Nothing, Nothing, Nothing)

                                GridLookUpEdit.Properties.ValueMember = "ID"
                                GridLookUpEdit.Properties.DataSource = BindingSource

                                If AllowVendorNotOnOrder Then

                                    GridLookUpEdit.Properties.View.ActiveFilterString = "VendorCode = '" & SearchableComboBoxControl_Vendor.GetSelectedValue & "'"

                                ElseIf GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableOutOfHomeOrders.Properties.VendorCode.ToString) IsNot Nothing Then

                                    GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableOutOfHomeOrders.Properties.VendorCode.ToString).Visible = False

                                End If

                            End If

                        ElseIf DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorDetailLineNumber.ToString Then

                            OrderNumber = DataGridViewOutOfHome_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.OutdoorOrderNumber.ToString)

                            If OrderNumber <> 0 Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.OutOfHomeOrderDetail.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber))

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            Else

                                DataGridViewOutOfHome_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        ElseIf DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.SalesTaxCode.ToString Then

                            BindingSource = New System.Windows.Forms.BindingSource
                            BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.SalesTax.LoadAllActive(DbContext))

                            GridLookUpEdit.Properties.DataSource = BindingSource

                        End If

                    ElseIf TypeOf DataGridViewOutOfHome_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.MemoExEdit Then

                        If DataGridViewOutOfHome_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.NewApprovalComments.ToString Then

                            If AccountPayableOutOfHomeDistributionDetail IsNot Nothing AndAlso AccountPayableOutOfHomeDistributionDetail.NewApprovalStatus IsNot Nothing Then

                                MemoExEdit = DataGridViewOutOfHome_DistributionDetails.CurrentView.ActiveEditor
                                MemoExEdit.Properties.MaxLength = AdvantageFramework.BaseClasses.Entity.LoadPropertyMaxLength(AdvantageFramework.BaseClasses.Entity.LoadProperty(GetType(AdvantageFramework.Database.Entities.AccountPayableMediaApproval), AdvantageFramework.AccountPayable.Classes.AccountPayableOutOfHomeDistributionDetail.Properties.Comments.ToString))

                            Else

                                DataGridViewOutOfHome_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        End If

                    End If

                Else

                    DataGridViewOutOfHome_DistributionDetails.CurrentView.CloseEditorForUpdating()
                    ComboBoxControl_Office.Focus()

                End If

            End Using

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_AddNewRowEvent(ByVal RowObject As Object) Handles DataGridViewProduction_DistributionDetails.AddNewRowEvent

            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing

            If TypeOf RowObject Is AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail Then

                AccountPayableProductionDistributionDetail = RowObject

                DataGridViewProduction_DistributionDetails.CurrentView.AddToModifiedRows(AccountPayableProductionDistributionDetail)

                If AccountPayableProductionDistributionDetail.ExtendedAmount Is Nothing Then

                    AccountPayableProductionDistributionDetail.ExtendedAmount = 0

                End If

            End If

            DataGridViewProduction_DistributionDetails.SetUserEntryChanged()

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewProduction_DistributionDetails.CellValueChangedEvent

            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing
            Dim POMessage As String = Nothing
            Dim DivisionCore As AdvantageFramework.Database.Core.Division = Nothing
            Dim ProductCore As AdvantageFramework.Database.Core.Product = Nothing
            Dim [Function] As AdvantageFramework.Database.Entities.Function = Nothing

            If TypeOf DataGridViewProduction_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail Then

                AccountPayableProductionDistributionDetail = DataGridViewProduction_DistributionDetails.CurrentView.GetRow(e.RowHandle)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.PODetailLineNumber.ToString Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) Then

                        SetProductionPODetailLineNumber(e.Value, e.RowHandle)

                    Else

                        AccountPayableProductionDistributionDetail.PODetailLineNumber = Nothing
                        AccountPayableProductionDistributionDetail.POComplete = Nothing
                        AccountPayableProductionDistributionDetail.ClientCode = Nothing
                        AccountPayableProductionDistributionDetail.DivisionCode = Nothing
                        AccountPayableProductionDistributionDetail.ProductCode = Nothing
                        AccountPayableProductionDistributionDetail.JobNumber = Nothing
                        AccountPayableProductionDistributionDetail.JobComponentNumber = Nothing
                        AccountPayableProductionDistributionDetail.JobDescription = Nothing
                        AccountPayableProductionDistributionDetail.JobCompDescription = Nothing
                        AccountPayableProductionDistributionDetail.POAmount = Nothing
                        AccountPayableProductionDistributionDetail.POBalance = Nothing

                        DataGridViewProduction_DistributionDetails.CurrentView.RefreshRow(e.RowHandle)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Quantity.ToString Then

                    AccountPayableProductionDistributionDetail.Quantity = If(e.Value = 0, Nothing, e.Value)

                    If AccountPayableProductionDistributionDetail.Quantity Is Nothing Then

                        AccountPayableProductionDistributionDetail.Rate = Nothing

                    End If

                    Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.CalculateQuantityRateAndAmount(BillingSystem.QtyRateAmount.Quantity, AccountPayableProductionDistributionDetail, DbContext)

                    End Using

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignRate.ToString Then

                    AccountPayableProductionDistributionDetail.ForeignRate = If(e.Value = 0, Nothing, e.Value)

                    If AccountPayableProductionDistributionDetail.ForeignRate Is Nothing Then

                        AccountPayableProductionDistributionDetail.Quantity = Nothing

                        AccountPayableProductionDistributionDetail.Rate = Nothing

                    Else

                        AccountPayableProductionDistributionDetail.Rate = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 3)

                    End If

                    Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.CalculateQuantityRateAndAmount(BillingSystem.QtyRateAmount.Rate, AccountPayableProductionDistributionDetail, DbContext)

                    End Using

                    AccountPayableProductionDistributionDetail.ForeignExtendedAmount = FormatNumber(AccountPayableProductionDistributionDetail.ExtendedAmount.GetValueOrDefault(0) / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Rate.ToString Then

                    AccountPayableProductionDistributionDetail.Rate = If(e.Value = 0, Nothing, e.Value)

                    If AccountPayableProductionDistributionDetail.Rate Is Nothing Then

                        AccountPayableProductionDistributionDetail.Quantity = Nothing

                        AccountPayableProductionDistributionDetail.ForeignRate = Nothing

                    Else

                        AccountPayableProductionDistributionDetail.ForeignRate = FormatNumber(AccountPayableProductionDistributionDetail.Rate / NumericInputControl_VendorCurrencyRate.GetValue, 3)

                    End If

                    Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.CalculateQuantityRateAndAmount(BillingSystem.QtyRateAmount.Rate, AccountPayableProductionDistributionDetail, DbContext)

                    End Using

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.CommissionPercent.ToString Then

                    AccountPayableProductionDistributionDetail.CommissionPercent = e.Value

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignExtendedAmount.ToString Then

                    AccountPayableProductionDistributionDetail.ExtendedAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.CalculateQuantityRateAndAmount(BillingSystem.QtyRateAmount.Amount, AccountPayableProductionDistributionDetail, DbContext)

                    End Using

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedAmount.ToString Then

                    AccountPayableProductionDistributionDetail.ExtendedAmount = e.Value

                    Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.CalculateQuantityRateAndAmount(BillingSystem.QtyRateAmount.Amount, AccountPayableProductionDistributionDetail, DbContext)

                    End Using

                    AccountPayableProductionDistributionDetail.ForeignExtendedAmount = FormatNumber(e.Value / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                    'ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignExtendedMarkupAmount.ToString Then

                    '    AccountPayableProductionDistributionDetail.ExtendedMarkupAmount = e.Value * NumericInputControl_VendorCurrencyRate.GetValue

                    '    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True, True)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedMarkupAmount.ToString Then

                    AccountPayableProductionDistributionDetail.ExtendedMarkupAmount = e.Value

                    ' AccountPayableProductionDistributionDetail.ForeignExtendedMarkupAmount = e.Value / NumericInputControl_VendorCurrencyRate.GetValue

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True, True)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.GLACode.ToString Then

                    ValidateProductionGLACode(e.Value, e.RowHandle)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ForeignExtendedNonResaleTax.ToString Then

                    AccountPayableProductionDistributionDetail.ForeignExtendedNonResaleTax = e.Value

                    AccountPayableProductionDistributionDetail.ExtendedNonResaleTax = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, False)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ExtendedNonResaleTax.ToString Then

                    AccountPayableProductionDistributionDetail.ExtendedNonResaleTax = e.Value

                    AccountPayableProductionDistributionDetail.ForeignExtendedNonResaleTax = FormatNumber(e.Value / NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, False)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ClientCode.ToString Then

                    AccountPayableProductionDistributionDetail.DivisionCode = Nothing
                    AccountPayableProductionDistributionDetail.ProductCode = Nothing

                    If e.Value IsNot Nothing Then

                        Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            Try

                                DivisionCore = (From Div In AdvantageFramework.Database.Procedures.Division.LoadCore(AdvantageFramework.Database.Procedures.Division.LoadAllActive(DbContext))
                                                Where Div.ClientCode = e.Value
                                                Select Div).SingleOrDefault

                            Catch ex As Exception
                                DivisionCore = Nothing
                            End Try

                            If DivisionCore IsNot Nothing Then

                                AccountPayableProductionDistributionDetail.DivisionCode = DivisionCore.Code

                                Try

                                    ProductCore = (From Prod In AdvantageFramework.Database.Procedures.Product.LoadCore(AdvantageFramework.Database.Procedures.Product.LoadAllActive(DbContext))
                                                   Where Prod.ClientCode = e.Value AndAlso
                                                         Prod.DivisionCode = DivisionCore.Code
                                                   Select Prod).SingleOrDefault

                                Catch ex As Exception
                                    ProductCore = Nothing
                                End Try

                                If ProductCore IsNot Nothing Then

                                    AccountPayableProductionDistributionDetail.ProductCode = ProductCore.Code

                                End If

                            End If

                        End Using

                    End If

                    AccountPayableProductionDistributionDetail.JobNumber = Nothing
                    AccountPayableProductionDistributionDetail.JobDescription = Nothing
                    AccountPayableProductionDistributionDetail.JobComponentNumber = Nothing
                    AccountPayableProductionDistributionDetail.JobCompDescription = Nothing

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.DivisionCode.ToString Then

                    AccountPayableProductionDistributionDetail.ProductCode = Nothing

                    If e.Value IsNot Nothing Then

                        Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            Try

                                ProductCore = (From Prod In AdvantageFramework.Database.Procedures.Product.LoadCore(AdvantageFramework.Database.Procedures.Product.LoadAllActive(DbContext))
                                               Where Prod.ClientCode = AccountPayableProductionDistributionDetail.ClientCode AndAlso
                                                     Prod.DivisionCode = e.Value
                                               Select Prod).SingleOrDefault

                            Catch ex As Exception
                                ProductCore = Nothing
                            End Try

                            If ProductCore IsNot Nothing Then

                                AccountPayableProductionDistributionDetail.ProductCode = ProductCore.Code

                            End If

                        End Using

                    End If

                    AccountPayableProductionDistributionDetail.JobNumber = Nothing
                    AccountPayableProductionDistributionDetail.JobDescription = Nothing
                    AccountPayableProductionDistributionDetail.JobComponentNumber = Nothing
                    AccountPayableProductionDistributionDetail.JobCompDescription = Nothing

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ProductCode.ToString Then

                    AccountPayableProductionDistributionDetail.JobNumber = Nothing
                    AccountPayableProductionDistributionDetail.JobDescription = Nothing
                    AccountPayableProductionDistributionDetail.JobComponentNumber = Nothing
                    AccountPayableProductionDistributionDetail.JobCompDescription = Nothing

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.FunctionCode.ToString Then

                    If Not String.IsNullOrWhiteSpace(e.Value) Then

                        AccountPayableProductionDistributionDetail.FunctionCode = e.Value

                        Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            [Function] = AdvantageFramework.Database.Procedures.Function.LoadByFunctionCode(DbContext, e.Value)

                            If [Function] IsNot Nothing Then

                                AccountPayableProductionDistributionDetail.FunctionDescription = [Function].Description

                            End If

                        End Using

                    Else

                        AccountPayableProductionDistributionDetail.FunctionCode = Nothing
                        AccountPayableProductionDistributionDetail.FunctionDescription = Nothing

                    End If

                    DataGridViewProduction_DistributionDetails.CurrentView.RefreshRow(e.RowHandle)

                    RefreshBillingRate(e.RowHandle)

                End If

                POMessage = AccountPayableProductionDistributionDetail.CalculatePOBalance(e.Column.FieldName, _ID)

                If POMessage IsNot Nothing Then

                    AdvantageFramework.WinForm.MessageBox.Show(POMessage)

                End If

                CalculateTotalAmount()

                If e.RowHandle >= 0 AndAlso e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Comment.ToString Then

                    DataGridViewProduction_DistributionDetails.AddToModifiedRows(e.RowHandle)

                End If

            End If

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_ColumnValueChangedEvent(ByVal e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs, ByVal ViaCellValueChangedEvent As Boolean) Handles DataGridViewProduction_DistributionDetails.ColumnValueChangedEvent

            Dim JobNumber As Integer = Nothing
            Dim AccountPayableProductionDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail = Nothing
            Dim SalesTax As AdvantageFramework.Database.Entities.SalesTax = Nothing

            If TypeOf DataGridViewProduction_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail Then

                AccountPayableProductionDistributionDetail = DataGridViewProduction_DistributionDetails.CurrentView.GetRow(e.RowHandle)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.PONumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) Then

                        AccountPayableProductionDistributionDetail.PODetailLineNumber = Nothing
                        SetProductionPONumber(e.Value, e.RowHandle)

                    Else

                        AccountPayableProductionDistributionDetail.PONumber = Nothing
                        AccountPayableProductionDistributionDetail.PODetailLineNumber = Nothing
                        AccountPayableProductionDistributionDetail.POComplete = Nothing
                        AccountPayableProductionDistributionDetail.ClientCode = Nothing
                        AccountPayableProductionDistributionDetail.DivisionCode = Nothing
                        AccountPayableProductionDistributionDetail.ProductCode = Nothing
                        AccountPayableProductionDistributionDetail.JobNumber = Nothing
                        AccountPayableProductionDistributionDetail.JobComponentNumber = Nothing
                        AccountPayableProductionDistributionDetail.JobDescription = Nothing
                        AccountPayableProductionDistributionDetail.JobCompDescription = Nothing
                        AccountPayableProductionDistributionDetail.POAmount = Nothing
                        AccountPayableProductionDistributionDetail.POBalance = Nothing

                    End If

                    DataGridViewProduction_DistributionDetails.CurrentView.RefreshRow(e.RowHandle)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.JobNumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                        SetProductionJob(e.Value, e.RowHandle)

                    Else

                        AccountPayableProductionDistributionDetail.JobNumber = Nothing
                        AccountPayableProductionDistributionDetail.JobComponentNumber = Nothing
                        AccountPayableProductionDistributionDetail.JobDescription = Nothing
                        AccountPayableProductionDistributionDetail.JobCompDescription = Nothing

                        DataGridViewProduction_DistributionDetails.CurrentView.RefreshRow(e.RowHandle)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.JobComponentNumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                        JobNumber = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(e.RowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.JobNumber.ToString)

                        SetProductionJobComponentDetails(JobNumber, e.Value, e.RowHandle)

                    Else

                        AccountPayableProductionDistributionDetail.JobComponentNumber = Nothing
                        AccountPayableProductionDistributionDetail.JobCompDescription = Nothing

                        DataGridViewProduction_DistributionDetails.CurrentView.RefreshRow(e.RowHandle)

                    End If

                    'ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.FunctionCode.ToString AndAlso Not ViaCellValueChangedEvent Then

                    '    If e.Value IsNot Nothing Then

                    '        AccountPayableProductionDistributionDetail.FunctionCode = e.Value

                    '        Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    '            [Function] = AdvantageFramework.Database.Procedures.Function.LoadByFunctionCode(DbContext, e.Value)

                    '            If [Function] IsNot Nothing Then

                    '                AccountPayableProductionDistributionDetail.FunctionDescription = [Function].Description

                    '            End If

                    '        End Using

                    '    Else

                    '        AccountPayableProductionDistributionDetail.FunctionCode = Nothing
                    '        AccountPayableProductionDistributionDetail.FunctionDescription = Nothing

                    '    End If

                    '    DataGridViewProduction_DistributionDetails.CurrentView.RefreshRow(e.RowHandle)

                    '    RefreshBillingRate(e.RowHandle)

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.SalesTaxCode.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing And e.Value <> "" Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            SalesTax = AdvantageFramework.Database.Procedures.SalesTax.LoadBySalesTaxCode(DbContext, e.Value)

                        End Using

                        If SalesTax IsNot Nothing Then

                            AccountPayableProductionDistributionDetail.SalesTaxCode = e.Value
                            AccountPayableProductionDistributionDetail.IsResaleTax = SalesTax.Resale.GetValueOrDefault(0)

                            AccountPayableProductionDistributionDetail.AccountPayableProduction.CityTaxPercent = SalesTax.CityPercent.GetValueOrDefault(0)
                            AccountPayableProductionDistributionDetail.AccountPayableProduction.CountyTaxPercent = SalesTax.CountyPercent.GetValueOrDefault(0)
                            AccountPayableProductionDistributionDetail.AccountPayableProduction.StateTaxPercent = SalesTax.StatePercent.GetValueOrDefault(0)

                        End If

                    Else

                        AccountPayableProductionDistributionDetail.ClearSalesTax()

                    End If

                    CalculateProductionRowValues(AccountPayableProductionDistributionDetail, True)

                End If

                CalculateTotalAmount()

                If e.RowHandle >= 0 AndAlso e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.Comment.ToString Then

                    DataGridViewProduction_DistributionDetails.AddToModifiedRows(e.RowHandle)

                End If

            End If

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_EmbeddedNavigatorButtonClick(ByVal sender As Object, ByVal e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewProduction_DistributionDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewProduction()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteSelectedProduction()

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridViewProduction_DistributionDetails.Enter

            Dim DataGridView As AdvantageFramework.WinForm.Presentation.Controls.DataGridView = Nothing
            Dim View As DevExpress.XtraGrid.Views.Grid.GridView = Nothing

            DataGridView = CType(sender, AdvantageFramework.WinForm.Presentation.Controls.DataGridView)
            View = CType(DataGridView.CurrentView, DevExpress.XtraGrid.Views.Grid.GridView)

            If DataGridView.GridControl.MainView.DataRowCount = 0 Then

                If DataGridView.CurrentView.FocusedRowHandle = DevExpress.XtraGrid.GridControl.InvalidRowHandle Then

                    DataGridView.CurrentView.FocusedRowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle
                    DataGridView.CurrentView.FocusedColumn = DataGridViewProduction_DistributionDetails.CurrentView.VisibleColumns(0)

                End If

                DataGridView.CurrentView.ShowEditor()

            End If

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_InitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewProduction_DistributionDetails.InitNewRowEvent

            Dim CurrentGridView As GridView = Nothing

            CurrentGridView = DataGridViewProduction_DistributionDetails.CurrentView

            If TypeOf CurrentGridView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail Then

                DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).Session = _Session
                DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).AccountPayableID = _ID
                DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).AccountPayableSequenceNumber = _SequenceNumber
                DirectCast(DataGridViewProduction_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail).CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

            End If

            RaiseEvent ProductionInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_RowCountChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewProduction_DistributionDetails.RowCountChangedEvent

            EnableDisableOffice()

            If Not _IsLoading Then

                CalculateTotalAmount()

            End If

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_RowDoubleClickEvent() Handles DataGridViewProduction_DistributionDetails.RowDoubleClickEvent

            If Me.DataGridViewProductionDistributionDetailsHasOnlyOneSelectedRow AndAlso
                    Me.ProductionPONumber IsNot Nothing AndAlso
                    Me.ProductionPOLineNumber IsNot Nothing Then

                AdvantageFramework.FinanceAndAccounting.Presentation.AccountsPayablePurchaseOrderDetailDialog.ShowFormDialog(Me.ProductionPONumber, Me.ProductionPOLineNumber)

            End If

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_SelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridViewProduction_DistributionDetails.SelectionChangedEvent

            RaiseEvent ProductionSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewProduction_DistributionDetails_ShownEditorEvent(sender As Object, e As EventArgs) Handles DataGridViewProduction_DistributionDetails.ShownEditorEvent

            Dim VendorCode As String = Nothing
            Dim PONumber As Integer = 0
            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing
            Dim ProductCode As String = Nothing
            Dim JobNumber As Integer = Nothing
            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim OfficeCode As String = Nothing
            Dim AllowContinue As Boolean = True
            Dim IsAPLimitByOfficeEnabled As Boolean = False

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                    If ComboBoxControl_Office.HasASelectedValue Then

                        OfficeCode = ComboBoxControl_Office.GetSelectedValue

                    Else

                        AdvantageFramework.WinForm.MessageBox.Show("Please select an office.")
                        AllowContinue = False

                    End If

                End If

                If AllowContinue Then

                    Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        If TypeOf DataGridViewProduction_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.GridLookUpEdit Then

                            GridLookUpEdit = DataGridViewProduction_DistributionDetails.CurrentView.ActiveEditor

                            If DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.PONumber.ToString Then

                                If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                                    VendorCode = SearchableComboBoxControl_Vendor.GetSelectedValue

                                    BindingSource = New System.Windows.Forms.BindingSource
                                    BindingSource.DataSource = AdvantageFramework.AccountPayable.GetOpenPurchaseOrders(DbContext, DbContext.UserCode, SearchableComboBoxControl_Vendor.GetSelectedValue, False)

                                    GridLookUpEdit.Properties.DataSource = BindingSource

                                End If

                            ElseIf DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.PODetailLineNumber.ToString Then

                                PONumber = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.PONumber.ToString)

                                If PONumber <> 0 Then

                                    BindingSource = New System.Windows.Forms.BindingSource
                                    BindingSource.DataSource = AdvantageFramework.AccountPayable.GetPurchaseOrderLineNumbers(DbContext, PONumber)

                                    GridLookUpEdit.Properties.DataSource = BindingSource

                                Else

                                    DataGridViewProduction_DistributionDetails.CurrentView.CloseEditor()

                                End If

                            ElseIf DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ClientCode.ToString Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.Database.Procedures.Client.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext).ToList

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            ElseIf DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.DivisionCode.ToString Then

                                ClientCode = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ClientCode.ToString)

                                If ClientCode IsNot Nothing AndAlso ClientCode <> "" Then

                                    BindingSource = New System.Windows.Forms.BindingSource
                                    BindingSource.DataSource = (From Entity In AdvantageFramework.Database.Procedures.Division.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext)
                                                                Where Entity.ClientCode = ClientCode
                                                                Select Entity).ToList

                                    GridLookUpEdit.Properties.DataSource = BindingSource

                                Else

                                    DataGridViewProduction_DistributionDetails.CurrentView.CloseEditor()

                                End If

                            ElseIf DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ProductCode.ToString Then

                                ClientCode = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ClientCode.ToString)
                                DivisionCode = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.DivisionCode.ToString)

                                If DivisionCode IsNot Nothing AndAlso DivisionCode <> "" Then

                                    BindingSource = New System.Windows.Forms.BindingSource
                                    BindingSource.DataSource = (From Entity In AdvantageFramework.Database.Procedures.Product.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext, False, True)
                                                                Where Entity.ClientCode = ClientCode AndAlso
                                                                      Entity.DivisionCode = DivisionCode
                                                                Select Entity).ToList

                                    GridLookUpEdit.Properties.DataSource = BindingSource

                                Else

                                    DataGridViewProduction_DistributionDetails.CurrentView.CloseEditor()

                                End If

                            ElseIf DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.JobNumber.ToString Then

                                ClientCode = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ClientCode.ToString)
                                DivisionCode = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.DivisionCode.ToString)
                                ProductCode = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.ProductCode.ToString)

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.AccountPayable.GetAvailableProductionJobs(DbContext, DbContext.UserCode, OfficeCode, ClientCode, DivisionCode, ProductCode)

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            ElseIf DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.JobComponentNumber.ToString Then

                                JobNumber = DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.JobNumber.ToString)

                                If JobNumber <> 0 Then

                                    BindingSource = New System.Windows.Forms.BindingSource
                                    BindingSource.DataSource = AdvantageFramework.AccountPayable.GetJobComponentsByJob(DbContext, JobNumber)

                                    GridLookUpEdit.Properties.DataSource = BindingSource

                                Else

                                    DataGridViewProduction_DistributionDetails.CurrentView.CloseEditor()

                                End If

                            ElseIf DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.FunctionCode.ToString Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.Database.Procedures.Function.LoadForSubItemGridLookupEditActiveByType(DbContext, "V")

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            ElseIf DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.GLACode.ToString Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.AccountPayable.GetProductionGLAccountList(DbContext, DataGridViewProduction_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewProduction_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.OfficeCode.ToString), _Session)

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            ElseIf DataGridViewProduction_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableProductionDistributionDetail.Properties.SalesTaxCode.ToString Then

                                BindingSource = New System.Windows.Forms.BindingSource

                                If AdvantageFramework.Database.Procedures.Agency.InvoiceTaxFlag(DbContext) = True Then

                                    BindingSource.DataSource = (From Entity In AdvantageFramework.Database.Procedures.SalesTax.LoadAllActive(DbContext)
                                                                Where Entity.Resale Is Nothing OrElse
                                                                      Entity.Resale = 0
                                                                Select Entity.TaxCode,
                                                                       Entity.Description).ToList

                                Else

                                    BindingSource.DataSource = AdvantageFramework.Database.Procedures.SalesTax.LoadAllActive(DbContext).ToList

                                End If

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            End If

                        End If

                    End Using

                Else

                    DataGridViewProduction_DistributionDetails.CurrentView.CloseEditorForUpdating()
                    ComboBoxControl_Office.Focus()

                End If

            End Using

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_AddNewRowEvent(RowObject As Object) Handles DataGridViewRadio_DistributionDetails.AddNewRowEvent

            DataGridViewRadio_DistributionDetails.SetUserEntryChanged()

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewRadio_DistributionDetails.CellValueChangedEvent

            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing

            If TypeOf DataGridViewRadio_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail Then

                AccountPayableRadioDistributionDetail = DirectCast(DataGridViewRadio_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ClientCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DivisionCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ProductCode.ToString Then

                    AccountPayableRadioDistributionDetail.OrderNumber = Nothing
                    AccountPayableRadioDistributionDetail.OrderLineNumber = Nothing
                    ClearRadioRow(e.RowHandle, AccountPayableRadioDistributionDetail)

                End If

                If AccountPayableRadioDistributionDetail.OrderNumber <> 0 Then

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                        AccountPayableRadioDistributionDetail.GrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(AccountPayableRadioDistributionDetail.GrossAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.CommissionPercent, AccountPayableRadioDistributionDetail.ExtendedNetAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.GrossAmount.ToString Then

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(CDec(e.Value), AccountPayableRadioDistributionDetail.AccountPayableRadio.CommissionPercent, AccountPayableRadioDistributionDetail.ExtendedNetAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignExtendedNetAmount.ToString Then

                        AccountPayableRadioDistributionDetail.ExtendedNetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableRadioDistributionDetail.ExtendedNetAmount, AccountPayableRadioDistributionDetail.DiscountAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.MarkupPercent, AccountPayableRadioDistributionDetail.GrossAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ExtendedNetAmount.ToString Then

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(CDec(e.Value), AccountPayableRadioDistributionDetail.DiscountAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.MarkupPercent, AccountPayableRadioDistributionDetail.GrossAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignDiscountAmount.ToString Then

                        If e.Value < 0 Then

                            AccountPayableRadioDistributionDetail.ForeignDiscountAmount = Math.Abs(e.Value)

                        End If

                        AccountPayableRadioDistributionDetail.DiscountAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableRadioDistributionDetail.ExtendedNetAmount, AccountPayableRadioDistributionDetail.DiscountAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.MarkupPercent, AccountPayableRadioDistributionDetail.GrossAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DiscountAmount.ToString Then

                        If e.Value < 0 Then

                            AccountPayableRadioDistributionDetail.DiscountAmount = Math.Abs(e.Value)

                        End If

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableRadioDistributionDetail.ExtendedNetAmount, AccountPayableRadioDistributionDetail.DiscountAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.MarkupPercent, AccountPayableRadioDistributionDetail.GrossAmount, AccountPayableRadioDistributionDetail.AccountPayableRadio.CommissionAmount)

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.VendorTax.ToString OrElse
                            e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignVendorTax.ToString Then

                        AccountPayableRadioDistributionDetail.ReCalculate(False)

                    Else

                        AccountPayableRadioDistributionDetail.ReCalculate(True)

                    End If

                    If e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableRadioDistributionDetail.NewApprovalStatus Is Nothing AndAlso AccountPayableRadioDistributionDetail.RewriteFlag.GetValueOrDefault(0) = 1 AndAlso
                            RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.Radio, AccountPayableRadioDistributionDetail.PreviouslyPosted + AccountPayableRadioDistributionDetail.DisbursedAmount, AccountPayableRadioDistributionDetail.OrderNetAmount) Then

                        AccountPayableRadioDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.PendingApproval

                        CheckBoxControl_OnHold.Checked = True

                    ElseIf e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableRadioDistributionDetail.NewApprovalStatus IsNot Nothing AndAlso AccountPayableRadioDistributionDetail.RewriteFlag.GetValueOrDefault(0) = 1 AndAlso
                            DataGridViewRadioDistributionDetailIsNewItemRow AndAlso
                            Not RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.Radio, AccountPayableRadioDistributionDetail.PreviouslyPosted + AccountPayableRadioDistributionDetail.DisbursedAmount, AccountPayableRadioDistributionDetail.OrderNetAmount) Then

                        AccountPayableRadioDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NewApprovalStatus.ToString Then

                        If e.Value Is Nothing Then

                            AccountPayableRadioDistributionDetail.NewApprovalComments = Nothing

                        ElseIf e.Value = 1 Then

                            CheckBoxControl_OnHold.Checked = True

                        Else

                            CheckBoxControl_OnHold.Checked = False

                        End If

                    End If

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_ColumnValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs, ViaCellValueChangedEvent As Boolean) Handles DataGridViewRadio_DistributionDetails.ColumnValueChangedEvent

            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim OrderLineNumber As Short = Nothing
            Dim PipePosition As Integer = Nothing
            Dim PipePosition2 As Integer = Nothing
            Dim MonthName As String = Nothing
            Dim Year As Nullable(Of Short) = Nothing
            Dim BroadcastYearList As Generic.List(Of Short) = Nothing
            Dim SalesTax As AdvantageFramework.Database.Entities.SalesTax = Nothing

            If TypeOf DataGridViewRadio_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail Then

                AccountPayableRadioDistributionDetail = DirectCast(DataGridViewRadio_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.BroadcastMonth.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value Is Nothing OrElse e.Value = "" Then

                        AccountPayableRadioDistributionDetail.BroadcastMonth = Nothing
                        AccountPayableRadioDistributionDetail.BroadcastYear = Nothing

                    Else

                        OrderNumber = AccountPayableRadioDistributionDetail.OrderNumber.GetValueOrDefault(0)

                        If OrderNumber <> 0 Then

                            SetRadioOrderNumber(OrderNumber, e.RowHandle, e.Value)

                        End If

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.BroadcastYear.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value <> 0 Then

                        OrderNumber = AccountPayableRadioDistributionDetail.OrderNumber.GetValueOrDefault(0)
                        MonthName = AccountPayableRadioDistributionDetail.BroadcastMonth

                        If OrderNumber <> 0 AndAlso MonthName IsNot Nothing Then

                            SetRadioDetailFromLegacyOrder(OrderNumber, MonthName, e.Value, e.RowHandle)

                        End If

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderNumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing Then

                        MonthName = AccountPayableRadioDistributionDetail.BroadcastMonth

                        If IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                            SetRadioOrderNumber(e.Value, e.RowHandle, MonthName)

                        Else

                            PipePosition = InStr(1, e.Value, "|")

                            If PipePosition > 0 Then

                                OrderNumber = Strings.Left(e.Value, PipePosition - 1)

                                PipePosition2 = InStr(PipePosition + 1, e.Value, "|")

                                If PipePosition2 > 0 Then

                                    MonthName = Strings.Mid(e.Value, PipePosition + 1, PipePosition2 - PipePosition - 1)
                                    Year = Strings.Mid(e.Value, PipePosition2 + 1)

                                    SetRadioDetailFromLegacyOrder(OrderNumber, MonthName, Year, e.RowHandle)

                                Else

                                    OrderLineNumber = Strings.Mid(e.Value, PipePosition + 1)

                                    SetRadioOrderNumber(OrderNumber, e.RowHandle, MonthName, OrderLineNumber)

                                End If

                            End If

                        End If

                    Else

                        AccountPayableRadioDistributionDetail.OrderNumber = Nothing
                        AccountPayableRadioDistributionDetail.OrderLineNumber = Nothing

                        ClearRadioRow(e.RowHandle, AccountPayableRadioDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderLineNumber.ToString Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                        SetRadioDetailFromNewOrder(e.Value, e.RowHandle)

                    Else

                        AccountPayableRadioDistributionDetail.OrderLineNumber = Nothing

                        ClearRadioRow(e.RowHandle, AccountPayableRadioDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.SalesTaxCode.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing And e.Value <> "" Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            SalesTax = AdvantageFramework.Database.Procedures.SalesTax.LoadBySalesTaxCode(DbContext, e.Value)

                        End Using

                        If SalesTax IsNot Nothing Then

                            AccountPayableRadioDistributionDetail.AccountPayableRadio.SalesTaxCode = e.Value
                            AccountPayableRadioDistributionDetail.AccountPayableRadio.CityTaxPercent = FormatNumber(SalesTax.CityPercent.GetValueOrDefault(0), 3)
                            AccountPayableRadioDistributionDetail.AccountPayableRadio.CountyTaxPercent = FormatNumber(SalesTax.CountyPercent.GetValueOrDefault(0), 3)
                            AccountPayableRadioDistributionDetail.AccountPayableRadio.StateTaxPercent = FormatNumber(SalesTax.StatePercent.GetValueOrDefault(0), 3)
                            AccountPayableRadioDistributionDetail.AccountPayableRadio.IsResaleTax = SalesTax.Resale.GetValueOrDefault(0)

                        End If

                    Else

                        AccountPayableRadioDistributionDetail.AccountPayableRadio.SalesTaxCode = Nothing
                        AccountPayableRadioDistributionDetail.AccountPayableRadio.CityTaxPercent = 0
                        AccountPayableRadioDistributionDetail.AccountPayableRadio.CountyTaxPercent = 0
                        AccountPayableRadioDistributionDetail.AccountPayableRadio.StateTaxPercent = 0
                        AccountPayableRadioDistributionDetail.AccountPayableRadio.IsResaleTax = Nothing

                    End If

                    AccountPayableRadioDistributionDetail.ReCalculate(True)

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_EmbeddedNavigatorButtonClick(sender As Object, e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewRadio_DistributionDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewRadio()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteSelectedRadio()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Custom

                        AddMultipleOrders(MultipleOrderTypes.Radio)

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_InitNewRowEvent(sender As Object, e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewRadio_DistributionDetails.InitNewRowEvent

            DirectCast(DataGridViewRadio_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail).CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

            RaiseEvent RadioInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_QueryPopupNeedDatasourceEvent(FieldName As String, ByRef OverrideDefaultDatasource As Boolean, ByRef Datasource As Object) Handles DataGridViewRadio_DistributionDetails.QueryPopupNeedDatasourceEvent

            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing

            OverrideDefaultDatasource = True

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ClientCode.ToString Then

                        Datasource = AdvantageFramework.Database.Procedures.Client.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext).ToList

                    ElseIf DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DivisionCode.ToString Then

                        ClientCode = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ClientCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Division.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext)
                                      Where Entity.ClientCode = ClientCode
                                      Select Entity).ToList

                    ElseIf DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ProductCode.ToString Then

                        ClientCode = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ClientCode.ToString)
                        DivisionCode = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DivisionCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Product.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext, False, True)
                                      Where Entity.ClientCode = ClientCode AndAlso
                                            Entity.DivisionCode = DivisionCode
                                      Select Entity).ToList

                    End If

                End Using

            End Using

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_RowCountChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewRadio_DistributionDetails.RowCountChangedEvent

            EnableDisableOffice()

            If Not _IsLoading Then

                CalculateTotalAmount()

            End If

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_SelectionChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewRadio_DistributionDetails.SelectionChangedEvent

            RaiseEvent RadioSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_ShowingEditorEvent(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles DataGridViewRadio_DistributionDetails.ShowingEditorEvent

            'objects
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing

            Try

                AccountPayableRadioDistributionDetail = DirectCast(DataGridViewRadio_DistributionDetails.CurrentView.GetRow(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

            Catch ex As Exception
                AccountPayableRadioDistributionDetail = Nothing
            End Try

            If AccountPayableRadioDistributionDetail IsNot Nothing AndAlso AccountPayableRadioDistributionDetail.IsCommissionOnly Then

                If DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ExtendedNetAmount.ToString OrElse
                            DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DiscountAmount.ToString OrElse
                            DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NetCharges.ToString OrElse
                            DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.SalesTaxCode.ToString OrElse
                            DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignExtendedNetAmount.ToString OrElse
                            DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignDiscountAmount.ToString OrElse
                            DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ForeignNetCharges.ToString Then

                    e.Cancel = True

                End If

            End If

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_ShownEditorEvent(sender As Object, e As EventArgs) Handles DataGridViewRadio_DistributionDetails.ShownEditorEvent

            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim MemoExEdit As DevExpress.XtraEditors.MemoExEdit = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim MonthName As String = Nothing
            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing
            Dim ProductCode As String = Nothing
            Dim OfficeCode As String = Nothing
            Dim Year As Nullable(Of Short) = Nothing
            Dim AllowContinue As Boolean = True
            Dim AllowVendorNotOnOrder As Boolean = False
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                    If ComboBoxControl_Office.HasASelectedValue Then

                        OfficeCode = ComboBoxControl_Office.GetSelectedValue

                    Else

                        AdvantageFramework.WinForm.MessageBox.Show("Please select an office.")
                        AllowContinue = False

                    End If

                End If

                AccountPayableRadioDistributionDetail = DirectCast(DataGridViewRadio_DistributionDetails.CurrentView.GetRow(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

                If AllowContinue Then

                    If TypeOf DataGridViewRadio_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.GridLookUpEdit Then

                        GridLookUpEdit = DataGridViewRadio_DistributionDetails.CurrentView.ActiveEditor

                        If DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.BroadcastMonth.ToString Then

                            OrderNumber = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderNumber.ToString)

                            If OrderNumber <> 0 Then

                                GridLookUpEdit.Properties.DataSource = AdvantageFramework.Database.Procedures.RadioOrderLegacy.GetMonthsByOrderNumber(DbContext, OrderNumber)
                                GridLookUpEdit.Properties.ValueMember = "Column"

                            Else

                                GridLookUpEdit.Properties.DataSource = AdvantageFramework.Database.Procedures.RadioOrderLegacy.GetAllMonths

                            End If

                        ElseIf DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.BroadcastYear.ToString Then

                            OrderNumber = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderNumber.ToString)
                            MonthName = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.BroadcastMonth.ToString)

                            If OrderNumber <> 0 AndAlso MonthName IsNot Nothing Then

                                GridLookUpEdit.Properties.DataSource = AdvantageFramework.Database.Procedures.RadioOrderLegacy.GetYearsByOrderNumberMonth(DbContext, OrderNumber, MonthName).ToList()

                            Else

                                GridLookUpEdit.Properties.DataSource = AdvantageFramework.Database.Procedures.RadioOrderLegacy.GetAllYears

                            End If

                        ElseIf DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderNumber.ToString Then

                            ClientCode = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ClientCode.ToString)
                            DivisionCode = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.DivisionCode.ToString)
                            ProductCode = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.ProductCode.ToString)
                            MonthName = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.BroadcastMonth.ToString)
                            Year = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.BroadcastYear.ToString)

                            If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                                AllowVendorNotOnOrder = AdvantageFramework.Agency.GetOptionAPAllowOrderNotMatchingVendor(DbContext)

                                BindingSource = New System.Windows.Forms.BindingSource

                                BindingSource.DataSource = AdvantageFramework.AccountPayable.GetAvailableRadioOrders(DbContext, AllowVendorNotOnOrder, SearchableComboBoxControl_Vendor.GetSelectedValue,
                                                                                                                     OfficeCode, ClientCode, DivisionCode, ProductCode, MonthName, Year, Nothing, Nothing, Nothing, Nothing)

                                GridLookUpEdit.Properties.ValueMember = "ID"
                                GridLookUpEdit.Properties.DataSource = BindingSource

                                If AllowVendorNotOnOrder Then

                                    GridLookUpEdit.Properties.View.ActiveFilterString = "VendorCode = '" & SearchableComboBoxControl_Vendor.GetSelectedValue & "'"

                                ElseIf GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableRadioOrders.Properties.VendorCode.ToString) IsNot Nothing Then

                                    GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableRadioOrders.Properties.VendorCode.ToString).Visible = False

                                End If

                            End If

                        ElseIf DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderLineNumber.ToString Then

                            OrderNumber = DataGridViewRadio_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewRadio_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.OrderNumber.ToString)

                            If OrderNumber <> 0 Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadNonCancelledByOrderNumber(DbContext, OrderNumber))

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            Else

                                DataGridViewRadio_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        ElseIf DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.SalesTaxCode.ToString Then

                            BindingSource = New System.Windows.Forms.BindingSource
                            BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.SalesTax.LoadAllActive(DbContext))

                            GridLookUpEdit.Properties.DataSource = BindingSource

                        End If

                    ElseIf TypeOf DataGridViewRadio_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.MemoExEdit Then

                        If DataGridViewRadio_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.NewApprovalComments.ToString Then

                            If AccountPayableRadioDistributionDetail IsNot Nothing AndAlso AccountPayableRadioDistributionDetail.NewApprovalStatus IsNot Nothing Then

                                MemoExEdit = DataGridViewRadio_DistributionDetails.CurrentView.ActiveEditor
                                MemoExEdit.Properties.MaxLength = AdvantageFramework.BaseClasses.Entity.LoadPropertyMaxLength(AdvantageFramework.BaseClasses.Entity.LoadProperty(GetType(AdvantageFramework.Database.Entities.AccountPayableMediaApproval), AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail.Properties.Comments.ToString))

                            Else

                                DataGridViewRadio_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        End If

                    End If

                Else

                    DataGridViewRadio_DistributionDetails.CurrentView.CloseEditorForUpdating()
                    ComboBoxControl_Office.Focus()

                End If

            End Using

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_AddNewRowEvent(RowObject As Object) Handles DataGridViewTV_DistributionDetails.AddNewRowEvent

            DataGridViewTV_DistributionDetails.SetUserEntryChanged()

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewTV_DistributionDetails.CellValueChangedEvent

            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing

            If TypeOf DataGridViewTV_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail Then

                AccountPayableTVDistributionDetail = DirectCast(DataGridViewTV_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ClientCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DivisionCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ProductCode.ToString Then

                    AccountPayableTVDistributionDetail.OrderNumber = Nothing
                    AccountPayableTVDistributionDetail.OrderLineNumber = Nothing
                    ClearTVRow(e.RowHandle, AccountPayableTVDistributionDetail)

                End If

                If AccountPayableTVDistributionDetail.OrderNumber <> 0 Then

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                        AccountPayableTVDistributionDetail.GrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(AccountPayableTVDistributionDetail.GrossAmount, AccountPayableTVDistributionDetail.AccountPayableTV.CommissionPercent, AccountPayableTVDistributionDetail.ExtendedNetAmount, AccountPayableTVDistributionDetail.AccountPayableTV.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.GrossAmount.ToString Then

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(CDec(e.Value), AccountPayableTVDistributionDetail.AccountPayableTV.CommissionPercent, AccountPayableTVDistributionDetail.ExtendedNetAmount, AccountPayableTVDistributionDetail.AccountPayableTV.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignExtendedNetAmount.ToString Then

                        AccountPayableTVDistributionDetail.ExtendedNetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableTVDistributionDetail.ExtendedNetAmount, AccountPayableTVDistributionDetail.DiscountAmount, AccountPayableTVDistributionDetail.AccountPayableTV.MarkupPercent, AccountPayableTVDistributionDetail.GrossAmount, AccountPayableTVDistributionDetail.AccountPayableTV.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ExtendedNetAmount.ToString Then

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(CDec(e.Value), AccountPayableTVDistributionDetail.DiscountAmount, AccountPayableTVDistributionDetail.AccountPayableTV.MarkupPercent, AccountPayableTVDistributionDetail.GrossAmount, AccountPayableTVDistributionDetail.AccountPayableTV.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignDiscountAmount.ToString Then

                        If e.Value < 0 Then

                            AccountPayableTVDistributionDetail.ForeignDiscountAmount = Math.Abs(e.Value)

                        End If

                        AccountPayableTVDistributionDetail.DiscountAmount = FormatNumber(AccountPayableTVDistributionDetail.ForeignDiscountAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableTVDistributionDetail.ExtendedNetAmount, AccountPayableTVDistributionDetail.DiscountAmount, AccountPayableTVDistributionDetail.AccountPayableTV.MarkupPercent, AccountPayableTVDistributionDetail.GrossAmount, AccountPayableTVDistributionDetail.AccountPayableTV.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DiscountAmount.ToString Then

                        If e.Value < 0 Then

                            AccountPayableTVDistributionDetail.DiscountAmount = Math.Abs(e.Value)

                        End If

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableTVDistributionDetail.ExtendedNetAmount, AccountPayableTVDistributionDetail.DiscountAmount, AccountPayableTVDistributionDetail.AccountPayableTV.MarkupPercent, AccountPayableTVDistributionDetail.GrossAmount, AccountPayableTVDistributionDetail.AccountPayableTV.CommissionAmount)

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.VendorTax.ToString OrElse
                            e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignVendorTax.ToString Then

                        AccountPayableTVDistributionDetail.ReCalculate(False)

                    Else

                        AccountPayableTVDistributionDetail.ReCalculate(True)

                    End If

                    If e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableTVDistributionDetail.NewApprovalStatus Is Nothing AndAlso AccountPayableTVDistributionDetail.RewriteFlag.GetValueOrDefault(0) = 1 AndAlso
                            RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.TV, AccountPayableTVDistributionDetail.PreviouslyPosted + AccountPayableTVDistributionDetail.DisbursedAmount, AccountPayableTVDistributionDetail.OrderNetAmount) Then

                        AccountPayableTVDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.PendingApproval

                        CheckBoxControl_OnHold.Checked = True

                    ElseIf e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableTVDistributionDetail.NewApprovalStatus IsNot Nothing AndAlso AccountPayableTVDistributionDetail.RewriteFlag.GetValueOrDefault(0) = 1 AndAlso
                            DataGridViewTVDistributionDetailIsNewItemRow AndAlso
                            Not RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.TV, AccountPayableTVDistributionDetail.PreviouslyPosted + AccountPayableTVDistributionDetail.DisbursedAmount, AccountPayableTVDistributionDetail.OrderNetAmount) Then

                        AccountPayableTVDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NewApprovalStatus.ToString Then

                        If e.Value Is Nothing Then

                            AccountPayableTVDistributionDetail.NewApprovalComments = Nothing

                        ElseIf e.Value = 1 Then

                            CheckBoxControl_OnHold.Checked = True

                        Else

                            CheckBoxControl_OnHold.Checked = False

                        End If

                    End If

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_ColumnValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs, ViaCellValueChangedEvent As Boolean) Handles DataGridViewTV_DistributionDetails.ColumnValueChangedEvent

            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim OrderLineNumber As Short = Nothing
            Dim PipePosition As Integer = Nothing
            Dim PipePosition2 As Integer = Nothing
            Dim MonthName As String = Nothing
            Dim Year As Nullable(Of Short) = Nothing
            Dim BroadcastYearList As Generic.List(Of Short) = Nothing
            Dim SalesTax As AdvantageFramework.Database.Entities.SalesTax = Nothing

            If TypeOf DataGridViewTV_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail Then

                AccountPayableTVDistributionDetail = DirectCast(DataGridViewTV_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.BroadcastMonth.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value Is Nothing OrElse e.Value = "" Then

                        AccountPayableTVDistributionDetail.BroadcastMonth = Nothing
                        AccountPayableTVDistributionDetail.BroadcastYear = Nothing

                    Else

                        OrderNumber = AccountPayableTVDistributionDetail.OrderNumber.GetValueOrDefault(0)

                        If OrderNumber <> 0 Then

                            SetTVOrderNumber(OrderNumber, e.RowHandle, e.Value)

                        End If

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.BroadcastYear.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value <> 0 Then

                        OrderNumber = AccountPayableTVDistributionDetail.OrderNumber.GetValueOrDefault(0)
                        MonthName = AccountPayableTVDistributionDetail.BroadcastMonth

                        If OrderNumber <> 0 AndAlso MonthName IsNot Nothing Then

                            SetTVDetailFromLegacyOrder(OrderNumber, MonthName, e.Value, e.RowHandle)

                        End If

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderNumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing Then

                        MonthName = AccountPayableTVDistributionDetail.BroadcastMonth

                        If IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                            SetTVOrderNumber(e.Value, e.RowHandle, MonthName)

                        Else

                            PipePosition = InStr(1, e.Value, "|")

                            If PipePosition > 0 Then

                                OrderNumber = Strings.Left(e.Value, PipePosition - 1)

                                PipePosition2 = InStr(PipePosition + 1, e.Value, "|")

                                If PipePosition2 > 0 Then

                                    MonthName = Strings.Mid(e.Value, PipePosition + 1, PipePosition2 - PipePosition - 1)
                                    Year = Strings.Mid(e.Value, PipePosition2 + 1)

                                    SetTVDetailFromLegacyOrder(OrderNumber, MonthName, Year, e.RowHandle)

                                Else

                                    OrderLineNumber = Strings.Mid(e.Value, PipePosition + 1)

                                    SetTVOrderNumber(OrderNumber, e.RowHandle, MonthName, OrderLineNumber)

                                End If

                            End If

                        End If

                    Else

                        AccountPayableTVDistributionDetail.OrderNumber = Nothing
                        AccountPayableTVDistributionDetail.OrderLineNumber = Nothing

                        ClearTVRow(e.RowHandle, AccountPayableTVDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderLineNumber.ToString Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                        SetTVDetailFromNewOrder(e.Value, e.RowHandle)

                    Else

                        AccountPayableTVDistributionDetail.OrderLineNumber = Nothing

                        ClearTVRow(e.RowHandle, AccountPayableTVDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.SalesTaxCode.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing And e.Value <> "" Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            SalesTax = AdvantageFramework.Database.Procedures.SalesTax.LoadBySalesTaxCode(DbContext, e.Value)

                        End Using

                        If SalesTax IsNot Nothing Then

                            AccountPayableTVDistributionDetail.AccountPayableTV.SalesTaxCode = e.Value
                            AccountPayableTVDistributionDetail.AccountPayableTV.CityTaxPercent = FormatNumber(SalesTax.CityPercent.GetValueOrDefault(0), 3)
                            AccountPayableTVDistributionDetail.AccountPayableTV.CountyTaxPercent = FormatNumber(SalesTax.CountyPercent.GetValueOrDefault(0), 3)
                            AccountPayableTVDistributionDetail.AccountPayableTV.StateTaxPercent = FormatNumber(SalesTax.StatePercent.GetValueOrDefault(0), 3)
                            AccountPayableTVDistributionDetail.AccountPayableTV.IsResaleTax = SalesTax.Resale.GetValueOrDefault(0)

                        End If

                    Else

                        AccountPayableTVDistributionDetail.AccountPayableTV.SalesTaxCode = Nothing
                        AccountPayableTVDistributionDetail.AccountPayableTV.CityTaxPercent = 0
                        AccountPayableTVDistributionDetail.AccountPayableTV.CountyTaxPercent = 0
                        AccountPayableTVDistributionDetail.AccountPayableTV.StateTaxPercent = 0
                        AccountPayableTVDistributionDetail.AccountPayableTV.IsResaleTax = Nothing

                    End If

                    AccountPayableTVDistributionDetail.ReCalculate(True)

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_EmbeddedNavigatorButtonClick(sender As Object, e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewTV_DistributionDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewTV()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteSelectedTV()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Custom

                        AddMultipleOrders(MultipleOrderTypes.Television)

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_InitNewRowEvent(sender As Object, e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewTV_DistributionDetails.InitNewRowEvent

            DirectCast(DataGridViewTV_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail).CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

            RaiseEvent TVInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_QueryPopupNeedDatasourceEvent(FieldName As String, ByRef OverrideDefaultDatasource As Boolean, ByRef Datasource As Object) Handles DataGridViewTV_DistributionDetails.QueryPopupNeedDatasourceEvent

            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing

            OverrideDefaultDatasource = True

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ClientCode.ToString Then

                        Datasource = AdvantageFramework.Database.Procedures.Client.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext).ToList

                    ElseIf DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DivisionCode.ToString Then

                        ClientCode = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ClientCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Division.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext)
                                      Where Entity.ClientCode = ClientCode
                                      Select Entity).ToList

                    ElseIf DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ProductCode.ToString Then

                        ClientCode = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ClientCode.ToString)
                        DivisionCode = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DivisionCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Product.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext, False, True)
                                      Where Entity.ClientCode = ClientCode AndAlso
                                            Entity.DivisionCode = DivisionCode
                                      Select Entity).ToList

                    End If

                End Using

            End Using

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_RowCountChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewTV_DistributionDetails.RowCountChangedEvent

            EnableDisableOffice()

            If Not _IsLoading Then

                CalculateTotalAmount()

            End If

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_SelectionChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewTV_DistributionDetails.SelectionChangedEvent

            RaiseEvent TVSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_ShowingEditorEvent(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles DataGridViewTV_DistributionDetails.ShowingEditorEvent

            'objects
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing

            Try

                AccountPayableTVDistributionDetail = DirectCast(DataGridViewTV_DistributionDetails.CurrentView.GetRow(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

            Catch ex As Exception
                AccountPayableTVDistributionDetail = Nothing
            End Try

            If AccountPayableTVDistributionDetail IsNot Nothing AndAlso AccountPayableTVDistributionDetail.IsCommissionOnly Then

                If DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ExtendedNetAmount.ToString OrElse
                        DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DiscountAmount.ToString OrElse
                        DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NetCharges.ToString OrElse
                        DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.SalesTaxCode.ToString OrElse
                        DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignExtendedNetAmount.ToString OrElse
                        DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignDiscountAmount.ToString OrElse
                        DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ForeignNetCharges.ToString Then

                    e.Cancel = True

                End If

            End If

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_ShownEditorEvent(sender As Object, e As EventArgs) Handles DataGridViewTV_DistributionDetails.ShownEditorEvent

            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim MemoExEdit As DevExpress.XtraEditors.MemoExEdit = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim MonthName As String = Nothing
            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing
            Dim ProductCode As String = Nothing
            Dim OfficeCode As String = Nothing
            Dim Year As Nullable(Of Short) = Nothing
            Dim AllowContinue As Boolean = True
            Dim AllowVendorNotOnOrder As Boolean = False
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                    If ComboBoxControl_Office.HasASelectedValue Then

                        OfficeCode = ComboBoxControl_Office.GetSelectedValue

                    Else

                        AdvantageFramework.WinForm.MessageBox.Show("Please select an office.")
                        AllowContinue = False

                    End If

                End If

                AccountPayableTVDistributionDetail = DirectCast(DataGridViewTV_DistributionDetails.CurrentView.GetRow(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

                If AllowContinue Then

                    If TypeOf DataGridViewTV_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.GridLookUpEdit Then

                        GridLookUpEdit = DataGridViewTV_DistributionDetails.CurrentView.ActiveEditor

                        If DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.BroadcastMonth.ToString Then

                            OrderNumber = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderNumber.ToString)

                            If OrderNumber <> 0 Then

                                GridLookUpEdit.Properties.DataSource = AdvantageFramework.Database.Procedures.TVOrderLegacy.GetMonthsByOrderNumber(DbContext, OrderNumber)
                                GridLookUpEdit.Properties.ValueMember = "Column"

                            Else

                                GridLookUpEdit.Properties.DataSource = AdvantageFramework.Database.Procedures.TVOrderLegacy.GetAllMonths

                            End If

                        ElseIf DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.BroadcastYear.ToString Then

                            OrderNumber = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderNumber.ToString)
                            MonthName = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.BroadcastMonth.ToString)

                            If OrderNumber <> 0 AndAlso MonthName IsNot Nothing Then

                                GridLookUpEdit.Properties.DataSource = AdvantageFramework.Database.Procedures.TVOrderLegacy.GetYearsByOrderNumberMonth(DbContext, OrderNumber, MonthName).ToList()

                            Else

                                GridLookUpEdit.Properties.DataSource = AdvantageFramework.Database.Procedures.TVOrderLegacy.GetAllYears

                            End If

                        ElseIf DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderNumber.ToString Then

                            ClientCode = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ClientCode.ToString)
                            DivisionCode = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.DivisionCode.ToString)
                            ProductCode = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.ProductCode.ToString)
                            MonthName = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.BroadcastMonth.ToString)
                            Year = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.BroadcastYear.ToString)

                            If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                                AllowVendorNotOnOrder = AdvantageFramework.Agency.GetOptionAPAllowOrderNotMatchingVendor(DbContext)

                                BindingSource = New System.Windows.Forms.BindingSource

                                BindingSource.DataSource = AdvantageFramework.AccountPayable.GetAvailableTVOrders(DbContext, AllowVendorNotOnOrder, SearchableComboBoxControl_Vendor.GetSelectedValue,
                                                                                                                  OfficeCode, ClientCode, DivisionCode, ProductCode, MonthName, Year, Nothing, Nothing, Nothing, Nothing)

                                GridLookUpEdit.Properties.ValueMember = "ID"
                                GridLookUpEdit.Properties.DataSource = BindingSource

                                If AllowVendorNotOnOrder Then

                                    GridLookUpEdit.Properties.View.ActiveFilterString = "VendorCode = '" & SearchableComboBoxControl_Vendor.GetSelectedValue & "'"

                                ElseIf GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableTVOrders.Properties.VendorCode.ToString) IsNot Nothing Then

                                    GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableTVOrders.Properties.VendorCode.ToString).Visible = False

                                End If

                            End If

                        ElseIf DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderLineNumber.ToString Then

                            OrderNumber = DataGridViewTV_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewTV_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.OrderNumber.ToString)

                            If OrderNumber <> 0 Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.TVOrderDetail.LoadNonCancelledByOrderNumber(DbContext, OrderNumber))

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            Else

                                DataGridViewTV_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        ElseIf DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.SalesTaxCode.ToString Then

                            BindingSource = New System.Windows.Forms.BindingSource
                            BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.SalesTax.LoadAllActive(DbContext))

                            GridLookUpEdit.Properties.DataSource = BindingSource

                        End If

                    ElseIf TypeOf DataGridViewTV_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.MemoExEdit Then

                        If DataGridViewTV_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.NewApprovalComments.ToString Then

                            If AccountPayableTVDistributionDetail IsNot Nothing AndAlso AccountPayableTVDistributionDetail.NewApprovalStatus IsNot Nothing Then

                                MemoExEdit = DataGridViewTV_DistributionDetails.CurrentView.ActiveEditor
                                MemoExEdit.Properties.MaxLength = AdvantageFramework.BaseClasses.Entity.LoadPropertyMaxLength(AdvantageFramework.BaseClasses.Entity.LoadProperty(GetType(AdvantageFramework.Database.Entities.AccountPayableMediaApproval), AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail.Properties.Comments.ToString))

                            Else

                                DataGridViewTV_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        End If

                    End If

                Else

                    DataGridViewTV_DistributionDetails.CurrentView.CloseEditorForUpdating()
                    ComboBoxControl_Office.Focus()

                End If

            End Using

        End Sub
        Private Sub DataGridViewTransactions_GLTransactions_RowDoubleClickEvent() Handles DataGridViewTransactions_GLTransactions.RowDoubleClickEvent

            Dim GLTransaction As Integer = Nothing

            If DataGridViewTransactions_GLTransactions.HasASelectedRow Then

                GLTransaction = DataGridViewTransactions_GLTransactions.CurrentView.GetRowCellValue(DataGridViewTransactions_GLTransactions.CurrentView.FocusedRowHandle, DataGridViewTransactions_GLTransactions.Columns(0))

                AdvantageFramework.FinanceAndAccounting.Presentation.GeneralLedgerTransactionDialog.ShowFormDialog(GLTransaction)

            End If

        End Sub
        Private Sub DateTimePickerControl_InvoiceDate_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles DateTimePickerControl_InvoiceDate.Leave

            If _ID = 0 AndAlso DateTimePickerControl_InvoiceDate.Value = #12:00:00 AM# Then

                DateTimePickerControl_InvoiceDate.Value = Now.ToShortDateString

            End If

        End Sub
        Private Sub DateTimePickerControl_InvoiceDate_ValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles DateTimePickerControl_InvoiceDate.ValueChanged

            CalculateDateToPay()

        End Sub
        Private Sub NumericInputControl_InvoiceAmount_EditValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumericInputControl_InvoiceAmount.EditValueChanged

            CalculateTotalAmount()
            CalculateTotalDiscount()

        End Sub
        Private Sub NumericInputControl_SalesTax_EditValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumericInputControl_SalesTax.EditValueChanged

            If NumericInputControl_SalesTax.EditValue Is Nothing AndAlso Not _IsClearing Then

                NumericInputControl_SalesTax.EditValue = 0

            End If

            CalculateTotalAmount()
            CalculateTotalDiscount()

        End Sub
        Private Sub NumericInputControl_DiscountPercentage_EditValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumericInputControl_DiscountPercentage.EditValueChanged

            CalculateTotalDiscount()

        End Sub
        Private Sub NumericInputControl_Discount_EditValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumericInputControl_Discount.EditValueChanged

            If _CalculatingDiscount = False Then

                If NumericInputControl_InvoiceAmount.EditValue IsNot Nothing OrElse NumericInputControl_SalesTax.EditValue IsNot Nothing Then

                    If (NumericInputControl_InvoiceAmount.EditValue + NumericInputControl_SalesTax.EditValue) <> 0 Then

                        NumericInputControl_DiscountPercentage.EditValue = FormatNumber((NumericInputControl_Discount.EditValue / (NumericInputControl_InvoiceAmount.EditValue + NumericInputControl_SalesTax.EditValue) * 100), 3)

                    End If

                End If

            End If

            CalculateCheckAmount()

        End Sub
        Private Sub NumericInputControl_InvoiceTotal_EditValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumericInputControl_InvoiceTotal.EditValueChanged

            CalculateCheckAmount()

        End Sub
        Private Sub NumericInputControl_VendorCurrencyRate_LostFocus(sender As Object, e As EventArgs) Handles NumericInputControl_VendorCurrencyRate.LostFocus

            RecalculateCurrencyDetail()

        End Sub
        Private Sub NumericInputControl_VendorCurrencyRate_Validating(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles NumericInputControl_VendorCurrencyRate.Validating

            If NumericInputControl_VendorCurrencyRate.EditValue = 0 Then

                AdvantageFramework.WinForm.MessageBox.Show("Rate cannot be zero.")
                e.Cancel = True

            Else

                CalculateCurrencyNonClient()

            End If

        End Sub
        Private Sub SearchableComboBoxControl_Vendor_EditValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles SearchableComboBoxControl_Vendor.EditValueChanged

            If Not _IsSetVendorMode AndAlso Not _IsLoading Then

                If _IsSetVendorMode AndAlso SearchableComboBoxControl_Vendor.HasASelectedValue Then

                    ClearControl(False)
                    SetVendorPayToAddress(Nothing)
                    SetInvoiceNumberDatasource(SearchableComboBoxControl_Vendor.GetSelectedValue)
                    RaiseEvent VendorInvoiceChanged()

                ElseIf Not _IsSetVendorMode AndAlso Not _IsLoading Then

                    If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                        If Me.FindForm.Modal = False Then

                            ClearControl(False)
                            SetVendorPayToAddress(Nothing)
                            SetInvoiceNumberDatasource(SearchableComboBoxControl_Vendor.GetSelectedValue)
                            EnableVendorSearchControls(False)

                        Else

                            SetInvoiceNumberDatasource(SearchableComboBoxControl_Vendor.GetSelectedValue)

                            SetVendorDefaults()

                        End If

                    Else

                        ClearControl()

                        TabItemAPDetails_NewspaperTab.Visible = True
                        TabItemAPDetails_MagazineTab.Visible = True
                        TabItemAPDetails_RadioTab.Visible = True
                        TabItemAPDetails_RadioDetailsTab.Visible = True
                        TabItemAPDetails_TVTab.Visible = True
                        TabItemAPDetails_TVDetailsTab.Visible = True
                        TabItemAPDetails_OutOfHomeTab.Visible = True
                        TabItemAPDetails_InternetTab.Visible = True

                    End If

                    RaiseEvent VendorInvoiceChanged()

                End If

            ElseIf _IsSetVendorMode AndAlso SearchableComboBoxControl_Vendor.HasASelectedValue Then

                ClearControl(False)
                SetVendorPayToAddress(Nothing)
                SetInvoiceNumberDatasource(SearchableComboBoxControl_Vendor.GetSelectedValue)
                RaiseEvent VendorInvoiceChanged()

            End If

        End Sub
        Private Sub SearchableComboBoxControl_Vendor_EditValueChanging(ByVal sender As Object, ByVal e As DevExpress.XtraEditors.Controls.ChangingEventArgs) Handles SearchableComboBoxControl_Vendor.EditValueChanging

            If Not _IsLoading AndAlso Not _IsClearing Then

                e.Cancel = Not CheckForUnsavedChanges()

            End If

        End Sub
        Private Sub TabControlControl_APDetails_SelectedTabChanged(sender As Object, e As DevComponents.DotNetBar.TabStripTabChangedEventArgs) Handles TabControlControl_APDetails.SelectedTabChanged

            If e.NewTab Is TabItemAPDetails_RadioDetailsTab Then

                SetupRadioBroadcastDetailsTab()
                ValidateRadioBroadcastDetails()

            ElseIf e.NewTab Is TabItemAPDetails_TVDetailsTab Then

                SetupTVBroadcastDetailsTab()
                ValidateTVBroadcastDetails()

            End If

            RaiseEvent SelectedTabChanged()

        End Sub
        Private Sub TabControlControl_APDetails_SelectedTabChanging(ByVal sender As Object, ByVal e As DevComponents.DotNetBar.TabStripTabChangingEventArgs) Handles TabControlControl_APDetails.SelectedTabChanging

            If _Session IsNot Nothing AndAlso Not _IsLoading AndAlso e.NewTab IsNot Nothing AndAlso e.NewTab.Name IsNot Nothing AndAlso e.NewTab.Name <> "" Then

                _SelectedTab = e.NewTab

                LoadAPDetails(e.NewTab)

            End If

        End Sub
        Private Sub TabControlControl_InvoiceDetails_SelectedTabChanging(sender As Object, e As DevComponents.DotNetBar.TabStripTabChangingEventArgs) Handles TabControlControl_InvoiceDetails.SelectedTabChanging

            If _Session IsNot Nothing AndAlso e.NewTab.Name IsNot Nothing AndAlso e.NewTab.Name <> "" Then

                LoadInvoiceDetails(e.NewTab)

            End If

        End Sub
        Private Sub TextBoxControl_InvoiceNumber_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles TextBoxControl_InvoiceNumber.Validating

            e.Cancel = ValidateInvoiceNumber()

        End Sub
        Private Sub TextBoxDropDownControl_Note_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBoxDropDownControl_Note.Enter

            Windows.Forms.SendKeys.Send("{TAB}")

        End Sub
        Private Sub ComboBoxControl_PostPeriod_SelectedValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBoxControl_PostPeriod.SelectedValueChanged

            ComboBoxControl_PostPeriodForMod.SelectedValue = ComboBoxControl_PostPeriod.SelectedValue

        End Sub
        Private Sub DataGridViewChecksWritten_ChecksWritten_RowDoubleClickEvent() Handles DataGridViewChecksWritten_ChecksWritten.RowDoubleClickEvent

            Dim CheckNumber As Integer = Nothing
            Dim BankCode As String = Nothing
            Dim AccountPayableID As Integer = Nothing

            If DataGridViewChecksWritten_ChecksWritten.HasASelectedRow Then

                CheckNumber = DataGridViewChecksWritten_ChecksWritten.CurrentView.GetRowCellValue(DataGridViewChecksWritten_ChecksWritten.CurrentView.FocusedRowHandle, DataGridViewChecksWritten_ChecksWritten.Columns(0))
                BankCode = DataGridViewChecksWritten_ChecksWritten.CurrentView.GetRowCellValue(DataGridViewChecksWritten_ChecksWritten.CurrentView.FocusedRowHandle, DataGridViewChecksWritten_ChecksWritten.Columns(3))
                AccountPayableID = DataGridViewChecksWritten_ChecksWritten.CurrentView.GetRowCellValue(DataGridViewChecksWritten_ChecksWritten.CurrentView.FocusedRowHandle, DataGridViewChecksWritten_ChecksWritten.Columns(4))

                AdvantageFramework.FinanceAndAccounting.Presentation.AccountsPayableCheckDetailDialog.ShowFormDialog(CheckNumber, BankCode, AccountPayableID)

            End If

        End Sub
        Private Sub DataGridViewInternet_DistributionDetails_AddNewRowEvent(RowObject As Object) Handles DataGridViewInternet_DistributionDetails.AddNewRowEvent

            DataGridViewInternet_DistributionDetails.SetUserEntryChanged()

        End Sub
        Private Sub DataGridViewInternet_DistributionDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewInternet_DistributionDetails.CellValueChangedEvent

            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing
            Dim UseCPM As Boolean = False

            If TypeOf DataGridViewInternet_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail Then

                AccountPayableInternetDistributionDetail = DirectCast(DataGridViewInternet_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ClientCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DivisionCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ProductCode.ToString Then

                    AccountPayableInternetDistributionDetail.InternetOrderNumber = Nothing
                    AccountPayableInternetDistributionDetail.InternetDetailLineNumber = Nothing
                    ClearInternetRow(e.RowHandle, AccountPayableInternetDistributionDetail)

                End If

                If AccountPayableInternetDistributionDetail.InternetOrderNumber <> 0 Then

                    If AccountPayableInternetDistributionDetail.CostType = "CPM" Then

                        UseCPM = True

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.Impressions.ToString Then

                        AccountPayableInternetDistributionDetail.Impressions = If(e.Value = 0, Nothing, e.Value)

                        If AccountPayableInternetDistributionDetail.Impressions Is Nothing Then

                            AccountPayableInternetDistributionDetail.Rate = Nothing

                            AccountPayableInternetDistributionDetail.ForeignRate = Nothing

                        End If

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableInternetDistributionDetail.Impressions, AccountPayableInternetDistributionDetail.Rate, AccountPayableInternetDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Quantity, UseCPM:=UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.DiscountAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.MarkupPercent, AccountPayableInternetDistributionDetail.GrossAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignRate.ToString Then

                        AccountPayableInternetDistributionDetail.ForeignRate = If(e.Value = 0, Nothing, e.Value)

                        If AccountPayableInternetDistributionDetail.ForeignRate Is Nothing Then

                            AccountPayableInternetDistributionDetail.Impressions = Nothing

                            AccountPayableInternetDistributionDetail.Rate = Nothing

                        Else

                            AccountPayableInternetDistributionDetail.Rate = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 4)

                        End If

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableInternetDistributionDetail.Impressions, AccountPayableInternetDistributionDetail.Rate, AccountPayableInternetDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Rate, UseCPM:=UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.DiscountAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.MarkupPercent, AccountPayableInternetDistributionDetail.GrossAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.Rate.ToString Then

                        AccountPayableInternetDistributionDetail.Rate = If(e.Value = 0, Nothing, e.Value)

                        If AccountPayableInternetDistributionDetail.Rate Is Nothing Then

                            AccountPayableInternetDistributionDetail.Impressions = Nothing

                            AccountPayableInternetDistributionDetail.ForeignRate = Nothing

                        Else

                            AccountPayableInternetDistributionDetail.ForeignRate = FormatNumber(AccountPayableInternetDistributionDetail.Rate / NumericInputControl_VendorCurrencyRate.GetValue, 4)

                        End If

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableInternetDistributionDetail.Impressions, AccountPayableInternetDistributionDetail.Rate, AccountPayableInternetDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Rate, UseCPM:=UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.DiscountAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.MarkupPercent, AccountPayableInternetDistributionDetail.GrossAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                        AccountPayableInternetDistributionDetail.GrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(AccountPayableInternetDistributionDetail.GrossAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionPercent, AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                        AdvantageFramework.BillingSystem.APInternetCalculateQuantityRateAndAmount(AccountPayableInternetDistributionDetail.Impressions, AccountPayableInternetDistributionDetail.Rate, AccountPayableInternetDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, UseCPM:=UseCPM)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.GrossAmount.ToString Then

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(CDec(e.Value), AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionPercent, AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                        AdvantageFramework.BillingSystem.APInternetCalculateQuantityRateAndAmount(AccountPayableInternetDistributionDetail.Impressions, AccountPayableInternetDistributionDetail.Rate, AccountPayableInternetDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, UseCPM:=UseCPM)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignNetAmount.ToString Then

                        AccountPayableInternetDistributionDetail.NetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.BillingSystem.APInternetCalculateQuantityRateAndAmount(AccountPayableInternetDistributionDetail.Impressions, AccountPayableInternetDistributionDetail.Rate, AccountPayableInternetDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, UseCPM:=UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.DiscountAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.MarkupPercent, AccountPayableInternetDistributionDetail.GrossAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NetAmount.ToString Then

                        AccountPayableInternetDistributionDetail.NetAmount = e.Value

                        AdvantageFramework.BillingSystem.APInternetCalculateQuantityRateAndAmount(AccountPayableInternetDistributionDetail.Impressions, AccountPayableInternetDistributionDetail.Rate, AccountPayableInternetDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, UseCPM:=UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.DiscountAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.MarkupPercent, AccountPayableInternetDistributionDetail.GrossAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignDiscountAmount.ToString Then

                        If e.Value < 0 Then

                            AccountPayableInternetDistributionDetail.ForeignDiscountAmount = Math.Abs(e.Value)

                        End If

                        AccountPayableInternetDistributionDetail.DiscountAmount = FormatNumber(AccountPayableInternetDistributionDetail.ForeignDiscountAmount * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.DiscountAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.MarkupPercent, AccountPayableInternetDistributionDetail.GrossAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DiscountAmount.ToString Then

                        If e.Value < 0 Then

                            AccountPayableInternetDistributionDetail.DiscountAmount = Math.Abs(e.Value)

                        End If

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableInternetDistributionDetail.NetAmount, AccountPayableInternetDistributionDetail.DiscountAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.MarkupPercent, AccountPayableInternetDistributionDetail.GrossAmount, AccountPayableInternetDistributionDetail.AccountPayableInternet.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignNetCharges.ToString Then

                        AccountPayableInternetDistributionDetail.NetCharges = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignVendorTax.ToString Then

                        AccountPayableInternetDistributionDetail.VendorTax = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.VendorTax.ToString OrElse
                            e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ForeignVendorTax.ToString Then

                        AccountPayableInternetDistributionDetail.ReCalculate(False)

                    Else

                        AccountPayableInternetDistributionDetail.ReCalculate(True)

                    End If

                    If e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableInternetDistributionDetail.NewApprovalStatus Is Nothing AndAlso
                            RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.Internet, AccountPayableInternetDistributionDetail.PreviouslyPosted + AccountPayableInternetDistributionDetail.DisbursedAmount, AccountPayableInternetDistributionDetail.OrderNetAmount) Then

                        AccountPayableInternetDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.PendingApproval
                        CheckBoxControl_OnHold.Checked = True

                    ElseIf e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableInternetDistributionDetail.NewApprovalStatus IsNot Nothing AndAlso
                            DataGridViewInternetDistributionDetailIsNewItemRow AndAlso
                            Not RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.Internet, AccountPayableInternetDistributionDetail.PreviouslyPosted + AccountPayableInternetDistributionDetail.DisbursedAmount, AccountPayableInternetDistributionDetail.OrderNetAmount) Then

                        AccountPayableInternetDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NewApprovalStatus.ToString Then

                        If e.Value Is Nothing Then

                            AccountPayableInternetDistributionDetail.NewApprovalComments = Nothing

                        ElseIf e.Value = 1 Then

                            CheckBoxControl_OnHold.Checked = True

                        Else

                            CheckBoxControl_OnHold.Checked = False

                        End If

                    End If

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewInternet_DistributionDetails_ColumnValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs, ViaCellValueChangedEvent As Boolean) Handles DataGridViewInternet_DistributionDetails.ColumnValueChangedEvent

            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim OrderLineNumber As Short = Nothing
            Dim PipePosition As Integer = Nothing
            Dim SalesTax As AdvantageFramework.Database.Entities.SalesTax = Nothing

            If TypeOf DataGridViewInternet_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail Then

                AccountPayableInternetDistributionDetail = DirectCast(DataGridViewInternet_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetOrderNumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing Then

                        If IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                            SetInternetOrderNumber(e.Value, False, e.RowHandle)

                        Else

                            PipePosition = InStr(1, e.Value, "|")

                            If PipePosition > 0 Then

                                OrderNumber = Strings.Left(e.Value, PipePosition - 1)
                                OrderLineNumber = Strings.Mid(e.Value, PipePosition + 1)

                                SetInternetOrderNumber(OrderNumber, True, e.RowHandle, OrderLineNumber)

                            Else

                                SetInternetOrderNumber(e.Value, True, e.RowHandle)

                            End If

                        End If

                    Else

                        AccountPayableInternetDistributionDetail.InternetOrderNumber = Nothing
                        AccountPayableInternetDistributionDetail.InternetDetailLineNumber = Nothing

                        ClearInternetRow(e.RowHandle, AccountPayableInternetDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetDetailLineNumber.ToString Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                        SetInternetOrderLineNumber(e.Value, e.RowHandle)

                    Else

                        AccountPayableInternetDistributionDetail.InternetDetailLineNumber = Nothing

                        ClearInternetRow(e.RowHandle, AccountPayableInternetDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.SalesTaxCode.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing And e.Value <> "" Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            SalesTax = AdvantageFramework.Database.Procedures.SalesTax.LoadBySalesTaxCode(DbContext, e.Value)

                        End Using

                        If SalesTax IsNot Nothing Then

                            AccountPayableInternetDistributionDetail.AccountPayableInternet.SalesTaxCode = e.Value
                            AccountPayableInternetDistributionDetail.AccountPayableInternet.CityTaxPercent = SalesTax.CityPercent.GetValueOrDefault(0)
                            AccountPayableInternetDistributionDetail.AccountPayableInternet.CountyTaxPercent = SalesTax.CountyPercent.GetValueOrDefault(0)
                            AccountPayableInternetDistributionDetail.AccountPayableInternet.StateTaxPercent = SalesTax.StatePercent.GetValueOrDefault(0)
                            AccountPayableInternetDistributionDetail.AccountPayableInternet.IsResaleTax = SalesTax.Resale.GetValueOrDefault(0)

                        End If

                    Else

                        AccountPayableInternetDistributionDetail.AccountPayableInternet.SalesTaxCode = Nothing
                        AccountPayableInternetDistributionDetail.AccountPayableInternet.CityTaxPercent = 0
                        AccountPayableInternetDistributionDetail.AccountPayableInternet.CountyTaxPercent = 0
                        AccountPayableInternetDistributionDetail.AccountPayableInternet.StateTaxPercent = 0
                        AccountPayableInternetDistributionDetail.AccountPayableInternet.IsResaleTax = Nothing

                    End If

                    AccountPayableInternetDistributionDetail.ReCalculate(True)

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewInternet_DistributionDetails_EmbeddedNavigatorButtonClick(sender As Object, e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewInternet_DistributionDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewInternet()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteSelectedInternet()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Custom

                        AddMultipleOrders(MultipleOrderTypes.Internet)

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewInternet_DistributionDetails_InitNewRowEvent(sender As Object, e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewInternet_DistributionDetails.InitNewRowEvent

            DirectCast(DataGridViewInternet_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail).CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

            RaiseEvent InternetInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewInternet_DistributionDetails_QueryPopupNeedDatasourceEvent(FieldName As String, ByRef OverrideDefaultDatasource As Boolean, ByRef Datasource As Object) Handles DataGridViewInternet_DistributionDetails.QueryPopupNeedDatasourceEvent

            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing

            OverrideDefaultDatasource = True

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If DataGridViewInternet_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ClientCode.ToString Then

                        Datasource = AdvantageFramework.Database.Procedures.Client.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext).ToList

                    ElseIf DataGridViewInternet_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DivisionCode.ToString Then

                        ClientCode = DataGridViewInternet_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ClientCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Division.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext)
                                      Where Entity.ClientCode = ClientCode
                                      Select Entity).ToList

                    ElseIf DataGridViewInternet_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ProductCode.ToString Then

                        ClientCode = DataGridViewInternet_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ClientCode.ToString)
                        DivisionCode = DataGridViewInternet_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DivisionCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Product.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext, False, True)
                                      Where Entity.ClientCode = ClientCode AndAlso
                                            Entity.DivisionCode = DivisionCode
                                      Select Entity).ToList

                    End If

                End Using

            End Using

        End Sub
        Private Sub DataGridViewInternet_DistributionDetails_RowCountChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewInternet_DistributionDetails.RowCountChangedEvent

            EnableDisableOffice()

            If Not _IsLoading Then

                CalculateTotalAmount()

            End If

        End Sub
        Private Sub DataGridViewInternet_DistributionDetails_SelectionChangedEvent(sender As Object, e As System.EventArgs) Handles DataGridViewInternet_DistributionDetails.SelectionChangedEvent

            RaiseEvent InternetSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewInternet_DistributionDetails_ShownEditorEvent(sender As Object, e As System.EventArgs) Handles DataGridViewInternet_DistributionDetails.ShownEditorEvent

            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim MemoExEdit As DevExpress.XtraEditors.MemoExEdit = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing
            Dim ProductCode As String = Nothing
            Dim OfficeCode As String = Nothing
            Dim AllowContinue As Boolean = True
            Dim AllowVendorNotOnOrder As Boolean = False
            Dim AccountPayableInternetDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                    If ComboBoxControl_Office.HasASelectedValue Then

                        OfficeCode = ComboBoxControl_Office.GetSelectedValue

                    Else

                        AdvantageFramework.WinForm.MessageBox.Show("Please select an office.")
                        AllowContinue = False

                    End If

                End If

                AccountPayableInternetDistributionDetail = DirectCast(DataGridViewInternet_DistributionDetails.CurrentView.GetRow(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail)

                If AllowContinue Then

                    If TypeOf DataGridViewInternet_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.GridLookUpEdit Then

                        GridLookUpEdit = DataGridViewInternet_DistributionDetails.CurrentView.ActiveEditor

                        If DataGridViewInternet_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetOrderNumber.ToString Then

                            ClientCode = DataGridViewInternet_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ClientCode.ToString)
                            DivisionCode = DataGridViewInternet_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.DivisionCode.ToString)
                            ProductCode = DataGridViewInternet_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.ProductCode.ToString)

                            If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                                AllowVendorNotOnOrder = AdvantageFramework.Agency.GetOptionAPAllowOrderNotMatchingVendor(DbContext)

                                BindingSource = New System.Windows.Forms.BindingSource

                                BindingSource.DataSource = AdvantageFramework.AccountPayable.GetAvailableInternetOrders(DbContext, AllowVendorNotOnOrder, SearchableComboBoxControl_Vendor.GetSelectedValue, OfficeCode,
                                                                                                                        ClientCode, DivisionCode, ProductCode, Nothing, Nothing, Nothing)

                                GridLookUpEdit.Properties.ValueMember = "ID"
                                GridLookUpEdit.Properties.DataSource = BindingSource

                                If AllowVendorNotOnOrder Then

                                    GridLookUpEdit.Properties.View.ActiveFilterString = "VendorCode = '" & SearchableComboBoxControl_Vendor.GetSelectedValue & "'"

                                ElseIf GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableInternetOrders.Properties.VendorCode.ToString) IsNot Nothing Then

                                    GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableInternetOrders.Properties.VendorCode.ToString).Visible = False

                                End If

                            End If

                        ElseIf DataGridViewInternet_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetDetailLineNumber.ToString Then

                            OrderNumber = DataGridViewInternet_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewInternet_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.InternetOrderNumber.ToString)

                            If OrderNumber <> 0 Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.InternetOrderDetail.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber))

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            Else

                                DataGridViewInternet_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        ElseIf DataGridViewInternet_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.SalesTaxCode.ToString Then

                            BindingSource = New System.Windows.Forms.BindingSource
                            BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.SalesTax.LoadAllActive(DbContext))

                            GridLookUpEdit.Properties.DataSource = BindingSource

                        End If

                    ElseIf TypeOf DataGridViewInternet_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.MemoExEdit Then

                        If DataGridViewInternet_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.NewApprovalComments.ToString Then

                            If AccountPayableInternetDistributionDetail IsNot Nothing AndAlso AccountPayableInternetDistributionDetail.NewApprovalStatus IsNot Nothing Then

                                MemoExEdit = DataGridViewInternet_DistributionDetails.CurrentView.ActiveEditor
                                MemoExEdit.Properties.MaxLength = AdvantageFramework.BaseClasses.Entity.LoadPropertyMaxLength(AdvantageFramework.BaseClasses.Entity.LoadProperty(GetType(AdvantageFramework.Database.Entities.AccountPayableMediaApproval), AdvantageFramework.AccountPayable.Classes.AccountPayableInternetDistributionDetail.Properties.Comments.ToString))

                            Else

                                DataGridViewInternet_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        End If

                    End If

                Else

                    DataGridViewInternet_DistributionDetails.CurrentView.CloseEditorForUpdating()
                    ComboBoxControl_Office.Focus()

                End If

            End Using

        End Sub
        Private Sub DataGridViewMagazine_DistributionDetails_AddNewRowEvent(ByVal RowObject As Object) Handles DataGridViewMagazine_DistributionDetails.AddNewRowEvent

            DataGridViewMagazine_DistributionDetails.SetUserEntryChanged()

        End Sub
        Private Sub DataGridViewMagazine_DistributionDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewMagazine_DistributionDetails.CellValueChangedEvent

            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing

            If TypeOf DataGridViewMagazine_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail Then

                AccountPayableMagazineDistributionDetail = DirectCast(DataGridViewMagazine_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ClientCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DivisionCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ProductCode.ToString Then

                    AccountPayableMagazineDistributionDetail.OrderNumber = Nothing
                    AccountPayableMagazineDistributionDetail.OrderLineNumber = Nothing
                    ClearMagazineRow(e.RowHandle, AccountPayableMagazineDistributionDetail)

                End If

                If AccountPayableMagazineDistributionDetail.OrderNumber <> 0 Then

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.GrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.NetAmount = AdvantageFramework.AccountPayable.GrossToNet(AccountPayableMagazineDistributionDetail.GrossAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.GrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.NetAmount = AdvantageFramework.AccountPayable.GrossToNet(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignBleedGrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.BleedGrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.BleedNetAmount = AdvantageFramework.AccountPayable.GrossToNet(AccountPayableMagazineDistributionDetail.BleedGrossAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.BleedGrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.BleedNetAmount = AdvantageFramework.AccountPayable.GrossToNet(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPositionGrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.PositionGrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.PositionNetAmount = AdvantageFramework.AccountPayable.GrossToNet(AccountPayableMagazineDistributionDetail.PositionGrossAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PositionGrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.PositionNetAmount = AdvantageFramework.AccountPayable.GrossToNet(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPremiumGrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.PremiumGrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.PremiumNetAmount = AdvantageFramework.AccountPayable.GrossToNet(AccountPayableMagazineDistributionDetail.PremiumGrossAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PremiumGrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.PremiumNetAmount = AdvantageFramework.AccountPayable.GrossToNet(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignColorGrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.ColorGrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.ColorNetAmount = AdvantageFramework.AccountPayable.GrossToNet(AccountPayableMagazineDistributionDetail.ColorGrossAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ColorGrossAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.ColorNetAmount = AdvantageFramework.AccountPayable.GrossToNet(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignNetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.NetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.GrossAmount = AdvantageFramework.AccountPayable.NetToGross(AccountPayableMagazineDistributionDetail.NetAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.GrossAmount = AdvantageFramework.AccountPayable.NetToGross(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignBleedNetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.BleedNetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.BleedGrossAmount = AdvantageFramework.AccountPayable.NetToGross(AccountPayableMagazineDistributionDetail.BleedNetAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.BleedNetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.BleedGrossAmount = AdvantageFramework.AccountPayable.NetToGross(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPositionNetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.PositionNetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.PositionGrossAmount = AdvantageFramework.AccountPayable.NetToGross(AccountPayableMagazineDistributionDetail.PositionNetAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PositionNetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.PositionGrossAmount = AdvantageFramework.AccountPayable.NetToGross(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignPremiumNetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.PremiumNetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.PremiumGrossAmount = AdvantageFramework.AccountPayable.NetToGross(AccountPayableMagazineDistributionDetail.PremiumNetAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.PremiumNetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.PremiumGrossAmount = AdvantageFramework.AccountPayable.NetToGross(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignColorNetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.ColorNetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AccountPayableMagazineDistributionDetail.ColorGrossAmount = AdvantageFramework.AccountPayable.NetToGross(AccountPayableMagazineDistributionDetail.ColorNetAmount, AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ColorNetAmount.ToString Then

                        AccountPayableMagazineDistributionDetail.ColorGrossAmount = AdvantageFramework.AccountPayable.NetToGross(CDec(e.Value), AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CommissionPercent.GetValueOrDefault(0))

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignDiscountLineNet.ToString Then

                        If e.Value < 0 Then

                            AccountPayableMagazineDistributionDetail.ForeignDiscountLineNet = Math.Abs(e.Value)

                        End If

                        AccountPayableMagazineDistributionDetail.DiscountLN = FormatNumber(AccountPayableMagazineDistributionDetail.ForeignDiscountLineNet * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DiscountLN.ToString Then

                        If e.Value < 0 Then

                            AccountPayableMagazineDistributionDetail.DiscountLN = Math.Abs(e.Value)

                        End If

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.VendorTax.ToString OrElse
                            e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ForeignVendorTax.ToString Then

                        AccountPayableMagazineDistributionDetail.ReCalculate(False)

                    Else

                        AccountPayableMagazineDistributionDetail.ReCalculate(True)

                    End If

                    If e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableMagazineDistributionDetail.NewApprovalStatus Is Nothing AndAlso
                            RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.Print, AccountPayableMagazineDistributionDetail.PreviouslyPosted + AccountPayableMagazineDistributionDetail.DisbursedAmount, AccountPayableMagazineDistributionDetail.OrderNetAmount) Then

                        AccountPayableMagazineDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.PendingApproval
                        CheckBoxControl_OnHold.Checked = True

                    ElseIf e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableMagazineDistributionDetail.NewApprovalStatus IsNot Nothing AndAlso
                            DataGridViewMagazineDistributionDetailIsNewItemRow AndAlso
                            Not RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.Print, AccountPayableMagazineDistributionDetail.PreviouslyPosted + AccountPayableMagazineDistributionDetail.DisbursedAmount, AccountPayableMagazineDistributionDetail.OrderNetAmount) Then

                        AccountPayableMagazineDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NewApprovalStatus.ToString Then

                        If e.Value Is Nothing Then

                            AccountPayableMagazineDistributionDetail.NewApprovalComments = Nothing

                        ElseIf e.Value = 1 Then

                            CheckBoxControl_OnHold.Checked = True

                        Else

                            CheckBoxControl_OnHold.Checked = False

                        End If

                    End If

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewMagazine_DistributionDetails_ColumnValueChangedEvent(ByVal e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs, ByVal ViaCellValueChangedEvent As Boolean) Handles DataGridViewMagazine_DistributionDetails.ColumnValueChangedEvent

            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim OrderLineNumber As Short = Nothing
            Dim PipePosition As Integer = Nothing
            Dim SalesTax As AdvantageFramework.Database.Entities.SalesTax = Nothing

            If TypeOf DataGridViewMagazine_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail Then

                AccountPayableMagazineDistributionDetail = DirectCast(DataGridViewMagazine_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderNumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing Then

                        If IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                            SetMagazineOrderNumber(e.Value, False, e.RowHandle)

                        Else

                            PipePosition = InStr(1, e.Value, "|")

                            If PipePosition > 0 Then

                                OrderNumber = Strings.Left(e.Value, PipePosition - 1)
                                OrderLineNumber = Strings.Mid(e.Value, PipePosition + 1)

                                SetMagazineOrderNumber(OrderNumber, True, e.RowHandle, OrderLineNumber)

                            Else

                                SetMagazineOrderNumber(e.Value, True, e.RowHandle)

                            End If

                        End If

                    Else

                        AccountPayableMagazineDistributionDetail.OrderNumber = Nothing
                        AccountPayableMagazineDistributionDetail.OrderLineNumber = Nothing

                        ClearMagazineRow(e.RowHandle, AccountPayableMagazineDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderLineNumber.ToString Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                        SetMagazineOrderLineNumber(e.Value, e.RowHandle)

                    Else

                        AccountPayableMagazineDistributionDetail.OrderLineNumber = Nothing

                        ClearMagazineRow(e.RowHandle, AccountPayableMagazineDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.SalesTaxCode.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing And e.Value <> "" Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            SalesTax = AdvantageFramework.Database.Procedures.SalesTax.LoadBySalesTaxCode(DbContext, e.Value)

                        End Using

                        If SalesTax IsNot Nothing Then

                            AccountPayableMagazineDistributionDetail.AccountPayableMagazine.SalesTaxCode = e.Value
                            AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CityTaxPercent = SalesTax.CityPercent.GetValueOrDefault(0)
                            AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CountyTaxPercent = SalesTax.CountyPercent.GetValueOrDefault(0)
                            AccountPayableMagazineDistributionDetail.AccountPayableMagazine.StateTaxPercent = SalesTax.StatePercent.GetValueOrDefault(0)
                            AccountPayableMagazineDistributionDetail.AccountPayableMagazine.IsResaleTax = SalesTax.Resale.GetValueOrDefault(0)

                        End If

                    Else

                        AccountPayableMagazineDistributionDetail.AccountPayableMagazine.SalesTaxCode = Nothing
                        AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CityTaxPercent = 0
                        AccountPayableMagazineDistributionDetail.AccountPayableMagazine.CountyTaxPercent = 0
                        AccountPayableMagazineDistributionDetail.AccountPayableMagazine.StateTaxPercent = 0
                        AccountPayableMagazineDistributionDetail.AccountPayableMagazine.IsResaleTax = Nothing

                    End If

                    AccountPayableMagazineDistributionDetail.ReCalculate(True)

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewMagazine_DistributionDetails_EmbeddedNavigatorButtonClick(ByVal sender As Object, ByVal e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewMagazine_DistributionDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewMagazine()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteSelectedMagazine()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Custom

                        AddMultipleOrders(MultipleOrderTypes.Magazine)

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewMagazine_DistributionDetails_InitNewRowEvent(ByVal sender As Object, ByVal e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewMagazine_DistributionDetails.InitNewRowEvent

            DirectCast(DataGridViewMagazine_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail).CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

            RaiseEvent MagazineInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewMagazine_DistributionDetails_QueryPopupNeedDatasourceEvent(FieldName As String, ByRef OverrideDefaultDatasource As Boolean, ByRef Datasource As Object) Handles DataGridViewMagazine_DistributionDetails.QueryPopupNeedDatasourceEvent

            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing

            OverrideDefaultDatasource = True

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ClientCode.ToString Then

                        Datasource = AdvantageFramework.Database.Procedures.Client.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext).ToList

                    ElseIf DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DivisionCode.ToString Then

                        ClientCode = DataGridViewMagazine_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ClientCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Division.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext)
                                      Where Entity.ClientCode = ClientCode
                                      Select Entity).ToList

                    ElseIf DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ProductCode.ToString Then

                        ClientCode = DataGridViewMagazine_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ClientCode.ToString)
                        DivisionCode = DataGridViewMagazine_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DivisionCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Product.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext, False, True)
                                      Where Entity.ClientCode = ClientCode AndAlso
                                            Entity.DivisionCode = DivisionCode
                                      Select Entity).ToList

                    End If

                End Using

            End Using

        End Sub
        Private Sub DataGridViewMagazine_DistributionDetails_RowCountChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewMagazine_DistributionDetails.RowCountChangedEvent

            EnableDisableOffice()

            If Not _IsLoading Then

                CalculateTotalAmount()

            End If

        End Sub
        Private Sub DataGridViewMagazine_DistributionDetails_SelectionChangedEvent(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridViewMagazine_DistributionDetails.SelectionChangedEvent

            RaiseEvent MagazineSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewMagazine_DistributionDetails_ShownEditorEvent(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridViewMagazine_DistributionDetails.ShownEditorEvent

            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim MemoExEdit As DevExpress.XtraEditors.MemoExEdit = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing
            Dim ProductCode As String = Nothing
            Dim OfficeCode As String = Nothing
            Dim AllowContinue As Boolean = True
            Dim AllowVendorNotOnOrder As Boolean = False
            Dim AccountPayableMagazineDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                    If ComboBoxControl_Office.HasASelectedValue Then

                        OfficeCode = ComboBoxControl_Office.GetSelectedValue

                    Else

                        AdvantageFramework.WinForm.MessageBox.Show("Please select an office.")
                        AllowContinue = False

                    End If

                End If

                AccountPayableMagazineDistributionDetail = DirectCast(DataGridViewMagazine_DistributionDetails.CurrentView.GetRow(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail)

                If AllowContinue Then

                    If TypeOf DataGridViewMagazine_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.GridLookUpEdit Then

                        GridLookUpEdit = DataGridViewMagazine_DistributionDetails.CurrentView.ActiveEditor

                        If DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderNumber.ToString Then

                            ClientCode = DataGridViewMagazine_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ClientCode.ToString)
                            DivisionCode = DataGridViewMagazine_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.DivisionCode.ToString)
                            ProductCode = DataGridViewMagazine_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.ProductCode.ToString)

                            If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                                AllowVendorNotOnOrder = AdvantageFramework.Agency.GetOptionAPAllowOrderNotMatchingVendor(DbContext)

                                BindingSource = New System.Windows.Forms.BindingSource

                                BindingSource.DataSource = AdvantageFramework.AccountPayable.GetAvailableMagazineOrders(DbContext, AllowVendorNotOnOrder, SearchableComboBoxControl_Vendor.GetSelectedValue, OfficeCode,
                                                                                                                        ClientCode, DivisionCode, ProductCode, Nothing, Nothing, Nothing)

                                GridLookUpEdit.Properties.ValueMember = "ID"
                                GridLookUpEdit.Properties.DataSource = BindingSource

                                If AllowVendorNotOnOrder Then

                                    GridLookUpEdit.Properties.View.ActiveFilterString = "VendorCode = '" & SearchableComboBoxControl_Vendor.GetSelectedValue & "'"

                                ElseIf GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableMagazineOrders.Properties.VendorCode.ToString) IsNot Nothing Then

                                    GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableMagazineOrders.Properties.VendorCode.ToString).Visible = False

                                End If

                            End If

                        ElseIf DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderLineNumber.ToString Then

                            OrderNumber = DataGridViewMagazine_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewMagazine_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.OrderNumber.ToString)

                            If OrderNumber <> 0 Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.MagazineDetailView.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber))

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            Else

                                DataGridViewMagazine_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        ElseIf DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.SalesTaxCode.ToString Then

                            BindingSource = New System.Windows.Forms.BindingSource
                            BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.SalesTax.LoadAllActive(DbContext))

                            GridLookUpEdit.Properties.DataSource = BindingSource

                        End If

                    ElseIf TypeOf DataGridViewMagazine_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.MemoExEdit Then

                        If DataGridViewMagazine_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.NewApprovalComments.ToString Then

                            If AccountPayableMagazineDistributionDetail IsNot Nothing AndAlso AccountPayableMagazineDistributionDetail.NewApprovalStatus IsNot Nothing Then

                                MemoExEdit = DataGridViewMagazine_DistributionDetails.CurrentView.ActiveEditor
                                MemoExEdit.Properties.MaxLength = AdvantageFramework.BaseClasses.Entity.LoadPropertyMaxLength(AdvantageFramework.BaseClasses.Entity.LoadProperty(GetType(AdvantageFramework.Database.Entities.AccountPayableMediaApproval), AdvantageFramework.AccountPayable.Classes.AccountPayableMagazineDistributionDetail.Properties.Comments.ToString))

                            Else

                                DataGridViewMagazine_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        End If

                    End If

                Else

                    DataGridViewMagazine_DistributionDetails.CurrentView.CloseEditorForUpdating()
                    ComboBoxControl_Office.Focus()

                End If

            End Using

        End Sub
        Private Sub DataGridViewNewspaper_DistributionDetails_AddNewRowEvent(RowObject As Object) Handles DataGridViewNewspaper_DistributionDetails.AddNewRowEvent

            DataGridViewNewspaper_DistributionDetails.SetUserEntryChanged()

        End Sub
        Private Sub DataGridViewNewspaper_DistributionDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewNewspaper_DistributionDetails.CellValueChangedEvent

            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing

            If TypeOf DataGridViewNewspaper_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail Then

                AccountPayableNewspaperDistributionDetail = DirectCast(DataGridViewNewspaper_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)

                AccountPayableNewspaperDistributionDetail.CurrencyRate = NumericInputControl_VendorCurrencyRate.EditValue

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ClientCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DivisionCode.ToString OrElse
                        e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ProductCode.ToString Then

                    AccountPayableNewspaperDistributionDetail.OrderNumber = Nothing
                    AccountPayableNewspaperDistributionDetail.OrderLineNumber = Nothing
                    ClearNewspaperRow(e.RowHandle, AccountPayableNewspaperDistributionDetail)

                End If

                If AccountPayableNewspaperDistributionDetail.OrderNumber <> 0 Then

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.PrintLines.ToString Then

                        AccountPayableNewspaperDistributionDetail.PrintLines = If(e.Value = 0, Nothing, e.Value)

                        If AccountPayableNewspaperDistributionDetail.PrintLines Is Nothing Then

                            AccountPayableNewspaperDistributionDetail.Rate = Nothing

                            AccountPayableNewspaperDistributionDetail.ForeignRate = Nothing

                        End If

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.PrintLines, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.Rate, AccountPayableNewspaperDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Quantity, 2, UseCPM:=AccountPayableNewspaperDistributionDetail.UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.DiscountLN, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.MarkupPercent, AccountPayableNewspaperDistributionDetail.GrossAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignRate.ToString Then

                        AccountPayableNewspaperDistributionDetail.ForeignRate = If(e.Value = 0, Nothing, e.Value)

                        If AccountPayableNewspaperDistributionDetail.ForeignRate Is Nothing Then

                            AccountPayableNewspaperDistributionDetail.PrintLines = Nothing

                            AccountPayableNewspaperDistributionDetail.Rate = Nothing

                        Else

                            AccountPayableNewspaperDistributionDetail.Rate = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 4)

                        End If

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableNewspaperDistributionDetail.PrintLines, AccountPayableNewspaperDistributionDetail.Rate, AccountPayableNewspaperDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Rate, UseCPM:=AccountPayableNewspaperDistributionDetail.UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.DiscountLN, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.MarkupPercent, AccountPayableNewspaperDistributionDetail.GrossAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.Rate.ToString Then

                        AccountPayableNewspaperDistributionDetail.Rate = If(e.Value = 0, Nothing, e.Value)

                        If AccountPayableNewspaperDistributionDetail.Rate Is Nothing Then

                            AccountPayableNewspaperDistributionDetail.PrintLines = Nothing

                            AccountPayableNewspaperDistributionDetail.ForeignRate = Nothing

                        Else

                            AccountPayableNewspaperDistributionDetail.ForeignRate = FormatNumber(AccountPayableNewspaperDistributionDetail.Rate / NumericInputControl_VendorCurrencyRate.GetValue, 4)

                        End If

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.PrintLines, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.Rate, AccountPayableNewspaperDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Rate, 2, UseCPM:=AccountPayableNewspaperDistributionDetail.UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.DiscountLN, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.MarkupPercent, AccountPayableNewspaperDistributionDetail.GrossAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignGrossAmount.ToString Then

                        AccountPayableNewspaperDistributionDetail.GrossAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(AccountPayableNewspaperDistributionDetail.GrossAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionPercent, AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.PrintLines, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.Rate, AccountPayableNewspaperDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, 2, UseCPM:=AccountPayableNewspaperDistributionDetail.UseCPM)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.GrossAmount.ToString Then

                        AdvantageFramework.AccountPayable.CalculateNetAndCommission(CDec(e.Value), AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionPercent, AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.PrintLines, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.Rate, AccountPayableNewspaperDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, 2, UseCPM:=AccountPayableNewspaperDistributionDetail.UseCPM)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignNetAmount.ToString Then

                        AccountPayableNewspaperDistributionDetail.NetAmount = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.PrintLines, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.Rate, AccountPayableNewspaperDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, 2, UseCPM:=AccountPayableNewspaperDistributionDetail.UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.DiscountLN, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.MarkupPercent, AccountPayableNewspaperDistributionDetail.GrossAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NetAmount.ToString Then

                        AdvantageFramework.BillingSystem.CalculateQuantityRateAndAmount(AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.PrintLines, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.Rate, AccountPayableNewspaperDistributionDetail.NetAmount, BillingSystem.QtyRateAmount.Amount, 2, UseCPM:=AccountPayableNewspaperDistributionDetail.UseCPM)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.DiscountLN, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.MarkupPercent, AccountPayableNewspaperDistributionDetail.GrossAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignDiscountLineNet.ToString Then

                        If e.Value < 0 Then

                            AccountPayableNewspaperDistributionDetail.ForeignDiscountLineNet = Math.Abs(e.Value)

                        End If

                        AccountPayableNewspaperDistributionDetail.DiscountLN = FormatNumber(AccountPayableNewspaperDistributionDetail.ForeignDiscountLineNet * NumericInputControl_VendorCurrencyRate.GetValue, 2)

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.DiscountLN, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.MarkupPercent, AccountPayableNewspaperDistributionDetail.GrossAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                    ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DiscountLN.ToString Then

                        If e.Value < 0 Then

                            AccountPayableNewspaperDistributionDetail.DiscountLN = Math.Abs(e.Value)

                        End If

                        AdvantageFramework.AccountPayable.CalculateGrossAndCommission(AccountPayableNewspaperDistributionDetail.NetAmount, AccountPayableNewspaperDistributionDetail.DiscountLN, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.MarkupPercent, AccountPayableNewspaperDistributionDetail.GrossAmount, AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CommissionAmount)

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.VendorTax.ToString OrElse
                            e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ForeignVendorTax.ToString Then

                        AccountPayableNewspaperDistributionDetail.ReCalculate(False)

                    Else

                        AccountPayableNewspaperDistributionDetail.ReCalculate(True)

                    End If

                    If e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableNewspaperDistributionDetail.NewApprovalStatus Is Nothing AndAlso
                            RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.Print, AccountPayableNewspaperDistributionDetail.PreviouslyPosted + AccountPayableNewspaperDistributionDetail.DisbursedAmount, AccountPayableNewspaperDistributionDetail.OrderNetAmount) Then

                        AccountPayableNewspaperDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.PendingApproval

                        CheckBoxControl_OnHold.Checked = True

                    ElseIf e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NewApprovalStatus.ToString AndAlso
                            e.Column.FieldName <> AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NewApprovalComments.ToString AndAlso
                            AccountPayableNewspaperDistributionDetail.NewApprovalStatus IsNot Nothing AndAlso
                            DataGridViewNewspaperDistributionDetailIsNewItemRow AndAlso
                            Not RequiresMediaApproval(AdvantageFramework.AccountPayable.MediaType.Print, AccountPayableNewspaperDistributionDetail.PreviouslyPosted + AccountPayableNewspaperDistributionDetail.DisbursedAmount, AccountPayableNewspaperDistributionDetail.OrderNetAmount) Then

                        AccountPayableNewspaperDistributionDetail.NewApprovalStatus = AdvantageFramework.Database.Entities.MediaApprovalStatusPendingOnly.None

                    End If

                    If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NewApprovalStatus.ToString Then

                        If e.Value Is Nothing Then

                            AccountPayableNewspaperDistributionDetail.NewApprovalComments = Nothing

                        ElseIf e.Value = 1 Then

                            CheckBoxControl_OnHold.Checked = True

                        Else

                            CheckBoxControl_OnHold.Checked = False

                        End If

                    End If

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewNewspaper_DistributionDetails_ColumnValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs, ViaCellValueChangedEvent As Boolean) Handles DataGridViewNewspaper_DistributionDetails.ColumnValueChangedEvent

            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim OrderLineNumber As Short = Nothing
            Dim PipePosition As Integer = Nothing
            Dim SalesTax As AdvantageFramework.Database.Entities.SalesTax = Nothing

            If TypeOf DataGridViewNewspaper_DistributionDetails.CurrentView.GetRow(e.RowHandle) Is AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail Then

                AccountPayableNewspaperDistributionDetail = DirectCast(DataGridViewNewspaper_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)

                If e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderNumber.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing Then

                        If IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                            SetNewspaperOrderNumber(e.Value, False, e.RowHandle)

                        Else

                            PipePosition = InStr(1, e.Value, "|")

                            If PipePosition > 0 Then

                                OrderNumber = Strings.Left(e.Value, PipePosition - 1)
                                OrderLineNumber = Strings.Mid(e.Value, PipePosition + 1)

                                SetNewspaperOrderNumber(OrderNumber, True, e.RowHandle, OrderLineNumber)

                            Else

                                SetNewspaperOrderNumber(e.Value, True, e.RowHandle)

                            End If

                        End If

                    Else

                        AccountPayableNewspaperDistributionDetail.OrderNumber = Nothing
                        AccountPayableNewspaperDistributionDetail.OrderLineNumber = Nothing

                        ClearNewspaperRow(e.RowHandle, AccountPayableNewspaperDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderLineNumber.ToString Then

                    If e.Value IsNot Nothing AndAlso IsNumeric(e.Value) AndAlso e.Value <> 0 Then

                        SetNewspaperOrderLineNumber(e.Value, e.RowHandle)

                    Else

                        AccountPayableNewspaperDistributionDetail.OrderLineNumber = Nothing

                        ClearNewspaperRow(e.RowHandle, AccountPayableNewspaperDistributionDetail)

                    End If

                ElseIf e.Column.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.SalesTaxCode.ToString AndAlso Not ViaCellValueChangedEvent Then

                    If e.Value IsNot Nothing And e.Value <> "" Then

                        Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                            SalesTax = AdvantageFramework.Database.Procedures.SalesTax.LoadBySalesTaxCode(DbContext, e.Value)

                        End Using

                        If SalesTax IsNot Nothing Then

                            AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.SalesTaxCode = e.Value
                            AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CityTaxPercent = SalesTax.CityPercent.GetValueOrDefault(0)
                            AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CountyTaxPercent = SalesTax.CountyPercent.GetValueOrDefault(0)
                            AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.StateTaxPercent = SalesTax.StatePercent.GetValueOrDefault(0)
                            AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.IsResaleTax = SalesTax.Resale.GetValueOrDefault(0)

                        End If

                    Else

                        AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.SalesTaxCode = Nothing
                        AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CityTaxPercent = 0
                        AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.CountyTaxPercent = 0
                        AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.StateTaxPercent = 0
                        AccountPayableNewspaperDistributionDetail.AccountPayableNewspaper.IsResaleTax = Nothing

                    End If

                    AccountPayableNewspaperDistributionDetail.ReCalculate(True)

                    CalculateTotalAmount()

                End If

            End If

        End Sub
        Private Sub DataGridViewNewspaper_DistributionDetails_EmbeddedNavigatorButtonClick(sender As Object, e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewNewspaper_DistributionDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewNewspaper()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteSelectedNewspaper()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Custom

                        AddMultipleOrders(MultipleOrderTypes.Newspaper)

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewNewspaper_DistributionDetails_InitNewRowEvent(sender As Object, e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewNewspaper_DistributionDetails.InitNewRowEvent

            DirectCast(DataGridViewNewspaper_DistributionDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail).CurrencyRate = NumericInputControl_VendorCurrencyRate.GetValue

            RaiseEvent NewspaperInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewNewspaper_DistributionDetails_QueryPopupNeedDatasourceEvent(FieldName As String, ByRef OverrideDefaultDatasource As Boolean, ByRef Datasource As Object) Handles DataGridViewNewspaper_DistributionDetails.QueryPopupNeedDatasourceEvent

            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing

            OverrideDefaultDatasource = True

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                Using SecurityDbContext = New AdvantageFramework.Security.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ClientCode.ToString Then

                        Datasource = AdvantageFramework.Database.Procedures.Client.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext).ToList

                    ElseIf DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DivisionCode.ToString Then

                        ClientCode = DataGridViewNewspaper_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ClientCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Division.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext)
                                      Where Entity.ClientCode = ClientCode
                                      Select Entity).ToList

                    ElseIf DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ProductCode.ToString Then

                        ClientCode = DataGridViewNewspaper_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ClientCode.ToString)
                        DivisionCode = DataGridViewNewspaper_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DivisionCode.ToString)

                        Datasource = (From Entity In AdvantageFramework.Database.Procedures.Product.LoadByUserCodeWithOfficeLimits(_Session, DbContext, SecurityDbContext, False, True)
                                      Where Entity.ClientCode = ClientCode AndAlso
                                            Entity.DivisionCode = DivisionCode
                                      Select Entity).ToList

                    End If

                End Using

            End Using

        End Sub
        Private Sub DataGridViewNewspaper_DistributionDetails_RowCountChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewNewspaper_DistributionDetails.RowCountChangedEvent

            EnableDisableOffice()

            If Not _IsLoading Then

                CalculateTotalAmount()

            End If

        End Sub
        Private Sub DataGridViewNewspaper_DistributionDetails_SelectionChangedEvent(sender As Object, e As System.EventArgs) Handles DataGridViewNewspaper_DistributionDetails.SelectionChangedEvent

            RaiseEvent NewspaperSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewNewspaper_DistributionDetails_ShownEditorEvent(sender As Object, e As System.EventArgs) Handles DataGridViewNewspaper_DistributionDetails.ShownEditorEvent

            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim MemoExEdit As DevExpress.XtraEditors.MemoExEdit = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim ClientCode As String = Nothing
            Dim DivisionCode As String = Nothing
            Dim ProductCode As String = Nothing
            Dim OfficeCode As String = Nothing
            Dim AllowContinue As Boolean = True
            Dim AllowVendorNotOnOrder As Boolean = False
            Dim AccountPayableNewspaperDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail = Nothing

            Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                    If ComboBoxControl_Office.HasASelectedValue Then

                        OfficeCode = ComboBoxControl_Office.GetSelectedValue

                    Else

                        AdvantageFramework.WinForm.MessageBox.Show("Please select an office.")
                        AllowContinue = False

                    End If

                End If

                AccountPayableNewspaperDistributionDetail = DirectCast(DataGridViewNewspaper_DistributionDetails.CurrentView.GetRow(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle), AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail)

                If AllowContinue Then

                    If TypeOf DataGridViewNewspaper_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.GridLookUpEdit Then

                        GridLookUpEdit = DataGridViewNewspaper_DistributionDetails.CurrentView.ActiveEditor

                        If DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderNumber.ToString Then

                            ClientCode = DataGridViewNewspaper_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ClientCode.ToString)
                            DivisionCode = DataGridViewNewspaper_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.DivisionCode.ToString)
                            ProductCode = DataGridViewNewspaper_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.ProductCode.ToString)

                            If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                                AllowVendorNotOnOrder = AdvantageFramework.Agency.GetOptionAPAllowOrderNotMatchingVendor(DbContext)

                                BindingSource = New System.Windows.Forms.BindingSource

                                BindingSource.DataSource = AdvantageFramework.AccountPayable.GetAvailableNewspaperOrders(DbContext, AllowVendorNotOnOrder, SearchableComboBoxControl_Vendor.GetSelectedValue, OfficeCode,
                                                                                                                         ClientCode, DivisionCode, ProductCode, Nothing, Nothing, Nothing)

                                GridLookUpEdit.Properties.ValueMember = "ID"
                                GridLookUpEdit.Properties.DataSource = BindingSource

                                If AllowVendorNotOnOrder Then

                                    GridLookUpEdit.Properties.View.ActiveFilterString = "VendorCode = '" & SearchableComboBoxControl_Vendor.GetSelectedValue & "'"

                                ElseIf GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableNewspaperOrders.Properties.VendorCode.ToString) IsNot Nothing Then

                                    GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableNewspaperOrders.Properties.VendorCode.ToString).Visible = False

                                End If

                            End If

                        ElseIf DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderLineNumber.ToString Then

                            OrderNumber = DataGridViewNewspaper_DistributionDetails.CurrentView.GetRowCellValue(DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedRowHandle, AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.OrderNumber.ToString)

                            If OrderNumber <> 0 Then

                                BindingSource = New System.Windows.Forms.BindingSource
                                BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.NewspaperDetailView.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber))

                                GridLookUpEdit.Properties.DataSource = BindingSource

                            Else

                                DataGridViewNewspaper_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        ElseIf DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.SalesTaxCode.ToString Then

                            BindingSource = New System.Windows.Forms.BindingSource
                            BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.SalesTax.LoadAllActive(DbContext))

                            GridLookUpEdit.Properties.DataSource = BindingSource

                        End If

                    ElseIf TypeOf DataGridViewNewspaper_DistributionDetails.CurrentView.ActiveEditor Is DevExpress.XtraEditors.MemoExEdit Then

                        If DataGridViewNewspaper_DistributionDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.NewApprovalComments.ToString Then

                            If AccountPayableNewspaperDistributionDetail IsNot Nothing AndAlso AccountPayableNewspaperDistributionDetail.NewApprovalStatus IsNot Nothing Then

                                MemoExEdit = DataGridViewNewspaper_DistributionDetails.CurrentView.ActiveEditor
                                MemoExEdit.Properties.MaxLength = AdvantageFramework.BaseClasses.Entity.LoadPropertyMaxLength(AdvantageFramework.BaseClasses.Entity.LoadProperty(GetType(AdvantageFramework.Database.Entities.AccountPayableMediaApproval), AdvantageFramework.AccountPayable.Classes.AccountPayableNewspaperDistributionDetail.Properties.Comments.ToString))

                            Else

                                DataGridViewNewspaper_DistributionDetails.CurrentView.CloseEditor()

                            End If

                        End If

                    End If

                Else

                    DataGridViewNewspaper_DistributionDetails.CurrentView.CloseEditorForUpdating()
                    ComboBoxControl_Office.Focus()

                End If

            End Using

        End Sub
        Private Sub DocumentManagerControlDocuments_APDocuments_SelectedDocumentChanged() Handles DocumentManagerControlDocuments_APDocuments.SelectedDocumentChanged

            RaiseEvent SelectedDocumentChanged()

        End Sub
        Private Sub CheckBoxControl_VendorTaxEnabled_CheckedChanged(sender As Object, e As EventArgs) Handles CheckBoxControl_VendorTaxEnabled.CheckedChanged

            EnableOrDisableActions()

        End Sub
        Private Sub PictureUpdateCurrency_Image_Click(sender As Object, e As EventArgs) Handles PictureUpdateCurrency_Image.Click

            Dim CurrencyList As IEnumerable(Of String) = Nothing
            Dim ErrorMessage As String = ""

            Me.ShowWaitForm("Updating...")

            CurrencyList = {SearchableComboBoxControl_CurrencyCode.GetSelectedValue}

            Using DbContext As New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                If AdvantageFramework.Currency.GetRealtimeRates(DbContext, CurrencyList, _CurrencyCodeHome, ErrorMessage) Then

                    RefreshCurrencyTooltip(DbContext, True)

                    RecalculateCurrencyDetail()

                    AdvantageFramework.WinForm.MessageBox.Show("Exchanges rate updated successfully.")

                Else

                    AdvantageFramework.WinForm.MessageBox.Show(ErrorMessage)

                End If

            End Using

            Me.CloseWaitForm()

        End Sub
        Private Sub DataGridViewRadio_DistributionDetails_DataSourceChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewRadio_DistributionDetails.DataSourceChangedEvent

            LoadRadioBroadcastDetails()

        End Sub
        Private Sub DataGridViewTV_DistributionDetails_DataSourceChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewTV_DistributionDetails.DataSourceChangedEvent

            LoadTVBroadcastDetails()

        End Sub
        Private Sub DataGridViewRadioDetails_BroadcastDetails_InitNewRowEvent(sender As Object, e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewRadioDetails_BroadcastDetails.InitNewRowEvent

            'objects
            Dim AccountPayableRadioDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail = Nothing

            AccountPayableRadioDistributionDetail = DirectCast(DataGridViewRadio_DistributionDetails.GetFirstSelectedRowDataBoundItem, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail)

            DataGridViewRadioDetails_BroadcastDetails.CurrentView.SetRowCellValue(e.RowHandle, AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderNumber.ToString, AccountPayableRadioDistributionDetail.OrderNumber)

            RaiseEvent RadioDetailInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewRadioDetails_BroadcastDetails_AddNewRowEvent(RowObject As Object) Handles DataGridViewRadioDetails_BroadcastDetails.AddNewRowEvent

            DataGridViewRadioDetails_BroadcastDetails.SetUserEntryChanged()

        End Sub
        Private Sub DataGridViewTVDetails_BroadcastDetails_InitNewRowEvent(sender As Object, e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles DataGridViewTVDetails_BroadcastDetails.InitNewRowEvent

            'objects
            Dim AccountPayableTVDistributionDetail As AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail = Nothing

            AccountPayableTVDistributionDetail = DirectCast(DataGridViewTV_DistributionDetails.GetFirstSelectedRowDataBoundItem, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail)

            DataGridViewTVDetails_BroadcastDetails.CurrentView.SetRowCellValue(e.RowHandle, AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderNumber.ToString, AccountPayableTVDistributionDetail.OrderNumber)

            RaiseEvent TVDetailInitNewRowEvent(sender, e)

        End Sub
        Private Sub DataGridViewTVDetails_BroadcastDetails_AddNewRowEvent(RowObject As Object) Handles DataGridViewTVDetails_BroadcastDetails.AddNewRowEvent

            DataGridViewTVDetails_BroadcastDetails.SetUserEntryChanged()

        End Sub
        Private Sub DataGridViewTVDetails_BroadcastDetails_SelectionChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewTVDetails_BroadcastDetails.SelectionChangedEvent

            RaiseEvent TVDetailSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewRadioDetails_BroadcastDetails_SelectionChangedEvent(sender As Object, e As EventArgs) Handles DataGridViewRadioDetails_BroadcastDetails.SelectionChangedEvent

            RaiseEvent RadioDetailSelectionChangedEvent(sender, e)

        End Sub
        Private Sub DataGridViewRadioDetails_BroadcastDetails_ShowingEditorEvent(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles DataGridViewRadioDetails_BroadcastDetails.ShowingEditorEvent

            If DataGridViewRadioDetails_BroadcastDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Approved.ToString OrElse
               DataGridViewRadioDetails_BroadcastDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Comment.ToString Then

                e.Cancel = True

            End If

        End Sub
        Private Sub DataGridViewTVDetails_BroadcastDetails_ShowingEditorEvent(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles DataGridViewTVDetails_BroadcastDetails.ShowingEditorEvent

            If DataGridViewTVDetails_BroadcastDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Approved.ToString OrElse
               DataGridViewTVDetails_BroadcastDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.Comment.ToString Then

                e.Cancel = True

            End If

        End Sub
        Private Sub DataGridViewRadioDetails_BroadcastDetails_EmbeddedNavigatorButtonClick(sender As Object, e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewRadioDetails_BroadcastDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewRadioDetail()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteRadioDetail()

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewTVDetails_BroadcastDetails_EmbeddedNavigatorButtonClick(sender As Object, e As DevExpress.XtraEditors.NavigatorButtonClickEventArgs) Handles DataGridViewTVDetails_BroadcastDetails.EmbeddedNavigatorButtonClick

            If Not e.Handled Then

                Select Case CType(e.Button.Tag, DevExpress.XtraEditors.NavigatorButtonType)

                    Case DevExpress.XtraEditors.NavigatorButtonType.CancelEdit

                        CancelAddNewTVDetail()

                        e.Handled = True

                    Case DevExpress.XtraEditors.NavigatorButtonType.Remove

                        DeleteTVDetail()

                        e.Handled = True

                End Select

            End If

        End Sub
        Private Sub DataGridViewRadioDetails_BroadcastDetails_ShownEditorEvent(sender As Object, e As EventArgs) Handles DataGridViewRadioDetails_BroadcastDetails.ShownEditorEvent

            'objects
            Dim AllowVendorNotOnOrder As Boolean = False
            Dim OfficeCode As String = Nothing
            Dim AccountPayableRadioDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail) = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim LineNumbers As Short() = Nothing

            If DataGridViewRadio_DistributionDetails.HasRows Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If DataGridViewRadioDetails_BroadcastDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderNumber.ToString Then

                        If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                            If ComboBoxControl_Office.HasASelectedValue Then

                                OfficeCode = ComboBoxControl_Office.GetSelectedValue

                            End If

                        End If

                        If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                            GridLookUpEdit = DataGridViewRadioDetails_BroadcastDetails.CurrentView.ActiveEditor

                            AccountPayableRadioDistributionDetails = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail).ToList

                            AllowVendorNotOnOrder = AdvantageFramework.Agency.GetOptionAPAllowOrderNotMatchingVendor(DbContext)

                            BindingSource = New System.Windows.Forms.BindingSource

                            Try

                                BindingSource.DataSource = (From Item In AdvantageFramework.AccountPayable.GetAvailableRadioOrders(DbContext, AllowVendorNotOnOrder, SearchableComboBoxControl_Vendor.GetSelectedValue,
                                                                                                             OfficeCode, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing)
                                                            Join APRadio In AccountPayableRadioDistributionDetails On Item.OrderNumber Equals APRadio.OrderNumber And Item.Month Equals APRadio.BroadcastMonth And Item.Year Equals APRadio.BroadcastYear.Value
                                                            Select Item).Distinct.ToList

                            Catch ex As Exception

                            End Try

                            GridLookUpEdit.Properties.ValueMember = "OrderNumber"
                            GridLookUpEdit.Properties.DataSource = BindingSource

                            If DataGridViewRadioDetails_BroadcastDetails.IsNewItemRow Then

                                If GridLookUpEdit.EditValue Is Nothing Then

                                    GridLookUpEdit.EditValue = DirectCast(DataGridViewRadio_DistributionDetails.GetFirstSelectedRowDataBoundItem, AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail).OrderNumber

                                End If

                            End If

                            If AllowVendorNotOnOrder Then

                                GridLookUpEdit.Properties.View.ActiveFilterString = "VendorCode = '" & SearchableComboBoxControl_Vendor.GetSelectedValue & "'"

                            ElseIf GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableRadioOrders.Properties.VendorCode.ToString) IsNot Nothing Then

                                GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableRadioOrders.Properties.VendorCode.ToString).Visible = False

                            End If

                        End If

                        'ElseIf DataGridViewRadioDetails_BroadcastDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderLineNumber.ToString Then

                        'GridLookUpEdit = DataGridViewRadioDetails_BroadcastDetails.CurrentView.ActiveEditor

                        'OrderNumber = DataGridViewRadioDetails_BroadcastDetails.CurrentView.GetRowCellValue(DataGridViewRadioDetails_BroadcastDetails.CurrentView.FocusedRowHandle, AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderNumber.ToString)

                        'If OrderNumber <> 0 Then

                        '    LineNumbers = DataGridViewRadio_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableRadioDistributionDetail).Where(Function(apr) apr.OrderNumber = OrderNumber AndAlso apr.OrderLineNumber.HasValue).Select(Function(apr) apr.OrderLineNumber.Value).ToArray

                        '    BindingSource = New System.Windows.Forms.BindingSource
                        '    BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber).Where(Function(ord) LineNumbers.Contains(ord.LineNumber)))

                        '    GridLookUpEdit.Properties.DataSource = BindingSource

                        'Else

                        '    DataGridViewRadioDetails_BroadcastDetails.CurrentView.CloseEditor()

                        'End If

                    End If

                End Using

            End If

        End Sub
        Private Sub DataGridViewTVDetails_BroadcastDetails_ShownEditorEvent(sender As Object, e As EventArgs) Handles DataGridViewTVDetails_BroadcastDetails.ShownEditorEvent

            'objects
            Dim AllowVendorNotOnOrder As Boolean = False
            Dim OfficeCode As String = Nothing
            Dim AccountPayableTVDistributionDetails As Generic.List(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail) = Nothing
            Dim BindingSource As System.Windows.Forms.BindingSource = Nothing
            Dim GridLookUpEdit As DevExpress.XtraEditors.GridLookUpEdit = Nothing
            Dim OrderNumber As Integer = Nothing
            Dim LineNumbers As Short() = Nothing

            If DataGridViewTV_DistributionDetails.HasRows Then

                Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                    If DataGridViewTVDetails_BroadcastDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderNumber.ToString Then

                        If AdvantageFramework.Database.Procedures.Agency.IsAPLimitByOfficeEnabled(DbContext) Then

                            If ComboBoxControl_Office.HasASelectedValue Then

                                OfficeCode = ComboBoxControl_Office.GetSelectedValue

                            End If

                        End If

                        If SearchableComboBoxControl_Vendor.HasASelectedValue Then

                            GridLookUpEdit = DataGridViewTVDetails_BroadcastDetails.CurrentView.ActiveEditor

                            AccountPayableTVDistributionDetails = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail).ToList

                            AllowVendorNotOnOrder = AdvantageFramework.Agency.GetOptionAPAllowOrderNotMatchingVendor(DbContext)

                            BindingSource = New System.Windows.Forms.BindingSource

                            Try

                                BindingSource.DataSource = (From Item In AdvantageFramework.AccountPayable.GetAvailableTVOrders(DbContext, AllowVendorNotOnOrder, SearchableComboBoxControl_Vendor.GetSelectedValue,
                                                                                                             OfficeCode, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing)
                                                            Join APTV In AccountPayableTVDistributionDetails On Item.OrderNumber Equals APTV.OrderNumber And Item.Month Equals APTV.BroadcastMonth And Item.Year Equals APTV.BroadcastYear.Value
                                                            Select Item).Distinct.ToList

                            Catch ex As Exception

                            End Try

                            GridLookUpEdit.Properties.ValueMember = "OrderNumber"
                            GridLookUpEdit.Properties.DataSource = BindingSource

                            If DataGridViewTVDetails_BroadcastDetails.IsNewItemRow Then

                                If GridLookUpEdit.EditValue Is Nothing Then

                                    GridLookUpEdit.EditValue = DirectCast(DataGridViewTV_DistributionDetails.GetFirstSelectedRowDataBoundItem, AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail).OrderNumber

                                End If

                            End If

                            If AllowVendorNotOnOrder Then

                                GridLookUpEdit.Properties.View.ActiveFilterString = "VendorCode = '" & SearchableComboBoxControl_Vendor.GetSelectedValue & "'"

                            ElseIf GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableTVOrders.Properties.VendorCode.ToString) IsNot Nothing Then

                                GridLookUpEdit.Properties.View.Columns(AdvantageFramework.AccountPayable.Classes.AccountPayableAvailableTVOrders.Properties.VendorCode.ToString).Visible = False

                            End If

                        End If

                        'ElseIf DataGridViewTVDetails_BroadcastDetails.CurrentView.FocusedColumn.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderLineNumber.ToString Then

                        'GridLookUpEdit = DataGridViewTVDetails_BroadcastDetails.CurrentView.ActiveEditor

                        'OrderNumber = DataGridViewTVDetails_BroadcastDetails.CurrentView.GetRowCellValue(DataGridViewTVDetails_BroadcastDetails.CurrentView.FocusedRowHandle, AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderNumber.ToString)

                        'If OrderNumber <> 0 Then

                        '    LineNumbers = DataGridViewTV_DistributionDetails.GetAllRowsDataBoundItems.OfType(Of AdvantageFramework.AccountPayable.Classes.AccountPayableTVDistributionDetail).Where(Function(apr) apr.OrderNumber = OrderNumber AndAlso apr.OrderLineNumber.HasValue).Select(Function(apr) apr.OrderLineNumber.Value).ToArray

                        '    BindingSource = New System.Windows.Forms.BindingSource
                        '    BindingSource.DataSource = AdvantageFramework.WinForm.Presentation.Controls.LoadGridViewDataSourceView(AdvantageFramework.Database.Procedures.TVOrderDetail.LoadNonCancelledNonCommissionByOrderNumber(DbContext, OrderNumber).Where(Function(ord) LineNumbers.Contains(ord.LineNumber)))

                        '    GridLookUpEdit.Properties.DataSource = BindingSource

                        'Else

                        '    DataGridViewTVDetails_BroadcastDetails.CurrentView.CloseEditor()

                        'End If

                    End If

                End Using

            End If

        End Sub
        Private Sub DataGridViewRadioDetails_BroadcastDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewRadioDetails_BroadcastDetails.CellValueChangedEvent

            'objects
            Dim BroadcastOrderDetailView As AdvantageFramework.Database.Views.BroadcastOrderDetailView = Nothing
            Dim RadioOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.RadioOrderDetail) = Nothing
            Dim OrderLineNumber As Short? = Nothing
            Dim RadioOrder As AdvantageFramework.Database.Entities.RadioOrder = Nothing
            Dim IsGross As Boolean = True

            BroadcastOrderDetailView = DirectCast(DataGridViewRadioDetails_BroadcastDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.Database.Views.BroadcastOrderDetailView)

            If e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.ForeignGrossRate.ToString Then

                BroadcastOrderDetailView.ForeignGrossRate = If(e.Value Is Nothing, 0, e.Value)

                BroadcastOrderDetailView.GrossRate = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 4)

            ElseIf e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString Then

                BroadcastOrderDetailView.GrossRate = If(e.Value Is Nothing, 0, e.Value)

                BroadcastOrderDetailView.ForeignGrossRate = FormatNumber(BroadcastOrderDetailView.GrossRate / NumericInputControl_VendorCurrencyRate.GetValue, 4)

            End If

            If e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderNumber.ToString OrElse
               e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.RunDate.ToString OrElse
               e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString OrElse
               e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString Then

                If BroadcastOrderDetailView.OrderNumber > 0 AndAlso BroadcastOrderDetailView.RunDate.HasValue AndAlso BroadcastOrderDetailView.GrossRate > 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        RadioOrder = AdvantageFramework.Database.Procedures.RadioOrder.LoadByOrderNumber(DbContext, BroadcastOrderDetailView.OrderNumber)

                        If RadioOrder IsNot Nothing AndAlso RadioOrder.NetGross.GetValueOrDefault(1) = 0 Then

                            IsGross = False

                        End If

                        RadioOrderDetails = (From Item In AdvantageFramework.Database.Procedures.RadioOrderDetail.LoadNonCancelledByOrderNumber(DbContext, BroadcastOrderDetailView.OrderNumber)
                                             Where Item.StartDate <= BroadcastOrderDetailView.RunDate AndAlso
                                                   Item.EndDate >= BroadcastOrderDetailView.RunDate AndAlso
                                                   ((IsGross AndAlso Item.GrossRate = BroadcastOrderDetailView.GrossRate) OrElse
                                                    (IsGross = False AndAlso Item.NetRate = BroadcastOrderDetailView.GrossRate))
                                             Select Item).ToList

                        If RadioOrderDetails.Count = 1 Then

                            OrderLineNumber = RadioOrderDetails.First.LineNumber

                        End If

                    End Using

                End If

                DataGridViewRadioDetails_BroadcastDetails.CurrentView.SetRowCellValue(e.RowHandle, AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderLineNumber.ToString, OrderLineNumber)

            End If

        End Sub
        Private Sub DataGridViewTVDetails_BroadcastDetails_CellValueChangedEvent(e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles DataGridViewTVDetails_BroadcastDetails.CellValueChangedEvent

            'objects
            Dim BroadcastOrderDetailView As AdvantageFramework.Database.Views.BroadcastOrderDetailView = Nothing
            Dim TVOrderDetails As Generic.List(Of AdvantageFramework.Database.Entities.TVOrderDetail) = Nothing
            Dim OrderLineNumber As Short? = Nothing
            Dim TVOrder As AdvantageFramework.Database.Entities.TVOrder = Nothing
            Dim IsGross As Boolean = True

            BroadcastOrderDetailView = DirectCast(DataGridViewTVDetails_BroadcastDetails.CurrentView.GetRow(e.RowHandle), AdvantageFramework.Database.Views.BroadcastOrderDetailView)

            If e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.ForeignGrossRate.ToString Then

                BroadcastOrderDetailView.ForeignGrossRate = If(e.Value Is Nothing, 0, e.Value)

                BroadcastOrderDetailView.GrossRate = FormatNumber(e.Value * NumericInputControl_VendorCurrencyRate.GetValue, 4)

            ElseIf e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString Then

                BroadcastOrderDetailView.GrossRate = If(e.Value Is Nothing, 0, e.Value)

                BroadcastOrderDetailView.ForeignGrossRate = FormatNumber(BroadcastOrderDetailView.GrossRate / NumericInputControl_VendorCurrencyRate.GetValue, 4)

            End If

            If e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderNumber.ToString OrElse
               e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.RunDate.ToString OrElse
               e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.GrossRate.ToString OrElse
               e.Column.FieldName = AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.NetworkID.ToString Then

                If BroadcastOrderDetailView.OrderNumber > 0 AndAlso BroadcastOrderDetailView.RunDate.HasValue AndAlso BroadcastOrderDetailView.GrossRate > 0 Then

                    Using DbContext = New AdvantageFramework.Database.DbContext(_Session.ConnectionString, _Session.UserCode)

                        TVOrder = AdvantageFramework.Database.Procedures.TVOrder.LoadByOrderNumber(DbContext, BroadcastOrderDetailView.OrderNumber)

                        If TVOrder IsNot Nothing AndAlso TVOrder.NetGross.GetValueOrDefault(1) = 0 Then

                            IsGross = False

                        End If

                        TVOrderDetails = (From Item In AdvantageFramework.Database.Procedures.TVOrderDetail.LoadNonCancelledByOrderNumber(DbContext, BroadcastOrderDetailView.OrderNumber)
                                          Where Item.StartDate <= BroadcastOrderDetailView.RunDate AndAlso
                                                Item.EndDate >= BroadcastOrderDetailView.RunDate AndAlso
                                                ((IsGross AndAlso Item.GrossRate = BroadcastOrderDetailView.GrossRate) OrElse
                                                 (IsGross = False AndAlso Item.NetRate = BroadcastOrderDetailView.GrossRate))
                                          Select Item).ToList.Select(Function(Entity) Entity).Where(Function(Entity) BroadcastOrderDetailView.NetworkID Is Nothing OrElse
                                                                                                                     (BroadcastOrderDetailView.NetworkID IsNot Nothing AndAlso
                                                                                                                      BroadcastOrderDetailView.NetworkID.ToUpper = Entity.NetworkID.ToUpper)).ToList

                        If TVOrderDetails.Count = 1 Then

                            OrderLineNumber = TVOrderDetails.First.LineNumber

                        End If

                    End Using

                End If

                DataGridViewTVDetails_BroadcastDetails.CurrentView.SetRowCellValue(e.RowHandle, AdvantageFramework.Database.Views.BroadcastOrderDetailView.Properties.OrderLineNumber.ToString, OrderLineNumber)

            End If

        End Sub

#End Region

#End Region

    End Class

End Namespace
