'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 14.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace AdvantageTestCode
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''OpenAdvantage
        '''</summary>
        Public Sub OpenAdvantage()
            Dim uINameEdit As WinEdit = Me.UIDesktopWindow.UIItemWindow.UIAdvantage67000ListItem.UINameEdit

            'Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, New Point(35, 7))
        End Sub
        
        '''<summary>
        '''InvoicePrinting - Use 'InvoicePrintingParams' to pass parameters into this method.
        '''</summary>
        Public Sub InvoicePrinting()
            Dim uIHomeButton As WinButton = Me.UIAdvantageAquaWindow.UIRibbonControlForm_MaWindow.UIHomeButton
            Dim uIReportsTreeItem As WinTreeItem = Me.UIAdvantageAquaWindow.UIAdvTreeBilling_MenuITree.UIReportsTreeItem
            Dim uIAdvTreeBilling_MenuITree As WinTree = Me.UIAdvantageAquaWindow.UISuperTabControlPanelWindow.UIAdvTreeBilling_MenuITree
            Dim uIItem2YearsButton As WinButton = Me.UIAdvantageAquaWindow.UIItemGroup.UIItem2YearsButton
            Dim uISearchButton As WinButton = Me.UIAdvantageAquaWindow.UIItemGroup1.UISearchButton
            Dim uIPrintPreviewButton As WinButton = Me.UIAdvantageAquaWindow.UIItemGroup2.UIPrintPreviewButton
            Dim uIDocumentViewerClient As WinClient = Me.UIInvoicePrintingWindow.UIDocumentViewerWindow.UIDocumentViewerClient

            'Click 'Home' button
            Mouse.Click(uIHomeButton, New Point(22, 12))

            'Click 'Reports' tree item
            Mouse.Click(uIReportsTreeItem, New Point(81, 17))

            'Click 'AdvTreeBilling_MenuItems' tree
            Mouse.Click(uIAdvTreeBilling_MenuITree, New Point(550, 119))

            'Click '2 Years' button
            Mouse.Click(uIItem2YearsButton, New Point(33, 7))

            'Click '2 Years' button
            Mouse.Click(uIItem2YearsButton, New Point(19, 6))

            'Click 'Search' button
            Mouse.Click(uISearchButton, New Point(29, 61))

            'Click 'Print Preview' button
            Mouse.Click(uIPrintPreviewButton, New Point(56, 26))

            'Click 'DocumentViewer' client
            Mouse.Click(uIDocumentViewerClient, New Point(1070, 470))

            'Type 'Alt + u' in 'DocumentViewer' client
            Keyboard.SendKeys(uIDocumentViewerClient, Me.InvoicePrintingParams.UIDocumentViewerClientSendKeys, ModifierKeys.Alt)
        End Sub
        
        '''<summary>
        '''InvoicePrinting2
        '''</summary>
        Public Sub InvoicePrinting2()
            Dim uINameEdit As WinEdit = Me.UIDesktopWindow.UIItemWindow.UIAdvantageDatabaseUpdListItem.UINameEdit
            Dim uIProcessButton As WinButton = Me.UIAdvantageDatabaseUpdWindow.UIItemGroup.UIProcessButton
            Dim uIItemCustom As WinCustom = Me.UIAdvantageDatabaseUpdWindow.UIRibbonControlForm_MaWindow.UIItemCustom
            Dim uIYesButton As WinButton = Me.UIYesWindow.UIMessageBoxDialogWindow.UIMessageBoxDialogClient.UIYesButton
            Dim uINameEdit1 As WinEdit = Me.UIDesktopWindow.UIItemWindow.UIAdvantage67000ListItem.UINameEdit
            Dim uIHomeButton As WinButton = Me.UIAdvantageAquaWindow.UIRibbonControlForm_MaWindow.UIHomeButton
            Dim uIDesktopButton As WinButton = Me.UIAdvantageAquaWindow.UIItemButton.UIDesktopButton
            Dim uIBillingButton As WinButton = Me.UIAdvantageAquaWindow.UIItemButton.UIBillingButton
            Dim uIReportsTreeItem As WinTreeItem = Me.UIAdvantageAquaWindow.UIAdvTreeBilling_MenuITree.UIReportsTreeItem
            Dim uIAdvTreeBilling_MenuITree As WinTree = Me.UIAdvantageAquaWindow.UISuperTabControlPanelWindow.UIAdvTreeBilling_MenuITree
            Dim uIItem2YearsButton As WinButton = Me.UIAdvantageAquaWindow.UIItemGroup.UIItem2YearsButton
            Dim uISearchButton As WinButton = Me.UIAdvantageAquaWindow.UIItemGroup1.UISearchButton
            Dim uIPrintPreviewButton As WinButton = Me.UIAdvantageAquaWindow.UIItemGroup2.UIPrintPreviewButton
            Dim uIDocumentViewerClient As WinClient = Me.UIInvoicePrintingWindow.UIDocumentViewerWindow.UIDocumentViewerClient
            Dim uIRibbonControl1ToolBar As WinToolBar = Me.UIInvoicePrintingWindow.UITheRibbonPropertyPage.UIRibbonControl1ToolBar
            Dim uIItemGroup As WinGroup = Me.UIAdvantageAquaWindow.UIItemGroup3.UIItemGroup
            Dim uIOrientationButton As WinButton = Me.UIInvoicePrintingWindow.UIRibbonControl1ToolBar.UIOrientationButton
            Dim uIExportToButton As WinButton = Me.UIInvoicePrintingWindow.UIRibbonControl1ToolBar1.UIExportToButton
            Dim uISetupButton As WinButton = Me.UIInvoicePrintingWindow.UIRibbonControl1ToolBar2.UISetupButton

            'Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, New Point(130, 10))

            'Click 'Process' button
            Mouse.Click(uIProcessButton, New Point(17, 39))

            'Click custom control
            Mouse.Click(uIItemCustom, New Point(64, 14))

            'Click '&Yes' button
            Mouse.Click(uIYesButton, New Point(42, 15))

            'Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, New Point(78, 5))

            'Click 'Home' button
            Mouse.Click(uIHomeButton, New Point(40, 15))

            'Click 'Desktop' button
            Mouse.Click(uIDesktopButton, New Point(72, 21))

            'Click 'Billing' button
            Mouse.Click(uIBillingButton, New Point(90, 13))

            'Click 'Reports' tree item
            Mouse.Click(uIReportsTreeItem, New Point(112, 26))

            'Click 'AdvTreeBilling_MenuItems' tree
            Mouse.Click(uIAdvTreeBilling_MenuITree, New Point(491, 120))

            'Click '2 Years' button
            Mouse.Click(uIItem2YearsButton, New Point(25, 7))

            'Click 'Search' button
            Mouse.Click(uISearchButton, New Point(22, 51))

            'Click 'Print Preview' button
            Mouse.Click(uIPrintPreviewButton, New Point(53, 42))

            'Click 'DocumentViewer' client
            Mouse.Click(uIDocumentViewerClient, New Point(1078, 478))

            'Move 'DocumentViewer' client
            'System parameter 'Show window contents while dragging' is not set.This could lead to incorrect recording of drag actions.
            Mouse.StartDragging(uIDocumentViewerClient, New Point(1079, 475))
            Mouse.StopDragging(uIDocumentViewerClient, -11, 3)

            'Click 'DocumentViewer' client
            Mouse.Click(uIDocumentViewerClient, New Point(1057, 473))

            'Move 'RibbonControl1' tool bar to group
            'System parameter 'Show window contents while dragging' is not set.This could lead to incorrect recording of drag actions.
            uIItemGroup.EnsureClickable(New Point(546, 0))
            Mouse.StartDragging(uIRibbonControl1ToolBar, New Point(1908, 18))
            Mouse.StopDragging(uIItemGroup, New Point(546, 0))

            'Double-Click 'RibbonControl1' tool bar
            Mouse.DoubleClick(uIRibbonControl1ToolBar, New Point(690, 8))

            'Click 'Orientation' button
            Mouse.Click(uIOrientationButton, New Point(58, 14))

            'Right-Click 'Orientation' button
            Mouse.Click(uIOrientationButton, MouseButtons.Right, ModifierKeys.None, New Point(61, 6))

            'Click 'RibbonControl1' tool bar
            Mouse.Click(uIRibbonControl1ToolBar, New Point(382, 13))

            'Click 'Export To' button
            Mouse.Click(uIExportToButton, New Point(-1106, 944))

            'Click 'DocumentViewer' client
            Mouse.Click(uIDocumentViewerClient, New Point(787, 495))

            'Click 'Setup' button
            Mouse.Click(uISetupButton, New Point(24, 23))
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property InvoicePrintingParams() As InvoicePrintingParams
            Get
                If (Me.mInvoicePrintingParams Is Nothing) Then
                    Me.mInvoicePrintingParams = New InvoicePrintingParams()
                End If
                Return Me.mInvoicePrintingParams
            End Get
        End Property
        
        Public ReadOnly Property UIDesktopWindow() As UIDesktopWindow
            Get
                If (Me.mUIDesktopWindow Is Nothing) Then
                    Me.mUIDesktopWindow = New UIDesktopWindow()
                End If
                Return Me.mUIDesktopWindow
            End Get
        End Property
        
        Public ReadOnly Property UIAdvantageAquaWindow() As UIAdvantageAquaWindow
            Get
                If (Me.mUIAdvantageAquaWindow Is Nothing) Then
                    Me.mUIAdvantageAquaWindow = New UIAdvantageAquaWindow()
                End If
                Return Me.mUIAdvantageAquaWindow
            End Get
        End Property
        
        Public ReadOnly Property UIInvoicePrintingWindow() As UIInvoicePrintingWindow
            Get
                If (Me.mUIInvoicePrintingWindow Is Nothing) Then
                    Me.mUIInvoicePrintingWindow = New UIInvoicePrintingWindow()
                End If
                Return Me.mUIInvoicePrintingWindow
            End Get
        End Property
        
        Public ReadOnly Property UIAdvantageDatabaseUpdWindow() As UIAdvantageDatabaseUpdWindow
            Get
                If (Me.mUIAdvantageDatabaseUpdWindow Is Nothing) Then
                    Me.mUIAdvantageDatabaseUpdWindow = New UIAdvantageDatabaseUpdWindow()
                End If
                Return Me.mUIAdvantageDatabaseUpdWindow
            End Get
        End Property
        
        Public ReadOnly Property UIYesWindow() As UIYesWindow
            Get
                If (Me.mUIYesWindow Is Nothing) Then
                    Me.mUIYesWindow = New UIYesWindow()
                End If
                Return Me.mUIYesWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mInvoicePrintingParams As InvoicePrintingParams
        
        Private mUIDesktopWindow As UIDesktopWindow
        
        Private mUIAdvantageAquaWindow As UIAdvantageAquaWindow
        
        Private mUIInvoicePrintingWindow As UIInvoicePrintingWindow
        
        Private mUIAdvantageDatabaseUpdWindow As UIAdvantageDatabaseUpdWindow
        
        Private mUIYesWindow As UIYesWindow
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'InvoicePrinting'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class InvoicePrintingParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'Alt + u' in 'DocumentViewer' client
        '''</summary>
        Public UIDocumentViewerClientSendKeys As String = "u"
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIDesktopWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Desktop"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "CabinetWClass"
            Me.WindowTitles.Add("Desktop")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemWindow() As UIItemWindow
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow(Me)
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemWindow As UIItemWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIItemWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.AccessibleName) = "Items View"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "DirectUIHWND"
            Me.WindowTitles.Add("Desktop")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIAdvantage67000ListItem() As UIAdvantage67000ListItem
            Get
                If (Me.mUIAdvantage67000ListItem Is Nothing) Then
                    Me.mUIAdvantage67000ListItem = New UIAdvantage67000ListItem(Me)
                End If
                Return Me.mUIAdvantage67000ListItem
            End Get
        End Property
        
        Public ReadOnly Property UIAdvantageDatabaseUpdListItem() As UIAdvantageDatabaseUpdListItem
            Get
                If (Me.mUIAdvantageDatabaseUpdListItem Is Nothing) Then
                    Me.mUIAdvantageDatabaseUpdListItem = New UIAdvantageDatabaseUpdListItem(Me)
                End If
                Return Me.mUIAdvantageDatabaseUpdListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIAdvantage67000ListItem As UIAdvantage67000ListItem
        
        Private mUIAdvantageDatabaseUpdListItem As UIAdvantageDatabaseUpdListItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIAdvantage67000ListItem
        Inherits WinListItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinListItem.PropertyNames.Name) = "Advantage 6.70.00"
            Me.WindowTitles.Add("Desktop")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINameEdit() As WinEdit
            Get
                If (Me.mUINameEdit Is Nothing) Then
                    Me.mUINameEdit = New WinEdit(Me)
                    Me.mUINameEdit.SearchProperties(WinEdit.PropertyNames.Name) = "Name"
                    Me.mUINameEdit.WindowTitles.Add("Desktop")
                End If
                Return Me.mUINameEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINameEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIAdvantageDatabaseUpdListItem
        Inherits WinListItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinListItem.PropertyNames.Name) = "Advantage Database Update 6.70.00"
            Me.WindowTitles.Add("Desktop")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINameEdit() As WinEdit
            Get
                If (Me.mUINameEdit Is Nothing) Then
                    Me.mUINameEdit = New WinEdit(Me)
                    Me.mUINameEdit.SearchProperties(WinEdit.PropertyNames.Name) = "Name"
                    Me.mUINameEdit.WindowTitles.Add("Desktop")
                End If
                Return Me.mUINameEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINameEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIAdvantageAquaWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Advantage Aqua"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Advantage Aqua")
            Me.WindowTitles.Add("Advantage Aqua - [Invoice Printing]")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIRibbonControlForm_MaWindow() As UIRibbonControlForm_MaWindow
            Get
                If (Me.mUIRibbonControlForm_MaWindow Is Nothing) Then
                    Me.mUIRibbonControlForm_MaWindow = New UIRibbonControlForm_MaWindow(Me)
                End If
                Return Me.mUIRibbonControlForm_MaWindow
            End Get
        End Property
        
        Public ReadOnly Property UIAdvTreeBilling_MenuITree() As UIAdvTreeBilling_MenuITree
            Get
                If (Me.mUIAdvTreeBilling_MenuITree Is Nothing) Then
                    Me.mUIAdvTreeBilling_MenuITree = New UIAdvTreeBilling_MenuITree(Me)
                End If
                Return Me.mUIAdvTreeBilling_MenuITree
            End Get
        End Property
        
        Public ReadOnly Property UISuperTabControlPanelWindow() As UISuperTabControlPanelWindow
            Get
                If (Me.mUISuperTabControlPanelWindow Is Nothing) Then
                    Me.mUISuperTabControlPanelWindow = New UISuperTabControlPanelWindow(Me)
                End If
                Return Me.mUISuperTabControlPanelWindow
            End Get
        End Property
        
        Public ReadOnly Property UIItemGroup() As UIItemGroup
            Get
                If (Me.mUIItemGroup Is Nothing) Then
                    Me.mUIItemGroup = New UIItemGroup(Me)
                End If
                Return Me.mUIItemGroup
            End Get
        End Property
        
        Public ReadOnly Property UIItemGroup1() As UIItemGroup1
            Get
                If (Me.mUIItemGroup1 Is Nothing) Then
                    Me.mUIItemGroup1 = New UIItemGroup1(Me)
                End If
                Return Me.mUIItemGroup1
            End Get
        End Property
        
        Public ReadOnly Property UIItemGroup2() As UIItemGroup2
            Get
                If (Me.mUIItemGroup2 Is Nothing) Then
                    Me.mUIItemGroup2 = New UIItemGroup2(Me)
                End If
                Return Me.mUIItemGroup2
            End Get
        End Property
        
        Public ReadOnly Property UIItemButton() As UIItemButton
            Get
                If (Me.mUIItemButton Is Nothing) Then
                    Me.mUIItemButton = New UIItemButton(Me)
                End If
                Return Me.mUIItemButton
            End Get
        End Property
        
        Public ReadOnly Property UIItemGroup3() As UIItemGroup3
            Get
                If (Me.mUIItemGroup3 Is Nothing) Then
                    Me.mUIItemGroup3 = New UIItemGroup3(Me)
                End If
                Return Me.mUIItemGroup3
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIRibbonControlForm_MaWindow As UIRibbonControlForm_MaWindow
        
        Private mUIAdvTreeBilling_MenuITree As UIAdvTreeBilling_MenuITree
        
        Private mUISuperTabControlPanelWindow As UISuperTabControlPanelWindow
        
        Private mUIItemGroup As UIItemGroup
        
        Private mUIItemGroup1 As UIItemGroup1
        
        Private mUIItemGroup2 As UIItemGroup2
        
        Private mUIItemButton As UIItemButton
        
        Private mUIItemGroup3 As UIItemGroup3
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIRibbonControlForm_MaWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "RibbonControlForm_MainRibbon"
            Me.WindowTitles.Add("Advantage Aqua")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIHomeButton() As WinButton
            Get
                If (Me.mUIHomeButton Is Nothing) Then
                    Me.mUIHomeButton = New WinButton(Me)
                    Me.mUIHomeButton.SearchProperties(WinButton.PropertyNames.Name) = "Home"
                    Me.mUIHomeButton.WindowTitles.Add("Advantage Aqua")
                End If
                Return Me.mUIHomeButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIHomeButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIAdvTreeBilling_MenuITree
        Inherits WinTree
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Advantage Aqua")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIReportsTreeItem() As WinTreeItem
            Get
                If (Me.mUIReportsTreeItem Is Nothing) Then
                    Me.mUIReportsTreeItem = New WinTreeItem(Me)
                    Me.mUIReportsTreeItem.SearchProperties(WinTreeItem.PropertyNames.Name) = "Reports"
                    Me.mUIReportsTreeItem.WindowTitles.Add("Advantage Aqua")
                End If
                Return Me.mUIReportsTreeItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIReportsTreeItem As WinTreeItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UISuperTabControlPanelWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "SuperTabControlPanelBillingTab_Billing"
            Me.WindowTitles.Add("Advantage Aqua")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIAdvTreeBilling_MenuITree() As WinTree
            Get
                If (Me.mUIAdvTreeBilling_MenuITree Is Nothing) Then
                    Me.mUIAdvTreeBilling_MenuITree = New WinTree(Me)
                    Me.mUIAdvTreeBilling_MenuITree.WindowTitles.Add("Advantage Aqua")
                End If
                Return Me.mUIAdvTreeBilling_MenuITree
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIAdvTreeBilling_MenuITree As WinTree
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIItemGroup
        Inherits WinGroup
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Advantage Aqua - [Invoice Printing]")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItem2YearsButton() As WinButton
            Get
                If (Me.mUIItem2YearsButton Is Nothing) Then
                    Me.mUIItem2YearsButton = New WinButton(Me)
                    Me.mUIItem2YearsButton.SearchProperties(WinButton.PropertyNames.Name) = "2 Years"
                    Me.mUIItem2YearsButton.WindowTitles.Add("Advantage Aqua - [Invoice Printing]")
                End If
                Return Me.mUIItem2YearsButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItem2YearsButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIItemGroup1
        Inherits WinGroup
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Advantage Aqua - [Invoice Printing]")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISearchButton() As WinButton
            Get
                If (Me.mUISearchButton Is Nothing) Then
                    Me.mUISearchButton = New WinButton(Me)
                    Me.mUISearchButton.SearchProperties(WinButton.PropertyNames.Name) = "Search"
                    Me.mUISearchButton.WindowTitles.Add("Advantage Aqua - [Invoice Printing]")
                End If
                Return Me.mUISearchButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISearchButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIItemGroup2
        Inherits WinGroup
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Advantage Aqua - [Invoice Printing]")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIPrintPreviewButton() As WinButton
            Get
                If (Me.mUIPrintPreviewButton Is Nothing) Then
                    Me.mUIPrintPreviewButton = New WinButton(Me)
                    Me.mUIPrintPreviewButton.SearchProperties(WinButton.PropertyNames.Name) = "Print Preview"
                    Me.mUIPrintPreviewButton.WindowTitles.Add("Advantage Aqua - [Invoice Printing]")
                End If
                Return Me.mUIPrintPreviewButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIPrintPreviewButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIItemButton
        Inherits WinButton
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Advantage Aqua")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIDesktopButton() As WinButton
            Get
                If (Me.mUIDesktopButton Is Nothing) Then
                    Me.mUIDesktopButton = New WinButton(Me)
                    Me.mUIDesktopButton.SearchProperties(WinButton.PropertyNames.Name) = "Desktop"
                    Me.mUIDesktopButton.WindowTitles.Add("Advantage Aqua")
                End If
                Return Me.mUIDesktopButton
            End Get
        End Property
        
        Public ReadOnly Property UIBillingButton() As WinButton
            Get
                If (Me.mUIBillingButton Is Nothing) Then
                    Me.mUIBillingButton = New WinButton(Me)
                    Me.mUIBillingButton.SearchProperties(WinButton.PropertyNames.Name) = "Billing"
                    Me.mUIBillingButton.WindowTitles.Add("Advantage Aqua")
                End If
                Return Me.mUIBillingButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIDesktopButton As WinButton
        
        Private mUIBillingButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIItemGroup3
        Inherits WinGroup
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Advantage Aqua - [Invoice Printing]")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemGroup() As WinGroup
            Get
                If (Me.mUIItemGroup Is Nothing) Then
                    Me.mUIItemGroup = New WinGroup(Me)
                    Me.mUIItemGroup.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild)
                    Me.mUIItemGroup.WindowTitles.Add("Advantage Aqua - [Invoice Printing]")
                End If
                Return Me.mUIItemGroup
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemGroup As WinGroup
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIInvoicePrintingWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Invoice Printing"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Invoice Printing")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIDocumentViewerWindow() As UIDocumentViewerWindow
            Get
                If (Me.mUIDocumentViewerWindow Is Nothing) Then
                    Me.mUIDocumentViewerWindow = New UIDocumentViewerWindow(Me)
                End If
                Return Me.mUIDocumentViewerWindow
            End Get
        End Property
        
        Public ReadOnly Property UITheRibbonPropertyPage() As UITheRibbonPropertyPage
            Get
                If (Me.mUITheRibbonPropertyPage Is Nothing) Then
                    Me.mUITheRibbonPropertyPage = New UITheRibbonPropertyPage(Me)
                End If
                Return Me.mUITheRibbonPropertyPage
            End Get
        End Property
        
        Public ReadOnly Property UIRibbonControl1ToolBar() As UIRibbonControl1ToolBar
            Get
                If (Me.mUIRibbonControl1ToolBar Is Nothing) Then
                    Me.mUIRibbonControl1ToolBar = New UIRibbonControl1ToolBar(Me)
                End If
                Return Me.mUIRibbonControl1ToolBar
            End Get
        End Property
        
        Public ReadOnly Property UIRibbonControl1ToolBar1() As UIRibbonControl1ToolBar1
            Get
                If (Me.mUIRibbonControl1ToolBar1 Is Nothing) Then
                    Me.mUIRibbonControl1ToolBar1 = New UIRibbonControl1ToolBar1(Me)
                End If
                Return Me.mUIRibbonControl1ToolBar1
            End Get
        End Property
        
        Public ReadOnly Property UIRibbonControl1ToolBar2() As UIRibbonControl1ToolBar2
            Get
                If (Me.mUIRibbonControl1ToolBar2 Is Nothing) Then
                    Me.mUIRibbonControl1ToolBar2 = New UIRibbonControl1ToolBar2(Me)
                End If
                Return Me.mUIRibbonControl1ToolBar2
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIDocumentViewerWindow As UIDocumentViewerWindow
        
        Private mUITheRibbonPropertyPage As UITheRibbonPropertyPage
        
        Private mUIRibbonControl1ToolBar As UIRibbonControl1ToolBar
        
        Private mUIRibbonControl1ToolBar1 As UIRibbonControl1ToolBar1
        
        Private mUIRibbonControl1ToolBar2 As UIRibbonControl1ToolBar2
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIDocumentViewerWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "DocumentViewer"
            Me.SearchProperties(WinWindow.PropertyNames.Instance) = "2"
            Me.WindowTitles.Add("Invoice Printing")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIDocumentViewerClient() As WinClient
            Get
                If (Me.mUIDocumentViewerClient Is Nothing) Then
                    Me.mUIDocumentViewerClient = New WinClient(Me)
                    Me.mUIDocumentViewerClient.WindowTitles.Add("Invoice Printing")
                End If
                Return Me.mUIDocumentViewerClient
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIDocumentViewerClient As WinClient
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UITheRibbonPropertyPage
        Inherits WinControl
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(UITestControl.PropertyNames.Name) = "The Ribbon"
            Me.SearchProperties(UITestControl.PropertyNames.ControlType) = "PropertyPage"
            Me.WindowTitles.Add("Invoice Printing")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIRibbonControl1ToolBar() As WinToolBar
            Get
                If (Me.mUIRibbonControl1ToolBar Is Nothing) Then
                    Me.mUIRibbonControl1ToolBar = New WinToolBar(Me)
                    Me.mUIRibbonControl1ToolBar.SearchProperties(WinToolBar.PropertyNames.Name) = "Quick Access Toolbar"
                    Me.mUIRibbonControl1ToolBar.WindowTitles.Add("Invoice Printing")
                End If
                Return Me.mUIRibbonControl1ToolBar
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIRibbonControl1ToolBar As WinToolBar
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIRibbonControl1ToolBar
        Inherits WinToolBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinToolBar.PropertyNames.Name) = "Page Setup"
            Me.WindowTitles.Add("Invoice Printing")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOrientationButton() As WinButton
            Get
                If (Me.mUIOrientationButton Is Nothing) Then
                    Me.mUIOrientationButton = New WinButton(Me)
                    Me.mUIOrientationButton.SearchProperties(WinButton.PropertyNames.Name) = "Orientation"
                    Me.mUIOrientationButton.WindowTitles.Add("Invoice Printing")
                End If
                Return Me.mUIOrientationButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOrientationButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIRibbonControl1ToolBar1
        Inherits WinToolBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinToolBar.PropertyNames.Name) = "Export"
            Me.WindowTitles.Add("Invoice Printing")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIExportToButton() As WinButton
            Get
                If (Me.mUIExportToButton Is Nothing) Then
                    Me.mUIExportToButton = New WinButton(Me)
                    Me.mUIExportToButton.SearchProperties(WinButton.PropertyNames.Name) = "Export To"
                    Me.mUIExportToButton.WindowTitles.Add("Invoice Printing")
                End If
                Return Me.mUIExportToButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIExportToButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIRibbonControl1ToolBar2
        Inherits WinToolBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinToolBar.PropertyNames.Name) = "Print Options"
            Me.WindowTitles.Add("Invoice Printing")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISetupButton() As WinButton
            Get
                If (Me.mUISetupButton Is Nothing) Then
                    Me.mUISetupButton = New WinButton(Me)
                    Me.mUISetupButton.SearchProperties(WinButton.PropertyNames.Name) = "Setup"
                    Me.mUISetupButton.WindowTitles.Add("Invoice Printing")
                End If
                Return Me.mUISetupButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISetupButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIAdvantageDatabaseUpdWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Advantage Database Update - [ADVKW9]"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Advantage Database Update - [ADVKW9]")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemGroup() As UIItemGroup4
            Get
                If (Me.mUIItemGroup Is Nothing) Then
                    Me.mUIItemGroup = New UIItemGroup4(Me)
                End If
                Return Me.mUIItemGroup
            End Get
        End Property
        
        Public ReadOnly Property UIRibbonControlForm_MaWindow() As UIRibbonControlForm_MaWindow1
            Get
                If (Me.mUIRibbonControlForm_MaWindow Is Nothing) Then
                    Me.mUIRibbonControlForm_MaWindow = New UIRibbonControlForm_MaWindow1(Me)
                End If
                Return Me.mUIRibbonControlForm_MaWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemGroup As UIItemGroup4
        
        Private mUIRibbonControlForm_MaWindow As UIRibbonControlForm_MaWindow1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIItemGroup4
        Inherits WinGroup
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Advantage Database Update - [ADVKW9]")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIProcessButton() As WinButton
            Get
                If (Me.mUIProcessButton Is Nothing) Then
                    Me.mUIProcessButton = New WinButton(Me)
                    Me.mUIProcessButton.SearchProperties(WinButton.PropertyNames.Name) = "Process"
                    Me.mUIProcessButton.WindowTitles.Add("Advantage Database Update - [ADVKW9]")
                End If
                Return Me.mUIProcessButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIProcessButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIRibbonControlForm_MaWindow1
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "RibbonControlForm_MainRibbon"
            Me.WindowTitles.Add("Advantage Database Update - [ADVKW9]")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemCustom() As WinCustom
            Get
                If (Me.mUIItemCustom Is Nothing) Then
                    Me.mUIItemCustom = New WinCustom(Me)
                    Me.mUIItemCustom.WindowTitles.Add("Advantage Database Update - [ADVKW9]")
                End If
                Return Me.mUIItemCustom
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemCustom As WinCustom
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIYesWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "&Yes"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("&Yes")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIMessageBoxDialogWindow() As UIMessageBoxDialogWindow
            Get
                If (Me.mUIMessageBoxDialogWindow Is Nothing) Then
                    Me.mUIMessageBoxDialogWindow = New UIMessageBoxDialogWindow(Me)
                End If
                Return Me.mUIMessageBoxDialogWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIMessageBoxDialogWindow As UIMessageBoxDialogWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIMessageBoxDialogWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIMessageBoxDialogClient() As UIMessageBoxDialogClient
            Get
                If (Me.mUIMessageBoxDialogClient Is Nothing) Then
                    Me.mUIMessageBoxDialogClient = New UIMessageBoxDialogClient(Me)
                End If
                Return Me.mUIMessageBoxDialogClient
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIMessageBoxDialogClient As UIMessageBoxDialogClient
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIMessageBoxDialogClient
        Inherits WinClient
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIYesButton() As WinButton
            Get
                If (Me.mUIYesButton Is Nothing) Then
                    Me.mUIYesButton = New WinButton(Me)
                    Me.mUIYesButton.SearchProperties(WinButton.PropertyNames.Name) = "Yes"
                    Me.mUIYesButton.WindowTitles.Add("&Yes")
                End If
                Return Me.mUIYesButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIYesButton As WinButton
        #End Region
    End Class
End Namespace
