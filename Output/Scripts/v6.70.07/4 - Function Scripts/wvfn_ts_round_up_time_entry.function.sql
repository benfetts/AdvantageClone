IF EXISTS ( SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID( N'[dbo].[wvfn_ts_round_up_time_entry]' ) AND xtype IN ( N'FN', N'IF', N'TF' ))
BEGIN
	DROP FUNCTION [dbo].[wvfn_ts_round_up_time_entry];
END
GO
CREATE FUNCTION [dbo].[wvfn_ts_round_up_time_entry]
(
	@HOURS DECIMAL(7,2),
	@FOR_GENERAL_ENTRY BIT
)
RETURNS DECIMAL (7,2)
AS
BEGIN
	--  INIT
	BEGIN
		SET @HOURS = ISNULL(@HOURS, 0.00);
		SET @FOR_GENERAL_ENTRY = ISNULL(@FOR_GENERAL_ENTRY, 0);
	END
	IF @HOURS > 0.00
	BEGIN
		DECLARE 
			@MOD_VAL DECIMAL (7,2),
			@FULL_HRS INT
			;
		IF @FOR_GENERAL_ENTRY = 1
		BEGIN
			SELECT @MOD_VAL = CONVERT(DECIMAL(7,2), ISNULL(AGY_SETTINGS.AGY_SETTINGS_VALUE, AGY_SETTINGS.AGY_SETTINGS_DEF)) 
			FROM AGY_SETTINGS WITH(NOLOCK) WHERE AGY_SETTINGS.AGY_SETTINGS_CODE = 'TS_ROUND_TO';
		END
		ELSE
		BEGIN
			SELECT @MOD_VAL = CONVERT(DECIMAL(7,2), ISNULL(AGY_SETTINGS.AGY_SETTINGS_VALUE, AGY_SETTINGS.AGY_SETTINGS_DEF)) 
			FROM AGY_SETTINGS WITH(NOLOCK) WHERE AGY_SETTINGS.AGY_SETTINGS_CODE = 'TS_STOP_ROUND_TO';
		END;
		IF @MOD_VAL > 0.00
		BEGIN
			DECLARE
				@MOD_INCREMENT DECIMAL (7,2),
				@MOD_CEILING DECIMAL (7,2),
				@NEXT_INCREMENT DECIMAL (7,2),
				@ROUNDED BIT
				;
		    SELECT
				@MOD_INCREMENT = 0,
				@MOD_CEILING = 0,
				@NEXT_INCREMENT = 0,
				@ROUNDED = 0
				;				
			--	ROUND UP OPTIONS
			BEGIN
				DECLARE @REMAINDER DECIMAL (7,2);
				SELECT @REMAINDER = @HOURS - CAST(@HOURS AS INT);
				SELECT @FULL_HRS = @HOURS - @REMAINDER;
				-- 5 MINUTES
				IF @MOD_VAL = .08
				BEGIN
					SELECT @ROUNDED = 1;
					SELECT @NEXT_INCREMENT = CASE
												WHEN @REMAINDER > .00 AND @REMAINDER <= .08 THEN .08 -- 05
												WHEN @REMAINDER > .08 AND @REMAINDER <= .16 THEN .16 -- 10
												WHEN @REMAINDER > .16 AND @REMAINDER <= .25 THEN .25 -- 15
												WHEN @REMAINDER > .25 AND @REMAINDER <= .32 THEN .32 -- 20
												WHEN @REMAINDER > .32 AND @REMAINDER <= .40 THEN .40 -- 25 
												WHEN @REMAINDER > .40 AND @REMAINDER <= .50 THEN .50 -- 30
												WHEN @REMAINDER > .50 AND @REMAINDER <= .56 THEN .56 -- 35
												WHEN @REMAINDER > .56 AND @REMAINDER <= .64 THEN .64 -- 40
												WHEN @REMAINDER > .64 AND @REMAINDER <= .75 THEN .75 -- 45
												WHEN @REMAINDER > .75 AND @REMAINDER <= .80 THEN .80 -- 50
												WHEN @REMAINDER > .80 AND @REMAINDER <= .88 THEN .88 -- 55 
												WHEN @REMAINDER > .88 THEN 1 -- 60
											 END;
				END
				-- 10 MINUTES
				IF @MOD_VAL = .17 
				BEGIN
					SELECT @ROUNDED = 1;
					SELECT @NEXT_INCREMENT = CASE
												WHEN @REMAINDER > .00 AND @REMAINDER <= .17 THEN .17 -- 10
												WHEN @REMAINDER > .17 AND @REMAINDER <= .34 THEN .34 -- 20
												WHEN @REMAINDER > .34 AND @REMAINDER <= .50 THEN .50 -- 30
												WHEN @REMAINDER > .50 AND @REMAINDER <= .68 THEN .68 -- 40
												WHEN @REMAINDER > .68 AND @REMAINDER <= .85 THEN .85 -- 50
												WHEN @REMAINDER > .85 THEN 1 -- 60
											 END;
				END
				-- 15 MINUTES
				IF @MOD_VAL = .25
				BEGIN
					SELECT @ROUNDED = 1;
					SELECT @NEXT_INCREMENT = CASE
												WHEN @REMAINDER > .00 AND @REMAINDER <= .25 THEN .25 -- 15
												WHEN @REMAINDER > .25 AND @REMAINDER <= .50 THEN .50 -- 30
												WHEN @REMAINDER > .50 AND @REMAINDER <= .75 THEN .75 -- 45
												WHEN @REMAINDER > .75 THEN 1 -- 60
											 END;
				END
				-- 30 MINUTES
				IF @MOD_VAL = .50
				BEGIN
					SELECT @ROUNDED = 1;
					SELECT @NEXT_INCREMENT = CASE
												WHEN @REMAINDER > .00 AND @REMAINDER <= .50 THEN .50 -- 30
												WHEN @REMAINDER > .50 THEN 1 -- 60
											 END;
				END
				-- 60 MINUTES
				IF @MOD_VAL = 1.00
				BEGIN
					SELECT @ROUNDED = 1;
					SELECT @NEXT_INCREMENT = CASE
												WHEN @REMAINDER > .00 AND @REMAINDER <= .50 THEN 0 -- ROUND UP TO CURRENT HOUR
												WHEN @REMAINDER > .50 THEN 1 -- ROUND UP TO NEXT HOUR
											 END;
				END
			END
			--  JUST IN CASE
			IF @ROUNDED = 0
			BEGIN
				SELECT @MOD_INCREMENT = @HOURS / @MOD_VAL;
				SET @MOD_INCREMENT = ISNULL(@MOD_INCREMENT, 0.00);
				SELECT @MOD_CEILING = CEILING(@MOD_INCREMENT);
				SELECT @NEXT_INCREMENT = @MOD_VAL * @MOD_CEILING;
			END
			IF @NEXT_INCREMENT > 0 
			BEGIN
				SELECT @HOURS = @FULL_HRS + @NEXT_INCREMENT;
			END
		END
	END
	RETURN @HOURS;	
END