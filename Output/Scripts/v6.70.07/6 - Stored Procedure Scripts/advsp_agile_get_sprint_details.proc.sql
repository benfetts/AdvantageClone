IF EXISTS (
		SELECT *
		FROM dbo.sysobjects
		WHERE id = object_id(N'[dbo].[advsp_agile_get_sprint_details]')
			AND OBJECTPROPERTY(id, N'IsProcedure') = 1
		)
	DROP PROCEDURE [dbo].[advsp_agile_get_sprint_details]
GO

CREATE PROCEDURE [dbo].[advsp_agile_get_sprint_details] 
@SPRINT_ID INT,
@USER_CODE VARCHAR(100),
@CLEAR_BACKLOG_SORT BIT,
@CLEAR_BOARD_SORT BIT,
@BACKLOG_SORT TINYINT
AS
/*=========== QUERY ===========*/
BEGIN
	-- VARIABLES
	BEGIN
		--  CHECK:  advsp_agile_sprint_reorder_by_due_date uses the #CARDS TABLE OUTPUT!
		CREATE TABLE #CARDS (
			SprintHeaderID INT,
			SprintDetailID INT,
			TaskSequenceNumber SMALLINT,
			AlertID INT,
			SequenceNumber SMALLINT,
			JobNumber INT,
			JobComponentNumber SMALLINT,
			Priority SMALLINT,
			EmployeeCode VARCHAR(6),
			Title VARCHAR(MAX),
			TaskDescription VARCHAR(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS,
			BoardColumnID INT,
			BoardColumnStateCount INT,
			Description VARCHAR(MAX),
			CompleteDate SMALLDATETIME,
			CreateDate SMALLDATETIME,
			LastMovedDate SMALLDATETIME,
			FullName VARCHAR(500),
			AssignedEmployeeCode VARCHAR(6),
			AlertTemplateID INT,
			AlertStateID INT,
			AlertStateName VARCHAR(100),
			IsWorkItem BIT,
			IsBoardBacklog BIT,
			ClientName VARCHAR(40),
			JobName VARCHAR(500),
			StartDate SMALLDATETIME,
			DueDate SMALLDATETIME,
			CardQueryID INT IDENTITY(1, 1) NOT NULL,
			HoursAllowed DECIMAL(7, 2),
			BoardStateID INT,
			BoardStateName VARCHAR(100),
			IsTask BIT,
			Indicator VARCHAR(1),
			AlertCategoryID INT,
			AlertCategoryName VARCHAR(40),
			TimeDue VARCHAR(10),
			SequenceNumberIsNull BIT,
			TaskGridOrder SMALLINT,
			TaskGridOrderIsNull BIT,
			DueDateIsNull BIT,
			IsComplete BIT,
			LastModifiedDate SMALLDATETIME,
			LastModifiedBy VARCHAR(75),
			MyTask BIT,
			MyTaskCompleted BIT,
			AssignNumber INT,
			IsRead BIT,
			ShowChecklists BIT,
			ChecklistTotal INT,
			ChecklistComplete INT,
			ShowHours BIT,
			HoursAllocated DECIMAL(7, 2),
			HoursTotal DECIMAL(7, 2),
			TaskLevel VARCHAR(1000),
			IsAutoRoute BIT
			);
		DECLARE @JOBS TABLE (
			ID INT IDENTITY(1, 1) NOT NULL,
			JOB_NUMBER INT,
			JOB_COMPONENT_NBR SMALLINT
			);
		DECLARE @JOBS_TEMP TABLE (
			ID INT IDENTITY(1, 1) NOT NULL,
			JOB_NUMBER INT,
			JOB_COMPONENT_NBR SMALLINT
			);
		DECLARE @JOBS_ASSGN TABLE (
			ID INT IDENTITY(1, 1) NOT NULL,
			JOB_NUMBER INT,
			JOB_COMPONENT_NBR SMALLINT
			);
		DECLARE @JOBS_SCHED TABLE (
			ID INT IDENTITY(1, 1) NOT NULL,
			JOB_NUMBER INT,
			JOB_COMPONENT_NBR SMALLINT
			);
		DECLARE @EMP_CODE VARCHAR(6),
			@BOARD_ID INT,
			@JOB_NUMBER INT,
			@JOB_COMPONENT_NBR SMALLINT,
			@SPRINT_START SMALLDATETIME,
			@SPRINT_WEEKS INT,
			@BOARD_HDR_ID INT,
			@SPRINT_COMPLETE BIT,
			@EXLUDE_TASKS BIT,
			@BACKLOG_CT INT,
			@NUMBER_RECS_TO_RETURN INT,
			@INCL_ALL_JOBS INT,
			@OFFICE_RESTRICTION_COUNT AS INT,
			@SHOW_CHECKLISTS_ON_CARD AS BIT,
			@SHOW_HOURS_ON_CARD AS BIT
		DECLARE @ALERTS TABLE (ALERT_ID INT);
		DECLARE @SCHEDULE_TASKS TABLE(
			[ROWID] [int] NOT NULL,
            [AlertId] [int] NULL,
            [Priority] [smallint] NULL,
			[JOB_NUMBER] [int] NOT NULL,
			[JOB_COMPONENT_NBR] [smallint] NOT NULL,
			[SEQ_NBR] [smallint] NOT NULL,
			[TASK_CODE] [varchar](10) NULL,
			[TASK_DESCRIPTION] [varchar](40) NULL,
			[TASK_STATUS] [varchar](1) NULL,
			[EMP_CODE] [varchar](6) NULL,
			[FNC_EST] [varchar](6) NULL,
			[TASK_START_DATE] [smalldatetime] NULL,
			[JOB_REVISED_DATE] [smalldatetime] NULL,
			[JOB_COMPLETED_DATE] [varchar](30) NULL,
			[JOB_DUE_DATE] [varchar](30) NULL,
			[REVISED_DUE_TIME] [varchar](10) NULL,
			[TEMP_COMP_DATE] [varchar](30) NULL,
			[TRAFFIC_PHASE_ID] [int] NOT NULL,
			[PHASE_ORDER] [int] NOT NULL,
			[PHASE_DESC] [varchar](40) NOT NULL,
			[JOB_ORDER] [smallint] NULL,
			[JOB_DAYS] [smallint] NULL,
			[JOB_HRS] [decimal](8, 2) NULL,
			[DUE_TIME] [varchar](10) NULL,
			[MILESTONE] [smallint] NULL,
			[PREDECESSOR] [int] NULL,
			[DUE_DATE_LOCK] [smallint] NOT NULL,
			[FNC_COMMENTS] [varchar](4000) NULL,
			[DUE_DATE_COMMENTS] [varchar](4000) NULL,
			[REV_DATE_COMMENTS] [varchar](4000) NULL,
			[DISPERSED_HOURS] [decimal](38, 2) NOT NULL,
			[TRF_ROLE] [varchar](6) NULL,
			[FNC_DESCRIPTION] [varchar](30) NULL,
			[HAS_ASSIGNMENT] [int] NOT NULL,
			[HAS_ALERTS] [int] NOT NULL,
			[POSTED_HOURS] [decimal](38, 2) NULL,
			[POSTED_HOURS_ASSN] [decimal](38, 2) NULL,
			[PERC_COMPLETE] [decimal](38, 6) NULL,
			[PERC_COMPLETE_ASSN] [decimal](38, 6) NULL,
			[PHASE_START_DATE] [smalldatetime] NULL,
			[PHASE_END_DATE] [smalldatetime] NULL,
			[PARENT_TASK_SEQ] [smallint] NULL,
			[GRID_ORDER] [smallint] NULL,
			[LEVEL] [varchar](50) NULL,
			[HAS_DOCUMENTS] [bit] NULL,
			[HAS_CHILDREN] [bit] NULL,
			[HAS_PREDECESSORS] [bit] NULL
		)
		CREATE NONCLUSTERED INDEX IDX_ALRT_TSK_SEQ_NBR ON #CARDS ([TaskSequenceNumber]) INCLUDE ([AlertID]);
		CREATE NONCLUSTERED INDEX IDX_SPRINT_DTL_IS_COMPLETE ON #CARDS ([SprintDetailID], [IsComplete]);
		CREATE NONCLUSTERED INDEX IDX_SEQ_NBR ON #CARDS ([SequenceNumber]);
		CREATE NONCLUSTERED INDEX IDX_BRD_COL_ID ON #CARDS ([BoardColumnID]) INCLUDE ([SprintHeaderID], [AlertID]);
		CREATE NONCLUSTERED INDEX IDX_BRD_COL_ID_CD_CQ_LMD ON #CARDS ([BoardColumnID]) INCLUDE ([CreateDate], [CardQueryID], [LastModifiedDate]);
		CREATE NONCLUSTERED INDEX IDX_CARD_QUERY_ID_SN ON #CARDS ([CardQueryID]) INCLUDE ([SequenceNumber]);
		CREATE NONCLUSTERED INDEX IDX_IS_TASC ON #CARDS ([IsTask]) INCLUDE ([TaskSequenceNumber], [JobNumber], [JobComponentNumber]);
		CREATE NONCLUSTERED INDEX IDX_ALERT_ID ON #CARDS ([AlertID]);
		SET @BACKLOG_CT = 0;
		SET @OFFICE_RESTRICTION_COUNT = 0;
		SET @EMP_CODE = (
				SELECT TOP 1 EMP_CODE
				FROM [dbo].[SEC_USER] WITH(NOLOCK)
				WHERE UPPER([USER_CODE]) = UPPER(@USER_CODE)
				);
		IF DATALENGTH(@EMP_CODE) > 0
		BEGIN
			SELECT @OFFICE_RESTRICTION_COUNT = COUNT(1)
			FROM EMP_OFFICE WITH(NOLOCK)
			WHERE EMP_CODE = @EMP_CODE;
		END;
		SELECT @BOARD_HDR_ID = CAST(B.BOARD_HDR_ID AS INT),
			@SPRINT_COMPLETE = ISNULL(IS_COMPLETE, 0),
			@INCL_ALL_JOBS = ISNULL(INCL_ALL_JOBS, 0),
			@BOARD_ID = SH.BOARD_ID
		FROM SPRINT_HDR AS SH WITH(NOLOCK)
		INNER JOIN BOARD AS B WITH(NOLOCK) ON SH.BOARD_ID = B.ID
		WHERE SH.ID = @SPRINT_ID;
		SELECT @EXLUDE_TASKS = ISNULL(EXCLUDE_TASKS, 0)
		FROM dbo.BOARD_HDR WITH(NOLOCK)
		WHERE ID = @BOARD_HDR_ID;
		IF @BACKLOG_SORT IS NULL
		BEGIN
			SET @BACKLOG_SORT = 0;
		END
		IF @CLEAR_BACKLOG_SORT IS NULL
		BEGIN
			SET @CLEAR_BACKLOG_SORT = 0;
		END
		IF @CLEAR_BOARD_SORT IS NULL
		BEGIN
			SET @CLEAR_BOARD_SORT = 0;
		END
	END;
	--  REAL DATA
	BEGIN
		INSERT INTO #CARDS (
			SprintHeaderID,
			SprintDetailID,
			AlertID,
			SequenceNumber,
			SequenceNumberIsNull
			)
		SELECT SPRINT_HDR_ID,
			ID,
			ALERT_ID,
			ISNULL(SEQ_NBR, 0),
			CASE 
				WHEN SEQ_NBR IS NULL
					THEN 1
				ELSE 0
				END
		FROM SPRINT_DTL WITH(NOLOCK)
		WHERE SPRINT_HDR_ID = @SPRINT_ID
			AND BACKLOG_BOARD_ID IS NULL;
	END;
	--  ONLY PROCESS IF SPRINT IS OPEN
	IF @SPRINT_COMPLETE = 0
	BEGIN
		IF NOT @BOARD_ID IS NULL
		BEGIN
			-- "ORPHANS" ON BOARD
			BEGIN
				INSERT INTO #CARDS (
					SprintHeaderID,
					SprintDetailID,
					AlertID,
					SequenceNumber,
					IsBoardBacklog
					)
				SELECT SPRINT_HDR_ID,
					ID,
					ALERT_ID,
					SEQ_NBR,
					1
				FROM SPRINT_DTL WITH(NOLOCK)
				WHERE SPRINT_HDR_ID IS NULL
					AND BACKLOG_BOARD_ID = @BOARD_ID;
			END;
			IF @INCL_ALL_JOBS = 0
			BEGIN
				INSERT INTO @JOBS (
					JOB_NUMBER,
					JOB_COMPONENT_NBR
					)
				SELECT JOB_NUMBER,
					JOB_COMPONENT_NBR
				FROM BOARD_JOB WITH(NOLOCK)
				WHERE BOARD_ID = @BOARD_ID;
			END;
			ELSE
			BEGIN
				IF @OFFICE_RESTRICTION_COUNT IS NULL OR @OFFICE_RESTRICTION_COUNT = 0
				BEGIN
					INSERT INTO @JOBS_TEMP (JOB_NUMBER, JOB_COMPONENT_NBR)
					SELECT 
						JC.JOB_NUMBER, JC.JOB_COMPONENT_NBR
					FROM 
						JOB_COMPONENT JC WITH(NOLOCK)
					WHERE 
						JC.JOB_PROCESS_CONTRL NOT IN (6, 12);
				END;
				ELSE
				BEGIN
					INSERT INTO @JOBS_TEMP (JOB_NUMBER, JOB_COMPONENT_NBR)
					SELECT JC.JOB_NUMBER, JC.JOB_COMPONENT_NBR
					FROM 
						JOB_COMPONENT JC WITH(NOLOCK)
						INNER JOIN JOB_LOG JL WITH(NOLOCK) ON JC.JOB_NUMBER = JL.JOB_NUMBER
						INNER JOIN EMP_OFFICE EO WITH(NOLOCK) ON JL.OFFICE_CODE = EO.OFFICE_CODE
					WHERE 
						JC.JOB_PROCESS_CONTRL NOT IN (6, 12)
						AND EO.EMP_CODE = @EMP_CODE;
				END;
				-- EXCLUDE JOBS WITH NO SCHED TASK OR ASSIGNMENTS
				BEGIN
					INSERT INTO @JOBS_ASSGN (JOB_NUMBER, JOB_COMPONENT_NBR)
					SELECT
						J.JOB_NUMBER, J.JOB_COMPONENT_NBR
					FROM
						@JOBS_TEMP J
						INNER JOIN ALERT A WITH(NOLOCK) ON J.JOB_NUMBER = A.JOB_NUMBER AND J.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR
					WHERE
						A.IS_WORK_ITEM = 1
						AND (A.ASSIGN_COMPLETED IS NULL OR A.ASSIGN_COMPLETED = 0)
					GROUP BY
						J.JOB_NUMBER, J.JOB_COMPONENT_NBR
					HAVING
						COUNT(1) > 0;
					INSERT INTO @JOBS_SCHED (JOB_NUMBER, JOB_COMPONENT_NBR)
					SELECT
						J.JOB_NUMBER, J.JOB_COMPONENT_NBR
					FROM
						@JOBS_TEMP J
						INNER JOIN JOB_TRAFFIC JT WITH(NOLOCK) ON J.JOB_NUMBER = JT.JOB_NUMBER AND J.JOB_COMPONENT_NBR = JT.JOB_COMPONENT_NBR
						INNER JOIN JOB_TRAFFIC_DET JTD WITH(NOLOCK) ON J.JOB_NUMBER = JTD.JOB_NUMBER AND J.JOB_COMPONENT_NBR = JTD.JOB_COMPONENT_NBR
					WHERE
						JT.COMPLETED_DATE IS NULL
						AND JTD.JOB_COMPLETED_DATE IS NULL
					GROUP BY
						J.JOB_NUMBER, J.JOB_COMPONENT_NBR
					HAVING
						COUNT(1) > 0;
					INSERT INTO @JOBS (JOB_NUMBER, JOB_COMPONENT_NBR)
					SELECT DISTINCT
						X.JOB_NUMBER, X.JOB_COMPONENT_NBR
					FROM
						(SELECT JA.JOB_NUMBER, JA.JOB_COMPONENT_NBR FROM @JOBS_ASSGN JA
						 UNION 
						 SELECT JS.JOB_NUMBER, JS.JOB_COMPONENT_NBR FROM @JOBS_SCHED JS) AS X
						 INNER JOIN @JOBS_TEMP J ON X.JOB_NUMBER = J.JOB_NUMBER AND X.JOB_COMPONENT_NBR = J.JOB_COMPONENT_NBR;					
				END
			END;
		END;
		--CREATE ANY MISSING TASK ASSIGNMENT BRD'S
		BEGIN			
			DECLARE 
				@CURR_JOB_ID INT,
				@JOB_CTR INT,
				@JOB_REC_CNT INT,
				@CURR_SEQ_NBR SMALLINT,
				@TASK_CTR INT,
				@TASK_REC_COUNT INT;
			SELECT @JOB_REC_CNT = COUNT(1) FROM @JOBS;
			SELECT @JOB_CTR = 0;
			IF @JOB_REC_CNT IS NOT NULL AND @JOB_REC_CNT > 0
			BEGIN
				WHILE @JOB_CTR < @JOB_REC_CNT
				BEGIN
					SELECT
						@JOB_NUMBER = NULL,
						@JOB_COMPONENT_NBR = NULL,
						@TASK_REC_COUNT = NULL;
					SELECT @JOB_CTR = @JOB_CTR + 1;
					SELECT 
						@JOB_NUMBER = JOB_NUMBER,
						@JOB_COMPONENT_NBR = JOB_COMPONENT_NBR
					FROM 
						@JOBS
					WHERE 
						ID = @JOB_CTR;
					IF @JOB_NUMBER IS NOT NULL AND @JOB_NUMBER > 0 AND @JOB_COMPONENT_NBR IS NOT NULL AND @JOB_COMPONENT_NBR > 0
					BEGIN
						DELETE FROM @SCHEDULE_TASKS;
						DECLARE @TASKS TABLE (ID INT IDENTITY, JOB_NUMBER INT, JOB_COMPONENT_NBR SMALLINT, SEQ_NBR SMALLINT, ROW_ID INT);
						INSERT INTO @SCHEDULE_TASKS
						EXEC [dbo].[usp_wv_Traffic_Schedule_GetTasks] @JOB_NUMBER, @JOB_COMPONENT_NBR, '', @USER_CODE, '', '', '', 'N', 'N','N', NULL, '', 0;
						UPDATE @SCHEDULE_TASKS SET JOB_COMPLETED_DATE = NULL WHERE DATALENGTH(JOB_COMPLETED_DATE) = 0;
						INSERT INTO @TASKS(JOB_NUMBER, JOB_COMPONENT_NBR, SEQ_NBR, ROW_ID)
						SELECT
							S.JOB_NUMBER, S.JOB_COMPONENT_NBR, S.SEQ_NBR, S.ROWID
						FROM
							@SCHEDULE_TASKS S;
						-- TASKS WITHOUT ASSIGNMENTS
						BEGIN
							SELECT
								@TASK_REC_COUNT = COUNT(1) 
							FROM
								@TASKS;
							IF @TASK_REC_COUNT IS NOT NULL AND @TASK_REC_COUNT > 0
							BEGIN
								SELECT @TASK_CTR = 0;
								WHILE @TASK_CTR < @TASK_REC_COUNT
								BEGIN
									SELECT @CURR_SEQ_NBR = NULL;
									SELECT @TASK_CTR = @TASK_CTR + 1;
									SELECT 
										@CURR_SEQ_NBR = T.SEQ_NBR
									FROM
										@TASKS T
									WHERE
										T.ID = @TASK_CTR;
									IF @CURR_SEQ_NBR IS NOT NULL
									BEGIN
										INSERT INTO @ALERTS
										EXEC [dbo].[advsp_agile_add_assignment_from_task] 
												@JOB_NUMBER,
												@JOB_COMPONENT_NBR,
												@CURR_SEQ_NBR,
												@USER_CODE;
									END
								END
							END
						END;
						-- *****************************
						-- GET ANY ALERT RECORDS NOT ALREADY IN SPRINT
						BEGIN
							INSERT INTO #CARDS (
								SprintHeaderID,
								SprintDetailID,
								TaskSequenceNumber,
								AlertID,
								AlertStateID,
								BoardStateID,
								CompleteDate,
								IsComplete,
								TaskLevel
								)
							SELECT @SPRINT_ID,
								- 1,
								A.TASK_SEQ_NBR,
								A.ALERT_ID,
								- 1,
								- 1,
								TT.JOB_COMPLETED_DATE,
								CASE 
									WHEN (
											NOT TT.JOB_COMPLETED_DATE IS NULL
											OR A.ASSIGN_COMPLETED = 1
											)
										THEN 1
									ELSE 0
								END,
								TT.[LEVEL]
							FROM ALERT A WITH (NOLOCK)
							LEFT JOIN SPRINT_DTL SD WITH (NOLOCK) ON A.ALERT_ID = SD.ALERT_ID
							LEFT JOIN @SCHEDULE_TASKS TT ON A.JOB_NUMBER = TT.JOB_NUMBER
								AND A.JOB_COMPONENT_NBR = TT.JOB_COMPONENT_NBR
								AND A.TASK_SEQ_NBR = TT.SEQ_NBR
							WHERE (
									A.ALERT_LEVEL = 'BRD'
									OR NOT A.ALRT_NOTIFY_HDR_ID IS NULL
									AND NOT A.ALERT_STATE_ID IS NULL
									OR A.ALERT_TYPE_ID = 6
									)
								AND A.JOB_NUMBER = @JOB_NUMBER
								AND A.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR
								AND (
									A.ASSIGN_COMPLETED = 0
									OR A.ASSIGN_COMPLETED IS NULL
									)
								AND A.IS_WORK_ITEM = 1
								AND (A.IS_DRAFT IS NULL OR A.IS_DRAFT = 0)
								AND	1 =	CASE
											WHEN NOT TT.SEQ_NBR IS NULL AND SD.ALERT_ID IS NULL AND (TT.HAS_CHILDREN = 0 OR TT.HAS_CHILDREN IS NULL) AND NOT TT.SEQ_NBR IS NULL THEN 1
											WHEN TT.SEQ_NBR IS NULL AND SD.ALERT_ID IS NULL AND A.ALERT_LEVEL <> 'BRD' AND (A.ASSIGN_COMPLETED = 0 OR A.ASSIGN_COMPLETED IS NULL) THEN 1
											WHEN SD.ID IS NULL AND NOT A.ASSIGN_COMPLETED IS NULL THEN 0
											ELSE 0
										END
							ORDER BY
								TT.[LEVEL];
						END;
						-- *****************************
					END
				END	-- END OF JOB LOOP
			END
		END;
	END;
	--  PREP DATA/CLEAN UP
	BEGIN
		---- UPDATE CARD TABLE WITH ALERT DATA
		UPDATE #CARDS
		SET Title = A.[SUBJECT],
			[Description] = A.BODY_HTML,
			JobNumber = A.JOB_NUMBER,
			JobComponentNumber = A.JOB_COMPONENT_NBR,
			[Priority] = A.[PRIORITY],
			CreateDate = A.GENERATED,
			FullName = A.ASSIGNED_EMP_FML,
			AssignedEmployeeCode = A.ASSIGNED_EMP_CODE,
			EmployeeCode = A.ASSIGNED_EMP_CODE,
			--AlertTemplateID = A.ALRT_NOTIFY_HDR_ID,
			AlertStateID = A.ALERT_STATE_ID,
			BoardStateID = A.BOARD_STATE_ID,
			IsWorkItem = A.IS_WORK_ITEM,
			DueDate = A.DUE_DATE,
			HoursAllowed =	CASE 
								WHEN A.IS_WORK_ITEM = 1	THEN NULL
								ELSE A.HRS_ALLOWED
							END,
			AlertCategoryID = A.ALERT_CAT_ID,
			AlertCategoryName = AC.ALERT_DESC,
			Indicator = SUBSTRING(AC.ALERT_DESC, 1, 1),
			TimeDue = A.TIME_DUE,
			LastModifiedDate = A.LAST_UPDATED,
			LastModifiedBy = A.LAST_UPDATED_FML
		FROM #CARDS C
			INNER JOIN ALERT A WITH (NOLOCK) ON C.AlertID = A.ALERT_ID
			INNER JOIN ALERT_CATEGORY AC WITH (NOLOCK) ON A.ALERT_CAT_ID = AC.ALERT_CAT_ID;
		-- UPDATE CARD TABLE FOR ASSIGNMENTS WITH STATES THAT ALREADY MAPPED TO BOARD COLUMN
		UPDATE #CARDS
		SET TaskSequenceNumber = A.TASK_SEQ_NBR
		FROM 
			#CARDS C
			INNER JOIN ALERT A WITH (NOLOCK) ON C.AlertID = A.ALERT_ID
		WHERE 
			NOT A.TASK_SEQ_NBR IS NULL
			AND C.TaskSequenceNumber IS NULL;
		-- UPDATE ANY ORPHANS
		UPDATE SPRINT_DTL
		SET SPRINT_HDR_ID = @SPRINT_ID,
			BACKLOG_BOARD_ID = NULL
		FROM 
			SPRINT_DTL SD WITH (NOLOCK)
			INNER JOIN ALERT A WITH (NOLOCK) ON SD.ALERT_ID = A.ALERT_ID
			INNER JOIN BOARD_DTL BD WITH (NOLOCK) ON A.BOARD_STATE_ID = BD.ALERT_STATE_ID
		WHERE 
			BD.BOARD_HDR_ID = @BOARD_HDR_ID
			AND NOT SD.BACKLOG_BOARD_ID IS NULL
			AND SD.BACKLOG_BOARD_ID = @BOARD_ID
			AND SD.SPRINT_HDR_ID IS NULL;
		UPDATE #CARDS
		SET BoardColumnID = BD.BOARD_COL_ID
		FROM #CARDS C
			INNER JOIN ALERT A WITH (NOLOCK) ON C.AlertID = A.ALERT_ID
			INNER JOIN BOARD_DTL BD WITH (NOLOCK) ON A.BOARD_STATE_ID = BD.ALERT_STATE_ID
		WHERE 
			BD.BOARD_HDR_ID = @BOARD_HDR_ID
			AND C.BoardColumnID IS NULL;
		UPDATE #CARDS
		SET TaskDescription =	CASE 
									WHEN NOT C.TaskDescription IS NULL THEN C.TaskDescription
									WHEN JTD.TASK_DESCRIPTION IS NULL OR DATALENGTH(JTD.TASK_DESCRIPTION) = 0 THEN '[No Description]'
									ELSE JTD.TASK_DESCRIPTION COLLATE SQL_Latin1_General_CP1_CI_AS
								END,
			StartDate = JTD.TASK_START_DATE,
			DueDate = COALESCE(JTD.JOB_REVISED_DATE, JTD.JOB_DUE_DATE),
			TimeDue = JTD.REVISED_DUE_TIME,
			TaskGridOrder = JTD.GRID_ORDER
		FROM #CARDS C
			INNER JOIN JOB_TRAFFIC_DET JTD ON C.JobNumber = JTD.JOB_NUMBER
			AND C.JobComponentNumber = JTD.JOB_COMPONENT_NBR
			AND C.TaskSequenceNumber = JTD.SEQ_NBR;
		UPDATE #CARDS
		SET TaskSequenceNumber = - 1
		WHERE 
			TaskSequenceNumber IS NULL;
		UPDATE #CARDS
		SET BoardStateID = - 1
		WHERE 
			BoardStateID IS NULL OR SprintDetailID = - 1;
		UPDATE #CARDS
		SET BoardColumnID = - 1
		WHERE 
			BoardColumnID IS NULL
			OR BoardStateID = - 1
			OR SprintDetailID = - 1;
		UPDATE #CARDS
		SET SequenceNumber =	CASE 
									WHEN A.BACKLOG_SEQ_NBR IS NULL THEN NULL
									ELSE A.BACKLOG_SEQ_NBR
								END,
			SequenceNumberIsNull =	CASE 
										WHEN A.BACKLOG_SEQ_NBR IS NULL THEN 1
										ELSE 0
									END
		FROM #CARDS C
			INNER JOIN ALERT A WITH (NOLOCK) ON C.AlertID = A.ALERT_ID
		WHERE 
			C.SequenceNumber IS NULL;
		UPDATE #CARDS
		SET BoardColumnID = - 2,
			BoardStateID = - 2
		FROM 
			#CARDS C
			INNER JOIN ALERT A WITH (NOLOCK) ON C.AlertID = A.ALERT_ID
		WHERE 
			A.ASSIGN_COMPLETED = 1;
		IF @SPRINT_COMPLETE = 1
		BEGIN
			DELETE
			FROM #CARDS
			WHERE BoardColumnID <> - 2;
		END;
		UPDATE #CARDS
		SET BoardColumnID = - 2,
			BoardStateID = - 2,
			CompleteDate = JTD.JOB_COMPLETED_DATE
		FROM #CARDS C
		INNER JOIN JOB_TRAFFIC_DET JTD WITH (NOLOCK) ON C.JobNumber = JTD.JOB_NUMBER
			AND C.JobComponentNumber = JTD.JOB_COMPONENT_NBR
			AND C.TaskSequenceNumber = JTD.SEQ_NBR
		WHERE NOT (JTD.JOB_COMPLETED_DATE IS NULL)
			AND (
				C.BoardColumnID <> - 2
				OR C.BoardStateID <> - 2
				OR C.CompleteDate IS NULL
				);
		DELETE
		FROM #CARDS
		WHERE IsComplete = 1
			AND SprintDetailID = - 1;
	END
	--	CLEAN UP
	DELETE FROM #CARDS WHERE SprintDetailID = -1 AND NOT CompleteDate IS NULL;
	--  SET SEQUENCE
	BEGIN
		UPDATE #CARDS
		SET SequenceNumber = CC.TempSequence
		FROM #CARDS C
		INNER JOIN (
			SELECT ROW_NUMBER() OVER (
					ORDER BY BoardColumnID,
						SequenceNumberIsNull,
						SequenceNumber,
						TaskLevel,
						DueDateIsNull,
						DueDate,
						TaskGridOrderIsNull,
						TaskGridOrder,
						LastModifiedDate,
						CreateDate
					) AS TempSequence,
				CardQueryID,
				Title,
				SequenceNumber
			FROM #CARDS
			) AS CC ON C.CardQueryID = CC.CardQueryID
		WHERE C.SequenceNumber IS NULL;
		IF @CLEAR_BACKLOG_SORT = 1
		BEGIN
			-- CLEAR BACKLOG SORT
			UPDATE ALERT SET BACKLOG_SEQ_NBR = NULL
			FROM
				#CARDS C INNER JOIN ALERT A WITH (NOLOCK) ON C.AlertID = A.ALERT_ID
			WHERE
				C.BoardColumnID = -1;
		END
		IF @CLEAR_BOARD_SORT = 1
		BEGIN
			-- CLEAR BOARD SORT 
			UPDATE SPRINT_DTL SET SEQ_NBR = NULL
			FROM
				#CARDS C 
				INNER JOIN SPRINT_DTL SD  WITH (NOLOCK) ON C.AlertID = SD.ALERT_ID AND SD.SPRINT_HDR_ID = C.SprintHeaderID
			WHERE
				C.BoardColumnID > 0;
		END
		IF @CLEAR_BACKLOG_SORT = 0 AND @CLEAR_BOARD_SORT = 0
		BEGIN
			IF @BACKLOG_SORT = 0
			BEGIN
				-- SET BACKLOG SORT
				UPDATE ALERT SET BACKLOG_SEQ_NBR = C.SequenceNumber
				FROM
					#CARDS C INNER JOIN ALERT A ON C.AlertID = A.ALERT_ID
				WHERE
					C.BoardColumnID = -1 AND A.BACKLOG_SEQ_NBR IS NULL;
				-- SET BOARD SORT FOR ITEMS ON BOARD WITHOUT A SEQ
				UPDATE SPRINT_DTL SET SEQ_NBR = 0
				FROM
					#CARDS C 
					INNER JOIN SPRINT_DTL SD WITH (NOLOCK) ON C.AlertID = SD.ALERT_ID AND SD.SPRINT_HDR_ID = C.SprintHeaderID
				WHERE
					C.BoardColumnID > 0 AND SD.SEQ_NBR IS NULL;
			END
			IF @BACKLOG_SORT = 1
			BEGIN
				UPDATE #CARDS
				SET SequenceNumber = CC.TempSequence
				FROM #CARDS C
				INNER JOIN (
					SELECT ROW_NUMBER() OVER (
							ORDER BY LastModifiedDate DESC,
									 CreateDate DESC
							) AS TempSequence,
						CardQueryID,
						Title,
						SequenceNumber
					FROM #CARDS
					WHERE SprintDetailID = - 1
					) AS CC ON C.CardQueryID = CC.CardQueryID;
			END;
			IF @BACKLOG_SORT = 2
			BEGIN
				UPDATE #CARDS
				SET SequenceNumber = CC.TempSequence
				FROM #CARDS C
				INNER JOIN (
					SELECT ROW_NUMBER() OVER (
							ORDER BY LastModifiedDate,
									 CreateDate
							) AS TempSequence,
						CardQueryID,
						Title,
						SequenceNumber
					FROM #CARDS
					WHERE SprintDetailID = - 1
					) AS CC ON C.CardQueryID = CC.CardQueryID;
			END;
			IF @BACKLOG_SORT = 3
			BEGIN
				UPDATE #CARDS
				SET SequenceNumber = CC.TempSequence
				FROM #CARDS C
				INNER JOIN (
					SELECT ROW_NUMBER() OVER (
							ORDER BY [Priority],
							         LastModifiedDate,
								     CreateDate
							) AS TempSequence,
						CardQueryID,
						Title,
						SequenceNumber
					FROM #CARDS
					WHERE SprintDetailID = - 1
					) AS CC ON C.CardQueryID = CC.CardQueryID;
			END;
			IF @BACKLOG_SORT = 4
			BEGIN
				UPDATE #CARDS
				SET SequenceNumber = CC.TempSequence
				FROM #CARDS C
				INNER JOIN (
					SELECT ROW_NUMBER() OVER (
							ORDER BY [Priority] DESC,
							         LastModifiedDate,
								     CreateDate
							) AS TempSequence,
						CardQueryID,
						Title,
						SequenceNumber
					FROM #CARDS
					WHERE SprintDetailID = - 1
					) AS CC ON C.CardQueryID = CC.CardQueryID;
			END;
		END
	END;
	--  ONLY PROCESS DATA FURTHER AND RETURN QUERY IF NOT CLEARING SORTS
	IF @CLEAR_BACKLOG_SORT = 0 AND @CLEAR_BOARD_SORT = 0
	BEGIN
		-- TEMP SORT COMPLETED
		BEGIN
			UPDATE #CARDS
			SET SequenceNumber = CC.TempSequence
			FROM #CARDS C
			INNER JOIN (
				SELECT ROW_NUMBER() OVER (
						ORDER BY 
							LastModifiedDate DESC,
							CreateDate
						) AS TempSequence,
					CardQueryID,
					Title,
					SequenceNumber
				FROM #CARDS
				WHERE BoardColumnID = -2
				) AS CC ON C.CardQueryID = CC.CardQueryID
		END;
		-- MORE DATA PREP
		BEGIN
			UPDATE #CARDS
			SET HoursAllowed = (
					SELECT SUM(ISNULL(JOB_TRAFFIC_DET_EMPS.HOURS_ALLOWED, 0))
					FROM JOB_TRAFFIC_DET_EMPS
					WHERE JOB_NUMBER = JobNumber
						AND JOB_COMPONENT_NBR = JobComponentNumber
						AND SEQ_NBR = TaskSequenceNumber
					)
			WHERE IsWorkItem = 1;
			UPDATE #CARDS
			SET IsTask = CASE 
					WHEN TaskSequenceNumber > - 1
						THEN 1
					ELSE 0
					END,
				TaskGridOrderIsNull = CASE 
					WHEN TaskGridOrder IS NULL
						THEN 1
					ELSE 0
					END,
				DueDateIsNull = CASE 
					WHEN DueDate IS NULL
						THEN 1
					ELSE 0
					END;
			UPDATE C
			SET BoardColumnStateCount = BSC.STATE_COUNT
			FROM #CARDS C
				INNER JOIN dbo.SPRINT_HDR WITH (NOLOCK) ON C.SprintHeaderID = SPRINT_HDR.ID
				INNER JOIN dbo.BOARD WITH (NOLOCK) ON SPRINT_HDR.BOARD_ID = BOARD.ID
				INNER JOIN (
					SELECT BOARD_HDR_ID,
						BOARD_COL_ID,
						STATE_COUNT = COUNT(1)
					FROM dbo.BOARD_DTL WITH (NOLOCK)
					WHERE ISNULL(ALERT_STATE_ID, 0) > 0
					GROUP BY BOARD_HDR_ID,
						BOARD_COL_ID
					) BSC ON C.BoardColumnID = BSC.BOARD_COL_ID
					AND BOARD.BOARD_HDR_ID = BSC.BOARD_HDR_ID;
			UPDATE #CARDS
			SET AlertStateName = AST.ALERT_STATE_NAME
			FROM #CARDS C
				INNER JOIN ALERT_STATES AST WITH (NOLOCK) ON C.AlertStateID = AST.ALERT_STATE_ID;
			UPDATE #CARDS
			SET BoardStateName = AST.ALERT_STATE_NAME
			FROM #CARDS C
				INNER JOIN ALERT_STATES AST WITH (NOLOCK) ON C.BoardStateID = AST.ALERT_STATE_ID;
			UPDATE #CARDS
			SET ClientName = CL.CL_NAME,
				JobName = CASE 
							WHEN J.JOB_DESC <> JC.JOB_COMP_DESC THEN  REPLACE(STR(JC.JOB_NUMBER, 6), SPACE(1), '0') + '/' + REPLACE(STR(JC.JOB_COMPONENT_NBR, 3), SPACE(1), '0') + ' - ' + J.JOB_DESC + ' | ' + JC.JOB_COMP_DESC + ' | ' + CL.CL_NAME
							ELSE REPLACE(STR(JC.JOB_NUMBER, 6), SPACE(1), '0') + '/' + REPLACE(STR(JC.JOB_COMPONENT_NBR, 3), SPACE(1), '0') + ' - ' + J.JOB_DESC + ' | ' + CL.CL_NAME
						  END	
			FROM #CARDS C
				INNER JOIN JOB_LOG J WITH (NOLOCK) ON C.JobNumber = J.JOB_NUMBER
				INNER JOIN JOB_COMPONENT JC WITH (NOLOCK) ON C.JobNumber = JC.JOB_NUMBER
					AND C.JobComponentNumber = JC.JOB_COMPONENT_NBR
				INNER JOIN CLIENT CL WITH (NOLOCK) ON J.CL_CODE = CL.CL_CODE;

			UPDATE #CARDS
			SET 
				MyTask = 1,
				MyTaskCompleted = CASE
									 WHEN E.TEMP_COMP_DATE IS NULL THEN CAST(0 AS BIT)
									 ELSE CAST(1 AS BIT)
								  END
			FROM #CARDS C
				INNER JOIN JOB_TRAFFIC_DET_EMPS E WITH (NOLOCK) ON C.JobNumber = E.JOB_NUMBER AND C.JobComponentNumber = E.JOB_COMPONENT_NBR AND C.TaskSequenceNumber = E.SEQ_NBR
			WHERE
				E.EMP_CODE IN (SELECT EMP_CODE FROM SEC_USER WHERE USER_CODE = @USER_CODE);
			UPDATE #CARDS
			SET AssignNumber = ISNULL(A.ALERT_SEQ_NBR, A.ALERT_ID)
			FROM
				#CARDS C INNER JOIN ALERT A WITH (NOLOCK) ON C.AlertID = A.ALERT_ID
			WHERE
				C.IsTask = 0;
			UPDATE #CARDS
			SET Title = JTD.TASK_DESCRIPTION
			FROM #CARDS C
			INNER JOIN JOB_TRAFFIC_DET JTD WITH (NOLOCK) ON C.JobNumber = JTD.JOB_NUMBER
				AND C.JobComponentNumber = JTD.JOB_COMPONENT_NBR
				AND C.TaskSequenceNumber = JTD.SEQ_NBR
				AND C.IsTask = 1;
			UPDATE #CARDS SET
					IsRead = CASE WHEN AR.READ_ALERT = 1 THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END
			FROM
				ALERT_RCPT AR WITH (NOLOCK)
				INNER JOIN #CARDS C ON AR.ALERT_ID = C.AlertID
			WHERE
				AR.EMP_CODE = @EMP_CODE;
			UPDATE #CARDS SET
					IsRead = CASE WHEN JTDE.READ_ALERT = 1 THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END
			FROM
				JOB_TRAFFIC_DET_EMPS JTDE WITH (NOLOCK)
				INNER JOIN #CARDS C ON JTDE.JOB_NUMBER = C.JobNumber AND JTDE.JOB_COMPONENT_NBR = C.JobComponentNumber AND C.TaskSequenceNumber = JTDE.SEQ_NBR
			WHERE
				JTDE.EMP_CODE = @EMP_CODE;
			SELECT @SHOW_CHECKLISTS_ON_CARD =
				   CASE
						WHEN LOWER(AV.VARIABLE_VALUE) = 'true' THEN CAST(1 AS BIT)
						ELSE CAST(0 AS BIT)
				   END	
			FROM APP_VARS AV WITH (NOLOCK) 
			WHERE AV.USERID = @USER_CODE AND AV.[APPLICATION] = 'ALERT_VIEW' AND AV.VARIABLE_NAME = 'ShowChecklistsOnCards';
			SELECT @SHOW_HOURS_ON_CARD =
				   CASE
						WHEN LOWER(AV.VARIABLE_VALUE) = 'true' THEN CAST(1 AS BIT)
						ELSE CAST(0 AS BIT)
				   END	
			FROM APP_VARS AV WITH (NOLOCK) 
			WHERE AV.USERID = @USER_CODE AND AV.[APPLICATION] = 'ALERT_VIEW' AND AV.VARIABLE_NAME = 'ShowHoursOnCards';
			UPDATE #CARDS SET ShowChecklists = ISNULL(@SHOW_CHECKLISTS_ON_CARD, 0), ShowHours = ISNULL(@SHOW_HOURS_ON_CARD, 0);
			UPDATE #CARDS SET ChecklistTotal = A.TOTAL_ITEMS
			FROM
				#CARDS C
				INNER JOIN (
							SELECT 
								ALERT_ID, COUNT(1) AS TOTAL_ITEMS
							FROM	
								CHECKLIST_DTL CD WITH (NOLOCK) 
								INNER JOIN CHECKLIST_HDR CH WITH (NOLOCK) ON CD.CHECKLIST_HDR_ID = CH.ID
							GROUP BY
								ALERT_ID
							) A ON C.AlertID = A.ALERT_ID;
			UPDATE #CARDS SET ChecklistComplete = A.ITEMS_COMPLETE
			FROM
				#CARDS C
				INNER JOIN (
							SELECT 
								ALERT_ID, COUNT(1) AS ITEMS_COMPLETE
							FROM	
								CHECKLIST_DTL CD WITH (NOLOCK) 
								INNER JOIN CHECKLIST_HDR CH WITH (NOLOCK) ON CD.CHECKLIST_HDR_ID = CH.ID
							WHERE
								CD.IS_CHECKED = 1
							GROUP BY
								ALERT_ID
							) A ON C.AlertID = A.ALERT_ID;

			UPDATE #CARDS SET IsAutoRoute = 1
			FROM
				#CARDS C
				INNER JOIN ALERT A WITH(NOLOCK) ON C.AlertID = A.ALERT_ID
				INNER JOIN ALERT_NOTIFY_HDR ANH WITH(NOLOCK) ON A.ALRT_NOTIFY_HDR_ID = ANH.ALRT_NOTIFY_HDR_ID
			WHERE
				ANH.AUTO_NXT_STATE = 1;
		END
		-- CHECK SORT OF ITEMS WITH NO SEQUENCE
		BEGIN
			DECLARE @SORT_TBL TABLE (ID INT IDENTITY, CardQueryID INT);
			INSERT INTO @SORT_TBL
			SELECT 
				C.CardQueryID 
			FROM 
				#CARDS C
			WHERE
				(C.SequenceNumber IS NULL OR C.SequenceNumber = 0)
			ORDER BY
				C.BoardColumnID,
				C.DueDate,
				C.LastModifiedDate,
				C.CreateDate;
			UPDATE #CARDS
				SET SequenceNumber = S.ID
			FROM
				#CARDS C
				INNER JOIN @SORT_TBL S ON C.CardQueryID = S.CardQueryID;
		END
		--  FINAL RETURN
		SELECT SprintHeaderID,
			SprintDetailID,
			TaskSequenceNumber,
			AlertID,
			SequenceNumber,
			JobNumber,
			JobComponentNumber,
			Priority,
			EmployeeCode,
			Title,
			BoardColumnID,
			ISNULL(BoardColumnStateCount, 0) AS BoardColumnStateCount,
			CompleteDate,
			CreateDate,
			LastMovedDate,
			FullName,
			AssignedEmployeeCode,
			AlertTemplateID,
			AlertStateID,
			AlertStateName,
			ISNULL(IsWorkItem, 0) AS IsWorkItem,
			ISNULL(IsBoardBacklog, 0) AS IsBoardBacklog,
			ClientName,
			JobName,
			StartDate,
			DueDate,
			CardQueryID,
			HoursAllowed,
			BoardStateID,
			BoardStateName,
			IsTask,
			Indicator,
			AlertCategoryID,
			AlertCategoryName,
			TimeDue,
			LastModifiedDate,
			DueDateIsNull,
			TaskGridOrderIsNull,
			TaskGridOrder,
			LastModifiedBy,
			ISNULL(MyTask, 0) AS MyTask,
			ISNULL(MyTaskCompleted, 0) AS MyTaskCompleted,
			AssignNumber,
			IsRead,
			ShowChecklists,
			ISNULL(ChecklistComplete, 0) AS ChecklistComplete,
			ISNULL(ChecklistTotal, 0) AS ChecklistTotal,
			ShowHours,
			ISNULL(HoursAllocated, 0) AS HoursAllocated,
			ISNULL(HoursTotal, 0) AS HoursTotal,
			CurrentBoardStateID = BoardStateID,
			ISNULL(IsAutoRoute, 0) AS IsAutoRoute
		FROM #CARDS
		WHERE 1 = CASE 
					WHEN @EXLUDE_TASKS = 0 THEN 1
					WHEN AlertCategoryID <> 71 OR BoardStateID <> - 1 THEN 1
					ELSE 0
				  END;
		DROP TABLE #CARDS;
	END
END;
/*=========== QUERY ===========*/