IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[advsp_card_user_sort_alerts]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[advsp_card_user_sort_alerts]
GO
CREATE PROCEDURE [dbo].[advsp_card_user_sort_alerts] 
@EMP_CODE VARCHAR(6),
@ALERT_ID INT,
@NEW_POSITION INT
AS
/*=========== QUERY ===========*/
	--	TABLE VARIABLES
	BEGIN
		DECLARE @SORTING_TABLE TABLE (ID INT IDENTITY(1,1) NOT NULL,
									  ALERT_ID INT NULL,
									  GENERATED SMALLDATETIME NULL,
									  OLD_POSITION INT NULL,
									  NEW_POSITION INT NULL);
		DECLARE @SORTED_TABLE TABLE (ID INT IDENTITY(1,1) NOT NULL,
									  ALERT_ID INT NULL,
									  GENERATED SMALLDATETIME NULL,
									  OLD_POSITION INT NULL,
									  NEW_POSITION INT NULL);
	END
	--	VARIABLES
	BEGIN
		DECLARE
			@MOVING_ASSIGNMENT BIT,
			@ID_OF_MOVED_ROW INT,
			@CURRENT_ID INT, 
			@CURRENT_POSITION INT, 
			@OLD_POSITION INT,
			@LAST_POSITION INT,
			@POSITION_DIFF INT,
			@ROW_COUNT INT,
			@OFFSET [DECIMAL](9,3)
	END
	--	INITIALIZE
	BEGIN
		SET @MOVING_ASSIGNMENT = 0;
		SET @CURRENT_ID = 1;
		SET @NEW_POSITION = ISNULL(@NEW_POSITION, 0) + 1;
		IF EXISTS (SELECT 
						ALERT.* 
				   FROM 
						ALERT WITH(NOLOCK) INNER JOIN ALERT_RCPT WITH(NOLOCK) ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID 
				   WHERE 
						ALERT.ALERT_ID = @ALERT_ID
						AND NOT ALERT.ALRT_NOTIFY_HDR_ID IS NULL
						AND NOT ALERT.ALERT_STATE_ID IS NULL
						AND ALERT_RCPT.EMP_CODE = @EMP_CODE
						AND ALERT_RCPT.CURRENT_NOTIFY = 1)
		BEGIN
			SET @MOVING_ASSIGNMENT = 1;
		END
	END
	--	GET DATA
	BEGIN
		--	GET OFFSET
		--SELECT 
		--	@OFFSET = TIME_ZONE.OFFSET_HOURS - TIME_ZONE_DB.OFFSET_HOURS
		--FROM            
		--	AGENCY WITH(NOLOCK) INNER JOIN
		--	TIME_ZONE AS TIME_ZONE_DB WITH(NOLOCK) ON AGENCY.DB_TIMEZONE_ID = TIME_ZONE_DB.ID INNER JOIN
		--	TIME_ZONE  WITH(NOLOCK) ON AGENCY.TIMEZONE_ID = TIME_ZONE.ID;
		-- GET ALERT LIST
		IF @MOVING_ASSIGNMENT = 0
		BEGIN
			INSERT INTO @SORTING_TABLE (ALERT_ID, GENERATED, OLD_POSITION)
			SELECT 
				A.ALERT_ID,
				A.GENERATED,
				A.CARD_SEQ_NBR
			FROM (
				SELECT 
					ALERT.ALERT_ID,
					ISNULL(ALERT.LAST_UPDATED, ALERT.GENERATED) AS GENERATED,
					--[dbo].[advfn_local_date](@OFFSET, ISNULL(ALERT.LAST_UPDATED, ALERT.GENERATED)) AS GENERATED,
					ALERT_RCPT.CARD_SEQ_NBR
				FROM 
					ALERT WITH(NOLOCK)
					INNER JOIN ALERT_RCPT WITH(NOLOCK) ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID
				WHERE
					ALERT_RCPT.EMP_CODE = @EMP_CODE
					AND (ALERT_RCPT.CURRENT_NOTIFY IS NULL OR ALERT_RCPT.CURRENT_NOTIFY = 0)
			) AS A
			ORDER BY A.CARD_SEQ_NBR, A.GENERATED DESC;
		END
		ELSE
		BEGIN -- GET ASSIGNMENT LIST
			INSERT INTO @SORTING_TABLE (ALERT_ID, GENERATED, OLD_POSITION)
			SELECT 
				A.ALERT_ID,
				A.GENERATED,
				A.CARD_SEQ_NBR
			FROM (
				SELECT 
					ALERT.ALERT_ID,
					ISNULL(ALERT.LAST_UPDATED, ALERT.GENERATED) AS GENERATED,
					--[dbo].[advfn_local_date](@OFFSET, ISNULL(ALERT.LAST_UPDATED, ALERT.GENERATED)) AS GENERATED,
					ALERT_RCPT.CARD_SEQ_NBR
				FROM 
					ALERT WITH(NOLOCK)
					INNER JOIN ALERT_RCPT WITH(NOLOCK) ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID
				WHERE
					ALERT_RCPT.EMP_CODE = @EMP_CODE
					AND (ALERT_RCPT.CURRENT_NOTIFY = 1)
			) AS A
			ORDER BY A.CARD_SEQ_NBR, A.GENERATED DESC;
		END
		SELECT @ROW_COUNT = COUNT(1) FROM @SORTING_TABLE;
		IF @NEW_POSITION > @ROW_COUNT
		BEGIN
			SELECT @NEW_POSITION = @ROW_COUNT;
		END
		UPDATE @SORTING_TABLE SET OLD_POSITION = ID;-- WHERE OLD_POSITION IS NULL;
	END
	--	SET POSITION OF TASK THAT WAS MOVED
	BEGIN
		SELECT @ID_OF_MOVED_ROW = ID, @OLD_POSITION = COALESCE(ID, OLD_POSITION, 1) FROM @SORTING_TABLE WHERE ALERT_ID = @ALERT_ID;
		UPDATE @SORTING_TABLE SET NEW_POSITION = @NEW_POSITION WHERE ID = @ID_OF_MOVED_ROW;
		SET @POSITION_DIFF = @NEW_POSITION - @OLD_POSITION;
	END
	--SELECT @OLD_POSITION, @NEW_POSITION, @POSITION_DIFF
	--SELECT * FROM @SORTING_TABLE;
	IF @POSITION_DIFF <> 0
	BEGIN
		IF @POSITION_DIFF < 0
		BEGIN
			INSERT INTO @SORTED_TABLE (ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION)
			SELECT ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND OLD_POSITION < @NEW_POSITION ORDER BY OLD_POSITION;

			INSERT INTO @SORTED_TABLE (ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION)
			SELECT ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION FROM @SORTING_TABLE WHERE NEW_POSITION = @NEW_POSITION;

			INSERT INTO @SORTED_TABLE (ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION)
			SELECT ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND ALERT_ID NOT IN (SELECT ALERT_ID FROM @SORTED_TABLE) ORDER BY OLD_POSITION;

			UPDATE @SORTED_TABLE SET NEW_POSITION = ID WHERE NEW_POSITION IS NULL;
		END
		IF @POSITION_DIFF > 0
		BEGIN
			INSERT INTO @SORTED_TABLE (ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION)
			SELECT ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND OLD_POSITION <= @NEW_POSITION ORDER BY OLD_POSITION;

			INSERT INTO @SORTED_TABLE (ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION)
			SELECT ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION FROM @SORTING_TABLE WHERE NEW_POSITION = @NEW_POSITION;

			INSERT INTO @SORTED_TABLE (ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION)
			SELECT ALERT_ID, GENERATED, OLD_POSITION, NEW_POSITION FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND ALERT_ID NOT IN (SELECT ALERT_ID FROM @SORTED_TABLE) ORDER BY OLD_POSITION;

			UPDATE @SORTED_TABLE SET NEW_POSITION = ID WHERE NEW_POSITION IS NULL;
		END
		--	UPDATE THE RECORDS
		BEGIN
			IF @MOVING_ASSIGNMENT = 0
			BEGIN
				UPDATE ALERT_RCPT SET CARD_SEQ_NBR = ST.NEW_POSITION
				FROM ALERT_RCPT AR INNER JOIN @SORTED_TABLE ST ON AR.ALERT_ID = ST.ALERT_ID
				WHERE AR.EMP_CODE = @EMP_CODE;
			END
			ELSE
			BEGIN
				UPDATE ALERT_RCPT SET CARD_SEQ_NBR = ST.NEW_POSITION
				FROM ALERT_RCPT AR INNER JOIN @SORTED_TABLE ST ON AR.ALERT_ID = ST.ALERT_ID
				WHERE AR.EMP_CODE = @EMP_CODE AND (AR.CURRENT_NOTIFY = 1);
			END
		END
	END
	--SELECT * FROM @SORTED_TABLE ORDER BY ID;
/*=========== QUERY ===========*/