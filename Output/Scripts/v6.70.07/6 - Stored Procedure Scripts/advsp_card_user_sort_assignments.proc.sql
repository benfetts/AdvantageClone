IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[advsp_card_user_sort_assignments]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[advsp_card_user_sort_assignments]
GO
CREATE PROCEDURE [dbo].[advsp_card_user_sort_assignments] 
@USER_CODE VARCHAR(100),
@EMP_CODE VARCHAR(6),
@ALERT_ID INT,
@JOB_NUMBER INT,
@JOB_COMPONENT_NBR SMALLINT,
@TASK_SEQ_NBR SMALLINT,
@NEW_POSITION INT
AS
/*=========== QUERY ===========*/
	--	TABLE VARIABLES
	BEGIN
		DECLARE @SORTING_TABLE TABLE (ID INT IDENTITY(1,1) NOT NULL,
									  ALERT_ID INT NULL,
									  JOB_NUMBER INT NULL,
									  JOB_COMPONENT_NBR SMALLINT NULL,
									  TASK_SEQ_NBR SMALLINT NULL,
									  GENERATED SMALLDATETIME NULL,
									  OLD_POSITION INT NULL,
									  NEW_POSITION INT NULL,
									  IS_TASK INT NULL);
		DECLARE @SORTED_TABLE TABLE (ID INT IDENTITY(1,1) NOT NULL,
									  ALERT_ID INT NULL,
									  JOB_NUMBER INT NULL,
									  JOB_COMPONENT_NBR SMALLINT NULL,
									  TASK_SEQ_NBR SMALLINT NULL,
									  GENERATED SMALLDATETIME NULL,
									  OLD_POSITION INT NULL,
									  NEW_POSITION INT NULL,
									  IS_TASK INT NULL);
		CREATE TABLE #TASK_LIST (CDP VARCHAR(50) NULL,
							  JUST_JOB_DATA VARCHAR(100) NULL,
							  JOB_DATA VARCHAR(100) NULL,
							  FNC_CODE VARCHAR(100) NULL,
							  TASK_DESC VARCHAR(50) NULL,
							  FNC_CMMTS TEXT NULL,
							  [START_DATE] SMALLDATETIME NULL,
							  [END_DATE] SMALLDATETIME NULL,
							  DUE_TIME VARCHAR(100) NULL,
							  DUE_DATE_TIME VARCHAR(100) NULL,
							  JOB_NUMBER INT NULL,
							  JOB_COMPONENT_NBR SMALLINT NULL,
							  HOURS_ALLOWED DECIMAL(9,3) NULL,
							  TASK_SEQ_NBR SMALLINT NULL,
							  TEMP_COMPLETE_DATE SMALLDATETIME NULL,
							  EMP_CODE VARCHAR(6) NULL,
							  IS_EVENT BIT NULL,
							  EVENT_TASK_ID INT NULL,
							  TASK_STATUS VARCHAR(10) NULL,
							  TASK_STATUS_TEXT VARCHAR (200) NULL,
							  CARD_GROUPING_PRIORITY VARCHAR (200) NULL,
							  ACTIVE_PENDING_TEXT VARCHAR (200) NULL,
							  JOB_DESC VARCHAR(500) NULL,
							  JOB_COMP_DESC VARCHAR(500) NULL,
							  JOB_AND_COMP_TEXT VARCHAR(500) NULL,
							  HAS_DOCUMENTS BIT NULL,
							  CARD_SEQ_NBR INT NULL,
							  PERCENT_COMPLETE DECIMAL (9,3),
							  [STARTED] VARCHAR(30) NULL,
							  CL_NAME VARCHAR(100) NULL,
							  IS_BOARD_TASK BIT NULL,
							  ALERT_ID INT,
							  SPRINT_ID INT,
							  [PRIORITY] INT,
							  END_SELECT_CLAUSE VARCHAR(10) NULL,
							  GENERATED_DATE SMALLDATETIME NULL
							  )
	END
	--	VARIABLES
	BEGIN
		DECLARE
			@MOVING_ASSIGNMENT BIT,
			@ID_OF_MOVED_ROW INT,
			@CURRENT_ID INT, 
			@CURRENT_POSITION INT, 
			@OLD_POSITION INT,
			@LAST_POSITION INT,
			@POSITION_DIFF INT,
			@ROW_COUNT INT,
			@OFFSET [DECIMAL](9,3),
			@START_DATE SMALLDATETIME
	END
	--	INITIALIZE
	BEGIN
		SET @START_DATE = GETDATE();
		SET @MOVING_ASSIGNMENT = 0;
		SET @CURRENT_ID = 1;
		SET @NEW_POSITION = ISNULL(@NEW_POSITION, 0) + 1;
		
	END

--	GET TASKS FROM QUERY TO MAKE SURE CURRENT SORT CORRECT
BEGIN

	DECLARE
		@TASK_STATUS VARCHAR(1),
		@TASK_SHOW VARCHAR(256),
		@SEARCH_VAL VARCHAR(500);

	SET @TASK_STATUS = '';
	SET @TASK_SHOW = 'All';
	SET @SEARCH_VAL = '';

	SELECT 
		@TASK_STATUS =
		CASE 
			WHEN UPPER(VARIABLE_VALUE ) = 'PROJECTED' THEN 'P'
			WHEN UPPER(VARIABLE_VALUE ) = 'ACTIVE' THEN 'A'
			WHEN UPPER(VARIABLE_VALUE ) = 'H' THEN 'H'
			WHEN UPPER(VARIABLE_VALUE ) = 'L' THEN 'L'
			WHEN UPPER(VARIABLE_VALUE ) = 'EVENT_TASKS' THEN 'E'
			ELSE ''
		END
	FROM 
	APP_VARS WHERE [APPLICATION] = 'MyTasks' AND VARIABLE_NAME = 'ddType' AND [USERID] = @USER_CODE;

	SELECT 
		@TASK_SHOW =
		CASE 
			WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN 'All'
			ELSE VARIABLE_VALUE
		END
	FROM 
	APP_VARS WHERE [APPLICATION] = 'MyTasks' AND VARIABLE_NAME = 'ddTaskShow' AND [USERID] = @USER_CODE;

	SELECT 
		@SEARCH_VAL =
		CASE 
			WHEN DATALENGTH(VARIABLE_VALUE ) = 0 THEN ''
			ELSE VARIABLE_VALUE
		END
	FROM 
	APP_VARS WHERE [APPLICATION] = 'MyTasks' AND VARIABLE_NAME = 'sSearch' AND [USERID] = @USER_CODE;

	INSERT INTO #TASK_LIST (CDP,JUST_JOB_DATA,JOB_DATA,FNC_CODE,TASK_DESC,FNC_CMMTS,[START_DATE],[END_DATE],DUE_TIME,DUE_DATE_TIME,JOB_NUMBER,JOB_COMPONENT_NBR,
							  HOURS_ALLOWED,TASK_SEQ_NBR,TEMP_COMPLETE_DATE,EMP_CODE,IS_EVENT,EVENT_TASK_ID,TASK_STATUS,TASK_STATUS_TEXT,CARD_GROUPING_PRIORITY,
							  ACTIVE_PENDING_TEXT,JOB_DESC,JOB_COMP_DESC,JOB_AND_COMP_TEXT,HAS_DOCUMENTS,CARD_SEQ_NBR,PERCENT_COMPLETE,[STARTED],
							  CL_NAME,IS_BOARD_TASK,ALERT_ID,SPRINT_ID,[PRIORITY], END_SELECT_CLAUSE)
	EXEC advsp_tasks_get_by_employee @UserID = @USER_CODE, @EmpCode = @EMP_CODE, @StartDate = @START_DATE, @TaskStatus = @TASK_STATUS, @TaskShow = @TASK_SHOW, @Search = @SEARCH_VAL, @CP = 0, @CPID = 0, @SORT = '';

	DELETE FROM #TASK_LIST WHERE IS_EVENT = 1

    UPDATE #TASK_LIST SET GENERATED_DATE = (SELECT ISNULL(ALERT.LAST_UPDATED, ALERT.GENERATED) FROM ALERT WHERE ALERT.ALERT_ID = #TASK_LIST.ALERT_ID)

	SELECT * FROM #TASK_LIST 
	--SELECT @EMP_CODE
END

	--	GET DATA
	BEGIN
		--	GET OFFSET
		--SELECT 
		--	@OFFSET = TIME_ZONE.OFFSET_HOURS - TIME_ZONE_DB.OFFSET_HOURS
		--FROM            
		--	AGENCY WITH(NOLOCK) INNER JOIN
		--	TIME_ZONE AS TIME_ZONE_DB WITH(NOLOCK) ON AGENCY.DB_TIMEZONE_ID = TIME_ZONE_DB.ID INNER JOIN
		--	TIME_ZONE  WITH(NOLOCK) ON AGENCY.TIMEZONE_ID = TIME_ZONE.ID;

		-- GET ASSIGNMENT LIST
			INSERT INTO @SORTING_TABLE (ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, IS_TASK)
			SELECT 
				A.ALERT_ID,
				A.JOB_NUMBER INT,
				A.JOB_COMPONENT_NBR SMALLINT,
				A.TASK_SEQ_NBR,
				A.GENERATED,
				A.CARD_SEQ_NBR,
				A.IS_TASK
			FROM (
				SELECT 
					ALERT.ALERT_ID,NULL AS JOB_NUMBER, NULL AS JOB_COMPONENT_NBR, NULL AS TASK_SEQ_NBR,
					ISNULL(ALERT.LAST_UPDATED, ALERT.GENERATED) AS GENERATED,
					--[dbo].[advfn_local_date](@OFFSET, ISNULL(ALERT.LAST_UPDATED, ALERT.GENERATED)) AS GENERATED,
					ALERT_RCPT.CARD_SEQ_NBR, 0 AS IS_TASK
				FROM 
					ALERT WITH(NOLOCK)
					INNER JOIN ALERT_RCPT WITH(NOLOCK) ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID
				WHERE
					ALERT_RCPT.EMP_CODE = @EMP_CODE
					AND (ALERT_RCPT.CURRENT_NOTIFY = 1) AND (ALERT.ASSIGN_COMPLETED = 0 OR ALERT.ASSIGN_COMPLETED IS NULL) AND ((ALERT.ALRT_NOTIFY_HDR_ID IS NULL  AND ALERT_RCPT.CURRENT_NOTIFY = 1)
																															     OR (NOT ALERT_RCPT.ALRT_NOTIFY_HDR_ID IS NULL AND NOT ALERT_RCPT.ALERT_STATE_ID IS NULL)) --AND ALERT.ASSIGNED_EMP_CODE = @EMP_CODE))

				UNION ALL

				SELECT ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR,
						GENERATED_DATE AS GENERATED,
					   --[dbo].[advfn_local_date](@OFFSET, GENERATED_DATE) AS GENERATED,
					   CARD_SEQ_NBR, 1 AS IS_TASK
				FROM #TASK_LIST

			) AS A
			ORDER BY A.CARD_SEQ_NBR, A.GENERATED DESC;

		
		
		SELECT @ROW_COUNT = COUNT(1) FROM @SORTING_TABLE;
		IF @NEW_POSITION > @ROW_COUNT
		BEGIN
			SELECT @NEW_POSITION = @ROW_COUNT;
		END
		UPDATE @SORTING_TABLE SET OLD_POSITION = ID;-- WHERE OLD_POSITION IS NULL;
		--SELECT * FROM @SORTING_TABLE
	END

	--	SET POSITION OF TASK THAT WAS MOVED
	BEGIN
		SELECT @ID_OF_MOVED_ROW = ID, @OLD_POSITION = COALESCE(ID, OLD_POSITION, 1) FROM @SORTING_TABLE WHERE ALERT_ID = @ALERT_ID;
		UPDATE @SORTING_TABLE SET NEW_POSITION = @NEW_POSITION WHERE ID = @ID_OF_MOVED_ROW;
		SET @POSITION_DIFF = @NEW_POSITION - @OLD_POSITION;
	END
	--SELECT @OLD_POSITION, @NEW_POSITION, @POSITION_DIFF
	--SELECT * FROM @SORTING_TABLE;

	IF @POSITION_DIFF <> 0
	BEGIN
		IF @POSITION_DIFF < 0
		BEGIN
			INSERT INTO @SORTED_TABLE (ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK)
			SELECT ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND OLD_POSITION < @NEW_POSITION ORDER BY OLD_POSITION;

			INSERT INTO @SORTED_TABLE (ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK)
			SELECT ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK FROM @SORTING_TABLE WHERE NEW_POSITION = @NEW_POSITION;

			INSERT INTO @SORTED_TABLE (ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK)
			SELECT ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND ALERT_ID NOT IN (SELECT ALERT_ID FROM @SORTED_TABLE) ORDER BY OLD_POSITION;

			UPDATE @SORTED_TABLE SET NEW_POSITION = ID WHERE NEW_POSITION IS NULL;
		END
		IF @POSITION_DIFF > 0
		BEGIN
			INSERT INTO @SORTED_TABLE (ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK)
			SELECT ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND OLD_POSITION <= @NEW_POSITION ORDER BY OLD_POSITION;

			INSERT INTO @SORTED_TABLE (ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK)
			SELECT ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK FROM @SORTING_TABLE WHERE NEW_POSITION = @NEW_POSITION;

			INSERT INTO @SORTED_TABLE (ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK)
			SELECT ALERT_ID, JOB_NUMBER, JOB_COMPONENT_NBR, TASK_SEQ_NBR, GENERATED, OLD_POSITION, NEW_POSITION, IS_TASK FROM @SORTING_TABLE WHERE NEW_POSITION IS NULL AND ALERT_ID NOT IN (SELECT ALERT_ID FROM @SORTED_TABLE) ORDER BY OLD_POSITION;

			UPDATE @SORTED_TABLE SET NEW_POSITION = ID WHERE NEW_POSITION IS NULL;
		END
		--UPDATE THE RECORDS
		BEGIN	 
		
			UPDATE ALERT_RCPT SET CARD_SEQ_NBR = ST.NEW_POSITION
			FROM ALERT_RCPT AR INNER JOIN @SORTED_TABLE ST ON AR.ALERT_ID = ST.ALERT_ID
			WHERE AR.EMP_CODE = @EMP_CODE AND (AR.CURRENT_NOTIFY = 1);

			UPDATE JOB_TRAFFIC_DET_EMPS SET CARD_SEQ_NBR = ST.NEW_POSITION
			FROM JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN @SORTED_TABLE ST ON JTDE.JOB_NUMBER = ST.JOB_NUMBER AND JTDE.JOB_COMPONENT_NBR = ST.JOB_COMPONENT_NBR AND JTDE.SEQ_NBR = ST.TASK_SEQ_NBR 
			WHERE JTDE.EMP_CODE = @EMP_CODE AND ST.IS_TASK = 1; 
			
		END
	END
	--SELECT * FROM @SORTED_TABLE --ORDER BY ID;
/*=========== QUERY ===========*/