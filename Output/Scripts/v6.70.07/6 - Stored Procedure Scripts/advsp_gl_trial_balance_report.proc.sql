
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[advsp_gl_trial_balance_report]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[advsp_gl_trial_balance_report]
GO

CREATE PROCEDURE [dbo].[advsp_gl_trial_balance_report]
	@USER_CODE VARCHAR(100),
	@ENDING_PPPERIOD varchar(6),
	@RECORD_SOURCE_ID INT = 0,
	@OFFICES VARCHAR(MAX),
	@DEPARTMENTS VARCHAR(MAX),
	@OTHERS VARCHAR(MAX),
	@BASES VARCHAR(MAX),
	@INCL_CURRENT_ASSESTS BIT = 1,
	@INCL_NON_CURRENT_ASSESTS BIT = 1,
	@INCL_FIXED_ASSESTS BIT = 1,
	@INCL_CURRENT_LIABILITIES BIT = 1,
	@INCL_NON_CURRENT_LIABILITIES BIT = 1,
	@INCL_EQUITY BIT = 1,
	@INCL_INCOME BIT = 1,
	@INCL_INCOME_OTHER BIT = 1,
	@INCL_EXPENSE_COS BIT = 1,
	@INCL_EXPENSE_OPERATING BIT = 1,
	@INCL_EXPENSE_OTHER BIT = 1,
	@INCL_EXPENSE_TAXES BIT = 1
AS
BEGIN

	SET NOCOUNT ON
	
	DECLARE @GLTYPES_TBL TABLE (GLATYPE VARCHAR(2) COLLATE SQL_Latin1_General_CP1_CS_AS, 
								TYPE_DESC VARCHAR(25) COLLATE SQL_Latin1_General_CP1_CS_AS)	
	DECLARE @GLOFFICE_TBL TABLE (OFFICE_CODE VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CS_AS)	
	DECLARE @GLDEPT_TBL TABLE (DEPT_CODE VARCHAR(5) COLLATE SQL_Latin1_General_CP1_CS_AS)
	DECLARE @GLOTHER_TBL TABLE (OTHER_CODE VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CS_AS)
	DECLARE @GLBASE_TBL TABLE (BASE_CODE VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CS_AS)

	DECLARE @EMP_CODE VARCHAR(6)
	DECLARE @USE_OFFICE BIT
	DECLARE @USE_DEPT BIT
	DECLARE @USE_OTHER BIT
	DECLARE @USE_BASE BIT
	DECLARE @GL_PP_START VARCHAR(6)
	DECLARE @EMP_OFFICE_LIMITED BIT 
		
	SELECT 
		@GL_PP_START = MIN( PPPERIOD )
	FROM 
		dbo.POSTPERIOD
	WHERE 
		PPGLYEAR = ( SELECT 
						PPGLYEAR
					 FROM 
						POSTPERIOD
					 WHERE 
						PPPERIOD = @ENDING_PPPERIOD )

	IF @INCL_CURRENT_ASSESTS = 1
		INSERT INTO @GLTYPES_TBL VALUES ('2', 'Current Asset')
	
	IF @INCL_NON_CURRENT_ASSESTS = 1
		INSERT INTO @GLTYPES_TBL VALUES ('1', 'Non-Current Asset')

	IF @INCL_FIXED_ASSESTS = 1
		INSERT INTO @GLTYPES_TBL VALUES ('3', 'Fixed Asset')

	IF @INCL_CURRENT_LIABILITIES = 1
		INSERT INTO @GLTYPES_TBL VALUES ('5', 'Current Liability')

	IF @INCL_NON_CURRENT_LIABILITIES = 1
		INSERT INTO @GLTYPES_TBL VALUES ('4', 'Non-Current Liability')

	IF @INCL_EQUITY = 1
		INSERT INTO @GLTYPES_TBL VALUES ('20', 'Equity')

	IF @INCL_INCOME = 1
		INSERT INTO @GLTYPES_TBL VALUES ('8', 'Income')

	IF @INCL_INCOME_OTHER = 1
		INSERT INTO @GLTYPES_TBL VALUES ('9', 'Income - Other')
	
	IF @INCL_EXPENSE_COS = 1
		INSERT INTO @GLTYPES_TBL VALUES ('13', 'Expense - COS')

	IF @INCL_EXPENSE_OPERATING = 1
		INSERT INTO @GLTYPES_TBL VALUES ('14', 'Expense - Operating')

	IF @INCL_EXPENSE_OTHER = 1
		INSERT INTO @GLTYPES_TBL VALUES ('15', 'Expense - Other')

	IF @INCL_EXPENSE_TAXES = 1
		INSERT INTO @GLTYPES_TBL VALUES ('16', 'Expense - Taxes')

	SELECT @EMP_CODE = EMP_CODE FROM dbo.SEC_USER WHERE UPPER(USER_CODE) = UPPER(@USER_CODE)

	SELECT 
		@USE_BASE =	CASE 
						WHEN SEGMENT1_FORMAT IS NOT NULL AND SEGMENT1_TYPE = 1 THEN 1
						WHEN SEGMENT2_FORMAT IS NOT NULL AND SEGMENT2_TYPE = 1 THEN 1
						WHEN SEGMENT3_FORMAT IS NOT NULL AND SEGMENT3_TYPE = 1 THEN 1
						WHEN SEGMENT4_FORMAT IS NOT NULL AND SEGMENT4_TYPE = 1 THEN 1
						ELSE 0
					END, 
		@USE_OFFICE = CASE 
						WHEN SEGMENT1_FORMAT IS NOT NULL AND SEGMENT1_TYPE = 2 THEN 1
						WHEN SEGMENT2_FORMAT IS NOT NULL AND SEGMENT2_TYPE = 2 THEN 1
						WHEN SEGMENT3_FORMAT IS NOT NULL AND SEGMENT3_TYPE = 2 THEN 1
						WHEN SEGMENT4_FORMAT IS NOT NULL AND SEGMENT4_TYPE = 2 THEN 1
						ELSE 0
					  END,
		@USE_DEPT =	CASE 
						WHEN SEGMENT1_FORMAT IS NOT NULL AND SEGMENT1_TYPE = 3 THEN 1
						WHEN SEGMENT2_FORMAT IS NOT NULL AND SEGMENT2_TYPE = 3 THEN 1
						WHEN SEGMENT3_FORMAT IS NOT NULL AND SEGMENT3_TYPE = 3 THEN 1
						WHEN SEGMENT4_FORMAT IS NOT NULL AND SEGMENT4_TYPE = 3 THEN 1
						ELSE 0
					END,
		@USE_OTHER = CASE 
						WHEN SEGMENT1_FORMAT IS NOT NULL AND SEGMENT1_TYPE = 4 THEN 1
						WHEN SEGMENT2_FORMAT IS NOT NULL AND SEGMENT2_TYPE = 4 THEN 1
						WHEN SEGMENT3_FORMAT IS NOT NULL AND SEGMENT3_TYPE = 4 THEN 1
						WHEN SEGMENT4_FORMAT IS NOT NULL AND SEGMENT4_TYPE = 4 THEN 1
						ELSE 0
					 END   
	FROM 
		dbo.GLCONFIG
		
	IF @USE_OFFICE = 1
	BEGIN

		IF EXISTS (SELECT * FROM dbo.EMP_OFFICE WHERE EMP_CODE = @EMP_CODE)
			SET @EMP_OFFICE_LIMITED = 1
		ELSE
			SET @EMP_OFFICE_LIMITED = 0

		IF ISNULL(@OFFICES, '') = '' 
		BEGIN
		
			INSERT INTO @GLOFFICE_TBL
				SELECT DISTINCT
					GLACCOUNT.GLAOFFICE
				FROM
					dbo.GLACCOUNT
				LEFT OUTER JOIN
					dbo.GLOXREF ON GLACCOUNT.GLAOFFICE = GLOXREF.GLOXGLOFFICE 
				LEFT OUTER JOIN
					dbo.OFFICE ON GLOXREF.GLOXOFFICE = OFFICE.OFFICE_CODE 
				LEFT OUTER JOIN
					dbo.advtf_employee_office_limits(@EMP_CODE) EO ON OFFICE.OFFICE_CODE = EO.OFFICE_CODE
				WHERE
					1 = CASE WHEN @EMP_OFFICE_LIMITED = 0 THEN 1 WHEN EO.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END

		END
		ELSE 
		BEGIN
		
			INSERT INTO @GLOFFICE_TBL
				SELECT DISTINCT
					GLO.GLOXGLOFFICE
				FROM
					(SELECT
						[GLOXGLOFFICE] = LTRIM(RTRIM(items))
					 FROM
						dbo.udf_split_list(@OFFICES, ',')) GLO
				LEFT OUTER JOIN
					dbo.GLOXREF ON GLO.GLOXGLOFFICE = GLOXREF.GLOXGLOFFICE 
				LEFT OUTER JOIN
					dbo.OFFICE ON GLOXREF.GLOXOFFICE = OFFICE.OFFICE_CODE 
				LEFT OUTER JOIN
					dbo.advtf_employee_office_limits(@EMP_CODE) EO ON OFFICE.OFFICE_CODE = EO.OFFICE_CODE
				WHERE
					1 = CASE WHEN @EMP_OFFICE_LIMITED = 0 THEN 1 WHEN EO.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END
					
		END

	END
	
	IF @USE_DEPT = 1 
	BEGIN

		IF ISNULL(@DEPARTMENTS, '') = '' 
		BEGIN

			INSERT INTO @GLDEPT_TBL
				SELECT DISTINCT
					GLACCOUNT.GLADEPT
				FROM
					dbo.GLACCOUNT

		END
		ELSE 
		BEGIN

			INSERT INTO @GLDEPT_TBL
				SELECT DISTINCT
					LTRIM(RTRIM(items))
				FROM
					dbo.udf_split_list(@DEPARTMENTS, ',')

		END
		
	END

	IF @USE_OTHER = 1 
	BEGIN

		IF ISNULL(@OTHERS, '') = '' 
		BEGIN

			INSERT INTO @GLOTHER_TBL
				SELECT DISTINCT
					GLAOTHER
				FROM
					dbo.GLACCOUNT LEFT OUTER JOIN 
					@GLOFFICE_TBL OT ON GLACCOUNT.GLAOFFICE = OT.OFFICE_CODE
				WHERE 
					1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN OT.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END
				
		END
		ELSE 
		BEGIN

			INSERT INTO @GLOTHER_TBL
				SELECT
					GLO.OTHER_CODE
				FROM
					(SELECT DISTINCT
						[OTHER_CODE] = LTRIM(RTRIM(items))
					 FROM
						dbo.udf_split_list(@OTHERS, ',')) GLO JOIN
					dbo.GLACCOUNT ON GLO.OTHER_CODE = GLACCOUNT.GLAOTHER LEFT OUTER JOIN 
					@GLOFFICE_TBL OT ON GLACCOUNT.GLAOFFICE = OT.OFFICE_CODE
				WHERE 
					1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN OT.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END

		END

	END
		
	IF @USE_BASE = 1 
	BEGIN

		IF ISNULL(@BASES, '') = '' 
		BEGIN

			INSERT INTO @GLBASE_TBL
				SELECT DISTINCT
					GLABASE
				FROM
					dbo.GLACCOUNT LEFT OUTER JOIN 
					@GLOFFICE_TBL OT ON GLACCOUNT.GLAOFFICE = OT.OFFICE_CODE
				WHERE 
					1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN OT.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END

		END
		ELSE 
		BEGIN

			INSERT INTO @GLBASE_TBL
				SELECT DISTINCT
					GLB.BASE_CODE
				FROM
					(SELECT DISTINCT
						[BASE_CODE] = LTRIM(RTRIM(items))
					 FROM
						dbo.udf_split_list(@BASES, ',')) GLB JOIN
					dbo.GLACCOUNT ON GLB.BASE_CODE = GLACCOUNT.GLABASE LEFT OUTER JOIN 
					@GLOFFICE_TBL OT ON GLACCOUNT.GLAOFFICE = OT.OFFICE_CODE
				WHERE 
					1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN OT.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END

		END

	END

	SELECT
		[ID] = NEWID(),  
		[AccountCode] = DtlSum.AccountCode,
		[AccountDescription] = GLA.GLADESC,
	  	[AccountType] = DtlSum.[AccountType],
	  	[BalanceCarryforward] = CONVERT(DECIMAL(14,2), DtlSum.[BalanceCarryforward]),
		[AccountBeginningBalance] = CONVERT(DECIMAL(14,2), DtlSum.[AccountBeginningBalance]),
	  	[DebitCurrentMonth] = CONVERT(DECIMAL(14,2), DtlSum.[DebitCurrentMonth]),
	  	[CreditCurrentMonth] = CONVERT(DECIMAL(14,2), DtlSum.[CreditCurrentMonth]),
	  	[AccumulatedDebitAmount] = CONVERT(DECIMAL(14,2), DtlSum.[AccumulatedDebit]),
	  	[AccumulatedCreditAmount] = CONVERT(DECIMAL(14,2), DtlSum.[AccumulatedCredit]),
	  	[EndingDebitBalance] = CONVERT(DECIMAL(14,2), CASE WHEN [Balance] > 0 THEN [Balance] ELSE 0 END),
	  	[EndingCreditBalance] = CONVERT(DECIMAL(14,2), CASE WHEN [Balance] < 0 THEN [Balance] ELSE 0 END),
	  	[OfficeSegment] = DtlSum.[OfficeSegment],
	  	[BaseAccount] = DtlSum.[BaseAccount],
	  	[DepartmentSegment] = DtlSum.[DepartmentSegment],
	  	[OtherSegment] = DtlSum.[OtherSegment],
		[MappedAccount] = GLAX.SOURCE_GLACODE,
		[TargetAccount] = GLAEX.TARGET_GLACODE
	FROM
		(SELECT
	 		[AccountCode] = Dtl.AccountCode,
	  		[AccountType] = Dtl.[AccountType],
	  		[BalanceCarryforward] = SUM(CASE WHEN Dtl.PostPeriod < @GL_PP_START THEN (Dtl.[DebitAmount] + Dtl.[CreditAmount]) ELSE 0 END),
			[AccountBeginningBalance] = SUM(CASE WHEN Dtl.PostPeriod < @ENDING_PPPERIOD THEN Dtl.DebitAmount + Dtl.CreditAmount ELSE 0 END),
	  		[DebitCurrentMonth] = SUM(CASE WHEN Dtl.PostPeriod = @ENDING_PPPERIOD THEN Dtl.[DebitAmount] ELSE 0 END),
	  		[CreditCurrentMonth] = SUM(CASE WHEN Dtl.PostPeriod = @ENDING_PPPERIOD THEN Dtl.[CreditAmount] * -1 ELSE 0 END),
			[Balance] = SUM(Dtl.[DebitAmount] + Dtl.[CreditAmount]),
			[AccumulatedDebit] = SUM(CASE WHEN Dtl.PostPeriod BETWEEN @GL_PP_START AND @ENDING_PPPERIOD THEN Dtl.[DebitAmount] ELSE 0 END),
			[AccumulatedCredit] = SUM(CASE WHEN Dtl.PostPeriod BETWEEN @GL_PP_START AND @ENDING_PPPERIOD THEN Dtl.[CreditAmount] * -1 ELSE 0 END),
	  		[OfficeSegment] = Dtl.[OfficeSegment],
	  		[BaseAccount] = Dtl.[BaseAccount],
	  		[DepartmentSegment] = Dtl.[DepartmentSegment],
	  		[OtherSegment] = Dtl.[OtherSegment]
		 FROM
	 		(SELECT 
	  			[AccountCode] = GLTD.GLSCODE,   
	  			[AccountType] = GLAT.TYPE_DESC,
				[AccountTypeID] = GLAT.GLATYPE,
	  			[DebitAmount] = GLTD.GLSDEBIT, --CONVERT(DECIMAL(14,2), CASE WHEN GLTD.GLETAMT > 0 THEN GLTD.GLETAMT ELSE 0 END), 
	  			[CreditAmount] = GLTD.GLSCREDIT, --CONVERT(DECIMAL(14,2), CASE WHEN GLTD.GLETAMT < 0 THEN GLTD.GLETAMT * -1 ELSE 0 END),   
	  			[OfficeSegment] = GLA.GLAOFFICE,   
	  			[BaseAccount] = GLA.GLABASE,   
	  			[DepartmentSegment] = GLA.GLADEPT,   
	  			[OtherSegment] = GLA.GLAOTHER,
	 			[PostPeriod] = PP.PPPERIOD
	 		 FROM 
				--[dbo].[GLSUMMARY] AS GLT 
	 		-- INNER JOIN 
	  			[dbo].[GLSUMMARY] AS GLTD --ON GLTD.GLSCODE = GLT.GLSCODE 
	 		 INNER JOIN  
	  			[dbo].[GLACCOUNT] AS GLA ON GLA.GLACODE = GLTD.GLSCODE 
	 		 INNER JOIN
	  			@GLTYPES_TBL AS GLAT ON GLA.GLATYPE = GLAT.GLATYPE 
	 		 LEFT OUTER JOIN
	  			@GLOFFICE_TBL AS GLAO ON GLA.GLAOFFICE = GLAO.OFFICE_CODE  
	 		 LEFT OUTER JOIN
	  			@GLDEPT_TBL AS GLAD ON GLA.GLADEPT = GLAD.DEPT_CODE 
	 		 LEFT OUTER JOIN
	  			@GLBASE_TBL AS GLAB ON GLA.GLABASE = GLAB.BASE_CODE 
	 		 LEFT OUTER JOIN
	  			@GLOTHER_TBL AS GLAOT ON GLA.GLAOTHER = GLAOT.OTHER_CODE 
	 		 INNER JOIN
	  			[dbo].[POSTPERIOD] AS PP ON PP.PPPERIOD = GLTD.GLSPP
	 		 WHERE 
	  			-- PP.PPGLMONTH <> 99 AND  
	  			PP.PPPERIOD <= @ENDING_PPPERIOD AND
	  			(GLTD.GLSDEBIT <> 0 OR GLTD.GLSCREDIT<> 0) AND
	  			1 = CASE WHEN @USE_OFFICE = 0 THEN 1 WHEN GLAO.OFFICE_CODE IS NOT NULL THEN 1 ELSE 0 END AND
	  			1 = CASE WHEN @USE_BASE = 0 THEN 1 WHEN GLAB.BASE_CODE IS NOT NULL THEN 1 ELSE 0 END AND
	  			1 = CASE WHEN @USE_DEPT = 0 THEN 1 WHEN GLAD.DEPT_CODE IS NOT NULL THEN 1 ELSE 0 END AND
	  			1 = CASE WHEN @USE_OTHER = 0 THEN 1 WHEN GLAOT.OTHER_CODE IS NOT NULL THEN 1 ELSE 0 END 
				AND
				1 = CASE 
						WHEN GLA.GLATYPE IN ('1', '2', '3', '4', '5', '20') THEN 1 
						WHEN GLA.GLATYPE IN ('8', '9', '12', '13', '14', '15', '16') AND PP.PPPERIOD >= @GL_PP_START THEN 1 
						ELSE 0 
					END
					) Dtl
		 GROUP BY
	 		[AccountCode],
	  		[AccountType],
	  		[AccountTypeID],
	  		[OfficeSegment],
	  		[BaseAccount],
	  		[DepartmentSegment],
	  		[OtherSegment]) DtlSum
	INNER JOIN
		dbo.GLACCOUNT GLA ON DtlSum.AccountCode = GLA.GLACODE
	LEFT OUTER JOIN
		(SELECT 
			GLACODE,
			SOURCE_GLACODE
		 FROM 
			[dbo].[GLACCOUNT_XREF] 
		 WHERE
			GLACCOUNT_XREF_ID IN (SELECT MAX(GLACCOUNT_XREF_ID) FROM [dbo].[GLACCOUNT_XREF] WHERE RECORD_SOURCE_ID = @RECORD_SOURCE_ID GROUP BY GLACODE)) AS GLAX ON GLAX.GLACODE = GLA.GLACODE
	LEFT OUTER JOIN
		(SELECT 
			DTL.GLACODE,
			HDR.TARGET_GLACODE
		 FROM 
			[dbo].[GLACCOUNT_XREF_EXPORT] HDR
		 INNER JOIN	
			[dbo].[GLACCOUNT_XREF_EXPORT_DETAIL] DTL ON HDR.GLACCOUNT_XREF_EXPORT_ID = DTL.GLACCOUNT_XREF_EXPORT_ID  
		 WHERE
			RECORD_SOURCE_ID = @RECORD_SOURCE_ID) AS GLAEX ON GLAEX.GLACODE = GLA.GLACODE
	WHERE
		[BalanceCarryforward] <> 0 OR
		[AccountBeginningBalance] <> 0 OR
	  	[DebitCurrentMonth] <> 0 OR
	  	[CreditCurrentMonth] <> 0 OR
	  	[AccumulatedDebit] <> 0 OR
	  	[AccumulatedCredit] <> 0 OR
	  	[Balance] <> 0	
	ORDER BY DtlSum.[OfficeSegment],DtlSum.[BaseAccount],DtlSum.[DepartmentSegment]
						
END
GO

GRANT EXECUTE ON [advsp_gl_trial_balance_report] TO PUBLIC AS dbo
GO