if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_RESOURCES_EMP_ASSIGNED_WEEKLY]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_RESOURCES_EMP_ASSIGNED_WEEKLY]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE [dbo].[usp_wv_RESOURCES_EMP_ASSIGNED_WEEKLY] 
@EMP_CODE       VARCHAR(6),
@ROLES		    VARCHAR(4000),
@START_DATE     SMALLDATETIME,
@END_DATE       SMALLDATETIME,
-- 0 = NONE, 1 = DAY, 2 = WEEK, 3 = MONTH, 4 = YEAR, 5 = SPECIAL MODE FOR CHILD GRID ON EMP FINDER
-- 6 = VIEW FOR TASK ASSIGNMENTS
@SUMMARY_LEVEL  SMALLINT, 
@DEPTS	        VARCHAR(4000),
@EMP_LIST	    VARCHAR(8000),
@UserID			VARCHAR(100),
@OfficeCode	varchar(4),
@ClientCode Varchar(6),
@DivisionCode Varchar(6),
@ProductCode Varchar(6),
@JobNum Varchar(6),
@JobComp Varchar(6),
@TaskStatus Varchar(1),
@ExcludeTempComplete Char(1),
@Manager varchar(6),
@QUERY_TYPE VARCHAR(10),
@PSWL_JOB_NUMBER INT,
@PSWL_JOB_COMPONENT_NBR SMALLINT,
@JC_LIST VARCHAR(8000),
@OVERRIDE_EMP_SEC AS SMALLINT,
@OMIT_BEGINNING_BALANCE SMALLINT

AS
/*============== QUERY ==============*/

    SET ANSI_NULLS ON;
    SET ANSI_WARNINGS OFF;
    SET ARITHABORT OFF;
    SET ARITHIGNORE ON;

	IF @OfficeCode IS NULL SET @OfficeCode = '';
	IF @ClientCode IS NULL SET @ClientCode = ''	;
	IF @DivisionCode IS NULL SET @DivisionCode = '';	
	IF @ProductCode  IS NULL SET @ProductCode = '';
	IF @JobNum  IS NULL SET @JobNum = '';
	IF @JobComp  IS NULL SET @JobComp = '';
	IF @ROLES  IS NULL SET @ROLES = '';
	IF @TaskStatus  IS NULL SET @TaskStatus = '';
	IF @ExcludeTempComplete  IS NULL SET @ExcludeTempComplete = '';
	IF @Manager  IS NULL SET @Manager = '';
    IF @DEPTS IS NULL SET @DEPTS = '';
    IF @EMP_CODE = '%' OR (@EMP_CODE IS NULL) 
    BEGIN
        SET @EMP_CODE = '';
    END
    IF @ROLES IS NULL
    BEGIN
        SET @ROLES = '';
    END
    IF @DEPTS IS NULL
    BEGIN
        SET @DEPTS = '';
    END
    IF @EMP_LIST IS NULL
    BEGIN
        SET @EMP_LIST = '';
    END

	DECLARE 
		@RestrictionsEmp    INT,
		@sql 				VARCHAR(8000),
		@sql2 				VARCHAR(8000),
		@sql_from 			VARCHAR(8000),
		@sql_where 			VARCHAR(8000), 
		@totaljobsdue 	Int, 
		@START_DATE_MIN SMALLDATETIME, 
		@END_DATE_MAX SMALLDATETIME, 
		@START_DATE_MIN_ASS_NR SMALLDATETIME, 
		@END_DATE_MAX_ASS_NR SMALLDATETIME, 
		@START_DATE_MIN_ASS_R SMALLDATETIME, 
		@END_DATE_MAX_ASS_R SMALLDATETIME

	/*
	* The column HRS_ASSIGNED_TASK now also includes the event hours!!!!
	* need to fix: if it is a holiday with hours on it, it is getting removed...
	* so does the HRS_BALANCE_AVAIL column!!!!
	* BOTH COLUMNS ALSO FACTOR IN EMP_NON_TASK WHERE TIME_CATEGORY.VAC_SICK_FLAG IS NULL OR NOT 1,2,3...
	*/
             

	    SET @EMP_LIST = @EMP_LIST;

	    IF @EMP_LIST IS NULL
	    BEGIN

	    	SET @EMP_LIST = '';

	    END


	SET @START_DATE = CONVERT(
				    DATETIME,
				    CONVERT(CHAR(10), DATEPART(yyyy, @START_DATE), 101) 
				    +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(mm, @START_DATE), 101) +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(dd, @START_DATE), 101) +
				    ' 00:00:00' 
				    );
				       
 	SET @END_DATE = CONVERT(
				    DATETIME,
				    CONVERT(CHAR(10), DATEPART(yyyy, @END_DATE), 101) 
				    +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(mm, @END_DATE), 101) +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(dd, @END_DATE), 101) +
				    ' 23:59:00' 
				    );
        
	CREATE TABLE #EMP_AVAILABILITY --MASTER TABLE TO RETURN
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[EMP_START_TIME]     SMALLDATETIME,
		[EMP_END_TIME]     SMALLDATETIME,
		[EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
		[DATE]               SMALLDATETIME,
		[DAY_OF_WEEK]			 INT,
		[DAY_OF_YEAR]          INT,
		[WEEK_OF_YEAR]         SMALLDATETIME,
		[MONTH_OF_YEAR]        INT,
		[YEAR]               INT,
		[STD_HRS_AVAIL]      DECIMAL(18,6),
		[HRS_USED_NON_TASK]  DECIMAL(18,6),
		[HRS_AVAIL]          DECIMAL(18,6),
		[HRS_ASSIGNED_TASK]  DECIMAL(18,6),
		[HRS_ASSIGNED_EVENT]  DECIMAL(18,6),
		[HRS_ASSIGNED_ASSIGN]  DECIMAL(18,6),
		[HRS_BALANCE_AVAIL]  DECIMAL(18,6),
		[NOTE]               VARCHAR(100),
		[IS_FULL_DAY_OFF]    SMALLINT,
		[HRS_APPTS]			 DECIMAL(18,6)
	);

	CREATE TABLE #JOBS 
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[OFFICE_CODE]		VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[CL_CODE]			VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[DIV_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[PRD_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_NUMBER] INT,
		[JOB_COMPONENT_NBR] INT,
		[SEQ_NBR] INT,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[TASK_START_DATE]    SMALLDATETIME,
		[JOB_REVISED_DATE]   SMALLDATETIME,
		[FNC_CODE]			 VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_HRS]          DECIMAL(18,6),
		[WORKDAY_COUNT]         INT,
		[HRS_PER_DAY]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE] INT,	        
		[TRF_DESCRIPTION]		VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_DESC]		VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_COMP_DESC]	VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_FIRST_USE_DATE]	SMALLDATETIME,
		[HRS_PER_DAY_WITH_ASSN]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE_WITH_ASSN] INT,
		[HRS_POSTED]   DECIMAL(18,6),
		[WEEK_OF_YEAR] SMALLDATETIME,
		[WEEKLY] bit

	);

	CREATE TABLE #ASSIGNMENTS
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[ALERT_ID] INT,
		[OFFICE_CODE]		VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[CL_CODE]			VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[DIV_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[PRD_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_NUMBER] INT,
		[JOB_COMPONENT_NBR] INT,
		[SEQ_NBR] INT,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[START_DATE]    SMALLDATETIME,
		[DUE_DATE]   SMALLDATETIME,
		[HRS_ALLOWED]          DECIMAL(18,6),
		[WEEK_START]	SMALLDATETIME,
		[WEEK_END]	SMALLDATETIME,
		[WEEK_OF_YEAR] SMALLDATETIME,
		[HOURS]		 DECIMAL(18,6),
		[HRS_POSTED]   DECIMAL(18,6),
		[WORKDAY_COUNT]         INT,
		[HRS_PER_DAY]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE] INT,	        
		[TRF_DESCRIPTION]		VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_DESC]		VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_COMP_DESC]	VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_FIRST_USE_DATE]	SMALLDATETIME,
		[HRS_PER_DAY_WITH_ASSN]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE_WITH_ASSN] INT,
		[WEEKLY] bit
	);       
	        
	CREATE TABLE #WORK_DAY --Table of employee workdays
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[WORK_DATE]               SMALLDATETIME,
		[STD_HRS]  DECIMAL(18,6),
		[NON_TASK_DAY] INT
	);
        
	CREATE TABLE #DAY_RANGE --RANGE OF DAYS
	(
		[DATE] SMALLDATETIME,
	);

	CREATE TABLE #EMP_LIST --LIST OF EMPS
	(
		[EMP_CODE] VARCHAR(6),
		[EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
		[EMP_START_TIME]     SMALLDATETIME,
		[EMP_END_TIME]     SMALLDATETIME
	);

	CREATE TABLE #NON_TASKS --Table of employee Non Task days
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[START_DATE] SMALLDATETIME,
		[END_DATE] SMALLDATETIME,
		[HOURS] DECIMAL(18,6),
		[VAC_SICK_FLAG] int
	);

    --1. GET DAYS (LOOP)
    --=================================================================================================
    DECLARE @DAY_COUNT      AS INTEGER,
            @DAY_INCREMENT  AS INTEGER, @Restrictions INT, @RestrictionsOffice INT, @EMP_CDE AS VARCHAR(6)
	         
		
	SELECT @Restrictions = COUNT(*) FROM SEC_CLIENT WITH(NOLOCK) WHERE UPPER(USER_ID) = UPPER(@UserID);

	SELECT @RestrictionsEmp = COUNT(*) FROM SEC_EMP WITH(NOLOCK) WHERE UPPER(USER_ID) = UPPER(@UserID);

	SELECT @EMP_CDE = EMP_CODE FROM SEC_USER WHERE UPPER(USER_CODE) = UPPER(@UserID)
	SELECT @RestrictionsOffice = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CDE
		        
    SET @DAY_INCREMENT = -1;
    SELECT @DAY_COUNT = DATEDIFF(dd, @START_DATE, @END_DATE) + 1;
       
    WHILE @DAY_COUNT > 0
    BEGIN
        INSERT INTO #DAY_RANGE
            (
            [DATE]
            )
        VALUES
            (
            DATEADD(dd, @DAY_INCREMENT + 1, @START_DATE)
            );
        SET @DAY_INCREMENT = @DAY_INCREMENT + 1;
        SET @DAY_COUNT = @DAY_COUNT - 1;
    END
	 --SELECT * FROM #DAY_RANGE;
	--UPDATE #DAY_RANGE SET [DATE] = @END_DATE WHERE [DATE] = (SELECT MAX([DATE]) FROM #DAY_RANGE);

--        --TEST:
       --SELECT * FROM #DAY_RANGE;

PRINT @EMP_LIST
    --2. GET EMPS (SELECT)
    --=================================================================================================
    DECLARE @DYNA_SQL AS NVARCHAR(4000);
    SET @DYNA_SQL = '';

    SET @DYNA_SQL = 'INSERT INTO #EMP_LIST(EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,EMP_START_TIME,EMP_END_TIME)'

    SET @DYNA_SQL = @DYNA_SQL + 'SELECT DISTINCT EMPLOYEE.EMP_CODE, EMPLOYEE.DIRECT_HRS_PER, EMPLOYEE.EMP_START_TIME, EMPLOYEE.EMP_END_TIME
            FROM EMPLOYEE WITH (NOLOCK) '

	IF (@ROLES <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + ' INNER JOIN EMP_TRAFFIC_ROLE WITH (NOLOCK) ON EMPLOYEE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE'
	END
	IF @RestrictionsEmp > 0
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL  + ' INNER JOIN SEC_EMP ON EMPLOYEE.EMP_CODE = SEC_EMP.EMP_CODE '
	END
	IF @RestrictionsOffice > 0
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL  + ' INNER JOIN EMP_OFFICE ON EMPLOYEE.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
	END
				
  
	--- START THE WHERE CLAUSE
	SET @DYNA_SQL = @DYNA_SQL + ' WHERE (EMPLOYEE.EMP_TERM_DATE IS NULL) AND 1 = 1 '

	--FILTER BY EMP CODE       
	IF (@EMP_CODE <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND EMPLOYEE.EMP_CODE = ''' + @EMP_CODE + ''''
	END

	--FILTER BY EMP CODE LIST:	
	IF (@EMP_LIST <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMPLOYEE.EMP_CODE IN ('+ @EMP_LIST +'))'
	END

	--FILTER BY ROLE                            
	IF (@ROLES <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMP_TRAFFIC_ROLE.ROLE_CODE IN ('+ @ROLES +')) '
	END

	--FILTER BY DEPT                            
	IF (@DEPTS <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMPLOYEE.DP_TM_CODE IN ('+ @DEPTS +')) '
	END

	IF @RestrictionsEmp > 0
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL  + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''') '
	END

	--END THE DYNAMIC SQL:                            
	SET @DYNA_SQL = @DYNA_SQL + ' ORDER BY EMPLOYEE.EMP_CODE;'
         
	PRINT @DYNA_SQL;
	EXEC sp_executesql @DYNA_SQL;
      
    --3. PUT BOTH INTO LIST
    DECLARE 
	@CURR_EMP_CODE AS VARCHAR(6),
	    @CURR_EMP_DIRECT_HRS_GOAL_PERC DECIMAL(18,6),
		@CURR_EMP_START_TIME     SMALLDATETIME,
	    @CURR_EMP_END_TIME     SMALLDATETIME,
	    @EMPS VARCHAR(4000);

	SET @EMPS = ''    

    DECLARE MY_ROWS                         CURSOR  
    FOR
	    SELECT EMP_CODE
	    FROM   #EMP_LIST
    ;
    OPEN MY_ROWS;
    FETCH NEXT FROM MY_ROWS INTO @CURR_EMP_CODE;
    WHILE @@FETCH_STATUS = 0
    BEGIN

	    SELECT @CURR_EMP_DIRECT_HRS_GOAL_PERC = ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.00), @CURR_EMP_START_TIME = EMP_START_TIME, @CURR_EMP_END_TIME = EMP_END_TIME FROM #EMP_LIST WHERE EMP_CODE = @CURR_EMP_CODE;
	    INSERT INTO #EMP_AVAILABILITY(EMP_CODE,[DATE],EMP_DIRECT_HRS_GOAL_PERC,EMP_START_TIME,EMP_END_TIME)
	    SELECT @CURR_EMP_CODE,[DATE],@CURR_EMP_DIRECT_HRS_GOAL_PERC,@CURR_EMP_START_TIME,@CURR_EMP_END_TIME FROM #DAY_RANGE;      
	        
	    IF @EMP_CODE <> '' OR @DEPTS <> '' OR @ROLES <> '' OR @EMP_LIST <> ''
	    BEGIN
			SELECT @EMPS = @EMPS + @CURR_EMP_CODE + ','
	    END	        
	        
	    --GO TO NEXT EVENT
	    FETCH NEXT FROM MY_ROWS INTO @CURR_EMP_CODE;
    END
    CLOSE MY_ROWS;
    DEALLOCATE MY_ROWS;

	--SELECT * FROM #EMP_AVAILABILITY
	CREATE TABLE #emp_work_days ( emp_code varchar(4000) COLLATE SQL_Latin1_General_CP1_CS_AS, workday smalldatetime, std_hours decimal(9,3) )
	CREATE TABLE #emp (listpos int,value varchar(20) COLLATE SQL_Latin1_General_CP1_CS_AS)
	CREATE TABLE #emp_year ( emp_code varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS, emp_year integer, daily_avg decimal(9,2) )
	CREATE TABLE #work_days ( workyear integer, workdate smalldatetime, holiday bit, weekend bit, dayoff bit )
	
	if @EMPS <> ''
	BEGIN
		INSERT INTO #emp 
		SELECT * FROM [dbo].[charlist_to_table] (@EMPS,',')		
	END	
	
    --SET DATE COUNTERS:
    UPDATE #EMP_AVAILABILITY SET
		DAY_OF_WEEK = DATEPART(weekday,[DATE]),
		DAY_OF_YEAR= DATEPART(dayofyear,[DATE]) ,
		WEEK_OF_YEAR= DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,[DATE])) , 104 ) ) + (DATEPART(wk,[DATE])-1), 6),--DATEPART(wk,[DATE]) ,
		MONTH_OF_YEAR= DATEPART(mm,[DATE]),
		[YEAR] = DATEPART(yy,[DATE]) 		
	              
	IF @OMIT_BEGINNING_BALANCE = 1
		BEGIN
			SELECT 
				@START_DATE_MIN = MIN(TASK_START_DATE), 
				@END_DATE_MAX = MAX(JOB_REVISED_DATE)
			FROM         
				dbo.V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
				dbo.JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												  V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				dbo.JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN
				dbo.JOB_TRAFFIC_DET_EMPS ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND
											V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND
											V_JOB_TRAFFIC_DET.SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR LEFT OUTER JOIN
				#emp e ON V_JOB_TRAFFIC_DET.EMP_CODE = e.value
			WHERE 
				1 = CASE WHEN @EMPS = '' OR e.value IS NOT NULL THEN 1 ELSE 0 END AND
				(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
				AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
				AND ((TASK_START_DATE >= @START_DATE) AND (TASK_START_DATE <= @END_DATE) OR
				(JOB_REVISED_DATE >= @START_DATE) AND (JOB_REVISED_DATE <= @END_DATE) OR
				(@START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE));
		END
	ELSE
		BEGIN
			SELECT 
				@START_DATE_MIN = MIN(TASK_START_DATE), 
				@END_DATE_MAX = MAX(JOB_REVISED_DATE)
			FROM         
				dbo.V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
				dbo.JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												  V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				dbo.JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN
				dbo.JOB_TRAFFIC_DET_EMPS ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND
											V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND
											V_JOB_TRAFFIC_DET.SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR LEFT OUTER JOIN
				#emp e ON V_JOB_TRAFFIC_DET.EMP_CODE = e.value
			WHERE 
				1 = CASE WHEN @EMPS = '' OR e.value IS NOT NULL THEN 1 ELSE 0 END AND
				(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
				AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
				AND ((TASK_START_DATE >= @START_DATE) AND (TASK_START_DATE <= @END_DATE) OR
				(JOB_REVISED_DATE >= @START_DATE) AND (JOB_REVISED_DATE <= @END_DATE) OR
				(@START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE));
		END

	--Assignment max and min dates
	SELECT @START_DATE_MIN_ASS_NR = MIN(A.ST), @END_DATE_MAX_ASS_NR = MAX(ED) FROM (
	SELECT ALERT.ALERT_ID, CASE WHEN MIN(SPRINT_EMPLOYEE.WEEK_START) IS NOT NULL THEN MIN(SPRINT_EMPLOYEE.WEEK_START) ELSE CASE WHEN MIN(ALERT.[START_DATE]) is NULL THEN MIN(ALERT.DUE_DATE) ELSE MIN(ALERT.[START_DATE]) END END AS ST,
		   CASE WHEN MAX(SPRINT_EMPLOYEE.WEEK_END) IS NOT NULL THEN MAX(SPRINT_EMPLOYEE.WEEK_END) ELSE CASE WHEN MAX(ALERT.DUE_DATE) is NULL THEN MAX(ALERT.[START_DATE]) ELSE MAX(ALERT.DUE_DATE) END END AS ED
	FROM ALERT INNER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0 
					 LEFT OUTER JOIN #emp e ON ALERT_RCPT.EMP_CODE = e.value
	WHERE 1 = CASE WHEN @EMPS = '' OR e.value IS NOT NULL THEN 1 ELSE 0 END AND
				IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
						AND (HRS_ALLOWED <> 0 OR [HOURS] <> 0) AND ALERT.ALRT_NOTIFY_HDR_ID IS NULL AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) AND (CURRENT_NOTIFY = 1) GROUP BY ALERT.ALERT_ID) AS A
	
	SELECT @START_DATE_MIN_ASS_R = MIN(A.ST), @END_DATE_MAX_ASS_R = MAX(ED) FROM (
	SELECT ALERT.ALERT_ID, CASE WHEN MIN(SPRINT_EMPLOYEE.WEEK_START) IS NOT NULL THEN MIN(SPRINT_EMPLOYEE.WEEK_START) ELSE CASE WHEN MIN(ALERT.[START_DATE]) is NULL THEN MIN(ALERT.DUE_DATE) ELSE MIN(ALERT.[START_DATE]) END END AS ST,
		    CASE WHEN MAX(SPRINT_EMPLOYEE.WEEK_END) IS NOT NULL THEN MAX(SPRINT_EMPLOYEE.WEEK_END) ELSE CASE WHEN MAX(ALERT.DUE_DATE) is NULL THEN MAX(ALERT.[START_DATE]) ELSE MAX(ALERT.DUE_DATE) END END AS ED
	FROM ALERT INNER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT.ASSIGNED_EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
					 LEFT OUTER JOIN #emp e ON ALERT_RCPT.EMP_CODE = e.value
	WHERE 1 = CASE WHEN @EMPS = '' OR e.value IS NOT NULL THEN 1 ELSE 0 END AND
				IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  AND (HRS_ALLOWED <> 0 OR [HOURS] <> 0) 
						AND ALERT.ALRT_NOTIFY_HDR_ID IS NOT NULL AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) GROUP BY ALERT.ALERT_ID) AS A

	
	IF (@START_DATE_MIN IS NULL) OR (@START_DATE < @START_DATE_MIN)
	BEGIN
		SET @START_DATE_MIN = @START_DATE;
	END	
	IF (@END_DATE_MAX IS NULL) OR (@END_DATE > @END_DATE_MAX)
	BEGIN
		SET @END_DATE_MAX = @END_DATE
	END	

	IF (@START_DATE_MIN_ASS_NR IS NOT NULL)
	BEGIN
		IF @START_DATE_MIN_ASS_NR < @START_DATE_MIN
		BEGIN
			SET @START_DATE_MIN = @START_DATE_MIN_ASS_NR
		END
	END

	IF (@START_DATE_MIN_ASS_R IS NOT NULL)
	BEGIN
		IF @START_DATE_MIN_ASS_R < @START_DATE_MIN
		BEGIN
			SET @START_DATE_MIN = @START_DATE_MIN_ASS_R
		END
	END

	IF (@END_DATE_MAX_ASS_NR IS NOT NULL)
	BEGIN
		IF @END_DATE_MAX_ASS_NR > @END_DATE_MAX
		BEGIN
			SET @END_DATE_MAX = @END_DATE_MAX_ASS_NR
		END
	END

	IF (@END_DATE_MAX_ASS_R IS NOT NULL)
	BEGIN
		IF @END_DATE_MAX_ASS_R > @END_DATE_MAX
		BEGIN
			SET @END_DATE_MAX = @END_DATE_MAX_ASS_R
		END
	END

--SELECT @START_DATE_MIN,@END_DATE_MAX
	--SELECT @EMPS
	--Get Standard Hours
	--INSERT INTO #WORK_DAY (EMP_CODE, WORK_DATE, STD_HRS)
	--SELECT fn.emp_code, fn.workday, fn.std_hours
	--FROM [dbo].[udf_get_std_hrs_wl] ( @START_DATE_MIN, @END_DATE_MAX, @EMPS) fn
	--WHERE (fn.std_hours <> 0.00 );	

	


	DECLARE @cur_date smalldatetime, @emp_start_date smalldatetime, @day_count2 integer, @start_year integer, @end_year integer, @cur_year integer
	DECLARE @year_start_date smalldatetime, @year_end_date smalldatetime, @holiday bit, @weekend bit, @dayoff bit 
	IF ( @START_DATE_MIN IS NOT NULL ) AND ( @END_DATE_MAX IS NOT NULL ) AND ( @START_DATE_MIN <= @END_DATE_MAX )
	BEGIN
		-- Create a table holding the average workday by year for each employee		
		DECLARE @std_hours decimal(9,3)
		
		SET @start_year = DATEPART(yyyy, @START_DATE_MIN)		
		SET @end_year = DATEPART(yyyy, @END_DATE_MAX)		
		SET @cur_year = @start_year
		WHILE ( @cur_year <= @end_year )
		BEGIN
			SET @day_count2 = 0
			if @cur_year = @start_year
			BEGIN
				SET @year_start_date = @START_DATE_MIN
			END
			ELSE
			BEGIN
				SET @year_start_date = CONVERT( smalldatetime, '1/1/' + CAST( @cur_year AS varchar(4)) )
			END		
			if @cur_date = @end_year
			BEGIN
				SET @year_end_date = @END_DATE_MAX
			END
			ELSE
			BEGIN
				SET @year_end_date = CONVERT( smalldatetime, '12/31/' + CAST( @cur_year AS varchar(4)) )
			END			
			SET @cur_date = @year_start_date
			
			WHILE ( @cur_date <= @year_end_date )
			BEGIN
				SET @weekend = 0
				IF (( DATEPART( dw, @cur_date )) IN ( 1, 7 ))
					SET @weekend = 1
				ELSE
					SET @day_count2 = @day_count2 + 1
									 
				SET @holiday = 0					
				IF ( SELECT COUNT( * ) 
				       FROM dbo.EMP_NON_TASKS ent 
				      WHERE ent.[TYPE] = 'H' 
				        AND ent.ALL_DAY = 1 
						AND ( @cur_date BETWEEN ent.[START_DATE] AND ent.[END_DATE] )) > 0
					SELECT @holiday = 1			
				
				INSERT INTO #work_days( workyear, workdate, holiday, weekend ) VALUES ( @cur_year, @cur_date, @holiday, @weekend )
				
				SET @cur_date = DATEADD( day, 1, @cur_date )
			END
			
			IF ( @day_count2 > 0 )
				INSERT INTO #emp_year ( emp_code, emp_year, daily_avg ) 
					 SELECT e.EMP_CODE, @cur_year, 
							ROUND( CAST( e.STD_ANNUAL_HRS AS decimal(9,2)) / CAST( @day_count2 AS decimal(9,2)), 2 )
					   FROM dbo.EMPLOYEE e 

			SET @cur_year = @cur_year + 1
		END	
	END		

	INSERT INTO #WORK_DAY (EMP_CODE, WORK_DATE, STD_HRS)
	SELECT
		[EmployeeCode],
		[WorkDate],
		[StandardHours]
	FROM
		(SELECT 
			[EmployeeCode] = e.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS, 
			[WorkDate] = wd.workdate,
			[StandardHours] = CASE DATEPART( dw, wd.workdate ) 
									WHEN 1 THEN e.SUN_HRS
									WHEN 2 THEN e.MON_HRS
									WHEN 3 THEN e.TUE_HRS
									WHEN 4 THEN e.WED_HRS
									WHEN 5 THEN e.THU_HRS
									WHEN 6 THEN e.FRI_HRS
									WHEN 7 THEN e.SAT_HRS
								END
		FROM 
			#work_days wd
		CROSS JOIN
			(SELECT
				EMP.EMP_CODE,
				EMP.EMP_DATE,
				EMP.EMP_TERM_DATE,
				EMP.SUN_HRS,
				EMP.MON_HRS,
				EMP.TUE_HRS,
				EMP.WED_HRS,
				EMP.THU_HRS,
				EMP.FRI_HRS,
				EMP.SAT_HRS--
				--[TASK_START_DATE] = CASE WHEN e.[TASK_START_DATE] > @START_DATE_MIN OR e.[TASK_START_DATE] IS NULL THEN @START_DATE_MIN ELSE e.[TASK_START_DATE] END,
				--[JOB_REVISED_DATE] = CASE WHEN e.[JOB_REVISED_DATE] < @END_DATE_MAX OR e.[JOB_REVISED_DATE] IS NULL THEN @END_DATE_MAX ELSE e.[JOB_REVISED_DATE] END
			FROM
				dbo.EMPLOYEE EMP
			LEFT OUTER JOIN
				#emp e2 ON EMP.EMP_CODE = e2.value
			--LEFT OUTER JOIN
			--	(SELECT 
	 	--			[TASK_START_DATE] = MIN(TASK_START_DATE), 
	 	--			[JOB_REVISED_DATE] = MAX(JOB_REVISED_DATE),
	 	--			JTDE.EMP_CODE
			--	 FROM         
	 	--			dbo.V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
	 	--			dbo.JOB_TRAFFIC_DET_EMPS JTDE ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JTDE.JOB_NUMBER AND
	 	--												V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JTDE.JOB_COMPONENT_NBR AND
	 	--												V_JOB_TRAFFIC_DET.SEQ_NBR = JTDE.SEQ_NBR INNER JOIN
	 	--			dbo.JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
	 	--			dbo.V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
	 	--			dbo.JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
	 	--			dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
			--	 WHERE 
	 	--			(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
	 	--			AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
	 	--			AND ((TASK_START_DATE >= @START_DATE) AND (TASK_START_DATE <= @END_DATE) OR
	 	--			(JOB_REVISED_DATE >= @START_DATE) AND (JOB_REVISED_DATE <= @END_DATE) OR
	 	--			(@START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE))
			--	 GROUP BY
	 	--			JTDE.EMP_CODE) e ON EMP.EMP_CODE = e.EMP_CODE
			WHERE
				1 = CASE WHEN @EMPS = '' OR e2.value IS NOT NULL THEN 1 ELSE 0 END) e
		WHERE 
			--(wd.workdate >= e.TASK_START_DATE AND wd.workdate <= e.JOB_REVISED_DATE) AND
			( e.EMP_TERM_DATE >= wd.workdate OR e.EMP_TERM_DATE IS NULL )
			AND ( e.EMP_DATE <= wd.workdate OR e.EMP_DATE IS NULL )
			AND ( wd.holiday = 0 )
			AND ( wd.workdate BETWEEN @START_DATE_MIN AND @END_DATE_MAX )) EmpHours
	WHERE
		StandardHours <> 0
	--SELECT * FROM #work_days
	--SELECT * FROM #emp	
	DROP TABLE #emp_work_days
	DROP TABLE #work_days
	DROP TABLE #emp_year
	DROP TABLE #emp
	
	UPDATE #WORK_DAY
	SET NON_TASK_DAY = CASE WHEN (SELECT COUNT(*)
	FROM dbo.EMP_NON_TASKS ent INNER JOIN
			TIME_CATEGORY ON ent.CATEGORY = TIME_CATEGORY.CATEGORY
			INNER JOIN dbo.EMP_NON_TASKS_EMPS ente ON ent.NON_TASK_ID = ente.NON_TASK_ID
	WHERE ent.[TYPE] = 'A' AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) 
			AND ent.ALL_DAY = 1 
			AND (WORK_DATE BETWEEN ent.[START_DATE] AND ent.[END_DATE] )
			AND (ente.EMP_CODE = #WORK_DAY.EMP_CODE)) > 0 THEN 1 ELSE 0 END			

    --SELECT * FROM #WORK_DAY --WHERE WORK_DATE BETWEEN @START_DATE AND @END_DATE
											
	--SELECT * FROM #WORK_DAY											

	INSERT INTO #JOBS
				SELECT JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE,V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR,
				 V_JOB_TRAFFIC_DET.SEQ_NBR,
					 V_JOB_TRAFFIC_DET.EMP_CODE, CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END,
					CASE WHEN WEEK_END IS NULL THEN CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, JOB_REVISED_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, JOB_REVISED_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, JOB_REVISED_DATE), 101) +
				       ' 23:59:00' 
				       ) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, JOB_REVISED_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, JOB_REVISED_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, JOB_REVISED_DATE), 101) +
				       ' 23:59:00' 
				       ) ELSE WEEK_END END AS JOB_REVISED_DATE,
					 V_JOB_TRAFFIC_DET.FNC_CODE, CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END AS JOB_HRS,				 
					 (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1
															),
					 CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)) ELSE 0 END,
					CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1) ELSE 0 END,TRAFFIC.TRF_DESCRIPTION, JOB_LOG.JOB_DESC,
															 JOB_COMPONENT.JOB_COMP_DESC, JOB_COMPONENT.JOB_FIRST_USE_DATE,
					 CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 ) <> 0
						 THEN (CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 )) ELSE 0 END,
					CASE WHEN @START_DATE >= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 )
						 WHEN @START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= @END_DATE
															)
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 )
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= @END_DATE
															 ) ELSE 0 END,0,NULL, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END								
					FROM         
						V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
						JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						INNER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
						INNER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
						LEFT OUTER JOIN ALERT ON ALERT.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND ALERT.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR AND ALERT.TASK_SEQ_NBR = V_JOB_TRAFFIC_DET.SEQ_NBR
						LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND V_JOB_TRAFFIC_DET.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
						WHERE ALERT.ALERT_LEVEL <> 'PST' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
								AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
								AND ((CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END >= @START_DATE AND CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END <= @END_DATE) OR
									(CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) END >= @START_DATE AND CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) END <= @END_DATE) OR
									(@START_DATE >= CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END AND @END_DATE <= CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) END))		

	--Non routed
	INSERT INTO #ASSIGNMENTS
				SELECT ALERT.ALERT_ID, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
					   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT_RCPT.EMP_CODE, 
					   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
					   ISNULL(ALERT.HRS_ALLOWED,0),
					   CASE WHEN WEEK_START IS NOT NULL AND ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END,
					   CASE WHEN WEEK_END IS NOT NULL AND ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END, 
					   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
						CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
						 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
					   CASE WHEN SPRINT_EMPLOYEE.[HOURS] IS NULL OR SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
					   0,
					   (SELECT COUNT(*) FROM #WORK_DAY
						WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
						 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END) 
						 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
						 AND NON_TASK_DAY <> 1
						),
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)) ELSE 0 END,

					   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END  )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END  )
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1) ELSE 0 END,
					   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END
				FROM ALERT INNER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
					 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
						AND (ALERT_RCPT.HOURS_ALLOWED <> 0 OR [HOURS] <> 0) 
						AND ALERT.ALRT_NOTIFY_HDR_ID IS NULL AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) AND (CURRENT_NOTIFY = 1)--AND (IWI.ALERT_ID IS NULL)
			--((ALERT.[START_DATE] >= @START_DATE AND ALERT.[START_DATE] <= @END_DATE) OR
			--(DUE_DATE >= @START_DATE AND DUE_DATE <= @END_DATE) OR (ALERT.[START_DATE] IS NULL AND [DUE_DATE] IS NULL) OR
			--(WEEK_START BETWEEN @START_DATE AND @END_DATE))
						--AND ((CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,ALERT.[START_DATE]) END >= @START_DATE AND CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,ALERT.[START_DATE]) END <= @END_DATE) OR
						--			(CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,ALERT.DUE_DATE) END >= @START_DATE AND CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,ALERT.DUE_DATE) END <= @END_DATE) OR
						--			(@START_DATE >= CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,ALERT.[START_DATE]) END AND @END_DATE <= CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,ALERT.DUE_DATE) END))		

	--Routed
	INSERT INTO #ASSIGNMENTS
				SELECT ALERT.ALERT_ID, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
					   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT_RCPT.EMP_CODE, 
					   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
					   ISNULL(ALERT.HRS_ALLOWED,0), 
					   CASE WHEN WEEK_START IS NOT NULL AND ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END,
					   CASE WHEN WEEK_END IS NOT NULL AND ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END, 
					   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
						CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
						 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
					   CASE WHEN SPRINT_EMPLOYEE.[HOURS] IS NULL OR SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
					   0,
					   (SELECT COUNT(*) FROM #WORK_DAY
						WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
						 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END) 
						 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
						 AND NON_TASK_DAY <> 1
						),
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)) ELSE 0 END,

					   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END  )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE CASE WHEN ALERT.DUE_DATE < WEEK_END THEN ALERT.DUE_DATE ELSE WEEK_END END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE CASE WHEN ALERT.[START_DATE] > WEEK_START THEN ALERT.[START_DATE] ELSE WEEK_START END END  )
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1) ELSE 0 END,
					   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END
				FROM ALERT LEFT OUTER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
					 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  
						AND (ALERT_RCPT.HOURS_ALLOWED <> 0 OR [HOURS] <> 0) 
						AND ALERT.ALRT_NOTIFY_HDR_ID IS NOT NULL AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) AND (CURRENT_NOTIFY = 1)
						--AND ((CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,ALERT.[START_DATE]) END >= @START_DATE AND CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,ALERT.[START_DATE]) END <= @END_DATE) OR
						--			(CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,ALERT.DUE_DATE) END >= @START_DATE AND CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,ALERT.DUE_DATE) END <= @END_DATE) OR
						--			(@START_DATE >= CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,ALERT.[START_DATE]) END AND @END_DATE <= CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,ALERT.DUE_DATE) END))					  		   
        


	--SELECT * FROM #JOBS	
	--SELECT * FROM #ASSIGNMENTS
	--SELECT * FROM #EMP_AVAILABILITY 

	INSERT INTO #NON_TASKS
	SELECT ente.EMP_CODE, ent.[START_DATE], ent.[END_DATE], ISNULL(SUM(ent.HOURS),0) AS SUM_HRS, TIME_CATEGORY.VAC_SICK_FLAG
	FROM EMP_NON_TASKS ent WITH(NOLOCK) LEFT OUTER JOIN
			TIME_CATEGORY WITH(NOLOCK) ON ent.CATEGORY = TIME_CATEGORY.CATEGORY 
			INNER JOIN dbo.EMP_NON_TASKS_EMPS ente ON ent.NON_TASK_ID = ente.NON_TASK_ID
	WHERE ((ALL_DAY IS NULL) OR ALL_DAY = 0) AND 
		  ((ent.[START_DATE] BETWEEN @START_DATE AND @END_DATE) OR (ent.[END_DATE] BETWEEN @START_DATE AND @END_DATE))
	GROUP BY ente.EMP_CODE, ent.[START_DATE], ent.[END_DATE], TIME_CATEGORY.VAC_SICK_FLAG
		
		--Update #EMP_AVAILABILITY table 
		UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 
		(SELECT STD_HRS FROM #WORK_DAY
		WHERE CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) = #WORK_DAY.WORK_DATE 
		AND #EMP_AVAILABILITY.EMP_CODE = #WORK_DAY.EMP_CODE) --AND UPPER(USERID) = UPPER(@UserID))
		
		--Holidays
		 UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 0, 
					#EMP_AVAILABILITY.NOTE = EMP_NON_TASKS.NON_TASK_DESC, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 1
		FROM #EMP_AVAILABILITY INNER JOIN EMP_NON_TASKS WITH(NOLOCK) 
			ON CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) = EMP_NON_TASKS.START_DATE
		WHERE TYPE = 'H'
		AND ALL_DAY = 1
		AND 
		(
			[START_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
			OR [END_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
		)

		UPDATE #EMP_AVAILABILITY 
		SET #EMP_AVAILABILITY.STD_HRS_AVAIL = ISNULL(#EMP_AVAILABILITY.STD_HRS_AVAIL,0.00) - ISNULL(EMP_NON_TASKS.HOURS,0.00),
		#EMP_AVAILABILITY.NOTE = EMP_NON_TASKS.NON_TASK_DESC
		FROM #EMP_AVAILABILITY INNER JOIN EMP_NON_TASKS WITH(NOLOCK) ON 
		CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) = EMP_NON_TASKS.START_DATE
		WHERE TYPE = 'H' AND ALL_DAY = 0

		--Appointments
		UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = 		
		( SELECT
		ISNULL(SUM(HOURS),0.000000) AS SUM_HRS
		FROM         #NON_TASKS
		WHERE     (#NON_TASKS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) AND (#NON_TASKS.VAC_SICK_FLAG IN (1, 2, 3))
		AND
		(
			[START_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
			OR [END_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
		)), #EMP_AVAILABILITY.NOTE = 'Appointment'
		
		--ZERO OUT ALL-DAY (AND ALL DAY MULTI-DAY) APPOINTMENTS:
		UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = STD_HRS_AVAIL, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 2
		FROM EMP_NON_TASKS WITH(NOLOCK) INNER JOIN
								TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY 
									INNER JOIN dbo.EMP_NON_TASKS_EMPS ente ON EMP_NON_TASKS.NON_TASK_ID = ente.NON_TASK_ID
							INNER JOIN
								#EMP_AVAILABILITY WITH(NOLOCK) ON ente.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
		WHERE (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) AND EMP_NON_TASKS.ALL_DAY = 1
		AND 
		(
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) <= DATEPART(dayofyear,END_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) <= DATEPART(yy,END_TIME)
			) 
			AND 
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) >= DATEPART(dayofyear,START_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) >= DATEPART(yy,START_TIME)
			)

		)
		;

		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = 		
		( 
			SELECT     ISNULL(SUM(HOURS),0.000000) AS SUM_HRS
			FROM       #NON_TASKS
			WHERE     (#NON_TASKS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) 
			AND 
			(
				[START_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
				OR [END_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
			)
			AND ((#NON_TASKS.VAC_SICK_FLAG NOT IN (1, 2, 3) OR #NON_TASKS.VAC_SICK_FLAG IS NULL ))
		)

		--ZERO OUT ALL-DAY (AND ALL DAY MULTI-DAY) APPOINTMENTS:
		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = STD_HRS_AVAIL, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 2
		FROM EMP_NON_TASKS WITH(NOLOCK) 
		INNER JOIN EMP_NON_TASKS_EMPS ON EMP_NON_TASKS.NON_TASK_ID = EMP_NON_TASKS_EMPS.NON_TASK_ID
		     LEFT OUTER JOIN
								TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY INNER JOIN
								#EMP_AVAILABILITY WITH(NOLOCK) ON EMP_NON_TASKS_EMPS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
		WHERE (TIME_CATEGORY.VAC_SICK_FLAG NOT IN (1, 2, 3)) AND EMP_NON_TASKS.ALL_DAY = 1
		AND 
		(
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) <= DATEPART(dayofyear,END_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) <= DATEPART(yy,END_TIME)
			) 
			AND 
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) >= DATEPART(dayofyear,START_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) >= DATEPART(yy,START_TIME)
			)
		)
		;  

		--Events
		UPDATE #EMP_AVAILABILITY
		SET #EMP_AVAILABILITY.HRS_ASSIGNED_EVENT = 
		(
			SELECT     
				ISNULL(SUM(EVENT_TASK.HOURS_ALLOWED),0.000000) --AS SUM_EVENT_HOURS_ALLOWED, EVENT_TASK.EMP_CODE, 
				--CONVERT(SMALLDATETIME,CONVERT(VARCHAR(10),EVENT_TASK.START_TIME,101)) AS EVENT_DATE
			FROM         
				EVENT_TASK WITH (NOLOCK) INNER JOIN
				EMPLOYEE WITH (NOLOCK) ON EVENT_TASK.EMP_CODE  COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  INNER JOIN
				EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
				JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
				EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
				JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
			WHERE
				(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
				AND DATEPART(dayofyear,EVENT_TASK.START_TIME) = DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) 
				AND DATEPART(yy,EVENT_TASK.START_TIME) = DATEPART(yy,#EMP_AVAILABILITY.DATE)
				AND #EMP_AVAILABILITY.EMP_CODE = EVENT_TASK.EMP_CODE
			GROUP BY 
				EVENT_TASK.EMP_CODE, CONVERT(SMALLDATETIME,CONVERT(VARCHAR(10),EVENT_TASK.START_TIME,101))
		)
		;
		
		--Update Assigned Task Hours
		UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = ISNULL(HRS_ASSIGNED_TASK,0.000000)
		         + (SELECT SUM(HRS_PER_DAY) FROM #JOBS 
					WHERE #EMP_AVAILABILITY.EMP_CODE = #JOBS.EMP_CODE AND 
					#EMP_AVAILABILITY.DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE					
						)
		WHERE STD_HRS_AVAIL IS NOT NULL AND #EMP_AVAILABILITY.IS_FULL_DAY_OFF IS NULL 

		

		--Update Assigment Hours
		UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_ASSIGN = (SELECT SUM(HRS_PER_DAY)
															FROM #ASSIGNMENTS A
															WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND 
															#EMP_AVAILABILITY.DATE BETWEEN CASE WHEN WEEK_START IS NULL THEN CASE WHEN A.[START_DATE] is NULL THEN A.[DUE_DATE] ELSE A.[START_DATE] END ELSE WEEK_START END AND CASE WHEN WEEK_END IS NULL THEN CASE WHEN A.DUE_DATE is NULL THEN A.[START_DATE] ELSE A.DUE_DATE END ELSE WEEK_END END
															)
		WHERE STD_HRS_AVAIL IS NOT NULL AND #EMP_AVAILABILITY.IS_FULL_DAY_OFF IS NULL 
		
		
       		
		--SELECT * FROM #JOBS WHERE EMP_CODE = 'chon'
		--ORDER BY EMP_CODE
		
		--SELECT * FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'ama'
		--SELECT * FROM #WORK_DAY --WHERE EMP_CODE = 'BIVONS'
		
		--CLEAN UP:
        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 0.000000 WHERE STD_HRS_AVAIL IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = 0.000000 WHERE HRS_USED_NON_TASK IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_AVAIL = ISNULL(STD_HRS_AVAIL,0.000000) - ISNULL(HRS_USED_NON_TASK,0.000000) - ISNULL(HRS_APPTS,0.000000);
        UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = 0.000000 WHERE HRS_ASSIGNED_TASK IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_BALANCE_AVAIL = ISNULL(HRS_AVAIL,0.000000) - ISNULL(HRS_ASSIGNED_TASK,0.000000);
		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = 0.000000 WHERE HRS_APPTS IS NULL;

--        --TEST:
        --SELECT * FROM #EMP_AVAILABILITY WHERE EMP_CODE = 'ama';

				
        DECLARE
	        @NUM_DAYS INT,
	        @NUM_WEEKS INT,
	        @NUM_MONTHS INT,
	        @NUM_YEARS INT,
	        @NUM_EMPS INT,
	        @CALCULATED_START_DATE SMALLDATETIME, --SINCE WE FILTER OUT DAYS EMPS DON'T WORK, THE START/END PASSED IN ISN'T NECESSARILY THE START/END THAT GETS OUTPUT
	        @CALCULATED_END_DATE SMALLDATETIME

--		--TEST:
		--SELECT * FROM #ASSIGNMENTS
		--SELECT * FROM #EMP_AVAILABILITY

		--FINAL CLEANUP:
		-- recalc available time and subtract event task time from final balance
		-- add event task time to hrs_assigned_task too
		UPDATE #EMP_AVAILABILITY
		SET 
		#EMP_AVAILABILITY.HRS_BALANCE_AVAIL = ISNULL(#EMP_AVAILABILITY.HRS_BALANCE_AVAIL,0.000000) - ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_EVENT,0.000000),
		#EMP_AVAILABILITY.HRS_ASSIGNED_TASK = ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_TASK,0.000000) + ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_EVENT,0.000000);

		--? REMOVE WHAT SHOULD BE ALL DAY HOLIDAYS....
		DELETE FROM #EMP_AVAILABILITY WHERE HRS_USED_NON_TASK = 0.000000 AND HRS_AVAIL = 0.000000 AND HRS_ASSIGNED_TASK = 0.000000 AND HRS_ASSIGNED_EVENT = 0.000000 AND HRS_BALANCE_AVAIL = 0.000000 AND IS_FULL_DAY_OFF = 1;

		--TEST:
		--SELECT * FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'cburr'
             
        IF @SUMMARY_LEVEL = 1 --SUM BY DAY
        BEGIN   
		       	
	        SELECT 
		        EMP_CODE,
		        --CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
		        --DAY_OF_YEAR,
		        --CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
		        --CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.01) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
		        --CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
		        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
		        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6)) AS HRS_ASSIGNED_TASK
							--+ ISNULL((SELECT SUM([HOURS]) - SUM(HRS_POSTED)
							--			FROM #ASSIGNMENTS A
							--			WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
							--			GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR),0) 
							--+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT DAY_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0) AS HRS_ASSIGNED_TASK--,
							--- (CASE WHEN (SELECT HRS_TO_DISTRIBUTE FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) = 0 THEN 
							--ISNULL((SELECT SUM(HRS_POSTED) FROM #JOBS_TIME_POSTED JTP WHERE JTP.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND JTP.DAY_OF_YEAR = #EMP_AVAILABILITY.DAY_OF_YEAR GROUP BY JTP.EMP_CODE,JTP.DAY_OF_YEAR),0) ELSE 0 END)  AS HRS_ASSIGNED_TASK,
				--	CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS,	
    --    		CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
		  --      CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		  --      0 AS IS_FIRST_CHOICE,
				--ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
				-- AND #EMP_AVAILABILITY.DAY_OF_YEAR BETWEEN DATEPART(dayofyear,#MY_DATA.TASK_START_DATE) AND DATEPART(dayofyear,#MY_DATA.JOB_REVISED_DATE)
				-- AND RED_FLAG = 1 AND REC_TYPE = 'T'
				--	GROUP BY EMP_CODE),0) AS OVER_BOOKED,
				--	((CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))  
				--			+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT DAY_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0)) / CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))) * 100 AS PERCENT_UTIL
	        FROM #EMP_AVAILABILITY			
			--WHERE 1 = CASE WHEN @OMIT_BEGINNING_BALANCE = 1 AND DAY_OF_YEAR >= @START_DATE THEN 1
			--			   WHEN @OMIT_BEGINNING_BALANCE = 0 THEN 1 END
	        GROUP BY EMP_CODE--,EMP_DIRECT_HRS_GOAL_PERC,DAY_OF_YEAR     
      
        	
        END
        IF @SUMMARY_LEVEL = 2 --SUM BY WEEK
        BEGIN
			
        		SELECT 
			        EMP_CODE,
			        --CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        WEEK_OF_YEAR,
			        --CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			        --CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			        --CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
			        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6)) AS HRS_ASSIGNED_TASK
							--+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0) AS HRS_ASSIGNED_TASK--,
					--CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS,	
     --   			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
			  --      CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		   --         0 AS IS_FIRST_CHOICE,
					--ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
				 --AND #EMP_AVAILABILITY.WEEK_OF_YEAR BETWEEN #MY_DATA.TASK_START_DATE AND #MY_DATA.JOB_REVISED_DATE
				 --AND RED_FLAG = 1 AND REC_TYPE = 'T'
					--GROUP BY EMP_CODE),0) AS OVER_BOOKED,
					--((CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))  
					--		+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0)) / CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))) * 100 AS PERCENT_UTIL
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,WEEK_OF_YEAR--,EMP_DIRECT_HRS_GOAL_PERC,WEEK_OF_YEAR

        END      


													 
 

		
        DROP TABLE #EMP_AVAILABILITY;
		--DROP TABLE #EMP_ACTUALIZATION;
        DROP TABLE #DAY_RANGE;
        DROP TABLE #EMP_LIST;
        DROP TABLE #WORK_DAY;
        DROP TABLE #JOBS;
		DROP TABLE #ASSIGNMENTS;
/*============== QUERY ==============*/
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
