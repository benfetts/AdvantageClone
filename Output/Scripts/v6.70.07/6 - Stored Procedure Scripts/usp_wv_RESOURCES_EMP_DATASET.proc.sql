if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_RESOURCES_EMP_DATASET]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_RESOURCES_EMP_DATASET]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO 

CREATE PROCEDURE [dbo].[usp_wv_RESOURCES_EMP_DATASET] 
@EMP_CODE       VARCHAR(6),
@ROLES		    VARCHAR(4000),
@START_DATE     SMALLDATETIME,
@END_DATE       SMALLDATETIME,
-- 0 = NONE, 1 = DAY, 2 = WEEK, 3 = MONTH, 4 = YEAR, 5 = SPECIAL MODE FOR CHILD GRID ON EMP FINDER
-- 6 = VIEW FOR TASK ASSIGNMENTS
@SUMMARY_LEVEL  SMALLINT, 
@DEPTS	        VARCHAR(4000),
@EMP_LIST	    VARCHAR(4000),
@UserID			VARCHAR(100),
@Offices	    VARCHAR(4000),
--@ClientCode Varchar(6),
--@DivisionCode Varchar(6),
--@ProductCode Varchar(6),
--@JobNum Varchar(6),
--@JobComp Varchar(6),
--@TaskStatus Varchar(1),
--@ExcludeTempComplete Char(1),
--@Manager varchar(6),
--@OVERRIDE_EMP_SEC AS SMALLINT,
@OMIT_BEGINNING_BALANCE SMALLINT, --ACTUALIZED
@ReportType SMALLINT, 
@IncludeActuals bit

AS
/*============== QUERY ==============*/

    SET ANSI_NULLS ON;
    SET ANSI_WARNINGS OFF;
    SET ARITHABORT OFF;
    SET ARITHIGNORE ON;

	--IF @OfficeCode IS NULL SET @OfficeCode = '';
	--IF @ClientCode IS NULL SET @ClientCode = ''	;
	--IF @DivisionCode IS NULL SET @DivisionCode = '';	
	--IF @ProductCode  IS NULL SET @ProductCode = '';
	--IF @JobNum  IS NULL SET @JobNum = '';
	--IF @JobComp  IS NULL SET @JobComp = '';
	IF @ROLES  IS NULL SET @ROLES = '';
	--IF @TaskStatus  IS NULL SET @TaskStatus = '';
	--IF @ExcludeTempComplete  IS NULL SET @ExcludeTempComplete = '';
	--IF @Manager  IS NULL SET @Manager = '';
    IF @DEPTS IS NULL SET @DEPTS = '';
    IF @EMP_CODE = '%' OR (@EMP_CODE IS NULL) 
    BEGIN
        SET @EMP_CODE = '';
    END
    IF @ROLES IS NULL
    BEGIN
        SET @ROLES = '';
    END
    IF @DEPTS IS NULL
    BEGIN
        SET @DEPTS = '';
    END
    IF @EMP_LIST IS NULL
    BEGIN
        SET @EMP_LIST = '';
    END
    IF @Offices IS NULL
    BEGIN
        SET @Offices = '';
    END

	DECLARE 
		@RestrictionsEmp    INT,
		@sql 				VARCHAR(8000),
		@sql2 				VARCHAR(8000),
		@sql_from 			VARCHAR(8000),
		@sql_where 			VARCHAR(8000), 
		@totaljobsdue 	Int, 
		@START_DATE_MIN SMALLDATETIME, 
		@END_DATE_MAX SMALLDATETIME, 
		@START_DATE_MIN_ASS_NR SMALLDATETIME, 
		@END_DATE_MAX_ASS_NR SMALLDATETIME, 
		@START_DATE_MIN_ASS_R SMALLDATETIME, 
		@END_DATE_MAX_ASS_R SMALLDATETIME

	/*
	* The column HRS_ASSIGNED_TASK now also includes the event hours!!!!
	* need to fix: if it is a holiday with hours on it, it is getting removed...
	* so does the HRS_BALANCE_AVAIL column!!!!
	* BOTH COLUMNS ALSO FACTOR IN EMP_NON_TASK WHERE TIME_CATEGORY.VAC_SICK_FLAG IS NULL OR NOT 1,2,3...
	*/              

	 SET @EMP_LIST = @EMP_LIST;

	 IF @EMP_LIST IS NULL
	 BEGIN

	 	SET @EMP_LIST = '';

	 END  


	SET @START_DATE = CONVERT(
				    DATETIME,
				    CONVERT(CHAR(10), DATEPART(yyyy, @START_DATE), 101) 
				    +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(mm, @START_DATE), 101) +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(dd, @START_DATE), 101) +
				    ' 00:00:00' 
				    );
				       
 	SET @END_DATE = CONVERT(
				    DATETIME,
				    CONVERT(CHAR(10), DATEPART(yyyy, @END_DATE), 101) 
				    +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(mm, @END_DATE), 101) +
				    '-' +
				    CONVERT(CHAR(10), DATEPART(dd, @END_DATE), 101) +
				    ' 23:59:00' 
				    );

    If @ReportType = 0
	Begin	
		SET @END_DATE = DATEADD(dd, 4, DATEADD(ww, DATEDIFF(ww, 0, @START_DATE) - 1, 0))
		SET @START_DATE = DATEADD(dd, 0, DATEADD(ww, DATEDIFF(ww, 0, @START_DATE) - 1, 0))
	End
        
	--SELECT @START_DATE,@END_DATE

	CREATE TABLE #EMP_AVAILABILITY --MASTER TABLE TO RETURN
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[EMP_START_TIME]     SMALLDATETIME,
		[EMP_END_TIME]     SMALLDATETIME,
		[EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
		[DATE]               SMALLDATETIME,
		[DAY_OF_WEEK]			 INT,
		[DAY_OF_YEAR]          INT,
		[WEEK_OF_YEAR]         SMALLDATETIME,
		[MONTH_OF_YEAR]        INT,
		[YEAR]               INT,
		[STD_HRS_AVAIL]      DECIMAL(18,6),
		[HRS_USED_NON_TASK]  DECIMAL(18,6),
		[HRS_AVAIL]          DECIMAL(18,6),
		[HRS_ASSIGNED_TASK]  DECIMAL(18,6),
		[HRS_ASSIGNED_EVENT]  DECIMAL(18,6),
		[HRS_ASSIGNED_ASSIGN]  DECIMAL(18,6),
		[HRS_BALANCE_AVAIL]  DECIMAL(18,6),
		[NOTE]               VARCHAR(100),
		[IS_FULL_DAY_OFF]    SMALLINT,
		[HRS_APPTS]			 DECIMAL(18,6)
	);

	--CREATE TABLE #EMP_AVAILABILITY_BY_WEEK --MASTER TABLE TO RETURN
	--(
	--	[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
	--	[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	--	[DATE]               SMALLDATETIME,
	--	[DAY_OF_YEAR]        INT,
	--	[WEEK_OF_YEAR_BEG]   SMALLDATETIME,
	--	[WEEK_OF_YEAR_END]   SMALLDATETIME,
	--	[MONTH_OF_YEAR]      INT,
	--	[YEAR]               INT,
	--	[WORKING_DAYS]		 DECIMAL(18,6)
	--);

	CREATE TABLE #JOBS 
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[OFFICE_CODE]		VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[CL_CODE]			VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[DIV_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[PRD_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_NUMBER] INT,
		[JOB_COMPONENT_NBR] INT,
		[SEQ_NBR] INT,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[TASK_START_DATE]    SMALLDATETIME,
		[JOB_REVISED_DATE]   SMALLDATETIME,
		[FNC_CODE]			 VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_HRS]          DECIMAL(18,6),
		[WORKDAY_COUNT]         INT,
		[HRS_PER_DAY]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE] INT,	        
		[TRF_DESCRIPTION]		VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_DESC]		VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_COMP_DESC]	VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_FIRST_USE_DATE]	SMALLDATETIME,
		[HRS_PER_DAY_WITH_ASSN]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE_WITH_ASSN] INT,
		[HRS_POSTED]   DECIMAL(18,6),
		[WEEK_OF_YEAR] SMALLDATETIME,
		[WEEKLY] bit

	);

	CREATE TABLE #JOBS_TIME_POSTED 
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[JOB_NUMBER] INT,
		[JOB_COMPONENT_NBR] INT,
		[SEQ_NBR] INT,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[FNC_CODE]			 VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[HRS_POSTED]   DECIMAL(18,6),
		[WEEK_OF_YEAR] SMALLDATETIME,
		[MONTH_OF_YEAR]        INT,
		[DAY_OF_YEAR]          INT

	);

	CREATE TABLE #ASSIGNMENTS
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[ALERT_ID] INT,
		[ALERT_SEQ_NBR] INT,
		[OFFICE_CODE]		VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[CL_CODE]			VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[DIV_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[PRD_CODE]		VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_NUMBER] INT,
		[JOB_COMPONENT_NBR] INT,
		[SEQ_NBR] INT,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[START_DATE]    SMALLDATETIME,
		[DUE_DATE]   SMALLDATETIME,
		[HRS_ALLOWED]          DECIMAL(18,6),
		[WEEK_START]	SMALLDATETIME,
		[WEEK_END]	SMALLDATETIME,
		[WEEK_OF_YEAR] SMALLDATETIME,
		[HOURS]		 DECIMAL(18,6),
		[HRS_POSTED]   DECIMAL(18,6),
		[WORKDAY_COUNT]         INT,
		[HRS_PER_DAY]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE] INT,	        
		[TRF_DESCRIPTION]		VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_DESC]		VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_COMP_DESC]	VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_FIRST_USE_DATE]	SMALLDATETIME,
		[HRS_PER_DAY_WITH_ASSN]	DECIMAL(18,6),
		[WORKDAY_COUNT_IN_RANGE_WITH_ASSN] INT,
		[WEEKLY] bit
	);
        
	CREATE TABLE #MY_DATA 
	(
		ROW_ID						INT IDENTITY(1,1) NOT NULL,
		JOB_NUMBER					INT NULL,
		JOB_COMPONENT_NBR			SMALLINT NULL,
		FNC_CODE					VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FNC_EST					    VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		TASK_DESCRIPTION			VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		JOB_COMP_DESC				VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		TASK_START_DATE				SMALLDATETIME NULL,
		JOB_REVISED_DATE			SMALLDATETIME NULL,
		JOB_FIRST_USE_DATE			SMALLDATETIME NULL,
		EMP_CODE					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		JOB_DESC					VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		OFFICE_CODE					VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		CL_CODE						VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		CL_NAME						VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DIV_CODE					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		PRD_CODE					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		SORT						SMALLDATETIME NULL,
		JOB_HRS						DECIMAL(18,6) NULL,
		SEQ_NBR						SMALLINT NULL,
		EMP_FML_NAME				VARCHAR(2000) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		REC_TYPE					VARCHAR(5),
		NON_TASK_ID					SMALLINT NULL,
		TRF_DESCRIPTION		        VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DP_TM_CODE					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DEF_TRF_CODE				VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		[WEEKLY] bit,
		ADJ_JOB_HRS					DECIMAL(18,6) NULL,
		IS_EVENT_TASK				SMALLINT NULL,
		TASK_TOTAL_WORKING_DAYS				INT NULL,
		HOURS_PER_DAY				DECIMAL(18,6) NULL,
		WORKING_DAYS_IN_TASK_RANGE	INT NULL,
		HRS_USED_NON_TASK			DECIMAL(18,6) NULL,
		HRS_AVAIL					DECIMAL(18,6) NULL,
		HRS_ASSIGNED_TASK			DECIMAL(18,6) NULL,
		HRS_ASSIGNED_EVENT			DECIMAL(18,6) NULL,
		HRS_BALANCE_AVAIL			DECIMAL(18,6) NULL,
		STD_HRS_AVAIL				DECIMAL(18,6) NULL,
		RED_FLAG					INT,
		HRS_PER_DAY_WITH_ASSN		DECIMAL(18,6),
		ADJ_JOB_HRS_WITH_ASSN		DECIMAL(18,6) NULL,
		ALERT_ID					INT,
		ALERT_SEQ_NBR				INT, /** 08/19/19 - Added **/
		HRS_BEGIN		DECIMAL(18,6) NULL,
		HRS_POSTED		DECIMAL(18,6) NULL,
		HRS_LEFT		DECIMAL(18,6) NULL,
		SPRINT_ID					INT,
		TASK_BB_WORKING_DAYS				INT NULL,
		BB_HOURS_PER_DAY				DECIMAL(18,6) NULL,
		GRP_SEQ_NBR					INT
		
	);
        
	CREATE TABLE #WORK_DAY --Table of employee workdays
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[WORK_DATE]               SMALLDATETIME,
		[STD_HRS]  DECIMAL(18,6),
		[NON_TASK_DAY] INT
	);

	CREATE TABLE #NON_TASKS --Table of employee Non Task days
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[START_DATE] SMALLDATETIME,
		[END_DATE] SMALLDATETIME,
		[HOURS] DECIMAL(18,6),
		[VAC_SICK_FLAG] int
	);
        
	CREATE TABLE #DAY_RANGE --RANGE OF DAYS
	(
		[DATE] SMALLDATETIME,
	);

	CREATE TABLE #EMP_LIST --LIST OF EMPS
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
		[EMP_START_TIME]     SMALLDATETIME,
		[EMP_END_TIME]     SMALLDATETIME
	);

	DECLARE @emp_table TABLE (
		EMP_CODE VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS
	);

    --1. GET DAYS (LOOP)
    --=================================================================================================
    DECLARE @DAY_COUNT      AS INTEGER,
            @DAY_INCREMENT  AS INTEGER, @Restrictions INT, @RestrictionsOffice INT, @EMP_CDE AS VARCHAR(6)
	         
		
	SELECT @Restrictions = COUNT(*) FROM SEC_CLIENT WITH(NOLOCK) WHERE UPPER(USER_ID) = UPPER(@UserID);

	SELECT @RestrictionsEmp = COUNT(*) FROM SEC_EMP WITH(NOLOCK) WHERE UPPER(USER_ID) = UPPER(@UserID);

	SELECT @EMP_CDE = EMP_CODE FROM SEC_USER WHERE UPPER(USER_CODE) = UPPER(@UserID)
	SELECT @RestrictionsOffice = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CDE
		        
    SET @DAY_INCREMENT = -1;
    SELECT @DAY_COUNT = DATEDIFF(dd, @START_DATE, @END_DATE) + 1;
       
    WHILE @DAY_COUNT > 0
    BEGIN
        INSERT INTO #DAY_RANGE
            (
            [DATE]
            )
        VALUES
            (
            DATEADD(dd, @DAY_INCREMENT + 1, @START_DATE)
            );
        SET @DAY_INCREMENT = @DAY_INCREMENT + 1;
        SET @DAY_COUNT = @DAY_COUNT - 1;
    END

	UPDATE #DAY_RANGE SET [DATE] = @END_DATE WHERE [DATE] = (SELECT MAX([DATE]) FROM #DAY_RANGE);

--        --TEST:
--        SELECT * FROM #DAY_RANGE;


    --2. GET EMPS (SELECT)
    --=================================================================================================
    DECLARE @DYNA_SQL AS NVARCHAR(4000);
    SET @DYNA_SQL = '';

    SET @DYNA_SQL = 'INSERT INTO #EMP_LIST(EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,EMP_START_TIME,EMP_END_TIME)'

    SET @DYNA_SQL = @DYNA_SQL + 'SELECT DISTINCT EMPLOYEE.EMP_CODE, EMPLOYEE.DIRECT_HRS_PER, EMPLOYEE.EMP_START_TIME, EMPLOYEE.EMP_END_TIME
            FROM EMPLOYEE WITH (NOLOCK) '

	IF (@ROLES <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + ' INNER JOIN EMP_TRAFFIC_ROLE WITH (NOLOCK) ON EMPLOYEE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE'
	END
	IF @RestrictionsEmp > 0
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL  + ' INNER JOIN SEC_EMP ON EMPLOYEE.EMP_CODE = SEC_EMP.EMP_CODE '
	END
	IF @RestrictionsOffice > 0
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL  + ' INNER JOIN EMP_OFFICE ON EMPLOYEE.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
	END
				
  
	--- START THE WHERE CLAUSE
	SET @DYNA_SQL = @DYNA_SQL + ' WHERE (EMPLOYEE.EMP_TERM_DATE IS NULL) AND 1 = 1 '

	--FILTER BY EMP CODE       
	IF (@EMP_CODE <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND EMPLOYEE.EMP_CODE = ''' + @EMP_CODE + ''''
	END

	--FILTER BY EMP CODE LIST:	
	IF (@EMP_LIST <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMPLOYEE.EMP_CODE IN ((SELECT * from dbo.udf_split_list('''+ @EMP_LIST +''', '',''))))'
	END

	--FILTER BY ROLE                            
	IF (@ROLES <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMP_TRAFFIC_ROLE.ROLE_CODE IN ((SELECT * from dbo.udf_split_list('''+ @ROLES +''', '','')))) '
	END

	--FILTER BY DEPT                            
	IF (@DEPTS <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMPLOYEE.DP_TM_CODE IN ((SELECT * from dbo.udf_split_list('''+ @DEPTS +''', '','')))) '
	END

	--FILTER BY OFFICE                            
	IF (@Offices <> '') 
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL + 'AND (EMPLOYEE.OFFICE_CODE IN ((SELECT * from dbo.udf_split_list('''+ @Offices +''', '','')))) '
	END

	IF @RestrictionsEmp > 0
	BEGIN
		SET @DYNA_SQL = @DYNA_SQL  + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''') '
	END

	--END THE DYNAMIC SQL:                            
	SET @DYNA_SQL = @DYNA_SQL + ' ORDER BY EMPLOYEE.EMP_CODE;'
        
	PRINT @DYNA_SQL;
	EXEC sp_executesql @DYNA_SQL;
      
    --3. PUT BOTH INTO LIST
    DECLARE 
	@CURR_EMP_CODE AS VARCHAR(6),
	    @CURR_EMP_DIRECT_HRS_GOAL_PERC DECIMAL(18,6),
		@CURR_EMP_START_TIME     SMALLDATETIME,
	    @CURR_EMP_END_TIME     SMALLDATETIME,
	    @EMPS VARCHAR(4000);

	DECLARE 
		@row_id int,
		@row_cnt int

	SET @EMPS = ''    

	--SELECT '#EMP_LIST' '#EMP_LIST', * FROM #EMP_LIST  /***** DEBUG *****/

	--SELECT @EMP_LIST '@EMP_LIST' /***** DEBUG *****/

	IF @EMP_LIST > '' BEGIN
		INSERT INTO @emp_table SELECT items FROM udf_split_list(@EMP_LIST, ',')

		--SELECT '@emp_table' 'SRC', * FROM @emp_table  /***** DEBUG *****/

		DELETE FROM #EMP_LIST WHERE EMP_CODE NOT IN (SELECT EMP_CODE FROM @emp_table)
	END

	--SELECT '#EMP_LIST' '#EMP_LIST', * FROM #EMP_LIST  /***** DEBUG *****/

	SELECT @row_cnt = COUNT(*) FROM #EMP_LIST

    --DECLARE MY_ROWS                         CURSOR  
    --FOR
	   -- SELECT EMP_CODE
	   -- FROM   #EMP_LIST
    --;
    --OPEN MY_ROWS;
    --FETCH NEXT FROM MY_ROWS INTO @CURR_EMP_CODE;
    --WHILE @@FETCH_STATUS = 0
	SET @row_id = 1
	WHILE @row_id <= @row_cnt
    BEGIN

		SELECT @CURR_EMP_CODE = EMP_CODE FROM #EMP_LIST WHERE ROW_ID = @row_id

	    SELECT @CURR_EMP_DIRECT_HRS_GOAL_PERC = ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.00), @CURR_EMP_START_TIME = EMP_START_TIME, @CURR_EMP_END_TIME = EMP_END_TIME FROM #EMP_LIST WHERE EMP_CODE = @CURR_EMP_CODE;
	    INSERT INTO #EMP_AVAILABILITY(EMP_CODE,[DATE],EMP_DIRECT_HRS_GOAL_PERC,EMP_START_TIME,EMP_END_TIME)
	    SELECT @CURR_EMP_CODE,[DATE],@CURR_EMP_DIRECT_HRS_GOAL_PERC,@CURR_EMP_START_TIME,@CURR_EMP_END_TIME FROM #DAY_RANGE;      
	        
	    IF @EMP_CODE <> '' OR @DEPTS <> '' OR @ROLES <> ''
	    BEGIN
			SELECT @EMPS = @EMPS + @CURR_EMP_CODE + ','
	    END	        
	        
	    --GO TO NEXT EVENT
	    --FETCH NEXT FROM MY_ROWS INTO @CURR_EMP_CODE;
		SET @row_id = @row_id + 1
    END
    --CLOSE MY_ROWS;
    --DEALLOCATE MY_ROWS;
	
	CREATE TABLE #emp_work_days ( emp_code varchar(4000) COLLATE SQL_Latin1_General_CP1_CS_AS, workday smalldatetime, std_hours decimal(9,3) )
	CREATE TABLE #emp (listpos int,value varchar(20) COLLATE SQL_Latin1_General_CP1_CS_AS)
	CREATE TABLE #emp_year ( emp_code varchar(6) COLLATE SQL_Latin1_General_CP1_CS_AS, emp_year integer, daily_avg decimal(9,2) )
	CREATE TABLE #work_days ( workyear integer, workdate smalldatetime, holiday bit, weekend bit, dayoff bit )

	if @EMPS <> ''
	BEGIN
		INSERT INTO #emp 
		SELECT * FROM [dbo].[charlist_to_table] (@EMPS,',')		
	END	
	
    --SET DATE COUNTERS:
    UPDATE #EMP_AVAILABILITY SET
		DAY_OF_WEEK = DATEPART(weekday,[DATE]),
		DAY_OF_YEAR= DATEPART(dayofyear,[DATE]) ,
		WEEK_OF_YEAR= DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,[DATE])) , 104 ) ) + (DATEPART(wk,[DATE])-1), 6),--DATEPART(wk,[DATE]) ,
		MONTH_OF_YEAR= DATEPART(mm,[DATE]),
		[YEAR] = DATEPART(yy,[DATE]) 
	              
	IF @OMIT_BEGINNING_BALANCE = 1
		BEGIN
			SELECT 
				@START_DATE_MIN = MIN(TASK_START_DATE), 
				@END_DATE_MAX = MAX(JOB_REVISED_DATE)
			FROM         
				dbo.V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
				dbo.JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												  V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				dbo.JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN
				dbo.JOB_TRAFFIC_DET_EMPS ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND
											V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND
											V_JOB_TRAFFIC_DET.SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR LEFT OUTER JOIN
				#emp e ON V_JOB_TRAFFIC_DET.EMP_CODE = e.value
			WHERE 
				1 = CASE WHEN @EMPS = '' OR e.value IS NOT NULL THEN 1 ELSE 0 END AND
				--(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
				--AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL) AND
				((TASK_START_DATE >= @START_DATE) AND (TASK_START_DATE <= @END_DATE) OR
				(JOB_REVISED_DATE >= @START_DATE) AND (JOB_REVISED_DATE <= @END_DATE) OR
				(@START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE));
		END
	ELSE
		BEGIN
			SELECT 
				@START_DATE_MIN = MIN(TASK_START_DATE), 
				@END_DATE_MAX = MAX(JOB_REVISED_DATE)
			FROM         
				dbo.V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
				dbo.JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												  V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				dbo.JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN
				dbo.JOB_TRAFFIC_DET_EMPS ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_TRAFFIC_DET_EMPS.JOB_NUMBER AND
											V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR AND
											V_JOB_TRAFFIC_DET.SEQ_NBR = JOB_TRAFFIC_DET_EMPS.SEQ_NBR LEFT OUTER JOIN
				#emp e ON V_JOB_TRAFFIC_DET.EMP_CODE = e.value
			WHERE 
				1 = CASE WHEN @EMPS = '' OR e.value IS NOT NULL THEN 1 ELSE 0 END AND
				--(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
				--AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL) AND
				((TASK_START_DATE >= @START_DATE) AND (TASK_START_DATE <= @END_DATE) OR
				(JOB_REVISED_DATE >= @START_DATE) AND (JOB_REVISED_DATE <= @END_DATE) OR
				(@START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE));
		END

	--Assignment max and min dates
	SELECT @START_DATE_MIN_ASS_NR = MIN(A.ST), @END_DATE_MAX_ASS_NR = MAX(ED) FROM (
	SELECT ALERT.ALERT_ID, MIN(ALERT.ALERT_SEQ_NBR) ALERT_SEQ_NBR, CASE WHEN MIN(SPRINT_EMPLOYEE.WEEK_START) IS NOT NULL THEN MIN(SPRINT_EMPLOYEE.WEEK_START) ELSE CASE WHEN MIN(ALERT.[START_DATE]) is NULL THEN MIN(ALERT.DUE_DATE) ELSE MIN(ALERT.[START_DATE]) END END AS ST,
		   CASE WHEN MAX(SPRINT_EMPLOYEE.WEEK_END) IS NOT NULL THEN MAX(SPRINT_EMPLOYEE.WEEK_END) ELSE CASE WHEN MAX(ALERT.DUE_DATE) is NULL THEN MAX(ALERT.[START_DATE]) ELSE MAX(ALERT.DUE_DATE) END END AS ED
	FROM ALERT INNER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' 
						--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
						AND (HRS_ALLOWED <> 0 OR [HOURS] <> 0) AND ALERT.ALRT_NOTIFY_HDR_ID IS NULL 
						--AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) 
						AND (CURRENT_NOTIFY = 1) 
						GROUP BY ALERT.ALERT_ID) AS A
	
	SELECT @START_DATE_MIN_ASS_R = MIN(A.ST), @END_DATE_MAX_ASS_R = MAX(ED) FROM (
	SELECT ALERT.ALERT_ID, MIN(ALERT.ALERT_SEQ_NBR) ALERT_SEQ_NBR, CASE WHEN MIN(SPRINT_EMPLOYEE.WEEK_START) IS NOT NULL THEN MIN(SPRINT_EMPLOYEE.WEEK_START) ELSE CASE WHEN MIN(ALERT.[START_DATE]) is NULL THEN MIN(ALERT.DUE_DATE) ELSE MIN(ALERT.[START_DATE]) END END AS ST,
		    CASE WHEN MAX(SPRINT_EMPLOYEE.WEEK_END) IS NOT NULL THEN MAX(SPRINT_EMPLOYEE.WEEK_END) ELSE CASE WHEN MAX(ALERT.DUE_DATE) is NULL THEN MAX(ALERT.[START_DATE]) ELSE MAX(ALERT.DUE_DATE) END END AS ED
	FROM ALERT LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT.ASSIGNED_EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' 
					--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  
					AND (HRS_ALLOWED <> 0 OR [HOURS] <> 0) AND ALERT.ALRT_NOTIFY_HDR_ID IS NOT NULL 
					--AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) 
				GROUP BY ALERT.ALERT_ID) AS A

	
	IF (@START_DATE_MIN IS NULL) OR (@START_DATE < @START_DATE_MIN)
	BEGIN
		SET @START_DATE_MIN = @START_DATE;
	END	
	IF (@END_DATE_MAX IS NULL) OR (@END_DATE > @END_DATE_MAX)
	BEGIN
		SET @END_DATE_MAX = @END_DATE
	END	

	IF (@START_DATE_MIN_ASS_NR IS NOT NULL)
	BEGIN
		IF @START_DATE_MIN_ASS_NR < @START_DATE_MIN
		BEGIN
			SET @START_DATE_MIN = @START_DATE_MIN_ASS_NR
		END
	END

	IF (@START_DATE_MIN_ASS_R IS NOT NULL)
	BEGIN
		IF @START_DATE_MIN_ASS_R < @START_DATE_MIN
		BEGIN
			SET @START_DATE_MIN = @START_DATE_MIN_ASS_R
		END
	END

	IF (@END_DATE_MAX_ASS_NR IS NOT NULL)
	BEGIN
		IF @END_DATE_MAX_ASS_NR > @END_DATE_MAX
		BEGIN
			SET @END_DATE_MAX = @END_DATE_MAX_ASS_NR
		END
	END

	IF (@END_DATE_MAX_ASS_R IS NOT NULL)
	BEGIN
		IF @END_DATE_MAX_ASS_R > @END_DATE_MAX
		BEGIN
			SET @END_DATE_MAX = @END_DATE_MAX_ASS_R
		END
	END

	--SELECT @START_DATE_MIN,@END_DATE_MAX
	--SELECT @EMPS
	--Get Standard Hours
	--INSERT INTO #WORK_DAY (EMP_CODE, WORK_DATE, STD_HRS)
	--SELECT fn.emp_code, fn.workday, fn.std_hours
	--FROM [dbo].[udf_get_std_hrs_wl] ( @START_DATE_MIN, @END_DATE_MAX, @EMPS) fn
	--WHERE (fn.std_hours <> 0.00 );		


	DECLARE @cur_date smalldatetime, @emp_start_date smalldatetime, @day_count2 integer, @start_year integer, @end_year integer, @cur_year integer
	DECLARE @year_start_date smalldatetime, @year_end_date smalldatetime, @holiday bit, @weekend bit, @dayoff bit 
	IF ( @START_DATE_MIN IS NOT NULL ) AND ( @END_DATE_MAX IS NOT NULL ) AND ( @START_DATE_MIN <= @END_DATE_MAX )
	BEGIN
		-- Create a table holding the average workday by year for each employee		
		DECLARE @std_hours decimal(9,3)
		
		SET @start_year = DATEPART(yyyy, @START_DATE_MIN)		
		SET @end_year = DATEPART(yyyy, @END_DATE_MAX)		
		SET @cur_year = @start_year
		WHILE ( @cur_year <= @end_year )
		BEGIN
			SET @day_count2 = 0
			SET @year_start_date = CONVERT( smalldatetime, '01/01/' + CAST( @cur_year AS varchar(4)) )
			SET @year_end_date = CONVERT( smalldatetime, '12/31/' + CAST( @cur_year AS varchar(4)) )
			SET @cur_date = @year_start_date
			
			WHILE ( @cur_date <= @year_end_date )
			BEGIN
				SET @weekend = 0
				IF (( DATEPART( dw, @cur_date )) IN ( 1, 7 ))
					SET @weekend = 1
				ELSE
					SET @day_count2 = @day_count2 + 1
									 
				SET @holiday = 0					
				IF ( SELECT COUNT( * ) 
				       FROM dbo.EMP_NON_TASKS ent 
				      WHERE ent.[TYPE] = 'H' 
				        AND ent.ALL_DAY = 1 
						AND ( @cur_date BETWEEN ent.[START_DATE] AND ent.[END_DATE] )) > 0
					SELECT @holiday = 1			
				
				INSERT INTO #work_days( workyear, workdate, holiday, weekend ) VALUES ( @cur_year, @cur_date, @holiday, @weekend )
				
				SET @cur_date = DATEADD( day, 1, @cur_date )
			END
			
			IF ( @day_count2 > 0 )
				INSERT INTO #emp_year ( emp_code, emp_year, daily_avg ) 
					 SELECT e.EMP_CODE, @cur_year, 
							ROUND( CAST( e.STD_ANNUAL_HRS AS decimal(9,2)) / CAST( @day_count2 AS decimal(9,2)), 2 )
					   FROM dbo.EMPLOYEE e 

			SET @cur_year = @cur_year + 1
		END	
	END	

	INSERT INTO #WORK_DAY (EMP_CODE, WORK_DATE, STD_HRS)
	SELECT
		[EmployeeCode],
		[WorkDate],
		[StandardHours]
	FROM
		(SELECT 
			[EmployeeCode] = e.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS, 
			[WorkDate] = wd.workdate,
			[StandardHours] = CASE DATEPART( dw, wd.workdate ) 
									WHEN 1 THEN e.SUN_HRS
									WHEN 2 THEN e.MON_HRS
									WHEN 3 THEN e.TUE_HRS
									WHEN 4 THEN e.WED_HRS
									WHEN 5 THEN e.THU_HRS
									WHEN 6 THEN e.FRI_HRS
									WHEN 7 THEN e.SAT_HRS
								END
		FROM 
			#work_days wd
		CROSS JOIN
			(SELECT
				EMP.EMP_CODE,
				EMP.EMP_DATE,
				EMP.EMP_TERM_DATE,
				EMP.SUN_HRS,
				EMP.MON_HRS,
				EMP.TUE_HRS,
				EMP.WED_HRS,
				EMP.THU_HRS,
				EMP.FRI_HRS,
				EMP.SAT_HRS,
				[TASK_START_DATE] = CASE WHEN e.[TASK_START_DATE] > @START_DATE_MIN OR e.[TASK_START_DATE] IS NULL THEN @START_DATE_MIN ELSE e.[TASK_START_DATE] END,
				[JOB_REVISED_DATE] = CASE WHEN e.[JOB_REVISED_DATE] < @END_DATE_MAX OR e.[JOB_REVISED_DATE] IS NULL THEN @END_DATE_MAX ELSE e.[JOB_REVISED_DATE] END
			FROM
				dbo.EMPLOYEE EMP
			LEFT OUTER JOIN
				#emp e2 ON EMP.EMP_CODE = e2.value
			LEFT OUTER JOIN
				(SELECT 
	 				[TASK_START_DATE] = MIN(TASK_START_DATE), 
	 				[JOB_REVISED_DATE] = MAX(JOB_REVISED_DATE),
	 				JTDE.EMP_CODE
				 FROM         
	 				dbo.V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
	 				dbo.JOB_TRAFFIC_DET_EMPS JTDE ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JTDE.JOB_NUMBER AND
	 													V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JTDE.JOB_COMPONENT_NBR AND
	 													V_JOB_TRAFFIC_DET.SEQ_NBR = JTDE.SEQ_NBR INNER JOIN
	 				dbo.JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
	 				dbo.V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
	 				dbo.JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
	 				dbo.JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
				 WHERE 
	 				--(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
	 				--AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL) AND
	 				((TASK_START_DATE >= @START_DATE) AND (TASK_START_DATE <= @END_DATE) OR
	 				(JOB_REVISED_DATE >= @START_DATE) AND (JOB_REVISED_DATE <= @END_DATE) OR
	 				(@START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE))
				 GROUP BY
	 				JTDE.EMP_CODE) e ON EMP.EMP_CODE = e.EMP_CODE
			WHERE
				1 = CASE WHEN @EMPS = '' OR e2.value IS NOT NULL THEN 1 ELSE 0 END) e
		WHERE 
			(wd.workdate >= e.TASK_START_DATE AND wd.workdate <= e.JOB_REVISED_DATE) AND
			( e.EMP_TERM_DATE >= wd.workdate OR e.EMP_TERM_DATE IS NULL )
			AND ( e.EMP_DATE <= wd.workdate OR e.EMP_DATE IS NULL )
			AND ( wd.holiday = 0 )
			AND ( wd.workdate BETWEEN @START_DATE_MIN AND @END_DATE_MAX )) EmpHours
	WHERE
		StandardHours <> 0
		
	DROP TABLE #emp_work_days
	DROP TABLE #work_days
	DROP TABLE #emp_year
	DROP TABLE #emp
	
	UPDATE #WORK_DAY
	SET NON_TASK_DAY = CASE WHEN (SELECT COUNT(*)
	FROM dbo.EMP_NON_TASKS ent INNER JOIN
			TIME_CATEGORY ON ent.CATEGORY = TIME_CATEGORY.CATEGORY
			INNER JOIN dbo.EMP_NON_TASKS_EMPS ente ON ent.NON_TASK_ID = ente.NON_TASK_ID
	WHERE ent.[TYPE] = 'A' AND (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) 
			AND ent.ALL_DAY = 1 
			AND (WORK_DATE BETWEEN ent.[START_DATE] AND ent.[END_DATE] )
			AND (ente.EMP_CODE = #WORK_DAY.EMP_CODE)) > 0 THEN 1 ELSE 0 END			

		--SELECT * FROM #WORK_DAY --WHERE WORK_DATE BETWEEN @START_DATE AND @END_DATE
								
		--SELECT * FROM #WORK_DAY											

	    INSERT INTO #JOBS
				SELECT JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE,V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR,
				 V_JOB_TRAFFIC_DET.SEQ_NBR,
					 V_JOB_TRAFFIC_DET.EMP_CODE, CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END,
					CASE WHEN WEEK_END IS NULL THEN CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, JOB_REVISED_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, JOB_REVISED_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, JOB_REVISED_DATE), 101) +
				       ' 23:59:00' 
				       ) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, JOB_REVISED_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, JOB_REVISED_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, JOB_REVISED_DATE), 101) +
				       ' 23:59:00' 
				       ) ELSE WEEK_END END AS JOB_REVISED_DATE,
					 V_JOB_TRAFFIC_DET.FNC_CODE, CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END AS JOB_HRS,				 
					 (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1
															),
					 CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)) ELSE 0 END,
					CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 AND NON_TASK_DAY <> 1)
						 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= @END_DATE
															 AND NON_TASK_DAY <> 1) ELSE 0 END,TRAFFIC.TRF_DESCRIPTION, JOB_LOG.JOB_DESC,
															 JOB_COMPONENT.JOB_COMP_DESC, JOB_COMPONENT.JOB_FIRST_USE_DATE,
					 CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 ) <> 0
						 THEN (CASE WHEN WEEK_START IS NOT NULL AND SPRINT_EMPLOYEE.[HOURS] > 0 THEN SPRINT_EMPLOYEE.[HOURS] ELSE V_JOB_TRAFFIC_DET.JOB_HRS END/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 )) ELSE 0 END,
					CASE WHEN @START_DATE >= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 )
						 WHEN @START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= @START_DATE 
															 AND WORK_DATE <= @END_DATE
															)
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END
															 )
						 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = V_JOB_TRAFFIC_DET.EMP_CODE
															 AND WORK_DATE >= CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END
															 AND WORK_DATE <= @END_DATE
															 ) ELSE 0 END,0,NULL, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END				
					FROM         
						V_JOB_TRAFFIC_DET WITH(NOLOCK) INNER JOIN
						JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						INNER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
						INNER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
						LEFT OUTER JOIN ALERT ON ALERT.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND ALERT.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR AND ALERT.TASK_SEQ_NBR = V_JOB_TRAFFIC_DET.SEQ_NBR
						LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND V_JOB_TRAFFIC_DET.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
						WHERE ALERT.ALERT_LEVEL <> 'PST' 
								--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
								--AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)
								AND ((CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END >= @START_DATE AND CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END <= @END_DATE) OR
									(CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) END >= @START_DATE AND CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) END <= @END_DATE) OR
									(@START_DATE >= CASE WHEN WEEK_START IS NOT NULL THEN WEEK_START ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END AND @END_DATE <= CASE WHEN WEEK_END IS NOT NULL THEN WEEK_END ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) END))		

		INSERT INTO #JOBS_TIME_POSTED
				SELECT #JOBS.JOB_NUMBER, #JOBS.JOB_COMPONENT_NBR, #JOBS.SEQ_NBR, #JOBS.EMP_CODE, #JOBS.FNC_CODE, EMP_HOURS, DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,DATE_ENTERED)) , 104 ) ) + (DATEPART(wk,DATE_ENTERED)-1), 6),DATEPART(mm,DATE_ENTERED),DAY_OF_YEAR= DATEPART(dayofyear,DATE_ENTERED)
				FROM EMP_TIME_DTL AS ETD  INNER JOIN 
					 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
							ALERT A ON A.ALERT_ID = ETD.ALERT_ID INNER JOIN #JOBS ON A.JOB_NUMBER = #JOBS.JOB_NUMBER AND A.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND A.TASK_SEQ_NBR = #JOBS.SEQ_NBR
				WHERE ETD.ALERT_ID IS NOT NULL AND ALERT_LEVEL = 'BRD' AND ET.EMP_CODE = #JOBS.EMP_CODE									
        			 
		--SELECT * FROM #JOBS --WHERE EMP_CODE = 'westc' --ORDER BY JOB_NUMBER, JOB_COMPONENT_NBR
		--SELECT * FROM #JOBS_TIME_POSTED ORDER BY JOB_NUMBER, JOB_COMPONENT_NBR


		--Non routed Assignments - not completed.
		INSERT INTO #ASSIGNMENTS
				SELECT ALERT.ALERT_ID, ALERT.ALERT_SEQ_NBR, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
					   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT_RCPT.EMP_CODE, 
					   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
					   ISNULL(ALERT.HRS_ALLOWED,0), SPRINT_EMPLOYEE.WEEK_START, SPRINT_EMPLOYEE.WEEK_END, 
					   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
						CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
						 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
					   CASE WHEN SPRINT_EMPLOYEE.[HOURS] IS NULL OR SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
					   0,
					   (SELECT COUNT(*) FROM #WORK_DAY
						WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
						 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END) 
						 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
						 AND NON_TASK_DAY <> 1
						),
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)) ELSE 0 END,

					   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1) ELSE 0 END,
					   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END
				FROM ALERT INNER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
					 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' 
						--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
						AND (ALERT_RCPT.HOURS_ALLOWED <> 0 OR [HOURS] <> 0)
						AND ALERT.ALRT_NOTIFY_HDR_ID IS NULL 
						--AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) 
						AND (CURRENT_NOTIFY = 1)--AND (IWI.ALERT_ID IS NULL)
				--((ALERT.[START_DATE] >= @START_DATE AND ALERT.[START_DATE] <= @END_DATE) OR
				--(DUE_DATE >= @START_DATE AND DUE_DATE <= @END_DATE) OR (ALERT.[START_DATE] IS NULL AND [DUE_DATE] IS NULL) OR
				--(WEEK_START BETWEEN @START_DATE AND @END_DATE))

		--Non routed Assignments - completed.
		INSERT INTO #ASSIGNMENTS
				SELECT ALERT.ALERT_ID, ALERT.ALERT_SEQ_NBR, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
					   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT_RCPT_DISMISSED.EMP_CODE, 
					   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
					   ISNULL(ALERT.HRS_ALLOWED,0), SPRINT_EMPLOYEE.WEEK_START, SPRINT_EMPLOYEE.WEEK_END, 
					   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
						CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
						 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
					   CASE WHEN SPRINT_EMPLOYEE.[HOURS] IS NULL OR SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT_RCPT_DISMISSED.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
					   0,
					   (SELECT COUNT(*) FROM #WORK_DAY
						WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
						 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END) 
						 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
						 AND NON_TASK_DAY <> 1
						),
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT_DISMISSED.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)) ELSE 0 END,

					   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1) ELSE 0 END,
					   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END
				FROM ALERT INNER JOIN
					 ALERT_RCPT_DISMISSED ON ALERT.ALERT_ID = ALERT_RCPT_DISMISSED.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT_DISMISSED.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT_DISMISSED.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
					 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' 
						--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
						AND (ALERT_RCPT_DISMISSED.HOURS_ALLOWED <> 0 OR [HOURS] <> 0)
						AND ALERT.ALRT_NOTIFY_HDR_ID IS NULL 
						--AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) 
						AND (CURRENT_NOTIFY = 1)--AND (IWI.ALERT_ID IS NULL)
				--((ALERT.[START_DATE] >= @START_DATE AND ALERT.[START_DATE] <= @END_DATE) OR
				--(DUE_DATE >= @START_DATE AND DUE_DATE <= @END_DATE) OR (ALERT.[START_DATE] IS NULL AND [DUE_DATE] IS NULL) OR
				--(WEEK_START BETWEEN @START_DATE AND @END_DATE))

		--Routed
		INSERT INTO #ASSIGNMENTS
				SELECT ALERT.ALERT_ID, ALERT.ALERT_SEQ_NBR, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
					   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT_RCPT.EMP_CODE, 
					   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
					   ISNULL(ALERT.HRS_ALLOWED,0), SPRINT_EMPLOYEE.WEEK_START, SPRINT_EMPLOYEE.WEEK_END, 
					   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
						CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
						 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
					   CASE WHEN SPRINT_EMPLOYEE.[HOURS] IS NULL OR SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
					   0,
					   (SELECT COUNT(*) FROM #WORK_DAY
						WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
						 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END) 
						 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
						 AND NON_TASK_DAY <> 1
						),
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)) ELSE 0 END,

					   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1) ELSE 0 END,
					   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END
				FROM ALERT LEFT OUTER JOIN
					 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
					 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' 
				--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  
				AND (ALERT_RCPT.HOURS_ALLOWED <> 0 OR [HOURS] <> 0)
				AND ALERT.ALRT_NOTIFY_HDR_ID IS NOT NULL AND (CURRENT_NOTIFY = 1)
				--AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) --AND (IWI.ALERT_ID IS NULL)	

		INSERT INTO #ASSIGNMENTS
				SELECT ALERT.ALERT_ID, ALERT.ALERT_SEQ_NBR, ALERT.OFFICE_CODE, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, 
					   ALERT.JOB_COMPONENT_NBR, ALERT.TASK_SEQ_NBR, ALERT_RCPT_DISMISSED.EMP_CODE, 
					   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END, CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END, 
					   ISNULL(ALERT.HRS_ALLOWED,0), SPRINT_EMPLOYEE.WEEK_START, SPRINT_EMPLOYEE.WEEK_END, 
					   CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN SPRINT_EMPLOYEE.WEEK_START ELSE 
						CASE WHEN ALERT.[START_DATE] is NULL THEN DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.DUE_DATE)) , 104 ) ) + (DATEPART(wk,ALERT.DUE_DATE)-1), 6) 
						 ELSE DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ALERT.[START_DATE])) , 104 ) ) + (DATEPART(wk,ALERT.[START_DATE])-1), 6) END END ,
					   CASE WHEN SPRINT_EMPLOYEE.[HOURS] IS NULL OR SPRINT_EMPLOYEE.[HOURS] = 0 THEN ISNULL(ALERT_RCPT_DISMISSED.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END,
					   0,
					   (SELECT COUNT(*) FROM #WORK_DAY
						WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
						 AND WORK_DATE >= CONVERT(Date, CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END) 
						 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
						 AND NON_TASK_DAY <> 1
						),
					   CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1) <> 0
								 THEN (CASE WHEN ISNULL(SPRINT_EMPLOYEE.[HOURS],0) = 0 THEN ISNULL(ALERT_RCPT_DISMISSED.HOURS_ALLOWED,0) ELSE SPRINT_EMPLOYEE.[HOURS] END/(SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)) ELSE 0 END,

					   CASE WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE >= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= @START_DATE 
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE >= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
																	 AND WORK_DATE <= CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END)
																	 AND NON_TASK_DAY <> 1)
								 WHEN @START_DATE <= CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END AND @END_DATE <= CASE WHEN WEEK_END IS NULL THEN CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ELSE WEEK_END END THEN (SELECT COUNT(*) FROM #WORK_DAY
																	WHERE EMP_CODE = ALERT_RCPT_DISMISSED.EMP_CODE
																	 AND WORK_DATE >= CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ELSE WEEK_START END  )
																	 AND WORK_DATE <= @END_DATE
																	 AND NON_TASK_DAY <> 1) ELSE 0 END,
					   '',JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL, 0, 0, CASE WHEN SPRINT_EMPLOYEE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END
				FROM ALERT LEFT OUTER JOIN
					 ALERT_RCPT_DISMISSED ON ALERT.ALERT_ID = ALERT_RCPT_DISMISSED.ALERT_ID LEFT OUTER JOIN
					 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
					 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
					 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
					 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
					 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
					 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
					 LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT_DISMISSED.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT_DISMISSED.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
					 --LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
				WHERE IS_WORK_ITEM = 1 AND ALERT_LEVEL <> 'BRD' 
				--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  
				AND (ALERT_RCPT_DISMISSED.HOURS_ALLOWED <> 0 OR [HOURS] <> 0)
				AND ALERT.ALRT_NOTIFY_HDR_ID IS NOT NULL AND (CURRENT_NOTIFY = 1)
				--AND (ALERT.ASSIGN_COMPLETED IS NULL OR ALERT.ASSIGN_COMPLETED = 0) --AND (IWI.ALERT_ID IS NULL)	
		

		--UPDATE #ASSIGNMENTS
		--SET [HOURS] = CASE WHEN [HOURS] IS NULL AND HRS_ALLOWED IS NOT NULL THEN HRS_ALLOWED ELSE 0 END
		--WHERE [HOURS] IS NULL

		UPDATE #ASSIGNMENTS
		SET [HRS_POSTED] = ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
								   WHERE ET.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND ETD.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND EMP_DATE < @START_DATE
								   GROUP BY ET.EMP_CODE),0)

		WHERE WEEKLY = 1

		UPDATE #ASSIGNMENTS
		SET [HRS_POSTED] = ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
								   WHERE ET.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND ETD.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND EMP_DATE < @START_DATE--AND EMP_DATE BETWEEN WEEK_START AND WEEK_END
								   GROUP BY ET.EMP_CODE),0)

		WHERE WEEKLY = 0		  
		
				
		--SELECT * FROM #WORK_DAY WHERE EMP_CODE = 'kcard'
		--SELECT * FROM #JOBS --WHERE EMP_CODE = 'westc'
		--SELECT * FROM #ASSIGNMENTS WHERE EMP_CODE = 'ama'


		 
 --GET JOBS LIST FOR DRILL DOWN	
SELECT @sql = ' INSERT INTO #MY_DATA
        SELECT *, 00.000000, 0 ,0,0,0,00.000000,00.000000,00.000000,00.000000,00.000000,00.000000,0,00.000000,00.000000,NULL,NULL,0,0,0,NULL,0,0,99 FROM
        (SELECT V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, V_JOB_TRAFFIC_DET.FNC_CODE, V_JOB_TRAFFIC_DET.FNC_EST, V_JOB_TRAFFIC_DET.TASK_DESCRIPTION, JOB_COMPONENT.JOB_COMP_DESC,
	        CONVERT(Date,CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END) AS TASK_START_DATE, CONVERT(Date,CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND V_JOB_TRAFFIC_DET.JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END) AS JOB_REVISED_DATE, JOB_COMPONENT.JOB_FIRST_USE_DATE, V_JOB_TRAFFIC_DET.EMP_CODE,
	        JOB_LOG.JOB_DESC, JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE,'''' AS CL_NAME, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE, CASE WHEN V_JOB_TRAFFIC_DET.TASK_START_DATE IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) END AS SORT,
	        CASE WHEN SUM(SE.[HOURS]) > 0 THEN SUM(SE.[HOURS]) ELSE SUM(V_JOB_TRAFFIC_DET.JOB_HRS) END AS JOB_HRS, V_JOB_TRAFFIC_DET.SEQ_NBR, ISNULL(EMPLOYEE.EMP_FNAME+'' '','''')+ISNULL(EMPLOYEE.EMP_MI+''. '','''')+ISNULL(EMPLOYEE.EMP_LNAME,'''') AS EMP_FML_NAME, ''T'' AS REC_TYPE, -1 AS NON_TASK_ID, TRAFFIC.TRF_DESCRIPTION, EMPLOYEE.DP_TM_CODE, EMPLOYEE.DEF_TRF_ROLE,CASE WHEN SE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END AS WEEKLY'

        SELECT @sql_from = ' FROM JOB_COMPONENT 
        INNER JOIN JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
        INNER JOIN V_JOB_TRAFFIC_DET ON JOB_COMPONENT.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND JOB_COMPONENT.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR 
        INNER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN EMPLOYEE ON V_JOB_TRAFFIC_DET.EMP_CODE = EMPLOYEE.EMP_CODE INNER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
		LEFT OUTER JOIN ALERT ON ALERT.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER AND ALERT.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR AND ALERT.TASK_SEQ_NBR = V_JOB_TRAFFIC_DET.SEQ_NBR AND IS_WORK_ITEM = 1 AND ALERT.ALERT_LEVEL <> ''PST''
		LEFT OUTER JOIN SPRINT_EMPLOYEE SE ON ALERT.ALERT_ID = SE.ALERT_ID AND V_JOB_TRAFFIC_DET.EMP_CODE = SE.EMP_CODE AND SE.[HOURS] > 0'

        --SELECT @sql_where = ' WHERE 1 = 1 AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)  AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL)'
		SELECT @sql_where = ' WHERE 1 = 1 '

        IF @Restrictions > 0	
	        BEGIN
	          SELECT @sql_from = @sql_from + ' INNER JOIN SEC_CLIENT ON JOB_LOG.CL_CODE = SEC_CLIENT.CL_CODE AND JOB_LOG.DIV_CODE = SEC_CLIENT.DIV_CODE AND JOB_LOG.PRD_CODE = SEC_CLIENT.PRD_CODE '

	          SELECT @sql_where = @sql_where + ' AND UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''') AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
	        END

        IF @RestrictionsEmp > 0 
	        BEGIN
	          SELECT @sql_from = @sql_from + ' INNER JOIN SEC_EMP ON V_JOB_TRAFFIC_DET.EMP_CODE = SEC_EMP.EMP_CODE '
	          SELECT @sql_where = @sql_where + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''')'
	        END
					
		IF @RestrictionsOffice > 0
		BEGIN
			SET @sql_from = @sql_from  + ' INNER JOIN EMP_OFFICE ON JOB_LOG.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
		END

     --   IF @ROLES <> ''
	    --    BEGIN
			  --SELECT @sql_from = @sql_from + '
				 --  LEFT OUTER JOIN EMP_TRAFFIC_ROLE  ON V_JOB_TRAFFIC_DET.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE '
			  --SELECT @sql_where = @sql_where + ' AND (EMP_TRAFFIC_ROLE.ROLE_CODE IN ('''+ @ROLES +''')) ' 	
	    --    END
       
        IF @EMP_CODE  <> '' AND @EMP_CODE <> '%'
	        SELECT @sql_where = @sql_where + ' AND V_JOB_TRAFFIC_DET.EMP_CODE = '''+ @EMP_CODE + ''''
      --  IF @EMP_LIST  <> '' AND (@EMP_CODE = '%' OR @EMP_CODE = '')
		    --BEGIN
			   -- SELECT @sql_where = @sql_where + ' AND V_JOB_TRAFFIC_DET.EMP_CODE IN ((SELECT * from dbo.udf_split_list('''+ @EMP_LIST +''', '',''))) '
		    --END
		--IF @DEPTS <> ''
		--BEGIN
		--	SELECT @sql_where = @sql_where + ' AND (EMPLOYEE.DP_TM_CODE IN('''+ @DEPTS +''')) '
		--END
		--IF @Offices <> ''
		--BEGIN
		--	SELECT @sql_where = @sql_where + ' AND (EMPLOYEE.OFFICE_CODE IN('''+ @Offices +''')) '
		--END
	    

        SELECT @sql = @sql + @sql_from + @sql_where
        SELECT @sql = @sql + ' GROUP BY V_JOB_TRAFFIC_DET.JOB_NUMBER, V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, V_JOB_TRAFFIC_DET.SEQ_NBR, V_JOB_TRAFFIC_DET.FNC_CODE, V_JOB_TRAFFIC_DET.FNC_EST, V_JOB_TRAFFIC_DET.TASK_DESCRIPTION, JOB_COMPONENT.JOB_COMP_DESC,
        V_JOB_TRAFFIC_DET.TASK_START_DATE,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE,CASE WHEN WEEK_START IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) WHEN WEEK_START IS NOT NULL AND V_JOB_TRAFFIC_DET.TASK_START_DATE > WEEK_START THEN CONVERT(Date,V_JOB_TRAFFIC_DET.TASK_START_DATE) ELSE WEEK_START END, CASE WHEN WEEK_END IS NULL THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) WHEN WEEK_END IS NOT NULL AND V_JOB_TRAFFIC_DET.JOB_REVISED_DATE < WEEK_END THEN CONVERT(Date,V_JOB_TRAFFIC_DET.JOB_REVISED_DATE) ELSE WEEK_END END, JOB_COMPONENT.JOB_FIRST_USE_DATE, V_JOB_TRAFFIC_DET.EMP_CODE,
        JOB_LOG.JOB_DESC, JOB_LOG.OFFICE_CODE, JOB_LOG.CL_CODE, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, TRAFFIC.TRF_DESCRIPTION, EMPLOYEE.DP_TM_CODE, EMPLOYEE.DEF_TRF_ROLE,CASE WHEN SE.WEEK_START IS NOT NULL THEN 1 ELSE 0 END '
	-- HOLIDAYS:
        SELECT @sql2 = ' UNION ALL
	        SELECT JOB_NUMBER, JOB_COMPONENT_NBR,  FNC_CODE,'''', NON_TASK_DESC AS TASK_DESCRIPTION, '''' AS JOB_COMP_DESC, CASE WHEN ALL_DAY = 1 THEN START_DATE ELSE (STR(DATEPART(month, START_DATE)) + ''/'' + STR(DATEPART(day, START_DATE)) + ''/'' + STR(DATEPART(year, START_DATE)) + '' '' + STR(DATEPART(hour, START_TIME)) + '':'' + STR(DATEPART(minute, START_TIME)) + '':'' + STR(DATEPART(second, START_TIME))) END AS TASK_START_DATE,
		        CASE WHEN ALL_DAY = 1 THEN END_DATE ELSE (STR(DATEPART(month, END_DATE)) + ''/'' + STR(DATEPART(day, END_DATE)) + ''/'' + STR(DATEPART(year, END_DATE)) + '' '' + STR(DATEPART(hour, END_TIME)) + '':'' + STR(DATEPART(minute, END_TIME)) + '':'' + STR(DATEPART(second, END_TIME))) END AS JOB_REVISED_DATE, NULL, 
		        EMP_NON_TASKS.EMP_CODE, '''' AS JOB_DESC, '''' AS OFFICE_CODE, '''' AS CL_CODE,'''' AS CL_NAME, '''' AS DIV_CODE, '''' AS PRD_CODE, CASE WHEN ALL_DAY = 1 THEN START_DATE ELSE (STR(DATEPART(month, START_DATE)) + ''/'' + STR(DATEPART(day, START_DATE)) + ''/'' + STR(DATEPART(year, START_DATE)) + '' '' + STR(DATEPART(hour, START_TIME)) + '':'' + STR(DATEPART(minute, START_TIME)) + '':'' + STR(DATEPART(second, START_TIME))) END AS SORT,
		        HOURS AS JOB_HRS, -1 AS SEQ_NBR, ISNULL(EMPLOYEE.EMP_FNAME+'' '','''')+ISNULL(EMPLOYEE.EMP_MI+''. '','''')+ISNULL(EMPLOYEE.EMP_LNAME,'''') AS EMP_FML_NAME, ''H'' AS REC_TYPE, NON_TASK_ID,NULL, NULL,NULL,0 AS WEEKLY
	        FROM EMP_NON_TASKS LEFT OUTER JOIN EMPLOYEE ON EMP_NON_TASKS.EMP_CODE = EMPLOYEE.EMP_CODE '
       SELECT @sql2 = @sql2 + ' WHERE (START_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + '''' 
        SELECT @sql2 = @sql2 + ' OR END_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + ''')' 
	    SELECT @sql2 = @sql2 + '    AND TYPE = ''H''			
        UNION ALL SELECT EMP_NON_TASKS.JOB_NUMBER, EMP_NON_TASKS.JOB_COMPONENT_NBR, EMP_NON_TASKS.FNC_CODE,'''', EMP_NON_TASKS.NON_TASK_DESC AS TASK_DESCRIPTION, ISNULL(JC.JOB_COMP_DESC,'''') AS JOB_COMP_DESC, 
	        CASE WHEN EMP_NON_TASKS.ALL_DAY = 1 THEN EMP_NON_TASKS.START_DATE ELSE (STR(DATEPART(month, EMP_NON_TASKS.START_DATE)) + ''/'' + STR(DATEPART(day, EMP_NON_TASKS.START_DATE)) + ''/'' + STR(DATEPART(year, EMP_NON_TASKS.START_DATE)) + '' '' + STR(DATEPART(hour, EMP_NON_TASKS.START_TIME)) + '':'' + STR(DATEPART(minute, EMP_NON_TASKS.START_TIME)) + '':'' + STR(DATEPART(second, EMP_NON_TASKS.START_TIME))) END AS TASK_START_DATE,
	        CASE WHEN EMP_NON_TASKS.ALL_DAY = 1 THEN EMP_NON_TASKS.END_DATE ELSE (STR(DATEPART(month, EMP_NON_TASKS.END_DATE)) + ''/'' + STR(DATEPART(day, EMP_NON_TASKS.END_DATE)) + ''/'' + STR(DATEPART(year, EMP_NON_TASKS.END_DATE)) + '' '' + STR(DATEPART(hour, EMP_NON_TASKS.END_TIME)) + '':'' + STR(DATEPART(minute, EMP_NON_TASKS.END_TIME)) + '':'' + STR(DATEPART(second, EMP_NON_TASKS.END_TIME))) END AS JOB_REVISED_DATE, NULL,
	        EMP_NON_TASKS_EMPS.EMP_CODE, '''' AS JOB_DESC, ISNULL(JL.OFFICE_CODE,'''') AS OFFICE_CODE, ISNULL(JL.CL_CODE,'''') AS CL_CODE,'''' AS CL_NAME, ISNULL(JL.DIV_CODE,'''') AS DIV_CODE, ISNULL(JL.PRD_CODE,'''') AS PRD_CODE,
	        CASE WHEN EMP_NON_TASKS.ALL_DAY = 1 THEN EMP_NON_TASKS.START_DATE ELSE (STR(DATEPART(month, EMP_NON_TASKS.START_DATE)) + ''/'' + STR(DATEPART(day, EMP_NON_TASKS.START_DATE)) + ''/'' + STR(DATEPART(year, EMP_NON_TASKS.START_DATE)) + '' '' + STR(DATEPART(hour, EMP_NON_TASKS.START_TIME)) + '':'' + STR(DATEPART(minute, EMP_NON_TASKS.START_TIME)) + '':'' + STR(DATEPART(second, EMP_NON_TASKS.START_TIME))) END AS SORT,
	        EMP_NON_TASKS.HOURS AS JOB_HRS, -1 AS SEQ_NBR, ISNULL(EMPLOYEE.EMP_FNAME+'' '','''')+ISNULL(EMPLOYEE.EMP_MI+''. '','''')+ISNULL(EMPLOYEE.EMP_LNAME,'''') AS EMP_FML_NAME, CASE WHEN EMP_NON_TASKS.ALL_DAY = 1 AND ISNULL(TIME_CATEGORY.VAC_SICK_FLAG,0) = 0 THEN ''ADA'' WHEN EMP_NON_TASKS.ALL_DAY = 1 AND ISNULL(TIME_CATEGORY.VAC_SICK_FLAG,0) > 0 THEN ''ADHO'' 
				 WHEN ISNULL(TIME_CATEGORY.VAC_SICK_FLAG,0) > 0 THEN ''AHO'' ELSE ''A'' END AS REC_TYPE, EMP_NON_TASKS.NON_TASK_ID,NULL, ISNULL(JC.DP_TM_CODE,'''') AS DP_TM_CODE,NULL,0 AS WEEKLY
        FROM  EMP_NON_TASKS LEFT OUTER JOIN EMP_NON_TASKS_EMPS ON EMP_NON_TASKS.NON_TASK_ID = EMP_NON_TASKS_EMPS.NON_TASK_ID INNER JOIN EMPLOYEE ON EMP_NON_TASKS_EMPS.EMP_CODE = EMPLOYEE.EMP_CODE LEFT OUTER JOIN TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY LEFT OUTER JOIN 
			  JOB_COMPONENT JC ON JC.JOB_NUMBER = EMP_NON_TASKS.JOB_NUMBER AND JC.JOB_COMPONENT_NBR = EMP_NON_TASKS.JOB_COMPONENT_NBR LEFT OUTER JOIN JOB_LOG JL ON JL.JOB_NUMBER = EMP_NON_TASKS.JOB_NUMBER' 
        IF @RestrictionsEmp > 0 
              SELECT @sql2 = @sql2 + ' INNER JOIN SEC_EMP ON EMP_NON_TASKS_EMPS.EMP_CODE = SEC_EMP.EMP_CODE '
		IF @RestrictionsOffice > 0
		BEGIN
			SET @sql2 = @sql2  + ' INNER JOIN EMP_OFFICE ON (JL.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE OR JL.OFFICE_CODE IS NULL) AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
		END
        SELECT @sql2 = @sql2 + ' WHERE '
        SELECT @sql2 = @sql2 + ' (EMP_NON_TASKS.START_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + '''' 
        SELECT @sql2 = @sql2 + ' OR EMP_NON_TASKS.END_DATE BETWEEN ''' + CAST(@START_DATE AS VARCHAR(12)) + ''' AND  ''' + CAST(@END_DATE AS VARCHAR(12)) + ''')' 
        SELECT @sql2 = @sql2 + ' AND (EMP_NON_TASKS.TYPE = ''A'' OR EMP_NON_TASKS.TYPE = ''M'' OR EMP_NON_TASKS.TYPE = ''C'' OR EMP_NON_TASKS.TYPE = ''TD'' OR EMP_NON_TASKS.TYPE = ''EL'') AND EMPLOYEE.EMP_TERM_DATE IS NULL' 
        IF @EMP_CODE  <> '' AND @EMP_CODE <> '%'
	        SELECT @sql2 = @sql2 + ' AND EMP_NON_TASKS_EMPS.EMP_CODE = ''' + @EMP_CODE + '''' 

      --  IF @EMP_LIST  <> '' AND (@EMP_CODE = '%' OR @EMP_CODE = '')
		    --BEGIN
			   -- SELECT @sql2 = @sql2 + ' AND EMP_NON_TASKS_EMPS.EMP_CODE IN ((SELECT * from dbo.udf_split_list('''+ @EMP_LIST +''', '',''))) '
		    --END
		--IF @DEPTS <> ''
		--BEGIN
		--	SELECT @sql2 = @sql2 + ' AND (EMPLOYEE.DP_TM_CODE IN('''+ @DEPTS +''')) '
		--END
		--IF @Offices <> ''
		--BEGIN
		--	SELECT @sql2 = @sql2 + ' AND (EMPLOYEE.OFFICE_CODE IN('''+ @Offices +''')) '
		--END
        IF @RestrictionsEmp > 0 
          SELECT @sql2 = @sql2 + ' AND UPPER(SEC_EMP.USER_ID) = UPPER(''' + @UserID + ''')'
        SELECT @sql2 = @sql2 + ' ) AS A'	

        --SELECT @sql = @sql + ' ORDER BY SORT '	

        PRINT (@sql + @sql2)
        EXEC(@sql + @sql2)
        		      
        --SELECT * FROM #MY_DATA --WHERE JOB_NUMBER = 324

        UPDATE #MY_DATA SET TASK_TOTAL_WORKING_DAYS = 
			CASE WHEN (SELECT COUNT(WORKDAY_COUNT) FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) > 1 
		THEN (SELECT DISTINCT TOP 1 WORKDAY_COUNT FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) 
		ELSE (SELECT DISTINCT WORKDAY_COUNT FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) END

		UPDATE #MY_DATA SET HOURS_PER_DAY = 
		CASE WHEN (SELECT COUNT(HRS_PER_DAY) FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
					#MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND 
					#MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND #JOBS.TASK_START_DATE = #MY_DATA.TASK_START_DATE AND #JOBS.JOB_REVISED_DATE = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) > 1
			THEN (SELECT DISTINCT TOP 1 HRS_PER_DAY FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
					#MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND 
					#MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND #JOBS.TASK_START_DATE = #MY_DATA.TASK_START_DATE AND #JOBS.JOB_REVISED_DATE = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) 
			ELSE (SELECT DISTINCT HRS_PER_DAY FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
					#MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND 
					#MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND #JOBS.TASK_START_DATE = #MY_DATA.TASK_START_DATE AND #JOBS.JOB_REVISED_DATE = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) END
        
        UPDATE #MY_DATA SET HOURS_PER_DAY = 
			CASE WHEN (SELECT COUNT(HRS_PER_DAY) FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
						#MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND WEEKLY = 0) > 1
			THEN (SELECT DISTINCT TOP 1 HRS_PER_DAY FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
					#MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND WEEKLY = 0) 
			ELSE (SELECT DISTINCT HRS_PER_DAY FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
					#MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND WEEKLY = 0) END

		UPDATE #MY_DATA SET HRS_PER_DAY_WITH_ASSN =  
			CASE WHEN (SELECT COUNT(HRS_PER_DAY_WITH_ASSN) FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) > 1
		 THEN (SELECT DISTINCT TOP 1 HRS_PER_DAY_WITH_ASSN FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) 
		 ELSE (SELECT DISTINCT HRS_PER_DAY_WITH_ASSN FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) END
        
        UPDATE #MY_DATA SET ADJ_JOB_HRS =  
			CASE WHEN (SELECT COUNT((HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE))
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND #JOBS.TASK_START_DATE = #MY_DATA.TASK_START_DATE AND #JOBS.JOB_REVISED_DATE = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) > 1 
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND #JOBS.TASK_START_DATE = #MY_DATA.TASK_START_DATE AND #JOBS.JOB_REVISED_DATE = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE AND #JOBS.TASK_START_DATE = #MY_DATA.TASK_START_DATE AND #JOBS.JOB_REVISED_DATE = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) END
        
        UPDATE #MY_DATA SET ADJ_JOB_HRS =  
			CASE WHEN (SELECT COUNT((HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE))
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) > 1 
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) END
		WHERE ADJ_JOB_HRS IS NULL

		UPDATE #MY_DATA SET ADJ_JOB_HRS_WITH_ASSN =  
			CASE WHEN (SELECT DISTINCT COUNT((HRS_PER_DAY_WITH_ASSN * WORKDAY_COUNT_IN_RANGE_WITH_ASSN))
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) > 1
		 THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY_WITH_ASSN * WORKDAY_COUNT_IN_RANGE_WITH_ASSN)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE)
		  ELSE (SELECT DISTINCT (HRS_PER_DAY_WITH_ASSN * WORKDAY_COUNT_IN_RANGE_WITH_ASSN)
        FROM #JOBS WHERE #MY_DATA.JOB_NUMBER = #JOBS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #JOBS.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = #JOBS.SEQ_NBR AND #MY_DATA.EMP_CODE = #JOBS.EMP_CODE) END

		UPDATE #MY_DATA SET STD_HRS_AVAIL = (SELECT SUM(STD_HRS)
        FROM #WORK_DAY WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
		AND WORK_DATE >= CONVERT(Date,#MY_DATA.TASK_START_DATE  )
		AND WORK_DATE <= CONVERT(Date,#MY_DATA.JOB_REVISED_DATE))
		--SELECT * FROM #MY_DATA
		UPDATE #MY_DATA
		SET STD_HRS_AVAIL = ISNULL(STD_HRS_AVAIL,0.00) - ISNULL((SELECT ISNULL(SUM(EMP_NON_TASKS.HOURS),0.00)
		FROM EMP_NON_TASKS 
		WHERE EMP_NON_TASKS.[START_DATE] >= CONVERT(Date,#MY_DATA.TASK_START_DATE)
		  AND EMP_NON_TASKS.[START_DATE] <= CONVERT(Date,#MY_DATA.JOB_REVISED_DATE) AND
		TYPE = 'H' AND ALL_DAY = 0),0)
		

		UPDATE #MY_DATA SET RED_FLAG = 1
			WHERE REC_TYPE = 'T' AND @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE 
			AND HOURS_PER_DAY = 0 AND STD_HRS_AVAIL > 0 AND HRS_PER_DAY_WITH_ASSN > 0

		UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = (SELECT SUM(HRS_PER_DAY_WITH_ASSN) FROM #MY_DATA
		WHERE #EMP_AVAILABILITY.[DATE] BETWEEN #MY_DATA.TASK_START_DATE AND  CONVERT(
				       DATETIME,
				       CONVERT(CHAR(10), DATEPART(yyyy, #MY_DATA.JOB_REVISED_DATE), 101) 
				       +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(mm, #MY_DATA.JOB_REVISED_DATE), 101) +
				       '-' +
				       CONVERT(CHAR(10), DATEPART(dd, #MY_DATA.JOB_REVISED_DATE), 101) +
				       ' 23:59:00' 
				       ) AND #MY_DATA.RED_FLAG = 1 AND #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)
        
        UPDATE #MY_DATA SET JOB_HRS = (SELECT CASE WHEN @START_DATE >= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN
										 (SELECT SUM(STD_HRS) FROM #WORK_DAY
													WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
													 AND WORK_DATE >= @START_DATE 
													 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
													 )
				 WHEN @START_DATE >= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT SUM(STD_HRS) FROM #WORK_DAY
													WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
													 AND WORK_DATE >= @START_DATE 
													 AND WORK_DATE <= @END_DATE
													 )
				 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE >= JOB_REVISED_DATE THEN (SELECT SUM(STD_HRS) FROM #WORK_DAY
													WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
													 AND WORK_DATE >= #MY_DATA.TASK_START_DATE  
													 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
													 )
				 WHEN @START_DATE <= TASK_START_DATE AND @END_DATE <= JOB_REVISED_DATE THEN (SELECT SUM(STD_HRS) FROM #WORK_DAY
													WHERE #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
													 AND WORK_DATE >= #MY_DATA.TASK_START_DATE  
													 AND WORK_DATE <= @END_DATE
													 ) ELSE JOB_HRS END)
			WHERE REC_TYPE = 'ADHO' OR REC_TYPE = 'ADA'


			
	UPDATE #MY_DATA SET TASK_BB_WORKING_DAYS = 
			(SELECT COUNT(*) FROM #WORK_DAY
			 WHERE EMP_CODE = #MY_DATA.EMP_CODE
			 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
			 AND WORK_DATE <= CASE WHEN @START_DATE < JOB_REVISED_DATE THEN @START_DATE ELSE JOB_REVISED_DATE END
			 AND NON_TASK_DAY <> 1)
	WHERE REC_TYPE = 'T' AND TASK_START_DATE < @START_DATE AND JOB_REVISED_DATE < @START_DATE

	UPDATE #MY_DATA SET TASK_BB_WORKING_DAYS = 
			(SELECT COUNT(*) FROM #WORK_DAY
			 WHERE EMP_CODE = #MY_DATA.EMP_CODE
			 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
			 AND WORK_DATE < CASE WHEN @START_DATE < JOB_REVISED_DATE THEN @START_DATE ELSE JOB_REVISED_DATE END
			 AND NON_TASK_DAY <> 1)
	WHERE REC_TYPE = 'T' AND TASK_START_DATE < @START_DATE AND JOB_REVISED_DATE >= @START_DATE

	UPDATE #MY_DATA SET BB_HOURS_PER_DAY = 
			CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (JOB_HRS/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)) ELSE 0 END
	WHERE REC_TYPE = 'T'
			
			
	SET @sql = ''
        
	SET @sql = 'INSERT INTO #MY_DATA
	SELECT A.JOB_NUMBER, A.JOB_COMPONENT_NBR,'''','''',SUBJECT,A.JOB_COMP_DESC,
	CASE WHEN WEEK_START IS NULL THEN A.[START_DATE] 
	     WHEN WEEKLY = 1 AND WEEK_START IS NOT NULL AND A.[START_DATE] > WEEK_START THEN A.[START_DATE] ELSE WEEK_START END,
	CASE WHEN WEEK_END IS NULL THEN A.DUE_DATE 
	     WHEN WEEKLY = 1 AND WEEK_END IS NOT NULL AND A.DUE_DATE < WEEK_END THEN A.DUE_DATE ELSE WEEK_END END,NULL,A.EMP_CODE,JOB_DESC,A.OFFICE_CODE,A.CL_CODE,'''' AS CL_NAME,A.DIV_CODE,A.PRD_CODE,NULL,[HOURS],
	SEQ_NBR, NULL,''AS'',NULL,TRF_DESCRIPTION,NULL,NULL,WEEKLY,0,0,0,0,0,0,0,0,0,0,0,0,0,0,A.ALERT_ID,A.ALERT_SEQ_NBR,0,A.HRS_POSTED,0,NULL,0,0,99
	FROM #ASSIGNMENTS A LEFT OUTER JOIN ALERT ON ALERT.ALERT_ID = A.ALERT_ID WHERE 1=1'

	IF @EMP_CODE  <> '' AND @EMP_CODE <> '%'
	    SELECT @sql = @sql + ' AND A.EMP_CODE = ''' + @EMP_CODE + '''' 

  --  IF @EMP_LIST  <> '' AND (@EMP_CODE = '%' OR @EMP_CODE = '')
		--BEGIN
		--    SELECT @sql = @sql + ' AND A.EMP_CODE IN ((SELECT * from dbo.udf_split_list('''+ @EMP_LIST +''', '',''))) '
		--END
	
		--IF @Offices <> ''
		--BEGIN
		--	SELECT @sql = @sql + ' AND (A.OFFICE_CODE IN ('''+ @Offices +''')) '
		--END
    PRINT(@sql)    
	--EXEC(@sql)

	UPDATE #MY_DATA
	SET DP_TM_CODE = (SELECT DP_TM_CODE FROM EMPLOYEE WHERE EMPLOYEE.EMP_CODE = #MY_DATA.EMP_CODE)
	WHERE DP_TM_CODE IS NULL

	UPDATE #MY_DATA
	SET DEF_TRF_CODE = (SELECT DEF_TRF_ROLE FROM EMPLOYEE WHERE EMPLOYEE.EMP_CODE = #MY_DATA.EMP_CODE)
	WHERE DEF_TRF_CODE IS NULL

	--SELECT * FROM #MY_DATA

	UPDATE #MY_DATA SET TASK_TOTAL_WORKING_DAYS = 
			CASE WHEN (SELECT COUNT(WORKDAY_COUNT) FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) > 1 
		THEN (SELECT DISTINCT TOP 1 WORKDAY_COUNT FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) 
		ELSE (SELECT DISTINCT WORKDAY_COUNT FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) END
	WHERE REC_TYPE = 'AS'

	UPDATE #MY_DATA SET TASK_TOTAL_WORKING_DAYS = 
			CASE WHEN (SELECT COUNT(WORKDAY_COUNT) FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) > 1 
		THEN (SELECT DISTINCT TOP 1 WORKDAY_COUNT FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) 
		ELSE (SELECT DISTINCT WORKDAY_COUNT FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) END
	WHERE REC_TYPE = 'AS'

	/*****************/
	UPDATE #MY_DATA SET HOURS_PER_DAY = 
		CASE WHEN (SELECT COUNT(HRS_PER_DAY) FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
					#MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND 
					#MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) > 1
		THEN (SELECT DISTINCT TOP 1 HRS_PER_DAY FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
				#MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND 
				#MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) 
		ELSE (SELECT DISTINCT HRS_PER_DAY FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
				#MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND 
				#MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) END
	WHERE REC_TYPE = 'AS'	

	UPDATE #MY_DATA SET HOURS_PER_DAY = 
		CASE WHEN (SELECT COUNT(HRS_PER_DAY) FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
					#MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) > 1
		THEN (SELECT DISTINCT TOP 1 HRS_PER_DAY FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
				#MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) 
		ELSE (SELECT DISTINCT HRS_PER_DAY FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
				#MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) END
	WHERE REC_TYPE = 'AS'		
	/*****************/

	UPDATE #MY_DATA SET ADJ_JOB_HRS =  
			CASE WHEN (SELECT COUNT((HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE))
       FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) > 1
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND #ASSIGNMENTS.WEEK_START = #MY_DATA.TASK_START_DATE AND #ASSIGNMENTS.WEEK_END = #MY_DATA.JOB_REVISED_DATE AND WEEKLY = 1) END
	WHERE REC_TYPE = 'AS'

	UPDATE #MY_DATA SET ADJ_JOB_HRS =  
			CASE WHEN (SELECT COUNT((HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE))
       FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) > 1
		THEN (SELECT DISTINCT TOP 1 (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) 
		ELSE (SELECT DISTINCT (HRS_PER_DAY * WORKDAY_COUNT_IN_RANGE)
        FROM #ASSIGNMENTS WHERE #MY_DATA.JOB_NUMBER = #ASSIGNMENTS.JOB_NUMBER AND
        #MY_DATA.JOB_COMPONENT_NBR = #ASSIGNMENTS.JOB_COMPONENT_NBR AND #MY_DATA.ALERT_ID = #ASSIGNMENTS.ALERT_ID AND #MY_DATA.EMP_CODE = #ASSIGNMENTS.EMP_CODE AND WEEKLY = 0) END
	WHERE REC_TYPE = 'AS' AND ADJ_JOB_HRS IS NULL

	--SELECT * FROM #WORK_DAY WHERE EMP_CODE = 'sam'

	UPDATE #MY_DATA SET TASK_BB_WORKING_DAYS = 
			(SELECT COUNT(*) FROM #WORK_DAY
			 WHERE EMP_CODE = #MY_DATA.EMP_CODE
			 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
			 AND WORK_DATE <= CASE WHEN @START_DATE < JOB_REVISED_DATE THEN @START_DATE ELSE JOB_REVISED_DATE END
			 AND NON_TASK_DAY <> 1)
	WHERE REC_TYPE = 'AS'  AND TASK_START_DATE < @START_DATE AND JOB_REVISED_DATE < @START_DATE
	
	UPDATE #MY_DATA SET TASK_BB_WORKING_DAYS = 
			(SELECT COUNT(*) FROM #WORK_DAY
			 WHERE EMP_CODE = #MY_DATA.EMP_CODE
			 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
			 AND WORK_DATE < CASE WHEN @START_DATE < JOB_REVISED_DATE THEN @START_DATE ELSE JOB_REVISED_DATE END
			 AND NON_TASK_DAY <> 1)
	WHERE REC_TYPE = 'AS'  AND TASK_START_DATE < @START_DATE AND JOB_REVISED_DATE >= @START_DATE 

	UPDATE #MY_DATA SET BB_HOURS_PER_DAY = 
			CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (JOB_HRS/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= CONVERT(Date,TASK_START_DATE) 
															 AND WORK_DATE <= CONVERT(Date,JOB_REVISED_DATE)
															 AND NON_TASK_DAY <> 1)) ELSE 0 END
	WHERE REC_TYPE = 'AS'
	
	--SELECT * FROM #MY_DATA WHERE JOB_NUMBER = 328
	  UPDATE #MY_DATA
	  SET ALERT_ID = (SELECT ALERT_ID FROM ALERT A WHERE #MY_DATA.JOB_NUMBER = A.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = A.TASK_SEQ_NBR AND REC_TYPE = 'T' AND A.ALERT_LEVEL = 'BRD')
	  WHERE ALERT_ID IS NULL --AND JOB_NUMBER IN (321)
        
	  UPDATE #MY_DATA
	  SET HRS_POSTED = (ISNULL((SELECT SUM(EMP_HOURS) 
										FROM EMP_TIME_DTL AS ETD INNER JOIN 
											 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
											 ALERT AS A ON A.ALERT_ID = ETD.ALERT_ID
									   WHERE ET.EMP_CODE = #MY_DATA.EMP_CODE AND ETD.ALERT_ID IS NOT NULL AND EMP_DATE < @START_DATE AND #MY_DATA.JOB_NUMBER = A.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND #MY_DATA.SEQ_NBR = A.TASK_SEQ_NBR
									   GROUP BY ET.EMP_CODE, A.JOB_NUMBER,A.JOB_COMPONENT_NBR),0)) 
	  WHERE #MY_DATA.REC_TYPE = 'T'
  
        
	  --UPDATE #MY_DATA
	  --SET HRS_POSTED = (ISNULL((SELECT SUM(EMP_HOURS) 
			--							FROM EMP_TIME_DTL AS ETD INNER JOIN 
			--							     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
			--						   WHERE ET.EMP_CODE = #MY_DATA.EMP_CODE AND ETD.ALERT_ID = #MY_DATA.ALERT_ID AND #MY_DATA.JOB_NUMBER = ETD.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = ETD.JOB_COMPONENT_NBR --AND #MY_DATA.FNC_CODE = ETD.FNC_CODE
			--						   GROUP BY ET.EMP_CODE, ETD.JOB_NUMBER,ETD.JOB_COMPONENT_NBR),0)) 
	  --WHERE #MY_DATA.ALERT_ID IS NOT NULL

	  --SELECT @START_DATE_MIN,@END_DATE_MAX

	  UPDATE #MY_DATA
	  SET HRS_BEGIN = TASK_BB_WORKING_DAYS * BB_HOURS_PER_DAY
	  WHERE TASK_BB_WORKING_DAYS > 0 AND BB_HOURS_PER_DAY > 0

	  UPDATE #MY_DATA
	  SET HRS_BEGIN = TASK_BB_WORKING_DAYS * BB_HOURS_PER_DAY
	  WHERE ((TASK_START_DATE >= @START_DATE_MIN AND JOB_REVISED_DATE <= @END_DATE_MAX) OR (TASK_START_DATE >= @START_DATE_MIN) AND (TASK_START_DATE <= @END_DATE_MAX) OR
				(JOB_REVISED_DATE >= @START_DATE_MIN) AND (JOB_REVISED_DATE <= @END_DATE_MAX))			
			AND TASK_BB_WORKING_DAYS > 0 AND BB_HOURS_PER_DAY > 0

	  UPDATE #MY_DATA
	  SET HRS_BEGIN = #MY_DATA.JOB_HRS
	  WHERE JOB_REVISED_DATE < @START_DATE_MIN

	  UPDATE #MY_DATA
	  SET HRS_BEGIN = #MY_DATA.JOB_HRS
	  WHERE TASK_START_DATE IS NULL AND JOB_REVISED_DATE IS NULL

	  --SELECT * FROM #MY_DATA ORDER BY TASK_START_DATE
        
	  UPDATE #MY_DATA
	  SET HRS_LEFT = CASE WHEN (HRS_BEGIN - HRS_POSTED) < 0 THEN 0 ELSE (HRS_BEGIN - HRS_POSTED) END --CASE WHEN ((CASE WHEN ISNULL(ADJ_JOB_HRS,0.00) > 0 THEN JOB_HRS - ISNULL(ADJ_JOB_HRS,0.00) ELSE JOB_HRS END) - HRS_POSTED) < 0 THEN 0 ELSE ((CASE WHEN ISNULL(ADJ_JOB_HRS,0.00) > 0 THEN JOB_HRS - ISNULL(ADJ_JOB_HRS,0.00) ELSE JOB_HRS END) - HRS_POSTED) END

	  UPDATE #MY_DATA
	  SET CL_NAME = (SELECT CL_NAME FROM CLIENT WHERE CLIENT.CL_CODE = #MY_DATA.CL_CODE)

	UPDATE #MY_DATA 
	SET SPRINT_ID = (SELECT SD.SPRINT_HDR_ID FROM SPRINT_DTL SD WHERE #MY_DATA.ALERT_ID = SD.ALERT_ID)

	UPDATE #MY_DATA
	SET TASK_TOTAL_WORKING_DAYS = (SELECT COUNT(*) FROM #WORK_DAY
									WHERE EMP_CODE = #MY_DATA.EMP_CODE
									 AND WORK_DATE >= #MY_DATA.TASK_START_DATE
									 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
									 AND NON_TASK_DAY <> 1
									)
	WHERE TASK_TOTAL_WORKING_DAYS IS NULL

	UPDATE #MY_DATA
	SET HOURS_PER_DAY = (CASE WHEN (SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= #MY_DATA.TASK_START_DATE
															 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
															 AND NON_TASK_DAY <> 1) <> 0
						 THEN (JOB_HRS/(SELECT COUNT(*) FROM #WORK_DAY
															WHERE EMP_CODE = #MY_DATA.EMP_CODE
															 AND WORK_DATE >= #MY_DATA.TASK_START_DATE
															 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
															 AND NON_TASK_DAY <> 1)) ELSE 0 END)
	WHERE HOURS_PER_DAY IS NULL

	UPDATE #MY_DATA
	SET TASK_TOTAL_WORKING_DAYS = 0, HOURS_PER_DAY = 0
	WHERE JOB_REVISED_DATE < @START_DATE
	
	--SELECT * FROM #MY_DATA 
	--POPULATE NON_TASKS
	INSERT INTO #NON_TASKS
	SELECT ente.EMP_CODE, ent.[START_DATE], ent.[END_DATE], ISNULL(SUM(ent.HOURS),0) AS SUM_HRS, TIME_CATEGORY.VAC_SICK_FLAG
	FROM EMP_NON_TASKS ent WITH(NOLOCK) LEFT OUTER JOIN
			TIME_CATEGORY WITH(NOLOCK) ON ent.CATEGORY = TIME_CATEGORY.CATEGORY 
			INNER JOIN dbo.EMP_NON_TASKS_EMPS ente ON ent.NON_TASK_ID = ente.NON_TASK_ID
	WHERE ((ALL_DAY IS NULL) OR ALL_DAY = 0) AND 
		  ((ent.[START_DATE] BETWEEN @START_DATE AND @END_DATE) OR (ent.[END_DATE] BETWEEN @START_DATE AND @END_DATE))
	GROUP BY ente.EMP_CODE, ent.[START_DATE], ent.[END_DATE], TIME_CATEGORY.VAC_SICK_FLAG
	   
	 --  SELECT * FROM #NON_TASKS
	--SELECT * FROM #EMP_AVAILABILITY 
		
		--Update #EMP_AVAILABILITY table 
		UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 
		(SELECT STD_HRS FROM #WORK_DAY
		WHERE CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) = #WORK_DAY.WORK_DATE 
		AND #EMP_AVAILABILITY.EMP_CODE = #WORK_DAY.EMP_CODE) --AND UPPER(USERID) = UPPER(@UserID))
		
		--Holidays
		 UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 0, 
					#EMP_AVAILABILITY.NOTE = EMP_NON_TASKS.NON_TASK_DESC, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 1
		FROM #EMP_AVAILABILITY INNER JOIN EMP_NON_TASKS WITH(NOLOCK) 
			ON CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) = EMP_NON_TASKS.START_DATE
		WHERE TYPE = 'H'
		AND ALL_DAY = 1
		AND 
		(
			[START_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
			OR [END_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
		)

		UPDATE #EMP_AVAILABILITY 
		SET #EMP_AVAILABILITY.STD_HRS_AVAIL = ISNULL(#EMP_AVAILABILITY.STD_HRS_AVAIL,0.00) - ISNULL(EMP_NON_TASKS.HOURS,0.00),
		#EMP_AVAILABILITY.NOTE = EMP_NON_TASKS.NON_TASK_DESC
		FROM #EMP_AVAILABILITY INNER JOIN EMP_NON_TASKS WITH(NOLOCK) ON 
		CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) = EMP_NON_TASKS.START_DATE
		WHERE TYPE = 'H' AND ALL_DAY = 0

		--Appointments
		UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = 		
		( SELECT
		ISNULL(SUM(HOURS),0.000000) AS SUM_HRS
		FROM         #NON_TASKS
		WHERE     (#NON_TASKS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) AND (#NON_TASKS.VAC_SICK_FLAG IN (1, 2, 3))
		AND
		(
			[START_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
			OR [END_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
		)), #EMP_AVAILABILITY.NOTE = 'Appointment'
		
		--ZERO OUT ALL-DAY (AND ALL DAY MULTI-DAY) APPOINTMENTS:
		UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = STD_HRS_AVAIL, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 2
		FROM EMP_NON_TASKS WITH(NOLOCK) INNER JOIN
								TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY 
									INNER JOIN dbo.EMP_NON_TASKS_EMPS ente ON EMP_NON_TASKS.NON_TASK_ID = ente.NON_TASK_ID
							INNER JOIN
								#EMP_AVAILABILITY WITH(NOLOCK) ON ente.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
		WHERE (TIME_CATEGORY.VAC_SICK_FLAG IN (1, 2, 3)) AND EMP_NON_TASKS.ALL_DAY = 1
		AND 
		(
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) <= DATEPART(dayofyear,END_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) <= DATEPART(yy,END_TIME)
			) 
			AND 
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) >= DATEPART(dayofyear,START_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) >= DATEPART(yy,START_TIME)
			)

		)
		;

		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = 		
		( 
			SELECT     ISNULL(SUM(HOURS),0.000000) AS SUM_HRS
			FROM       #NON_TASKS
			WHERE     (#NON_TASKS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) 
			AND 
			(
				[START_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
				OR [END_DATE] = CONVERT(DATETIME, convert (varchar, #EMP_AVAILABILITY.DATE,101),101) 
			)
			AND ((#NON_TASKS.VAC_SICK_FLAG NOT IN (1, 2, 3) OR #NON_TASKS.VAC_SICK_FLAG IS NULL ))
		)

		--ZERO OUT ALL-DAY (AND ALL DAY MULTI-DAY) APPOINTMENTS:
		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = STD_HRS_AVAIL, #EMP_AVAILABILITY.IS_FULL_DAY_OFF = 2
		FROM EMP_NON_TASKS WITH(NOLOCK) 
		INNER JOIN EMP_NON_TASKS_EMPS ON EMP_NON_TASKS.NON_TASK_ID = EMP_NON_TASKS_EMPS.NON_TASK_ID
		     LEFT OUTER JOIN
								TIME_CATEGORY WITH(NOLOCK) ON EMP_NON_TASKS.CATEGORY = TIME_CATEGORY.CATEGORY INNER JOIN
								#EMP_AVAILABILITY WITH(NOLOCK) ON EMP_NON_TASKS_EMPS.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
		WHERE (TIME_CATEGORY.VAC_SICK_FLAG NOT IN (1, 2, 3)) AND EMP_NON_TASKS.ALL_DAY = 1
		AND 
		(
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) <= DATEPART(dayofyear,END_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) <= DATEPART(yy,END_TIME)
			) 
			AND 
			(
				DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) >= DATEPART(dayofyear,START_TIME)
				AND DATEPART(yy,#EMP_AVAILABILITY.DATE) >= DATEPART(yy,START_TIME)
			)
		)
		;  

		--Events
		UPDATE #EMP_AVAILABILITY
		SET #EMP_AVAILABILITY.HRS_ASSIGNED_EVENT = 
		(
			SELECT     
				ISNULL(SUM(EVENT_TASK.HOURS_ALLOWED),0.000000) --AS SUM_EVENT_HOURS_ALLOWED, EVENT_TASK.EMP_CODE, 
				--CONVERT(SMALLDATETIME,CONVERT(VARCHAR(10),EVENT_TASK.START_TIME,101)) AS EVENT_DATE
			FROM         
				EVENT_TASK WITH (NOLOCK) INNER JOIN
				EMPLOYEE WITH (NOLOCK) ON EVENT_TASK.EMP_CODE  COLLATE SQL_Latin1_General_CP1_CS_AS = EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  INNER JOIN
				EVENT ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
				JOB_COMPONENT ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
				EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
				JOB_TRAFFIC ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
				JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
			WHERE
				--(JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) AND
				DATEPART(dayofyear,EVENT_TASK.START_TIME) = DATEPART(dayofyear,#EMP_AVAILABILITY.DATE) 
				AND DATEPART(yy,EVENT_TASK.START_TIME) = DATEPART(yy,#EMP_AVAILABILITY.DATE)
				AND #EMP_AVAILABILITY.EMP_CODE = EVENT_TASK.EMP_CODE
			GROUP BY 
				EVENT_TASK.EMP_CODE, CONVERT(SMALLDATETIME,CONVERT(VARCHAR(10),EVENT_TASK.START_TIME,101))
		)
		;
		
		--Update Assigned Task Hours
		UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = ISNULL(HRS_ASSIGNED_TASK,0.000000)
		         + (SELECT SUM(HRS_PER_DAY) FROM #JOBS 
					WHERE #EMP_AVAILABILITY.EMP_CODE = #JOBS.EMP_CODE AND 
					#EMP_AVAILABILITY.DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE					
						)
		WHERE STD_HRS_AVAIL IS NOT NULL AND #EMP_AVAILABILITY.IS_FULL_DAY_OFF IS NULL 

		

		--Update Assigment Hours
		UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_ASSIGN = (SELECT SUM(HRS_PER_DAY)
															FROM #ASSIGNMENTS A
															WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND 
															#EMP_AVAILABILITY.DATE BETWEEN CASE WHEN WEEK_START IS NULL THEN CASE WHEN A.[START_DATE] is NULL THEN A.[DUE_DATE] ELSE A.[START_DATE] END ELSE WEEK_START END AND CASE WHEN WEEK_END IS NULL THEN CASE WHEN A.DUE_DATE is NULL THEN A.[START_DATE] ELSE A.DUE_DATE END ELSE WEEK_END END
															)
		WHERE STD_HRS_AVAIL IS NOT NULL AND #EMP_AVAILABILITY.IS_FULL_DAY_OFF IS NULL 
		
		
       		
		--SELECT * FROM #JOBS WHERE EMP_CODE = 'chon'
		--ORDER BY EMP_CODE
		
		--SELECT * FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'ama'
		--SELECT * FROM #WORK_DAY --WHERE EMP_CODE = 'BIVONS'
		
		--CLEAN UP:
        UPDATE #EMP_AVAILABILITY SET STD_HRS_AVAIL = 0.000000 WHERE STD_HRS_AVAIL IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_USED_NON_TASK = 0.000000 WHERE HRS_USED_NON_TASK IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_AVAIL = ISNULL(STD_HRS_AVAIL,0.000000) - ISNULL(HRS_USED_NON_TASK,0.000000) - ISNULL(HRS_APPTS,0.000000);
        UPDATE #EMP_AVAILABILITY SET HRS_ASSIGNED_TASK = 0.000000 WHERE HRS_ASSIGNED_TASK IS NULL;
        UPDATE #EMP_AVAILABILITY SET HRS_BALANCE_AVAIL = ISNULL(HRS_AVAIL,0.000000) - ISNULL(HRS_ASSIGNED_TASK,0.000000);
		UPDATE #EMP_AVAILABILITY SET HRS_APPTS = 0.000000 WHERE HRS_APPTS IS NULL;

--        --TEST:
        --SELECT * FROM #EMP_AVAILABILITY WHERE EMP_CODE = 'ama';

				
        DECLARE
	        @NUM_DAYS INT,
	        @NUM_WEEKS INT,
	        @NUM_MONTHS INT,
	        @NUM_YEARS INT,
	        @NUM_EMPS INT,
	        @CALCULATED_START_DATE SMALLDATETIME, --SINCE WE FILTER OUT DAYS EMPS DON'T WORK, THE START/END PASSED IN ISN'T NECESSARILY THE START/END THAT GETS OUTPUT
	        @CALCULATED_END_DATE SMALLDATETIME
	        
--		--TEST:
--		SELECT * FROM #EMP_AVAILABILITY

	    --IF @SUMMARY_LEVEL BETWEEN 1 AND 5
	    --BEGIN
			--SELECT  
			--	@CALCULATED_START_DATE = MIN([DATE]),
			--	@CALCULATED_END_DATE = MAX([DATE]),
			--	@NUM_DAYS = COUNT(DISTINCT DAY_OF_YEAR),
			--	@NUM_WEEKS = COUNT(DISTINCT WEEK_OF_YEAR), 
			--	@NUM_MONTHS = COUNT(DISTINCT MONTH_OF_YEAR),
			--	@NUM_YEARS = COUNT(DISTINCT [YEAR]),
			--	@NUM_EMPS = COUNT(DISTINCT EMP_CODE)
			--FROM 
			--	#EMP_AVAILABILITY;
	    	
			--SELECT 
			--	@START_DATE  AS ENTERED_START_DATE, 
			--	@END_DATE AS ENTERED_END_DATE, 
			--	@CALCULATED_START_DATE  AS CALCULATED_START_DATE, 
			--	@CALCULATED_END_DATE AS CALCULATED_END_DATE, 
			--	ISNULL(@NUM_DAYS,0) AS NUM_DAYS, 
			--	ISNULL(@NUM_WEEKS,0) AS NUM_WEEKS, 
			--	ISNULL(@NUM_MONTHS,0) AS NUM_MONTHS, 
			--	ISNULL(@NUM_YEARS,0) AS NUM_YEARS, 
			--	ISNULL(@NUM_EMPS,0) AS NUM_EMPS;
	    --END    
     
     
--		--TEST:
--		SELECT * FROM #EMP_AVAILABILITY

		--FINAL CLEANUP:
		-- recalc available time and subtract event task time from final balance
		-- add event task time to hrs_assigned_task too
		UPDATE #EMP_AVAILABILITY
		SET 
		#EMP_AVAILABILITY.HRS_BALANCE_AVAIL = ISNULL(#EMP_AVAILABILITY.HRS_BALANCE_AVAIL,0.000000) - ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_EVENT,0.000000),
		#EMP_AVAILABILITY.HRS_ASSIGNED_TASK = ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_TASK,0.000000) + ISNULL(#EMP_AVAILABILITY.HRS_ASSIGNED_EVENT,0.000000);

		--? REMOVE WHAT SHOULD BE ALL DAY HOLIDAYS....
		DELETE FROM #EMP_AVAILABILITY WHERE HRS_USED_NON_TASK = 0.000000 AND HRS_AVAIL = 0.000000 AND HRS_ASSIGNED_TASK = 0.000000 AND HRS_ASSIGNED_EVENT = 0.000000 AND HRS_BALANCE_AVAIL = 0.000000 AND IS_FULL_DAY_OFF = 1;

		--TEST:
		--SELECT * FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'cburr'

		CREATE TABLE #EMP_ACTUALIZATION --MASTER TABLE TO RETURN
		(
			[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
			[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
			[EMP_DIRECT_HRS_GOAL_PERC] DECIMAL(18,6),
			[STD_HRS_AVAIL]      DECIMAL(18,6),
			[EMP_DIRECT_HRS_GOAL_HOURS] DECIMAL(18,6),
			[HRS_ASSIGNED_TASK]  DECIMAL(18,6),
			[HRS_ASSIGNED_ASSIGN]  DECIMAL(18,6),
			--[HRS_ASSIGNED]  DECIMAL(18,6),
			[HRS_APPTS]			 DECIMAL(18,6),
			[HRS_USED_NON_TASK]  DECIMAL(18,6),
			[HRS_AVAIL]          DECIMAL(18,6),
			[HRS_BALANCE_AVAIL]  DECIMAL(18,6),
			[BEGINNING_BALANCE]  DECIMAL(18,6),
			[HRS_POSTED]		DECIMAL(18,6),
			[HRS_LEFT]			DECIMAL(18,6),
			[HRS_POSTED_TASK]		DECIMAL(18,6),
			[HRS_NO_DATE]			DECIMAL(18,6),
			[HRS_TO_DISTRIBUTE]			DECIMAL(18,6),
			[PERC_WORKED]			DECIMAL(18,6),
			OFFICE_CODE			VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			OFFICE_NAME			VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_FNAME			VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_MI			VARCHAR(1) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_LNAME			VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			DP_TM_CODE		VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS ,
			DP_TM_DESC		VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_FML_NAME		VARCHAR(2000) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
			EMP_START_TIME		SMALLDATETIME,
			EMP_END_TIME		SMALLDATETIME,
			IS_FIRST_CHOICE  INT,
			EMP_SENIORITY    SMALLINT,
			DEF_TRF_ROLE	VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL
		);
     
        -- @SUMMARY_LEVEL SMALLINT ==> 0 = NONE, 1 = DAY, 2 = WEEK, 3 = MONTH, 4 = YEAR
        IF @SUMMARY_LEVEL IS NULL OR @SUMMARY_LEVEL = 0 --NO SUMMARY
        BEGIN
	        SELECT 
		        ROW_ID,
		        EMP_CODE,
		        CASE DATEPART(dw,[DATE])
					WHEN 1 THEN 'Sun'
					WHEN 2 THEN 'Mon'
					WHEN 3 THEN 'Tue'
					WHEN 4 THEN 'Wed'
					WHEN 5 THEN 'Thu'
					WHEN 6 THEN 'Fri'
					WHEN 7 THEN 'Sat'
				END AS S_DAY_OF_WEEK,       
		        EMP_START_TIME,
		        EMP_END_TIME,
		        --EMP_START_TIME_SUN,
		        --EMP_END_TIME_SUN,
		        --EMP_START_TIME_MON,
		        --EMP_END_TIME_MON,
		        --EMP_START_TIME_TUE,
		        --EMP_END_TIME_TUE,
		        --EMP_START_TIME_WED,
		        --EMP_END_TIME_WED,
		        --EMP_START_TIME_THU,
		        --EMP_END_TIME_THU,
		        --EMP_START_TIME_FRI,
		        --EMP_END_TIME_FRI,
		        --EMP_START_TIME_SAT,
		        --EMP_END_TIME_SAT,
		        EMP_DIRECT_HRS_GOAL_PERC,
		        [DATE],
		        DAY_OF_WEEK,
		        DAY_OF_YEAR,
		        WEEK_OF_YEAR,
		        MONTH_OF_YEAR,
		        [YEAR],
		        STD_HRS_AVAIL,
		        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * ISNULL(HRS_AVAIL,0.000000) AS EMP_DIRECT_HRS_GOAL_HOURS,
		        HRS_USED_NON_TASK,
		        HRS_AVAIL,
		        HRS_ASSIGNED_TASK,
				HRS_APPTS,
		        HRS_ASSIGNED_EVENT,
		        HRS_BALANCE_AVAIL,
		        NOTE,
		        IS_FULL_DAY_OFF,
		        0 AS IS_FIRST_CHOICE
	        FROM #EMP_AVAILABILITY;
        END	
        IF @SUMMARY_LEVEL = 1 --SUM BY DAY
        BEGIN
      
			INSERT INTO #EMP_ACTUALIZATION
        	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0)  AS HRS_ASSIGNED_TASK,
				CAST(ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6)) AS HRS_ASSIGNED_ASSIGN,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
				0 as BEGINNING_BALANCE,
				0 AS HRS_POSTED,
				0 AS HRS_LEFT,
				0 AS HRS_POSTED_TASK,
				0 AS HRS_NO_DATE,
				0 AS HRS_TO_DISTRIBUTE,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0.000000 THEN CAST(ISNULL(SUM(A.HRS_ASSIGNED_TASK),0.000000)/ISNULL(SUM(A.STD_HRS_AVAIL),0.000000) AS DECIMAL(18,6)) 
        			ELSE 0.000000
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,
                      EMPLOYEE.EMP_START_TIME,EMPLOYEE.EMP_END_TIME,
		        0 AS IS_FIRST_CHOICE,
		        ISNULL(EMPLOYEE.SENIORITY,9999) AS EMP_SENIORITY,EMPLOYEE.DEF_TRF_ROLE
        	FROM	
        	    (
		        SELECT 
			        EMP_CODE,
			        EMP_DIRECT_HRS_GOAL_PERC,
			        DAY_OF_YEAR,
			        ISNULL(SUM(STD_HRS_AVAIL),0.000000) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        ISNULL(SUM(HRS_USED_NON_TASK),0.000000) AS HRS_USED_NON_TASK, 
			        ISNULL(SUM(HRS_AVAIL),0.000000) AS HRS_AVAIL,
					ISNULL(SUM(HRS_ASSIGNED_TASK),0.000000) AS HRS_ASSIGNED_TASK, 
			        ISNULL(SUM(HRS_APPTS),0.000000) AS HRS_APPTS, 
			        ISNULL(SUM(HRS_BALANCE_AVAIL),0.000000) AS HRS_BALANCE_AVAIL,
					--(SELECT SUM([HOURS]) - SUM(HRS_POSTED)
					--		FROM #ASSIGNMENTS A
					--		WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
					--		GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR) AS HRS_ASSIGNED_ASSIGN,
					SUM(HRS_ASSIGNED_ASSIGN) AS HRS_ASSIGNED_ASSIGN
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,DAY_OF_YEAR
		        ) AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
        		GROUP BY 
        			A.EMP_CODE, A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
					  DEPT_TEAM.DP_TM_DESC,EMPLOYEE.EMP_START_TIME,EMPLOYEE.EMP_END_TIME, EMPLOYEE.SENIORITY,EMPLOYEE.DEF_TRF_ROLE;

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL 
										--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
												AND ET.EMP_DATE < @START_DATE  AND ((ETD.ALERT_ID IN (SELECT ALERT_ID FROM #ASSIGNMENTS WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)) OR (ETD.ALERT_ID IN (SELECT ALERT_ID FROM #MY_DATA WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)))
								   GROUP BY ET.EMP_CODE),0)) 
								 --  -
								 --  (ISNULL((SELECT SUM(B.EMP_HOURS) FROM (SELECT ET.EMP_CODE, CASE WHEN ASSIGNED_EMP_CODE IS NULL AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT WHERE ALERT_ID = A.ALERT_ID) = 0 AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = A.ALERT_ID) = 0 THEN EMP_HOURS ELSE 0 END AS EMP_HOURS
									--FROM EMP_TIME_DTL AS ETD INNER JOIN 
									--     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
									--			ALERT A ON A.ALERT_ID = ETD.ALERT_ID 
								 --  WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ET.EMP_DATE < @START_DATE AND ETD.ALERT_ID IS NOT NULL) AS B 
								 --  GROUP BY EMP_CODE),0)) 

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED_TASK = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN 
												ALERT A ON A.ALERT_ID = ETD.ALERT_ID
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL 
										--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
										AND ALERT_LEVEL = 'BRD' AND EMP_DATE < @START_DATE
								   GROUP BY ET.EMP_CODE),0)) 
				
				UPDATE #EMP_ACTUALIZATION
				SET [BEGINNING_BALANCE] = (ISNULL((SELECT SUM(HRS_BEGIN) 
											FROM #MY_DATA
											--FROM V_JOB_TRAFFIC_DET INNER JOIN
											--	JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
											--	V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
											--	JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
											--	JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
										 --  WHERE V_JOB_TRAFFIC_DET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
											--	 AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL) AND TASK_START_DATE < @START_DATE						
										   WHERE #MY_DATA.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND
											   ((REC_TYPE <> 'H' AND REC_TYPE <> 'ADA' AND REC_TYPE <> 'ADHO' AND REC_TYPE <> 'AHO') AND 
											   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
												 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
												   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END) 
										   GROUP BY EMP_CODE),0)) --+
										 --  (ISNULL((SELECT SUM(CASE WHEN WORKDAY_COUNT > 1 AND WORKDAY_COUNT <> WORKDAY_COUNT_IN_RANGE THEN ((WORKDAY_COUNT - WORKDAY_COUNT_IN_RANGE) * HRS_PER_DAY) ELSE [HOURS] END)
										 --  --(ISNULL((SELECT SUM([HOURS]) 
											--FROM #ASSIGNMENTS A 
										 --  WHERE A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ((CASE WHEN [WEEK_START] IS NOT NULL THEN [WEEK_START] ELSE [START_DATE] END < @START_DATE) OR (WEEK_OF_YEAR IS NULL))
										 --  GROUP BY A.EMP_CODE),0))

				IF @OMIT_BEGINNING_BALANCE = 1
				BEGIN
					UPDATE #EMP_ACTUALIZATION SET [BEGINNING_BALANCE] = 0
					UPDATE #EMP_ACTUALIZATION SET HRS_POSTED = 0
				END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_NO_DATE = ISNULL((SELECT SUM([HOURS]) FROM #ASSIGNMENTS A WHERE [START_DATE] IS NULL AND [DUE_DATE] IS NULL AND WEEK_START IS NULL AND WEEK_END IS NULL AND A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE GROUP BY A.EMP_CODE),0)
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_LEFT = CASE WHEN (BEGINNING_BALANCE - HRS_POSTED) < 0 THEN 0 ELSE BEGINNING_BALANCE - HRS_POSTED END

				UPDATE #EMP_ACTUALIZATION
				SET HRS_ASSIGNED_TASK = CASE WHEN (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) < 0 THEN 0 ELSE (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_TO_DISTRIBUTE = CASE WHEN HRS_LEFT < 0 THEN 0 ELSE HRS_LEFT END

				--SELECT * FROM #EMP_ACTUALIZATION
					  
        	--SELECT DISTINCT DAY_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], DAY_OF_YEAR;
        	
	  --      SELECT 
		 --       EMP_CODE,
		 --       CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
		 --       DAY_OF_YEAR,
		 --       CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
		 --       CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.01) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
		 --       CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
		 --       CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
		 --       CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))
			--				--+ ISNULL((SELECT SUM([HOURS]) - SUM(HRS_POSTED)
			--				--			FROM #ASSIGNMENTS A
			--				--			WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
			--				--			GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR),0) 
			--				+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT DAY_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0) AS HRS_ASSIGNED_TASK,
			--				--- (CASE WHEN (SELECT HRS_TO_DISTRIBUTE FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) = 0 THEN 
			--				--ISNULL((SELECT SUM(HRS_POSTED) FROM #JOBS_TIME_POSTED JTP WHERE JTP.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND JTP.DAY_OF_YEAR = #EMP_AVAILABILITY.DAY_OF_YEAR GROUP BY JTP.EMP_CODE,JTP.DAY_OF_YEAR),0) ELSE 0 END)  AS HRS_ASSIGNED_TASK,
			--		CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS,	
   --     		CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
		 --       CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		 --       0 AS IS_FIRST_CHOICE,
			--	ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
			--	 AND #EMP_AVAILABILITY.DAY_OF_YEAR BETWEEN DATEPART(dayofyear,#MY_DATA.TASK_START_DATE) AND DATEPART(dayofyear,#MY_DATA.JOB_REVISED_DATE)
			--	 AND RED_FLAG = 1 AND REC_TYPE = 'T'
			--		GROUP BY EMP_CODE),0) AS OVER_BOOKED,
			--		((CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))  
			--				+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT DAY_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0)) / CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))) * 100 AS PERCENT_UTIL
	  --      FROM #EMP_AVAILABILITY			
			----WHERE 1 = CASE WHEN @OMIT_BEGINNING_BALANCE = 1 AND DAY_OF_YEAR >= @START_DATE THEN 1
			----			   WHEN @OMIT_BEGINNING_BALANCE = 0 THEN 1 END
	  --      GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,DAY_OF_YEAR
       
      
        	
        END
        IF @SUMMARY_LEVEL = 2 --SUM BY WEEK
        BEGIN
			INSERT INTO #EMP_ACTUALIZATION
          	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0)  AS HRS_ASSIGNED_TASK,
				CAST(ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6)) AS HRS_ASSIGNED_ASSIGN,
				--CAST(SUM(A.ASSIGNED) AS DECIMAL(18,6))  AS ASSIGNED,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6)) - ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0) AS HRS_BALANCE_AVAIL,
				0 as BEGINNING_BALANCE,
				0 AS HRS_POSTED,
				0 AS HRS_LEFT,
				0 AS HRS_POSTED_TASK,
				0 AS HRS_NO_DATE,
				0 AS HRS_TO_DISTRIBUTE,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0 THEN CAST(SUM(A.HRS_ASSIGNED_TASK)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0.000000
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,NULL,NULL,
		        0 AS IS_FIRST_CHOICE,NULL,EMPLOYEE.DEF_TRF_ROLE
        	FROM	
        	    (		
		        SELECT 
			        EMP_CODE,
			        EMP_DIRECT_HRS_GOAL_PERC,
			        WEEK_OF_YEAR,
			        SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
			        SUM(HRS_AVAIL) AS HRS_AVAIL,
			        SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK,
			        SUM(HRS_APPTS) AS HRS_APPTS,  
			        SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL,
					--(SELECT SUM([HOURS]) - SUM(HRS_POSTED)
					--		FROM #ASSIGNMENTS A
					--		WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
					--		GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR) AS HRS_ASSIGNED_ASSIGN,
					SUM(HRS_ASSIGNED_ASSIGN) AS HRS_ASSIGNED_ASSIGN
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,WEEK_OF_YEAR
        	    ) AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
				GROUP BY A.EMP_CODE,   A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC,EMPLOYEE.DEF_TRF_ROLE;

				UPDATE #EMP_ACTUALIZATION				
				SET HRS_POSTED = 
						(ISNULL((SELECT SUM(EMP_HOURS) 
						FROM EMP_TIME_DTL AS ETD INNER JOIN 
								EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
									JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
									ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
									JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
									JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN ALERT ON ALERT.ALERT_ID = ETD.ALERT_ID
						WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL 
								--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
									AND ET.EMP_DATE < @START_DATE AND ((ETD.ALERT_ID IN (SELECT ALERT_ID FROM #ASSIGNMENTS WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)) OR (ETD.ALERT_ID IN (SELECT ALERT_ID FROM #MY_DATA WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)))
						GROUP BY ET.EMP_CODE),0)) 
								 --  -
								 --  (ISNULL((SELECT SUM(B.EMP_HOURS) FROM (SELECT ET.EMP_CODE, CASE WHEN ASSIGNED_EMP_CODE IS NULL AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT WHERE ALERT_ID = A.ALERT_ID) = 0 AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = A.ALERT_ID) = 0 THEN EMP_HOURS ELSE 0 END AS EMP_HOURS
									--FROM EMP_TIME_DTL AS ETD INNER JOIN 
									--     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
									--			ALERT A ON A.ALERT_ID = ETD.ALERT_ID 
								 --  WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ET.EMP_DATE < @START_DATE AND ETD.ALERT_ID IS NOT NULL) AS B 
								 --  GROUP BY EMP_CODE),0)) 

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED_TASK = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN 
												ALERT A ON A.ALERT_ID = ETD.ALERT_ID
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL 
										--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
										AND ALERT_LEVEL = 'BRD' AND EMP_DATE < @START_DATE
								   GROUP BY ET.EMP_CODE),0)) 
								   
	
				UPDATE #EMP_ACTUALIZATION
				SET [BEGINNING_BALANCE] = (ISNULL((SELECT SUM(HRS_BEGIN) 
											FROM #MY_DATA
											--FROM V_JOB_TRAFFIC_DET INNER JOIN
											--	JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
											--	V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
											--	JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
											--	JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
										 --  WHERE V_JOB_TRAFFIC_DET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
											--	 AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL) AND TASK_START_DATE < @START_DATE			
											WHERE #MY_DATA.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND
											   ((REC_TYPE <> 'H' AND REC_TYPE <> 'ADA' AND REC_TYPE <> 'ADHO' AND REC_TYPE <> 'AHO') AND 
											   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
												 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
												   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END) 
										   GROUP BY #MY_DATA.EMP_CODE),0)) --+
										 --  (ISNULL((SELECT SUM(CASE WHEN WORKDAY_COUNT > 1 AND WORKDAY_COUNT <> WORKDAY_COUNT_IN_RANGE THEN ((WORKDAY_COUNT - WORKDAY_COUNT_IN_RANGE) * HRS_PER_DAY) ELSE [HOURS] END) 
										 --  --(ISNULL((SELECT SUM([HOURS])
											--FROM #ASSIGNMENTS A 
										 --  WHERE A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ((CASE WHEN [WEEK_START] IS NOT NULL THEN [WEEK_START] ELSE [START_DATE] END < @START_DATE) OR (WEEK_OF_YEAR IS NULL))
										 --  GROUP BY A.EMP_CODE),0))

				IF @OMIT_BEGINNING_BALANCE = 1
				BEGIN
					UPDATE #EMP_ACTUALIZATION SET [BEGINNING_BALANCE] = 0
					UPDATE #EMP_ACTUALIZATION SET HRS_POSTED = 0
				END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_NO_DATE = ISNULL((SELECT SUM([HOURS]) FROM #ASSIGNMENTS A WHERE [START_DATE] IS NULL AND [DUE_DATE] IS NULL AND WEEK_START IS NULL AND WEEK_END IS NULL AND A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE GROUP BY A.EMP_CODE),0)
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_LEFT = CASE WHEN (BEGINNING_BALANCE - HRS_POSTED) < 0 THEN 0 ELSE BEGINNING_BALANCE - HRS_POSTED END

				UPDATE #EMP_ACTUALIZATION
				SET HRS_ASSIGNED_TASK = CASE WHEN (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) < 0 THEN 0 ELSE (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_TO_DISTRIBUTE = CASE WHEN HRS_LEFT < 0 THEN 0 ELSE HRS_LEFT END

				--SELECT * FROM #EMP_ACTUALIZATION
        	
	        	--SELECT DISTINCT WEEK_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], WEEK_OF_YEAR;
        		DECLARE @WEEK_VIEW_MIN_YEAR AS INT, @WEEK_VIEW_MAX_YEAR AS INT, @WEEK_VIEW_YEAR_COUNT AS INT, @LAST_WEEK_OF_YEAR AS INT
        		
        		SELECT @WEEK_VIEW_MIN_YEAR = MIN([YEAR]), @WEEK_VIEW_MAX_YEAR = MAX([YEAR]) FROM #EMP_AVAILABILITY;
        		--SELECT @LAST_WEEK_OF_YEAR = MAX(WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE [YEAR] = @WEEK_VIEW_MIN_YEAR;
        		
        		SET @WEEK_VIEW_YEAR_COUNT = ISNULL(@WEEK_VIEW_MAX_YEAR,0) - ISNULL(@WEEK_VIEW_MIN_YEAR,0)
         		--SELECT @WEEK_VIEW_MIN_YEAR AS WVMINYEAR, @WEEK_VIEW_MAX_YEAR AS WVMAXYEAR, @WEEK_VIEW_YEAR_COUNT AS WVYEAR_COUNT, @LAST_WEEK_OF_YEAR AS LWOY
       		
        		--HANDLE WHEN RESULTS SPAN MORE THAN A YEAR (GOING FROM DECEMBER OF ONE YEAR TO JANUARY OF NEXT)
        		--IF @WEEK_VIEW_YEAR_COUNT = 0 
        		--	BEGIN
	        	--		SELECT DISTINCT WEEK_OF_YEAR AS CTR, [YEAR], WEEK_OF_YEAR FROM #EMP_AVAILABILITY ORDER BY [YEAR], WEEK_OF_YEAR;
        		--	END
        		--ELSE
        		--	BEGIN
	        	--		--SELECT DISTINCT WEEK_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], WEEK_OF_YEAR;
	        	--		SELECT DISTINCT A.CTR, A.[YEAR], A.WEEK_OF_YEAR
	        	--		FROM
	        	--		(
	        	--		SELECT 
	        	--			0 AS CTR, 
	        	--		@WEEK_VIEW_MIN_YEAR AS [YEAR], WEEK_OF_YEAR
	        	--		FROM #EMP_AVAILABILITY	
	        	--		)AS A ORDER BY A.WEEK_OF_YEAR
        		--	END


				--SELECT  CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)),(SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE),CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))							
				--			+ (SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) 
				--			- (CASE WHEN (SELECT HRS_TO_DISTRIBUTE FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) = 0 THEN
				--			ISNULL((SELECT SUM(HRS_POSTED) FROM #JOBS_TIME_POSTED JTP WHERE JTP.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND JTP.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR GROUP BY JTP.EMP_CODE,JTP.WEEK_OF_YEAR),0) ELSE 0 END)  AS HRS_ASSIGNED_TASK,
				--	CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS FROM #EMP_AVAILABILITY --WHERE EMP_CODE = 'walla'
				--	GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,WEEK_OF_YEAR

    --    		SELECT * FROM #EMP_AVAILABILITY WHERE EMP_CODE = 'walla'
     --   		SELECT 
			  --      EMP_CODE,
			  --      CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			  --      WEEK_OF_YEAR,
			  --      CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			  --      CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			  --      CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			  --      CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
			  --      CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))  
					--		+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0) AS HRS_ASSIGNED_TASK,
					--CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS,	
     --   			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
			  --      CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		   --         0 AS IS_FIRST_CHOICE,
					--ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
				 --AND #EMP_AVAILABILITY.WEEK_OF_YEAR BETWEEN #MY_DATA.TASK_START_DATE AND #MY_DATA.JOB_REVISED_DATE
				 --AND RED_FLAG = 1 AND REC_TYPE = 'T'
					--GROUP BY EMP_CODE),0) AS OVER_BOOKED,
					--((CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))  
					--		+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0)) / CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))) * 100 AS PERCENT_UTIL
		   --     FROM #EMP_AVAILABILITY
		   --     GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,WEEK_OF_YEAR

        END
        IF @SUMMARY_LEVEL = 3 --SUM BY MONTH
        BEGIN
        	
			INSERT INTO #EMP_ACTUALIZATION
          	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0)  AS HRS_ASSIGNED_TASK,
				CAST(ISNULL(SUM(A.HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6)) AS HRS_ASSIGNED_ASSIGN,
				--CAST(SUM(A.ASSIGNED) AS DECIMAL(18,6))  AS ASSIGNED,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
				0 as BEGINNING_BALANCE,
				0 AS HRS_POSTED,
				0 AS HRS_LEFT,
				0 AS HRS_POSTED_TASK,
				0 AS HRS_NO_DATE,
				0 AS HRS_TO_DISTRIBUTE,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0 THEN CAST(SUM(A.HRS_ASSIGNED_TASK)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,NULL,NULL,
		        0 AS IS_FIRST_CHOICE,NULL,EMPLOYEE.DEF_TRF_ROLE
        	FROM	
        	    (		
		        SELECT 
			        EMP_CODE,
			        EMP_DIRECT_HRS_GOAL_PERC,
			        MONTH_OF_YEAR,
			        SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.01) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
			        SUM(HRS_AVAIL) AS HRS_AVAIL,
			        SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK, 
			        SUM(HRS_APPTS) AS HRS_APPTS,  
			        SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL,
					--(SELECT SUM([HOURS]) - SUM(HRS_POSTED)
					--		FROM #ASSIGNMENTS A
					--		WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
					--		GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR) AS HRS_ASSIGNED_ASSIGN,
					SUM(HRS_ASSIGNED_ASSIGN) AS HRS_ASSIGNED_ASSIGN
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,MONTH_OF_YEAR
        	    ) AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
           	GROUP BY A.EMP_CODE,   A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC,EMPLOYEE.DEF_TRF_ROLE;

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL 
										---AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
												AND ET.EMP_DATE < @START_DATE AND ((ETD.ALERT_ID IN (SELECT ALERT_ID FROM #ASSIGNMENTS WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE)) OR (ETD.ALERT_ID IN (SELECT ALERT_ID FROM #MY_DATA WHERE EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE))) 
								   GROUP BY ET.EMP_CODE),0)) 
								 --  -
								 --  (ISNULL((SELECT SUM(B.EMP_HOURS) FROM (SELECT ET.EMP_CODE, CASE WHEN ASSIGNED_EMP_CODE IS NULL AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT WHERE ALERT_ID = A.ALERT_ID) = 0 AND (SELECT COUNT(ALERT_ID) FROM ALERT_RCPT_DISMISSED WHERE ALERT_ID = A.ALERT_ID) = 0 THEN EMP_HOURS ELSE 0 END AS EMP_HOURS
									--FROM EMP_TIME_DTL AS ETD INNER JOIN 
									--     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID LEFT OUTER JOIN 
									--			ALERT A ON A.ALERT_ID = ETD.ALERT_ID 
								 --  WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ET.EMP_DATE < @START_DATE AND ETD.ALERT_ID IS NOT NULL) AS B 
								 --  GROUP BY EMP_CODE),0)) 

				UPDATE #EMP_ACTUALIZATION
				SET HRS_POSTED_TASK = (ISNULL((SELECT SUM(EMP_HOURS) 
									FROM EMP_TIME_DTL AS ETD INNER JOIN 
									     EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
												JOB_COMPONENT WITH(NOLOCK) ON ETD.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
												ETD.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
												JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
												JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR LEFT OUTER JOIN 
												ALERT A ON A.ALERT_ID = ETD.ALERT_ID
								   WHERE ET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ETD.ALERT_ID IS NOT NULL 
										--AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL) 
										AND ALERT_LEVEL = 'BRD' AND EMP_DATE < @START_DATE
								   GROUP BY ET.EMP_CODE),0)) 				

				UPDATE #EMP_ACTUALIZATION
				SET [BEGINNING_BALANCE] = (ISNULL((SELECT SUM(HRS_BEGIN) 
											FROM #MY_DATA
											--FROM V_JOB_TRAFFIC_DET INNER JOIN
											--	JOB_COMPONENT WITH(NOLOCK) ON V_JOB_TRAFFIC_DET.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
											--	V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
											--	JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
											--	JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
										 --  WHERE V_JOB_TRAFFIC_DET.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND (JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12)) AND (JOB_TRAFFIC.COMPLETED_DATE IS NULL)
											--	 AND (V_JOB_TRAFFIC_DET.JOB_COMPLETED_DATE IS NULL AND V_JOB_TRAFFIC_DET.TEMP_COMP_DATE IS NULL) AND TASK_START_DATE < @START_DATE			
											WHERE #MY_DATA.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND
											  ((REC_TYPE <> 'H' AND REC_TYPE <> 'ADA' AND REC_TYPE <> 'ADHO' AND REC_TYPE <> 'AHO') AND 
											   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
												 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
												   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END) 
										   GROUP BY EMP_CODE),0)) --+
										 --  (ISNULL((SELECT SUM(CASE WHEN WORKDAY_COUNT > 1 AND WORKDAY_COUNT <> WORKDAY_COUNT_IN_RANGE THEN ((WORKDAY_COUNT - WORKDAY_COUNT_IN_RANGE) * HRS_PER_DAY) ELSE [HOURS] END) 
										 --  --(ISNULL((SELECT SUM([HOURS])
											--FROM #ASSIGNMENTS A 
										 --  WHERE A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE AND ((CASE WHEN [WEEK_START] IS NOT NULL THEN [WEEK_START] ELSE [START_DATE] END < @START_DATE) OR (WEEK_OF_YEAR IS NULL))
										 --  GROUP BY A.EMP_CODE),0))

				IF @OMIT_BEGINNING_BALANCE = 1
				BEGIN
					UPDATE #EMP_ACTUALIZATION SET [BEGINNING_BALANCE] = 0
					UPDATE #EMP_ACTUALIZATION SET HRS_POSTED = 0
				END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_NO_DATE = ISNULL((SELECT SUM([HOURS]) FROM #ASSIGNMENTS A WHERE [START_DATE] IS NULL AND [DUE_DATE] IS NULL AND WEEK_START IS NULL AND WEEK_END IS NULL AND A.EMP_CODE = #EMP_ACTUALIZATION.EMP_CODE GROUP BY A.EMP_CODE),0)
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_LEFT = CASE WHEN (BEGINNING_BALANCE - HRS_POSTED) < 0 THEN 0 ELSE BEGINNING_BALANCE - HRS_POSTED END

				UPDATE #EMP_ACTUALIZATION
				SET HRS_ASSIGNED_TASK = CASE WHEN (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) < 0 THEN 0 ELSE (HRS_ASSIGNED_TASK - HRS_POSTED_TASK) END
				
				UPDATE #EMP_ACTUALIZATION
				SET HRS_TO_DISTRIBUTE = CASE WHEN HRS_LEFT < 0 THEN 0 ELSE HRS_LEFT END

				--SELECT * FROM #EMP_ACTUALIZATION
						  
						  
	        	--SELECT DISTINCT MONTH_OF_YEAR AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR], MONTH_OF_YEAR;
		  
		   --     SELECT 
			  --      EMP_CODE,
			  --      CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			  --      MONTH_OF_YEAR,
			  --      CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			  --      CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			  --      CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			  --      CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,			        
			  --      CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))
					--		--+ ISNULL((SELECT SUM([HOURS]) - SUM(HRS_POSTED)
					--		--			FROM #ASSIGNMENTS A
					--		--			WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND A.WEEK_OF_YEAR = #EMP_AVAILABILITY.WEEK_OF_YEAR
					--		--			GROUP BY A.EMP_CODE,A.WEEK_OF_YEAR),0) 
					--		+ (SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT MONTH_OF_YEAR) FROM #EMP_AVAILABILITY)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) AS HRS_ASSIGNED_TASK,
					--		--- (CASE WHEN (SELECT HRS_TO_DISTRIBUTE FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) = 0 THEN 
					--		--ISNULL((SELECT SUM(HRS_POSTED) FROM #JOBS_TIME_POSTED JTP WHERE JTP.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND JTP.MONTH_OF_YEAR = #EMP_AVAILABILITY.MONTH_OF_YEAR GROUP BY JTP.EMP_CODE,JTP.MONTH_OF_YEAR),0) ELSE 0 END)  AS HRS_ASSIGNED_TASK,
					--CAST(SUM(HRS_ASSIGNED_ASSIGN) AS DECIMAL(18,6)) AS HRS_ASS,	
     --   			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,  
			  --      CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		   --         0 AS IS_FIRST_CHOICE,
					--ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
				 --AND #EMP_AVAILABILITY.MONTH_OF_YEAR BETWEEN DATEPART(mm,#MY_DATA.TASK_START_DATE) AND DATEPART(mm,#MY_DATA.JOB_REVISED_DATE)
				 --AND RED_FLAG = 1 AND REC_TYPE = 'T'
					--GROUP BY EMP_CODE),0) AS OVER_BOOKED,
					--((CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6)) + CAST(ISNULL(SUM(HRS_ASSIGNED_ASSIGN),0) AS DECIMAL(18,6))  
					--		+ ISNULL((SELECT ((HRS_TO_DISTRIBUTE) / (SELECT COUNT(DISTINCT MONTH_OF_YEAR) FROM #EMP_AVAILABILITY WHERE HRS_AVAIL > 0 AND EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) FROM #EMP_ACTUALIZATION EA WHERE EA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE AND SUM(#EMP_AVAILABILITY.HRS_AVAIL) > 0),0)) / CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))) * 100 AS PERCENT_UTIL
		   --     FROM #EMP_AVAILABILITY
		   --     GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,MONTH_OF_YEAR
		   --     ORDER BY MONTH_OF_YEAR;
		        
        END
        IF @SUMMARY_LEVEL = 4 --SUM BY YEAR
        BEGIN
        	
          	SELECT 
        		A.EMP_CODE,
        		CAST(A.EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
        		CAST(SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL,
        		CAST(SUM(A.EMP_DIRECT_HRS_GOAL_HOURS) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
        		CAST(SUM(A.HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK,
        		CAST(SUM(A.HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS,
        		CAST(SUM(A.HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK,
        		CAST(SUM(A.HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
 			    CAST(SUM(A.HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
 			    CASE
 					WHEN SUM(A.STD_HRS_AVAIL) > 0 THEN CAST(SUM(A.HRS_ASSIGNED_TASK)/SUM(A.STD_HRS_AVAIL) AS DECIMAL(18,6)) 
        			ELSE 0
        		END AS PERC_WORKED,
        		 OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
                      DEPT_TEAM.DP_TM_DESC,
                      EMPLOYEE.EMP_FNAME + ' ' +ISNULL(EMPLOYEE.EMP_MI+'. ','')+ EMPLOYEE.EMP_LNAME AS EMP_FML_NAME,
		        0 AS IS_FIRST_CHOICE,EMPLOYEE.DEF_TRF_ROLE
        	FROM	
        	    (		
		        SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        [YEAR],
			        SUM(STD_HRS_AVAIL) AS STD_HRS_AVAIL, 
			        (ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.000000) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS EMP_DIRECT_HRS_GOAL_HOURS,
			        SUM(HRS_USED_NON_TASK) AS HRS_USED_NON_TASK, 
			        SUM(HRS_AVAIL) AS HRS_AVAIL,
			        SUM(HRS_ASSIGNED_TASK) AS HRS_ASSIGNED_TASK, 
			        SUM(HRS_APPTS) AS HRS_APPTS,  
			        SUM(HRS_BALANCE_AVAIL) AS HRS_BALANCE_AVAIL
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,[YEAR]
        	    )AS A    INNER JOIN
                      EMPLOYEE ON EMPLOYEE.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = A.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS LEFT OUTER JOIN
                      DEPT_TEAM ON EMPLOYEE.DP_TM_CODE = DEPT_TEAM.DP_TM_CODE LEFT OUTER JOIN
                      OFFICE ON EMPLOYEE.OFFICE_CODE = OFFICE.OFFICE_CODE
        	    
               	GROUP BY A.EMP_CODE,   A.EMP_DIRECT_HRS_GOAL_PERC,OFFICE.OFFICE_CODE, OFFICE.OFFICE_NAME, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_MI, EMPLOYEE.EMP_LNAME, DEPT_TEAM.DP_TM_CODE, 
						  DEPT_TEAM.DP_TM_DESC,EMPLOYEE.DEF_TRF_ROLE;

        	
	        	--SELECT DISTINCT [YEAR] AS CTR, [YEAR] FROM #EMP_AVAILABILITY ORDER BY [YEAR];
        	
		        SELECT 
			        EMP_CODE,
			        CAST(EMP_DIRECT_HRS_GOAL_PERC AS DECIMAL(18,6)) AS EMP_DIRECT_HRS_GOAL_PERC,
			        [YEAR],
			        CAST(SUM(STD_HRS_AVAIL) AS DECIMAL(18,6))  AS STD_HRS_AVAIL, 
			        CAST((ISNULL(EMP_DIRECT_HRS_GOAL_PERC,0.00) * 0.010000) * (ISNULL(SUM(STD_HRS_AVAIL),0.000000) - ISNULL(SUM(HRS_USED_NON_TASK),0.000000)) AS DECIMAL(18,6))  AS EMP_DIRECT_HRS_GOAL_HOURS,
			        CAST(SUM(HRS_USED_NON_TASK) AS DECIMAL(18,6))  AS HRS_USED_NON_TASK, 
			        CAST(SUM(HRS_AVAIL) AS DECIMAL(18,6))  AS HRS_AVAIL,
			        CAST(SUM(HRS_ASSIGNED_TASK) AS DECIMAL(18,6))  AS HRS_ASSIGNED_TASK, 
        			CAST(SUM(HRS_APPTS) AS DECIMAL(18,6))  AS HRS_APPTS, 
			        CAST(SUM(HRS_BALANCE_AVAIL) AS DECIMAL(18,6))  AS HRS_BALANCE_AVAIL,
		        0 AS IS_FIRST_CHOICE,
				ISNULL((SELECT CASE WHEN COUNT(RED_FLAG) > 0 THEN 1 ELSE 0 END FROM #MY_DATA WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE
				 AND #EMP_AVAILABILITY.[YEAR] BETWEEN DATEPART(yy,#MY_DATA.TASK_START_DATE) AND DATEPART(yy,#MY_DATA.JOB_REVISED_DATE)
				 AND RED_FLAG = 1 AND REC_TYPE = 'T'
					GROUP BY EMP_CODE),0) AS OVER_BOOKED
		        FROM #EMP_AVAILABILITY
		        GROUP BY EMP_CODE,EMP_DIRECT_HRS_GOAL_PERC,[YEAR]
		        ORDER BY [YEAR];
        END
        
                
        IF @SUMMARY_LEVEL = 6 --SPECIAL MODE FOR JOINING TO TASK ASSIGNMENTS
        BEGIN
	        SELECT 
		        EMP_CODE,
		        SUM(ISNULL(HRS_USED_NON_TASK,0.000000)) AS HRS_USED_NON_TASK,
		        SUM(ISNULL(HRS_AVAIL,0.000000)) AS HRS_AVAIL,
		        SUM(ISNULL(HRS_ASSIGNED_TASK,0.000000)) AS HRS_ASSIGNED_TASK,
			    SUM(ISNULL(HRS_APPTS,0.000000)) AS HRS_APPTS,  
		        SUM(ISNULL(HRS_ASSIGNED_EVENT,0.000000)) AS HRS_ASSIGNED_EVENT,
		        SUM(ISNULL(HRS_BALANCE_AVAIL,0.000000)) AS HRS_BALANCE_AVAIL
	        FROM #EMP_AVAILABILITY
	        GROUP BY EMP_CODE
        END	

		UPDATE #EMP_AVAILABILITY
		SET [DATE] = DATEADD(dd, DATEDIFF(dd, 0, [DATE]), 0)
		
	--SELECT (DEF_FNC_CODE) FROM EMPLOYEE JOIN #MY_DATA ON EMPLOYEE.EMP_CODE = #MY_DATA.EMP_CODE
	--WHERE ISNULL(FNC_CODE, '') = ''
	     
	CREATE TABLE #MY_DATA_DS 
	(
		ID							INT IDENTITY(1,1) NOT NULL,
		OfficeCode					VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		OfficeDescription			VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DepartmentCode				VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DepartmentName				VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		EmployeeCode				VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		EmployeeName				VARCHAR(200) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,	
		SupervisorCode				VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		SupervisorName				VARCHAR(200) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		HoursAvailable				DECIMAL(18,6) NULL,
		DirectHoursGoalPercent      DECIMAL(18,6) NULL,
		DirectHoursGoal             DECIMAL(18,6) NULL,
		TotalHoursAllocated			DECIMAL(18,6) NULL,
		PercentUtilized				DECIMAL(18,6) NULL, /* moved to hdr section 08/19/19 */
		ClientCode					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		ClientName					VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DivisionCode				VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		DivisionName				VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		ProductCode					VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		ProductName					VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		JobNumber					INT NULL,
		JobDescription				VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,	
		ComponentNumber				SMALLINT NULL,
		ComponentDescription		VARCHAR(60) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FunctionCode				VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FunctionDescription			VARCHAR(40) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		FunctionEstimateCode		VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		AlertID						INT,
		AssignmentID				INT,
		AssignmentDescription 		VARCHAR(500) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,			
		StartDate					SMALLDATETIME NULL,
		DueDate						SMALLDATETIME NULL,
		HoursAllowed				DECIMAL(18,6) NULL,
		HoursPerDay					DECIMAL(18,6) NULL,
		BeginningBalance			DECIMAL(18,6) NULL,
		HoursPosted					DECIMAL(18,6) NULL,
		HoursLeft					DECIMAL(18,6) NULL,
		[Date]					    SMALLDATETIME NULL,
		[Hours]					    DECIMAL(18,6) NULL,
		BillableAmount				DECIMAL(18,6) NULL,
		TotalWorkingDays			DECIMAL(18,6) NULL, --TASK_TOTAL_WORKING_DAYS
		EMP_DEF_FNC_CODE			VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
		ActualHours					DECIMAL(18,6) NULL,
		ActualAmount				DECIMAL(18,6) NULL
		
	); 
 
 /***** DEBUG *****/
--SELECT '#EMP_AVAILABILITY' 'SRC', * FROM #EMP_AVAILABILITY  

--SELECT '#MY_DATA' '#MY_DATA', * FROM #MY_DATA

--SELECT '#WORK_DAY' '#WORK_DAY', * FROM #WORK_DAY

--SELECT COUNT(*) FROM #MY_DATA JOIN #WORK_DAY ON #WORK_DAY.EMP_CODE = #MY_DATA.EMP_CODE
--															 AND WORK_DATE >= #MY_DATA.TASK_START_DATE
--															 AND WORK_DATE <= #MY_DATA.JOB_REVISED_DATE
--															 AND NON_TASK_DAY <> 1 AND #MY_DATA.JOB_NUMBER = 466
--SELECT * FROM #WORK_DAY
--SELECT TASK_START_DATE, JOB_REVISED_DATE, * FROM #MY_DATA WHERE JOB_NUMBER = 466
/***** DEBUG *****/

/* Update task seq_nbrs - Assignment seq should already be there */
UPDATE #MY_DATA
SET ALERT_SEQ_NBR = (SELECT ALERT_SEQ_NBR FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA.ALERT_ID)
WHERE ISNULL(ALERT_SEQ_NBR, 0) = 0


		UPDATE A
		SET A.GRP_SEQ_NBR = B.row_num
		FROM #MY_DATA A
			INNER JOIN (
						SELECT 
							*,
						   ROW_NUMBER() OVER (
							  PARTITION BY [EMP_CODE], [JOB_NUMBER], [JOB_COMPONENT_NBR], [FNC_CODE], [ALERT_SEQ_NBR]
							  ORDER BY [EMP_CODE], [JOB_NUMBER], [JOB_COMPONENT_NBR], [FNC_CODE], [ALERT_SEQ_NBR]
						   ) row_num
						FROM 
						   #MY_DATA) B
		  ON A.ROW_ID = B.ROW_ID

--SELECT '#MY_DATA' '#MY_DATA', * FROM #MY_DATA  /***** DEBUG *****/

CREATE TABLE #EMP_AVAILABILITY_BY_WEEK 
(
	[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
	[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	[JOB_NUMBER]		 INT,
	[JOB_COMPONENT_NBR]	 SMALLINT,
	[FNC_CODE]			 VARCHAR(12) COLLATE SQL_Latin1_General_CP1_CS_AS,
	[ALERT_SEQ_NBR]		 INT,
	[DATE]               SMALLDATETIME,
	[DAY_OF_YEAR]        INT,
	[WEEK_OF_YEAR_BEG]   SMALLDATETIME,
	[WEEK_OF_YEAR_END]   SMALLDATETIME,
	[MONTH_OF_YEAR]      INT,
	[YEAR]               INT,
	[WORKING_DAYS]		 DECIMAL(18,6),
	[TOTAL_WORKING_DAYS] DECIMAL(18,6),
	[GRP_SEQ_NBR]		 INT
);

CREATE TABLE #EMP_AVAILABILITY_BY_WEEK_DAYS 
(
	[EMP_CODE]           VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
	[JOB_NUMBER]		 INT,
	[JOB_COMPONENT_NBR]	 SMALLINT,
	[FNC_CODE]			 VARCHAR(12) COLLATE SQL_Latin1_General_CP1_CS_AS,
	[ALERT_SEQ_NBR]		 INT,
	[WEEK_OF_YEAR_BEG]   SMALLDATETIME,
	[WEEK_OF_YEAR_END]   SMALLDATETIME,
	[TOTAL_WORKING_DAYS] DECIMAL(18,6),
	[GRP_SEQ_NBR]		 INT
);

IF @SUMMARY_LEVEL = 1
BEGIN
 INSERT INTO #EMP_AVAILABILITY_BY_WEEK
 SELECT A.[EMP_CODE],
 		B.[JOB_NUMBER],
		B.[JOB_COMPONENT_NBR],
		B.[FNC_CODE],
		B.[ALERT_SEQ_NBR],
		A.[DATE],
		A.[DAY_OF_YEAR],
		A.[WEEK_OF_YEAR],
		DATEADD(DAY,6,A.[WEEK_OF_YEAR]),
		A.[MONTH_OF_YEAR],
		A.[YEAR],
		COUNT(1),
		0,
		B.[GRP_SEQ_NBR]
FROM #EMP_AVAILABILITY A JOIN 
		#MY_DATA B ON A.EMP_CODE = B.EMP_CODE AND A.[DATE] BETWEEN B.TASK_START_DATE AND B.JOB_REVISED_DATE JOIN
		#WORK_DAY C ON A.DATE = C.WORK_DATE AND C.NON_TASK_DAY = 0 AND C.EMP_CODE = A.EMP_CODE
WHERE A.STD_HRS_AVAIL > 0 AND A.HRS_AVAIL > 0
GROUP BY A.[EMP_CODE], B.[JOB_NUMBER], B.[JOB_COMPONENT_NBR], B.[FNC_CODE], B.[ALERT_SEQ_NBR], A.[YEAR], A.[MONTH_OF_YEAR], A.[WEEK_OF_YEAR], A.[DATE], A.[DAY_OF_YEAR], B.[GRP_SEQ_NBR]
END

IF @SUMMARY_LEVEL = 2
BEGIN

 INSERT INTO #EMP_AVAILABILITY_BY_WEEK
 SELECT A.[EMP_CODE],
		B.[JOB_NUMBER],
		B.[JOB_COMPONENT_NBR],
		B.[FNC_CODE],
		B.[ALERT_SEQ_NBR],
		MIN(B.TASK_START_DATE),
		0,
		A.[WEEK_OF_YEAR],
		DATEADD(DAY,6,A.[WEEK_OF_YEAR]),
		NULL,
		A.[YEAR],
		COUNT(1),
		0,
		B.[GRP_SEQ_NBR]
FROM #EMP_AVAILABILITY A JOIN 
		#MY_DATA B ON A.EMP_CODE = B.EMP_CODE AND A.[DATE] BETWEEN B.TASK_START_DATE AND B.JOB_REVISED_DATE JOIN
		#WORK_DAY C ON A.DATE = C.WORK_DATE AND C.NON_TASK_DAY = 0 AND C.EMP_CODE = A.EMP_CODE
WHERE A.STD_HRS_AVAIL > 0
GROUP BY A.[EMP_CODE], B.[JOB_NUMBER], B.[JOB_COMPONENT_NBR], B.[FNC_CODE], B.[ALERT_SEQ_NBR], A.[YEAR], A.[WEEK_OF_YEAR], B.[GRP_SEQ_NBR]
END

IF @SUMMARY_LEVEL = 3
BEGIN
 INSERT INTO #EMP_AVAILABILITY_BY_WEEK
 SELECT A.[EMP_CODE],
		B.[JOB_NUMBER],
		B.[JOB_COMPONENT_NBR],
		B.[FNC_CODE],
		B.[ALERT_SEQ_NBR],
		0,
		0,
		MIN(A.[WEEK_OF_YEAR]),
		MAX(DATEADD(DAY,6,A.[WEEK_OF_YEAR])),
		A.[MONTH_OF_YEAR],
		A.[YEAR],
		COUNT(1),
		0,
		B.[GRP_SEQ_NBR]
FROM #EMP_AVAILABILITY A JOIN 
		#MY_DATA B ON A.EMP_CODE = B.EMP_CODE AND A.[DATE] BETWEEN B.TASK_START_DATE AND B.JOB_REVISED_DATE JOIN
		#WORK_DAY C ON A.DATE = C.WORK_DATE AND C.NON_TASK_DAY = 0 AND C.EMP_CODE = A.EMP_CODE
WHERE A.STD_HRS_AVAIL > 0
GROUP BY A.[EMP_CODE], B.[JOB_NUMBER], B.[JOB_COMPONENT_NBR], B.[FNC_CODE], B.[ALERT_SEQ_NBR], A.[YEAR], A.[MONTH_OF_YEAR], B.[GRP_SEQ_NBR]
END

INSERT INTO #EMP_AVAILABILITY_BY_WEEK_DAYS (
	[EMP_CODE],
	[JOB_NUMBER],
	[JOB_COMPONENT_NBR],
	[FNC_CODE],
	[ALERT_SEQ_NBR],
	[WEEK_OF_YEAR_BEG],
	[WEEK_OF_YEAR_END],
	[TOTAL_WORKING_DAYS],
	[GRP_SEQ_NBR])
SELECT
	[EMP_CODE],
	[JOB_NUMBER],
	[JOB_COMPONENT_NBR],
	[FNC_CODE],
	[ALERT_SEQ_NBR],
	MIN([WEEK_OF_YEAR_BEG]),
	max([WEEK_OF_YEAR_END]),
	SUM([WORKING_DAYS]),
	[GRP_SEQ_NBR]
FROM #EMP_AVAILABILITY_BY_WEEK
GROUP BY
	[EMP_CODE],
	[JOB_NUMBER],
	[JOB_COMPONENT_NBR],
	[FNC_CODE],
	[ALERT_SEQ_NBR],
	[GRP_SEQ_NBR]
	--[WEEK_OF_YEAR_BEG],
	--[WEEK_OF_YEAR_END]

UPDATE A
SET A.[TOTAL_WORKING_DAYS] = B.[TOTAL_WORKING_DAYS]
FROM #EMP_AVAILABILITY_BY_WEEK A
    INNER JOIN #EMP_AVAILABILITY_BY_WEEK_DAYS B ON
        A.EMP_CODE = B.EMP_CODE AND 
		A.JOB_NUMBER = B.JOB_NUMBER AND 
		A.JOB_COMPONENT_NBR = B.JOB_COMPONENT_NBR AND
		A.FNC_CODE = B.FNC_CODE AND
		A.ALERT_SEQ_NBR = B.ALERT_SEQ_NBR AND
		A.[GRP_SEQ_NBR] = B.[GRP_SEQ_NBR]
		--AND
		--A.WEEK_OF_YEAR_BEG = B.WEEK_OF_YEAR_BEG AND
		--A.WEEK_OF_YEAR_END = B.WEEK_OF_YEAR_END

--DELETE FROM #EMP_AVAILABILITY_BY_WEEK
--WHERE [DATE] NOT BETWEEN [WEEK_OF_YEAR_BEG] AND [WEEK_OF_YEAR_END]

--SELECT * FROM #WORK_DAY --WHERE EMP_CODE = 'ali'
--SELECT '#EMP_AVAILABILITY' 'SRC', * FROM #EMP_AVAILABILITY  /***** DEBUG *****/
--SELECT '#MY_DATA' 'SRC', * FROM #MY_DATA --WHERE JOB_NUMBER = 474  /***** DEBUG *****/
--SELECT '#EMP_AVAILABILITY_BY_WEEK' 'SRC', * FROM #EMP_AVAILABILITY_BY_WEEK  ORDER BY MONTH_OF_YEAR
--SELECT DISTINCT MONTH_OF_YEAR, [YEAR], EMP_CODE FROM #EMP_AVAILABILITY ORDER BY EMP_CODE
--	WHERE JOB_NUMBER = 466 
--	ORDER BY EMP_CODE, JOB_NUMBER, DATE  /***** DEBUG *****/
--SELECT '#EMP_AVAILABILITY_BY_WEEK_DAYS' 'SRC', * FROM #EMP_AVAILABILITY_BY_WEEK_DAYS 
--	WHERE JOB_NUMBER = 466 /***** DEBUG *****/
 
 IF @SUMMARY_LEVEL <> 0     
 BEGIN
	        --SELECT * FROM #JOBS WHERE EMP_CODE = 'BIVONS'		
	IF @SUMMARY_LEVEL = 1
	BEGIN
		IF @OMIT_BEGINNING_BALANCE = 1
		BEGIN
			INSERT INTO #MY_DATA_DS
			SELECT
				--ID = ROW_ID,
				OfficeCode = E.OFFICE_CODE,
				OfficeDescription = O.OFFICE_NAME,				
				DepartmentCode = #MY_DATA.DP_TM_CODE,
				DepartmentName = DT.DP_TM_DESC,
				--EMP_TRAFFIC_ROLE.ROLE_CODE,
				--TRAFFIC_ROLE.ROLE_DESC,	
				EmployeeCode = #MY_DATA.EMP_CODE,
				EmployeeName = ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
				SupervisorCode = E.SUPERVISOR_CODE,
				SupervisorName = '',
				HoursAvailable = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), 
				DirectHoursGoalPercent = E.DIRECT_HRS_PER,
				--DirectHoursGoal = (ISNULL(E.DIRECT_HRS_PER,0.000000) * 0.010000) * (ISNULL(#MY_DATA.STD_HRS_AVAIL,0.000000) - ISNULL(#MY_DATA.HRS_USED_NON_TASK,0.000000)),
				DirectHoursGoal = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100,
				TotalHoursAllocated = 0, --ISNULL((HOURS_PER_DAY * (CASE WHEN F.TOTAL_WORKING_DAYS > 0 THEN F.TOTAL_WORKING_DAYS ELSE 0 END)),0),
				--CASE WHEN EEA.[DATE] BETWEEN TASK_START_DATE AND JOB_REVISED_DATE THEN ISNULL(HOURS_PER_DAY,0) ELSE 0 END,
				--0,
				PercentUtilized = 0,
							--(ISNULL((HOURS_PER_DAY * (CASE WHEN F.TOTAL_WORKING_DAYS > 0 THEN F.TOTAL_WORKING_DAYS ELSE 0 END)),0)) / 
							--((SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100) * 100,
				ClientCode = #MY_DATA.CL_CODE,
				ClientName = CL_NAME,
				DivisionCode = #MY_DATA.DIV_CODE,
				DivisionName = DIV_NAME,
				ProductCode = #MY_DATA.PRD_CODE,
				ProductName = PRD_DESCRIPTION,
				JobNumber = #MY_DATA.JOB_NUMBER,
				JobDescription = JOB_DESC,
				ComponentNumber = #MY_DATA.JOB_COMPONENT_NBR,
				ComponentDescription = JOB_COMP_DESC,
				FunctionCode = #MY_DATA.FNC_EST,
				FunctionDescription = FNC_DESCRIPTION,
				FunctionEstimateCode = FNC_EST,
				AlertID = #MY_DATA.ALERT_ID,
				AssignmentID = #MY_DATA.ALERT_SEQ_NBR, --ALERT_ID,
				AssignmentDescription = TASK_DESCRIPTION, --''
				StartDate = TASK_START_DATE,
				DueDate = JOB_REVISED_DATE,
				--DEF_TRF_CODE,
				--SORT,
				--HRS_BEGIN AS JOB_HRS,
				HoursAllowed = ISNULL(JOB_HRS,0),
				--SEQ_NBR,
				--EMP_FML_NAME,
				--IS_EVENT_TASK,
				--CASE WHEN TASK_TOTAL_WORKING_DAYS = 0 THEN NULL ELSE TASK_TOTAL_WORKING_DAYS END AS TASK_TOTAL_WORKING_DAYS,
				HoursPerDay = ISNULL(HOURS_PER_DAY,0.00),
				--ISNULL(ADJ_JOB_HRS,0.00) AS ADJ_JOB_HRS,
				--REC_TYPE,
				--NON_TASK_ID,
				--ISNULL(HRS_USED_NON_TASK,0.00) AS HRS_USED_NON_TASK,
				--ISNULL(HRS_AVAIL,0.00) AS HRS_AVAIL,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) AS HRS_ASSIGNED_TASK,
				--ISNULL(HRS_ASSIGNED_EVENT,0.00) AS HRS_ASSIGNED_EVENT,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00) AS TOTAL_HRS_ASSIGNED,
				--ISNULL(HRS_BALANCE_AVAIL,0.00) AS HRS_BALANCE_AVAIL,
				--ISNULL(HRS_AVAIL,0.00) - ISNULL(HRS_USED_NON_TASK,0.00) - (ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00)) AS VARIANCE,
				--RED_FLAG,
				--HRS_PER_DAY_WITH_ASSN,
				--ADJ_JOB_HRS_WITH_ASSN, 
				BeginningBalance = 0, --HRS_BEGIN,
				HoursPosted = 0, --HRS_POSTED,
				HoursLeft = 0, --HRS_LEFT,
				--SPRINT_ID,
				--ISNULL((SELECT ISNULL(ALERT_CAT_ID,0) FROM ALERT A WHERE A.ALERT_ID = #MY_DATA.ALERT_ID),0) AS ALERT_CAT_ID,
				--HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END AS DISTRIBUTED_HRS
				[Date] = F.[DATE],
				[Hours] = CASE WHEN EEA.[DATE] BETWEEN TASK_START_DATE AND JOB_REVISED_DATE THEN ISNULL(HOURS_PER_DAY,0) ELSE 0 END,		
				--PercentUtilized = CASE WHEN [DATE] BETWEEN TASK_START_DATE AND JOB_REVISED_DATE THEN ((ISNULL((HOURS_PER_DAY),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100
				--					ELSE 0 END,
				--PercentUtilized = ISNULL((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END)),0) / ((SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100,
				0
				,TotalWorkingDays = CASE WHEN F.WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END
				,NULL,NULL,NULL --EMP_FNC_CODE
			 FROM #MY_DATA  LEFT OUTER JOIN
				  PRODUCT P ON P.PRD_CODE = #MY_DATA.PRD_CODE AND P.DIV_CODE = #MY_DATA.DIV_CODE AND P.CL_CODE = #MY_DATA.CL_CODE LEFT OUTER JOIN
				  DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
				  DEPT_TEAM DT ON DT.DP_TM_CODE = #MY_DATA.DP_TM_CODE LEFT OUTER JOIN
				  FUNCTIONS FN ON FN.FNC_CODE = #MY_DATA.FNC_CODE LEFT OUTER JOIN
				  EMPLOYEE E ON E.EMP_CODE = #MY_DATA.EMP_CODE LEFT OUTER JOIN
				  OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE INNER JOIN
				  (SELECT DISTINCT [DATE], EA.EMP_CODE FROM #EMP_AVAILABILITY EA) AS EEA ON EEA.EMP_CODE = #MY_DATA.EMP_CODE INNER JOIN
				  #EMP_AVAILABILITY_BY_WEEK F ON F.EMP_CODE = EEA.EMP_CODE AND EEA.[DATE] = F.[DATE]			  
						AND #MY_DATA.JOB_NUMBER = F.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = F.JOB_COMPONENT_NBR	AND (#MY_DATA.[FNC_CODE] = F.[FNC_CODE] OR #MY_DATA.[FNC_CODE] IS NULL)
						AND #MY_DATA.ALERT_SEQ_NBR = F.ALERT_SEQ_NBR AND F.[DATE] BETWEEN #MY_DATA.TASK_START_DATE AND #MY_DATA.JOB_REVISED_DATE
				  
				  --LEFT OUTER JOIN
				  --EMP_TRAFFIC_ROLE WITH (NOLOCK) ON #MY_DATA.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE LEFT OUTER JOIN
				  --TRAFFIC_ROLE ON EMP_TRAFFIC_ROLE.ROLE_CODE = TRAFFIC_ROLE.ROLE_CODE
			 WHERE
			   ((REC_TYPE <> 'H') AND 
			   ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
				 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE)))
				 OR REC_TYPE = 'ADA' OR REC_TYPE = 'ADHO'
			ORDER BY 
				#MY_DATA.EMP_CODE,SORT;		
		END
		ELSE 
		BEGIN
			INSERT INTO #MY_DATA_DS
			SELECT
				--ID = ROW_ID,
				OfficeCode = E.OFFICE_CODE,
				OfficeDescription = O.OFFICE_NAME,				
				DepartmentCode = #MY_DATA.DP_TM_CODE,
				DepartmentName = DT.DP_TM_DESC,
				--EMP_TRAFFIC_ROLE.ROLE_CODE,
				--TRAFFIC_ROLE.ROLE_DESC,	
				EmployeeCode = #MY_DATA.EMP_CODE,
				EmployeeName = ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
				SupervisorCode = E.SUPERVISOR_CODE,
				SupervisorName = '',
				HoursAvailable = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), 
				DirectHoursGoalPercent = E.DIRECT_HRS_PER,
				--DirectHoursGoal = (ISNULL(E.DIRECT_HRS_PER,0.000000) * 0.010000) * (ISNULL(#MY_DATA.STD_HRS_AVAIL,0.000000) - ISNULL(#MY_DATA.HRS_USED_NON_TASK,0.000000)),
				DirectHoursGoal = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100,
				TotalHoursAllocated = 0,
				PercentUtilized = ISNULL((HOURS_PER_DAY * (CASE WHEN F.TOTAL_WORKING_DAYS > 0 THEN F.TOTAL_WORKING_DAYS ELSE 0 END)),0) / 
									(SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100,
									--((SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100,
				ClientCode = #MY_DATA.CL_CODE,
				ClientName = CL_NAME,
				DivisionCode = #MY_DATA.DIV_CODE,
				DivisionName = DIV_NAME,
				ProductCode = #MY_DATA.PRD_CODE,
				ProductName = PRD_DESCRIPTION,
				JobNumber = #MY_DATA.JOB_NUMBER,
				JobDescription = JOB_DESC,
				ComponentNumber = #MY_DATA.JOB_COMPONENT_NBR,
				ComponentDescription = JOB_COMP_DESC,
				FunctionCode = #MY_DATA.FNC_EST,
				FunctionDescription = FNC_DESCRIPTION,
				FunctionEstimateCode = FNC_EST,
				AlertID = #MY_DATA.ALERT_ID,
				AssignmentID = #MY_DATA.ALERT_SEQ_NBR, --ALERT_ID,
				AssignmentDescription = TASK_DESCRIPTION, --''			
				StartDate = TASK_START_DATE,
				DueDate = JOB_REVISED_DATE,
				--DEF_TRF_CODE,
				--SORT,
				--HRS_BEGIN AS JOB_HRS,
				HoursAllowed = ISNULL(JOB_HRS,0),
				--SEQ_NBR,
				--EMP_FML_NAME,
				--IS_EVENT_TASK,
				--CASE WHEN TASK_TOTAL_WORKING_DAYS = 0 THEN NULL ELSE TASK_TOTAL_WORKING_DAYS END AS TASK_TOTAL_WORKING_DAYS,
				HoursPerDay = ISNULL(HOURS_PER_DAY,0.00),
				--ISNULL(ADJ_JOB_HRS,0.00) AS ADJ_JOB_HRS,
				--REC_TYPE,
				--NON_TASK_ID,
				--ISNULL(HRS_USED_NON_TASK,0.00) AS HRS_USED_NON_TASK,
				--ISNULL(HRS_AVAIL,0.00) AS HRS_AVAIL,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) AS HRS_ASSIGNED_TASK,
				--ISNULL(HRS_ASSIGNED_EVENT,0.00) AS HRS_ASSIGNED_EVENT,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00) AS TOTAL_HRS_ASSIGNED,
				--ISNULL(HRS_BALANCE_AVAIL,0.00) AS HRS_BALANCE_AVAIL,
				--ISNULL(HRS_AVAIL,0.00) - ISNULL(HRS_USED_NON_TASK,0.00) - (ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00)) AS VARIANCE,
				--RED_FLAG,
				--HRS_PER_DAY_WITH_ASSN,
				--ADJ_JOB_HRS_WITH_ASSN, 
				BeginningBalance = HRS_BEGIN,
				HoursPosted = HRS_POSTED,
				HoursLeft = HRS_LEFT,
				--SPRINT_ID,
				--ISNULL((SELECT ISNULL(ALERT_CAT_ID,0) FROM ALERT A WHERE A.ALERT_ID = #MY_DATA.ALERT_ID),0) AS ALERT_CAT_ID,
				--HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END AS DISTRIBUTED_HRS
				[Date] = F.[DATE],
				[Hours] = CASE WHEN EEA.[DATE] BETWEEN TASK_START_DATE AND JOB_REVISED_DATE THEN ISNULL(HOURS_PER_DAY + (HRS_LEFT / (SELECT COUNT(DISTINCT [DATE]) FROM #EMP_AVAILABILITY)),0)
								ELSE ISNULL((HRS_LEFT / (SELECT COUNT(DISTINCT [DATE]) FROM #EMP_AVAILABILITY)),0) END,		
				--PercentUtilized = CASE WHEN [DATE] BETWEEN TASK_START_DATE AND JOB_REVISED_DATE THEN ((ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS - TASK_BB_WORKING_DAYS)) + (HRS_LEFT / (SELECT COUNT(DISTINCT [DATE]) FROM #EMP_AVAILABILITY)),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100
				--					ELSE ISNULL(((ISNULL((HRS_LEFT / (SELECT COUNT(DISTINCT [DATE]) FROM #EMP_AVAILABILITY)),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100,0) END,
				0
				,TotalWorkingDays = CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END
				,NULL,NULL,NULL --EMP_FNC_CODE
			 FROM #MY_DATA LEFT OUTER JOIN
				  PRODUCT P ON P.PRD_CODE = #MY_DATA.PRD_CODE AND P.DIV_CODE = #MY_DATA.DIV_CODE AND P.CL_CODE = #MY_DATA.CL_CODE LEFT OUTER JOIN
				  DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
				  DEPT_TEAM DT ON DT.DP_TM_CODE = #MY_DATA.DP_TM_CODE LEFT OUTER JOIN
				  FUNCTIONS FN ON FN.FNC_CODE = #MY_DATA.FNC_CODE LEFT OUTER JOIN
				  EMPLOYEE E ON E.EMP_CODE = #MY_DATA.EMP_CODE LEFT OUTER JOIN
				  OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE INNER JOIN
				  (SELECT DISTINCT [DATE], EA.EMP_CODE FROM #EMP_AVAILABILITY EA) AS EEA ON EEA.EMP_CODE = #MY_DATA.EMP_CODE INNER JOIN
				  #EMP_AVAILABILITY_BY_WEEK F ON F.EMP_CODE = EEA.EMP_CODE AND EEA.[DATE] = F.[DATE]	
						AND #MY_DATA.JOB_NUMBER = F.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = F.JOB_COMPONENT_NBR	AND (#MY_DATA.[FNC_CODE] = F.[FNC_CODE] OR #MY_DATA.[FNC_CODE] IS NULL)
						AND #MY_DATA.ALERT_SEQ_NBR = F.ALERT_SEQ_NBR
				  
				  --LEFT OUTER JOIN
				  --EMP_TRAFFIC_ROLE WITH (NOLOCK) ON #MY_DATA.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE LEFT OUTER JOIN
				  --TRAFFIC_ROLE ON EMP_TRAFFIC_ROLE.ROLE_CODE = TRAFFIC_ROLE.ROLE_CODE
			 WHERE
			   ((REC_TYPE <> 'H') AND 
			   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
				 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
				   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END)
				 OR REC_TYPE = 'ADA' OR REC_TYPE = 'ADHO'
			ORDER BY 
				#MY_DATA.EMP_CODE,SORT;
		END
	END

--SELECT '#MY_DATA' 'SRC', * FROM #MY_DATA /***** DEBUG *****/
	
	IF @SUMMARY_LEVEL = 2
	BEGIN
		IF @OMIT_BEGINNING_BALANCE = 1
		BEGIN
			INSERT INTO #MY_DATA_DS
			SELECT
				--ID = ROW_ID,
				OfficeCode = E.OFFICE_CODE,
				OfficeDescription = O.OFFICE_NAME,				
				DepartmentCode = #MY_DATA.DP_TM_CODE,
				DepartmentName = DT.DP_TM_DESC,
				--EMP_TRAFFIC_ROLE.ROLE_CODE,
				--TRAFFIC_ROLE.ROLE_DESC,	
				EmployeeCode = #MY_DATA.EMP_CODE,
				EmployeeName = ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
				SupervisorCode = E.SUPERVISOR_CODE,
				SupervisorName = '',
				HoursAvailable = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), 
				DirectHoursGoalPercent = E.DIRECT_HRS_PER,
				--DirectHoursGoal = (ISNULL(E.DIRECT_HRS_PER,0.000000) * 0.010000) * (ISNULL(#MY_DATA.STD_HRS_AVAIL,0.000000) - ISNULL(#MY_DATA.HRS_USED_NON_TASK,0.000000)),
				DirectHoursGoal = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100,
				TotalHoursAllocated = 0, --ISNULL((HOURS_PER_DAY * (CASE WHEN F.TOTAL_WORKING_DAYS > 0 THEN F.TOTAL_WORKING_DAYS ELSE 0 END)),0),
				--0,
				PercentUtilized = 0,
								--ISNULL((HOURS_PER_DAY * (CASE WHEN F.TOTAL_WORKING_DAYS > 0 THEN F.TOTAL_WORKING_DAYS ELSE 0 END)),0) 
								--/ ISNULL(((SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100), 0) * 100,
				ClientCode = #MY_DATA.CL_CODE,
				ClientName = CL_NAME,
				DivisionCode = #MY_DATA.DIV_CODE,
				DivisionName = DIV_NAME,
				ProductCode = #MY_DATA.PRD_CODE,
				ProductName = PRD_DESCRIPTION,
				JobNumber = #MY_DATA.JOB_NUMBER,
				JobDescription = JOB_DESC,
				ComponentNumber = #MY_DATA.JOB_COMPONENT_NBR,
				ComponentDescription = JOB_COMP_DESC,
				FunctionCode = #MY_DATA.FNC_EST,
				FunctionDescription = FNC_DESCRIPTION,
				FunctionEstimateCode = FNC_EST,
				AlertID = #MY_DATA.ALERT_ID,
				AssignmentID = #MY_DATA.ALERT_SEQ_NBR, --ALERT_ID,
				AssignmentDescription = TASK_DESCRIPTION, --''			
				StartDate = TASK_START_DATE,
				DueDate = JOB_REVISED_DATE,
				--DEF_TRF_CODE,
				--SORT,
				--HRS_BEGIN AS JOB_HRS,
				HoursAllowed = ISNULL(JOB_HRS,0),
				--SEQ_NBR,
				--EMP_FML_NAME,
				--IS_EVENT_TASK,
				--CASE WHEN TASK_TOTAL_WORKING_DAYS = 0 THEN NULL ELSE TASK_TOTAL_WORKING_DAYS END AS TASK_TOTAL_WORKING_DAYS,
				HoursPerDay = ISNULL(HOURS_PER_DAY,0.00),
				--ISNULL(ADJ_JOB_HRS,0.00) AS ADJ_JOB_HRS,
				--REC_TYPE,
				--NON_TASK_ID,
				--ISNULL(HRS_USED_NON_TASK,0.00) AS HRS_USED_NON_TASK,
				--ISNULL(HRS_AVAIL,0.00) AS HRS_AVAIL,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) AS HRS_ASSIGNED_TASK,
				--ISNULL(HRS_ASSIGNED_EVENT,0.00) AS HRS_ASSIGNED_EVENT,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00) AS TOTAL_HRS_ASSIGNED,
				--ISNULL(HRS_BALANCE_AVAIL,0.00) AS HRS_BALANCE_AVAIL,
				--ISNULL(HRS_AVAIL,0.00) - ISNULL(HRS_USED_NON_TASK,0.00) - (ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00)) AS VARIANCE,
				--RED_FLAG,
				--HRS_PER_DAY_WITH_ASSN,
				--ADJ_JOB_HRS_WITH_ASSN, 
				BeginningBalance = 0, --ISNULL(HOURS_PER_DAY,0.00) * ISNULL(F.WORKING_DAYS, 0.00), 
					--(HRS_BEGIN / CASE WHEN COALESCE(TASK_TOTAL_WORKING_DAYS, 0) = 0 THEN 1 ELSE TASK_TOTAL_WORKING_DAYS END) * COALESCE(F.WORKING_DAYS, 0),
				HoursPosted = HRS_POSTED,
				HoursLeft = 0, --(ISNULL(HOURS_PER_DAY,0.00) * ISNULL(F.WORKING_DAYS, 0.00)) - HRS_POSTED, 
					--(HRS_LEFT / CASE WHEN COALESCE(TASK_TOTAL_WORKING_DAYS, 0) = 0 THEN 1 ELSE TASK_TOTAL_WORKING_DAYS END) * COALESCE(F.WORKING_DAYS, 0),
				--SPRINT_ID,
				--ISNULL((SELECT ISNULL(ALERT_CAT_ID,0) FROM ALERT A WHERE A.ALERT_ID = #MY_DATA.ALERT_ID),0) AS ALERT_CAT_ID,
				--HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END AS DISTRIBUTED_HRS
				[Date] = DATEADD(DD, 1, EEA.WEEK_OF_YEAR),
				--[Hours] = CASE WHEN DATEPART(week, TASK_START_DATE) = DATEPART(week,EEA.WEEK_OF_YEAR) THEN ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS - TASK_BB_WORKING_DAYS)),0)
				--				ELSE 0 END,		
				[Hours] = ISNULL((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END)),0),										
				--PercentUtilized = CASE WHEN DATEPART(week, TASK_START_DATE) = DATEPART(week,EEA.WEEK_OF_YEAR) THEN ((ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS - TASK_BB_WORKING_DAYS)),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100
				--					ELSE 0 END,
				--PercentUtilized = CASE WHEN DATEPART(week, TASK_START_DATE) = DATEPART(week,EEA.WEEK_OF_YEAR) THEN ((ISNULL((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END - TASK_BB_WORKING_DAYS)),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100
				--					ELSE 0 END,
				--PercentUtilized = ISNULL((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END)),0) / (HOURS_PER_DAY * TASK_TOTAL_WORKING_DAYS) * 100, 
				--PercentUtilized = ISNULL((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END)),0) / ((SELECT SUM(STD_HRS_AVAIL) 
				--						FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100,
				0
				,TotalWorkingDays = CASE WHEN F.WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END
				,NULL,NULL,NULL --EMP_FNC_CODE
			 FROM #MY_DATA LEFT OUTER JOIN
				  PRODUCT P ON P.PRD_CODE = #MY_DATA.PRD_CODE AND P.DIV_CODE = #MY_DATA.DIV_CODE AND P.CL_CODE = #MY_DATA.CL_CODE LEFT OUTER JOIN
				  DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
				  DEPT_TEAM DT ON DT.DP_TM_CODE = #MY_DATA.DP_TM_CODE LEFT OUTER JOIN
				  FUNCTIONS FN ON FN.FNC_CODE = #MY_DATA.FNC_CODE LEFT OUTER JOIN
				  EMPLOYEE E ON E.EMP_CODE = #MY_DATA.EMP_CODE LEFT OUTER JOIN
				  OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE INNER JOIN
				  (SELECT DISTINCT WEEK_OF_YEAR, EA.EMP_CODE FROM #EMP_AVAILABILITY EA) AS EEA ON EEA.EMP_CODE = #MY_DATA.EMP_CODE INNER JOIN
				  #EMP_AVAILABILITY_BY_WEEK F ON F.EMP_CODE = EEA.EMP_CODE AND EEA.WEEK_OF_YEAR BETWEEN F.WEEK_OF_YEAR_BEG AND F.WEEK_OF_YEAR_END
						AND #MY_DATA.JOB_NUMBER = F.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = F.JOB_COMPONENT_NBR	AND (#MY_DATA.[FNC_CODE] = F.[FNC_CODE] OR #MY_DATA.[FNC_CODE] IS NULL)
						AND #MY_DATA.ALERT_SEQ_NBR = F.ALERT_SEQ_NBR AND F.[DATE] BETWEEN #MY_DATA.TASK_START_DATE AND #MY_DATA.JOB_REVISED_DATE
				  
				  --LEFT OUTER JOIN
				  --EMP_TRAFFIC_ROLE WITH (NOLOCK) ON #MY_DATA.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE LEFT OUTER JOIN
				  --TRAFFIC_ROLE ON EMP_TRAFFIC_ROLE.ROLE_CODE = TRAFFIC_ROLE.ROLE_CODE
			 WHERE
			   ((REC_TYPE <> 'H') AND 
			   ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
				 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE)))
				 OR REC_TYPE = 'ADA' OR REC_TYPE = 'ADHO'
			ORDER BY 
				#MY_DATA.EMP_CODE,SORT;		
		END
		ELSE 
		BEGIN
			INSERT INTO #MY_DATA_DS
			SELECT
				--ID = ROW_ID,
				OfficeCode = E.OFFICE_CODE,
				OfficeDescription = O.OFFICE_NAME,				
				DepartmentCode = #MY_DATA.DP_TM_CODE,
				DepartmentName = DT.DP_TM_DESC,
				--EMP_TRAFFIC_ROLE.ROLE_CODE,
				--TRAFFIC_ROLE.ROLE_DESC,	
				EmployeeCode = #MY_DATA.EMP_CODE,
				EmployeeName = ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
				SupervisorCode = E.SUPERVISOR_CODE,
				SupervisorName = '',
				HoursAvailable = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), 
				DirectHoursGoalPercent = E.DIRECT_HRS_PER,
				--DirectHoursGoal = (ISNULL(E.DIRECT_HRS_PER,0.000000) * 0.010000) * (ISNULL(#MY_DATA.STD_HRS_AVAIL,0.000000) - ISNULL(#MY_DATA.HRS_USED_NON_TASK,0.000000)),
				DirectHoursGoal = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100,
				TotalHoursAllocated = 0,
				/** ADDED WHERE EMP_CODE = #MY_DATA.EMP_CODE **/
				PercentUtilized = CASE WHEN DATEPART(week, TASK_START_DATE) = DATEPART(week,EEA.WEEK_OF_YEAR) THEN ((ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS - TASK_BB_WORKING_DAYS)) + (HRS_LEFT / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY)),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100
									ELSE ISNULL(((ISNULL((HRS_LEFT / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY)),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100,0) END,
				ClientCode = #MY_DATA.CL_CODE,
				ClientName = CL_NAME,
				DivisionCode = #MY_DATA.DIV_CODE,
				DivisionName = DIV_NAME,
				ProductCode = #MY_DATA.PRD_CODE,
				ProductName = PRD_DESCRIPTION,
				JobNumber = #MY_DATA.JOB_NUMBER,
				JobDescription = JOB_DESC,
				ComponentNumber = #MY_DATA.JOB_COMPONENT_NBR,
				ComponentDescription = JOB_COMP_DESC,
				FunctionCode = #MY_DATA.FNC_EST,
				FunctionDescription = FNC_DESCRIPTION,
				FunctionEstimateCode = FNC_EST,
				AlertID = #MY_DATA.ALERT_ID,
				AssignmentID = #MY_DATA.ALERT_SEQ_NBR, --ALERT_ID,
				AssignmentDescription = TASK_DESCRIPTION, --''			
				StartDate = TASK_START_DATE,
				DueDate = JOB_REVISED_DATE,
				--DEF_TRF_CODE,
				--SORT,
				--HRS_BEGIN AS JOB_HRS,
				HoursAllowed = ISNULL(JOB_HRS,0),
				--SEQ_NBR,
				--EMP_FML_NAME,
				--IS_EVENT_TASK,
				--CASE WHEN TASK_TOTAL_WORKING_DAYS = 0 THEN NULL ELSE TASK_TOTAL_WORKING_DAYS END AS TASK_TOTAL_WORKING_DAYS,
				HoursPerDay = ISNULL(HOURS_PER_DAY,0.00),
				--ISNULL(ADJ_JOB_HRS,0.00) AS ADJ_JOB_HRS,
				--REC_TYPE,
				--NON_TASK_ID,
				--ISNULL(HRS_USED_NON_TASK,0.00) AS HRS_USED_NON_TASK,
				--ISNULL(HRS_AVAIL,0.00) AS HRS_AVAIL,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) AS HRS_ASSIGNED_TASK,
				--ISNULL(HRS_ASSIGNED_EVENT,0.00) AS HRS_ASSIGNED_EVENT,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00) AS TOTAL_HRS_ASSIGNED,
				--ISNULL(HRS_BALANCE_AVAIL,0.00) AS HRS_BALANCE_AVAIL,
				--ISNULL(HRS_AVAIL,0.00) - ISNULL(HRS_USED_NON_TASK,0.00) - (ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00)) AS VARIANCE,
				--RED_FLAG,
				--HRS_PER_DAY_WITH_ASSN,
				--ADJ_JOB_HRS_WITH_ASSN, 
				BeginningBalance = (HRS_BEGIN / CASE WHEN COALESCE(TASK_TOTAL_WORKING_DAYS, 0) = 0 THEN 1 ELSE TASK_TOTAL_WORKING_DAYS END) * COALESCE(F.WORKING_DAYS, 0), 
				HoursPosted = HRS_POSTED,
				HoursLeft = (HRS_LEFT / CASE WHEN COALESCE(TASK_TOTAL_WORKING_DAYS, 0) = 0 THEN 1 ELSE TASK_TOTAL_WORKING_DAYS END) * COALESCE(F.WORKING_DAYS, 0),
				--SPRINT_ID,
				--ISNULL((SELECT ISNULL(ALERT_CAT_ID,0) FROM ALERT A WHERE A.ALERT_ID = #MY_DATA.ALERT_ID),0) AS ALERT_CAT_ID,
				--HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END AS DISTRIBUTED_HRS
				[Date] = DATEADD(DD, 1, EEA.WEEK_OF_YEAR),
				[Hours] = CASE WHEN DATEPART(week, TASK_START_DATE) = DATEPART(week,EEA.WEEK_OF_YEAR) THEN ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS - TASK_BB_WORKING_DAYS)) + (HRS_LEFT / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY)),0)
								ELSE ISNULL((HRS_LEFT / (SELECT COUNT(DISTINCT WEEK_OF_YEAR) FROM #EMP_AVAILABILITY)),0) END,
				0
				,TotalWorkingDays = CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END
				,NULL,NULL,NULL --EMP_FNC_CODE
			 FROM #MY_DATA LEFT OUTER JOIN
				  PRODUCT P ON P.PRD_CODE = #MY_DATA.PRD_CODE AND P.DIV_CODE = #MY_DATA.DIV_CODE AND P.CL_CODE = #MY_DATA.CL_CODE LEFT OUTER JOIN
				  DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
				  DEPT_TEAM DT ON DT.DP_TM_CODE = #MY_DATA.DP_TM_CODE LEFT OUTER JOIN
				  FUNCTIONS FN ON FN.FNC_CODE = #MY_DATA.FNC_CODE LEFT OUTER JOIN
				  EMPLOYEE E ON E.EMP_CODE = #MY_DATA.EMP_CODE LEFT OUTER JOIN
				  OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE INNER JOIN
				  (SELECT DISTINCT WEEK_OF_YEAR, EA.EMP_CODE FROM #EMP_AVAILABILITY EA) AS EEA ON EEA.EMP_CODE = #MY_DATA.EMP_CODE  INNER JOIN
				  #EMP_AVAILABILITY_BY_WEEK F ON F.EMP_CODE = EEA.EMP_CODE AND EEA.WEEK_OF_YEAR BETWEEN F.WEEK_OF_YEAR_BEG AND F.WEEK_OF_YEAR_END	
						AND #MY_DATA.JOB_NUMBER = F.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = F.JOB_COMPONENT_NBR	AND (#MY_DATA.[FNC_CODE] = F.[FNC_CODE] OR #MY_DATA.[FNC_CODE] IS NULL)
						AND #MY_DATA.ALERT_SEQ_NBR = F.ALERT_SEQ_NBR

				  --LEFT OUTER JOIN
				  --EMP_TRAFFIC_ROLE WITH (NOLOCK) ON #MY_DATA.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE LEFT OUTER JOIN
				  --TRAFFIC_ROLE ON EMP_TRAFFIC_ROLE.ROLE_CODE = TRAFFIC_ROLE.ROLE_CODE
			 WHERE
			   ((REC_TYPE <> 'H') AND 
			   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
				 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
				   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END)
				 OR REC_TYPE = 'ADA' OR REC_TYPE = 'ADHO'
			ORDER BY 
				#MY_DATA.EMP_CODE,SORT;
		END
	END
	
	IF @SUMMARY_LEVEL = 3
	BEGIN
		IF @OMIT_BEGINNING_BALANCE = 1
		BEGIN				
			INSERT INTO #MY_DATA_DS
			SELECT
				--ID = ROW_ID,
				OfficeCode = E.OFFICE_CODE,
				OfficeDescription = O.OFFICE_NAME,				
				DepartmentCode = #MY_DATA.DP_TM_CODE,
				DepartmentName = DT.DP_TM_DESC,
				--EMP_TRAFFIC_ROLE.ROLE_CODE,
				--TRAFFIC_ROLE.ROLE_DESC,	
				EmployeeCode = #MY_DATA.EMP_CODE,
				EmployeeName = ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
				SupervisorCode = E.SUPERVISOR_CODE,
				SupervisorName = '',
				HoursAvailable = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), 
				DirectHoursGoalPercent = E.DIRECT_HRS_PER,
				--DirectHoursGoal = (ISNULL(E.DIRECT_HRS_PER,0.000000) * 0.010000) * (ISNULL(#MY_DATA.STD_HRS_AVAIL,0.000000) - ISNULL(#MY_DATA.HRS_USED_NON_TASK,0.000000)),
				DirectHoursGoal = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100,

				--TotalHoursAllocated = CASE WHEN DATEPART(MONTH, TASK_START_DATE) = EEA.MONTH_OF_YEAR THEN ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS)),0) ELSE 0 END,
				TotalHoursAllocated = 0, --ISNULL((HOURS_PER_DAY * (CASE WHEN F.TOTAL_WORKING_DAYS > 0 THEN F.TOTAL_WORKING_DAYS ELSE 0 END)),0),
				--0,
				PercentUtilized = 0,
								--ISNULL((HOURS_PER_DAY * (CASE WHEN F.TOTAL_WORKING_DAYS > 0 THEN F.TOTAL_WORKING_DAYS ELSE 0 END)),0) 
								--/ ISNULL(((SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100), 0) * 100,
				ClientCode = #MY_DATA.CL_CODE,
				ClientName = CL_NAME,
				DivisionCode = #MY_DATA.DIV_CODE,
				DivisionName = DIV_NAME,
				ProductCode = #MY_DATA.PRD_CODE,
				ProductName = PRD_DESCRIPTION,
				JobNumber = #MY_DATA.JOB_NUMBER,
				JobDescription = JOB_DESC,
				ComponentNumber = #MY_DATA.JOB_COMPONENT_NBR,
				ComponentDescription = JOB_COMP_DESC,
				FunctionCode = #MY_DATA.FNC_EST,
				FunctionDescription = FNC_DESCRIPTION,
				FunctionEstimateCode = FNC_EST,
				AlertID = #MY_DATA.ALERT_ID,
				AssignmentID = #MY_DATA.ALERT_SEQ_NBR, --ALERT_ID,
				AssignmentDescription = TASK_DESCRIPTION, --''			
				StartDate = TASK_START_DATE,
				DueDate = JOB_REVISED_DATE,
				--DEF_TRF_CODE,
				--SORT,
				--HRS_BEGIN AS JOB_HRS,
				HoursAllowed = ISNULL(JOB_HRS,0),
				--SEQ_NBR,
				--EMP_FML_NAME,
				--IS_EVENT_TASK,
				--CASE WHEN TASK_TOTAL_WORKING_DAYS = 0 THEN NULL ELSE TASK_TOTAL_WORKING_DAYS END AS TASK_TOTAL_WORKING_DAYS,
				HoursPerDay = ISNULL(HOURS_PER_DAY,0.00),
				--ISNULL(ADJ_JOB_HRS,0.00) AS ADJ_JOB_HRS,
				--REC_TYPE,
				--NON_TASK_ID,
				--ISNULL(HRS_USED_NON_TASK,0.00) AS HRS_USED_NON_TASK,
				--ISNULL(HRS_AVAIL,0.00) AS HRS_AVAIL,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) AS HRS_ASSIGNED_TASK,
				--ISNULL(HRS_ASSIGNED_EVENT,0.00) AS HRS_ASSIGNED_EVENT,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00) AS TOTAL_HRS_ASSIGNED,
				--ISNULL(HRS_BALANCE_AVAIL,0.00) AS HRS_BALANCE_AVAIL,
				--ISNULL(HRS_AVAIL,0.00) - ISNULL(HRS_USED_NON_TASK,0.00) - (ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00)) AS VARIANCE,
				--RED_FLAG,
				--HRS_PER_DAY_WITH_ASSN,
				--ADJ_JOB_HRS_WITH_ASSN, 
				BeginningBalance = 0, --HRS_BEGIN,
				HoursPosted = 0, --HRS_POSTED,
				HoursLeft = 0, --HRS_LEFT,
				--SPRINT_ID,
				--ISNULL((SELECT ISNULL(ALERT_CAT_ID,0) FROM ALERT A WHERE A.ALERT_ID = #MY_DATA.ALERT_ID),0) AS ALERT_CAT_ID,
				--HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END AS DISTRIBUTED_HRS
				[Date] = CONVERT(datetime, CAST(EEA.MONTH_OF_YEAR AS VARCHAR) + '/1/' + CAST(EEA.[YEAR] AS VARCHAR)),
				--[Hours] = CASE WHEN DATEPART(MONTH, TASK_START_DATE) = EEA.MONTH_OF_YEAR THEN ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS - TASK_BB_WORKING_DAYS)),0) ELSE 0 END,
				[Hours] = ISNULL((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END)),0),
				--PercentUtilized = CASE WHEN DATEPART(week, TASK_START_DATE) = DATEPART(week,EEA.MONTH_OF_YEAR) THEN ((ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS - TASK_BB_WORKING_DAYS)),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100
				--					ELSE 0 END,
				--PercentUtilized = ISNULL((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END)),0) / ((SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100,
				--PercentUtilized = CASE WHEN DATEPART(MONTH, TASK_START_DATE) = EEA.MONTH_OF_YEAR THEN ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS)),0) ELSE 0 END / 
				--				ISNULL((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END)),0),
				0
				,TotalWorkingDays = CASE WHEN F.WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END
				,NULL,NULL,NULL --EMP_FNC_CODE
			 FROM #MY_DATA LEFT OUTER JOIN
				  PRODUCT P ON P.PRD_CODE = #MY_DATA.PRD_CODE AND P.DIV_CODE = #MY_DATA.DIV_CODE AND P.CL_CODE = #MY_DATA.CL_CODE LEFT OUTER JOIN
				  DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
				  DEPT_TEAM DT ON DT.DP_TM_CODE = #MY_DATA.DP_TM_CODE LEFT OUTER JOIN
				  FUNCTIONS FN ON FN.FNC_CODE = #MY_DATA.FNC_CODE LEFT OUTER JOIN
				  EMPLOYEE E ON E.EMP_CODE = #MY_DATA.EMP_CODE LEFT OUTER JOIN
				  OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE INNER JOIN
				  (SELECT DISTINCT MONTH_OF_YEAR, [YEAR], EA.EMP_CODE FROM #EMP_AVAILABILITY EA) EEA ON EEA.EMP_CODE = #MY_DATA.EMP_CODE  INNER JOIN
				  #EMP_AVAILABILITY_BY_WEEK F ON F.EMP_CODE = EEA.EMP_CODE AND EEA.MONTH_OF_YEAR = F.MONTH_OF_YEAR AND EEA.[YEAR] = F.[YEAR] AND #MY_DATA.WEEKLY = 0  --BETWEEN F.WEEK_OF_YEAR_BEG AND F.WEEK_OF_YEAR_END	
						AND #MY_DATA.JOB_NUMBER = F.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = F.JOB_COMPONENT_NBR	AND (#MY_DATA.[FNC_CODE] = F.[FNC_CODE] OR #MY_DATA.[FNC_CODE] IS NULL)
						AND #MY_DATA.ALERT_SEQ_NBR = F.ALERT_SEQ_NBR AND ((TASK_START_DATE BETWEEN F.WEEK_OF_YEAR_BEG AND F.WEEK_OF_YEAR_END) OR (JOB_REVISED_DATE BETWEEN F.WEEK_OF_YEAR_BEG AND F.WEEK_OF_YEAR_END)
																			OR (F.WEEK_OF_YEAR_BEG BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (F.WEEK_OF_YEAR_END BETWEEN TASK_START_DATE AND JOB_REVISED_DATE)) --AND (SELECT MAX(GRP_SEQ_NBR) FROM #EMP_AVAILABILITY_BY_WEEK WHERE EMP_CODE = #MY_DATA.EMP_CODE) > 1

				  --LEFT OUTER JOIN
				  --EMP_TRAFFIC_ROLE WITH (NOLOCK) ON #MY_DATA.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE LEFT OUTER JOIN
				  --TRAFFIC_ROLE ON EMP_TRAFFIC_ROLE.ROLE_CODE = TRAFFIC_ROLE.ROLE_CODE
			 WHERE
			   ((REC_TYPE <> 'H') AND 
			   ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
				 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE)))
				 OR REC_TYPE = 'ADA' OR REC_TYPE = 'ADHO'
			ORDER BY 
				#MY_DATA.EMP_CODE,SORT;		
			INSERT INTO #MY_DATA_DS
			SELECT
				--ID = ROW_ID,
				OfficeCode = E.OFFICE_CODE,
				OfficeDescription = O.OFFICE_NAME,				
				DepartmentCode = #MY_DATA.DP_TM_CODE,
				DepartmentName = DT.DP_TM_DESC,
				EmployeeCode = #MY_DATA.EMP_CODE,
				EmployeeName = ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
				SupervisorCode = E.SUPERVISOR_CODE,
				SupervisorName = '',
				HoursAvailable = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), 
				DirectHoursGoalPercent = E.DIRECT_HRS_PER,
				DirectHoursGoal = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE) * E.DIRECT_HRS_PER / 100,
				TotalHoursAllocated = 0, 
				PercentUtilized = 0,
				ClientCode = #MY_DATA.CL_CODE,
				ClientName = CL_NAME,
				DivisionCode = #MY_DATA.DIV_CODE,
				DivisionName = DIV_NAME,
				ProductCode = #MY_DATA.PRD_CODE,
				ProductName = PRD_DESCRIPTION,
				JobNumber = #MY_DATA.JOB_NUMBER,
				JobDescription = JOB_DESC,
				ComponentNumber = #MY_DATA.JOB_COMPONENT_NBR,
				ComponentDescription = JOB_COMP_DESC,
				FunctionCode = #MY_DATA.FNC_EST,
				FunctionDescription = FNC_DESCRIPTION,
				FunctionEstimateCode = FNC_EST,
				AlertID = #MY_DATA.ALERT_ID,
				AssignmentID = #MY_DATA.ALERT_SEQ_NBR, --ALERT_ID,
				AssignmentDescription = TASK_DESCRIPTION, --''			
				StartDate = MIN(TASK_START_DATE),
				DueDate = MAX(JOB_REVISED_DATE),
				HoursAllowed = ISNULL(SUM(JOB_HRS),0),
				HoursPerDay = ISNULL(HOURS_PER_DAY,0.00),				
				BeginningBalance = 0, --HRS_BEGIN,
				HoursPosted = 0, --HRS_POSTED,
				HoursLeft = 0, --HRS_LEFT,
				[Date] = CONVERT(datetime, CAST(EEA.MONTH_OF_YEAR AS VARCHAR) + '/1/' + CAST(EEA.[YEAR] AS VARCHAR)),
				[Hours] = ISNULL(SUM((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END))),0),
				0
				,TotalWorkingDays = CASE WHEN SUM(F.WORKING_DAYS) > 0 THEN SUM(F.WORKING_DAYS) ELSE 0 END
				,NULL,NULL,NULL --EMP_FNC_CODE
			 FROM #MY_DATA LEFT OUTER JOIN
				  PRODUCT P ON P.PRD_CODE = #MY_DATA.PRD_CODE AND P.DIV_CODE = #MY_DATA.DIV_CODE AND P.CL_CODE = #MY_DATA.CL_CODE LEFT OUTER JOIN
				  DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
				  DEPT_TEAM DT ON DT.DP_TM_CODE = #MY_DATA.DP_TM_CODE LEFT OUTER JOIN
				  FUNCTIONS FN ON FN.FNC_CODE = #MY_DATA.FNC_CODE LEFT OUTER JOIN
				  EMPLOYEE E ON E.EMP_CODE = #MY_DATA.EMP_CODE LEFT OUTER JOIN
				  OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE INNER JOIN
				  (SELECT DISTINCT MONTH_OF_YEAR, [YEAR], EA.EMP_CODE FROM #EMP_AVAILABILITY EA) EEA ON EEA.EMP_CODE = #MY_DATA.EMP_CODE  INNER JOIN
				  #EMP_AVAILABILITY_BY_WEEK F ON F.EMP_CODE = EEA.EMP_CODE AND EEA.MONTH_OF_YEAR = F.MONTH_OF_YEAR AND EEA.[YEAR] = F.[YEAR] AND #MY_DATA.WEEKLY = 1 --BETWEEN F.WEEK_OF_YEAR_BEG AND F.WEEK_OF_YEAR_END	
						AND #MY_DATA.JOB_NUMBER = F.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = F.JOB_COMPONENT_NBR	AND (#MY_DATA.[FNC_CODE] = F.[FNC_CODE] OR #MY_DATA.[FNC_CODE] IS NULL)
						AND #MY_DATA.ALERT_SEQ_NBR = F.ALERT_SEQ_NBR AND ((TASK_START_DATE BETWEEN F.WEEK_OF_YEAR_BEG AND F.WEEK_OF_YEAR_END) OR (JOB_REVISED_DATE BETWEEN F.WEEK_OF_YEAR_BEG AND F.WEEK_OF_YEAR_END)
																			OR (F.WEEK_OF_YEAR_BEG BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (F.WEEK_OF_YEAR_END BETWEEN TASK_START_DATE AND JOB_REVISED_DATE)) --AND (SELECT MAX(GRP_SEQ_NBR) FROM #EMP_AVAILABILITY_BY_WEEK WHERE EMP_CODE = #MY_DATA.EMP_CODE) > 1

				  --LEFT OUTER JOIN
				  --EMP_TRAFFIC_ROLE WITH (NOLOCK) ON #MY_DATA.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE LEFT OUTER JOIN
				  --TRAFFIC_ROLE ON EMP_TRAFFIC_ROLE.ROLE_CODE = TRAFFIC_ROLE.ROLE_CODE
			 WHERE
			   ((REC_TYPE <> 'H') AND 
			   ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
				 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE)))
				 OR REC_TYPE = 'ADA' OR REC_TYPE = 'ADHO'
			GROUP BY E.OFFICE_CODE,O.OFFICE_NAME,				
				#MY_DATA.DP_TM_CODE,
				DT.DP_TM_DESC,
				#MY_DATA.EMP_CODE,
				ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
				E.SUPERVISOR_CODE,				
				E.DIRECT_HRS_PER,	
				#MY_DATA.CL_CODE,
				CL_NAME,
				#MY_DATA.DIV_CODE,
				DIV_NAME,
				#MY_DATA.PRD_CODE,
				PRD_DESCRIPTION,
				#MY_DATA.JOB_NUMBER,
				JOB_DESC,
				#MY_DATA.JOB_COMPONENT_NBR,
				JOB_COMP_DESC,
				#MY_DATA.FNC_EST,
				FNC_DESCRIPTION,
				FNC_EST,
				#MY_DATA.ALERT_ID,
				#MY_DATA.ALERT_SEQ_NBR,
				TASK_DESCRIPTION,
				HOURS_PER_DAY,
				CONVERT(datetime, CAST(EEA.MONTH_OF_YEAR AS VARCHAR) + '/1/' + CAST(EEA.[YEAR] AS VARCHAR))
			ORDER BY 
				#MY_DATA.EMP_CODE;			
		END
		ELSE 
		BEGIN
			INSERT INTO #MY_DATA_DS
			SELECT
				--ID = ROW_ID,
				OfficeCode = E.OFFICE_CODE,
				OfficeDescription = O.OFFICE_NAME,				
				DepartmentCode = #MY_DATA.DP_TM_CODE,
				DepartmentName = DT.DP_TM_DESC,
				--EMP_TRAFFIC_ROLE.ROLE_CODE,
				--TRAFFIC_ROLE.ROLE_DESC,	
				EmployeeCode = #MY_DATA.EMP_CODE,
				EmployeeName = ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
				SupervisorCode = E.SUPERVISOR_CODE,
				SupervisorName = '',
				HoursAvailable = (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), 
				DirectHoursGoalPercent = E.DIRECT_HRS_PER,
				DirectHoursGoal = (ISNULL(E.DIRECT_HRS_PER,0.000000) * 0.010000) * (ISNULL(#MY_DATA.STD_HRS_AVAIL,0.000000) - ISNULL(#MY_DATA.HRS_USED_NON_TASK,0.000000)),
				TotalHoursAllocated = 0,
				PercentUtilized = ISNULL((HOURS_PER_DAY * (CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END)),0) / 
								((SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100,
				ClientCode = #MY_DATA.CL_CODE,
				ClientName = CL_NAME,
				DivisionCode = #MY_DATA.DIV_CODE,
				DivisionName = DIV_NAME,
				ProductCode = #MY_DATA.PRD_CODE,
				ProductName = PRD_DESCRIPTION,
				JobNumber = #MY_DATA.JOB_NUMBER,
				JobDescription = JOB_DESC,
				ComponentNumber = #MY_DATA.JOB_COMPONENT_NBR,
				ComponentDescription = JOB_COMP_DESC,
				FunctionCode = #MY_DATA.FNC_EST,
				FunctionDescription = FNC_DESCRIPTION,
				FunctionEstimateCode = FNC_EST,
				AlertID = #MY_DATA.ALERT_ID,
				AssignmentID = #MY_DATA.ALERT_SEQ_NBR, --ALERT_ID,
				AssignmentDescription= TASK_DESCRIPTION, --''		
				StartDate = TASK_START_DATE,
				DueDate = JOB_REVISED_DATE,
				--DEF_TRF_CODE,
				--SORT,
				--HRS_BEGIN AS JOB_HRS,
				HoursAllowed = ISNULL(JOB_HRS,0),
				--SEQ_NBR,
				--EMP_FML_NAME,
				--IS_EVENT_TASK,
				--CASE WHEN TASK_TOTAL_WORKING_DAYS = 0 THEN NULL ELSE TASK_TOTAL_WORKING_DAYS END AS TASK_TOTAL_WORKING_DAYS,
				HoursPerDay = ISNULL(HOURS_PER_DAY,0.00),
				--ISNULL(ADJ_JOB_HRS,0.00) AS ADJ_JOB_HRS,
				--REC_TYPE,
				--NON_TASK_ID,
				--ISNULL(HRS_USED_NON_TASK,0.00) AS HRS_USED_NON_TASK,
				--ISNULL(HRS_AVAIL,0.00) AS HRS_AVAIL,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) AS HRS_ASSIGNED_TASK,
				--ISNULL(HRS_ASSIGNED_EVENT,0.00) AS HRS_ASSIGNED_EVENT,
				--ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00) AS TOTAL_HRS_ASSIGNED,
				--ISNULL(HRS_BALANCE_AVAIL,0.00) AS HRS_BALANCE_AVAIL,
				--ISNULL(HRS_AVAIL,0.00) - ISNULL(HRS_USED_NON_TASK,0.00) - (ISNULL(HRS_ASSIGNED_TASK,0.00) + ISNULL(HRS_ASSIGNED_EVENT,0.00)) AS VARIANCE,
				--RED_FLAG,
				--HRS_PER_DAY_WITH_ASSN,
				--ADJ_JOB_HRS_WITH_ASSN, 
				BeginningBalance = HRS_BEGIN,
				HoursPosted = HRS_POSTED,
				HoursLeft = HRS_LEFT,
				--SPRINT_ID,
				--ISNULL((SELECT ISNULL(ALERT_CAT_ID,0) FROM ALERT A WHERE A.ALERT_ID = #MY_DATA.ALERT_ID),0) AS ALERT_CAT_ID,
				--HRS_BEGIN - HRS_POSTED + ISNULL(ADJ_JOB_HRS,0.00) + CASE WHEN RED_FLAG = 1 THEN ISNULL(ADJ_JOB_HRS_WITH_ASSN,0) ELSE 0 END AS DISTRIBUTED_HRS
				[Date] = CONVERT(datetime, CAST(EEA.MONTH_OF_YEAR AS VARCHAR) + '/1/' + CAST(EEA.[YEAR] AS VARCHAR)),
				[Hours] = CASE WHEN DATEPART(month, TASK_START_DATE) = EEA.MONTH_OF_YEAR THEN ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS - TASK_BB_WORKING_DAYS)) + (HRS_LEFT / (SELECT COUNT(DISTINCT MONTH_OF_YEAR) FROM #EMP_AVAILABILITY)),0)
								ELSE ISNULL((HRS_LEFT / (SELECT COUNT(DISTINCT MONTH_OF_YEAR) FROM #EMP_AVAILABILITY)),0) END,
				--PercentUtilized = CASE WHEN DATEPART(week, TASK_START_DATE) = DATEPART(week,EEA.MONTH_OF_YEAR) THEN ((ISNULL((HOURS_PER_DAY * (TASK_TOTAL_WORKING_DAYS - TASK_BB_WORKING_DAYS)) + (HRS_LEFT / (SELECT COUNT(DISTINCT MONTH_OF_YEAR) FROM #EMP_AVAILABILITY)),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100
				--					ELSE ISNULL(((ISNULL((HRS_LEFT / (SELECT COUNT(DISTINCT MONTH_OF_YEAR) FROM #EMP_AVAILABILITY)),0)) / (SELECT SUM(STD_HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE #MY_DATA.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE)) * 100,0) END,
				0
				,TotalWorkingDays = CASE WHEN TASK_TOTAL_WORKING_DAYS > 0 THEN F.WORKING_DAYS ELSE 0 END --TASK_TOTAL_WORKING_DAYS
				,NULL,NULL,NULL --EMP_FNC_CODE
			 FROM #MY_DATA LEFT OUTER JOIN
				  PRODUCT P ON P.PRD_CODE = #MY_DATA.PRD_CODE AND P.DIV_CODE = #MY_DATA.DIV_CODE AND P.CL_CODE = #MY_DATA.CL_CODE LEFT OUTER JOIN
				  DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
				  DEPT_TEAM DT ON DT.DP_TM_CODE = #MY_DATA.DP_TM_CODE LEFT OUTER JOIN
				  FUNCTIONS FN ON FN.FNC_CODE = #MY_DATA.FNC_CODE LEFT OUTER JOIN
				  EMPLOYEE E ON E.EMP_CODE = #MY_DATA.EMP_CODE LEFT OUTER JOIN
				  OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE INNER JOIN
				  (SELECT DISTINCT MONTH_OF_YEAR, [YEAR], EA.EMP_CODE FROM #EMP_AVAILABILITY EA) EEA ON EEA.EMP_CODE = #MY_DATA.EMP_CODE INNER JOIN
				  #EMP_AVAILABILITY_BY_WEEK F ON F.EMP_CODE = EEA.EMP_CODE AND EEA.MONTH_OF_YEAR = F.MONTH_OF_YEAR --BETWEEN F.WEEK_OF_YEAR_BEG AND F.WEEK_OF_YEAR_END	
						AND #MY_DATA.JOB_NUMBER = F.JOB_NUMBER AND #MY_DATA.JOB_COMPONENT_NBR = F.JOB_COMPONENT_NBR	AND (#MY_DATA.[FNC_CODE] = F.[FNC_CODE] OR #MY_DATA.[FNC_CODE] IS NULL)
						AND #MY_DATA.ALERT_SEQ_NBR = F.ALERT_SEQ_NBR

				  --LEFT OUTER JOIN
				  --EMP_TRAFFIC_ROLE WITH (NOLOCK) ON #MY_DATA.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE LEFT OUTER JOIN
				  --TRAFFIC_ROLE ON EMP_TRAFFIC_ROLE.ROLE_CODE = TRAFFIC_ROLE.ROLE_CODE
			 WHERE
			   ((REC_TYPE <> 'H') AND 
			   1 = CASE WHEN REC_TYPE = 'T' AND ((JOB_REVISED_DATE BETWEEN @START_DATE AND @END_DATE) OR (TASK_START_DATE BETWEEN @START_DATE AND @END_DATE)
				 OR (@START_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR (@END_DATE BETWEEN TASK_START_DATE AND JOB_REVISED_DATE) OR TASK_START_DATE < @START_DATE) THEN 1
				   WHEN REC_TYPE <> 'T' THEN 1 ELSE 0 END)
				 OR REC_TYPE = 'ADA' OR REC_TYPE = 'ADHO'
			ORDER BY 
				#MY_DATA.EMP_CODE,SORT;
		END
	END
		
		--SELECT * FROM #EMP_AVAILABILITY
		--SELECT * FROM #EMP_ACTUALIZATION

	UPDATE #MY_DATA_DS
	SET FunctionEstimateCode = NULL WHERE FunctionEstimateCode = ''

	UPDATE #MY_DATA_DS
	SET TotalHoursAllocated = (SELECT SUM(HOURS) FROM [#MY_DATA_DS] B WHERE #MY_DATA_DS.EmployeeCode = B.EmployeeCode)

	UPDATE #MY_DATA_DS
	SET PercentUtilized = TotalHoursAllocated / DirectHoursGoal * 100

	UPDATE #MY_DATA_DS
	SET SupervisorName = (SELECT CASE WHEN SUP.EMP_MI IS NULL OR SUP.EMP_MI = '' THEN SUP.EMP_FNAME + ' ' + SUP.EMP_LNAME ELSE SUP.EMP_FNAME + ' ' + SUP.EMP_MI + '. ' + SUP.EMP_LNAME END
								FROM [dbo].[EMPLOYEE_CLOAK] AS SUP WHERE SUP.EMP_CODE = #MY_DATA_DS.SupervisorCode)

 	/* Added 08/19/19 - Get employee default function code if exists, else billing will use employee rate */
	UPDATE #MY_DATA_DS
	SET FunctionCode = (SELECT (DEF_FNC_CODE) FROM EMPLOYEE WHERE EMPLOYEE.EMP_CODE = #MY_DATA_DS.EmployeeCode) --EMP_DEF_FNC_CODE not used
	WHERE ISNULL(FunctionCode, '') = ''

	UPDATE #MY_DATA_DS
	SET FunctionDescription = (SELECT (FNC_DESCRIPTION) FROM FUNCTIONS WHERE FUNCTIONS.FNC_CODE = #MY_DATA_DS.FunctionCode) --EMP_DEF_FNC_CODE not used
	WHERE ISNULL(FunctionDescription, '') = ''

	UPDATE #MY_DATA_DS SET BillableAmount = ISNULL((BILLING_RATE * [Hours]),0)
		FROM #MY_DATA_DS ptl
			INNER JOIN dbo.JOB_LOG JL ON ptl.JobNumber = JL.JOB_NUMBER
			LEFT OUTER JOIN dbo.FUNCTIONS F ON F.FNC_CODE = ptl.FunctionCode --ptl.FunctionEstimateCode = F.FNC_CODE
			CROSS APPLY dbo.advtf_get_billing_rate_ps (ptl.EmployeeCode, CASE WHEN F.FNC_TYPE = 'E' THEN [Date] ELSE NULL END, ptl.FunctionCode, ptl.ClientCode, ptl.DivisionCode, ptl.ProductCode, JL.SC_CODE, F.FNC_TYPE, ptl.JobNumber, ptl.ComponentNumber, NULL ) AS RATES
			--CROSS APPLY dbo.advtf_get_billing_rate_ps (ptl.EmployeeCode, CASE WHEN F.FNC_TYPE = 'E' THEN GETDATE() ELSE NULL END, ptl.FunctionEstimateCode, ptl.ClientCode, ptl.DivisionCode, ptl.ProductCode, JL.SC_CODE, F.FNC_TYPE, ptl.JobNumber, ptl.ComponentNumber, NULL ) AS RATES
	
--SELECT * FROM #MY_DATA_DS
if @IncludeActuals = 1
BEGIN
	CREATE TABLE #ACTUALS 
	(
		[ROW_ID] [int] IDENTITY(1,1) NOT NULL,
		[EMP_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[JOB_NUMBER] INT,
		[JOB_COMPONENT_NBR] INT,
		--[SEQ_NBR] INT,		
		[FNC_CODE] VARCHAR(6) COLLATE SQL_Latin1_General_CP1_CS_AS,
		[HRS_POSTED] DECIMAL(18,6),
		[AMOUNT] DECIMAL(18,6),
		[EMP_DATE] SMALLDATETIME,
		[WEEK_OF_YEAR] SMALLDATETIME,
		[MONTH_OF_YEAR] INT,
		[DAY_OF_YEAR] INT, 
		[ALERT_ID] INT

	);
	--SELECT @EMP_LIST, @DEPTS
	INSERT INTO #ACTUALS
		SELECT ET.EMP_CODE, ETD.JOB_NUMBER, ETD.JOB_COMPONENT_NBR, ETD.FNC_CODE, EMP_HOURS, ETD.LINE_TOTAL,
		ET.EMP_DATE, DATEADD(DD, 1, DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,ET.EMP_DATE)) , 104 ) ) + (DATEPART(wk,ET.EMP_DATE)-1), 6)),DATEPART(mm,ET.EMP_DATE), DATEPART(dayofyear,ET.EMP_DATE), ETD.ALERT_ID
		FROM EMP_TIME_DTL AS ETD INNER JOIN 
			 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID INNER JOIN
			 EMPLOYEE E ON ET.EMP_CODE = E.EMP_CODE  
		WHERE ET.EMP_DATE BETWEEN @START_DATE AND @END_DATE AND	
			  (ET.EMP_CODE IN (SELECT * FROM dbo.udf_split_list(@EMP_LIST, ',')) OR @EMP_LIST = '') AND
			  (E.DP_TM_CODE IN (SELECT * FROM dbo.udf_split_list(@DEPTS, ',')) OR @DEPTS = '')

	--SELECT * FROM #ACTUALS
	IF @SUMMARY_LEVEL = 1
	BEGIN

		INSERT INTO #MY_DATA_DS
		SELECT E.OFFICE_CODE,O.OFFICE_NAME,E.DP_TM_CODE,DT.DP_TM_DESC, A.EMP_CODE, ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
			   E.SUPERVISOR_CODE,'', (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), E.DIRECT_HRS_PER, 
			   0,0,0,
			   C.CL_CODE,C.CL_NAME, D.DIV_CODE,D.DIV_NAME,P.PRD_CODE,P.PRD_DESCRIPTION,
			   A.JOB_NUMBER, JL.JOB_DESC, A.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, A.FNC_CODE, F.FNC_DESCRIPTION, NULL, A.ALERT_ID, 0,NULL, NULL,NULL, 0,0,0,0,0,A.EMP_DATE,0,0,0,NULL, A.HRS_POSTED, A.AMOUNT
		FROM #ACTUALS A INNER JOIN
			EMPLOYEE E ON A.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN
			OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE LEFT OUTER JOIN
			DEPT_TEAM DT ON DT.DP_TM_CODE = E.DP_TM_CODE LEFT OUTER JOIN
			JOB_COMPONENT JC ON JC.JOB_NUMBER = A.JOB_NUMBER AND JC.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR LEFT OUTER JOIN
			JOB_LOG JL ON JL.JOB_NUMBER = JC.JOB_NUMBER LEFT OUTER JOIN
			PRODUCT P ON P.PRD_CODE = JL.PRD_CODE AND P.DIV_CODE = JL.DIV_CODE AND P.CL_CODE = JL.CL_CODE LEFT OUTER JOIN
			DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
			CLIENT C ON C.CL_CODE = D.CL_CODE LEFT OUTER JOIN
			FUNCTIONS F ON F.FNC_CODE = A.FNC_CODE 
		WHERE ((A.ALERT_ID IS NULL) OR (A.ALERT_ID NOT IN (SELECT AlertID FROM #MY_DATA_DS)) 
			  OR (A.ALERT_ID IS NOT NULL AND CAST(A.ALERT_ID AS VARCHAR) + '/' + A.EMP_CODE + '/' + A.FNC_CODE NOT IN (SELECT CAST(AlertID AS VARCHAR) + '/' + EmployeeCode + '/' + FunctionCode FROM #MY_DATA_DS)))
			  
		--SELECT * FROM #MY_DATA_DS
		UPDATE #MY_DATA_DS
		SET SupervisorName = (SELECT CASE WHEN SUP.EMP_MI IS NULL OR SUP.EMP_MI = '' THEN SUP.EMP_FNAME + ' ' + SUP.EMP_LNAME ELSE SUP.EMP_FNAME + ' ' + SUP.EMP_MI + '. ' + SUP.EMP_LNAME END
									FROM [dbo].[EMPLOYEE_CLOAK] AS SUP WHERE SUP.EMP_CODE = #MY_DATA_DS.SupervisorCode)

		UPDATE #MY_DATA_DS
		SET AssignmentID = (SELECT ALERT_SEQ_NBR FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE AssignmentID = 0

		UPDATE #MY_DATA_DS
		SET AssignmentDescription = (SELECT [SUBJECT] FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE AssignmentDescription IS NULL

		UPDATE #MY_DATA_DS
		SET StartDate = (SELECT [START_DATE] FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE StartDate IS NULL

		UPDATE #MY_DATA_DS
		SET DueDate = (SELECT DUE_DATE FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE DueDate IS NULL

		UPDATE #MY_DATA_DS
		SET DirectHoursGoal = (DirectHoursGoalPercent * 0.010000) * (HoursAvailable)
		WHERE DirectHoursGoal = 0

		UPDATE #MY_DATA_DS
		SET TotalHoursAllocated = (SELECT SUM(HOURS) FROM [#MY_DATA_DS] B WHERE #MY_DATA_DS.EmployeeCode = B.EmployeeCode)
		WHERE TotalHoursAllocated = 0

		UPDATE #MY_DATA_DS
		SET PercentUtilized = TotalHoursAllocated / DirectHoursGoal * 100
		WHERE PercentUtilized = 0
		

		--UPDATE #MY_DATA_DS
		--SET ActualHours = ISNULL((SELECT SUM(HRS_POSTED) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND EMP_DATE = #MY_DATA_DS.[Date] AND #ACTUALS.ALERT_ID IS NULL),0)

		UPDATE #MY_DATA_DS
		SET ActualHours = ISNULL((SELECT SUM(HRS_POSTED) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND EMP_DATE = #MY_DATA_DS.[Date] AND #ACTUALS.ALERT_ID = #MY_DATA_DS.AlertID AND #ACTUALS.EMP_CODE = #MY_DATA_DS.EmployeeCode),0)		
		WHERE ActualHours IS NULL
		--SELECT * FROM #MY_DATA_DS
		--ISNULL((SELECT SUM(EMP_HOURS) 
		--								FROM EMP_TIME_DTL AS ETD INNER JOIN 
		--									 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
		--							   WHERE ETD.ALERT_ID = #MY_DATA_DS.AlertID AND EMP_DATE = #MY_DATA_DS.[Date]
		--							   GROUP BY ET.EMP_CODE),0) +
						  --ISNULL((SELECT SUM(EMP_HOURS) 
								--		FROM EMP_TIME_DTL AS ETD INNER JOIN 
								--			 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
								--	   WHERE ETD.JOB_NUMBER = #MY_DATA_DS.JobNumber AND ETD.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND ETD.FNC_CODE = #MY_DATA_DS.FunctionCode AND EMP_DATE = #MY_DATA_DS.[Date]-- AND ETD.ALERT_ID IS NULL
								--	   GROUP BY ET.EMP_CODE),0)

		--UPDATE #MY_DATA_DS 
		--SET ActualAmount = ISNULL((SELECT SUM(AMOUNT) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND EMP_DATE = #MY_DATA_DS.[Date] AND #ACTUALS.ALERT_ID IS NULL),0)

		UPDATE #MY_DATA_DS
		SET ActualAmount = ISNULL((SELECT SUM(AMOUNT) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND EMP_DATE = #MY_DATA_DS.[Date] AND #ACTUALS.ALERT_ID = #MY_DATA_DS.AlertID AND #ACTUALS.EMP_CODE = #MY_DATA_DS.EmployeeCode),0)
		WHERE ActualAmount IS NULL
		--UPDATE #MY_DATA_DS SET ActualAmount = ISNULL((BILLING_RATE * ActualHours),0)
		--	FROM #MY_DATA_DS ptl
		--		INNER JOIN dbo.JOB_LOG JL ON ptl.JobNumber = JL.JOB_NUMBER
		--		LEFT OUTER JOIN dbo.FUNCTIONS F ON F.FNC_CODE = ptl.FunctionCode --ptl.FunctionEstimateCode = F.FNC_CODE
		--		CROSS APPLY dbo.advtf_get_billing_rate_ps (ptl.EmployeeCode, CASE WHEN F.FNC_TYPE = 'E' THEN [Date] ELSE NULL END, ptl.FunctionCode, ptl.ClientCode, ptl.DivisionCode, ptl.ProductCode, JL.SC_CODE, F.FNC_TYPE, ptl.JobNumber, ptl.ComponentNumber, NULL ) AS RATES
	END
	IF @SUMMARY_LEVEL = 2
	BEGIN		

		INSERT INTO #MY_DATA_DS
		SELECT E.OFFICE_CODE,O.OFFICE_NAME,E.DP_TM_CODE,DT.DP_TM_DESC, A.EMP_CODE, ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
			   E.SUPERVISOR_CODE,'', (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), E.DIRECT_HRS_PER, 0,0,0, C.CL_CODE,C.CL_NAME, D.DIV_CODE,D.DIV_NAME,P.PRD_CODE,P.PRD_DESCRIPTION,
			   A.JOB_NUMBER, JL.JOB_DESC, A.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, A.FNC_CODE, F.FNC_DESCRIPTION, NULL, A.ALERT_ID, 0,NULL, NULL,NULL, 0,0,0,0,0,A.WEEK_OF_YEAR,0,0,0,NULL, SUM(A.HRS_POSTED), SUM(A.AMOUNT)
		FROM #ACTUALS A INNER JOIN
			EMPLOYEE E ON A.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN
			OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE LEFT OUTER JOIN
			DEPT_TEAM DT ON DT.DP_TM_CODE = E.DP_TM_CODE LEFT OUTER JOIN
			JOB_COMPONENT JC ON JC.JOB_NUMBER = A.JOB_NUMBER AND JC.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR LEFT OUTER JOIN
			JOB_LOG JL ON JL.JOB_NUMBER = JC.JOB_NUMBER LEFT OUTER JOIN
			PRODUCT P ON P.PRD_CODE = JL.PRD_CODE AND P.DIV_CODE = JL.DIV_CODE AND P.CL_CODE = JL.CL_CODE LEFT OUTER JOIN
			DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
			CLIENT C ON C.CL_CODE = D.CL_CODE LEFT OUTER JOIN
			FUNCTIONS F ON F.FNC_CODE = A.FNC_CODE 
		WHERE ((A.ALERT_ID IS NULL) OR (A.ALERT_ID NOT IN (SELECT AlertID FROM #MY_DATA_DS)) 
			  OR (A.ALERT_ID IS NOT NULL AND CAST(A.ALERT_ID AS VARCHAR) + '/' + A.EMP_CODE + '/' + A.FNC_CODE NOT IN (SELECT CAST(AlertID AS VARCHAR) + '/' + EmployeeCode + '/' + FunctionCode FROM #MY_DATA_DS)))
		GROUP BY A.EMP_CODE, A.JOB_NUMBER, A.JOB_COMPONENT_NBR,A.FNC_CODE,A.WEEK_OF_YEAR, E.OFFICE_CODE,O.OFFICE_NAME,E.DP_TM_CODE,DT.DP_TM_DESC,ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
			   E.SUPERVISOR_CODE, E.DIRECT_HRS_PER, C.CL_CODE,C.CL_NAME, D.DIV_CODE,D.DIV_NAME,P.PRD_CODE,P.PRD_DESCRIPTION,
			    JL.JOB_DESC, JC.JOB_COMP_DESC, F.FNC_DESCRIPTION, A.ALERT_ID

		UPDATE #MY_DATA_DS
		SET SupervisorName = (SELECT CASE WHEN SUP.EMP_MI IS NULL OR SUP.EMP_MI = '' THEN SUP.EMP_FNAME + ' ' + SUP.EMP_LNAME ELSE SUP.EMP_FNAME + ' ' + SUP.EMP_MI + '. ' + SUP.EMP_LNAME END
									FROM [dbo].[EMPLOYEE_CLOAK] AS SUP WHERE SUP.EMP_CODE = #MY_DATA_DS.SupervisorCode)

		UPDATE #MY_DATA_DS
		SET AssignmentID = (SELECT ALERT_SEQ_NBR FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE AssignmentID = 0

		UPDATE #MY_DATA_DS
		SET AssignmentDescription = (SELECT [SUBJECT] FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE AssignmentDescription IS NULL

		UPDATE #MY_DATA_DS
		SET StartDate = (SELECT [START_DATE] FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE StartDate IS NULL

		UPDATE #MY_DATA_DS
		SET DueDate = (SELECT DUE_DATE FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE DueDate IS NULL

		UPDATE #MY_DATA_DS
		SET DirectHoursGoal = (DirectHoursGoalPercent * 0.010000) * (HoursAvailable)
		WHERE DirectHoursGoal = 0

		UPDATE #MY_DATA_DS
		SET TotalHoursAllocated = (SELECT SUM(HOURS) FROM [#MY_DATA_DS] B WHERE #MY_DATA_DS.EmployeeCode = B.EmployeeCode)
		WHERE TotalHoursAllocated = 0

		UPDATE #MY_DATA_DS
		SET PercentUtilized = TotalHoursAllocated / DirectHoursGoal * 100
		WHERE PercentUtilized = 0

		--SELECT * FROM #MY_DATA_DS

		--UPDATE #MY_DATA_DS
		--SET ActualHours = ISNULL((SELECT SUM(HRS_POSTED) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND WEEK_OF_YEAR = #MY_DATA_DS.[Date] AND #ACTUALS.ALERT_ID IS NULL),0)

		UPDATE #MY_DATA_DS
		SET ActualHours = ISNULL((SELECT SUM(HRS_POSTED) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND WEEK_OF_YEAR = #MY_DATA_DS.[Date] AND #ACTUALS.ALERT_ID = #MY_DATA_DS.AlertID AND #ACTUALS.EMP_CODE = #MY_DATA_DS.EmployeeCode),0)
		WHERE ActualHours IS NULL

		--UPDATE #MY_DATA_DS
		--SET ActualHours = 
		--	ISNULL((SELECT SUM(EMP_HOURS) 
		--								FROM EMP_TIME_DTL AS ETD INNER JOIN 
		--									 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
		--							   WHERE ETD.JOB_NUMBER = #MY_DATA_DS.JobNumber AND ETD.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND ETD.FNC_CODE = #MY_DATA_DS.FunctionCode
		--									 AND DATEADD(DD, 1, DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,EMP_DATE)) , 104 ) ) + (DATEPART(wk,EMP_DATE)-1), 6)) = #MY_DATA_DS.[Date]
		--							   ),0)
		--ISNULL((SELECT SUM(EMP_HOURS) 
		--								FROM EMP_TIME_DTL AS ETD INNER JOIN 
		--									 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
		--							   WHERE ET.EMP_CODE = #MY_DATA_DS.EmployeeCode AND ETD.ALERT_ID = #MY_DATA_DS.AlertID 
		--									 AND DATEADD(DD, 1, DATEADD(wk, DATEDIFF(wk, 6, convert( datetime , '1.1.' + convert( varchar , DATEPART(yy,EMP_DATE)) , 104 ) ) + (DATEPART(wk,EMP_DATE)-1), 6)) = #MY_DATA_DS.[Date]
		--							   GROUP BY ET.EMP_CODE),0)

		--UPDATE #MY_DATA_DS 
		--SET ActualAmount = ISNULL((SELECT SUM(AMOUNT) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND WEEK_OF_YEAR = #MY_DATA_DS.[Date] AND #ACTUALS.ALERT_ID IS NULL),0)

		UPDATE #MY_DATA_DS
		SET ActualAmount = ISNULL((SELECT SUM(AMOUNT) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND WEEK_OF_YEAR = #MY_DATA_DS.[Date] AND #ACTUALS.ALERT_ID = #MY_DATA_DS.AlertID AND #ACTUALS.EMP_CODE = #MY_DATA_DS.EmployeeCode),0)
		WHERE ActualAmount IS NULL

		--UPDATE #MY_DATA_DS SET ActualAmount = ISNULL((BILLING_RATE * ActualHours),0)
		--	FROM #MY_DATA_DS ptl
		--		INNER JOIN dbo.JOB_LOG JL ON ptl.JobNumber = JL.JOB_NUMBER
		--		LEFT OUTER JOIN dbo.FUNCTIONS F ON F.FNC_CODE = ptl.FunctionCode --ptl.FunctionEstimateCode = F.FNC_CODE
		--		CROSS APPLY dbo.advtf_get_billing_rate_ps (ptl.EmployeeCode, CASE WHEN F.FNC_TYPE = 'E' THEN [Date] ELSE NULL END, ptl.FunctionCode, ptl.ClientCode, ptl.DivisionCode, ptl.ProductCode, JL.SC_CODE, F.FNC_TYPE, ptl.JobNumber, ptl.ComponentNumber, NULL ) AS RATES
	END
	IF @SUMMARY_LEVEL = 3
	BEGIN	

		INSERT INTO #MY_DATA_DS
		SELECT E.OFFICE_CODE,O.OFFICE_NAME,E.DP_TM_CODE,DT.DP_TM_DESC, A.EMP_CODE, ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
			   E.SUPERVISOR_CODE,'', (SELECT SUM(HRS_AVAIL) FROM #EMP_AVAILABILITY WHERE A.EMP_CODE = #EMP_AVAILABILITY.EMP_CODE), E.DIRECT_HRS_PER, 0,0,0, C.CL_CODE,C.CL_NAME, D.DIV_CODE,D.DIV_NAME,P.PRD_CODE,P.PRD_DESCRIPTION,
			   A.JOB_NUMBER, JL.JOB_DESC, A.JOB_COMPONENT_NBR, JC.JOB_COMP_DESC, A.FNC_CODE, F.FNC_DESCRIPTION, NULL, A.ALERT_ID, 0,NULL, NULL,NULL, 0,0,0,0,0, CONVERT(datetime, CAST(DATEPART(mm,A.EMP_DATE) AS VARCHAR) + '/1/' + CAST(DATEPART(YYYY,A.EMP_DATE) AS VARCHAR)),0,0,0,NULL, SUM(A.HRS_POSTED), SUM(A.AMOUNT)
		FROM #ACTUALS A INNER JOIN
			EMPLOYEE E ON A.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN
			OFFICE O ON O.OFFICE_CODE = E.OFFICE_CODE LEFT OUTER JOIN
			DEPT_TEAM DT ON DT.DP_TM_CODE = E.DP_TM_CODE LEFT OUTER JOIN
			JOB_COMPONENT JC ON JC.JOB_NUMBER = A.JOB_NUMBER AND JC.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR LEFT OUTER JOIN
			JOB_LOG JL ON JL.JOB_NUMBER = JC.JOB_NUMBER LEFT OUTER JOIN
			PRODUCT P ON P.PRD_CODE = JL.PRD_CODE AND P.DIV_CODE = JL.DIV_CODE AND P.CL_CODE = JL.CL_CODE LEFT OUTER JOIN
			DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE LEFT OUTER JOIN
			CLIENT C ON C.CL_CODE = D.CL_CODE LEFT OUTER JOIN
			FUNCTIONS F ON F.FNC_CODE = A.FNC_CODE 
		WHERE ((A.ALERT_ID IS NULL) OR (A.ALERT_ID NOT IN (SELECT AlertID FROM #MY_DATA_DS)) 
			  OR (A.ALERT_ID IS NOT NULL AND CAST(A.ALERT_ID AS VARCHAR) + '/' + A.EMP_CODE + '/' + A.FNC_CODE NOT IN (SELECT CAST(AlertID AS VARCHAR) + '/' + EmployeeCode + '/' + FunctionCode FROM #MY_DATA_DS)))
		GROUP BY A.EMP_CODE, A.JOB_NUMBER, A.JOB_COMPONENT_NBR,A.FNC_CODE,CONVERT(datetime, CAST(DATEPART(mm,A.EMP_DATE) AS VARCHAR) + '/1/' + CAST(DATEPART(YYYY,A.EMP_DATE) AS VARCHAR)), E.OFFICE_CODE,O.OFFICE_NAME,E.DP_TM_CODE,DT.DP_TM_DESC,ISNULL(E.EMP_FNAME+' ','')+ISNULL(E.EMP_MI+'. ','')+ISNULL(E.EMP_LNAME,''),
			   E.SUPERVISOR_CODE, E.DIRECT_HRS_PER, C.CL_CODE,C.CL_NAME, D.DIV_CODE,D.DIV_NAME,P.PRD_CODE,P.PRD_DESCRIPTION,
			    JL.JOB_DESC, JC.JOB_COMP_DESC, F.FNC_DESCRIPTION, A.ALERT_ID

		UPDATE #MY_DATA_DS
		SET SupervisorName = (SELECT CASE WHEN SUP.EMP_MI IS NULL OR SUP.EMP_MI = '' THEN SUP.EMP_FNAME + ' ' + SUP.EMP_LNAME ELSE SUP.EMP_FNAME + ' ' + SUP.EMP_MI + '. ' + SUP.EMP_LNAME END
									FROM [dbo].[EMPLOYEE_CLOAK] AS SUP WHERE SUP.EMP_CODE = #MY_DATA_DS.SupervisorCode)

		UPDATE #MY_DATA_DS
		SET AssignmentID = (SELECT ALERT_SEQ_NBR FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE AssignmentID = 0

		UPDATE #MY_DATA_DS
		SET AssignmentDescription = (SELECT [SUBJECT] FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE AssignmentDescription IS NULL

		UPDATE #MY_DATA_DS
		SET StartDate = (SELECT [START_DATE] FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE StartDate IS NULL

		UPDATE #MY_DATA_DS
		SET DueDate = (SELECT DUE_DATE FROM ALERT WHERE ALERT.ALERT_ID = #MY_DATA_DS.AlertID)
		WHERE DueDate IS NULL

		UPDATE #MY_DATA_DS
		SET DirectHoursGoal = (DirectHoursGoalPercent * 0.010000) * (HoursAvailable)
		WHERE DirectHoursGoal = 0

		UPDATE #MY_DATA_DS
		SET TotalHoursAllocated = (SELECT SUM(HOURS) FROM [#MY_DATA_DS] B WHERE #MY_DATA_DS.EmployeeCode = B.EmployeeCode)
		WHERE TotalHoursAllocated = 0

		UPDATE #MY_DATA_DS
		SET PercentUtilized = TotalHoursAllocated / DirectHoursGoal * 100
		WHERE PercentUtilized = 0

		--SELECT * FROM #MY_DATA_DS

		--UPDATE #MY_DATA_DS
		--SET ActualHours = ISNULL((SELECT SUM(HRS_POSTED) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND MONTH_OF_YEAR = DATEPART(mm,#MY_DATA_DS.[Date]) AND #ACTUALS.ALERT_ID IS NULL),0)

		UPDATE #MY_DATA_DS
		SET ActualHours = ISNULL((SELECT SUM(HRS_POSTED) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND MONTH_OF_YEAR = DATEPART(mm,#MY_DATA_DS.[Date]) AND #ACTUALS.ALERT_ID = #MY_DATA_DS.AlertID AND #ACTUALS.EMP_CODE = #MY_DATA_DS.EmployeeCode),0)
		WHERE ActualHours IS NULL

		--UPDATE #MY_DATA_DS
		--SET ActualHours = 
		--ISNULL((SELECT SUM(EMP_HOURS) 
		--								FROM EMP_TIME_DTL AS ETD INNER JOIN 
		--									 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
		--							   WHERE ETD.JOB_NUMBER = #MY_DATA_DS.JobNumber AND ETD.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND ETD.FNC_CODE = #MY_DATA_DS.FunctionCode
		--									 AND DATEPART(mm,EMP_DATE) = DATEPART(mm,#MY_DATA_DS.[Date]) AND EMP_DATE BETWEEN @START_DATE AND @END_DATE
		--							   ),0)
		--ISNULL((SELECT SUM(EMP_HOURS) 
		--								FROM EMP_TIME_DTL AS ETD INNER JOIN 
		--									 EMP_TIME AS ET ON ETD.ET_ID = ET.ET_ID 
		--							   WHERE ET.EMP_CODE = #MY_DATA_DS.EmployeeCode AND ETD.ALERT_ID = #MY_DATA_DS.AlertID AND DATEPART(mm,EMP_DATE) = DATEPART(mm,#MY_DATA_DS.[Date]) AND EMP_DATE BETWEEN @START_DATE AND @END_DATE
		--							   GROUP BY ET.EMP_CODE),0)

		--UPDATE #MY_DATA_DS 
		--SET ActualAmount = ISNULL((SELECT SUM(AMOUNT) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND MONTH_OF_YEAR = DATEPART(mm,#MY_DATA_DS.[Date]) AND #ACTUALS.ALERT_ID IS NULL),0)

		UPDATE #MY_DATA_DS
		SET ActualAmount = ISNULL((SELECT SUM(AMOUNT) FROM #ACTUALS WHERE #ACTUALS.JOB_NUMBER = #MY_DATA_DS.JobNumber AND #ACTUALS.JOB_COMPONENT_NBR = #MY_DATA_DS.ComponentNumber AND #ACTUALS.FNC_CODE = #MY_DATA_DS.FunctionCode AND MONTH_OF_YEAR = DATEPART(mm,#MY_DATA_DS.[Date]) AND #ACTUALS.ALERT_ID = #MY_DATA_DS.AlertID AND #ACTUALS.EMP_CODE = #MY_DATA_DS.EmployeeCode),0)
		WHERE ActualAmount IS NULL
		--UPDATE #MY_DATA_DS SET ActualAmount = ISNULL((BILLING_RATE * ActualHours),0)
		--	FROM #MY_DATA_DS ptl
		--		INNER JOIN dbo.JOB_LOG JL ON ptl.JobNumber = JL.JOB_NUMBER
		--		LEFT OUTER JOIN dbo.FUNCTIONS F ON F.FNC_CODE = ptl.FunctionCode --ptl.FunctionEstimateCode = F.FNC_CODE
		--		CROSS APPLY dbo.advtf_get_billing_rate_ps (ptl.EmployeeCode, CASE WHEN F.FNC_TYPE = 'E' THEN [Date] ELSE NULL END, ptl.FunctionCode, ptl.ClientCode, ptl.DivisionCode, ptl.ProductCode, JL.SC_CODE, F.FNC_TYPE, ptl.JobNumber, ptl.ComponentNumber, NULL ) AS RATES
	END
	
END
	

	--SELECT @START_DATE,@END_DATE
	--SELECT '#EMP_AVAILABILITY_BY_WEEK' '#EMP_AVAILABILITY_BY_WEEK', * FROM #EMP_AVAILABILITY_BY_WEEK /**** DEBUG ****/
	--SELECT '#MY_DATA' '#MY_DATA', * FROM #MY_DATA ORDER BY EMP_CODE, JOB_NUMBER  /**** DEBUG ****/
	--SELECT '#MY_DATA_DS' '#MY_DATA_DS', * FROM #MY_DATA_DS --ORDER BY EMP_CODE, JOB_NUMBER  /**** DEBUG ****/
		    
	SELECT ID,
		OfficeCode,
		OfficeDescription,
		DepartmentCode,
		DepartmentName,
		EmployeeCode,
		EmployeeName,
		SupervisorCode,
		SupervisorName,
		HoursAvailable,
		DirectHoursGoalPercent ,
		DirectHoursGoal ,
		TotalHoursAllocated,
		PercentUtilized,
		ClientCode,
		ClientName,
		DivisionCode,
		DivisionName,
		ProductCode,
		ProductName,
		JobNumber,
		JobDescription,
		ComponentNumber,
		ComponentDescription,
		FunctionCode,
		FunctionDescription,
		FunctionEstimateCode,
		--AlertID,
		AssignmentID,
		AssignmentDescription ,
		StartDate,
		DueDate,
		HoursAllowed,
		HoursPerDay,
		BeginningBalance,
		HoursPosted,
		HoursLeft,
		[Date],
		[Hours],
		BillableAmount,
		TotalWorkingDays, 
		ActualHours,
		ActualAmount
	FROM #MY_DATA_DS
	--WHERE ([Hours] > 0 OR AssignmentID = 0) /* Added 08/19/19 */
	ORDER BY EmployeeCode, JobNumber, [Date] 

 END  

		
        DROP TABLE #EMP_AVAILABILITY;
		DROP TABLE #EMP_ACTUALIZATION;
        DROP TABLE #DAY_RANGE;
        DROP TABLE #EMP_LIST;
        DROP TABLE #WORK_DAY;
        DROP TABLE #JOBS;
        DROP TABLE #JOBS_TIME_POSTED;
		DROP TABLE #ASSIGNMENTS;
        DROP TABLE #MY_DATA;
/*============== QUERY ==============*/
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
