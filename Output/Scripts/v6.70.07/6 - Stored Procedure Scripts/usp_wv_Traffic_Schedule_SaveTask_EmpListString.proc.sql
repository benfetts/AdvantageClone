IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[usp_wv_Traffic_Schedule_SaveTask_EmpListString]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[usp_wv_Traffic_Schedule_SaveTask_EmpListString] 
GO

CREATE PROCEDURE [dbo].[usp_wv_Traffic_Schedule_SaveTask_EmpListString] 
@EMP_LIST VARCHAR(8000),
@JOB_NUMBER INT,
@JOB_COMPONENT_NBR INT,
@SEQ_NBR SMALLINT,
@UserCode VARCHAR(100),
@ForceEmployee BIT = 0
AS

	IF DATALENGTH(@EMP_LIST) = 0
		BEGIN
			DELETE FROM JOB_TRAFFIC_DET_EMPS WITH(ROWLOCK) WHERE (JOB_NUMBER = @JOB_NUMBER) AND (JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR) AND (SEQ_NBR = @SEQ_NBR);
		END
	ELSE
		BEGIN
			DECLARE
			@USER_ENTERED TABLE
			(
			EMP_CODE VARCHAR(6)
			);
			DECLARE
			@TABLE_LIST TABLE
			(
			EMP_CODE VARCHAR(6)
			);
			DECLARE
			@RETURN_MESSAGES TABLE
			(
			MESSAGE VARCHAR(200)
			);


			DECLARE 

			@EMP_CODE VARCHAR(6),
			@POS INT,
			@IS_IN_TABLE INT,
			@IS_VALID_EMP_CODE INT,
			@DEFAULT_HOURS DECIMAL(6,2),
			@IS_TERMINATED SMALLINT,
			@EMP_EXISTS SMALLINT,
			@EMP_FML VARCHAR(100),
			@OFFICE_CODE VARCHAR(6)

			DECLARE @OfficeRestrictions AS INTEGER	
			DECLARE @EMP_CDE AS varchar(6),@EmpRestrictions SMALLINT

			SELECT @EmpRestrictions = ISNULL(COUNT(1),0) FROM SEC_EMP WHERE UPPER(USER_ID) = UPPER(@UserCode)

			SELECT @EMP_CDE = EMP_CODE FROM [dbo].[SEC_USER] WHERE UPPER([USER_CODE]) = UPPER(@UserCode)
			SELECT @OfficeRestrictions = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CDE
			
			if @ForceEmployee = 1
			BEGIN
				SET @EmpRestrictions = 0
				SET @OfficeRestrictions = 0
			END

			------TEST DATA:
			----SET @EMP_LIST = 'rcs,ama,lmn,wab,jtg,ASDF,mac,'
			----SET @JOB_NUMBER = 15
			----SET @JOB_COMPONENT_NBR = 1
			----SET @SEQ_NBR = 1

			SELECT @DEFAULT_HOURS = JOB_HRS FROM JOB_TRAFFIC_DET WITH(NOLOCK) WHERE (JOB_NUMBER = @JOB_NUMBER) AND (JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR) AND (SEQ_NBR = @SEQ_NBR);


			--GET WHAT'S ALREADY IN REAL TABLE INTO:
			INSERT INTO @TABLE_LIST(EMP_CODE)
			SELECT EMP_CODE FROM JOB_TRAFFIC_DET_EMPS WITH(NOLOCK) WHERE (JOB_NUMBER = @JOB_NUMBER) AND (JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR) AND (SEQ_NBR = @SEQ_NBR);


			--LOOP THROUGH LIST AND INSERT INTO 
			SET @EMP_LIST = LTRIM(RTRIM(@EMP_LIST)) + ','
			SET @POS = CHARINDEX(',',@EMP_LIST,1)

			IF REPLACE(@EMP_LIST,',','') <> ''
			BEGIN
				WHILE @POS > 0
					BEGIN
						SET @EMP_CODE = LTRIM(RTRIM(LEFT(@EMP_LIST, @POS - 1)));
						IF @EMP_CODE <> ''
						BEGIN
							SELECT @EMP_FML = ISNULL(EMPLOYEE.EMP_FNAME+' ','') + ISNULL(EMPLOYEE.EMP_MI+'. ','') + ISNULL(EMPLOYEE.EMP_LNAME,'') FROM EMPLOYEE WITH(NOLOCK) WHERE EMPLOYEE.EMP_CODE = @EMP_CODE;
			        		SET @EMP_FML = ISNULL(@EMP_FML,'');
			        	
							SELECT @EMP_EXISTS = COUNT(1) FROM EMPLOYEE WHERE (EMP_CODE = @EMP_CODE);
			        		IF @EMP_EXISTS = 0
			        		BEGIN
			        			INSERT INTO @RETURN_MESSAGES(MESSAGE) VALUES('Invalid Employee Code:  ' + @EMP_CODE + ' detected and not added');
			        		END

							if @OfficeRestrictions > 0
							Begin
								SELECT @OFFICE_CODE = OFFICE_CODE FROM EMPLOYEE WHERE (EMP_CODE = @EMP_CODE);
			        			SELECT @EMP_EXISTS = COUNT(1) FROM EMP_OFFICE WHERE (EMP_CODE = @EMP_CDE) AND (OFFICE_CODE = @OFFICE_CODE);
			        			IF @EMP_EXISTS = 0
			        			BEGIN
			        				INSERT INTO @RETURN_MESSAGES(MESSAGE) VALUES('Invalid Employee Code:  ' + @EMP_CODE + ' detected and not added');
			        			END
							End

							if @EmpRestrictions > 0
							Begin								
			        			SELECT @EMP_EXISTS = COUNT(1) FROM [dbo].[advtf_sec_emp] (@UserCode) WHERE (EMP_CODE = @EMP_CODE);
			        			IF @EMP_EXISTS = 0
			        			BEGIN
			        				INSERT INTO @RETURN_MESSAGES(MESSAGE) VALUES('Invalid Employee Code:  ' + @EMP_CODE + ' detected and not added');
			        			END
							End
			        	
							SELECT @IS_TERMINATED = COUNT(1) FROM EMPLOYEE WHERE (EMP_CODE = @EMP_CODE) AND (EMP_TERM_DATE <= GETDATE());
							--OVERRIDE TO KEEP AN EMPLOYEE THAT WAS ADDED TO THE SCHED WHEN NOT TERMINATED AND WAS THEN TERMINATED LATER
							IF EXISTS (SELECT EMP_CODE FROM @TABLE_LIST WHERE EMP_CODE = @EMP_CODE)
							BEGIN
								SET @IS_TERMINATED = 0;
							END
							IF @IS_TERMINATED > 0 
							BEGIN
			        			INSERT INTO @RETURN_MESSAGES(MESSAGE) VALUES('Terminated Employee:  ' + @EMP_CODE  + ' - ' + @EMP_FML + ' detected and not added');
							END
						
							IF @IS_TERMINATED = 0 AND @EMP_EXISTS > 0
								BEGIN
									INSERT INTO @USER_ENTERED(EMP_CODE) VALUES(@EMP_CODE);
								END
						END
					SET @EMP_LIST = RIGHT(@EMP_LIST,LEN(@EMP_LIST) - @POS);
					SET @POS = CHARINDEX(',',@EMP_LIST,1);
					END
			END

			DELETE FROM JOB_TRAFFIC_DET_EMPS WITH(ROWLOCK) WHERE ((JOB_NUMBER = @JOB_NUMBER) AND (JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR) AND (SEQ_NBR = @SEQ_NBR))
			AND JOB_TRAFFIC_DET_EMPS.EMP_CODE IN (SELECT EMP_CODE COLLATE DATABASE_DEFAULT FROM @TABLE_LIST WHERE EMP_CODE NOT IN (SELECT EMP_CODE COLLATE DATABASE_DEFAULT FROM @USER_ENTERED));

			INSERT INTO JOB_TRAFFIC_DET_EMPS WITH(ROWLOCK)(JOB_NUMBER, JOB_COMPONENT_NBR, SEQ_NBR, EMP_CODE, HOURS_ALLOWED, READ_ALERT)
			SELECT @JOB_NUMBER, @JOB_COMPONENT_NBR, @SEQ_NBR,EMP_CODE, @DEFAULT_HOURS, 0 FROM @USER_ENTERED 
			WHERE (EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  NOT IN (SELECT * FROM @TABLE_LIST)) AND EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  <> ''
			AND (EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  NOT IN (SELECT DISTINCT EMP_CODE FROM JOB_TRAFFIC_DET_EMPS WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR AND SEQ_NBR = @SEQ_NBR));

		END

		IF (SELECT COUNT(1) FROM @RETURN_MESSAGES) = 0
		BEGIN
			INSERT INTO @RETURN_MESSAGES(MESSAGE) VALUES('SUCCESS');
		END

		SELECT * FROM @RETURN_MESSAGES;

