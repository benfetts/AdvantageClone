IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[usp_wv_dto_assignments_alerts_manager]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE [dbo].[usp_wv_dto_assignments_alerts_manager]
GO
CREATE PROCEDURE [dbo].[usp_wv_dto_assignments_alerts_manager]
@EMP_CODE varchar(6) = NULL,
@INBOX_TYPE varchar(20), --Inbox (Current), Dismissed (Dismissed/Completed), Received (All), Drafts (Drafts)
@ShowAssignmentType varchar(30), --myalertassignments, myalerts, myalertsandassignments, allalertassignments, unassigned
@IsJobAlertsPage bit,
@GroupBy varchar(20),
@IncludeCompletedAssignments bit,
@RecordsToReturn int,
@FILTER_LEVEL varchar(20),

@SEARCH_CRITERIA varchar(max) = NULL,
@OFFICE_CODE varchar(4) = NULL,
@CL_CODE varchar(6) = NULL,
@DIV_CODE varchar(6) = NULL,
@PRD_CODE varchar(6) = NULL,
@CMP_ID int = NULL,
@CMP_CODE varchar(6) = NULL,
@JOB_NUMBER int = NULL,
@JOB_COMP_NUMBER int = NULL,
@ALERT_TYPE_ID int = NULL,
@ALERT_CAT_ID int = NULL,
@START_DATE smalldatetime = NULL,
@END_DATE smalldatetime = NULL,
@ALERT_LEVEL varchar(50) = NULL,
@VN_CODE varchar(6) = NULL,
@ESTIMATE_NUMBER int = NULL,
@EST_COMPONENT_NBR smallint = NULL,
@TASK_FNC_CODE varchar(10) = NULL,
@TASK_FNC_DESC varchar(40) = NULL,
--@ATB_NUMBER NOT USED
@ALRT_NOTIFY_HDR_ID int = NULL,
@ALERT_STATE_ID int = NULL,
@ID int = NULL,
@INCLUDE_BACKLOG bit = 0,
@DEBUG bit = 0

--@START_DATE_AS_OF_TODAY bit = 0,
--@START_AND_DUE_DATE_NOT_NULL bit = 0,
--@TASK_STATUS char(1) = '', --(P)rojected, (A)ctive, ''=All
--@GROUP_BY varchar(20) = 'XXX',

--@GET_NOTIFICATION_COUNT_ONLY bit = 0,
--@OFFSET decimal = 0
AS
--based on usp_wv_dto_dashboard_alert
--IF @GET_NOTIFICATION_COUNT_ONLY = 1
--	SET @INCLUDE_BACKLOG = 1

DECLARE @IncludeTasks bit
SET @IncludeTasks = 0

IF @ShowAssignmentType <> 'myalerts'
	SET @IncludeTasks = 1

CREATE TABLE #Cards (
	ALERT_ID int not null,
	[START_DATE] smalldatetime null,
	DUE_DATE smalldatetime null,
	READ_ALERT smallint null,
	TaskFunctionDescription varchar(40) null,
	TaskComment varchar(MAX) null,
	IsAlertCC bit NOT NULL,
	IsMyTaskTempComplete bit NOT NULL DEFAULT(0),
	TaskStatus varchar(10) NULL,
	CARD_SEQ_NBR int NULL,
	JobIsOnBoard bit NOT NULL DEFAULT(0),
	BOARD_ID int NULL,
	EXCLUDE_TASKS bit NOT NULL DEFAULT(0),
	TaskFunctionCode varchar(10) null,
	SEQ_NBR smallint null,
	JOB_COMPLETED_DATE smalldatetime null,
	EMP_CODE varchar(6) null,
	EST_LOG_DESC varchar(60) null,
	fromq int,
	IsUnassigned bit DEFAULT(0)
)

--Alert CC
INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, IsAlertCC, CARD_SEQ_NBR, fromq )
SELECT A.ALERT_ID, A.[START_DATE], A.DUE_DATE, AR.READ_ALERT, 1, AR.CARD_SEQ_NBR, 1
FROM dbo.ALERT A
	INNER JOIN dbo.ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID 
	--LEFT OUTER JOIN dbo.ALERT_RCPT_DISMISSED ARD ON A.ALERT_ID = ARD.ALERT_ID AND ARD.EMP_CODE = @EMP_CODE 
WHERE AR.EMP_CODE = @EMP_CODE 
AND COALESCE(AR.CURRENT_RCPT, 0) = 0
AND COALESCE(AR.CURRENT_NOTIFY, 0) = 0
AND COALESCE(A.IS_CS_REVIEW, 0) = 0
AND COALESCE(A.IS_DRAFT, 0) = 0
AND A.IS_WORK_ITEM = 1
--AND 1 = CASE 
--			WHEN LOWER(@INBOX_TYPE) = 'dismissed' AND ARD.ALERT_ID IS NOT NULL THEN 1
--			WHEN LOWER(@INBOX_TYPE) <> 'dismissed' THEN 1
--		END

--Alerts #2
INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, IsAlertCC, CARD_SEQ_NBR, fromq )
SELECT A.ALERT_ID, A.[START_DATE], A.DUE_DATE, AR.READ_ALERT, 1, AR.CARD_SEQ_NBR, 2
FROM dbo.ALERT A
	INNER JOIN dbo.ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID 
	--LEFT OUTER JOIN dbo.ALERT_RCPT_DISMISSED ARD ON A.ALERT_ID = ARD.ALERT_ID AND ARD.EMP_CODE = @EMP_CODE
WHERE AR.EMP_CODE = @EMP_CODE 
AND COALESCE(AR.CURRENT_RCPT, 0) = 0
AND COALESCE(AR.CURRENT_NOTIFY, 0) = 0
AND COALESCE(A.IS_CS_REVIEW, 0) = 0
AND COALESCE(A.IS_DRAFT, 0) = 0
AND COALESCE(A.IS_WORK_ITEM, 0) = 0
--AND 1 = CASE 
--			WHEN LOWER(@INBOX_TYPE) = 'dismissed' AND ARD.ALERT_ID IS NOT NULL THEN 1
--			WHEN LOWER(@INBOX_TYPE) <> 'dismissed' THEN 1
--		END

--Assignments Non-Routed
INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, IsAlertCC, CARD_SEQ_NBR, fromq )
SELECT A.ALERT_ID, A.[START_DATE], A.DUE_DATE, AR.READ_ALERT, 0, AR.CARD_SEQ_NBR, 3
FROM dbo.ALERT A
	INNER JOIN dbo.ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID 
WHERE 
	((@EMP_CODE IS NULL AND AR.EMP_CODE IS NULL) OR (@EMP_CODE IS NOT NULL AND AR.EMP_CODE = @EMP_CODE))
AND A.ASSIGNED_EMP_CODE IS NULL
AND	AR.CURRENT_NOTIFY = 1
AND COALESCE(A.IS_CS_REVIEW, 0) = 0
AND COALESCE(A.IS_DRAFT, 0) = 0
AND A.ALRT_NOTIFY_HDR_ID IS NULL
AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
AND A.IS_WORK_ITEM = 1

--AND 1 = CASE WHEN @START_AND_DUE_DATE_NOT_NULL = 1 THEN
--			CASE WHEN A.[START_DATE] IS NOT NULL AND A.DUE_DATE IS NOT NULL THEN 1 ELSE 0 END
--		ELSE 1 END
--AND 1 = CASE WHEN @START_DATE_AS_OF_TODAY = 1 THEN
--			CASE WHEN A.[START_DATE] <= GETDATE() OR A.[START_DATE] IS NULL THEN 1 ELSE 0 END
--		ELSE 1 END

----Assignments Routed
--INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, IsAlertCC, CARD_SEQ_NBR)
--SELECT A.ALERT_ID, A.[START_DATE], A.DUE_DATE, AR.READ_ALERT, 0, AR.CARD_SEQ_NBR
--FROM dbo.ALERT A
--	INNER JOIN dbo.ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID 
--WHERE A.ASSIGNED_EMP_CODE = @EMP_CODE
--AND AR.EMP_CODE = @EMP_CODE 
--AND AR.CURRENT_NOTIFY = 1
--AND COALESCE(A.IS_CS_REVIEW, 0) = 0
--AND COALESCE(A.IS_DRAFT, 0) = 0
--AND A.ALRT_NOTIFY_HDR_ID IS NOT NULL
--AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
--AND A.IS_WORK_ITEM = 1
--AND 1 = CASE WHEN @START_AND_DUE_DATE_NOT_NULL = 1 THEN
--			CASE WHEN A.[START_DATE] IS NOT NULL AND A.DUE_DATE IS NOT NULL THEN 1 ELSE 0 END
--		ELSE 1 END
--AND 1 = CASE WHEN @START_DATE_AS_OF_TODAY = 1 THEN
--			CASE WHEN A.[START_DATE] <= GETDATE() OR A.[START_DATE] IS NULL THEN 1 ELSE 0 END
--		ELSE 1 END

--Assignments Routed with Multiple Assignees at current state
INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, IsAlertCC, CARD_SEQ_NBR, fromq)
SELECT A.ALERT_ID, A.[START_DATE], A.DUE_DATE, AR.READ_ALERT, 0, AR.CARD_SEQ_NBR, 4
FROM dbo.ALERT A
	INNER JOIN dbo.ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID AND A.ALRT_NOTIFY_HDR_ID = AR.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = AR.ALERT_STATE_ID
WHERE 
	((@EMP_CODE IS NULL AND AR.EMP_CODE IS NULL) OR (@EMP_CODE IS NOT NULL AND AR.EMP_CODE = @EMP_CODE))
AND AR.CURRENT_NOTIFY = 1
AND COALESCE(A.IS_CS_REVIEW, 0) = 0
AND COALESCE(A.IS_DRAFT, 0) = 0
AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
AND A.IS_WORK_ITEM = 1
--AND 1 = CASE WHEN @START_AND_DUE_DATE_NOT_NULL = 1 THEN
--			CASE WHEN A.[START_DATE] IS NOT NULL AND A.DUE_DATE IS NOT NULL THEN 1 ELSE 0 END
--		ELSE 1 END
--AND 1 = CASE WHEN @START_DATE_AS_OF_TODAY = 1 THEN
--			CASE WHEN A.[START_DATE] <= GETDATE() OR A.[START_DATE] IS NULL THEN 1 ELSE 0 END
--		ELSE 1 END

--Assignment Tasks
INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, TaskFunctionDescription, TaskComment, IsAlertCC, IsMyTaskTempComplete, TaskStatus, CARD_SEQ_NBR, TaskFunctionCode, SEQ_NBR, JOB_COMPLETED_DATE, EMP_CODE, fromq )
SELECT A.ALERT_ID, JTD.TASK_START_DATE, JTD.JOB_REVISED_DATE, JTDE.READ_ALERT, JTD.TASK_DESCRIPTION, JTD.FNC_COMMENTS, 0, CASE WHEN JTDE.TEMP_COMP_DATE IS NOT NULL THEN 1 ELSE 0 END,
	CASE WHEN COALESCE(JTD.TASK_STATUS,'') IN ('P','','0') THEN 'P' ELSE 'A' END, JTDE.CARD_SEQ_NBR, JTD.FNC_CODE, JTD.SEQ_NBR, JTD.JOB_COMPLETED_DATE, JTDE.EMP_CODE, 5
FROM dbo.JOB_TRAFFIC_DET JTD
	INNER JOIN dbo.ALERT A ON JTD.JOB_NUMBER = A.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = A.TASK_SEQ_NBR 
	INNER JOIN dbo.JOB_TRAFFIC JT ON JTD.JOB_NUMBER = JT.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = JT.JOB_COMPONENT_NBR 
	INNER JOIN dbo.JOB_COMPONENT JC ON JT.JOB_NUMBER = JC.JOB_NUMBER AND JT.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR 
	INNER JOIN dbo.JOB_TRAFFIC_DET_EMPS JTDE ON JTD.JOB_NUMBER = JTDE.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = JTDE.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = JTDE.SEQ_NBR 
WHERE JTDE.EMP_CODE = @EMP_CODE 
AND A.ALERT_CAT_ID = 71
AND JT.COMPLETED_DATE IS NULL
AND JTD.JOB_COMPLETED_DATE IS NULL
AND JC.JOB_PROCESS_CONTRL NOT IN (6,12)
AND COALESCE(A.IS_CS_REVIEW, 0) = 0
AND COALESCE(A.IS_DRAFT, 0) = 0
--AND (@IncludeCompletedAssignments = 0 OR (@IncludeCompletedAssignments = 1 AND EXISTS(SELECT 1 FROM dbo.ALERT_RCPT_DISMISSED WHERE ALERT_ID = A.ALERT_ID AND EMP_CODE = @EMP_CODE)))
--AND 1 = CASE WHEN @TASK_STATUS = 'P' THEN
--				CASE WHEN COALESCE(JTD.TASK_STATUS,'') IN ('P','','0') THEN 1 ELSE 0 END
--			 WHEN @TASK_STATUS = 'A' THEN
--				CASE WHEN COALESCE(JTD.TASK_STATUS,'') NOT IN ('P','','0') THEN 1 ELSE 0 END
--		ELSE 1 END
--AND 1 = CASE WHEN @START_AND_DUE_DATE_NOT_NULL = 1 THEN
--			CASE WHEN JTD.TASK_START_DATE IS NOT NULL AND JTD.JOB_REVISED_DATE IS NOT NULL THEN 1 ELSE 0 END
--		ELSE 1 END
--AND 1 = CASE WHEN @START_DATE_AS_OF_TODAY = 1 THEN
--			CASE WHEN JTD.TASK_START_DATE <= GETDATE() OR JTD.TASK_START_DATE IS NULL THEN 1 ELSE 0 END
--		ELSE 1 END


--IF @ShowAssignmentType = 'unassigned' 
	INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, IsAlertCC, CARD_SEQ_NBR, fromq, IsUnassigned)
	SELECT A.ALERT_ID, A.[START_DATE], A.DUE_DATE, AR.READ_ALERT, 0, AR.CARD_SEQ_NBR, 7, 1
	FROM dbo.ALERT A
		LEFT OUTER JOIN dbo.ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID AND A.ALRT_NOTIFY_HDR_ID = AR.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = AR.ALERT_STATE_ID
	WHERE AR.ALERT_ID IS NULL
	AND A.ALERT_CAT_ID <> 71
	AND COALESCE(A.IS_CS_REVIEW, 0) = 0
	AND COALESCE(A.IS_DRAFT, 0) = 0
	AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
	AND A.IS_WORK_ITEM = 1
	AND A.ALRT_NOTIFY_HDR_ID IS NOT NULL

IF @ShowAssignmentType = 'allalertassignments' BEGIN

	INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, IsAlertCC, CARD_SEQ_NBR, fromq)
	SELECT A.ALERT_ID, A.[START_DATE], A.DUE_DATE, AR.READ_ALERT, 0, AR.CARD_SEQ_NBR, 6
	FROM dbo.ALERT A
		INNER JOIN dbo.ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID AND A.ALRT_NOTIFY_HDR_ID = AR.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = AR.ALERT_STATE_ID
		LEFT OUTER JOIN #Cards C ON A.ALERT_ID = C.ALERT_ID 
	WHERE 
		@EMP_CODE IS NULL
	AND AR.CURRENT_NOTIFY = 1
	AND COALESCE(A.IS_CS_REVIEW, 0) = 0
	AND COALESCE(A.IS_DRAFT, 0) = 0
	AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
	AND A.IS_WORK_ITEM = 1
	AND C.ALERT_ID IS NULL
	--AND A.JOB_NUMBER = @JOB_NUMBER 

	INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, IsAlertCC, CARD_SEQ_NBR, fromq)
	SELECT A.ALERT_ID, A.[START_DATE], A.DUE_DATE, MAX(CAST(JTDE.READ_ALERT as smallint)), 0, MAX(JTDE.CARD_SEQ_NBR), MAX(JTDE.ID)
	--select *
	FROM dbo.ALERT A
		INNER JOIN dbo.JOB_TRAFFIC_DET JTD ON JTD.JOB_NUMBER = A.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = A.TASK_SEQ_NBR 
		INNER JOIN dbo.JOB_TRAFFIC_DET_EMPS JTDE ON JTD.JOB_NUMBER = JTDE.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = JTDE.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = JTDE.SEQ_NBR 
		LEFT OUTER JOIN #Cards C ON A.ALERT_ID = C.ALERT_ID 
	WHERE
		COALESCE(A.IS_CS_REVIEW, 0) = 0
	AND COALESCE(A.IS_DRAFT, 0) = 0
	AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
	AND A.IS_WORK_ITEM = 1
	AND C.ALERT_ID IS NULL
	--AND A.JOB_NUMBER = @JOB_NUMBER 
	GROUP BY A.ALERT_ID, A.[START_DATE], A.DUE_DATE
	
	INSERT #Cards (ALERT_ID, [START_DATE], DUE_DATE, READ_ALERT, IsAlertCC, CARD_SEQ_NBR, fromq)
	SELECT A.ALERT_ID, A.[START_DATE], A.DUE_DATE, MAX(CAST(JTDE.READ_ALERT as smallint)), 0, MAX(JTDE.CARD_SEQ_NBR), MAX(JTDE.ID)
	--select *
	FROM dbo.ALERT A
		LEFT OUTER JOIN dbo.JOB_TRAFFIC_DET JTD ON JTD.JOB_NUMBER = A.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = A.TASK_SEQ_NBR 
		LEFT OUTER JOIN dbo.JOB_TRAFFIC_DET_EMPS JTDE ON JTD.JOB_NUMBER = JTDE.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = JTDE.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = JTDE.SEQ_NBR 
		LEFT OUTER JOIN #Cards C ON A.ALERT_ID = C.ALERT_ID 
	WHERE
		COALESCE(A.IS_CS_REVIEW, 0) = 0
	AND COALESCE(A.IS_DRAFT, 0) = 0
	AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
	AND A.IS_WORK_ITEM = 1
	AND C.ALERT_ID IS NULL
	AND JTD.JOB_NUMBER IS NULL
	AND JTDE.JOB_NUMBER IS NULL
	--AND A.JOB_NUMBER = @JOB_NUMBER 
	GROUP BY A.ALERT_ID, A.[START_DATE], A.DUE_DATE
	
END
	
IF @DEBUG = 1 
	SELECT * FROM #Cards 
	
UPDATE C SET JobIsOnBoard = 1, BOARD_ID = BJ.BOARD_ID
FROM #Cards C
	INNER JOIN dbo.ALERT A ON C.ALERT_ID = A.ALERT_ID
	INNER JOIN dbo.BOARD_JOB BJ ON A.JOB_NUMBER = BJ.JOB_NUMBER AND A.JOB_COMPONENT_NBR = BJ.JOB_COMPONENT_NBR 
	
IF EXISTS (SELECT 1 FROM dbo.BOARD WHERE INCL_ALL_JOBS = 1) BEGIN
	UPDATE C SET JobIsOnBoard = 1, BOARD_ID = (SELECT TOP 1 ID FROM dbo.BOARD WHERE INCL_ALL_JOBS = 1)
	FROM #Cards C
		INNER JOIN dbo.ALERT A ON C.ALERT_ID = A.ALERT_ID
	WHERE COALESCE(A.JOB_NUMBER, 0) <> 0

	--UPDATE C SET BOARD_ID = (SELECT TOP 1 ID FROM dbo.BOARD WHERE INCL_ALL_JOBS = 1)
	--FROM #Cards C
	--	INNER JOIN dbo.ALERT A ON C.ALERT_ID = A.ALERT_ID
	--WHERE COALESCE(A.JOB_NUMBER, 0) <> 0
END

UPDATE C SET EXCLUDE_TASKS  = 1
FROM #Cards C
	INNER JOIN dbo.BOARD B ON C.BOARD_ID = B.ID 
	INNER JOIN dbo.BOARD_HDR BH ON B.BOARD_HDR_ID = BH.ID AND BH.EXCLUDE_TASKS = 1
		
IF @DEBUG = 1 
	SELECT CAST(ALERT_ID as varchar) + ',' FROM #Cards

IF @GroupBy = 'ES' 
	UPDATE C SET EST_LOG_DESC = EL.EST_LOG_DESC
	FROM #Cards C
		INNER JOIN dbo.ALERT A ON C.ALERT_ID = A.ALERT_ID 
		LEFT OUTER JOIN dbo.ESTIMATE_LOG EL ON A.ESTIMATE_NUMBER = EL.ESTIMATE_NUMBER 

IF @RecordsToReturn <> 0
	SET ROWCOUNT @RecordsToReturn

SELECT *
FROM (
	SELECT
		A.ALERT_ID,
		A.ALERT_SEQ_NBR,
		fromq,
		C.IsAlertCC,
		ATTACHMENTCOUNT = ISNULL(A.ATTACHMENT_COUNT, 0),
		A.[SUBJECT],
		[USER_NAME] = CASE WHEN A.CP_ALERT = 1 AND ISNUMERIC(A.ALERT_USER) = 1 THEN 
						(SELECT CONT_FML FROM CDP_CONTACT_HDR WITH (NOLOCK) WHERE  CDP_CONTACT_ID = CAST(A.ALERT_USER AS INT))   
						ELSE A.LAST_UPDATED_FML END,
		A.GENERATED,
		A.[START_DATE],
		A.DUE_DATE,
		A.TIME_DUE,
		ALERT_STATE_NAME = CASE 
								WHEN @GroupBy = 'myalertsandassignments' THEN
									CASE WHEN ISNULL(SD.SPRINT_HDR_ID, 0) = 0 AND COALESCE(ALERT_STATES.ALERT_STATE_NAME, ALS.ALERT_STATE_NAME, 'N/A') = 'Backlog' THEN NULL ELSE COALESCE(ALERT_STATES.ALERT_STATE_NAME, ALS.ALERT_STATE_NAME, 'N/A') END
								ELSE
									CASE WHEN ISNULL(SD.SPRINT_HDR_ID, 0) = 0 AND ISNULL(ALERT_STATES.ALERT_STATE_NAME, ALS.ALERT_STATE_NAME) = 'Backlog' THEN NULL ELSE ISNULL(ALERT_STATES.ALERT_STATE_NAME, ALS.ALERT_STATE_NAME) END
							END,
		A.[PRIORITY],
		[TYPE] = AT.ALERT_TYPE_DESC,
		CATEGORY = AC.ALERT_DESC,
		CL.CL_NAME,
		ID = COALESCE(A.ALERT_SEQ_NBR, A.ALERT_ID),
		SV.[VERSION],
		SB.BUILD,
		ALERT_LEVEL_TEXT = CASE 
			WHEN A.ALERT_LEVEL = 'OF' THEN 'Office'
			WHEN A.ALERT_LEVEL = 'CL' THEN 'Client'
			WHEN A.ALERT_LEVEL = 'DI' THEN 'Division'
			WHEN A.ALERT_LEVEL = 'PR' THEN 'Product'
			WHEN A.ALERT_LEVEL = 'CM' THEN 'Campaign'
			WHEN A.ALERT_LEVEL = 'JO' THEN 'Job'
			WHEN A.ALERT_LEVEL = 'JC' THEN 'Job Component'
			WHEN A.ALERT_LEVEL = 'ES' THEN 'Estimate'
			WHEN A.ALERT_LEVEL = 'EST' THEN 'Estimate'
			WHEN A.ALERT_LEVEL = 'PS' THEN 'Schedule'
			WHEN A.ALERT_LEVEL = 'PST' THEN 'Schedule Task'
			WHEN A.ALERT_LEVEL = 'PO' THEN 'Purchase Order'
			WHEN A.ALERT_LEVEL = 'AB' THEN 'Authorization to Buy'
			WHEN A.ALERT_LEVEL = 'AP' THEN 'Accounts Payable'
			WHEN A.ALERT_LEVEL = 'AD' THEN 'Agency Desktop'
			WHEN A.ALERT_LEVEL = 'AN' THEN 'Ad Number'
			WHEN A.ALERT_LEVEL = 'ED' THEN 'Employee Desktop'
			WHEN A.ALERT_LEVEL = 'NA' THEN 'Approval'
			WHEN A.ALERT_LEVEL = 'VN' THEN 'Vendor'
			WHEN A.ALERT_LEVEL = 'CT' THEN 'Contract'
			ELSE ''
			END,
		JOB_NUMBER = ISNULL(A.JOB_NUMBER, 0),
		JOB_COMPONENT_NBR = ISNULL(A.JOB_COMPONENT_NBR, 0),
		SPRINT_ID = ISNULL(SD.SPRINT_HDR_ID, 0),
		TASK_SEQ_NBR = ISNULL(A.TASK_SEQ_NBR, 0),
		IS_ASSIGNMENT = CASE WHEN ((NOT A.ALERT_STATE_ID IS NULL AND NOT A.ALRT_NOTIFY_HDR_ID IS NULL) OR (NOT A.IS_WORK_ITEM IS NULL AND A.IS_WORK_ITEM = 1)) THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END,
		IS_WORK_ITEM = ISNULL(A.IS_WORK_ITEM, 0),
		IS_CC = IsAlertCC,
		CURRENT_NOTIFY = 0,
		CURRENT_NOTIFY_EMP_CODE = CASE WHEN A.ALERT_STATE_ID IS NULL THEN NULL
								  ELSE    
										CASE 
											WHEN ((SELECT COUNT(1) FROM ALERT_RCPT WITH (NOLOCK) WHERE ALERT_ID = A.ALERT_ID AND ALERT_RCPT.CURRENT_NOTIFY = 1 
												AND A.ALRT_NOTIFY_HDR_ID = ALERT_RCPT.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = ALERT_RCPT.ALERT_STATE_ID) + 
												(SELECT COUNT(1) FROM ALERT_RCPT_DISMISSED WITH (NOLOCK) WHERE ALERT_ID = A.ALERT_ID AND ALERT_RCPT_DISMISSED.CURRENT_NOTIFY = 1 
												AND A.ALRT_NOTIFY_HDR_ID = ALERT_RCPT_DISMISSED.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = ALERT_RCPT_DISMISSED.ALERT_STATE_ID)) > 1 THEN ''
											WHEN (SELECT COUNT(1) FROM ALERT_RCPT WITH (NOLOCK) WHERE ALERT_ID = A.ALERT_ID AND ALERT_RCPT.CURRENT_NOTIFY = 1 AND A.ALERT_STATE_ID = ALERT_RCPT.ALERT_STATE_ID) = 1 THEN
												(SELECT EMP_CODE FROM ALERT_RCPT WITH (NOLOCK) WHERE ALERT_ID = A.ALERT_ID AND ALERT_RCPT.CURRENT_NOTIFY = 1 AND A.ALERT_STATE_ID = ALERT_RCPT.ALERT_STATE_ID)
											ELSE ''
										END
								  END,
		CURRENT_NOTIFY_EMP_FML =
			CASE 
				WHEN @IsJobAlertsPage = 1 AND @ShowAssignmentType <> 'myalerts' AND (A.ASSIGN_COMPLETED = 1 OR C.JOB_COMPLETED_DATE IS NOT NULL) THEN 'Completed'
				--WHEN @IsJobAlertsPage = 1 AND @ShowAssignmentType <> 'myalerts' AND (SELECT HAS_CHILDREN 
				--																	FROM dbo.advtf_traffic_schedule_GetHierarchyDates(@JOB_NUMBER,@JOB_COMP_NUMBER) ATS 
				--																	WHERE C.SEQ_NBR = ATS.SEQ_NBR) = 1 THEN 'Parent'
				WHEN NOT (@IsJobAlertsPage = 1 AND @ShowAssignmentType <> 'myalerts') AND A.ASSIGN_COMPLETED = 1 AND A.ALERT_CAT_ID <> 71 THEN 'Completed'
				WHEN @ShowAssignmentType = 'unassigned' AND AC.ALERT_CAT_ID = 71 AND C.EMP_CODE IS NULL THEN 'Task' 
				WHEN @ShowAssignmentType = 'unassigned' AND AC.ALERT_CAT_ID = 71 AND C.EMP_CODE IS NOT NULL THEN 'Task' 
				WHEN @ShowAssignmentType <> 'unassigned' AND A.ALERT_STATE_ID IS NULL THEN NULL
			ELSE
				CASE
					WHEN NOT A.ASSIGNED_EMP_FML IS NULL THEN A.ASSIGNED_EMP_FML
					WHEN A.ALRT_NOTIFY_HDR_ID IS NULL AND A.ALERT_STATE_ID IS NULL AND ((SELECT COUNT(1) FROM dbo.ALERT_RCPT WITH (NOLOCK) WHERE ALERT_ID = A.ALERT_ID 
																AND ALERT_RCPT.CURRENT_NOTIFY = 1 AND A.ALRT_NOTIFY_HDR_ID IS NULL) + (SELECT COUNT(1) FROM ALERT_RCPT_DISMISSED WITH (NOLOCK) 
																WHERE ALERT_ID = A.ALERT_ID AND ALERT_RCPT_DISMISSED.CURRENT_NOTIFY = 1 AND A.ALRT_NOTIFY_HDR_ID IS NULL)) > 1  THEN 'Multi'
					WHEN NOT A.ALRT_NOTIFY_HDR_ID IS NULL AND NOT A.ALERT_STATE_ID IS NULL AND 
													((SELECT COUNT(1) FROM ALERT_RCPT WITH (NOLOCK) WHERE ALERT_ID = A.ALERT_ID AND ALERT_RCPT.CURRENT_NOTIFY = 1 
														AND A.ALRT_NOTIFY_HDR_ID = ALERT_RCPT.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = ALERT_RCPT.ALERT_STATE_ID) + 
														(SELECT COUNT(1) FROM ALERT_RCPT_DISMISSED WITH (NOLOCK) WHERE ALERT_ID = A.ALERT_ID AND ALERT_RCPT_DISMISSED.CURRENT_NOTIFY = 1 AND 
														A.ALRT_NOTIFY_HDR_ID = ALERT_RCPT_DISMISSED.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = ALERT_RCPT_DISMISSED.ALERT_STATE_ID)) > 1  THEN 'Multi'
					WHEN NOT A.ALRT_NOTIFY_HDR_ID IS NULL AND NOT A.ALERT_STATE_ID IS NULL THEN
							CASE
								WHEN (SELECT COUNT(1) FROM ALERT_RCPT WITH (NOLOCK) WHERE ALERT_ID = A.ALERT_ID AND ALERT_RCPT.CURRENT_NOTIFY = 1 
										AND A.ALRT_NOTIFY_HDR_ID = ALERT_RCPT.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = ALERT_RCPT.ALERT_STATE_ID) = 1 THEN 'Assigned'
								WHEN (SELECT COUNT(1) FROM ALERT_RCPT_DISMISSED WITH (NOLOCK) WHERE ALERT_ID = A.ALERT_ID AND ALERT_RCPT_DISMISSED.CURRENT_NOTIFY = 1 
														AND A.ALRT_NOTIFY_HDR_ID = ALERT_RCPT_DISMISSED.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = ALERT_RCPT_DISMISSED.ALERT_STATE_ID) = 1 THEN 'Assigned'
							ELSE 'Unassigned'
							END
				ELSE 'Unassigned'
				END
			END,
		GRP_OFFICE = CASE WHEN @GroupBy = 'O' THEN O.OFFICE_NAME END,
		GRP_CLIENT = CASE WHEN @GroupBy = 'C' THEN CL.CL_NAME END,
		GRP_DIVISION = CASE WHEN @GroupBy = 'CD' THEN D.DIV_NAME END,
		GRP_PRODUCT = CASE WHEN @GroupBy = 'CDP' THEN P.PRD_DESCRIPTION END,
		GRP_JOB = CASE WHEN @GroupBy = 'CDPJ' THEN RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), JL.JOB_NUMBER), 6) + ' - ' + ISNULL(JL.JOB_DESC, '') + ' | ' + CL.CL_NAME END,
		GRP_COMPONENT = RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), JC.JOB_NUMBER), 6 ) + '/' + RIGHT(REPLICATE('0', 3) + CONVERT(VARCHAR(20), JC.JOB_COMPONENT_NBR), 3) + ' - ' + ISNULL(JC.JOB_COMP_DESC, '') + ' | ' + CL.CL_NAME,
		GRP_CAMPAIGN = CASE WHEN @GroupBy = 'CM' THEN ISNULL(CMP.CMP_NAME, '') END,
		GRP_TASK = CASE WHEN @GroupBy = 'PST' THEN 
						CASE WHEN C.TaskFunctionCode IS NULL OR C.TaskFunctionCode='' THEN C.TaskFunctionDescription ELSE C.TaskFunctionDescription END
				   END,
		GRP_ESTIMATE = CASE WHEN @GroupBy = 'ES' THEN RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), A.ESTIMATE_NUMBER), 6) + ' - ' + ISNULL(C.EST_LOG_DESC, '') END,
		GRP_ESTIMATE_COMPONENT = CASE WHEN @GroupBy = 'EST' THEN RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20), A.ESTIMATE_NUMBER), 6) + '/' + RIGHT(REPLICATE('0', 2) + CONVERT(VARCHAR(20), A.EST_COMPONENT_NBR), 2) + ' - ' + ISNULL(EC.EST_COMP_DESC, '') END,
		GRP_DUE_DATE = CASE WHEN @GroupBy = 'DUE_DATE' OR @GroupBy = 'DUE_DATE_ASC' AND @IncludeTasks = 1 THEN
							CASE WHEN A.ALERT_CAT_ID = 71 THEN CONVERT(CHAR(10), JTD.JOB_REVISED_DATE, 23) ELSE CONVERT(CHAR(10), A.DUE_DATE, 23) END
					   ELSE CONVERT(CHAR(10), A.DUE_DATE, 23)
					   END,
		GRP_DUE_DATE_DISPLAY = CASE WHEN @GroupBy = 'DUE_DATE' OR @GroupBy = 'DUE_DATE_ASC' AND @IncludeTasks = 1 THEN
									CASE WHEN A.ALERT_CAT_ID = 71 THEN DATENAME(dw, JTD.JOB_REVISED_DATE) + ',' + SPACE(1) + DATENAME(m, JTD.JOB_REVISED_DATE) + SPACE(1) + CAST(DAY(JTD.JOB_REVISED_DATE) AS VARCHAR(2)) + ',' + SPACE(1) + CAST(YEAR(JTD.JOB_REVISED_DATE) AS CHAR(4)) ELSE DATENAME(dw, A.DUE_DATE) + ',' + SPACE(1) + DATENAME(m, A.DUE_DATE) + SPACE(1) + CAST(DAY(A.DUE_DATE) AS VARCHAR(2)) + ',' + SPACE(1) + CAST(YEAR(A.DUE_DATE) AS CHAR(4)) END
							   ELSE
									DATENAME(dw, A.DUE_DATE) + ',' + SPACE(1) + DATENAME(m, A.DUE_DATE) + SPACE(1) + CAST(DAY(A.DUE_DATE) AS VARCHAR(2)) + ',' + SPACE(1) + CAST(YEAR(A.DUE_DATE) AS CHAR(4))
							   END,
		GRP_PRIORITY = CASE
						WHEN A.[PRIORITY] = 1 THEN 'Highest'
						WHEN A.[PRIORITY] = 2 THEN 'High'
						WHEN A.[PRIORITY] = 3 THEN 'Normal'
						WHEN A.[PRIORITY] = 4 THEN 'Low'
						WHEN A.[PRIORITY] = 5 THEN 'Lowest'
						ELSE 'Normal'
					   END,
		ALERT_NOTIFY_NAME = ANH.ALERT_NOTIFY_NAME,
		C.READ_ALERT,
		READ_ALERT_TEXT = CASE
							WHEN C.READ_ALERT = 1 THEN 'Read'
                            ELSE 'Not Read'
                            END,
		--TEMP_COMP_DATE = NULL,
		C.IsUnassigned,
		A.CL_CODE, A.DIV_CODE, A.PRD_CODE, A.CMP_CODE, C.TaskFunctionDescription
	FROM #Cards C
		INNER JOIN dbo.ALERT A ON C.ALERT_ID = A.ALERT_ID 
		INNER JOIN dbo.ALERT_TYPE [AT] ON A.ALERT_TYPE_ID = [AT].ALERT_TYPE_ID 
		INNER JOIN dbo.ALERT_CATEGORY AC ON A.ALERT_CAT_ID = AC.ALERT_CAT_ID 
		LEFT OUTER JOIN dbo.JOB_LOG JL ON A.JOB_NUMBER = JL.JOB_NUMBER 
		LEFT OUTER JOIN dbo.JOB_COMPONENT JC ON A.JOB_NUMBER = JC.JOB_NUMBER AND A.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR 
		LEFT OUTER JOIN dbo.CLIENT CL ON A.CL_CODE = CL.CL_CODE
		LEFT OUTER JOIN dbo.DIVISION D ON A.CL_CODE = D.CL_CODE AND A.DIV_CODE = D.DIV_CODE
		LEFT OUTER JOIN dbo.PRODUCT P ON A.CL_CODE = P.CL_CODE AND A.DIV_CODE = P.DIV_CODE AND A.PRD_CODE = P.PRD_CODE
		LEFT OUTER JOIN dbo.CAMPAIGN CMP ON JL.CMP_IDENTIFIER = CMP.CMP_IDENTIFIER 
		LEFT OUTER JOIN dbo.ALERT_STATES ON A.ALERT_STATE_ID = ALERT_STATES.ALERT_STATE_ID 
		LEFT OUTER JOIN dbo.ALERT_STATES ALS ON A.BOARD_STATE_ID = ALS.ALERT_STATE_ID 

		LEFT OUTER JOIN dbo.SOFTWARE_VERSION SV ON A.VER = SV.VERSION_ID
		LEFT OUTER JOIN dbo.SOFTWARE_BUILD SB ON A.BUILD = SB.BUILD_ID
		LEFT OUTER JOIN dbo.SPRINT_DTL SD ON A.ALERT_ID = SD.ALERT_ID 	
		LEFT OUTER JOIN dbo.SPRINT_HDR SH ON SD.SPRINT_HDR_ID = SH.ID AND COALESCE(SH.IS_COMPLETE, 0) = 0
		LEFT OUTER JOIN dbo.OFFICE O ON A.OFFICE_CODE = O.OFFICE_CODE 
		LEFT OUTER JOIN dbo.JOB_TRAFFIC_DET JTD WITH (NOLOCK) ON A.JOB_NUMBER = JTD.JOB_NUMBER AND A.JOB_COMPONENT_NBR = JTD.JOB_COMPONENT_NBR AND A.TASK_SEQ_NBR = JTD.SEQ_NBR
		LEFT OUTER JOIN dbo.ESTIMATE_COMPONENT EC ON A.ESTIMATE_NUMBER = EC.ESTIMATE_NUMBER AND A.EST_COMPONENT_NBR = EC.EST_COMPONENT_NBR 
		LEFT OUTER JOIN dbo.ALERT_NOTIFY_HDR ANH ON A.ALRT_NOTIFY_HDR_ID = ANH.ALRT_NOTIFY_HDR_ID 
	WHERE 
		(
			(@INCLUDE_BACKLOG = 0 AND (
										C.JobIsOnBoard = 0
									 OR
										(C.JobIsOnBoard = 1 AND SD.ALERT_ID IS NOT NULL AND SH.IS_ACTIVE = 1)
									 OR
										(C.JobIsOnBoard = 1 AND SD.ALERT_ID IS NULL AND A.ALERT_CAT_ID = 71 AND COALESCE(C.EXCLUDE_TASKS, 0) = 1)
									 OR
										(C.IsAlertCC = 1 AND COALESCE(A.IS_WORK_ITEM, 0) = 0)
									  )
			)
		OR
			(@INCLUDE_BACKLOG = 1)
		)
	AND	(@START_DATE IS NULL OR @START_DATE IS NOT NULL AND A.LAST_UPDATED >= @START_DATE)
	AND	(@END_DATE IS NULL OR @END_DATE IS NOT NULL AND A.LAST_UPDATED <= @END_DATE)
	AND (@TASK_FNC_CODE IS NULL OR @TASK_FNC_CODE IS NOT NULL AND C.TaskFunctionCode = @TASK_FNC_CODE)
	AND (@TASK_FNC_DESC IS NULL OR @TASK_FNC_DESC IS NOT NULL AND UPPER(C.TaskFunctionDescription) LIKE UPPER(@TASK_FNC_DESC) + '%')
	AND 1 = CASE 
				WHEN @SEARCH_CRITERIA IS NULL THEN 1
				WHEN ISNUMERIC(@SEARCH_CRITERIA) = 1 AND (A.JOB_NUMBER = CAST(@SEARCH_CRITERIA AS bigint) OR COALESCE(A.ALERT_SEQ_NBR, A.ALERT_ID) = CAST(@SEARCH_CRITERIA AS bigint)) THEN 1
				WHEN ISNUMERIC(@SEARCH_CRITERIA) = 0 AND UPPER(A.[SUBJECT]) LIKE '%' + UPPER(@SEARCH_CRITERIA) + '%' THEN 1
				WHEN ISNUMERIC(@SEARCH_CRITERIA) = 0 AND UPPER(A.ALERT_USER) LIKE '%' + UPPER(@SEARCH_CRITERIA) + '%' THEN 1
				WHEN ISNUMERIC(@SEARCH_CRITERIA) = 0 AND UPPER(CAST(A.BODY as varchar)) LIKE '%' + UPPER(@SEARCH_CRITERIA) + '%' THEN 1
				ELSE 0
				END
	AND 1 = CASE 
			WHEN @FILTER_LEVEL = 'OF' THEN
				CASE WHEN @OFFICE_CODE = A.OFFICE_CODE THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'CL' THEN
				CASE WHEN @CL_CODE = A.CL_CODE THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'DI' THEN
				CASE WHEN @CL_CODE = A.CL_CODE AND @DIV_CODE = A.DIV_CODE THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'PR' THEN
				CASE WHEN @CL_CODE = A.CL_CODE AND @DIV_CODE = A.DIV_CODE AND @PRD_CODE = A.PRD_CODE THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'CM' THEN
				CASE WHEN @CL_CODE = A.CL_CODE AND @DIV_CODE = A.DIV_CODE AND @PRD_CODE = A.PRD_CODE AND A.CMP_CODE = @CMP_CODE THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'JO' THEN
				CASE WHEN @JOB_NUMBER = A.JOB_NUMBER THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'JC' THEN
				CASE WHEN (@JOB_NUMBER = A.JOB_NUMBER AND A.JOB_COMPONENT_NBR = @JOB_COMP_NUMBER) OR (A.JOB_COMPONENT_NBR IS NULL AND A.ALERT_LEVEL = 'JO' AND A.JOB_NUMBER = @JOB_NUMBER) THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'VN' THEN
				CASE WHEN @VN_CODE = A.VN_CODE THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'DO' THEN
				CASE WHEN @ALERT_LEVEL = A.ALERT_LEVEL THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'ES' THEN
				CASE WHEN @ESTIMATE_NUMBER = A.ESTIMATE_NUMBER THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'EST' THEN
				CASE WHEN @ESTIMATE_NUMBER = A.ESTIMATE_NUMBER AND @EST_COMPONENT_NBR = A.EST_COMPONENT_NBR THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'PST' THEN
				CASE WHEN @JOB_NUMBER = A.JOB_NUMBER AND A.JOB_COMPONENT_NBR = @JOB_COMP_NUMBER THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'ID' THEN
				CASE WHEN COALESCE(A.ALERT_SEQ_NBR, A.ALERT_ID) = @ID THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'ALRT_NOTIFY_HDR' THEN
				CASE WHEN A.ALRT_NOTIFY_HDR_ID = @ALRT_NOTIFY_HDR_ID THEN 1 ELSE 0 END
			WHEN @FILTER_LEVEL = 'STATE' THEN
				CASE WHEN A.ALRT_NOTIFY_HDR_ID = @ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = @ALERT_STATE_ID THEN 1 ELSE 0 END
			--WHEN @FILTER_LEVEL = 'AB' THEN
			ELSE 1
			END
) detail
WHERE
	1 = CASE 
			WHEN @ShowAssignmentType = 'myalerts' AND IsAlertCC = 1 THEN 1
			WHEN @ShowAssignmentType = 'myalertassignments' AND IsAlertCC = 0 AND detail.CURRENT_NOTIFY_EMP_CODE = @EMP_CODE THEN 1
			WHEN @ShowAssignmentType = 'myalertsandassignments' AND (IsAlertCC = 1 OR CURRENT_NOTIFY_EMP_CODE = @EMP_CODE) THEN 1
			WHEN @ShowAssignmentType = 'allalertassignments' AND IsUnassigned = 0 THEN 1
			WHEN @ShowAssignmentType = 'unassigned' AND IsUnassigned = 1 THEN 1
			ELSE 0 
		END
ORDER BY 1

IF @DEBUG = 1
	SELECT 
		EMP_CODE = @EMP_CODE,
		INBOX_TYPE = @INBOX_TYPE,
		@ShowAssignmentType as ShowAssignmentType,
		@IsJobAlertsPage as IsJobAlertsPage,
		@GroupBy as GroupBy,
		@IncludeCompletedAssignments as IncludeCompletedAssignments,
		@RecordsToReturn as RecordsToReturn,
		FILTER_LEVEL = @FILTER_LEVEL,
		@SEARCH_CRITERIA as SEARCH_CRITERIA,
		OFFICE_CODE = @OFFICE_CODE,
		CL_CODE = @CL_CODE,
		DIV_CODE = @DIV_CODE,
		PRD_CODE = @PRD_CODE,
		CMP_CODE = @CMP_CODE,
		JOB_NUMBER = @JOB_NUMBER,
		JOB_COMP_NUMBER = @JOB_COMP_NUMBER,
		ALERT_TYPE_ID = @ALERT_TYPE_ID,
		ALERT_CAT_ID = @ALERT_CAT_ID,
		[START_DATE] = @START_DATE,
		END_DATE = @END_DATE,
		ALERT_LEVEL = @ALERT_LEVEL,
		VN_CODE = @VN_CODE,
		ESTIMATE_NUMBER = @ESTIMATE_NUMBER,
		@EST_COMPONENT_NBR,
		TASK_FNC_CODE = @TASK_FNC_CODE,
		TASK_FNC_DESC = @TASK_FNC_DESC,
--@ATB_NUMBER NOT USED
		ALRT_NOTIFY_HDR_ID= @ALRT_NOTIFY_HDR_ID,
		ALERT_STATE_ID = @ALERT_STATE_ID,
		ID = @ID,
		INCLUDE_BACKLOG = @INCLUDE_BACKLOG

DROP TABLE #Cards

GO