IF EXISTS ( SELECT * FROM sysobjects WHERE id = OBJECT_ID( N'[dbo].[advtf_alert_dashboard]' ) AND xtype IN ( N'FN', N'IF', N'TF' ))
BEGIN
	DROP FUNCTION [dbo].[advtf_alert_dashboard]
END
GO
CREATE FUNCTION [dbo].[advtf_alert_dashboard] (
@EmployeeCode VARCHAR(140), 
@InboxType AS VARCHAR(6) = NULL,
 -- inbox
 -- sent
 -- recieved
 -- drafts
 -- dismissed
@GroupBy VARCHAR(20) = 'XXX',
@IncludeBackLog BIT = 0,
@Offset DECIMAL = 0
)
RETURNS @CARDS TABLE 
(
	AlertID INT NOT NULL,
	StartDate SMALLDATETIME NULL,
	DueDate SMALLDATETIME NULL,
	ReadAlert BIT NULL,
	CheckListCompleted INT NOT NULL DEFAULT(0),
	CheckListTotal INT NOT NULL DEFAULT(0),
	TaskFunctionDescription VARCHAR(40) NULL,
	TaskComment VARCHAR(MAX) NULL,
	IsAlertCC BIT NOT NULL,
	IsMyTaskTempComplete BIT NOT NULL DEFAULT(0),
	TaskStatus VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CS_AS NULL,
	CardSequenceNumber INT NULL,
	JobIsOnBoard BIT NOT NULL DEFAULT(0),
	BoardID INT NULL,
	ExcludeTasks BIT NOT NULL DEFAULT(0),
	LastUpdated SMALLDATETIME NULL,
	AttachmentCount INT,
	JobNumber INT,
	JobComponentNumber SMALLINT,
	TaskSequenceNumber SMALLINT,
	IsOwnerAssignmentAlert BIT DEFAULT(0),
	IsProof BIT DEFAULT(0)
)
AS
BEGIN
/*=========== QUERY ===========*/
BEGIN	

	-- TEMP TABLE VARIABLES
	BEGIN
		DECLARE @EMPLOYEES TABLE(EMP_CODE VARCHAR(6));

		INSERT INTO @EMPLOYEES SELECT LTRIM(RTRIM(items)) as EMP_CODE FROM udf_split_list(@EmployeeCode, ',');	
		
	END
	--	INIT
	BEGIN
		DECLARE @USER_CODES TABLE (USER_CODE VARCHAR(100));

		INSERT INTO @USER_CODES SELECT SU.USER_CODE
		FROM SEC_USER SU INNER JOIN (select EMP_CODE, MAX(SEC_USER_ID) AS SEC_USER_ID 
									FROM SEC_USER 
									WHERE EMP_CODE IN (SELECT EMP_CODE FROM @EMPLOYEES)
									GROUP BY EMP_CODE) EC 
		ON SU.EMP_CODE = EC.EMP_CODE AND SU.SEC_USER_ID = EC.SEC_USER_ID;			
	END
	
	-----	DATA  -----
	--  Original section (Mike's query) for Dashboard
	IF @InboxType <> 'dismissed'
	BEGIN
		-- CC/Recipient
		BEGIN
			--	Assignments where I'm a CC
			BEGIN
				INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
				SELECT 
					A.ALERT_ID, 
					A.[START_DATE], 
					A.DUE_DATE, 
					AR.READ_ALERT, 
					1, 
					AR.CARD_SEQ_NBR,
					A.JOB_NUMBER,
					A.JOB_COMPONENT_NBR,
					A.TASK_SEQ_NBR					
				FROM 
					ALERT A WITH(NOLOCK)
					INNER JOIN ALERT_RCPT AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID 
				WHERE 
					AR.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
					AND COALESCE(AR.CURRENT_RCPT, 0) = 0
					AND COALESCE(AR.CURRENT_NOTIFY, 0) = 0
					AND COALESCE(A.IS_CS_REVIEW, 0) = 0
					AND A.IS_WORK_ITEM = 1
					AND
					1 =	CASE
							WHEN @InboxType = 'inbox' THEN 1
							WHEN 'sent' = 'sent' AND A.ALERT_USER IN (SELECT USER_CODE FROM @USER_CODES) THEN 1
							WHEN @InboxType = 'recieved' THEN 1 -- ?? 
							WHEN @InboxType = 'drafts' AND A.IS_DRAFT = 1 THEN 1
							WHEN @InboxType = 'dismissed' THEN 0
							ELSE 0
						END 

			END
			
			--	Standard Alerts where I'm a recipient
			BEGIN
				INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
				SELECT 
					A.ALERT_ID, 
					A.[START_DATE], 
					A.DUE_DATE, 
					AR.READ_ALERT, 
					1, 
					AR.CARD_SEQ_NBR,
					A.JOB_NUMBER,
					A.JOB_COMPONENT_NBR,
					A.TASK_SEQ_NBR
				FROM 
					ALERT A WITH(NOLOCK)
					INNER JOIN ALERT_RCPT AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID 
				WHERE 
					AR.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
					AND COALESCE(AR.CURRENT_RCPT, 0) = 0
					AND COALESCE(AR.CURRENT_NOTIFY, 0) = 0
					AND COALESCE(A.IS_CS_REVIEW, 0) = 0
					AND COALESCE(A.IS_DRAFT, 0) = 0
					AND COALESCE(A.IS_WORK_ITEM, 0) = 0;
			END
		END
		--	Assignments Non-Routed
		BEGIN
			INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
			SELECT 
				A.ALERT_ID, 
				A.[START_DATE], 
				A.DUE_DATE, 
				AR.READ_ALERT, 
				0, 
				AR.CARD_SEQ_NBR,
				A.JOB_NUMBER,
				A.JOB_COMPONENT_NBR,
				A.TASK_SEQ_NBR 
			FROM 
				ALERT A WITH(NOLOCK)
				INNER JOIN ALERT_RCPT AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID 
				--LEFT OUTER JOIN JOB_COMPONENT JC WITH(NOLOCK) ON A.JOB_NUMBER = JC.JOB_NUMBER AND A.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR
			WHERE 
				AR.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
				AND A.ASSIGNED_EMP_CODE IS NULL
				AND AR.CURRENT_NOTIFY = 1
				AND COALESCE(A.IS_CS_REVIEW, 0) = 0
				AND COALESCE(A.IS_DRAFT, 0) = 0
				AND A.ALRT_NOTIFY_HDR_ID IS NULL
				AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
				AND A.IS_WORK_ITEM = 1; --AND
					--1 =	CASE
					--		WHEN ISNULL(JC.JOB_NUMBER, 0) = 0 AND ISNULL(JC.JOB_COMPONENT_NBR, 0) = 0 THEN 1  -- NO NEED TO CHECK PROC CTRL IF NO JOB/COMP
					--		WHEN ISNULL(JC.JOB_NUMBER, 0) > 0 AND ISNULL(JC.JOB_COMPONENT_NBR, 0) > 0 AND JC.JOB_PROCESS_CONTRL NOT IN (6, 12) THEN	1
					--		ELSE 0
					--	END;
		END
		--	Assignments Routed with Multiple Assignees at current state
		BEGIN
			INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
			SELECT 
				A.ALERT_ID, 
				A.[START_DATE], 
				A.DUE_DATE, 
				AR.READ_ALERT, 
				0, 
				AR.CARD_SEQ_NBR,
				A.JOB_NUMBER,
				A.JOB_COMPONENT_NBR,
				A.TASK_SEQ_NBR
			FROM 
				ALERT A WITH(NOLOCK)
				INNER JOIN ALERT_RCPT AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID AND A.ALRT_NOTIFY_HDR_ID = AR.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = AR.ALERT_STATE_ID
				--LEFT OUTER JOIN JOB_COMPONENT JC WITH(NOLOCK) ON A.JOB_NUMBER = JC.JOB_NUMBER AND A.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR
			WHERE 
				AR.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
				AND AR.CURRENT_NOTIFY = 1
				AND COALESCE(A.IS_CS_REVIEW, 0) = 0
				AND COALESCE(A.IS_DRAFT, 0) = 0
				AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
				AND A.IS_WORK_ITEM = 1; --AND
					--1 =	CASE
					--		WHEN ISNULL(JC.JOB_NUMBER, 0) = 0 AND ISNULL(JC.JOB_COMPONENT_NBR, 0) = 0 THEN 1  -- NO NEED TO CHECK PROC CTRL IF NO JOB/COMP
					--		WHEN ISNULL(JC.JOB_NUMBER, 0) > 0 AND ISNULL(JC.JOB_COMPONENT_NBR, 0) > 0 AND JC.JOB_PROCESS_CONTRL NOT IN (6, 12) THEN	1
					--		ELSE 0
					--	END;
		END
		--	Assignment Tasks
		BEGIN
			INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, TaskFunctionDescription, TaskComment, IsAlertCC, IsMyTaskTempComplete, TaskStatus, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
			SELECT 
				A.ALERT_ID, 
				JTD.TASK_START_DATE, 
				JTD.JOB_REVISED_DATE, 
				JTDE.READ_ALERT, 
				JTD.TASK_DESCRIPTION, 
				JTD.FNC_COMMENTS, 
				0, 
				CASE 
					WHEN JTDE.TEMP_COMP_DATE IS NOT NULL THEN 1 
					ELSE 0 
				END,
				CASE 
					WHEN COALESCE(JTD.TASK_STATUS,'') IN ('P','','0') THEN 'P' 
					ELSE 'A' 
				END, 
				JTDE.CARD_SEQ_NBR,
				A.JOB_NUMBER,
				A.JOB_COMPONENT_NBR,
				A.TASK_SEQ_NBR 
			FROM 
				JOB_TRAFFIC_DET JTD WITH(NOLOCK)
				INNER JOIN ALERT A WITH(NOLOCK) ON JTD.JOB_NUMBER = A.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = A.TASK_SEQ_NBR 
				INNER JOIN JOB_TRAFFIC JT WITH(NOLOCK) ON JTD.JOB_NUMBER = JT.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = JT.JOB_COMPONENT_NBR 
				INNER JOIN JOB_COMPONENT JC WITH(NOLOCK) ON JT.JOB_NUMBER = JC.JOB_NUMBER AND JT.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR 
				INNER JOIN JOB_TRAFFIC_DET_EMPS JTDE WITH(NOLOCK) ON JTD.JOB_NUMBER = JTDE.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = JTDE.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = JTDE.SEQ_NBR 
			WHERE 
				JTDE.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
				AND A.ALERT_CAT_ID = 71
				AND JT.COMPLETED_DATE IS NULL
				AND JTD.JOB_COMPLETED_DATE IS NULL
				AND JC.JOB_PROCESS_CONTRL NOT IN (6,12)
				AND COALESCE(A.IS_CS_REVIEW, 0) = 0
				AND COALESCE(A.IS_DRAFT, 0) = 0;
		END
		--  ConceptShare Reviews
		BEGIN
			INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber, IsProof)
			SELECT DISTINCT
				A.ALERT_ID, 
				A.[START_DATE], 
				A.DUE_DATE, 
				AR.READ_ALERT, 
				0, 
				AR.CARD_SEQ_NBR,
				A.JOB_NUMBER,
				A.JOB_COMPONENT_NBR,
				A.TASK_SEQ_NBR,
				1
			FROM 
				ALERT A WITH(NOLOCK)
				INNER JOIN ALERT_RCPT AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID 
				INNER JOIN @EMPLOYEES E ON AR.EMP_CODE = E.EMP_CODE
			WHERE 
				(COALESCE(A.IS_CS_REVIEW, 0) = 1 OR A.ALERT_TYPE_ID = 15)
				AND COALESCE(A.IS_DRAFT, 0) = 0
			;
		END
	END
	ELSE
	BEGIN -- DISMISSED!
		-- CC/Recipient
		BEGIN
			--	Assignments where I'm a CC
			BEGIN
				INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
				SELECT 
					A.ALERT_ID, 
					A.[START_DATE], 
					A.DUE_DATE, 
					AR.READ_ALERT, 
					1, 
					AR.CARD_SEQ_NBR,
					A.JOB_NUMBER,
					A.JOB_COMPONENT_NBR,
					A.TASK_SEQ_NBR
				FROM 
					ALERT A WITH(NOLOCK)
					INNER JOIN ALERT_RCPT_DISMISSED AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID 
				WHERE 
					AR.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
					AND COALESCE(AR.CURRENT_RCPT, 0) = 0
					AND COALESCE(AR.CURRENT_NOTIFY, 0) = 0
					AND COALESCE(A.IS_CS_REVIEW, 0) = 0
					AND A.IS_WORK_ITEM = 1 
			END
			--	Standard Alerts where I'm a recipient
			BEGIN
				INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
				SELECT 
					A.ALERT_ID, 
					A.[START_DATE], 
					A.DUE_DATE, 
					AR.READ_ALERT, 
					1, 
					AR.CARD_SEQ_NBR,
					A.JOB_NUMBER,
					A.JOB_COMPONENT_NBR,
					A.TASK_SEQ_NBR
				FROM 
					ALERT A WITH(NOLOCK)
					INNER JOIN ALERT_RCPT_DISMISSED AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID 
				WHERE 
					AR.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
					AND COALESCE(AR.CURRENT_RCPT, 0) = 0
					AND COALESCE(AR.CURRENT_NOTIFY, 0) = 0
					AND COALESCE(A.IS_CS_REVIEW, 0) = 0
					AND COALESCE(A.IS_DRAFT, 0) = 0
					AND COALESCE(A.IS_WORK_ITEM, 0) = 0;
			END
		END
		--	Assignments Non-Routed
		BEGIN
			INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
			SELECT 
				A.ALERT_ID, 
				A.[START_DATE], 
				A.DUE_DATE, 
				AR.READ_ALERT, 
				0, 
				AR.CARD_SEQ_NBR,
				A.JOB_NUMBER,
				A.JOB_COMPONENT_NBR,
				A.TASK_SEQ_NBR 
			FROM 
				ALERT A WITH(NOLOCK)
				INNER JOIN ALERT_RCPT_DISMISSED AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID 
				--LEFT OUTER JOIN JOB_COMPONENT JC WITH(NOLOCK) ON A.JOB_NUMBER = JC.JOB_NUMBER AND A.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR
			WHERE 
				AR.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
				AND A.ASSIGNED_EMP_CODE IS NULL
				AND AR.CURRENT_NOTIFY = 1
				AND COALESCE(A.IS_CS_REVIEW, 0) = 0
				AND COALESCE(A.IS_DRAFT, 0) = 0
				AND A.ALRT_NOTIFY_HDR_ID IS NULL
				AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
				AND A.IS_WORK_ITEM = 1;-- AND
					--1 =	CASE
					--		WHEN ISNULL(JC.JOB_NUMBER, 0) = 0 AND ISNULL(JC.JOB_COMPONENT_NBR, 0) = 0 THEN 1  -- NO NEED TO CHECK PROC CTRL IF NO JOB/COMP
					--		WHEN ISNULL(JC.JOB_NUMBER, 0) > 0 AND ISNULL(JC.JOB_COMPONENT_NBR, 0) > 0 AND JC.JOB_PROCESS_CONTRL NOT IN (6, 12) THEN	1
					--		ELSE 0
					--	END;
		END
		--	Assignments Routed with Multiple Assignees at current state
		BEGIN
			INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
			SELECT 
				A.ALERT_ID, 
				A.[START_DATE], 
				A.DUE_DATE, 
				AR.READ_ALERT, 
				0, 
				AR.CARD_SEQ_NBR,
				A.JOB_NUMBER,
				A.JOB_COMPONENT_NBR,
				A.TASK_SEQ_NBR
			FROM 
				ALERT A WITH(NOLOCK)
				INNER JOIN ALERT_RCPT_DISMISSED AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID AND A.ALRT_NOTIFY_HDR_ID = AR.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = AR.ALERT_STATE_ID
				--LEFT OUTER JOIN JOB_COMPONENT JC WITH(NOLOCK) ON A.JOB_NUMBER = JC.JOB_NUMBER AND A.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR
			WHERE 
				AR.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
				AND AR.CURRENT_NOTIFY = 1
				AND COALESCE(A.IS_CS_REVIEW, 0) = 0
				AND COALESCE(A.IS_DRAFT, 0) = 0
				AND COALESCE(A.ASSIGN_COMPLETED, 0) = 0
				AND A.IS_WORK_ITEM = 1;-- AND
					--1 =	CASE
					--		WHEN ISNULL(JC.JOB_NUMBER, 0) = 0 AND ISNULL(JC.JOB_COMPONENT_NBR, 0) = 0 THEN 1  -- NO NEED TO CHECK PROC CTRL IF NO JOB/COMP
					--		WHEN ISNULL(JC.JOB_NUMBER, 0) > 0 AND ISNULL(JC.JOB_COMPONENT_NBR, 0) > 0 AND JC.JOB_PROCESS_CONTRL NOT IN (6, 12) THEN	1
					--		ELSE 0
					--	END;
		END
		--	Assignment Tasks
		BEGIN
			INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, TaskFunctionDescription, TaskComment, IsAlertCC, IsMyTaskTempComplete, TaskStatus, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber)
			SELECT 
				A.ALERT_ID, 
				JTD.TASK_START_DATE, 
				JTD.JOB_REVISED_DATE, 
				JTDE.READ_ALERT, 
				JTD.TASK_DESCRIPTION, 
				JTD.FNC_COMMENTS, 
				0, 
				CASE 
					WHEN JTDE.TEMP_COMP_DATE IS NOT NULL THEN 1 
					ELSE 0 
				END,
				CASE 
					WHEN COALESCE(JTD.TASK_STATUS,'') IN ('P','','0') THEN 'P' 
					ELSE 'A' 
				END, 
				JTDE.CARD_SEQ_NBR,
				A.JOB_NUMBER,
				A.JOB_COMPONENT_NBR,
				A.TASK_SEQ_NBR 
			FROM 
				JOB_TRAFFIC_DET JTD WITH(NOLOCK)
				INNER JOIN ALERT A WITH(NOLOCK) ON JTD.JOB_NUMBER = A.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = A.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = A.TASK_SEQ_NBR 
				INNER JOIN JOB_TRAFFIC JT WITH(NOLOCK) ON JTD.JOB_NUMBER = JT.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = JT.JOB_COMPONENT_NBR 
				INNER JOIN JOB_COMPONENT JC WITH(NOLOCK) ON JT.JOB_NUMBER = JC.JOB_NUMBER AND JT.JOB_COMPONENT_NBR = JC.JOB_COMPONENT_NBR 
				INNER JOIN JOB_TRAFFIC_DET_EMPS JTDE WITH(NOLOCK) ON JTD.JOB_NUMBER = JTDE.JOB_NUMBER AND JTD.JOB_COMPONENT_NBR = JTDE.JOB_COMPONENT_NBR AND JTD.SEQ_NBR = JTDE.SEQ_NBR 
			WHERE 
				JTDE.EMP_CODE IN (select EMP_CODE FROM @EMPLOYEES)
				AND A.ALERT_CAT_ID = 71
				AND JT.COMPLETED_DATE IS NOT NULL
				AND JTD.JOB_COMPLETED_DATE IS NOT NULL
				AND JC.JOB_PROCESS_CONTRL NOT IN (6,12)
				AND COALESCE(A.IS_CS_REVIEW, 0) = 0
				AND COALESCE(A.IS_DRAFT, 0) = 0;
		END
		--  ConceptShare Reviews
		BEGIN
			INSERT @CARDS (AlertID, StartDate, DueDate, ReadAlert, IsAlertCC, CardSequenceNumber, JobNumber, JobComponentNumber, TaskSequenceNumber, IsProof)
			SELECT DISTINCT
				A.ALERT_ID, 
				A.[START_DATE], 
				A.DUE_DATE, 
				AR.READ_ALERT, 
				0, 
				AR.CARD_SEQ_NBR,
				A.JOB_NUMBER,
				A.JOB_COMPONENT_NBR,
				A.TASK_SEQ_NBR,
				1
			FROM 
				ALERT A WITH(NOLOCK)
				INNER JOIN ALERT_RCPT_DISMISSED AR WITH(NOLOCK) ON A.ALERT_ID = AR.ALERT_ID 
				INNER JOIN @EMPLOYEES E ON AR.EMP_CODE = E.EMP_CODE
			WHERE 
				(COALESCE(A.IS_CS_REVIEW, 0) = 1 OR A.ALERT_TYPE_ID = 15)
				AND COALESCE(A.IS_DRAFT, 0) = 0
			;
		END
	END	
	--  UPDATE DATA
	BEGIN
		UPDATE C SET C.CheckListCompleted = dtl.CheckListCompleted 
		FROM @CARDS C
			INNER JOIN (
				SELECT COUNT(1) AS CheckListCompleted, CH.ALERT_ID
				FROM CHECKLIST_HDR CH WITH(NOLOCK)
					INNER JOIN CHECKLIST_DTL CD WITH(NOLOCK) ON CH.ID = CD.CHECKLIST_HDR_ID 
				WHERE CH.ALERT_ID IN (SELECT ALERT_ID FROM @CARDS)
				AND COALESCE(CD.IS_CHECKED, 0) = 1
				GROUP BY CH.ALERT_ID) dtl ON C.AlertID = dtl.ALERT_ID;
		UPDATE C SET C.CheckListTotal = dtl.CheckListTotal 
		FROM @CARDS C
			INNER JOIN (
				SELECT COUNT(1) AS CheckListTotal, CH.ALERT_ID
				FROM CHECKLIST_HDR CH WITH(NOLOCK)
					INNER JOIN CHECKLIST_DTL CD WITH(NOLOCK) ON CH.ID = CD.CHECKLIST_HDR_ID 
				WHERE CH.ALERT_ID IN (SELECT ALERT_ID FROM @CARDS)
				GROUP BY CH.ALERT_ID) dtl ON C.AlertID = dtl.ALERT_ID;	
		UPDATE C SET JobIsOnBoard = 1, BoardID = BJ.BOARD_ID
		FROM @CARDS C
			INNER JOIN ALERT A WITH(NOLOCK) ON C.AlertID = A.ALERT_ID
			INNER JOIN BOARD_JOB BJ WITH(NOLOCK) ON A.JOB_NUMBER = BJ.JOB_NUMBER AND A.JOB_COMPONENT_NBR = BJ.JOB_COMPONENT_NBR;			
		IF EXISTS (SELECT 1 FROM BOARD WHERE INCL_ALL_JOBS = 1) 
		BEGIN
			UPDATE C SET JobIsOnBoard = 1, BoardID = (SELECT TOP 1 ID FROM BOARD WITH(NOLOCK) WHERE INCL_ALL_JOBS = 1)
			FROM @CARDS C
				INNER JOIN ALERT A WITH(NOLOCK) ON C.AlertID = A.ALERT_ID
			WHERE COALESCE(A.JOB_NUMBER, 0) <> 0;
			--UPDATE C SET BOARD_ID = (SELECT TOP 1 ID FROM BOARD WHERE INCL_ALL_JOBS = 1)
			--FROM #Cards C
			--	INNER JOIN ALERT A ON C.ALERT_ID = A.ALERT_ID
			--WHERE COALESCE(A.JOB_NUMBER, 0) <> 0;
		END
		UPDATE C SET ExcludeTasks  = 1
		FROM @CARDS C
			INNER JOIN BOARD B WITH(NOLOCK) ON C.BoardID = B.ID 
			INNER JOIN BOARD_HDR BH WITH(NOLOCK) ON B.BOARD_HDR_ID = BH.ID AND BH.EXCLUDE_TASKS = 1;
		--	LAST UPDATED
		BEGIN
			UPDATE C SET LastUpdated = A.MAX_GEN
			FROM (
					SELECT
						AC.ALERT_ID, MAX(AC.GENERATED_DATE) AS MAX_GEN
					FROM
						@CARDS BA
						INNER JOIN ALERT_COMMENT AC WITH(NOLOCK) ON BA.AlertID = AC.ALERT_ID
					GROUP BY
						AC.ALERT_ID) AS A 
				INNER JOIN @CARDS C ON A.ALERT_ID = C.AlertID;
			UPDATE C SET LastUpdated = A.GENERATED
			FROM
				@CARDS C 
				INNER JOIN ALERT A WITH(NOLOCK) ON C.AlertID = A.ALERT_ID
			WHERE
				C.LastUpdated IS NULL;
		END
		--	ATTACHMENT COUNT
		BEGIN
			UPDATE C SET AttachmentCount = X.ATTACHMENT_COUNT
			FROM (
					SELECT
						AA.ALERT_ID, COUNT(1) AS ATTACHMENT_COUNT
					FROM
						@CARDS C
						INNER JOIN ALERT_ATTACHMENT AA WITH(NOLOCK) ON C.AlertID = AA.ALERT_ID
					GROUP BY
						AA.ALERT_ID) AS X
				INNER JOIN @CARDS C ON X.ALERT_ID = C.AlertID;			
		END
		--	CLEAN UP
		BEGIN
			UPDATE @CARDS SET JobNumber = NULL WHERE JobNumber <= 0;
			UPDATE @CARDS SET JobComponentNumber = NULL WHERE JobComponentNumber <= 0;
			UPDATE @CARDS SET TaskSequenceNumber = NULL WHERE TaskSequenceNumber < 0;
			UPDATE @CARDS SET IsOwnerAssignmentAlert = 1
			WHERE AlertID IN (SELECT AlertID FROM @CARDS
							GROUP BY AlertID
							HAVING COUNT(1) > 1)
			AND IsAlertCC = 1
			AND TaskStatus IS NULL;
		END		
	END
END
/*=========== QUERY ===========*/

RETURN

END
