IF EXISTS ( SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID( N'[dbo].[advtf_get_email_groups]' ) AND xtype IN ( N'FN', N'IF', N'TF' ))
BEGIN
	DROP FUNCTION [dbo].[advtf_get_email_groups]
END
GO
CREATE FUNCTION [dbo].[advtf_get_email_groups] (
												@EMAIL_GRP_CODE	VARCHAR(50) = NULL,
												@JOB_NUMBER INT = NULL,
												@JOB_COMPONENT_NBR SMALLINT = NULL,
												@AUTO_GROUP SMALLINT = NULL
												)
RETURNS @EMAIL_GROUPS TABLE
							(
								EMPGROUP VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CS_AS, 
								EMPCODE VARCHAR(150) COLLATE SQL_Latin1_General_CP1_CS_AS, 
								DESCRIPTION VARCHAR(2000),
								Checked BIT, 
								REC_ORDER INT,
								EMP_FML VARCHAR(2000),
								IsGroup BIT,
								[EmailGroupCode] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CS_AS, 
								[Code] VARCHAR(150) COLLATE SQL_Latin1_General_CP1_CS_AS, 
								[Description1] VARCHAR(2000),
								[IsChecked] BIT, 
								[Order] INT,
								[EmployeeFullName] VARCHAR(2000),
								IsContacts BIT,
								ClientContactID INT
							)
AS
BEGIN
/*=========== QUERY ===========*/
BEGIN
	DECLARE 
		@CTR AS INT, 
		@LIST_ALL AS BIT,
		@CL_CODE VARCHAR(6),
		@DIV_CODE VARCHAR(6),
		@PRD_CODE VARCHAR(6)

	IF @JOB_NUMBER IS NULL
	BEGIN
		SET @JOB_NUMBER = 0;
	END
	IF @JOB_COMPONENT_NBR IS NULL
	BEGIN
		SET @JOB_COMPONENT_NBR = 0;
	END
	IF @AUTO_GROUP IS NULL
	BEGIN
		SET @AUTO_GROUP = 0;
	END
	IF @JOB_NUMBER > 0
	BEGIN
		SELECT
			@CL_CODE = J.CL_CODE,
			@DIV_CODE = J.DIV_CODE,
			@PRD_CODE = J.PRD_CODE
		FROM
			JOB_LOG J WITH(NOLOCK)
		WHERE
			J.JOB_NUMBER = @JOB_NUMBER;
	END
	IF @EMAIL_GRP_CODE IS NULL AND @JOB_NUMBER > 0 AND @JOB_COMPONENT_NBR > 0
	BEGIN
		SELECT
			@EMAIL_GRP_CODE = JC.EMAIL_GR_CODE
		FROM
			JOB_COMPONENT JC
		WHERE
			JC.JOB_NUMBER = @JOB_NUMBER
			AND JC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
	END
	SET @CTR = 1;

	DECLARE @T_EmailGroup TABLE (EMPGROUP VARCHAR(255), 
									EMPCODE VARCHAR(150), 
									DESCRIPTION VARCHAR(2000),
									Checked BIT, REC_ORDER INT)

	SELECT @LIST_ALL = ISNULL(EMP_ON_ALERT_LIST,0) FROM AGENCY;

	SET @LIST_ALL = 1;
	IF @EMAIL_GRP_CODE IS NULL
	BEGIN
		SET @EMAIL_GRP_CODE = '';
	END
	IF @LIST_ALL = 1
		BEGIN
			--Check to see if there is a default group
			INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked,REC_ORDER)
			SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked,0 FROM
			(SELECT  'Root' AS EMPGROUP, EMAIL_GROUP.EMAIL_GR_CODE + ':Root' AS  EMPCODE,  EMAIL_GROUP.EMAIL_GR_CODE AS DESCRIPTION, 1 AS Checked
			FROM EMAIL_GROUP 
			WHERE EMAIL_GROUP.EMAIL_GR_CODE = @EMAIL_GRP_CODE AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))
			GROUP BY EMAIL_GROUP.EMAIL_GR_CODE) A
		
			INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked,REC_ORDER)
			SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked,0 FROM
			(SELECT  'Root' AS EMPGROUP, EMAIL_GROUP.EMAIL_GR_CODE + ':Root' AS  EMPCODE, EMAIL_GROUP.EMAIL_GR_CODE AS DESCRIPTION, 0 AS Checked
			FROM EMAIL_GROUP 
			WHERE EMAIL_GROUP.EMAIL_GR_CODE <> @EMAIL_GRP_CODE AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))
			GROUP BY EMAIL_GROUP.EMAIL_GR_CODE) A
		
			--Check to see if there is a default group
			INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked)
			SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked FROM
			(SELECT  EMAIL_GROUP.EMAIL_GR_CODE AS EMPGROUP, EMAIL_GROUP.EMP_CODE AS EMPCODE,  ISNULL(EMPLOYEE.EMP_LNAME, '') + ', ' + ISNULL(EMPLOYEE.EMP_FNAME, '') + ' ' + ISNULL(EMPLOYEE.EMP_MI, '') AS DESCRIPTION, 1 AS Checked
			FROM EMAIL_GROUP LEFT OUTER JOIN EMPLOYEE ON
			EMAIL_GROUP.EMP_CODE = EMPLOYEE.EMP_CODE
			WHERE EMAIL_GROUP.EMAIL_GR_CODE = @EMAIL_GRP_CODE AND ALERT_EMAIL <> 0  AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))) A ORDER BY A.DESCRIPTION
		
			--Check to see if user flagged not to receive emails.
			INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked)
			SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked FROM
			(SELECT  EMAIL_GROUP.EMAIL_GR_CODE AS EMPGROUP, EMAIL_GROUP.EMP_CODE AS EMPCODE, ISNULL(EMPLOYEE.EMP_LNAME, '') + ', ' + ISNULL(EMPLOYEE.EMP_FNAME, '') + ' ' + ISNULL(EMPLOYEE.EMP_MI, '')  AS DESCRIPTION, 0 AS Checked
			FROM EMAIL_GROUP LEFT OUTER JOIN EMPLOYEE ON
			EMAIL_GROUP.EMP_CODE = EMPLOYEE.EMP_CODE
			WHERE EMAIL_GROUP.EMAIL_GR_CODE = @EMAIL_GRP_CODE AND (ALERT_EMAIL = 0 OR ALERT_EMAIL IS NULL)  AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))) A ORDER BY A.DESCRIPTION
		
			INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked)
			SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked FROM
			(SELECT  EMAIL_GROUP.EMAIL_GR_CODE AS EMPGROUP, EMAIL_GROUP.EMP_CODE AS EMPCODE,  ISNULL(EMPLOYEE.EMP_LNAME, '') + ', ' + ISNULL(EMPLOYEE.EMP_FNAME, '') + ' ' + ISNULL(EMPLOYEE.EMP_MI, '') AS DESCRIPTION, 0 AS Checked
			FROM EMAIL_GROUP LEFT OUTER JOIN EMPLOYEE ON
			EMAIL_GROUP.EMP_CODE = EMPLOYEE.EMP_CODE
			WHERE EMAIL_GROUP.EMAIL_GR_CODE <> @EMAIL_GRP_CODE AND ALERT_EMAIL <> 0 AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))) A ORDER BY A.DESCRIPTION
		
			--Check to see if the user flagged not to receive emails.
			INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked)
			SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked FROM
			(SELECT  EMAIL_GROUP.EMAIL_GR_CODE AS EMPGROUP, EMAIL_GROUP.EMP_CODE AS EMPCODE,  ISNULL(EMPLOYEE.EMP_LNAME, '') + ', ' + ISNULL(EMPLOYEE.EMP_FNAME, '') + ' ' + ISNULL(EMPLOYEE.EMP_MI, '')  AS DESCRIPTION, 0 AS Checked
			FROM EMAIL_GROUP LEFT OUTER JOIN EMPLOYEE ON
			EMAIL_GROUP.EMP_CODE = EMPLOYEE.EMP_CODE
			WHERE EMAIL_GROUP.EMAIL_GR_CODE <> @EMAIL_GRP_CODE AND (ALERT_EMAIL = 0 OR ALERT_EMAIL IS NULL) AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))) A ORDER BY A.DESCRIPTION
		END
	ELSE
		BEGIN
			IF @EMAIL_GRP_CODE <> ''
			BEGIN
	    
				INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked,REC_ORDER)
				SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked, 0 FROM
				(SELECT  'Root' AS EMPGROUP, EMAIL_GROUP.EMAIL_GR_CODE + ':Root' AS  EMPCODE,  EMAIL_GROUP.EMAIL_GR_CODE AS DESCRIPTION, 1 AS Checked
				FROM EMAIL_GROUP 
				WHERE EMAIL_GROUP.EMAIL_GR_CODE = @EMAIL_GRP_CODE AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))
				GROUP BY EMAIL_GROUP.EMAIL_GR_CODE) A
    		
				INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked)
				SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked FROM
				(SELECT  EMAIL_GROUP.EMAIL_GR_CODE AS EMPGROUP, EMAIL_GROUP.EMP_CODE AS EMPCODE,  ISNULL(EMPLOYEE.EMP_LNAME, '') + ', ' + ISNULL(EMPLOYEE.EMP_FNAME, '') + ' ' + ISNULL(EMPLOYEE.EMP_MI, '') AS DESCRIPTION, 1 AS Checked
				FROM EMAIL_GROUP LEFT OUTER JOIN EMPLOYEE ON
				EMAIL_GROUP.EMP_CODE = EMPLOYEE.EMP_CODE
				WHERE EMAIL_GROUP.EMAIL_GR_CODE = @EMAIL_GRP_CODE AND ALERT_EMAIL <> 0  AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))) A ORDER BY A.DESCRIPTION		
			END
			ELSE
			BEGIN
  				--Check to see if there is a default group
				INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked,REC_ORDER)
				SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked,0 FROM
				(SELECT  'Root' AS EMPGROUP, EMAIL_GROUP.EMAIL_GR_CODE + ':Root' AS  EMPCODE,  EMAIL_GROUP.EMAIL_GR_CODE AS DESCRIPTION, 1 AS Checked
				FROM EMAIL_GROUP 
				WHERE EMAIL_GROUP.EMAIL_GR_CODE = @EMAIL_GRP_CODE AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))
				GROUP BY EMAIL_GROUP.EMAIL_GR_CODE) A
    		
				INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked,REC_ORDER)
				SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked,0 FROM
				(SELECT  'Root' AS EMPGROUP, EMAIL_GROUP.EMAIL_GR_CODE + ':Root' AS  EMPCODE, EMAIL_GROUP.EMAIL_GR_CODE AS DESCRIPTION, 0 AS Checked
				FROM EMAIL_GROUP 
				WHERE EMAIL_GROUP.EMAIL_GR_CODE <> @EMAIL_GRP_CODE AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))
				GROUP BY EMAIL_GROUP.EMAIL_GR_CODE) A
    		
				--Check to see if there is a default group
				INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked)
				SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked FROM
				(SELECT  EMAIL_GROUP.EMAIL_GR_CODE AS EMPGROUP, EMAIL_GROUP.EMP_CODE AS EMPCODE,  ISNULL(EMPLOYEE.EMP_LNAME, '') + ', ' + ISNULL(EMPLOYEE.EMP_FNAME, '') + ' ' + ISNULL(EMPLOYEE.EMP_MI, '') AS DESCRIPTION, 1 AS Checked
				FROM EMAIL_GROUP LEFT OUTER JOIN EMPLOYEE ON
				EMAIL_GROUP.EMP_CODE = EMPLOYEE.EMP_CODE
				WHERE EMAIL_GROUP.EMAIL_GR_CODE = @EMAIL_GRP_CODE AND ALERT_EMAIL <> 0  AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))) A ORDER BY A.DESCRIPTION
    		
				--Check to see if user flagged not to receive emails.
				INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked)
				SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked FROM
				(SELECT  EMAIL_GROUP.EMAIL_GR_CODE AS EMPGROUP, EMAIL_GROUP.EMP_CODE AS EMPCODE, ISNULL(EMPLOYEE.EMP_LNAME, '') + ', ' + ISNULL(EMPLOYEE.EMP_FNAME, '') + ' ' + ISNULL(EMPLOYEE.EMP_MI, '')  AS DESCRIPTION, 0 AS Checked
				FROM EMAIL_GROUP LEFT OUTER JOIN EMPLOYEE ON
				EMAIL_GROUP.EMP_CODE = EMPLOYEE.EMP_CODE
				WHERE EMAIL_GROUP.EMAIL_GR_CODE = @EMAIL_GRP_CODE AND (ALERT_EMAIL = 0 OR ALERT_EMAIL IS NULL)  AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))) A ORDER BY A.DESCRIPTION
    		
				INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked)
				SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked FROM
				(SELECT  EMAIL_GROUP.EMAIL_GR_CODE AS EMPGROUP, EMAIL_GROUP.EMP_CODE AS EMPCODE,  ISNULL(EMPLOYEE.EMP_LNAME, '') + ', ' + ISNULL(EMPLOYEE.EMP_FNAME, '') + ' ' + ISNULL(EMPLOYEE.EMP_MI, '') AS DESCRIPTION, 0 AS Checked
				FROM EMAIL_GROUP LEFT OUTER JOIN EMPLOYEE ON
				EMAIL_GROUP.EMP_CODE = EMPLOYEE.EMP_CODE
				WHERE EMAIL_GROUP.EMAIL_GR_CODE <> @EMAIL_GRP_CODE AND ALERT_EMAIL <> 0 AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))) A ORDER BY A.DESCRIPTION
    		
				--Check to see if the user flagged not to receive emails.
				INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked)
				SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked FROM
				(SELECT  EMAIL_GROUP.EMAIL_GR_CODE AS EMPGROUP, EMAIL_GROUP.EMP_CODE AS EMPCODE,  ISNULL(EMPLOYEE.EMP_LNAME, '') + ', ' + ISNULL(EMPLOYEE.EMP_FNAME, '') + ' ' + ISNULL(EMPLOYEE.EMP_MI, '')  AS DESCRIPTION, 0 AS Checked
				FROM EMAIL_GROUP LEFT OUTER JOIN EMPLOYEE ON
				EMAIL_GROUP.EMP_CODE = EMPLOYEE.EMP_CODE
				WHERE EMAIL_GROUP.EMAIL_GR_CODE <> @EMAIL_GRP_CODE AND (ALERT_EMAIL = 0 OR ALERT_EMAIL IS NULL) AND ((EMAIL_GROUP.INACTIVE_FLAG = 0) OR (EMAIL_GROUP.INACTIVE_FLAG IS NULL))) A ORDER BY A.DESCRIPTION
		  END

	END

	IF @JOB_NUMBER > 0 AND @JOB_COMPONENT_NBR > 0 AND @AUTO_GROUP = 1
	BEGIN

		INSERT INTO @T_EmailGroup (EMPGROUP, EMPCODE, DESCRIPTION, Checked,REC_ORDER)
		SELECT A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked,
		CASE WHEN A.EMPGROUP = 'Root' THEN -1
		ELSE NULL
		END
		AS REC_ORDER
		FROM
		(
		--SET ROOT NODE
		SELECT 'Root' AS EMPGROUP,
			   'Assigned Employees:Root' AS EMPCODE,
			   'Assigned Employees' AS DESCRIPTION,
			   0 AS Checked
		UNION
		--SET THE 5 ASSIGNMENTS FROM TRAFFIC HEADER
			--1.
			SELECT 'Assigned Employees' AS EMPGROUP,
				   JOB_TRAFFIC.ASSIGN_1 AS EMPCODE,
				   ISNULL(EMPLOYEE.EMP_LNAME + ', ', '') + ISNULL(EMPLOYEE.EMP_FNAME + ' ', ' ') 
				   +
				   ISNULL(EMPLOYEE.EMP_MI + '. ', '') AS DESCRIPTION,
				   0 AS Checked
			FROM   JOB_TRAFFIC WITH(NOLOCK)
				   INNER JOIN EMPLOYEE WITH(NOLOCK)
						ON  JOB_TRAFFIC.ASSIGN_1 = EMPLOYEE.EMP_CODE
			WHERE  (JOB_TRAFFIC.JOB_NUMBER = @JOB_NUMBER)
				   AND (JOB_TRAFFIC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
				   AND (NOT (JOB_TRAFFIC.ASSIGN_1 IS NULL))
			UNION
			--2.
			SELECT 'Assigned Employees' AS EMPGROUP,
				   JOB_TRAFFIC.ASSIGN_2 AS EMPCODE,
				   ISNULL(EMPLOYEE.EMP_LNAME + ', ', '') + ISNULL(EMPLOYEE.EMP_FNAME + ' ', ' ') 
				   +
				   ISNULL(EMPLOYEE.EMP_MI + '. ', '') AS DESCRIPTION,
				   0 AS Checked
			FROM   JOB_TRAFFIC WITH(NOLOCK)
				   INNER JOIN EMPLOYEE WITH(NOLOCK)
						ON  JOB_TRAFFIC.ASSIGN_2 = EMPLOYEE.EMP_CODE
			WHERE  (JOB_TRAFFIC.JOB_NUMBER = @JOB_NUMBER)
				   AND (JOB_TRAFFIC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
				   AND (NOT (JOB_TRAFFIC.ASSIGN_2 IS NULL))
			UNION
			--3.
			SELECT 'Assigned Employees' AS EMPGROUP,
				   JOB_TRAFFIC.ASSIGN_3 AS EMPCODE,
				   ISNULL(EMPLOYEE.EMP_LNAME + ', ', '') + ISNULL(EMPLOYEE.EMP_FNAME + ' ', ' ') 
				   +
				   ISNULL(EMPLOYEE.EMP_MI + '. ', '') AS DESCRIPTION,
				   0 AS Checked
			FROM   JOB_TRAFFIC WITH(NOLOCK)
				   INNER JOIN EMPLOYEE WITH(NOLOCK)
						ON  JOB_TRAFFIC.ASSIGN_3 = EMPLOYEE.EMP_CODE
			WHERE  (JOB_TRAFFIC.JOB_NUMBER = @JOB_NUMBER)
				   AND (JOB_TRAFFIC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
				   AND (NOT (JOB_TRAFFIC.ASSIGN_3 IS NULL))
			UNION
			--4.
			SELECT 'Assigned Employees' AS EMPGROUP,
				   JOB_TRAFFIC.ASSIGN_4 AS EMPCODE,
				   ISNULL(EMPLOYEE.EMP_LNAME + ', ', '') + ISNULL(EMPLOYEE.EMP_FNAME + ' ', ' ') 
				   +
				   ISNULL(EMPLOYEE.EMP_MI + '. ', '') AS DESCRIPTION,
				   0 AS Checked
			FROM   JOB_TRAFFIC WITH(NOLOCK)
				   INNER JOIN EMPLOYEE WITH(NOLOCK)
						ON  JOB_TRAFFIC.ASSIGN_4 = EMPLOYEE.EMP_CODE
			WHERE  (JOB_TRAFFIC.JOB_NUMBER = @JOB_NUMBER)
				   AND (JOB_TRAFFIC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
				   AND (NOT (JOB_TRAFFIC.ASSIGN_4 IS NULL))
			UNION
			--5.
			SELECT 'Assigned Employees' AS EMPGROUP,
				   JOB_TRAFFIC.ASSIGN_5 AS EMPCODE,
				   ISNULL(EMPLOYEE.EMP_LNAME + ', ', '') + ISNULL(EMPLOYEE.EMP_FNAME + ' ', ' ') 
				   +
				   ISNULL(EMPLOYEE.EMP_MI + '. ', '') AS DESCRIPTION,
				   0 AS Checked
			FROM   JOB_TRAFFIC WITH(NOLOCK)
				   INNER JOIN EMPLOYEE WITH(NOLOCK)
						ON  JOB_TRAFFIC.ASSIGN_5 = EMPLOYEE.EMP_CODE
			WHERE  (JOB_TRAFFIC.JOB_NUMBER = @JOB_NUMBER)
				   AND (JOB_TRAFFIC.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)
				   AND (NOT (JOB_TRAFFIC.ASSIGN_5 IS NULL))
			UNION

		--GET THE COMP'S AE:
			SELECT 'Assigned Employees' AS EMPGROUP,
				   JOB_COMPONENT.EMP_CODE AS EMPCODE,
				   ISNULL(EMPLOYEE.EMP_LNAME + ', ', '') + ISNULL(EMPLOYEE.EMP_FNAME + ' ', ' ') 
				   +
				   ISNULL(EMPLOYEE.EMP_MI + '. ', '') AS DESCRIPTION,
				   0 AS Checked
			FROM   JOB_COMPONENT WITH(NOLOCK)
				   INNER JOIN EMPLOYEE WITH(NOLOCK)
						ON  JOB_COMPONENT.EMP_CODE = EMPLOYEE.EMP_CODE
			WHERE  (JOB_COMPONENT.JOB_NUMBER = @JOB_NUMBER)
				   AND (JOB_COMPONENT.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR)

			UNION
		--GET THE SCHEDULE'S EMPLOYEES	
			SELECT 'Assigned Employees' AS EMPGROUP,
				   JOB_TRAFFIC_DET_EMPS.EMP_CODE AS EMPCODE,
				   ISNULL(EMPLOYEE.EMP_LNAME + ', ', '') + ISNULL(EMPLOYEE.EMP_FNAME + ' ', ' ') 
				   +
				   ISNULL(EMPLOYEE.EMP_MI + '. ', '') AS DESCRIPTION,
				   0 AS Checked
			FROM   JOB_TRAFFIC_DET_EMPS WITH(NOLOCK)
				   INNER JOIN EMPLOYEE WITH(NOLOCK)
						ON  JOB_TRAFFIC_DET_EMPS.EMP_CODE = EMPLOYEE.EMP_CODE
			WHERE  (JOB_TRAFFIC_DET_EMPS.JOB_NUMBER = @JOB_NUMBER)
				   AND (
						   JOB_TRAFFIC_DET_EMPS.JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR
					   )
		) AS A


	
	END
	
	UPDATE @T_EmailGroup SET REC_ORDER = 1 
	WHERE REC_ORDER IS NULL;
	--UPDATE @T_EmailGroup SET Checked = 1
	--FROM
	--	@T_EmailGroup EG
	--	INNER JOIN (
	--					SELECT EG.EMPCODE
	--					FROM 
	--						@T_EmailGroup EG
	--					WHERE
	--						EG.Checked = 1
	--			   ) AS A ON EG.EMPCODE = A.EMPCODE;

	INSERT INTO @EMAIL_GROUPS (EMPGROUP, EMPCODE, DESCRIPTION, Checked, REC_ORDER, EMP_FML, EmailGroupCode, Code, Description1, IsChecked, [Order], EmployeeFullName)
	SELECT 
		A.EMPGROUP, A.EMPCODE, A.DESCRIPTION, A.Checked, A.REC_ORDER, A.EMP_FML,
		[EmailGroupCode] =	CASE
								WHEN A.IsGroup = 1 THEN NULL
								ELSE A.EMPGROUP
							END,
		[Code] =	CASE
						WHEN A.IsGroup = 1 THEN REPLACE(A.EMPCODE, ':Root', '')
						ELSE A.EMPCODE
					END,
		[Description] = A.[DESCRIPTION],
		[IsChecked] = A.Checked,
		[Order] = A.REC_ORDER,
		[EmployeeFullName] =	CASE
									WHEN A.IsGroup = 1 THEN NULL
									ELSE A.EMP_FML
								END
	FROM
		(
			SELECT 
				EG.*,
				EMP_FML = ISNULL(EMP.EMP_FNAME+ ' ', '') + ISNULL(EMP.EMP_MI +'. ','') + ISNULL(EMP.EMP_LNAME,''), 
				[IsGroup] = CASE
								WHEN EMPGROUP = 'Root' OR EMPCODE LIKE '%:Root' THEN CAST(1 AS BIT)
								ELSE CAST(0 AS BIT)
							END
			FROM 
				@T_EmailGroup AS EG 
				LEFT OUTER JOIN EMPLOYEE AS EMP WITH(NOLOCK) ON EG.EMPCODE = EMP.EMP_CODE
		) AS A
	ORDER BY
		A.REC_ORDER,
		A.[DESCRIPTION];

	UPDATE @EMAIL_GROUPS SET EMP_FML = NULL WHERE DATALENGTH(EMP_FML) = 0 OR RTRIM(LTRIM(EMP_FML)) = '';
	UPDATE @EMAIL_GROUPS SET IsGroup =	CASE
											WHEN EG.EMPGROUP = 'Root' OR EmailGroupCode IS NULL OR EmployeeFullName IS NULL THEN CAST(1 AS BIT)
											ELSE CAST(0 AS BIT)
										END
	FROM
		@EMAIL_GROUPS EG
	UPDATE @EMAIL_GROUPS SET IsContacts = 0;

	IF @CL_CODE IS NOT NULL 
	BEGIN
		DECLARE @CONTACTS TABLE (CDP_CONTACT_ID INT, CONT_FML VARCHAR(2000), CP_ALERTS SMALLINT, EMAIL_RCPT SMALLINT, CONT_CODE VARCHAR(100))
		DECLARE
			@CONTACTS_CT INT;
		IF @CL_CODE IS NOT NULL AND @DIV_CODE IS NULL AND @PRD_CODE IS NULL
		BEGIN
			INSERT INTO @CONTACTS (CDP_CONTACT_ID, CONT_FML, CP_ALERTS, EMAIL_RCPT, CONT_CODE)
			SELECT DISTINCT 
				CDP_CONTACT_HDR.CDP_CONTACT_ID, 
				CDP_CONTACT_HDR.CONT_FML, 
				ISNULL(CP_ALERTS, 0) AS CP_ALERTS, 
				ISNULL(EMAIL_RCPT, 0) AS EMAIL_RCPT, 
				CONT_CODE
			FROM 
				CDP_CONTACT_HDR LEFT OUTER JOIN
				CDP_CONTACT_DTL ON CDP_CONTACT_HDR.CDP_CONTACT_ID = CDP_CONTACT_DTL.CDP_CONTACT_ID
			WHERE 
				CDP_CONTACT_HDR.CP_USER = 1 
				AND (CDP_CONTACT_HDR.INACTIVE_FLAG IS NULL OR CDP_CONTACT_HDR.INACTIVE_FLAG = 0)
				AND CDP_CONTACT_HDR.CL_CODE = @CL_CODE;
		END
		IF @CL_CODE IS NOT NULL AND @DIV_CODE IS NOT NULL AND @PRD_CODE IS NULL
		BEGIN
			INSERT INTO @CONTACTS (CDP_CONTACT_ID, CONT_FML, CP_ALERTS, EMAIL_RCPT, CONT_CODE)
			SELECT DISTINCT 
				CDP_CONTACT_HDR.CDP_CONTACT_ID, 
				CDP_CONTACT_HDR.CONT_FML, 
				ISNULL(CP_ALERTS, 0) AS CP_ALERTS, 
				ISNULL(EMAIL_RCPT, 0) AS EMAIL_RCPT, 
				CONT_CODE
			FROM 
				CDP_CONTACT_HDR LEFT OUTER JOIN
				CDP_CONTACT_DTL ON CDP_CONTACT_HDR.CDP_CONTACT_ID = CDP_CONTACT_DTL.CDP_CONTACT_ID
			WHERE 
				CDP_CONTACT_HDR.CP_USER = 1 
				AND (CDP_CONTACT_HDR.INACTIVE_FLAG IS NULL OR CDP_CONTACT_HDR.INACTIVE_FLAG = 0)
				AND CDP_CONTACT_HDR.CL_CODE = @CL_CODE
				AND (CDP_CONTACT_DTL.DIV_CODE = @DIV_CODE OR CDP_CONTACT_DTL.DIV_CODE IS NULL);
		END
		IF @CL_CODE IS NOT NULL AND @DIV_CODE IS NOT NULL AND @PRD_CODE IS NOT NULL
		BEGIN
			INSERT INTO @CONTACTS (CDP_CONTACT_ID, CONT_FML, CP_ALERTS, EMAIL_RCPT, CONT_CODE)
			SELECT DISTINCT 
				CDP_CONTACT_HDR.CDP_CONTACT_ID, 
				CDP_CONTACT_HDR.CONT_FML, 
				ISNULL(CP_ALERTS, 0) AS CP_ALERTS, 
				ISNULL(EMAIL_RCPT, 0) AS EMAIL_RCPT, 
				CONT_CODE
			FROM 
				CDP_CONTACT_HDR LEFT OUTER JOIN
				CDP_CONTACT_DTL ON CDP_CONTACT_HDR.CDP_CONTACT_ID = CDP_CONTACT_DTL.CDP_CONTACT_ID
			WHERE 
				CDP_CONTACT_HDR.CP_USER = 1 
				AND (CDP_CONTACT_HDR.INACTIVE_FLAG IS NULL OR CDP_CONTACT_HDR.INACTIVE_FLAG = 0)
				AND CDP_CONTACT_HDR.CL_CODE = @CL_CODE
				AND (CDP_CONTACT_DTL.DIV_CODE = @DIV_CODE OR CDP_CONTACT_DTL.DIV_CODE IS NULL)
				AND (CDP_CONTACT_DTL.PRD_CODE = @PRD_CODE OR CDP_CONTACT_DTL.PRD_CODE IS NULL);
		END
		SELECT @CONTACTS_CT = COUNT(1) FROM @CONTACTS;
		IF @CONTACTS_CT > 0
		BEGIN
			INSERT INTO @EMAIL_GROUPS (EMPGROUP, EMPCODE, [DESCRIPTION], Checked, REC_ORDER, EMP_FML, IsGroup, EmailGroupCode, Code, Description1, IsChecked, [Order], EmployeeFullName, IsContacts)
			SELECT
				'Root',
				'Contacts:Root',
				'Contacts',
				0,
				0,
				NULL,
				1,
				NULL,
				'Contacts',
				'Contacts',
				0,
				0,
				NULL,
				1
			INSERT INTO @EMAIL_GROUPS (EMPGROUP, EMPCODE, [DESCRIPTION], Checked, REC_ORDER, EMP_FML, IsGroup, EmailGroupCode, Code, Description1, IsChecked, [Order], EmployeeFullName, IsContacts, ClientContactID)
			SELECT
				'Contacts',
				CAST(CDP_CONTACT_ID AS VARCHAR),
				CONT_FML,
				0,
				0,
				CONT_FML,
				0,
				'Contacts',
				CAST(CDP_CONTACT_ID AS VARCHAR),
				CONT_FML,
				0,
				0,
				CONT_FML,
				1,
				C.CDP_CONTACT_ID
			FROM
				@CONTACTS C;

		END
	END

END
/*=========== QUERY ===========*/
RETURN

END
GO