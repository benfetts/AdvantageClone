IF EXISTS ( SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID( N'[dbo].[wvfn_ts_can_edit]' ) AND xtype IN ( N'FN', N'IF', N'TF' ))
BEGIN
	DROP FUNCTION [dbo].[wvfn_ts_can_edit]
END
GO

CREATE FUNCTION [dbo].[wvfn_ts_can_edit]
(	
@EMP_CODE VARCHAR(6),
@ET_ID INT,
@ET_DTL_ID SMALLINT,
@SEQ_NBR SMALLINT
)
RETURNS @MY_DATA TABLE
(
	CAN_EDIT SMALLINT,
	RETURN_MESSAGE VARCHAR(100)	
)
AS
BEGIN
/*=========== QUERY ===========*/
	DECLARE
		@POST_PERIOD_CHECK INT,
		@POST_PERIOD INT,
		@JOB_NUMBER INT,
		@JOB_COMPONENT_NBR SMALLINT,
		@EDIT_TYPE INT,
		@JOB_COMPONENT_PROC_CTRL SMALLINT,
		@TIME_TYPE VARCHAR(1),
		@SIMPLE_DATE SMALLDATETIME,
		@APPROVED_PENDING SMALLINT,
		@CAN_EDIT SMALLINT,
		@RETURN_MESSAGE VARCHAR(100),
		@CURR_AR_INV_NBR INT,
		@CURR_BILLING_USER VARCHAR(100)
		
	SET @CAN_EDIT = 1;	
	SET @RETURN_MESSAGE = '';

	SELECT @SIMPLE_DATE = EMP_DATE FROM EMP_TIME WITH(NOLOCK) WHERE ET_ID = @ET_ID;

	-- CHECK POST PERIOD
	BEGIN
		SELECT @POST_PERIOD_CHECK = TS_PPERIOD_CHK FROM AGENCY WITH(NOLOCK);
		SET @POST_PERIOD_CHECK = ISNULL(@POST_PERIOD_CHECK, 0);
		IF @POST_PERIOD_CHECK = 1
		BEGIN
			SELECT @POST_PERIOD = COUNT(1) 
			FROM POSTPERIOD WITH (NOLOCK)
			WHERE	PPSRTDATE <= @SIMPLE_DATE
			AND	PPENDDATE >= @SIMPLE_DATE
			AND (PPTECURMTH = 'C' OR PPTECURMTH IS NULL);
		END
		SET @POST_PERIOD = ISNULL(@POST_PERIOD, 0);
		IF @POST_PERIOD_CHECK = 1 AND @POST_PERIOD = 0
		BEGIN
			SET @CAN_EDIT = 0;
			SET @RETURN_MESSAGE = 'Post period is closed';
		END
	END
	-- CHECK FOR APPROVAL STATUS
	BEGIN
		SELECT @APPROVED_PENDING = (ISNULL(APPR_FLAG, 0) + ISNULL(APPR_PENDING, 0))
		FROM EMP_TIME WITH (NOLOCK) 
		WHERE 
			EMP_CODE = @EMP_CODE 
			AND EMP_DATE = @SIMPLE_DATE;
	END		
    -- NOT ZERO IS EITHER APPROVED OR PENDING; DON'T CARE WHICH
	BEGIN
		SET @APPROVED_PENDING = ISNULL(@APPROVED_PENDING, 0);		
		IF @APPROVED_PENDING > 0
		BEGIN
			SET @CAN_EDIT = 0;
			SET @RETURN_MESSAGE = 'Day is Approved/Pending'
		END
	END
	IF @ET_ID > 0 AND @ET_DTL_ID > 0 
	BEGIN
		--CHECK JOB
		IF @SEQ_NBR IS NULL
		BEGIN
			SELECT 
				@JOB_NUMBER = JOB_NUMBER, 
				@JOB_COMPONENT_NBR = JOB_COMPONENT_NBR,
				@CURR_AR_INV_NBR =  AR_INV_NBR,
				@CURR_BILLING_USER = BILLING_USER
			FROM EMP_TIME_DTL WITH(NOLOCK)
			WHERE ET_ID = @ET_ID AND ET_DTL_ID = @ET_DTL_ID;
		END
		ELSE
		BEGIN
			SELECT 
				@JOB_NUMBER = JOB_NUMBER, 
				@JOB_COMPONENT_NBR = JOB_COMPONENT_NBR,
				@CURR_AR_INV_NBR =  AR_INV_NBR,
				@CURR_BILLING_USER = BILLING_USER
			FROM EMP_TIME_DTL WITH(NOLOCK)
			WHERE ET_ID = @ET_ID AND ET_DTL_ID = @ET_DTL_ID AND SEQ_NBR = @SEQ_NBR;
		END
		SET @CURR_AR_INV_NBR = ISNULL(@CURR_AR_INV_NBR, 0);
		SET @CURR_BILLING_USER = ISNULL(@CURR_BILLING_USER, '');
		IF @CURR_AR_INV_NBR > 0 OR @CURR_BILLING_USER <> ''
		BEGIN
			SET @CAN_EDIT = 0
			SET @RETURN_MESSAGE = 'Record has been billed'
		END		
		SET @JOB_NUMBER = ISNULL(@JOB_NUMBER, 0);
		SET @JOB_COMPONENT_NBR = ISNULL(@JOB_COMPONENT_NBR, 0);		
		IF @JOB_NUMBER > 0 AND @JOB_COMPONENT_NBR > 0
			BEGIN
				SET @TIME_TYPE = 'D';
				SELECT @JOB_COMPONENT_PROC_CTRL = JOB_PROCESS_CONTRL FROM JOB_COMPONENT WITH(NOLOCK) WHERE JOB_NUMBER = @JOB_NUMBER AND JOB_COMPONENT_NBR = @JOB_COMPONENT_NBR;
				IF @JOB_COMPONENT_PROC_CTRL IN (2,3,5,6,9,10,12,13)
				BEGIN
					SET @CAN_EDIT = 0;
					SET @RETURN_MESSAGE = 'Cannot edit due to Job Processing Control';
				END
			END
		ELSE
		BEGIN
			SET @TIME_TYPE = 'N';
		END	
		SELECT @EDIT_TYPE = 0;
		-- Determine if rows have been billed
		BEGIN
			IF @SEQ_NBR IS NULL
			BEGIN
				SELECT @EDIT_TYPE = 1
				WHERE EXISTS (SELECT etd.AR_INV_NBR  
							  FROM EMP_TIME_DTL etd WITH (NOLOCK)
							  WHERE etd.ET_ID = @ET_ID
								AND etd.ET_DTL_ID = @ET_DTL_ID
								AND etd.AR_INV_NBR IS NOT NULL 
								AND (etd.EDIT_FLAG = 0 OR etd.EDIT_FLAG IS NULL))
			END
			ELSE
			BEGIN
				SELECT @EDIT_TYPE = 1
				WHERE EXISTS (SELECT etd.AR_INV_NBR  
							  FROM EMP_TIME_DTL etd WITH (NOLOCK)
							  WHERE etd.ET_ID = @ET_ID
								 AND etd.ET_DTL_ID = @ET_DTL_ID
								 AND etd.AR_INV_NBR IS NOT NULL 
								 AND (etd.EDIT_FLAG = 0 OR etd.EDIT_FLAG IS NULL)
								 AND etd.SEQ_NBR = @SEQ_NBR)
			END
		END
		-- Determine if item is summarized
		BEGIN
			IF @SEQ_NBR IS NULL
			BEGIN
				SELECT @EDIT_TYPE = 2
				WHERE EXISTS (SELECT ET_ID
								FROM EMP_TIME_DTL etd WITH (NOLOCK)
								WHERE etd.ET_ID = @ET_ID
									AND etd.ET_DTL_ID = @ET_DTL_ID 
									AND etd.EDIT_FLAG = 1) 
			END
			IF NOT @SEQ_NBR IS NULL
			BEGIN
				SELECT @EDIT_TYPE = 2
				WHERE EXISTS (SELECT ET_ID
								FROM EMP_TIME_DTL etd WITH (NOLOCK)
								WHERE etd.ET_ID = @ET_ID
									AND etd.ET_DTL_ID = @ET_DTL_ID 
									AND etd.SEQ_NBR = @SEQ_NBR
									AND etd.EDIT_FLAG = 1) 
			END
		END
	
		IF @SEQ_NBR IS NULL
		BEGIN
			-- Determine if item is a restricted AB flag
			BEGIN
				SELECT @EDIT_TYPE = 3
				WHERE  EXISTS (SELECT AB_FLAG
							   FROM EMP_TIME_DTL etd WITH (NOLOCK)
							   WHERE etd.ET_ID = @ET_ID
							      AND etd.ET_DTL_ID = @ET_DTL_ID
								  AND etd.AB_FLAG IN (1,3))
			END
			-- Determine if item is selected for billing
			BEGIN
			SELECT @EDIT_TYPE = 4
				WHERE EXISTS (SELECT BILLING_USER
							  FROM EMP_TIME_DTL etd WITH (NOLOCK)
							  WHERE etd.ET_ID = @ET_ID
							     AND etd.ET_DTL_ID = @ET_DTL_ID
								 AND BILLING_USER IS NOT NULL)
			END
		END
		BEGIN
			-- Determine if item is a restricted AB flag
			BEGIN
				SELECT @EDIT_TYPE = 3
				WHERE  EXISTS (SELECT AB_FLAG
							   FROM EMP_TIME_DTL etd WITH (NOLOCK)
							   WHERE etd.ET_ID = @ET_ID
								  AND etd.ET_DTL_ID = @ET_DTL_ID
								  AND etd.SEQ_NBR = @SEQ_NBR
								  AND etd.AB_FLAG IN (1,3))
			END
			-- Determine if item is selected for billing
			BEGIN
				SELECT @EDIT_TYPE = 4
				WHERE EXISTS (SELECT BILLING_USER
							  FROM EMP_TIME_DTL etd WITH (NOLOCK)
							  WHERE etd.ET_ID = @ET_ID
								 AND etd.ET_DTL_ID = @ET_DTL_ID
								 AND etd.SEQ_NBR = @SEQ_NBR
								 AND BILLING_USER IS NOT NULL)
			END
		END
		-- Check if row has been approved
		BEGIN
			SELECT @EDIT_TYPE = 6
				WHERE EXISTS (SELECT ET_ID
		  					  FROM EMP_TIME et WITH (NOLOCK)
		 					  WHERE et.ET_ID = @ET_ID
		   						 AND APPR_FLAG = 1)
					AND EXISTS (SELECT 1 FROM AGENCY WITH (NOLOCK) WHERE TIME_APPR_ACTIVE = 1)
		END
		-- Check if row is pending approval
		BEGIN
			SELECT @EDIT_TYPE = 5
				WHERE  EXISTS (SELECT ET_ID
		  					   FROM EMP_TIME et WITH (NOLOCK)
		 					   WHERE et.ET_ID = @ET_ID
		   						  AND APPR_PENDING = 1)
					AND EXISTS (SELECT 1 FROM AGENCY WITH (NOLOCK) WHERE TIME_APPR_ACTIVE = 1)
		END
		-- Check if row is denied approval
		BEGIN
			SELECT @EDIT_TYPE = 7
				WHERE  EXISTS (SELECT ET_ID
		  					   FROM EMP_TIME et WITH (NOLOCK)
		 					   WHERE et.ET_ID = @ET_ID
		   						  AND APPR_PENDING = 2)
					AND EXISTS (SELECT 1 FROM AGENCY WITH (NOLOCK) WHERE TIME_APPR_ACTIVE = 1)
		END   

	    -- SET MESSAGES
		BEGIN
			IF @APPROVED_PENDING > 0 AND @EDIT_TYPE <> 7
			BEGIN
				SET @CAN_EDIT = 0;
				SET @RETURN_MESSAGE = 'Cannot edit due to Approval Status'
			END	
			IF @EDIT_TYPE = 1
			BEGIN
				SET @CAN_EDIT = 0
				SET @RETURN_MESSAGE = 'Entry is billed';
			END
			IF @EDIT_TYPE = 2
			BEGIN
				SET @CAN_EDIT = 0
				SET @RETURN_MESSAGE = 'Entry is summarized';
			END
			IF @EDIT_TYPE = 3
			BEGIN
				SET @CAN_EDIT = 0
				SET @RETURN_MESSAGE = 'Entry restricted AB flag';
			END
			IF @EDIT_TYPE = 4
			BEGIN
				SET @CAN_EDIT = 0
				SET @RETURN_MESSAGE = 'Entry selected for billing';
			END
			IF @EDIT_TYPE = 5
			BEGIN
				SET @CAN_EDIT = 0
				SET @RETURN_MESSAGE = 'Entry pending approval';
			END
			IF @EDIT_TYPE = 6
			BEGIN
				SET @CAN_EDIT = 0
				SET @RETURN_MESSAGE = 'Entry approved';
			END
			-- FINAL CHECK TO ALLOW DENIED EDIT
			IF @APPROVED_PENDING > 0 AND @EDIT_TYPE = 7
			BEGIN
				SET @CAN_EDIT = 1;
				SET @RETURN_MESSAGE = ''
			END	
		END

	END

	INSERT INTO @MY_DATA(CAN_EDIT,RETURN_MESSAGE) VALUES (@CAN_EDIT, @RETURN_MESSAGE);
	RETURN;

/*=========== QUERY ===========*/
END

