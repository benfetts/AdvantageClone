if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[usp_wv_ALERT_GET_COMMENTS]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[usp_wv_ALERT_GET_COMMENTS]
GO

CREATE PROCEDURE [dbo].[usp_wv_ALERT_GET_COMMENTS] /*WITH ENCRYPTION*/
@ALERT_ID INT,
@EMP_CODE VARCHAR(6),
@OFFSET [DECIMAL](9,3),
@HIDE_SYSTEM_COMMENTS BIT
AS
/*=========== QUERY ===========*/
BEGIN

	CREATE TABLE #COMMENTS
        (
			ID INT IDENTITY,
			[COMMENT_ID] INT,
			[COMMENT] TEXT,
			[SHORT_COMMENT] VARCHAR(200),
			[IS_TRUNCATED] INT,
			[USER_NAME] VARCHAR(100),
	        [EMP_CODE] VARCHAR(6),
			[GENERATED_DATE] SMALLDATETIME,
			[EMP_FML] VARCHAR(500),
			[USER_CODE] VARCHAR(100),
			[DOCUMENT_LIST] VARCHAR(MAX),
			[EMP_IMAGE] IMAGE,
			[EMP_NICKNAME] VARCHAR(10),
			ASSIGNED_EMP_CODE VARCHAR(6),
			ASSIGNMENT_CHANGED BIT,
			[ASSIGNED_EMP_IMAGE] IMAGE,
			[ASSIGNED_EMP_NICKNAME] VARCHAR(10),
			ALRT_NOTIFY_HDR_ID INT,
			ALERT_STATE_ID INT,
			IS_UNASSIGNED BIT,
 			[ASSIGNED_EMP_FML] VARCHAR(500),
			IS_CLIENT_PORTAL_COMMENT BIT,
			VR_CODE VARCHAR(4) COLLATE SQL_Latin1_General_CP1_CS_AS,
			ALERT_ID INT,
			CUSTODY_START_DATE SMALLDATETIME,
			CUSTODY_END_DATE SMALLDATETIME,
			ALRT_NOTIFY_HDR_NAME VARCHAR(100),
			ALERT_STATE_NAME VARCHAR(100),
			REPLY_LEVEL INT,
			PARENT_ID INT,
			MARKUP_ID INT,
			MARKUP_XML XML,
			MARKUP VARCHAR(MAX),
			MARKUP_DOCUMENT_ID INT,
			MARKUP_GENERATED_DATE SMALLDATETIME,
			MARKUP_TYPE_ID INT,
			MARKUP_THUMBNAIL IMAGE
       );

	CREATE TABLE #REPLIES (ID INT IDENTITY, COMMENT_ID INT, REPLY_LEVEL INT);

	DECLARE
		@IS_PROOF BIT;

	-- FLAG MIGHT CHANGE
	SELECT
		@IS_PROOF =
			CASE
				WHEN A.ALERT_CAT_ID = 79 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT)
			END
	FROM
		ALERT A WITH(NOLOCK)
	WHERE
		A.ALERT_ID = @ALERT_ID;

	WITH MyCTE AS
		(SELECT 
			ALERT_ID, 
			COMMENT_ID, 
			COMMENT, 
			PARENT_ID,
			0 AS REPLY_LEVEL
		FROM 
			ALERT_COMMENT
		WHERE 
			PARENT_ID IS NULL 
			AND ALERT_ID = @ALERT_ID
		UNION ALL
		SELECT 
			ALERT_COMMENT.ALERT_ID, 
			ALERT_COMMENT.COMMENT_ID, 
			ALERT_COMMENT.COMMENT, 
			ALERT_COMMENT.PARENT_ID,
			MyCTE.REPLY_LEVEL + 1
		FROM 
			ALERT_COMMENT
			INNER JOIN MyCTE ON ALERT_COMMENT.PARENT_ID = MyCTE.COMMENT_ID
		WHERE 
			ALERT_COMMENT.PARENT_ID IS NOT NULL 
			AND ALERT_COMMENT.ALERT_ID = @ALERT_ID)
		INSERT INTO #REPLIES (COMMENT_ID, REPLY_LEVEL)
		SELECT COMMENT_ID, REPLY_LEVEL
		FROM MyCTE;

	INSERT INTO #COMMENTS (
						   COMMENT_ID,
						   COMMENT,
						   SHORT_COMMENT,
						   IS_TRUNCATED,
						   [USER_NAME],
						   EMP_CODE,
						   GENERATED_DATE,
						   EMP_FML,
						   USER_CODE,
						   DOCUMENT_LIST,
						   EMP_NICKNAME,
						   EMP_IMAGE,
						   ASSIGNED_EMP_CODE,
						   ALRT_NOTIFY_HDR_ID,
						   ALERT_STATE_ID,
						   IS_CLIENT_PORTAL_COMMENT,
						   VR_CODE,
						   ALERT_ID,
						   CUSTODY_START_DATE,
						   CUSTODY_END_DATE,
						   PARENT_ID
						   )	
	SELECT 
		A.COMMENT_ID,
		A.COMMENT,
		A.SHORT_COMMENT,
		A.IS_TRUNCATED,
		A.[USER_NAME],
		A.EMP_CODE,
		A.GENERATED_DATE,
		A.EMP_FML,
		A.USER_CODE,
		A.DOCUMENT_LIST,
		EP.EMP_NICKNAME,
		NULL,
		A.ASSIGNED_EMP_CODE,
		A.ALRT_NOTIFY_HDR_ID,
		A.ALERT_STATE_ID,
		A.IS_CLIENT_PORTAL_COMMENT,
		A.VR_CODE,
		A.ALERT_ID,
		A.CUSTODY_START,
		A.CUSTODY_END,
		A.PARENT_ID
	FROM (
		SELECT 
			ALERT_COMMENT.COMMENT_ID, 
			CAST(ALERT_COMMENT.COMMENT AS VARCHAR(MAX)) AS COMMENT, 
			CAST(ALERT_COMMENT.COMMENT AS VARCHAR(200)) AS SHORT_COMMENT, 
			CASE
				WHEN LEN(CAST(ALERT_COMMENT.COMMENT AS VARCHAR(210))) > 200 THEN 1
				ELSE 0
			END AS IS_TRUNCATED,
			SEC_USER.[USER_NAME], 
			SEC_USER.EMP_CODE, 
			ALERT_COMMENT.GENERATED_DATE, 
			ISNULL(EMPLOYEE.EMP_FNAME+' ','') + ISNULL(EMPLOYEE.EMP_MI +'. ','') +  ISNULL(EMPLOYEE.EMP_LNAME,'') AS EMP_FML, 
			ALERT_COMMENT.USER_CODE,
			ALERT_COMMENT.DOCUMENT_LIST,
			ALERT_COMMENT.ASSIGNED_EMP_CODE,
			ALERT_COMMENT.ALRT_NOTIFY_HDR_ID,
			ALERT_COMMENT.ALERT_STATE_ID,
			0 AS IS_CLIENT_PORTAL_COMMENT,
			ALERT_COMMENT.VR_CODE,
			ALERT_COMMENT.ALERT_ID,
			ALERT_COMMENT.GENERATED_DATE AS CUSTODY_START,
			ALERT_COMMENT.CUSTODY_END,
			ALERT_COMMENT.PARENT_ID	
		FROM         
			EMPLOYEE WITH (NOLOCK) 
			INNER JOIN SEC_USER WITH (NOLOCK) ON EMPLOYEE.EMP_CODE = SEC_USER.EMP_CODE 
			RIGHT OUTER JOIN ALERT_COMMENT WITH (NOLOCK) ON UPPER(SEC_USER.USER_CODE) = UPPER(ALERT_COMMENT.USER_CODE)	
			INNER JOIN #REPLIES R ON ALERT_COMMENT.COMMENT_ID = R.COMMENT_ID
		WHERE 
			(ALERT_COMMENT.ALERT_ID = @ALERT_ID) AND (USER_CODE_CP IS NULL OR USER_CODE_CP = 0)
			AND 1 = CASE 
						WHEN @HIDE_SYSTEM_COMMENTS IS NULL OR @HIDE_SYSTEM_COMMENTS = 0 THEN 1 
						WHEN @HIDE_SYSTEM_COMMENTS = 1 AND ALERT_COMMENT.IS_SYSTEM = 1 THEN 0
						ELSE 1 
					END
		--GET CLIENT PORTAL COMMENTS
		UNION	
		SELECT 
			ALERT_COMMENT.COMMENT_ID, 
			CAST(ALERT_COMMENT.COMMENT AS VARCHAR(MAX)) AS COMMENT, 
			CAST(ALERT_COMMENT.COMMENT AS VARCHAR(200)) AS SHORT_COMMENT, 
			CASE
				WHEN LEN(CAST(ALERT_COMMENT.COMMENT AS VARCHAR(210))) > 200 THEN 1
				ELSE 0
			END AS IS_TRUNCATED,
			CP_USER.[USER_NAME], 
			CAST(CDP_CONTACT_HDR.CDP_CONTACT_ID AS VARCHAR), 
			ALERT_COMMENT.GENERATED_DATE, 
			CDP_CONTACT_HDR.CONT_FML AS EMP_FML,
			'', 
			ALERT_COMMENT.DOCUMENT_LIST,
			ALERT_COMMENT.ASSIGNED_EMP_CODE,
			ALERT_COMMENT.ALRT_NOTIFY_HDR_ID,
			ALERT_COMMENT.ALERT_STATE_ID,
			1 AS IS_CLIENT_PORTAL_COMMENT,
			NULL,
			NULL,
			COALESCE(ALERT_COMMENT.CUSTODY_START, ALERT_COMMENT.GENERATED_DATE) AS CUSTODY_START,
			ALERT_COMMENT.CUSTODY_END,
			ALERT_COMMENT.PARENT_ID
		FROM 
			ALERT_COMMENT WITH (NOLOCK) 
			INNER JOIN CDP_CONTACT_HDR WITH (NOLOCK) ON ALERT_COMMENT.USER_CODE_CP = CDP_CONTACT_HDR.CDP_CONTACT_ID 
			LEFT OUTER JOIN CP_USER WITH (NOLOCK) ON CP_USER.CDP_CONTACT_ID = CDP_CONTACT_HDR.CDP_CONTACT_ID
			INNER JOIN #REPLIES R ON ALERT_COMMENT.COMMENT_ID = R.COMMENT_ID
		WHERE  
			(ALERT_COMMENT.ALERT_ID = @ALERT_ID) 
			AND (USER_CODE_CP IS NOT NULL)

	) AS A
		LEFT OUTER JOIN EMPLOYEE_PICTURE EP ON A.EMP_CODE = EP.EMP_CODE
	ORDER BY
		A.GENERATED_DATE ASC,
		A.CUSTODY_START ASC,
		A.CUSTODY_END ASC,
		A.COMMENT_ID ASC;

	UPDATE #COMMENTS SET ASSIGNMENT_CHANGED = CASE WHEN #COMMENTS.EMP_CODE <> #COMMENTS.ASSIGNED_EMP_CODE AND NOT ASSIGNED_EMP_CODE IS NULL THEN 1 ELSE 0 END;
	UPDATE #COMMENTS SET IS_UNASSIGNED = CASE WHEN NOT ALRT_NOTIFY_HDR_ID IS NULL AND NOT ALERT_STATE_ID IS NULL AND ASSIGNED_EMP_CODE IS NULL THEN 1 ELSE 0 END;

	UPDATE #COMMENTS SET 
		ASSIGNED_EMP_FML = ISNULL(E.EMP_FNAME+' ','') + ISNULL(E.EMP_MI +'. ','') +  ISNULL(E.EMP_LNAME,''),
		ASSIGNED_EMP_IMAGE = NULL, 
		ASSIGNED_EMP_NICKNAME = EP.EMP_NICKNAME
	FROM
		#COMMENTS 
		INNER JOIN EMPLOYEE E ON #COMMENTS.ASSIGNED_EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = E.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS
		INNER JOIN EMPLOYEE_PICTURE EP ON #COMMENTS.ASSIGNED_EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS = EP.EMP_CODE COLLATE SQL_Latin1_General_CP1_CS_AS
	WHERE
		NOT #COMMENTS.ASSIGNED_EMP_CODE IS NULL;

	UPDATE #COMMENTS SET EMP_FML = ISNULL(VEN_REP.VR_FNAME+' ','') + CASE WHEN NULLIF(VEN_REP.VR_MI,'') IS NULL THEN '' ELSE VEN_REP.VR_MI + '. ' END +  ISNULL(VEN_REP.VR_LNAME,'')
	FROM #COMMENTS	
		INNER JOIN ALERT ON ALERT.ALERT_ID = #COMMENTS.ALERT_ID 
		INNER JOIN VEN_REP ON #COMMENTS.VR_CODE = VEN_REP.VR_CODE AND ALERT.VN_CODE = VEN_REP.VN_CODE
	WHERE #COMMENTS.USER_CODE IS NULL

	UPDATE #COMMENTS SET ALRT_NOTIFY_HDR_NAME = A.ALERT_NOTIFY_NAME
	FROM
		#COMMENTS C
		INNER JOIN ALERT_NOTIFY_HDR A ON C.ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID;

	UPDATE #COMMENTS SET ALERT_STATE_NAME = A.ALERT_STATE_NAME
	FROM
		#COMMENTS C
		INNER JOIN ALERT_STATES A ON C.ALERT_STATE_ID = A.ALERT_STATE_ID;

	UPDATE #COMMENTS SET REPLY_LEVEL = R.REPLY_LEVEL
	FROM
		#COMMENTS C
		INNER JOIN #REPLIES R ON C.COMMENT_ID = R.COMMENT_ID;

	IF @IS_PROOF = 1
	BEGIN
		UPDATE #COMMENTS SET
			MARKUP_ID = PM.ID,
			MARKUP_XML = PM.MARKUP_XML,
			MARKUP = PM.MARKUP,
			MARKUP_DOCUMENT_ID = PM.DOCUMENT_ID,
			MARKUP_GENERATED_DATE = PM.GENERATED_DATE,
			MARKUP_TYPE_ID = PM.MARKUP_TYPE_ID,
			MARKUP_THUMBNAIL = PM.THUMBNAIL
		FROM
			#COMMENTS C
			INNER JOIN PROOFING_MARKUP PM WITH(NOLOCK) ON C.COMMENT_ID = PM.COMMENT_ID;
	END

	SELECT 
		[AlertID] = @ALERT_ID,
		[RowID] = C.ID,
		[CommentID] = C.COMMENT_ID,
		[GeneratedDate] = CASE @OFFSET
							WHEN 0 THEN GENERATED_DATE
							ELSE ISNULL(DATEADD(mi, (CONVERT(INT, @OFFSET) * 60) + (@OFFSET - CONVERT(INT, @OFFSET)), GENERATED_DATE), GENERATED_DATE)
						  END,
		[Comment] = C.COMMENT,
		[ShortComment] = C.SHORT_COMMENT,
		[IsTruncated] = C.IS_TRUNCATED,
		[IsClientPortalComment] = C.IS_CLIENT_PORTAL_COMMENT,
		[UserName] = C.[USER_NAME],
		[UserCode] = C.USER_CODE,
		[EmployeeCode] = C.EMP_CODE,
		[AssignedEmployeeCode] = C.ASSIGNED_EMP_CODE,
		[AlertTemplateID] = C.ALRT_NOTIFY_HDR_ID,
		[AlertTemplateName] = C.ALRT_NOTIFY_HDR_NAME,
		[AlertStateID] = C.ALERT_STATE_ID,
		[AlertStateName] = C.ALERT_STATE_NAME,
		[AssignmentChanged] = C.ASSIGNMENT_CHANGED,
		[IsUnassigned] = C.IS_UNASSIGNED,
		[DocumentList] = C.DOCUMENT_LIST,
		[EmployeeFullName] = C.EMP_FML,
		[EmployeeNickname] = C.EMP_NICKNAME,
		[EmployeeImage] = NULL, --C.EMP_IMAGE,
		[AssignedFullName] = C.ASSIGNED_EMP_FML,
		[AssignedEmployeeNickname] = C.ASSIGNED_EMP_NICKNAME,
		[AssignedEmployeeImage] = NULL, --C.ASSIGNED_EMP_IMAGE,
		[CustodyStartDate] = CASE @OFFSET
							WHEN 0 THEN GENERATED_DATE
							ELSE ISNULL(DATEADD(mi, (CONVERT(INT, @OFFSET) * 60) + (@OFFSET - CONVERT(INT, @OFFSET)), GENERATED_DATE), GENERATED_DATE)
						  END,
		[CustodyEndDate] =	CASE @OFFSET
								WHEN 0 THEN C.CUSTODY_END_DATE
								ELSE ISNULL(DATEADD(mi, (CONVERT(INT, @OFFSET) * 60) + (@OFFSET - CONVERT(INT, @OFFSET)), C.CUSTODY_END_DATE), C.CUSTODY_END_DATE)
							END,
		[ReplyLevel] = C.REPLY_LEVEL,
		[ParentID] = ISNULL(C.PARENT_ID, 0),
		[MarkupID] = MARKUP_ID,
		[MarkupXML] = MARKUP_XML,
		[Markup] = MARKUP,
		[MarkupDocumentID] = MARKUP_DOCUMENT_ID,
		[MarkupGeneratedDate] = MARKUP_GENERATED_DATE,
		[MarkupTypeID] = MARKUP_TYPE_ID,
		[MarkupThumbnail] = MARKUP_THUMBNAIL
	FROM 
		#COMMENTS C
	ORDER BY 
		[GENERATED_DATE] DESC,
		[CommentID] DESC;

	DROP TABLE #COMMENTS;
	DROP TABLE #REPLIES;

END
/*=========== QUERY ===========*/
GO