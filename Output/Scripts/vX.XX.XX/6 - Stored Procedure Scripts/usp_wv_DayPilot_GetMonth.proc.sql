IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[usp_wv_DayPilot_GetMonth]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[usp_wv_DayPilot_GetMonth]
GO

CREATE PROCEDURE [dbo].[usp_wv_DayPilot_GetMonth] 
--FROM: usp_wv_calendar_task_month
@UserID VARCHAR(100),
@EmpCode VARCHAR(6),
@OfficeCode VARCHAR(4),
@ClientCode VARCHAR(6),
@DivCode VARCHAR(6),
@ProdCode VARCHAR(6),
@JobNumber VARCHAR(6),
@JobComp VARCHAR(6),
@ROLES VARCHAR(8000),
@StartDate SMALLDATETIME,
@EndDate SMALLDATETIME,
@TaskStatus VARCHAR(1),
@ExcludeTempComplete CHAR(1),
@MilestonesOnly CHAR(1),
@Manager VARCHAR(6),
@GrpLevel VARCHAR(1),
--FROM: usp_wv_nontask_GetTasks
@Type VARCHAR(2),
--For display:
@ShowTasks SMALLINT,
@ShowDuration SMALLINT,
@Show_Events SMALLINT,
@Show_Event_Tasks SMALLINT,
@DEPTS VARCHAR(8000),
@TRF_CODE VARCHAR(10),
@CP INT,
@CPID INT,
@FuncRoles VarChar(8000),
@ShowAssignments SMALLINT,
@IncludeUnassigned bit
AS
BEGIN
            /*
            * NON_TASK_TYPE: A = APPOINTMENT, H = HOLIDAY, E = EVENT, ET= EVENT TASKS
            * NON_TASK_ID is the Event Id for Events; it is the Event Task Id for Event Tasks
            * For event tasks, I'm going to re-use TASK_SEQ_NBR to hold the EVENT_ID of the Event task
            */
			
            CREATE TABLE
	            #CALENDAR
	            (
		            ID INTEGER IDENTITY (1, 1) NOT NULL ,
		            EMP_CODE VARCHAR(8000) NULL,
		            EMP_FNAME VARCHAR(30) NULL,
		            EMP_MI VARCHAR(1) NULL,
		            EMP_LNAME VARCHAR(30) NULL,
		            EMP_FML_NAME VARCHAR(8000) NULL,
		            CL_CODE VARCHAR(6) NULL,
		            DIV_CODE VARCHAR(6) NULL,
		            PRD_CODE VARCHAR(6) NULL,
		            JOB_NUMBER INTEGER NULL,
		            JOB_COMPONENT_NBR SMALLINT NULL,
		            CL_NAME VARCHAR(40) NULL,
		            DIV_NAME VARCHAR(40) NULL,
		            PRD_DESCRIPTION VARCHAR(40) NULL,
		            JOB_DESC VARCHAR(60) NULL,
		            JOB_COMP_DESC VARCHAR(60) NULL,
		            TASK_NON_TASK_DISPLAY VARCHAR(2000) NULL,
		            TASK_NON_TASK_DESCRIPTION VARCHAR(2000) NULL,
		            TASK_STATUS VARCHAR(1) NULL,
		            TASK_SEQ_NBR INTEGER NULL,
		            FNC_CODE VARCHAR(10) NULL,
		            TASK_DESCRIPTION VARCHAR(254) NULL,
		            TASK_HOURS_ALLOWED DECIMAL(8,2) NULL,
		            TRF_CODE VARCHAR(10) NULL,
		            TRF_DESCRIPTION VARCHAR(40) NULL,
		            THIS_DAY INTEGER NULL,
		            START_DAY INTEGER NULL,
		            END_DAY INTEGER NULL,
		            ALL_DAY INTEGER NULL,
		            NUM_DAYS INTEGER NULL,
		            TASK_TEMP_COMPLETE_DATE SMALLDATETIME NULL,
		            START_DATE SMALLDATETIME NULL,
		            END_DATE SMALLDATETIME NULL,
		            START_TIME SMALLDATETIME NULL,
		            END_TIME SMALLDATETIME NULL,
		            WEEK_VIEW_END_TIME SMALLDATETIME NULL,
		            HAS_TIME SMALLINT NULL,
		            NON_TASK_ID INTEGER NULL,
		            NON_TASK_TYPE VARCHAR(5) NULL,
		            NON_TASK_HOURS DECIMAL(15,2) NULL,
		            NON_TASK_CATEGORY VARCHAR(50) NULL,
		            IS_NON_TASK SMALLINT NULL,
		            WEEK_VIEW_ALL_DAY BIT NULL,
		            REC_TYPE VARCHAR(25) NULL,
		            REC_ORDER SMALLINT NULL,
		            ICAL_ID VARCHAR(100) NULL,
		            AD_NBR VARCHAR(30) NULL,
		            AD_NBR_DESC VARCHAR(60) NULL,
		            AD_NBR_COLOR VARCHAR(7) NULL,
		            RESOURCE_CODE VARCHAR(6) NULL,
		            RESOURCE_DESC VARCHAR(30) NULL,
		            PRIORITY VARCHAR(10) NULL,
					DUE_TIME VARCHAR(10),
					REMINDER NVARCHAR(255) NULL,
					RECURRENCE NVARCHAR(1024) NULL,
					RECURRENCE_PARENT INT NULL,
					CDP_CONTACT_ID INT NULL,
					CONT_CODE VARCHAR(6),
					CONT_FML VARCHAR(100),
					ALERT_ID INT,
					SPRINT_ID INT, 
					ALERT_LEVEL VARCHAR(20)
	            );

            --DEFAULTS:
            IF @ShowDuration IS NULL
            BEGIN
	            SET @ShowDuration = 1;
            END
            IF @Show_Events IS NULL
            BEGIN
	            SET @Show_Events = 0;
            END
            IF @DEPTS IS NULL
            BEGIN
            	SET @DEPTS = '';
            END
            IF @TRF_CODE IS NULL
            BEGIN
            	SET @TRF_CODE = '';
            END
            IF @ROLES IS NULL
            BEGIN
            	SET @ROLES = '';
            END
            
            DECLARE @RESTRICTED_USER AS INT, @RestrictionsOffice INT, @EMP_CDE AS VARCHAR(6),@EmpRestrictions SMALLINT

			SELECT @EmpRestrictions = ISNULL(COUNT(1),0) FROM SEC_EMP WHERE UPPER(USER_ID) = UPPER(@UserID)
            
            SELECT @RESTRICTED_USER = ISNULL(COUNT(1),0) FROM SEC_CLIENT WITH(NOLOCK) WHERE UPPER(USER_ID) = UPPER(@UserID);

			SELECT @EMP_CDE = EMP_CODE FROM SEC_USER WHERE UPPER(USER_CODE) = UPPER(@UserID)
			SELECT @RestrictionsOffice = COUNT(*) FROM EMP_OFFICE WHERE EMP_CODE = @EMP_CDE

			if @CP = 1
			BEGIN
				SET @Type = 'N'
				--SET @ShowDuration = 0
				SET @Show_Events = 0
				SET @Show_Event_Tasks = 0
			END

			DECLARE	@Grouping varchar(10), @FromApp varchar(10)
	
			SELECT @Grouping = VARIABLE_VALUE FROM APP_VARS WITH(NOLOCK)
			WHERE UPPER(USERID) = UPPER(@UserID) 
			AND [APPLICATION] = 'CALENDAR' 
			AND (VARIABLE_NAME = 'tcal_groupby')

			SELECT @FromApp = VARIABLE_VALUE FROM APP_VARS WITH(NOLOCK)
			WHERE UPPER(USERID) = UPPER(@UserID) 
			AND [APPLICATION] = 'CALENDAR' 
			AND (VARIABLE_NAME = 'FromApp');

            --NON-TASKS:
			if @Type <> 'N'
			Begin
				If @GrpLevel = 'T'
				Begin
						INSERT INTO #CALENDAR(NON_TASK_ID,EMP_CODE,EMP_FNAME,EMP_MI,EMP_LNAME,NON_TASK_TYPE,TASK_NON_TASK_DISPLAY,START_TIME,END_TIME,NON_TASK_HOURS,NON_TASK_CATEGORY,START_DAY,END_DAY,ALL_DAY,START_DATE,END_DATE,TASK_NON_TASK_DESCRIPTION,PRIORITY,REMINDER,RECURRENCE,RECURRENCE_PARENT,CL_CODE,DIV_CODE,PRD_CODE,JOB_NUMBER,JOB_COMPONENT_NBR, CDP_CONTACT_ID, CONT_CODE, CONT_FML, CL_NAME, DIV_NAME, PRD_DESCRIPTION)
						EXEC usp_wv_nontask_GetTasks @StartDate,@EndDate,@EmpCode,@Type,@UserID,@ROLES,@DEPTS,@ClientCode,@DivCode,@ProdCode,@JobNumber,@JobComp,@GrpLevel,@Grouping,@FromApp;
						UPDATE #CALENDAR SET IS_NON_TASK = 1;
				End
				Else
				Begin				
						INSERT INTO #CALENDAR(NON_TASK_ID,NON_TASK_TYPE,TASK_NON_TASK_DISPLAY,START_TIME,END_TIME,NON_TASK_HOURS,NON_TASK_CATEGORY,START_DAY,END_DAY,ALL_DAY,START_DATE,END_DATE,TASK_NON_TASK_DESCRIPTION,PRIORITY,REMINDER,RECURRENCE,RECURRENCE_PARENT,CL_CODE,DIV_CODE,PRD_CODE,JOB_NUMBER,JOB_COMPONENT_NBR, CDP_CONTACT_ID, CONT_CODE, CONT_FML, CL_NAME, DIV_NAME, PRD_DESCRIPTION)
						EXEC usp_wv_nontask_GetTasks @StartDate,@EndDate,@EmpCode,@Type,@UserID,@ROLES,@DEPTS,@ClientCode,@DivCode,@ProdCode,@JobNumber,@JobComp,@GrpLevel,'',@FromApp;
						UPDATE #CALENDAR SET IS_NON_TASK = 1;
				End
				
			End            
			--SELECT * FROM #CALENDAR
            --TASKS:
            IF @ShowTasks = 1
            BEGIN
				if @CP = 1
				BEGIN
					INSERT INTO #CALENDAR(CL_CODE, DIV_CODE, PRD_CODE, JOB_NUMBER, JOB_DESC, JOB_COMPONENT_NBR, JOB_COMP_DESC, THIS_DAY, TASK_NON_TASK_DISPLAY, TASK_TEMP_COMPLETE_DATE, TASK_STATUS, START_DAY, TASK_SEQ_NBR, CL_NAME, DIV_NAME, PRD_DESCRIPTION, TRF_CODE, END_DATE, START_DATE, EMP_CODE, EMP_FML_NAME,TRF_DESCRIPTION, DUE_TIME)
					EXEC usp_cp_calendar_task_month @CPID,@EmpCode,@ClientCode,@DivCode,@ProdCode,@JobNumber,@JobComp,@ROLES,@StartDate,@EndDate,@TaskStatus,@ExcludeTempComplete,@MilestonesOnly,@Manager,'0',@DEPTS,@TRF_CODE,@FuncRoles;
					--UPDATE #CALENDAR SET WEEK_VIEW_START_TIME = START_TIME;
					--remove completed schedule tasks:
					DELETE FROM #CALENDAR
					WHERE ID IN
					(SELECT #CALENDAR.ID FROM #CALENDAR,JOB_TRAFFIC WITH(NOLOCK) WHERE #CALENDAR.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND #CALENDAR.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						AND (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL))
						)AND (IS_NON_TASK IS NULL OR IS_NON_TASK = 0);
					UPDATE #CALENDAR SET IS_NON_TASK = 0 WHERE IS_NON_TASK IS NULL;
					UPDATE #CALENDAR SET END_DATE = START_DATE WHERE END_DATE IS NULL;
					UPDATE #CALENDAR SET START_DATE = END_DATE WHERE (START_DATE = CONVERT(DATETIME, '1900-01-01 00:00:00', 102));
				END
				ELSE
				BEGIN					
					INSERT INTO #CALENDAR(CL_CODE, DIV_CODE, PRD_CODE, JOB_NUMBER, JOB_DESC, JOB_COMPONENT_NBR, JOB_COMP_DESC, THIS_DAY, TASK_NON_TASK_DISPLAY, TASK_TEMP_COMPLETE_DATE, TASK_STATUS, START_DAY, TASK_SEQ_NBR, CL_NAME, DIV_NAME, PRD_DESCRIPTION, TRF_CODE, END_DATE, START_DATE, EMP_CODE, EMP_FML_NAME,TRF_DESCRIPTION, DUE_TIME)
					EXEC usp_wv_calendar_task_month @UserID,@EmpCode,@OfficeCode,@ClientCode,@DivCode,@ProdCode,@JobNumber,@JobComp,@ROLES,@StartDate,@EndDate,@TaskStatus,@ExcludeTempComplete,@MilestonesOnly,@Manager,'0',@DEPTS,@TRF_CODE,@FuncRoles;
					--UPDATE #CALENDAR SET WEEK_VIEW_START_TIME = START_TIME;
					--remove completed schedule tasks:
					DELETE FROM #CALENDAR
					WHERE ID IN
					(SELECT #CALENDAR.ID FROM #CALENDAR,JOB_TRAFFIC WITH(NOLOCK) WHERE #CALENDAR.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND #CALENDAR.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						AND (NOT (JOB_TRAFFIC.COMPLETED_DATE IS NULL))
						) AND (IS_NON_TASK IS NULL OR IS_NON_TASK = 0);
					UPDATE #CALENDAR SET IS_NON_TASK = 0 WHERE IS_NON_TASK IS NULL;
					UPDATE #CALENDAR SET END_DATE = START_DATE WHERE END_DATE IS NULL;
					UPDATE #CALENDAR SET START_DATE = END_DATE WHERE (START_DATE = CONVERT(DATETIME, '1900-01-01 00:00:00', 102));				


				END	            	
            END			

			DECLARE @sql 		varchar(8000)
			DECLARE @sql_from 	varchar(8000)
			DECLARE @sql_where 	varchar(8000)
			
			If @ShowAssignments = 1 AND @CP = 0
			BEGIN				
				--Assignments
					--Nonrouted
					set @sql = 'INSERT INTO #CALENDAR
					SELECT ALERT_RCPT.EMP_CODE,NULL,NULL,NULL,NULL, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, ALERT.JOB_COMPONENT_NBR,C.CL_NAME,D.DIV_NAME,P.PRD_DESCRIPTION,JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL,NULL,NULL, ALERT.TASK_SEQ_NBR,NULL,
					       ALERT.[SUBJECT], ISNULL(ALERT.HRS_ALLOWED,0), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
						   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ,
						   CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ,
						   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ,
						   CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ,
						   NULL,NULL, NULL,NULL, NULL,NULL,0, NULL, ''Assignment'', NULL,NULL,  NULL,NULL, NULL,NULL,NULL, NULL, ALERT.TIME_DUE,NULL, NULL,NULL, NULL,NULL,NULL,ALERT.ALERT_ID, NULL,ALERT.ALERT_LEVEL'

					 set @sql_from = ' FROM ALERT LEFT OUTER JOIN
						 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
						 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
						 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
						 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
						 --LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
						 LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
						 LEFT OUTER JOIN PRODUCT P ON P.PRD_CODE = ALERT.PRD_CODE AND P.DIV_CODE = ALERT.PRD_CODE AND P.CL_CODE = ALERT.CL_CODE
						 LEFT OUTER JOIN DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE
						 LEFT OUTER JOIN CLIENT C ON C.CL_CODE = D.CL_CODE'

					set @sql_where = ' WHERE ALERT.ALRT_NOTIFY_HDR_ID IS NULL AND IS_WORK_ITEM = 1 AND ALERT_LEVEL <> ''BRD'' AND (((JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12))) OR (ALERT_LEVEL IN (''OF'', ''PRD'', ''DI'', ''CL''))) AND (IWI.ALERT_ID IS NULL)
						AND ((CONVERT(Date,ALERT.[START_DATE]) BETWEEN ''' + CAST(@StartDate AS VARCHAR) + ''' AND  ''' + CAST(@EndDate AS VARCHAR) + ''')
							OR (CONVERT(Date,ALERT.DUE_DATE) BETWEEN ''' + CAST(@StartDate AS VARCHAR) + ''' AND  ''' + CAST(@EndDate AS VARCHAR) + ''')
							OR (''' + CAST(@StartDate AS VARCHAR) + ''' >= CONVERT(Date,ALERT.[START_DATE]) AND ''' + CAST(@EndDate AS VARCHAR) + ''' <= CONVERT(Date,ALERT.DUE_DATE)))'

					If @EmpCode <> '' AND @EmpCode IS NOT NULL  
					Begin
						SELECT @sql_where = @sql_where + ' AND ((CURRENT_NOTIFY = 1 AND ALERT_RCPT.EMP_CODE = ''' + @EmpCode + ''') OR ALERT_RCPT.EMP_CODE IS NULL)'
					End
					Else
					Begin
						SELECT @sql_where = @sql_where + ' AND (CURRENT_NOTIFY = 1 OR ALERT_RCPT.EMP_CODE IS NULL)'
					End				
	
					If @RESTRICTED_USER > 0
						Begin
						  SELECT @sql_from = @sql_from + ' INNER JOIN SEC_CLIENT ON ALERT.CL_CODE = SEC_CLIENT.CL_CODE AND ALERT.DIV_CODE = SEC_CLIENT.DIV_CODE AND ALERT.PRD_CODE = SEC_CLIENT.PRD_CODE '

						  SELECT @sql_where = @sql_where + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL) '
						End

					If @EmpRestrictions > 0 
						Begin
						  SELECT @sql_from = @sql_from + ' INNER JOIN [dbo].[advtf_sec_emp] (''' + @UserID + ''') AS SEC_EMP ON ALERT_RCPT.EMP_CODE = SEC_EMP.EMP_CODE '

						  --SELECT @sql_where = @sql_where + ' AND (V_JOB_TRAFFIC_DET.EMP_CODE IS NULL) '
						End

					If @RestrictionsOffice > 0 
						Begin
						  SELECT @sql_from = @sql_from  + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = ALERT.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
						End	

					If @ROLES <> ''
						Begin
						  SELECT @sql_from = @sql_from + '  LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON ALERT_RCPT.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE '
						  SELECT @sql_where = @sql_where + ' AND (EMP_TRAFFIC_ROLE.ROLE_CODE IN ('+ @ROLES +')) ' 	
						End

					IF @DEPTS <> ''
					BEGIN
						  SELECT @sql_from = @sql_from + ' INNER JOIN EMPLOYEE ON ALERT_RCPT.EMP_CODE = EMPLOYEE.EMP_CODE '
		
						  SELECT @sql_where = @sql_where + ' AND (EMPLOYEE.DP_TM_CODE IN ('+ @DEPTS +')) ' 
					END	

					IF @TRF_CODE <> ''
					BEGIN
						SELECT @sql_where = @sql_where + ' AND JOB_TRAFFIC.TRF_CODE = ''' + @TRF_CODE + ''''
					END

					If @OfficeCode  <> ''
						SELECT @sql_where = @sql_where + ' AND ALERT.OFFICE_CODE = ''' + @OfficeCode + ''''

					If @ClientCode <> '' And @ClientCode IS Not NULL
						SELECT @sql_where = @sql_where + ' AND ALERT.CL_CODE = ''' + @ClientCode  + ''''

					If @DivCode <> '' 
						SELECT @sql_where = @sql_where + ' AND ALERT.DIV_CODE = ''' + @DivCode + '''' 

					If @ProdCode <> '' 
						SELECT @sql_where = @sql_where + ' AND ALERT.PRD_CODE = ''' + @ProdCode + '''' 

					If @JobNumber <> '' 
						SELECT @sql_where = @sql_where + ' AND ALERT.JOB_NUMBER = ' + @JobNumber 

					If @JobComp <> '' 
						SELECT @sql_where = @sql_where + ' AND ALERT.JOB_COMPONENT_NBR = ' + @JobComp 

					--SET @sql = @sql + @sql_from + @sql_where
					PRINT(@sql + @sql_from + @sql_where)
					EXEC(@sql + @sql_from + @sql_where)


					--Routed
					set @sql = 'INSERT INTO #CALENDAR
					SELECT ALERT_RCPT.EMP_CODE,NULL,NULL,NULL,NULL, ALERT.CL_CODE, ALERT.DIV_CODE, ALERT.PRD_CODE, ALERT.JOB_NUMBER, ALERT.JOB_COMPONENT_NBR,C.CL_NAME,D.DIV_NAME,P.PRD_DESCRIPTION,JOB_LOG.JOB_DESC,JOB_COMPONENT.JOB_COMP_DESC,NULL,NULL,NULL, ALERT.TASK_SEQ_NBR,NULL,
					       ALERT.[SUBJECT], ISNULL(ALERT.HRS_ALLOWED,0), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
						   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ,
						   CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ,
						   CASE WHEN ALERT.[START_DATE] is NULL THEN ALERT.DUE_DATE ELSE ALERT.[START_DATE] END ,
						   CASE WHEN ALERT.DUE_DATE is NULL THEN ALERT.[START_DATE] ELSE ALERT.DUE_DATE END ,
						   NULL,NULL, NULL,NULL, NULL,NULL,0, NULL, ''Assignment'', NULL,NULL,  NULL,NULL, NULL,NULL,NULL, NULL, ALERT.TIME_DUE,NULL, NULL,NULL, NULL,NULL,NULL,ALERT.ALERT_ID, NULL,ALERT.ALERT_LEVEL'

					 set @sql_from = ' FROM ALERT LEFT OUTER JOIN
						 ALERT_RCPT ON ALERT.ALERT_ID = ALERT_RCPT.ALERT_ID LEFT OUTER JOIN
						 JOB_COMPONENT WITH(NOLOCK) ON ALERT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						 ALERT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR LEFT OUTER JOIN
						 JOB_TRAFFIC WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_TRAFFIC.JOB_NUMBER AND 
						 JOB_COMPONENT.JOB_COMPONENT_NBR = JOB_TRAFFIC.JOB_COMPONENT_NBR
						 LEFT OUTER JOIN JOB_LOG ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER 
						 LEFT OUTER JOIN TRAFFIC ON JOB_TRAFFIC.TRF_CODE = TRAFFIC.TRF_CODE
						 --LEFT OUTER JOIN SPRINT_EMPLOYEE ON ALERT_RCPT.ALERT_ID = SPRINT_EMPLOYEE.ALERT_ID AND ALERT_RCPT.EMP_CODE = SPRINT_EMPLOYEE.EMP_CODE AND SPRINT_EMPLOYEE.[HOURS] > 0
						 LEFT OUTER JOIN V_INACTIVE_WORK_ITEMS IWI ON ALERT.ALERT_ID = IWI.ALERT_ID   
						 LEFT OUTER JOIN PRODUCT P ON P.PRD_CODE = ALERT.PRD_CODE AND P.DIV_CODE = ALERT.PRD_CODE AND P.CL_CODE = ALERT.CL_CODE
						 LEFT OUTER JOIN DIVISION D ON D.DIV_CODE = P.DIV_CODE AND D.CL_CODE = P.CL_CODE
						 LEFT OUTER JOIN CLIENT C ON C.CL_CODE = D.CL_CODE'

					set @sql_where = ' WHERE ALERT.ALRT_NOTIFY_HDR_ID IS NOT NULL AND IS_WORK_ITEM = 1 AND ALERT_LEVEL <> ''BRD'' AND (((JOB_COMPONENT.JOB_PROCESS_CONTRL NOT IN (6, 12))) OR (ALERT_LEVEL IN (''OF'', ''PRD'', ''DI'', ''CL''))) AND (IWI.ALERT_ID IS NULL) 
							AND ((CONVERT(Date,ALERT.[START_DATE]) BETWEEN ''' + CAST(@StartDate AS VARCHAR) + ''' AND  ''' + CAST(@EndDate AS VARCHAR) + ''')
							OR (CONVERT(Date,ALERT.DUE_DATE) BETWEEN ''' + CAST(@StartDate AS VARCHAR) + ''' AND  ''' + CAST(@EndDate AS VARCHAR) + ''')
							OR (''' + CAST(@StartDate AS VARCHAR) + ''' >= CONVERT(Date,ALERT.[START_DATE]) AND ''' + CAST(@EndDate AS VARCHAR) + ''' <= CONVERT(Date,ALERT.DUE_DATE)))'
					
					If @EmpCode <> '' AND @EmpCode IS NOT NULL  
					Begin
						SELECT @sql_where = @sql_where + ' AND (((CURRENT_NOTIFY = 1 AND ALERT_RCPT.EMP_CODE = ''' + @EmpCode + ''' AND ALERT_RCPT.ALERT_STATE_ID IS NOT NULL) OR ALERT_RCPT.EMP_CODE IS NULL)) '
					End
					Else
					Begin
						SELECT @sql_where = @sql_where + ' AND ((CURRENT_NOTIFY = 1 AND ALERT_RCPT.ALERT_STATE_ID IS NOT NULL) OR ALERT_RCPT.EMP_CODE IS NULL)'
					End									 
	
					If @RESTRICTED_USER > 0
						Begin
						  SELECT @sql_from = @sql_from + ' INNER JOIN SEC_CLIENT ON ALERT.CL_CODE = SEC_CLIENT.CL_CODE AND ALERT.DIV_CODE = SEC_CLIENT.DIV_CODE AND ALERT.PRD_CODE = SEC_CLIENT.PRD_CODE '

						  SELECT @sql_where = @sql_where + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL) '
						End

					If @EmpRestrictions > 0 
						Begin
						  SELECT @sql_from = @sql_from + ' INNER JOIN [dbo].[advtf_sec_emp] (''' + @UserID + ''') AS SEC_EMP ON ALERT_RCPT.EMP_CODE = SEC_EMP.EMP_CODE '

						  --SELECT @sql_where = @sql_where + ' AND (V_JOB_TRAFFIC_DET.EMP_CODE IS NULL) '
						End

					If @RestrictionsOffice > 0 
						Begin
						  SELECT @sql_from = @sql_from  + ' INNER JOIN EMP_OFFICE ON EMP_OFFICE.OFFICE_CODE = ALERT.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
						End	

					If @ROLES <> ''
						Begin
						  SELECT @sql_from = @sql_from + '  LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON ALERT_RCPT.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE '
						  SELECT @sql_where = @sql_where + ' AND (EMP_TRAFFIC_ROLE.ROLE_CODE IN ('+ @ROLES +')) ' 	
						End

					IF @DEPTS <> ''
					BEGIN
						  SELECT @sql_from = @sql_from + ' INNER JOIN EMPLOYEE ON ALERT_RCPT.EMP_CODE = EMPLOYEE.EMP_CODE '
		
						  SELECT @sql_where = @sql_where + ' AND (EMPLOYEE.DP_TM_CODE IN ('+ @DEPTS +')) ' 
					END	

					IF @TRF_CODE <> ''
					BEGIN
						SELECT @sql_where = @sql_where + ' AND JOB_TRAFFIC.TRF_CODE = ''' + @TRF_CODE + ''''
					END

					--If @EmpCode <> '' 
					--	SELECT @sql_where = @sql_where + ' AND ALERT_RCPT.EMP_CODE = ''' + @EmpCode + ''''

					If @OfficeCode  <> ''
						SELECT @sql_where = @sql_where + ' AND ALERT.OFFICE_CODE = ''' + @OfficeCode + ''''

					If @ClientCode <> '' And @ClientCode IS Not NULL
						SELECT @sql_where = @sql_where + ' AND ALERT.CL_CODE = ''' + @ClientCode  + ''''

					If @DivCode <> '' 
						SELECT @sql_where = @sql_where + ' AND ALERT.DIV_CODE = ''' + @DivCode + '''' 

					If @ProdCode <> '' 
						SELECT @sql_where = @sql_where + ' AND ALERT.PRD_CODE = ''' + @ProdCode + '''' 

					If @JobNumber <> '' 
						SELECT @sql_where = @sql_where + ' AND ALERT.JOB_NUMBER = ' + @JobNumber 

					If @JobComp <> '' 
						SELECT @sql_where = @sql_where + ' AND ALERT.JOB_COMPONENT_NBR = ' + @JobComp 

					--SET @sql = @sql + @sql_from + @sql_where
					PRINT(@sql + @sql_from + @sql_where)
					EXEC(@sql + @sql_from + @sql_where)

			END

			--SELECT * FROM #CALENDAR

			--DELETE FROM #CALENDAR
			--WHERE START_DATE IS NULL AND END_DATE IS NULL AND REC_TYPE = 'Assignment'

			--SELECT * FROM #CALENDAR WHERE REC_TYPE = 'Assignment'
            --EVENTS:
            IF @Show_Events = 1
            BEGIN
	            --"NON_TASK_ID" IS THE EVENT_ID		
				set @sql = 'INSERT INTO #CALENDAR(CL_CODE,DIV_CODE,PRD_CODE,JOB_NUMBER,JOB_COMPONENT_NBR,CL_NAME,
							DIV_NAME,PRD_DESCRIPTION,JOB_DESC,JOB_COMP_DESC,TASK_NON_TASK_DISPLAY,
							FNC_CODE,START_TIME,END_TIME,WEEK_VIEW_END_TIME,AD_NBR,AD_NBR_COLOR,NON_TASK_ID,
							NON_TASK_TYPE,REC_TYPE,REC_ORDER,[START_DATE],END_DATE,IS_NON_TASK,TASK_HOURS_ALLOWED,TASK_SEQ_NBR,TASK_STATUS,NON_TASK_HOURS,RESOURCE_CODE,AD_NBR_DESC,NON_TASK_CATEGORY)
						SELECT     JOB_LOG.CL_CODE, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE, EVENT.JOB_NUMBER, EVENT.JOB_COMPONENT_NBR, CLIENT.CL_NAME, 
											  DIVISION.DIV_NAME, PRODUCT.PRD_DESCRIPTION, JOB_LOG.JOB_DESC, JOB_COMPONENT.JOB_COMP_DESC, EVENT.EVENT_LABEL, 
											  EVENT.FNC_CODE, EVENT.START_TIME, EVENT.END_TIME, EVENT.END_TIME, AD_NUMBER.AD_NBR, ISNULL(AD_NUMBER.COLOR,''#FFFFFF'') AS COLOR,EVENT.EVENT_ID,
											  ''E'',''Event'',3, EVENT.START_TIME, EVENT.END_TIME,2, EVENT.QTY_HRS, -1,''N'',EVENT.QTY_HRS,EVENT.RESOURCE_CODE,AD_NUMBER.AD_NBR_DESC,''event''
						FROM         AD_NUMBER WITH(NOLOCK) RIGHT OUTER JOIN
											  PRODUCT WITH(NOLOCK) INNER JOIN
											  CLIENT WITH(NOLOCK) INNER JOIN
											  EVENT WITH(NOLOCK) INNER JOIN
											  JOB_COMPONENT WITH(NOLOCK) ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
											  EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
											  JOB_LOG WITH(NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER ON CLIENT.CL_CODE = JOB_LOG.CL_CODE INNER JOIN
											  DIVISION WITH(NOLOCK) ON JOB_LOG.CL_CODE = DIVISION.CL_CODE AND JOB_LOG.DIV_CODE = DIVISION.DIV_CODE ON 
											  PRODUCT.CL_CODE = JOB_LOG.CL_CODE AND PRODUCT.DIV_CODE = JOB_LOG.DIV_CODE AND PRODUCT.PRD_CODE = JOB_LOG.PRD_CODE ON 
											  AD_NUMBER.AD_NBR = EVENT.AD_NUMBER'
				IF @RestrictionsOffice > 0
				BEGIN
					SET @sql = @sql  + ' INNER JOIN EMP_OFFICE ON JOB_LOG.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
				END	
				IF @RESTRICTED_USER > 0
					BEGIN
						SELECT @sql = @sql + ' INNER JOIN SEC_CLIENT ON SEC_CLIENT.CL_CODE = JOB_LOG.CL_CODE AND SEC_CLIENT.DIV_CODE = JOB_LOG.DIV_CODE AND SEC_CLIENT.PRD_CODE = JOB_LOG.PRD_CODE'
					END	
					SELECT @sql = @sql + ' WHERE EVENT.EVENT_DATE BETWEEN ''' + CAST(@StartDate AS VARCHAR) + ''' AND  ''' + CAST(@EndDate AS VARCHAR) + ''' AND (NOT (JOB_COMPONENT.JOB_PROCESS_CONTRL IN (6, 12)))'
				IF @RESTRICTED_USER > 0
					BEGIN
						SELECT @sql = @sql + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
					END	
				IF @JobNumber <> '' and @JobComp <> ''
					BEGIN
						SELECT @sql = @sql + ' AND JOB_COMPONENT.JOB_NUMBER = ''' + @JobNumber + ''' AND JOB_COMPONENT.JOB_COMPONENT_NBR = ''' + @JobComp + ''''
					END	
				PRINT(@sql)
				EXEC(@sql)

	            UPDATE #CALENDAR
	            SET START_DATE = CONVERT(
		                           DATETIME,
		                           CONVERT(CHAR(10), DATEPART(yyyy, START_DATE), 101) 
		                           +
		                           '-' +
		                           CONVERT(CHAR(10), DATEPART(mm, START_DATE), 101) +
		                           '-' +
		                           CONVERT(CHAR(10), DATEPART(dd, START_DATE), 101) +
		                           ' 00:00:00' 
		                           ),
		             END_DATE = CONVERT(
		                           DATETIME,
		                           CONVERT(CHAR(10), DATEPART(yyyy, END_DATE), 101) 
		                           +
		                           '-' +
		                           CONVERT(CHAR(10), DATEPART(mm, END_DATE), 101) +
		                           '-' +
		                           CONVERT(CHAR(10), DATEPART(dd, END_DATE), 101) +
		                           ' 00:00:00' 
		                           )              
	            WHERE NON_TASK_TYPE = 'E';		
	            UPDATE #CALENDAR SET RESOURCE_DESC = RESOURCE.RESOURCE_DESC 
	            FROM #CALENDAR INNER JOIN RESOURCE WITH(NOLOCK) ON #CALENDAR.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS  = RESOURCE.RESOURCE_CODE COLLATE SQL_Latin1_General_CP1_CS_AS 
	            WHERE #CALENDAR.NON_TASK_TYPE = 'E' AND (NOT(#CALENDAR.RESOURCE_CODE IS NULL));			  
            END

            --EVENT TASKS:
            DECLARE @EVENT_TASKS_EMP AS VARCHAR(6);
            SET @EVENT_TASKS_EMP = NULL
            IF @Show_Event_Tasks = 1 
            BEGIN
				IF @EmpCode = ''
				BEGIN
				   SET @EVENT_TASKS_EMP = NULL 
				END
				IF  (NOT @EmpCode IS NULL) AND @EmpCode <> ''
				BEGIN
				   SET @EVENT_TASKS_EMP = @EmpCode
				END

	            --"NON_TASK_ID" IS THE EVENT_TASK_ID
				set @sql = ' INSERT INTO #CALENDAR(CL_CODE,DIV_CODE,PRD_CODE,JOB_NUMBER,JOB_COMPONENT_NBR,CL_NAME,
						    DIV_NAME,PRD_DESCRIPTION,JOB_DESC,JOB_COMP_DESC,TASK_NON_TASK_DISPLAY,
						    TRF_CODE,START_TIME,END_TIME,WEEK_VIEW_END_TIME,NON_TASK_ID,
						    NON_TASK_TYPE,REC_TYPE,REC_ORDER,[START_DATE],END_DATE,IS_NON_TASK,TASK_HOURS_ALLOWED,TASK_STATUS,NON_TASK_HOURS,EMP_CODE,TASK_SEQ_NBR,NON_TASK_CATEGORY,
						    AD_NBR,AD_NBR_DESC,AD_NBR_COLOR,RESOURCE_CODE,RESOURCE_DESC,EMP_FNAME,EMP_MI,EMP_LNAME,EMP_FML_NAME)
					    SELECT     
						    JOB_LOG.CL_CODE, JOB_LOG.DIV_CODE, JOB_LOG.PRD_CODE, JOB_LOG.JOB_NUMBER, JOB_COMPONENT.JOB_COMPONENT_NBR, 
						    CLIENT.CL_NAME, DIVISION.DIV_NAME, PRODUCT.PRD_DESCRIPTION, JOB_LOG.JOB_DESC, JOB_COMPONENT.JOB_COMP_DESC, 
						    EVENT.EVENT_LABEL, EVENT_TASK.TASK_CODE, EVENT_TASK.START_TIME, EVENT_TASK.END_TIME, EVENT_TASK.END_TIME, 
						    EVENT_TASK.EVENT_TASK_ID, ''ET'', ''Event Task'', 4, EVENT_TASK.START_DATE, EVENT_TASK.END_DATE, 
						    3, EVENT_TASK.HOURS_ALLOWED, ''N'', EVENT_TASK.HOURS_ALLOWED, EMPLOYEE.EMP_CODE, EVENT.EVENT_ID, 
						    ''event_task'', AD_NUMBER.AD_NBR, AD_NUMBER.AD_NBR_DESC, AD_NUMBER.COLOR, RESOURCE.RESOURCE_CODE, RESOURCE.RESOURCE_DESC,
						    EMPLOYEE.EMP_FNAME,EMPLOYEE.EMP_MI,EMPLOYEE.EMP_LNAME,ISNULL(EMPLOYEE.EMP_FNAME+'' '','''')+ISNULL(EMPLOYEE.EMP_MI+''. '','''')+ISNULL(EMPLOYEE.EMP_LNAME,'''')
					    FROM         
						    EVENT_TASK WITH (NOLOCK) INNER JOIN
						    EVENT WITH (NOLOCK) ON EVENT_TASK.EVENT_ID = EVENT.EVENT_ID INNER JOIN
						    JOB_COMPONENT WITH (NOLOCK) ON EVENT.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND 
						    EVENT.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR INNER JOIN
						    JOB_LOG WITH (NOLOCK) ON JOB_COMPONENT.JOB_NUMBER = JOB_LOG.JOB_NUMBER INNER JOIN
						    CLIENT WITH (NOLOCK) ON JOB_LOG.CL_CODE = CLIENT.CL_CODE INNER JOIN
						    PRODUCT WITH (NOLOCK) ON JOB_LOG.CL_CODE = PRODUCT.CL_CODE AND JOB_LOG.DIV_CODE = PRODUCT.DIV_CODE AND 
						    JOB_LOG.PRD_CODE = PRODUCT.PRD_CODE INNER JOIN
						    DIVISION WITH (NOLOCK) ON JOB_LOG.CL_CODE = DIVISION.CL_CODE AND JOB_LOG.DIV_CODE = DIVISION.DIV_CODE LEFT OUTER JOIN
						    RESOURCE WITH (NOLOCK) ON EVENT.RESOURCE_CODE = RESOURCE.RESOURCE_CODE LEFT OUTER JOIN
						    AD_NUMBER WITH (NOLOCK) ON EVENT.AD_NUMBER = AD_NUMBER.AD_NBR LEFT OUTER JOIN
						    EMPLOYEE WITH (NOLOCK) ON EVENT_TASK.EMP_CODE = EMPLOYEE.EMP_CODE'	
				IF @RestrictionsOffice > 0
					BEGIN
						SET @sql = @sql  + ' INNER JOIN EMP_OFFICE ON JOB_LOG.OFFICE_CODE = EMP_OFFICE.OFFICE_CODE AND EMP_OFFICE.EMP_CODE = ''' + @EMP_CDE + ''''
					END
				IF @RESTRICTED_USER > 0
					BEGIN
						SELECT @sql = @sql + ' INNER JOIN SEC_CLIENT ON SEC_CLIENT.CL_CODE = JOB_LOG.CL_CODE AND SEC_CLIENT.DIV_CODE = JOB_LOG.DIV_CODE AND SEC_CLIENT.PRD_CODE = JOB_LOG.PRD_CODE'
					END	
				if @EmpRestrictions > 0
					BEGIN
						SELECT @sql = @sql + ' INNER JOIN [dbo].[advtf_sec_emp] (''' + @UserID + ''') AS SEC_EMP ON EMPLOYEE.EMP_CODE = SEC_EMP.EMP_CODE'
					END	
				SELECT @sql = @sql + ' WHERE (EVENT_TASK.START_DATE >= ''' + CAST(@StartDate AS VARCHAR) + ''') AND (EVENT_TASK.END_DATE <= DATEADD(day, 1, ''' + CAST(@EndDate AS VARCHAR) + '''))'
				IF @RESTRICTED_USER > 0
					BEGIN
						SELECT @sql = @sql + ' AND (UPPER(SEC_CLIENT.USER_ID) = UPPER(''' + @UserID + ''')) AND (SEC_CLIENT.TIME_ENTRY = 0 OR SEC_CLIENT.TIME_ENTRY IS NULL)'
					END		
				IF NOT @EVENT_TASKS_EMP IS NULL
					BEGIN
						SELECT @sql = @sql + ' AND EVENT_TASK.EMP_CODE = ''' + @EVENT_TASKS_EMP + ''''
					END
				IF @JobNumber <> '' and @JobComp <> ''
					BEGIN
						SELECT @sql = @sql + ' AND JOB_COMPONENT.JOB_NUMBER = ''' + @JobNumber + ''' AND JOB_COMPONENT.JOB_COMPONENT_NBR = ''' + @JobComp + ''''
					END	

				EXEC(@sql)
	            
            END
			--SELECT * FROM #CALENDAR
            --CLEANUP NON-TASKS:
            UPDATE #CALENDAR 
            SET THIS_DAY = START_DAY,TASK_NON_TASK_DESCRIPTION = NON_TASK_CATEGORY,
	            EMP_FML_NAME = dbo.udf_get_empl_name(EMP_CODE,'FML'),
	            TASK_STATUS = 'N', TASK_SEQ_NBR = -1
            WHERE IS_NON_TASK = 1;

			UPDATE #CALENDAR 
            SET JOB_NUMBER = -1, JOB_COMPONENT_NBR = -1
            WHERE IS_NON_TASK = 1 AND JOB_NUMBER IS NULL;

			UPDATE #CALENDAR 
            SET JOB_NUMBER = -1, JOB_COMPONENT_NBR = -1
            WHERE IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' AND JOB_NUMBER IS NULL;

            UPDATE #CALENDAR SET REC_TYPE = 'Appointment', REC_ORDER = 1 WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE = 'A';
            UPDATE #CALENDAR SET REC_TYPE = 'Holiday', REC_ORDER = 2 WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE = 'H';
            UPDATE #CALENDAR SET REC_TYPE = 'Call', REC_ORDER = 1 WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE = 'C';
            UPDATE #CALENDAR SET REC_TYPE = 'Meeting', REC_ORDER = 2 WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE = 'M';
            UPDATE #CALENDAR SET REC_TYPE = 'To Do', REC_ORDER = 1 WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE = 'TD';
            UPDATE #CALENDAR SET REC_TYPE = 'Next Action', REC_ORDER = 2 WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE = 'NA';
            UPDATE #CALENDAR SET REC_TYPE = 'Email', REC_ORDER = 1 WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE = 'EL';

            --CLEANUP TASKS:
            IF @ShowTasks = 1 OR @ShowAssignments = 1
            BEGIN
	            UPDATE #CALENDAR
	            SET #CALENDAR.TASK_DESCRIPTION = V_JOB_TRAFFIC_DET.TASK_DESCRIPTION,
	            #CALENDAR.FNC_CODE = V_JOB_TRAFFIC_DET.FNC_CODE
	            FROM #CALENDAR,V_JOB_TRAFFIC_DET WITH(NOLOCK)
	            WHERE #CALENDAR.IS_NON_TASK = 0 AND #CALENDAR.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER
	            AND #CALENDAR.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR
	            AND #CALENDAR.TASK_SEQ_NBR = V_JOB_TRAFFIC_DET.SEQ_NBR;

				UPDATE #CALENDAR
	            SET #CALENDAR.TASK_HOURS_ALLOWED = (SELECT SUM(V_JOB_TRAFFIC_DET.JOB_HRS)
	            FROM V_JOB_TRAFFIC_DET WITH(NOLOCK) 
	            WHERE #CALENDAR.JOB_NUMBER = V_JOB_TRAFFIC_DET.JOB_NUMBER
	            AND #CALENDAR.JOB_COMPONENT_NBR = V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR
	            AND #CALENDAR.TASK_SEQ_NBR = V_JOB_TRAFFIC_DET.SEQ_NBR
				GROUP BY V_JOB_TRAFFIC_DET.JOB_NUMBER,V_JOB_TRAFFIC_DET.JOB_COMPONENT_NBR, V_JOB_TRAFFIC_DET.SEQ_NBR)
				WHERE #CALENDAR.IS_NON_TASK = 0 AND (REC_TYPE IS NULL OR REC_TYPE <> 'Assignment');

				--SELECT * FROM #CALENDAR

	            UPDATE #CALENDAR 
	            SET TASK_NON_TASK_DESCRIPTION = TRF_CODE, START_TIME = START_DATE, END_TIME = END_DATE, NON_TASK_ID = -1, ALL_DAY = 1, REC_TYPE = 'Task', REC_ORDER = 0, NON_TASK_TYPE = 'T',NON_TASK_CATEGORY = 'task'
	            WHERE IS_NON_TASK = 0 AND (REC_TYPE IS NULL OR REC_TYPE <> 'Assignment' );

	            UPDATE #CALENDAR
	            SET TASK_STATUS = 'N'
	            WHERE TASK_STATUS <> 'A' AND IS_NON_TASK = 0;

	            UPDATE #CALENDAR
	            SET TASK_STATUS = 'P'
	            WHERE (TASK_TEMP_COMPLETE_DATE <> CONVERT(DATETIME, '1900-01-01 00:00:00', 102)) AND IS_NON_TASK = 0;

				UPDATE #CALENDAR 
				SET EMP_FML_NAME = EMP_CODE + ' - ' + dbo.udf_get_empl_name(EMP_CODE,'FML'), NON_TASK_TYPE = 'AS',NON_TASK_CATEGORY = 'Assignment', NON_TASK_ID = -1, ALL_DAY = 1
				WHERE IS_NON_TASK = 0 AND REC_TYPE = 'Assignment';

				UPDATE #CALENDAR 
				SET EMP_FML_NAME = EMP_CODE + ' - ' + dbo.udf_get_empl_name(EMP_CODE,'FML'), NON_TASK_TYPE = 'ASO',NON_TASK_CATEGORY = 'Assignment', NON_TASK_ID = -1, ALL_DAY = 1
				WHERE IS_NON_TASK = 0 AND ALERT_LEVEL = 'OF';

            END

            --CLEANUP BOTH:
            UPDATE #CALENDAR SET EMP_FNAME = NULL, EMP_MI = NULL, EMP_LNAME = NULL, EMP_FML_NAME = NULL WHERE (EMP_CODE IS NULL);
            UPDATE #CALENDAR SET TRF_DESCRIPTION = TRAFFIC_FNC.TRF_DESC 
            FROM #CALENDAR, TRAFFIC_FNC
            WHERE #CALENDAR.TRF_CODE COLLATE SQL_Latin1_General_CP1_CS_AS= TRAFFIC_FNC.TRF_CODE COLLATE SQL_Latin1_General_CP1_CS_AS
            AND (NOT #CALENDAR.TRF_CODE IS NULL)
            AND (#CALENDAR.TRF_DESCRIPTION IS NULL);
            UPDATE #CALENDAR SET NUM_DAYS = DATEDIFF(day, START_DATE,END_DATE)+1;
            IF @ShowDuration = 0
            BEGIN
	            UPDATE #CALENDAR SET START_DATE = END_DATE, START_TIME = END_TIME WHERE IS_NON_TASK = 0;
            END
            UPDATE #CALENDAR SET END_DATE = DATEADD(day,1,END_DATE) WHERE NON_TASK_TYPE <> 'ET';
            UPDATE #CALENDAR SET END_DATE = DATEADD(second,-45,END_DATE) WHERE NON_TASK_TYPE <> 'ET';
            UPDATE #CALENDAR SET HAS_TIME = 1 WHERE (DATEPART(hour,START_TIME) <> 0) OR (DATEPART(minute,START_TIME) <> 0) OR (DATEPART(hour,END_TIME) <> 0) OR (DATEPART(minute,END_TIME) <> 0);
            UPDATE #CALENDAR SET HAS_TIME = 0 WHERE (HAS_TIME IS NULL);

			--SELECT * FROM #CALENDAR WHERE REC_TYPE = 'Assignment'

            ----for week view:
            --get bit field
            UPDATE #CALENDAR SET WEEK_VIEW_ALL_DAY = 0 WHERE ALL_DAY = 0;
            UPDATE #CALENDAR SET WEEK_VIEW_ALL_DAY = 1 WHERE ALL_DAY = 1;
            --fix all day event times
            UPDATE #CALENDAR SET WEEK_VIEW_END_TIME = END_TIME;
            UPDATE #CALENDAR SET WEEK_VIEW_END_TIME = DATEADD(day,1,END_TIME) WHERE (HAS_TIME IS NULL);
            --fix for crazy appointment all day event data
            UPDATE #CALENDAR SET WEEK_VIEW_END_TIME = DATEADD(day,1,START_TIME) WHERE ALL_DAY = 1 AND NUM_DAYS = 1;
            UPDATE #CALENDAR SET WEEK_VIEW_END_TIME = DATEADD(minute,1,WEEK_VIEW_END_TIME) WHERE (DATEPART(hour,WEEK_VIEW_END_TIME) = 23) AND (DATEPART(minute,WEEK_VIEW_END_TIME) = 59)
            UPDATE #CALENDAR SET WEEK_VIEW_END_TIME = DATEADD(day,1,WEEK_VIEW_END_TIME) WHERE
            ALL_DAY = 1 AND IS_NON_TASK = 0 AND END_TIME = WEEK_VIEW_END_TIME;
            --fix for holiday on week/day views:
            UPDATE #CALENDAR SET WEEK_VIEW_END_TIME = DATEADD(day,1,WEEK_VIEW_END_TIME) WHERE
            ALL_DAY = 1 AND IS_NON_TASK = 1 AND NON_TASK_TYPE = 'H' AND NUM_DAYS > 1;
            --fix for event when displaying end date only:
            --UPDATE #CALENDAR SET WEEK_VIEW_END_TIME = DATEADD(day,1,WEEK_VIEW_END_TIME) WHERE NON_TASK_TYPE = 'E';

 			-- MAKE SURE COMP INFO PRESENT
			UPDATE #CALENDAR 
			SET JOB_COMP_DESC = JOB_COMPONENT.JOB_COMP_DESC
			FROM #CALENDAR INNER JOIN JOB_COMPONENT ON #CALENDAR.JOB_NUMBER = JOB_COMPONENT.JOB_NUMBER AND #CALENDAR.JOB_COMPONENT_NBR = JOB_COMPONENT.JOB_COMPONENT_NBR
			WHERE #CALENDAR.JOB_NUMBER > 0 AND #CALENDAR.JOB_COMP_DESC IS NULL;

           --column to make task sort at a lower priority because it does not have hours:
            --let the column do a bunch of precedent things....:
            UPDATE #CALENDAR SET PRIORITY = '01' WHERE ALL_DAY = 1 AND NON_TASK_TYPE = 'H';
            UPDATE #CALENDAR SET PRIORITY = '02' WHERE ALL_DAY = 0 AND NON_TASK_TYPE = 'H';
            UPDATE #CALENDAR SET PRIORITY = '03' WHERE NON_TASK_TYPE = 'A';
            UPDATE #CALENDAR SET PRIORITY = '04' WHERE NON_TASK_TYPE = 'E';
            UPDATE #CALENDAR SET PRIORITY = '05' WHERE NON_TASK_TYPE = 'ET';
            UPDATE #CALENDAR SET PRIORITY = '06' WHERE NON_TASK_TYPE = 'T';

            --set key for iCalendar:
            UPDATE #CALENDAR SET ICAL_ID = 'T|'+CAST(JOB_NUMBER AS VARCHAR(10))+'|'+CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+	CAST(TASK_SEQ_NBR AS VARCHAR(10))+'|'+ISNULL(EMP_CODE,'') WHERE IS_NON_TASK = 0;
            UPDATE #CALENDAR SET ICAL_ID = 'H|'+CAST(NON_TASK_ID AS VARCHAR(10)) WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE='H';
            UPDATE #CALENDAR SET ICAL_ID = CASE WHEN NON_TASK_CATEGORY <> '' THEN 'A|'+CAST(NON_TASK_ID AS VARCHAR(10))+'|'+CAST((SELECT CASE WHEN VAC_SICK_FLAG <> '' THEN ISNULL(VAC_SICK_FLAG,0) ELSE 0 END AS VAC_SICK_FLAG FROM TIME_CATEGORY WHERE CATEGORY COLLATE SQL_Latin1_General_CP1_CS_AS = NON_TASK_CATEGORY) AS VARCHAR(10))+'|'+REMINDER ELSE 'A|'+CAST(NON_TASK_ID AS VARCHAR(10))+'|0'+'|'+REMINDER END  WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE='A';
            UPDATE #CALENDAR SET ICAL_ID = 'E|'+CAST(NON_TASK_ID AS VARCHAR(10)) WHERE IS_NON_TASK = 2 AND NON_TASK_TYPE='E';
            UPDATE #CALENDAR SET ICAL_ID = 'ET|'+CAST(NON_TASK_ID AS VARCHAR(10)) WHERE IS_NON_TASK = 3 AND NON_TASK_TYPE='ET';
            UPDATE #CALENDAR SET ICAL_ID = 'C|'+CAST(NON_TASK_ID AS VARCHAR(10))+'|0|'+CAST(JOB_NUMBER AS VARCHAR(10))+'|'+CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+REMINDER WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE='C';
            UPDATE #CALENDAR SET ICAL_ID = 'M|'+CAST(NON_TASK_ID AS VARCHAR(10))+'|0|'+CAST(JOB_NUMBER AS VARCHAR(10))+'|'+CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+REMINDER WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE='M';
            UPDATE #CALENDAR SET ICAL_ID = 'TD|'+CAST(NON_TASK_ID AS VARCHAR(10))+'|0|'+CAST(JOB_NUMBER AS VARCHAR(10))+'|'+CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+REMINDER WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE='TD';
            UPDATE #CALENDAR SET ICAL_ID = 'NA|'+CAST(NON_TASK_ID AS VARCHAR(10))+'|0|'+CAST(JOB_NUMBER AS VARCHAR(10))+'|'+CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+REMINDER WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE='NA';
            UPDATE #CALENDAR SET ICAL_ID = 'EL|'+CAST(NON_TASK_ID AS VARCHAR(10))+'|0|'+CAST(JOB_NUMBER AS VARCHAR(10))+'|'+CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+REMINDER WHERE IS_NON_TASK = 1 AND NON_TASK_TYPE='EL';
			UPDATE #CALENDAR SET ICAL_ID = 'T|'+CAST(JOB_NUMBER AS VARCHAR(10))+'|'+CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+	CAST(TASK_SEQ_NBR AS VARCHAR(10))+'|'+ISNULL(EMP_CODE,'') WHERE IS_NON_TASK = 0 AND REC_TYPE = 'Assignment';
			UPDATE #CALENDAR SET ICAL_ID = 'T|'+ISNULL(EMP_CODE,'') WHERE IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' AND JOB_NUMBER IS NULL;
			UPDATE #CALENDAR SET ALL_DAY = 0 WHERE ALL_DAY IS NULL;			


			UPDATE #CALENDAR SET ALERT_ID = A.ALERT_ID
			FROM
				#CALENDAR C
				INNER JOIN ALERT A ON A.JOB_NUMBER = C.JOB_NUMBER AND A.JOB_COMPONENT_NBR = C.JOB_COMPONENT_NBR AND C.TASK_SEQ_NBR = A.TASK_SEQ_NBR
			WHERE
				A.ALERT_LEVEL = 'BRD';
			UPDATE #CALENDAR SET SPRINT_ID = SD.SPRINT_HDR_ID
			FROM
				#CALENDAR C
				INNER JOIN SPRINT_DTL SD ON C.ALERT_ID = SD.ALERT_ID;
			UPDATE #CALENDAR SET ALERT_ID = 0 WHERE ALERT_ID IS NULL;
			UPDATE #CALENDAR SET SPRINT_ID = 0 WHERE SPRINT_ID IS NULL;

			UPDATE #CALENDAR SET TASK_NON_TASK_DISPLAY = TASK_DESCRIPTION
			WHERE NON_TASK_TYPE = 'ASO'

			if @Type = 'H'
			BEGIN
				DELETE FROM #CALENDAR
				WHERE NON_TASK_TYPE = 'ASO'
			END
			

			--SELECT * FROM #CALENDAR

--			--REMOVE DUPLICATE ROWS WHEN DISPLAYING TASKS THAT HAVE MULTIPLE EMPLOYEES
			DELETE T1
			FROM #CALENDAR T1, #CALENDAR T2
			WHERE  
			T1.JOB_NUMBER = T2.JOB_NUMBER
			AND T1.JOB_COMPONENT_NBR = T2.JOB_COMPONENT_NBR AND T1.TASK_SEQ_NBR = T2.TASK_SEQ_NBR
			AND T1.ID > T2.ID
			AND T1.NON_TASK_TYPE = 'T'

			DELETE T1
			FROM #CALENDAR T1, #CALENDAR T2
			WHERE  
			T1.JOB_NUMBER = T2.JOB_NUMBER
			AND T1.JOB_COMPONENT_NBR = T2.JOB_COMPONENT_NBR AND T1.ALERT_ID = T2.ALERT_ID
			AND T1.ID > T2.ID
			AND T1.NON_TASK_TYPE = 'AS'

			--SELECT * FROM #CALENDAR


			--SELECT * FROM #CALENDAR ORDER BY EMP_CODE

--Array positions for key:
-- 0 = Internal row id
-- 1 = Is non task
-- 2 = non task type
-- 3 = is all day
-- 4 = task status, N = normal status
-- 5 = job number
-- 6 = job component number
-- 7 = sequence number
-- 8 = non-task id (this is also Event ID and Event Task ID)
-- 9 = emp code
-- 10 = client code
-- 11 = division code
-- 12 = product code

IF @ShowDuration = 1
BEGIN

	SELECT  A.*
	FROM
	( 
	SELECT TOP 100 PERCENT
				ID,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')  END
				ELSE ISNULL(EMP_CODE,'')  
				END AS EMP_CODE,
				EMP_FNAME,
				EMP_MI,
				EMP_LNAME,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				ELSE ISNULL(EMP_FML_NAME,'')
				END AS EMP_FML_NAME,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'') 
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				     WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN EMP_FML_NAME
				ELSE EMP_CODE + ' - '+ ISNULL(EMP_FNAME+' ','') + ISNULL(EMP_MI+'. ','') + EMP_LNAME
				END AS EMP_CODE_FML_NAME,
				CL_CODE,
				DIV_CODE,
				PRD_CODE,
				JOB_NUMBER,
				JOB_COMPONENT_NBR,
				CL_NAME,
				DIV_NAME,
				PRD_DESCRIPTION,
				JOB_DESC,
				JOB_COMP_DESC,
				TASK_NON_TASK_DISPLAY,
				TASK_NON_TASK_DESCRIPTION,
				ISNULL(TASK_STATUS,'N') AS TASK_STATUS,
				TASK_SEQ_NBR,
				ISNULL(FNC_CODE,'') AS FNC_CODE,
				TASK_DESCRIPTION,
				ISNULL(TASK_HOURS_ALLOWED,0) AS TASK_HOURS_ALLOWED,
				TRF_CODE,
				TRF_DESCRIPTION,
				THIS_DAY,
				START_DAY,
				END_DAY,
				ALL_DAY ,
				NUM_DAYS,
				TASK_TEMP_COMPLETE_DATE,
				START_DATE,
				CASE WHEN END_DATE < START_DATE THEN START_DATE ELSE END_DATE END AS END_DATE,
				START_TIME,
				CASE WHEN END_TIME < START_TIME THEN START_TIME ELSE END_TIME END AS END_TIME,
				WEEK_VIEW_END_TIME,
				HAS_TIME,
				NON_TASK_ID,
				NON_TASK_TYPE,
				NON_TASK_HOURS ,
				NON_TASK_CATEGORY ,
				IS_NON_TASK ,
				WEEK_VIEW_ALL_DAY ,
				REC_TYPE ,
				REC_ORDER ,
				ICAL_ID ,
				AD_NBR ,
				AD_NBR_DESC ,
				AD_NBR_COLOR ,
				RESOURCE_CODE ,
				RESOURCE_DESC ,
				PRIORITY ,
				CAST(ID AS VARCHAR(10))+'|'+
				CAST(IS_NON_TASK AS VARCHAR(1))+'|'+
				ISNULL(NON_TASK_TYPE,'')+'|'+
				CAST(ISNULL(ALL_DAY,0) AS VARCHAR(1))+'|'+
				ISNULL(TASK_STATUS,'N')+'|'+
				CAST(JOB_NUMBER AS VARCHAR(10))+'|'+
				CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+
				ISNULL(CAST(TASK_SEQ_NBR AS VARCHAR(10)),'')+'|'+
				ISNULL(CAST(NON_TASK_ID AS VARCHAR(10)),'')+'|'+
				ISNULL(EMP_CODE,'')+'|'+
				ISNULL(CL_CODE,'')+'|'+
				ISNULL(DIV_CODE,'')+'|'+
				ISNULL(PRD_CODE,'')
				AS DATA_KEY,
				RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(JOB_NUMBER,0)), 6) + '-' + RIGHT(REPLICATE('0', 3) + CONVERT(VARCHAR(20), ISNULL(JOB_COMPONENT_NBR,0)), 3)+ '  ' + ISNULL(JOB_DESC, '') + ' / ' + ISNULL(JOB_COMP_DESC, '') AS JOB_AND_COMP,
				ISNULL(FNC_CODE+' - ','')+ISNULL(TASK_DESCRIPTION,'') AS TASK_AND_DESCRIPT,
				ISNULL(TRF_CODE+' - ','')+ISNULL(TRF_DESCRIPTION,'') AS TRF_AND_DESCRIPT,
				ISNULL(EMP_CODE+' - ','')+ISNULL(EMP_FML_NAME,'') AS EMP_CODE_NAME,
				CASE
				WHEN ALL_DAY = 1 THEN 'Yes'
				ELSE 'No'
				END AS ALL_DAY_YN,
				ISNULL(AD_NBR+' - ','')+ISNULL(AD_NBR_DESC,'') AS AD_NBR_AND_DESCRIPT,
				ISNULL(RESOURCE_CODE+' - ','')+ISNULL(RESOURCE_DESC,'') AS RESOURCE_AND_DESCRIPT,
				CASE
					WHEN NON_TASK_TYPE = 'E' THEN
						RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(NON_TASK_ID,0)), 6) + '-' +ISNULL(TASK_NON_TASK_DISPLAY,'') 
					WHEN NON_TASK_TYPE = 'ET' THEN
						RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(NON_TASK_ID,0)), 6) + '-' +ISNULL(TASK_NON_TASK_DISPLAY,'') 
					ELSE 
						NULL
				END
				AS EVENT_AND_DESCRIPT
				,
				ISNULL(PRIORITY,'00')+ISNULL(RESOURCE_CODE,'00')+CONVERT(VARCHAR(50),START_TIME)+
				ISNULL(AD_NBR,'00')+RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(JOB_NUMBER,0)), 6)
				AS CUSTOM_SORT,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
				     WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				ELSE EMP_CODE  
				END AS EMP_CODE_HOURS,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
				     WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				ELSE EMP_CODE  
				END AS EMP_NAME_HOURS,
				DUE_TIME,
				ISNULL(REMINDER,'') AS REMINDER,
				ISNULL(RECURRENCE,'') AS RECURRENCE,
				ISNULL(RECURRENCE_PARENT,0) AS RECURRENCE_PARENT,
				ISNULL(CDP_CONTACT_ID,'') AS CDP_CONTACT_ID,
				ISNULL(CONT_CODE,'') AS CONT_CODE,
				ISNULL(CONT_FML,'') AS CONT_FML,
				CASE
					WHEN NON_TASK_TYPE = 'T' THEN
						NON_TASK_TYPE + ISNULL(TASK_STATUS,'N')
					ELSE 
						NON_TASK_TYPE
					END AS RESOURCE_TYPE,
				CASE WHEN IS_NON_TASK = 0  AND REC_TYPE = 'Task'THEN CASE WHEN @DEPTS <> '' AND @ROLES <> '' THEN 
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON JTDE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	 
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS <> '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	  		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES <> '' THEN
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON JTDE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'') END 
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN  CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																			CASE WHEN @DEPTS <> '' AND @ROLES <> '' THEN 
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	 
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS <> '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES <> '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'') END 
																			ELSE
																			CASE WHEN @DEPTS <> '' AND @ROLES <> '' THEN 
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	 
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS <> '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES <> '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL 
																			FOR XML PATH('')),1 ,2 ,'') END END
				ELSE ISNULL(EMP_FML_NAME,'')
				END AS EMP_FML_NAME_GROUP,
				ALERT_ID,
				SPRINT_ID
            FROM 
	            #CALENDAR
			WHERE 1 = CASE WHEN @IncludeUnassigned = 1 AND (EMP_CODE IS NULL OR EMP_CODE = '' OR EMP_CODE <> '') THEN 1 
						   WHEN @IncludeUnassigned = 0 AND ((EMP_CODE IS NOT NULL AND EMP_CODE <> '') OR (IS_NON_TASK = 1)) THEN 1 ELSE 0 END
            ORDER BY
	            ISNULL(PRIORITY,'00')+ISNULL(RESOURCE_CODE,'00')+CONVERT(VARCHAR(50),START_TIME)+
	            ISNULL(AD_NBR,'00')+RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(JOB_NUMBER,0)), 6)


	) AS A
	ORDER BY
	A.ALL_DAY_YN DESC, A.START_TIME

END
ELSE
BEGIN

	SELECT
		B.*
	FROM
	(
	SELECT TOP 100 PERCENT
				ID,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				ELSE ISNULL(EMP_CODE,'')  
				END AS EMP_CODE,
				EMP_FNAME,
				EMP_MI,
				EMP_LNAME,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'') 
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')   END
				ELSE ISNULL(EMP_FML_NAME,'')
				END AS EMP_FML_NAME,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				     WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN EMP_FML_NAME
				ELSE EMP_CODE + ' - '+ ISNULL(EMP_FNAME+' ','') + ISNULL(EMP_MI+'. ','') + EMP_LNAME
				END AS EMP_CODE_FML_NAME,
				CL_CODE,
				DIV_CODE,
				PRD_CODE,
				JOB_NUMBER,
				JOB_COMPONENT_NBR,
				CL_NAME,
				DIV_NAME,
				PRD_DESCRIPTION,
				JOB_DESC,
				JOB_COMP_DESC,
				TASK_NON_TASK_DISPLAY,
				TASK_NON_TASK_DESCRIPTION,
				ISNULL(TASK_STATUS,'N') AS TASK_STATUS,
				TASK_SEQ_NBR,
				ISNULL(FNC_CODE,'') AS FNC_CODE,
				TASK_DESCRIPTION,
				ISNULL(TASK_HOURS_ALLOWED,0) AS TASK_HOURS_ALLOWED,
				TRF_CODE,
				TRF_DESCRIPTION,
				THIS_DAY,
				START_DAY,
				END_DAY,
				ALL_DAY ,
				NUM_DAYS,
				TASK_TEMP_COMPLETE_DATE,
				START_DATE,
				END_DATE,
				START_TIME,
				END_TIME,
				WEEK_VIEW_END_TIME,
				HAS_TIME,
				NON_TASK_ID,
				NON_TASK_TYPE,
				NON_TASK_HOURS ,
				NON_TASK_CATEGORY ,
				IS_NON_TASK ,
				WEEK_VIEW_ALL_DAY ,
				REC_TYPE ,
				REC_ORDER ,
				ICAL_ID ,
				AD_NBR ,
				AD_NBR_DESC ,
				AD_NBR_COLOR ,
				RESOURCE_CODE ,
				RESOURCE_DESC ,
				PRIORITY ,
				CAST(ID AS VARCHAR(10))+'|'+
				CAST(IS_NON_TASK AS VARCHAR(1))+'|'+
				ISNULL(NON_TASK_TYPE,'')+'|'+
				CAST(ISNULL(ALL_DAY,0) AS VARCHAR(1))+'|'+
				ISNULL(TASK_STATUS,'N')+'|'+
				CAST(JOB_NUMBER AS VARCHAR(10))+'|'+
				CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+
				ISNULL(CAST(TASK_SEQ_NBR AS VARCHAR(10)),'')+'|'+
				ISNULL(CAST(NON_TASK_ID AS VARCHAR(10)),'')+'|'+
				ISNULL(EMP_CODE,'')+'|'+
				ISNULL(CL_CODE,'')+'|'+
				ISNULL(DIV_CODE,'')+'|'+
				ISNULL(PRD_CODE,'')
				AS DATA_KEY,
				RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(JOB_NUMBER,0)), 6) + '-' + RIGHT(REPLICATE('0', 3) + CONVERT(VARCHAR(20), ISNULL(JOB_COMPONENT_NBR,0)), 3)+ '  ' + ISNULL(JOB_DESC, '') + ' / ' + ISNULL(JOB_COMP_DESC, '') AS JOB_AND_COMP,
				ISNULL(FNC_CODE+' - ','')+ISNULL(TASK_DESCRIPTION,'') AS TASK_AND_DESCRIPT,
				ISNULL(TRF_CODE+' - ','')+ISNULL(TRF_DESCRIPTION,'') AS TRF_AND_DESCRIPT,
				ISNULL(EMP_CODE+' - ','')+ISNULL(EMP_FML_NAME,'') AS EMP_CODE_NAME,
				CASE
				WHEN ALL_DAY = 1 THEN 'Yes'
				ELSE 'No'
				END AS ALL_DAY_YN,
				ISNULL(AD_NBR+' - ','')+ISNULL(AD_NBR_DESC,'') AS AD_NBR_AND_DESCRIPT,
				ISNULL(RESOURCE_CODE+' - ','')+ISNULL(RESOURCE_DESC,'') AS RESOURCE_AND_DESCRIPT,
				CASE
					WHEN NON_TASK_TYPE = 'E' THEN
						RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(NON_TASK_ID,0)), 6) + '-' +ISNULL(TASK_NON_TASK_DISPLAY,'') 
					WHEN NON_TASK_TYPE = 'ET' THEN
						RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(NON_TASK_ID,0)), 6) + '-' +ISNULL(TASK_NON_TASK_DISPLAY,'') 
					ELSE 
						NULL
				END
				AS EVENT_AND_DESCRIPT
				,
				ISNULL(PRIORITY,'00')+ISNULL(RESOURCE_CODE,'00')+CONVERT(VARCHAR(50),START_TIME)+
				ISNULL(AD_NBR,'00')+RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(JOB_NUMBER,0)), 6)
				AS CUSTOM_SORT,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
				     WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				ELSE EMP_CODE  
				END AS EMP_CODE_HOURS,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
				     WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				ELSE EMP_CODE  
				END AS EMP_NAME_HOURS,
				DUE_TIME,
				ISNULL(REMINDER,'') AS REMINDER,
				ISNULL(RECURRENCE,'') AS RECURRENCE,
				ISNULL(RECURRENCE_PARENT,0) AS RECURRENCE_PARENT,
				ISNULL(CDP_CONTACT_ID,'') AS CDP_CONTACT_ID,
				ISNULL(CONT_CODE,'') AS CONT_CODE,
				ISNULL(CONT_FML,'') AS CONT_FML,
				CASE
					WHEN NON_TASK_TYPE = 'T' THEN
						NON_TASK_TYPE + ISNULL(TASK_STATUS,'N')
					ELSE 
						NON_TASK_TYPE
					END AS RESOURCE_TYPE,
				CASE WHEN IS_NON_TASK = 0  AND REC_TYPE = 'Task'THEN CASE WHEN @DEPTS <> '' AND @ROLES <> '' THEN 
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON JTDE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	 
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS <> '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	  		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES <> '' THEN
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON JTDE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'') END
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																			CASE WHEN @DEPTS <> '' AND @ROLES <> '' THEN 
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	 
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS <> '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES <> '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'') END 
																			ELSE
																			CASE WHEN @DEPTS <> '' AND @ROLES <> '' THEN 
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	 
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS <> '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES <> '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'') END END
				ELSE ISNULL(EMP_FML_NAME,'')
				END AS EMP_FML_NAME_GROUP,
				ALERT_ID,
				SPRINT_ID
            FROM 
	            #CALENDAR
			WHERE [START_DATE] >= @StartDate AND [END_DATE] <= CAST((CAST(@EndDate AS VARCHAR(12)) + ' 23:59:59') AS DATETIME) AND IS_NON_TASK <> 1 AND 1 = CASE WHEN @IncludeUnassigned = 1 AND (EMP_CODE IS NULL OR EMP_CODE = '' OR EMP_CODE <> '') THEN 1 
																																							     WHEN @IncludeUnassigned = 0 AND (EMP_CODE IS NOT NULL AND EMP_CODE <> '') THEN 1 ELSE 0 END
			UNION
			SELECT TOP 100 PERCENT
				ID,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				ELSE ISNULL(EMP_CODE,'')  
				END AS EMP_CODE,
				EMP_FNAME,
				EMP_MI,
				EMP_LNAME,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'') 
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')   END
				ELSE ISNULL(EMP_FML_NAME,'')
				END AS EMP_FML_NAME,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'') 
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE 
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')   END
				ELSE EMP_CODE + ' - '+ ISNULL(EMP_FNAME+' ','') + ISNULL(EMP_MI+'. ','') + EMP_LNAME
				END AS EMP_CODE_FML_NAME,
				CL_CODE,
				DIV_CODE,
				PRD_CODE,
				JOB_NUMBER,
				JOB_COMPONENT_NBR,
				CL_NAME,
				DIV_NAME,
				PRD_DESCRIPTION,
				JOB_DESC,
				JOB_COMP_DESC,
				TASK_NON_TASK_DISPLAY,
				TASK_NON_TASK_DESCRIPTION,
				ISNULL(TASK_STATUS,'N') AS TASK_STATUS,
				TASK_SEQ_NBR,
				ISNULL(FNC_CODE,'') AS FNC_CODE,
				TASK_DESCRIPTION,
				ISNULL(TASK_HOURS_ALLOWED,0) AS TASK_HOURS_ALLOWED,
				TRF_CODE,
				TRF_DESCRIPTION,
				THIS_DAY,
				START_DAY,
				END_DAY,
				ALL_DAY ,
				NUM_DAYS,
				TASK_TEMP_COMPLETE_DATE,
				START_DATE,
				END_DATE,
				START_TIME,
				END_TIME,
				WEEK_VIEW_END_TIME,
				HAS_TIME,
				NON_TASK_ID,
				NON_TASK_TYPE,
				NON_TASK_HOURS ,
				NON_TASK_CATEGORY ,
				IS_NON_TASK ,
				WEEK_VIEW_ALL_DAY ,
				REC_TYPE ,
				REC_ORDER ,
				ICAL_ID ,
				AD_NBR ,
				AD_NBR_DESC ,
				AD_NBR_COLOR ,
				RESOURCE_CODE ,
				RESOURCE_DESC ,
				PRIORITY ,
				CAST(ID AS VARCHAR(10))+'|'+
				CAST(IS_NON_TASK AS VARCHAR(1))+'|'+
				ISNULL(NON_TASK_TYPE,'')+'|'+
				CAST(ISNULL(ALL_DAY,0) AS VARCHAR(1))+'|'+
				ISNULL(TASK_STATUS,'N')+'|'+
				CAST(JOB_NUMBER AS VARCHAR(10))+'|'+
				CAST(JOB_COMPONENT_NBR AS VARCHAR(10))+'|'+
				ISNULL(CAST(TASK_SEQ_NBR AS VARCHAR(10)),'')+'|'+
				ISNULL(CAST(NON_TASK_ID AS VARCHAR(10)),'')+'|'+
				ISNULL(EMP_CODE,'')+'|'+
				ISNULL(CL_CODE,'')+'|'+
				ISNULL(DIV_CODE,'')+'|'+
				ISNULL(PRD_CODE,'')
				AS DATA_KEY,
				RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(JOB_NUMBER,0)), 6) + '-' + RIGHT(REPLICATE('0', 3) + CONVERT(VARCHAR(20), ISNULL(JOB_COMPONENT_NBR,0)), 3)+ '  ' + ISNULL(JOB_DESC, '') + ' / ' + ISNULL(JOB_COMP_DESC, '') AS JOB_AND_COMP,
				ISNULL(FNC_CODE+' - ','')+ISNULL(TASK_DESCRIPTION,'') AS TASK_AND_DESCRIPT,
				ISNULL(TRF_CODE+' - ','')+ISNULL(TRF_DESCRIPTION,'') AS TRF_AND_DESCRIPT,
				ISNULL(EMP_CODE+' - ','')+ISNULL(EMP_FML_NAME,'') AS EMP_CODE_NAME,
				CASE
				WHEN ALL_DAY = 1 THEN 'Yes'
				ELSE 'No'
				END AS ALL_DAY_YN,
				ISNULL(AD_NBR+' - ','')+ISNULL(AD_NBR_DESC,'') AS AD_NBR_AND_DESCRIPT,
				ISNULL(RESOURCE_CODE+' - ','')+ISNULL(RESOURCE_DESC,'') AS RESOURCE_AND_DESCRIPT,
				CASE
					WHEN NON_TASK_TYPE = 'E' THEN
						RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(NON_TASK_ID,0)), 6) + '-' +ISNULL(TASK_NON_TASK_DISPLAY,'') 
					WHEN NON_TASK_TYPE = 'ET' THEN
						RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(NON_TASK_ID,0)), 6) + '-' +ISNULL(TASK_NON_TASK_DISPLAY,'') 
					ELSE 
						NULL
				END
				AS EVENT_AND_DESCRIPT
				,
				ISNULL(PRIORITY,'00')+ISNULL(RESOURCE_CODE,'00')+CONVERT(VARCHAR(50),START_TIME)+
				ISNULL(AD_NBR,'00')+RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(JOB_NUMBER,0)), 6)
				AS CUSTOM_SORT,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + JTDE.EMP_CODE + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
				     WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + AR.EMP_CODE + '(' + CAST(ISNULL(HRS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + AR.EMP_CODE + '(' + CAST(ISNULL(HRS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')    END
				ELSE EMP_CODE  
				END AS EMP_CODE_HOURS,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN STUFF((SELECT ', ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM
																			dbo.JOB_TRAFFIC_DET_EMPS JTDE INNER JOIN
																			dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																			WHERE
																			JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																			JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																			JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
				     WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																		STUFF((SELECT ', ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1
																			FOR XML PATH('')),1 ,2 ,'')  
																		ELSE
																		STUFF((SELECT ', ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME + '(' + CAST(ISNULL(HOURS_ALLOWED,0) AS VARCHAR) + ')'
																			  FROM ALERT A LEFT OUTER JOIN 
																					 ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
																					 LEFT OUTER JOIN EMPLOYEE E ON E.EMP_CODE = AR.EMP_CODE
																				WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL
																			FOR XML PATH('')),1 ,2 ,'')  END
				ELSE EMP_CODE  
				END AS EMP_NAME_HOURS,
				DUE_TIME,
				ISNULL(REMINDER,'') AS REMINDER,
				ISNULL(RECURRENCE,'') AS RECURRENCE,
				ISNULL(RECURRENCE_PARENT,0) AS RECURRENCE_PARENT,
				ISNULL(CDP_CONTACT_ID,'') AS CDP_CONTACT_ID,
				ISNULL(CONT_CODE,'') AS CONT_CODE,
				ISNULL(CONT_FML,'') AS CONT_FML,
				CASE
					WHEN NON_TASK_TYPE = 'T' THEN
						NON_TASK_TYPE + ISNULL(TASK_STATUS,'N')
					ELSE 
						NON_TASK_TYPE
					END AS RESOURCE_TYPE,
				CASE WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Task' THEN CASE WHEN @DEPTS <> '' AND @ROLES <> '' THEN 
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON JTDE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	 
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS <> '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	  		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES <> '' THEN
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON JTDE.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + JTDE.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM dbo.JOB_TRAFFIC_DET_EMPS JTDE LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON JTDE.EMP_CODE = E.EMP_CODE		  
																					WHERE JTDE.JOB_NUMBER = #CALENDAR.JOB_NUMBER AND
																					JTDE.JOB_COMPONENT_NBR = #CALENDAR.JOB_COMPONENT_NBR AND
																					JTDE.SEQ_NBR = #CALENDAR.TASK_SEQ_NBR 
																			FOR XML PATH('')),1 ,2 ,'') END
					 WHEN IS_NON_TASK = 0 AND REC_TYPE = 'Assignment' THEN CASE WHEN (SELECT CASE WHEN ISNULL(ALRT_NOTIFY_HDR_ID,0) = 0 THEN 0 ELSE 1 END FROM ALERT A WHERE A.ALERT_ID = #CALENDAR.ALERT_ID) = 0 THEN
																			CASE WHEN @DEPTS <> '' AND @ROLES <> '' THEN 
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	 
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS <> '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES <> '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 
																			FOR XML PATH('')),1 ,2 ,'') END 
																			ELSE
																			CASE WHEN @DEPTS <> '' AND @ROLES <> '' THEN 
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	 
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS <> '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@DEPTS,'''','') + ',', DEFAULT) o ON E.DP_TM_CODE = o.vstr collate database_default	  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES <> '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE LEFT OUTER JOIN EMP_TRAFFIC_ROLE ON AR.EMP_CODE = EMP_TRAFFIC_ROLE.EMP_CODE
																					INNER JOIN charlist_to_table(REPLACE(@ROLES,'''','') + ',', DEFAULT) p ON EMP_TRAFFIC_ROLE.ROLE_CODE = p.vstr collate database_default  		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL 
																			FOR XML PATH('')),1 ,2 ,'')
																		   WHEN @DEPTS = '' AND @ROLES = '' THEN
																			STUFF((SELECT ', ' + AR.EMP_CODE + ' - ' + COALESCE( EMP_FNAME + ' ', '' ) + COALESCE( EMP_MI + '. ', '' ) + EMP_LNAME
																			  FROM ALERT A LEFT OUTER JOIN 
																					ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID LEFT OUTER JOIN
																					dbo.EMPLOYEE_CLOAK E ON AR.EMP_CODE = E.EMP_CODE		  
																					WHERE A.ALERT_ID = #CALENDAR.ALERT_ID AND AR.CURRENT_NOTIFY = 1 AND AR.ALERT_STATE_ID IS NOT NULL 
																			FOR XML PATH('')),1 ,2 ,'') END  END
				ELSE ISNULL(EMP_FML_NAME,'')
				END AS EMP_FML_NAME_GROUP,
				ALERT_ID,
				SPRINT_ID
            FROM 
	            #CALENDAR
			WHERE IS_NON_TASK = 1 AND 1 = CASE WHEN @IncludeUnassigned = 1 AND ((SELECT COUNT(EMP_CODE) FROM EMP_NON_TASKS_EMPS ENT WHERE ENT.NON_TASK_ID = #CALENDAR.NON_TASK_ID) = 0 OR (SELECT COUNT(EMP_CODE) FROM EMP_NON_TASKS_EMPS ENT WHERE ENT.NON_TASK_ID = #CALENDAR.NON_TASK_ID) > 0) THEN 1
											   WHEN @IncludeUnassigned = 0 AND (((SELECT COUNT(EMP_CODE) FROM EMP_NON_TASKS_EMPS ENT WHERE ENT.NON_TASK_ID = #CALENDAR.NON_TASK_ID) > 0) OR (NON_TASK_TYPE = 'H')) THEN 1 ELSE 0 END
            ORDER BY
	            ISNULL(PRIORITY,'00')+ISNULL(RESOURCE_CODE,'00')+CONVERT(VARCHAR(50),START_TIME)+
	            ISNULL(AD_NBR,'00')+RIGHT(REPLICATE('0', 6) + CONVERT(VARCHAR(20),ISNULL(JOB_NUMBER,0)), 6)

	) AS B
	ORDER BY
	B.ALL_DAY_YN DESC, B.START_TIME

END			

DROP TABLE #CALENDAR;
END