IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[usp_wv_dto_Get_Current_Weekly_Time_Total]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[usp_wv_dto_Get_Current_Weekly_Time_Total]
GO
CREATE PROCEDURE [dbo].[usp_wv_dto_Get_Current_Weekly_Time_Total] /*WITH ENCRYPTION*/
@EMP_CODE VARCHAR(6),
@DAYS_TO_DISPLAY SMALLINT,
@START_DATE SMALLDATETIME
AS
/*=========== QUERY ===========*/
BEGIN
	--	VARIABLES
	BEGIN
		DECLARE 
			@STOPWATCH_DATE VARCHAR(10),
			@STOPWATCH_ET_ID INT,
			@STOPWATCH_ET_DTL_ID SMALLINT,
			@SundayHours DECIMAL(8,2),
			@MondayHours DECIMAL(8,2),
			@TuesdayHours DECIMAL(8,2),
			@WednesdayHours DECIMAL(8,2),
			@ThursdayHours DECIMAL(8,2),
			@FridayHours DECIMAL(8,2),
			@SaturdayHours DECIMAL(8,2),
			@TotalHours DECIMAL(8,2),
			@AGENCY_START_WEEK_ON AS SMALLINT,
			@START_WEEK_ON AS SMALLINT,
			@AGENCY_DAYS_TO_DISPLAY AS SMALLINT,
			@SundayHoursGoal DECIMAL(8,2),
			@MondayHoursGoal DECIMAL(8,2),
			@TuesdayHoursGoal DECIMAL(8,2),
			@WednesdayHoursGoal DECIMAL(8,2),
			@ThursdayHoursGoal DECIMAL(8,2),
			@FridayHoursGoal DECIMAL(8,2),
			@SaturdayHoursGoal DECIMAL(8,2),
			@MonthlyHoursGoal DECIMAL(8,2);
		DECLARE @RETURN_TABLE TABLE (DayDisplay SMALLDATETIME, 
									 [Hours] DECIMAL(8, 2), 
									 HAS_STOPWATCH BIT, 
									 STOPWATCH_ET_ID INT, 
									 STOPWATCH_ET_DTL_ID SMALLINT, 
									 HoursGoal DECIMAL(8, 2),
									 HolidayHours DECIMAL(8, 2),
									 IsAllDayHoliday BIT);
	END
	--	START WEEK ON
	BEGIN
		SELECT @AGENCY_START_WEEK_ON = CAST(COALESCE(AGYS.AGY_SETTINGS_VALUE, AGYS.AGY_SETTINGS_DEF) AS INT) FROM AGY_SETTINGS AS AGYS WITH(NOLOCK) WHERE AGYS.AGY_SETTINGS_CODE = 'TS_START_WEEK_ON';
		SELECT @START_WEEK_ON = A.START_WEEK_ON 
		FROM (
			SELECT 
				TOP 1 CAST(COALESCE(APP_VARS.VARIABLE_VALUE, @START_WEEK_ON) AS INT) AS START_WEEK_ON
			FROM            
				APP_VARS WITH(NOLOCK) INNER JOIN SEC_USER WITH(NOLOCK) ON UPPER(APP_VARS.USERID) = UPPER(SEC_USER.USER_CODE)
			WHERE 
				SEC_USER.EMP_CODE = @EMP_CODE AND APP_VARS.APPLICATION = 'NewTimesheet' AND APP_VARS.VARIABLE_NAME = 'StartTimesheetOnDayOfWeek'
		) AS A;
		SET @START_WEEK_ON = ISNULL(@START_WEEK_ON, @AGENCY_START_WEEK_ON);
		SET @START_WEEK_ON = ISNULL(@START_WEEK_ON, 0) + 1; -- SQL DAY OF WEEK SUNDAY IS ONE, .NET SUNDAY IS ZERO
	END
	--	DAYS TO DISPLAY
	IF @DAYS_TO_DISPLAY IS NULL OR @DAYS_TO_DISPLAY = 0
	BEGIN
		SELECT @AGENCY_DAYS_TO_DISPLAY = CAST(COALESCE(AGYS.AGY_SETTINGS_VALUE, AGYS.AGY_SETTINGS_DEF) AS INT) FROM AGY_SETTINGS AS AGYS WITH(NOLOCK) WHERE AGYS.AGY_SETTINGS_CODE = 'TS_DAYS_TO_DISPLAY';
		SELECT @DAYS_TO_DISPLAY = A.DAYS_TO_DISPLAY 
		FROM (
			SELECT 
				TOP 1 CAST(COALESCE(APP_VARS.VARIABLE_VALUE, @START_WEEK_ON) AS INT) AS DAYS_TO_DISPLAY
			FROM            
				APP_VARS WITH(NOLOCK) INNER JOIN SEC_USER WITH(NOLOCK) ON UPPER(APP_VARS.USERID) = UPPER(SEC_USER.USER_CODE)
			WHERE 
				SEC_USER.EMP_CODE = @EMP_CODE AND APP_VARS.APPLICATION = 'NewTimesheet' AND APP_VARS.VARIABLE_NAME = 'DaysToDisplay'
		) AS A;
		SET @DAYS_TO_DISPLAY = ISNULL(@DAYS_TO_DISPLAY, @AGENCY_DAYS_TO_DISPLAY);
	END	
	--	START DATE
	IF @START_DATE IS NULL
	BEGIN
		SELECT @START_DATE = dbo.F_START_OF_WEEK(GETDATE(), @START_WEEK_ON);
	END
	ELSE
	BEGIN
		SELECT @START_DATE = dbo.F_START_OF_WEEK(@START_DATE, @START_WEEK_ON);
	END
	--SELECT @AGENCY_START_WEEK_ON, @START_WEEK_ON, @AGENCY_DAYS_TO_DISPLAY, @DAYS_TO_DISPLAY, @START_DATE
	--	STOPWATCH
	BEGIN
		SELECT @STOPWATCH_DATE = CONVERT(VARCHAR(10),EMP_TIME.STOP_WATCH_START_TIME,120),
			@STOPWATCH_ET_ID = EMP_TIME.ET_ID, @STOPWATCH_ET_DTL_ID =  EMP_TIME.STOP_WATCH_ET_DTL_ID
		FROM EMP_TIME WITH(NOLOCK) 
		WHERE EMP_CODE = @EMP_CODE AND NOT EMP_TIME.STOP_WATCH_START_TIME IS NULL AND NOT EMP_TIME.STOP_WATCH_ET_DTL_ID IS NULL;
	END
	--	GOALS
	BEGIN
		SELECT 
			@SundayHoursGoal = ISNULL(SUN_HRS, 0.00),
			@MondayHoursGoal = ISNULL(MON_HRS, 0.00),
			@TuesdayHoursGoal = ISNULL(TUE_HRS, 0.00),
			@WednesdayHoursGoal = ISNULL(WED_HRS, 0.00),
			@ThursdayHoursGoal = ISNULL(THU_HRS, 0.00),
			@FridayHoursGoal = ISNULL(FRI_HRS, 0.00),
			@SaturdayHoursGoal = ISNULL(SAT_HRS, 0.00),
			@MonthlyHoursGoal = ISNULL(MTH_HRS_GOAL, 0.00)
		FROM
			EMPLOYEE WITH(NOLOCK)
		WHERE
			EMP_CODE = @EMP_CODE;
	END
	--	RECORDS TO RETURN
	BEGIN
		DECLARE 
			@CTR INT, 
			@CURR_DATE SMALLDATETIME, 
			@CURR_HRS DECIMAL (8, 2),
			@CURR_DAY_OF_WEEK INT, -- 1 = SUN, 7 = SAT
			@CURR_HRS_GOAL DECIMAL (8, 2),
			@CURR_DAY_HOLIDAY_HRS DECIMAL (8, 2),
			@CURR_DAY_IS_ALL_DAY_HOLIDAY BIT;
		SET @CTR = 0;
		WHILE @CTR < @DAYS_TO_DISPLAY
		BEGIN
			SET @CURR_DATE = NULL;
			SET @CURR_DAY_OF_WEEK = NULL;
			SET @CURR_HRS_GOAL = 0.00;
			SET @CURR_HRS = 0.00;
			SET @CURR_DAY_HOLIDAY_HRS = NULL;
			SET @CURR_DAY_IS_ALL_DAY_HOLIDAY = NULL;
			SELECT @CURR_DATE = DATEADD(DAY, @CTR, @START_DATE);
			SELECT @CURR_DAY_OF_WEEK = DATEPART(dw, @CURR_DATE);
			BEGIN
				--	GET GOAL
				BEGIN

					IF @CURR_DAY_OF_WEEK = 1
					BEGIN
						SELECT @CURR_HRS_GOAL = @SundayHoursGoal;
					END
					IF @CURR_DAY_OF_WEEK = 2
					BEGIN
						SELECT @CURR_HRS_GOAL = @MondayHoursGoal;
					END
					IF @CURR_DAY_OF_WEEK = 3
					BEGIN
						SELECT @CURR_HRS_GOAL = @TuesdayHoursGoal;
					END
					IF @CURR_DAY_OF_WEEK = 4
					BEGIN
						SELECT @CURR_HRS_GOAL = @WednesdayHoursGoal;
					END
					IF @CURR_DAY_OF_WEEK = 5
					BEGIN
						SELECT @CURR_HRS_GOAL = @ThursdayHoursGoal;
					END
					IF @CURR_DAY_OF_WEEK = 6
					BEGIN
						SELECT @CURR_HRS_GOAL = @FridayHoursGoal;
					END
					IF @CURR_DAY_OF_WEEK = 7
					BEGIN
						SELECT @CURR_HRS_GOAL = @SaturdayHoursGoal;
					END

				END
				--	GET HOURS
				BEGIN
					SELECT 
						@CURR_HRS = ISNULL(SUM(EMP_TOT_HRS), 0)
					FROM 
						EMP_TIME WITH(NOLOCK)
					WHERE 
						EMP_CODE= @EMP_CODE
						AND  EMP_DATE= @CURR_DATE;
				END
				--  GET HOLIDAY HOURS
				BEGIN
					SELECT
		                @CURR_DAY_HOLIDAY_HRS = SUM(ENT.[HOURS]), 
		                @CURR_DAY_IS_ALL_DAY_HOLIDAY = CAST(ALL_DAY AS BIT) 
	                FROM 
		                EMP_NON_TASKS ENT WITH(NOLOCK) 
	                WHERE 
		                ENT.[TYPE] = 'H' AND @CURR_DATE BETWEEN ENT.[START_DATE] AND ENT.END_DATE
	                GROUP BY
		                ENT.ALL_DAY;
				END
				--	INSERT ROW
				BEGIN
					INSERT INTO @RETURN_TABLE (DayDisplay, 
											   [Hours], 
											   HAS_STOPWATCH, 
											   STOPWATCH_ET_ID, 
											   STOPWATCH_ET_DTL_ID,
											   HoursGoal,
											   HolidayHours,
											   IsAllDayHoliday)
					SELECT  @CURR_DATE,
							ISNULL(@CURR_HRS, 0.00),
							CASE WHEN CONVERT(VARCHAR(10), @CURR_DATE, 120) = @STOPWATCH_DATE THEN 1
							ELSE 0
							END AS HAS_STOPWATCH, 
							@STOPWATCH_ET_ID, 
							@STOPWATCH_ET_DTL_ID,
							@CURR_HRS_GOAL,
							ISNULL(@CURR_DAY_HOLIDAY_HRS, 0),
							ISNULL(@CURR_DAY_IS_ALL_DAY_HOLIDAY, 0)
				END

			END

			SET @CTR = @CTR + 1;

		END

	END

	--	RETURN
	BEGIN
		SELECT 
			[DayDisplay] = RT.DayDisplay,
			[Hours] = RT.[Hours],
			[HAS_STOPWATCH] = RT.HAS_STOPWATCH,
			[STOPWATCH_ET_ID] = RT.STOPWATCH_ET_ID,
			[STOPWATCH_ET_DTL_ID] = RT.STOPWATCH_ET_DTL_ID,
			[StandardHoursGoal] = RT.HoursGoal,
			[HoursGoal] =	CASE
								WHEN RT.HolidayHours IS NOT NULL THEN 
									CASE
										WHEN RT.IsAllDayHoliday IS NOT NULL AND RT.IsAllDayHoliday = 1 THEN 0.0
										ELSE RT.HoursGoal - RT.HolidayHours
									END
								ELSE RT.HoursGoal
							END,
			[HolidayHours] = RT.HolidayHours,
			[IsAlldayHoliday] = RT.IsAlldayHoliday,
			[HasStopwatch] = CAST(ISNULL(RT.HAS_STOPWATCH, 0) AS BIT),
			[StopwatchEmployeeTimeID] = ISNULL(RT.STOPWATCH_ET_ID, 0),
			[StopwatchEmployeeTimeDetailID] = ISNULL(RT.STOPWATCH_ET_DTL_ID, 0)
		FROM 
			@RETURN_TABLE RT;
	END

END
/*=========== QUERY ===========*/