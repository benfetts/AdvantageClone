/*
EC:
Need a for the release script to update Recipient table (not the dismissed table) with hours from the Alert Hours Allowed.  
Update where null only but I think that will be all.  Add the same Alert hours to each employee.
*/
BEGIN TRY
	UPDATE ALERT_RCPT SET HOURS_ALLOWED = A.HRS_ALLOWED
	FROM
		ALERT A
		INNER JOIN ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
	WHERE
		A.IS_WORK_ITEM = 1
		AND (NOT A.HRS_ALLOWED IS NULL)
		AND AR.HOURS_ALLOWED IS NULL
		AND AR.CURRENT_NOTIFY = 1
		AND A.ALERT_TYPE_ID <> 15
		AND (A.IS_CS_REVIEW IS NULL OR A.IS_CS_REVIEW = 0);
END TRY
BEGIN CATCH
END CATCH
/*
EC:
Script to clean up recipient table.  If the Assignment is marked complete in the ALERT table, move all related recipient records to the dismissed table.  Do this first.
*/
BEGIN 	
	DECLARE @RCPT TABLE (ID INT IDENTITY,
						 ALERT_ID INT,
						 ALERT_RCPT_ID INT,
						 EMP_CODE VARCHAR(6),
						 CURRENT_NOTIFY BIT)
	--  GET RECS THAT MEET CRITERIA
	BEGIN TRY
		INSERT INTO @RCPT (ALERT_ID, ALERT_RCPT_ID, EMP_CODE, CURRENT_NOTIFY)
		SELECT
			AR.ALERT_ID, AR.ALERT_RCPT_ID, AR.EMP_CODE, CAST(ISNULL(AR.CURRENT_NOTIFY, 0) AS BIT)
		FROM
			ALERT A
			INNER JOIN ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID
			LEFT OUTER JOIN ALERT_RCPT_DISMISSED AD ON AR.ALERT_ID = AD.ALERT_ID AND AR.ALERT_RCPT_ID = AD.ALERT_RCPT_ID AND AR.EMP_CODE = AD.EMP_CODE
		WHERE
			A.ASSIGN_COMPLETED = 1
			AND A.ALERT_TYPE_ID <> 15
			AND (A.IS_CS_REVIEW IS NULL OR A.IS_CS_REVIEW = 0)
			AND AR.CURRENT_NOTIFY = 1
			AND AD.ALERT_ID IS NULL;
	END TRY
	BEGIN CATCH
	END CATCH
	--  UPDATE DISMISSED RECORD FOR BAD RECPIENT ID'S
	BEGIN
		BEGIN TRY
			UPDATE
				ALERT_RCPT_DISMISSED
			SET
				ALERT_RCPT_ID = A.MAX_ID + 1
			FROM ALERT_RCPT_DISMISSED ARR INNER JOIN
				(
					SELECT 
						AR.ALERT_ID,
						AR.ALERT_RCPT_ID,
						AR.EMP_CODE,
						MAX(ARD.ALERT_RCPT_ID) AS MAX_ID
					FROM
						ALERT_RCPT AR
						INNER JOIN @RCPT R ON AR.ALERT_ID = R.ALERT_ID AND AR.ALERT_RCPT_ID = R.ALERT_RCPT_ID AND AR.EMP_CODE = R.EMP_CODE
						INNER JOIN ALERT_RCPT_DISMISSED ARD ON ARD.ALERT_ID = R.ALERT_ID AND ARD.ALERT_RCPT_ID = R.ALERT_RCPT_ID
					GROUP BY
						AR.ALERT_ID,
						AR.ALERT_RCPT_ID,
						AR.EMP_CODE) AS A ON A.ALERT_ID = ARR.ALERT_ID AND A.ALERT_RCPT_ID = ARR.ALERT_RCPT_ID AND A.EMP_CODE = ARR.EMP_CODE
		END TRY
		BEGIN CATCH
		END CATCH
		BEGIN TRY
			-- BAD DATA (ALERT_ID, ALERT_RCPT_ID exists in both the ALERT_RCPT and the ALERT_RCPT_DISMISSED table)
			DELETE FROM ALERT_RCPT_DISMISSED
			FROM
				ALERT_RCPT AR 
				INNER JOIN ALERT_RCPT_DISMISSED ARD ON AR.ALERT_ID = ARD.ALERT_ID AND AR.EMP_CODE = ARD.EMP_CODE AND ARD.CURRENT_NOTIFY = AR.CURRENT_NOTIFY
				INNER JOIN @RCPT A ON A.ALERT_ID = AR.ALERT_ID AND A.ALERT_ID = ARD.ALERT_ID
		END TRY
		BEGIN CATCH
		END CATCH

	END
	--  COPY THEM TO THE DISMISSED TABLE
	BEGIN TRY
		INSERT INTO ALERT_RCPT_DISMISSED
		SELECT AR.*
		FROM
			ALERT_RCPT AR
			INNER JOIN @RCPT R ON AR.ALERT_ID = R.ALERT_ID AND AR.ALERT_RCPT_ID = R.ALERT_RCPT_ID AND AR.EMP_CODE = R.EMP_CODE
	END TRY
	BEGIN CATCH
	END CATCH
	--  DELETE THE RECIPIENTS THAT WERE MOVED
	BEGIN TRY
		DELETE ALERT_RCPT
		FROM
			ALERT_RCPT AR
			INNER JOIN @RCPT R ON AR.ALERT_ID = R.ALERT_ID AND AR.ALERT_RCPT_ID = R.ALERT_RCPT_ID AND AR.EMP_CODE = R.EMP_CODE
	END TRY
	BEGIN CATCH
	END CATCH
END
/*
EC:
Need a script to clear the Current Assignee (I assume you may have done this already) from the Alert record.	
*/
BEGIN TRY
	--	MAKE SURE TEMPLATE AND STATE ID'S ARE SET FOR CURRENT ASSIGNEES BEFORE REMOVING THE ASSIGNED EMP CODE FROM ALERT
	--  STILL OPEN
	BEGIN
		UPDATE ALERT_RCPT SET ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID = A.ALERT_STATE_ID
		FROM
			ALERT A
			INNER JOIN ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID AND A.ASSIGNED_EMP_CODE = AR.EMP_CODE
		WHERE
			A.IS_WORK_ITEM = 1
			AND (A.ASSIGN_COMPLETED IS NULL OR A.ASSIGN_COMPLETED = 0)
			AND NOT A.ASSIGNED_EMP_CODE IS NULL
			AND NOT A.ALRT_NOTIFY_HDR_ID IS NULL
			AND NOT A.ALERT_STATE_ID IS NULL
			AND (AR.ALRT_NOTIFY_HDR_ID IS NULL OR AR.ALERT_STATE_ID IS NULL)
			AND AR.CURRENT_NOTIFY = 1
			AND A.ALERT_TYPE_ID <> 15
			AND (A.IS_CS_REVIEW IS NULL OR A.IS_CS_REVIEW = 0);
	END
	-- COMPLETED
	BEGIN
		UPDATE ALERT_RCPT_DISMISSED SET ALRT_NOTIFY_HDR_ID = A.ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID = A.ALERT_STATE_ID
		FROM
			ALERT A
			INNER JOIN ALERT_RCPT_DISMISSED ARD ON A.ALERT_ID = ARD.ALERT_ID AND A.ASSIGNED_EMP_CODE = ARD.EMP_CODE
		WHERE
			A.IS_WORK_ITEM = 1
			AND A.ASSIGN_COMPLETED = 1
			AND NOT A.ASSIGNED_EMP_CODE IS NULL
			AND NOT A.ALRT_NOTIFY_HDR_ID IS NULL
			AND NOT A.ALERT_STATE_ID IS NULL
			AND (ARD.ALRT_NOTIFY_HDR_ID IS NULL OR ARD.ALERT_STATE_ID IS NULL)
			AND ARD.CURRENT_NOTIFY = 1
			AND A.ALERT_TYPE_ID <> 15
			AND (A.IS_CS_REVIEW IS NULL OR A.IS_CS_REVIEW = 0);
	END
	-- MISSING RECIPIENT RECORDS COMPLETELY
	BEGIN
		DECLARE
			@ASSIGN_COMPLETED_RCPT_RECS INT,
			@TOTAL_ROUTED_ASSIGNMENTS INT,
			@TOTAL_ROUTED_ASSIGNMENTS_OPEN INT,
			@TOTAL_ROUTED_ASSIGNMENTS_COMPLETED INT
		DECLARE
			@FIXED_ASSIGNMENTS TABLE (ALERT_ID INT)
		DECLARE
			@NEED_FIX TABLE (ALERT_ID INT, ALRT_NOTIFY_HDR_ID INT, ALERT_STATE_ID INT)
		-- REC'S THAT WERE CLEANED UP PROPERLY
		BEGIN
			INSERT INTO @FIXED_ASSIGNMENTS
			SELECT A.ALERT_ID
			FROM ALERT A
			INNER JOIN ALERT_RCPT AR ON A.ALERT_ID = AR.ALERT_ID AND A.ALRT_NOTIFY_HDR_ID = AR.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = AR.ALERT_STATE_ID
			WHERE 
				NOT A.ALRT_NOTIFY_HDR_ID IS NULL
				AND NOT A.ALERT_STATE_ID IS NULL
				AND A.IS_WORK_ITEM = 1
				AND NOT A.ASSIGNED_EMP_CODE IS NULL
				AND A.ALERT_TYPE_ID <> 15
				AND (A.IS_CS_REVIEW IS NULL OR A.IS_CS_REVIEW = 0);
			INSERT INTO @FIXED_ASSIGNMENTS
			SELECT A.ALERT_ID
			FROM ALERT A
			INNER JOIN ALERT_RCPT_DISMISSED AR ON A.ALERT_ID = AR.ALERT_ID AND A.ALRT_NOTIFY_HDR_ID = AR.ALRT_NOTIFY_HDR_ID AND A.ALERT_STATE_ID = AR.ALERT_STATE_ID
			WHERE 
				NOT A.ALRT_NOTIFY_HDR_ID IS NULL
				AND NOT A.ALERT_STATE_ID IS NULL
				AND A.IS_WORK_ITEM = 1
				AND NOT A.ASSIGNED_EMP_CODE IS NULL
				AND A.ALERT_TYPE_ID <> 15
				AND (A.IS_CS_REVIEW IS NULL OR A.IS_CS_REVIEW = 0);
		END
		--	PER CONVO 10/02 AND EMAIL:  Alert ID in Project 292169 - Conversion script
			UPDATE ALERT SET ASSIGN_COMPLETED = 1
			FROM
				ALERT A
				LEFT OUTER JOIN @FIXED_ASSIGNMENTS FA ON A.ALERT_ID = FA.ALERT_ID
			WHERE 
				NOT A.ALRT_NOTIFY_HDR_ID IS NULL
				AND NOT A.ALERT_STATE_ID IS NULL
				AND A.IS_WORK_ITEM = 1
				AND NOT A.ASSIGNED_EMP_CODE IS NULL
				AND FA.ALERT_ID IS NULL
				AND (A.ASSIGN_COMPLETED IS NULL OR A.ASSIGN_COMPLETED = 0)
				AND A.ALERT_TYPE_ID <> 15
				AND (A.IS_CS_REVIEW IS NULL OR A.IS_CS_REVIEW = 0);
	END
END TRY
BEGIN CATCH
END CATCH
/*
6035-1-48 - Workflow Clean Up - If NULL or duplicate sequences within a Workflow Header, fix...  Fix in our main script.
*/
BEGIN TRY
	DECLARE
		@TMPLT TABLE (ID INT IDENTITY, ALRT_NOTIFY_HDR_ID INT)
	DECLARE
		@ID INT,
		@ROW_COUNT INT,
		@ALRT_NOTIFY_HDR_ID INT;
	SET @ID = 0;
	SET @ROW_COUNT = 0;
	INSERT INTO @TMPLT
	SELECT
		DISTINCT ALRT_NOTIFY_HDR_ID
	FROM
		ALERT_NOTIFY_STATES ANS
	WHERE
		ANS.SORT_ORDER IS NULL
	UNION
	SELECT
		ANS.ALRT_NOTIFY_HDR_ID
	FROM 
		ALERT_NOTIFY_STATES ANS
	GROUP BY
		ANS.ALRT_NOTIFY_HDR_ID,
		ANS.SORT_ORDER
	HAVING
		COUNT(1) > 1;	
	SELECT @ROW_COUNT = COUNT(1) FROM @TMPLT;
	IF @ROW_COUNT > 0
	BEGIN
		WHILE @ID < @ROW_COUNT
		BEGIN
			CREATE TABLE #FIXED (ID INT IDENTITY, ALRT_NOTIFY_HDR_ID INT, ALERT_STATE_ID INT, OLD_SORT INT);
			SET @ID = @ID + 1;
			SET @ALRT_NOTIFY_HDR_ID = NULL;
			SELECT @ALRT_NOTIFY_HDR_ID = ALRT_NOTIFY_HDR_ID 
			FROM @TMPLT WHERE ID = @ID;
			INSERT INTO #FIXED (ALRT_NOTIFY_HDR_ID, ALERT_STATE_ID, OLD_SORT)
			SELECT 
				A.ALRT_NOTIFY_HDR_ID, A.ALERT_STATE_ID, A.SORT_ORDER
			FROM
				(
					SELECT TOP 100 PERCENT
						ANS.ALRT_NOTIFY_HDR_ID, ANS.ALERT_STATE_ID, ISNULL(ANS.SORT_ORDER, 999) AS SORT_ORDER
					FROM
						ALERT_NOTIFY_STATES ANS
					WHERE
						ALRT_NOTIFY_HDR_ID = @ALRT_NOTIFY_HDR_ID
					ORDER BY
						SORT_ORDER
				) AS A
			ORDER BY
				A.SORT_ORDER;
			UPDATE ALERT_NOTIFY_STATES WITH(ROWLOCK) SET SORT_ORDER = F.ID
			FROM
				ALERT_NOTIFY_STATES ANS
				INNER JOIN #FIXED F ON ANS.ALRT_NOTIFY_HDR_ID = F.ALRT_NOTIFY_HDR_ID AND ANS.ALERT_STATE_ID = F.ALERT_STATE_ID;
			DROP TABLE #FIXED;
		END
	END
END TRY
BEGIN CATCH
END CATCH
/*
6035-1-68 - Assignments - Displaying Recipients, Clearing on State Change
*/
BEGIN TRY
	UPDATE ALERT_RCPT SET ALERT_STATE_ID = NULL
	FROM
		ALERT A
		INNER JOIN ALERT_RCPT X ON A.ALERT_ID = X.ALERT_ID AND A.ALRT_NOTIFY_HDR_ID = X.ALRT_NOTIFY_HDR_ID 
	WHERE
		A.ALERT_ID = X.ALERT_ID
		AND A.IS_WORK_ITEM = 1
		AND NOT A.ALRT_NOTIFY_HDR_ID IS NULL
		AND NOT A.ALERT_STATE_ID IS NULL
		AND X.CURRENT_NOTIFY = 1
		AND X.ALERT_STATE_ID <> A.ALERT_STATE_ID
		AND A.ALERT_TYPE_ID <> 15
		AND (A.IS_CS_REVIEW IS NULL OR A.IS_CS_REVIEW = 0);
	UPDATE ALERT_RCPT_DISMISSED SET ALERT_STATE_ID = NULL
	FROM
		ALERT A
		INNER JOIN ALERT_RCPT_DISMISSED X ON A.ALERT_ID = X.ALERT_ID AND A.ALRT_NOTIFY_HDR_ID = X.ALRT_NOTIFY_HDR_ID 
	WHERE
		A.ALERT_ID = X.ALERT_ID
		AND A.IS_WORK_ITEM = 1
		AND NOT A.ALRT_NOTIFY_HDR_ID IS NULL
		AND NOT A.ALERT_STATE_ID IS NULL
		AND X.CURRENT_NOTIFY = 1
		AND X.ALERT_STATE_ID <> A.ALERT_STATE_ID
		AND A.ALERT_TYPE_ID <> 15
		AND (A.IS_CS_REVIEW IS NULL OR A.IS_CS_REVIEW = 0)
END TRY
BEGIN CATCH
END CATCH