
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.1.5.1)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _ALERT_CATEGORY
	Inherits SqlClientEntity

		Public Sub New() 
			Me.QuerySource = "ALERT_CATEGORY"
			Me.MappingName = "ALERT_CATEGORY"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
		
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ALERT_CATEGORYLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
	Public Overridable Function LoadByPrimaryKey(ByVal ALERT_CAT_ID As Integer) As Boolean

		Dim parameters As ListDictionary = New ListDictionary()
		parameters.Add(_ALERT_CATEGORY.Parameters.ALERT_CAT_ID, ALERT_CAT_ID)

		
		Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ALERT_CATEGORYLoadByPrimaryKey]", parameters)

	End Function

	#Region "Parameters"
	Protected class Parameters 
		
		Public Shared ReadOnly Property ALERT_CAT_ID As SqlParameter
			Get
				Return New SqlParameter("@ALERT_CAT_ID", SqlDbType.Int, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property ALERT_TYPE_ID As SqlParameter
			Get
				Return New SqlParameter("@ALERT_TYPE_ID", SqlDbType.Int, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property ALERT_DESC As SqlParameter
			Get
				Return New SqlParameter("@ALERT_DESC", SqlDbType.VarChar, 40)
			End Get
		End Property
		
		Public Shared ReadOnly Property PROMPT As SqlParameter
			Get
				Return New SqlParameter("@PROMPT", SqlDbType.SmallInt, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property GROUP_LVL_SECURITY As SqlParameter
			Get
				Return New SqlParameter("@GROUP_LVL_SECURITY", SqlDbType.SmallInt, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property PDF_ATTACHMENT As SqlParameter
			Get
				Return New SqlParameter("@PDF_ATTACHMENT", SqlDbType.SmallInt, 0)
			End Get
		End Property
		
	End Class
	#End Region	

	#Region "ColumnNames"
	Public class ColumnNames
		
        Public Const ALERT_CAT_ID As String = "ALERT_CAT_ID"
        Public Const ALERT_TYPE_ID As String = "ALERT_TYPE_ID"
        Public Const ALERT_DESC As String = "ALERT_DESC"
        Public Const PROMPT As String = "PROMPT"
        Public Const GROUP_LVL_SECURITY As String = "GROUP_LVL_SECURITY"
        Public Const PDF_ATTACHMENT As String = "PDF_ATTACHMENT"

		Shared Public Function ToPropertyName(ByVal columnName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(ALERT_CAT_ID) = _ALERT_CATEGORY.PropertyNames.ALERT_CAT_ID
				ht(ALERT_TYPE_ID) = _ALERT_CATEGORY.PropertyNames.ALERT_TYPE_ID
				ht(ALERT_DESC) = _ALERT_CATEGORY.PropertyNames.ALERT_DESC
				ht(PROMPT) = _ALERT_CATEGORY.PropertyNames.PROMPT
				ht(GROUP_LVL_SECURITY) = _ALERT_CATEGORY.PropertyNames.GROUP_LVL_SECURITY
				ht(PDF_ATTACHMENT) = _ALERT_CATEGORY.PropertyNames.PDF_ATTACHMENT

			End If
			
			Return CType(ht(columnName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing		 
	End Class
	#End Region	
	
	#Region "PropertyNames"
	Public class PropertyNames
		
        Public Const ALERT_CAT_ID As String = "ALERT_CAT_ID"
        Public Const ALERT_TYPE_ID As String = "ALERT_TYPE_ID"
        Public Const ALERT_DESC As String = "ALERT_DESC"
        Public Const PROMPT As String = "PROMPT"
        Public Const GROUP_LVL_SECURITY As String = "GROUP_LVL_SECURITY"
        Public Const PDF_ATTACHMENT As String = "PDF_ATTACHMENT"

		Shared Public Function ToColumnName(ByVal propertyName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(ALERT_CAT_ID) = _ALERT_CATEGORY.ColumnNames.ALERT_CAT_ID
				ht(ALERT_TYPE_ID) = _ALERT_CATEGORY.ColumnNames.ALERT_TYPE_ID
				ht(ALERT_DESC) = _ALERT_CATEGORY.ColumnNames.ALERT_DESC
				ht(PROMPT) = _ALERT_CATEGORY.ColumnNames.PROMPT
				ht(GROUP_LVL_SECURITY) = _ALERT_CATEGORY.ColumnNames.GROUP_LVL_SECURITY
				ht(PDF_ATTACHMENT) = _ALERT_CATEGORY.ColumnNames.PDF_ATTACHMENT

			End If
			
			Return CType(ht(propertyName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing
		
	End Class
	#End Region	
	
	#Region "StringPropertyNames"
	Public class StringPropertyNames
		
        Public Const ALERT_CAT_ID As String = "s_ALERT_CAT_ID"
        Public Const ALERT_TYPE_ID As String = "s_ALERT_TYPE_ID"
        Public Const ALERT_DESC As String = "s_ALERT_DESC"
        Public Const PROMPT As String = "s_PROMPT"
        Public Const GROUP_LVL_SECURITY As String = "s_GROUP_LVL_SECURITY"
        Public Const PDF_ATTACHMENT As String = "s_PDF_ATTACHMENT"

	End Class
	#End Region		
	
	#Region "Properties" 
		Public Overridable Property ALERT_CAT_ID As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.ALERT_CAT_ID)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.ALERT_CAT_ID, Value)
			End Set
		End Property

		Public Overridable Property ALERT_TYPE_ID As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.ALERT_TYPE_ID)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.ALERT_TYPE_ID, Value)
			End Set
		End Property

		Public Overridable Property ALERT_DESC As String
			Get
				Return MyBase.GetString(ColumnNames.ALERT_DESC)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.ALERT_DESC, Value)
			End Set
		End Property

		Public Overridable Property PROMPT As Short
			Get
				Return MyBase.GetShort(ColumnNames.PROMPT)
			End Get
			Set(ByVal Value As Short)
				MyBase.SetShort(ColumnNames.PROMPT, Value)
			End Set
		End Property

		Public Overridable Property GROUP_LVL_SECURITY As Short
			Get
				Return MyBase.GetShort(ColumnNames.GROUP_LVL_SECURITY)
			End Get
			Set(ByVal Value As Short)
				MyBase.SetShort(ColumnNames.GROUP_LVL_SECURITY, Value)
			End Set
		End Property

		Public Overridable Property PDF_ATTACHMENT As Short
			Get
				Return MyBase.GetShort(ColumnNames.PDF_ATTACHMENT)
			End Get
			Set(ByVal Value As Short)
				MyBase.SetShort(ColumnNames.PDF_ATTACHMENT, Value)
			End Set
		End Property


	#End Region  
	
	#Region "String Properties" 

		Public Overridable Property s_ALERT_CAT_ID As String
			Get
				If Me.IsColumnNull(ColumnNames.ALERT_CAT_ID) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.ALERT_CAT_ID)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.ALERT_CAT_ID)
				Else
					Me.ALERT_CAT_ID = MyBase.SetIntegerAsString(ColumnNames.ALERT_CAT_ID, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ALERT_TYPE_ID As String
			Get
				If Me.IsColumnNull(ColumnNames.ALERT_TYPE_ID) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.ALERT_TYPE_ID)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.ALERT_TYPE_ID)
				Else
					Me.ALERT_TYPE_ID = MyBase.SetIntegerAsString(ColumnNames.ALERT_TYPE_ID, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ALERT_DESC As String
			Get
				If Me.IsColumnNull(ColumnNames.ALERT_DESC) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.ALERT_DESC)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.ALERT_DESC)
				Else
					Me.ALERT_DESC = MyBase.SetStringAsString(ColumnNames.ALERT_DESC, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_PROMPT As String
			Get
				If Me.IsColumnNull(ColumnNames.PROMPT) Then
					Return String.Empty
				Else
					Return MyBase.GetShortAsString(ColumnNames.PROMPT)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.PROMPT)
				Else
					Me.PROMPT = MyBase.SetShortAsString(ColumnNames.PROMPT, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_GROUP_LVL_SECURITY As String
			Get
				If Me.IsColumnNull(ColumnNames.GROUP_LVL_SECURITY) Then
					Return String.Empty
				Else
					Return MyBase.GetShortAsString(ColumnNames.GROUP_LVL_SECURITY)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.GROUP_LVL_SECURITY)
				Else
					Me.GROUP_LVL_SECURITY = MyBase.SetShortAsString(ColumnNames.GROUP_LVL_SECURITY, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_PDF_ATTACHMENT As String
			Get
				If Me.IsColumnNull(ColumnNames.PDF_ATTACHMENT) Then
					Return String.Empty
				Else
					Return MyBase.GetShortAsString(ColumnNames.PDF_ATTACHMENT)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.PDF_ATTACHMENT)
				Else
					Me.PDF_ATTACHMENT = MyBase.SetShortAsString(ColumnNames.PDF_ATTACHMENT, Value)
				End If
			End Set
		End Property


	#End Region  	

	#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "TearOff's"
		Public class TearOffWhereParameter

			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub
		
	
			Public ReadOnly Property ALERT_CAT_ID() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.ALERT_CAT_ID, Parameters.ALERT_CAT_ID)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property ALERT_TYPE_ID() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.ALERT_TYPE_ID, Parameters.ALERT_TYPE_ID)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property ALERT_DESC() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.ALERT_DESC, Parameters.ALERT_DESC)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property PROMPT() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.PROMPT, Parameters.PROMPT)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property GROUP_LVL_SECURITY() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.GROUP_LVL_SECURITY, Parameters.GROUP_LVL_SECURITY)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property PDF_ATTACHMENT() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.PDF_ATTACHMENT, Parameters.PDF_ATTACHMENT)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property


			Private _clause as WhereClause
		End Class
		#End Region	

		Public ReadOnly Property ALERT_CAT_ID() As WhereParameter 
			Get
				If _ALERT_CAT_ID_W Is Nothing Then
					_ALERT_CAT_ID_W = TearOff.ALERT_CAT_ID
				End If
				Return _ALERT_CAT_ID_W
			End Get
		End Property

		Public ReadOnly Property ALERT_TYPE_ID() As WhereParameter 
			Get
				If _ALERT_TYPE_ID_W Is Nothing Then
					_ALERT_TYPE_ID_W = TearOff.ALERT_TYPE_ID
				End If
				Return _ALERT_TYPE_ID_W
			End Get
		End Property

		Public ReadOnly Property ALERT_DESC() As WhereParameter 
			Get
				If _ALERT_DESC_W Is Nothing Then
					_ALERT_DESC_W = TearOff.ALERT_DESC
				End If
				Return _ALERT_DESC_W
			End Get
		End Property

		Public ReadOnly Property PROMPT() As WhereParameter 
			Get
				If _PROMPT_W Is Nothing Then
					_PROMPT_W = TearOff.PROMPT
				End If
				Return _PROMPT_W
			End Get
		End Property

		Public ReadOnly Property GROUP_LVL_SECURITY() As WhereParameter 
			Get
				If _GROUP_LVL_SECURITY_W Is Nothing Then
					_GROUP_LVL_SECURITY_W = TearOff.GROUP_LVL_SECURITY
				End If
				Return _GROUP_LVL_SECURITY_W
			End Get
		End Property

		Public ReadOnly Property PDF_ATTACHMENT() As WhereParameter 
			Get
				If _PDF_ATTACHMENT_W Is Nothing Then
					_PDF_ATTACHMENT_W = TearOff.PDF_ATTACHMENT
				End If
				Return _PDF_ATTACHMENT_W
			End Get
		End Property

		Private _ALERT_CAT_ID_W As WhereParameter = Nothing
		Private _ALERT_TYPE_ID_W As WhereParameter = Nothing
		Private _ALERT_DESC_W As WhereParameter = Nothing
		Private _PROMPT_W As WhereParameter = Nothing
		Private _GROUP_LVL_SECURITY_W As WhereParameter = Nothing
		Private _PDF_ATTACHMENT_W As WhereParameter = Nothing

			Public Sub WhereClauseReset()

			_ALERT_CAT_ID_W = Nothing
			_ALERT_TYPE_ID_W = Nothing
			_ALERT_DESC_W = Nothing
			_PROMPT_W = Nothing
			_GROUP_LVL_SECURITY_W = Nothing
			_PDF_ATTACHMENT_W = Nothing
				Me._entity.Query.FlushWhereParameters()

			End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "AggregateParameter TearOff's"
		Public class TearOffAggregateParameter

			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub
		
	
		Public ReadOnly Property ALERT_CAT_ID() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ALERT_CAT_ID, Parameters.ALERT_CAT_ID)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property ALERT_TYPE_ID() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ALERT_TYPE_ID, Parameters.ALERT_TYPE_ID)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property ALERT_DESC() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ALERT_DESC, Parameters.ALERT_DESC)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property PROMPT() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.PROMPT, Parameters.PROMPT)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property GROUP_LVL_SECURITY() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.GROUP_LVL_SECURITY, Parameters.GROUP_LVL_SECURITY)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property PDF_ATTACHMENT() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.PDF_ATTACHMENT, Parameters.PDF_ATTACHMENT)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property


			Private _clause as AggregateClause
		End Class
		#End Region	

		Public ReadOnly Property ALERT_CAT_ID() As AggregateParameter 
			Get
				If _ALERT_CAT_ID_W Is Nothing Then
					_ALERT_CAT_ID_W = TearOff.ALERT_CAT_ID
				End If
				Return _ALERT_CAT_ID_W
			End Get
		End Property

		Public ReadOnly Property ALERT_TYPE_ID() As AggregateParameter 
			Get
				If _ALERT_TYPE_ID_W Is Nothing Then
					_ALERT_TYPE_ID_W = TearOff.ALERT_TYPE_ID
				End If
				Return _ALERT_TYPE_ID_W
			End Get
		End Property

		Public ReadOnly Property ALERT_DESC() As AggregateParameter 
			Get
				If _ALERT_DESC_W Is Nothing Then
					_ALERT_DESC_W = TearOff.ALERT_DESC
				End If
				Return _ALERT_DESC_W
			End Get
		End Property

		Public ReadOnly Property PROMPT() As AggregateParameter 
			Get
				If _PROMPT_W Is Nothing Then
					_PROMPT_W = TearOff.PROMPT
				End If
				Return _PROMPT_W
			End Get
		End Property

		Public ReadOnly Property GROUP_LVL_SECURITY() As AggregateParameter 
			Get
				If _GROUP_LVL_SECURITY_W Is Nothing Then
					_GROUP_LVL_SECURITY_W = TearOff.GROUP_LVL_SECURITY
				End If
				Return _GROUP_LVL_SECURITY_W
			End Get
		End Property

		Public ReadOnly Property PDF_ATTACHMENT() As AggregateParameter 
			Get
				If _PDF_ATTACHMENT_W Is Nothing Then
					_PDF_ATTACHMENT_W = TearOff.PDF_ATTACHMENT
				End If
				Return _PDF_ATTACHMENT_W
			End Get
		End Property

		Private _ALERT_CAT_ID_W As AggregateParameter = Nothing
		Private _ALERT_TYPE_ID_W As AggregateParameter = Nothing
		Private _ALERT_DESC_W As AggregateParameter = Nothing
		Private _PROMPT_W As AggregateParameter = Nothing
		Private _GROUP_LVL_SECURITY_W As AggregateParameter = Nothing
		Private _PDF_ATTACHMENT_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_ALERT_CAT_ID_W = Nothing
		_ALERT_TYPE_ID_W = Nothing
		_ALERT_DESC_W = Nothing
		_PROMPT_W = Nothing
		_GROUP_LVL_SECURITY_W = Nothing
		_PDF_ATTACHMENT_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

	Protected Overrides Function GetInsertCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ALERT_CATEGORYInsert]" 
	    
		CreateParameters(cmd)
		    
		Return cmd 

  	End Function
	
	Protected Overrides Function GetUpdateCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ALERT_CATEGORYUpdate]" 
		
		CreateParameters(cmd) 
		    
		Return cmd
	
	End Function	
	
	Protected Overrides Function GetDeleteCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ALERT_CATEGORYDelete]" 
		
		Dim p As SqlParameter
		p = cmd.Parameters.Add(Parameters.ALERT_CAT_ID)
		p.SourceColumn = ColumnNames.ALERT_CAT_ID
		p.SourceVersion = DataRowVersion.Current

  
		Return cmd
	
	End Function	
	
	Private Sub CreateParameters(ByVal cmd As SqlCommand)
	
		Dim p As SqlParameter
		p = cmd.Parameters.Add(Parameters.ALERT_CAT_ID)
		p.SourceColumn = ColumnNames.ALERT_CAT_ID
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.ALERT_TYPE_ID)
		p.SourceColumn = ColumnNames.ALERT_TYPE_ID
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.ALERT_DESC)
		p.SourceColumn = ColumnNames.ALERT_DESC
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.PROMPT)
		p.SourceColumn = ColumnNames.PROMPT
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.GROUP_LVL_SECURITY)
		p.SourceColumn = ColumnNames.GROUP_LVL_SECURITY
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.PDF_ATTACHMENT)
		p.SourceColumn = ColumnNames.PDF_ATTACHMENT
		p.SourceVersion = DataRowVersion.Current


	End Sub	

End Class

