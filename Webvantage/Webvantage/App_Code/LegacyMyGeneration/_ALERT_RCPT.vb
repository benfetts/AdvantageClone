
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _ALERT_RCPT
    Inherits SqlClientEntity

    Public Sub New()
        Me.QuerySource = "ALERT_RCPT"
        Me.MappingName = "ALERT_RCPT"
    End Sub

    '=================================================================
    '  Public Overrides Sub AddNew()
    '=================================================================
    '
    '=================================================================
    Public Overrides Sub AddNew()
        MyBase.AddNew()

    End Sub

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub


    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean

        Dim parameters As ListDictionary = Nothing


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ALERT_RCPTLoadAll]", parameters)

    End Function

    '=================================================================
    ' Public Overridable Function LoadByPrimaryKey()  As Boolean
    '=================================================================
    '  Loads a single row of via the primary key
    '=================================================================
    Public Overridable Function LoadByPrimaryKey(ByVal ALERT_ID As Integer, ByVal ALERT_RCPT_ID As Integer) As Boolean

        Dim parameters As ListDictionary = New ListDictionary()
        parameters.Add(_ALERT_RCPT.Parameters.ALERT_ID, ALERT_ID)

        parameters.Add(_ALERT_RCPT.Parameters.ALERT_RCPT_ID, ALERT_RCPT_ID)


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ALERT_RCPTLoadByPrimaryKey]", parameters)

    End Function

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property ALERT_ID() As SqlParameter
            Get
                Return New SqlParameter("@ALERT_ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property ALERT_RCPT_ID() As SqlParameter
            Get
                Return New SqlParameter("@ALERT_RCPT_ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property EMP_CODE() As SqlParameter
            Get
                Return New SqlParameter("@EMP_CODE", SqlDbType.VarChar, 6)
            End Get
        End Property

        Public Shared ReadOnly Property EMAIL_ADDRESS() As SqlParameter
            Get
                Return New SqlParameter("@EMAIL_ADDRESS", SqlDbType.VarChar, 50)
            End Get
        End Property

        Public Shared ReadOnly Property PROCESSED() As SqlParameter
            Get
                Return New SqlParameter("@PROCESSED", SqlDbType.SmallDateTime, 0)
            End Get
        End Property

        Public Shared ReadOnly Property NEW_ALERT() As SqlParameter
            Get
                Return New SqlParameter("@NEW_ALERT", SqlDbType.SmallInt, 0)
            End Get
        End Property

        Public Shared ReadOnly Property READ_ALERT() As SqlParameter
            Get
                Return New SqlParameter("@READ_ALERT", SqlDbType.SmallInt, 0)
            End Get
        End Property

        Public Shared ReadOnly Property CURRENT_RCPT() As SqlParameter
            Get
                Return New SqlParameter("@CURRENT_RCPT", SqlDbType.SmallInt, 0)
            End Get
        End Property

        Public Shared ReadOnly Property CURRENT_NOTIFY() As SqlParameter
            Get
                Return New SqlParameter("@CURRENT_NOTIFY", SqlDbType.Int, 0)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const ALERT_ID As String = "ALERT_ID"
        Public Const ALERT_RCPT_ID As String = "ALERT_RCPT_ID"
        Public Const EMP_CODE As String = "EMP_CODE"
        Public Const EMAIL_ADDRESS As String = "EMAIL_ADDRESS"
        Public Const PROCESSED As String = "PROCESSED"
        Public Const NEW_ALERT As String = "NEW_ALERT"
        Public Const READ_ALERT As String = "READ_ALERT"
        Public Const CURRENT_RCPT As String = "CURRENT_RCPT"
        Public Const CURRENT_NOTIFY As String = "CURRENT_NOTIFY"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ALERT_ID) = _ALERT_RCPT.PropertyNames.ALERT_ID
                ht(ALERT_RCPT_ID) = _ALERT_RCPT.PropertyNames.ALERT_RCPT_ID
                ht(EMP_CODE) = _ALERT_RCPT.PropertyNames.EMP_CODE
                ht(EMAIL_ADDRESS) = _ALERT_RCPT.PropertyNames.EMAIL_ADDRESS
                ht(PROCESSED) = _ALERT_RCPT.PropertyNames.PROCESSED
                ht(NEW_ALERT) = _ALERT_RCPT.PropertyNames.NEW_ALERT
                ht(READ_ALERT) = _ALERT_RCPT.PropertyNames.READ_ALERT
                ht(CURRENT_RCPT) = _ALERT_RCPT.PropertyNames.CURRENT_RCPT
                ht(CURRENT_NOTIFY) = _ALERT_RCPT.PropertyNames.CURRENT_NOTIFY

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const ALERT_ID As String = "ALERT_ID"
        Public Const ALERT_RCPT_ID As String = "ALERT_RCPT_ID"
        Public Const EMP_CODE As String = "EMP_CODE"
        Public Const EMAIL_ADDRESS As String = "EMAIL_ADDRESS"
        Public Const PROCESSED As String = "PROCESSED"
        Public Const NEW_ALERT As String = "NEW_ALERT"
        Public Const READ_ALERT As String = "READ_ALERT"
        Public Const CURRENT_RCPT As String = "CURRENT_RCPT"
        Public Const CURRENT_NOTIFY As String = "CURRENT_NOTIFY"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ALERT_ID) = _ALERT_RCPT.ColumnNames.ALERT_ID
                ht(ALERT_RCPT_ID) = _ALERT_RCPT.ColumnNames.ALERT_RCPT_ID
                ht(EMP_CODE) = _ALERT_RCPT.ColumnNames.EMP_CODE
                ht(EMAIL_ADDRESS) = _ALERT_RCPT.ColumnNames.EMAIL_ADDRESS
                ht(PROCESSED) = _ALERT_RCPT.ColumnNames.PROCESSED
                ht(NEW_ALERT) = _ALERT_RCPT.ColumnNames.NEW_ALERT
                ht(READ_ALERT) = _ALERT_RCPT.ColumnNames.READ_ALERT
                ht(CURRENT_RCPT) = _ALERT_RCPT.ColumnNames.CURRENT_RCPT
                ht(CURRENT_NOTIFY) = _ALERT_RCPT.ColumnNames.CURRENT_NOTIFY

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const ALERT_ID As String = "s_ALERT_ID"
        Public Const ALERT_RCPT_ID As String = "s_ALERT_RCPT_ID"
        Public Const EMP_CODE As String = "s_EMP_CODE"
        Public Const EMAIL_ADDRESS As String = "s_EMAIL_ADDRESS"
        Public Const PROCESSED As String = "s_PROCESSED"
        Public Const NEW_ALERT As String = "s_NEW_ALERT"
        Public Const READ_ALERT As String = "s_READ_ALERT"
        Public Const CURRENT_RCPT As String = "s_CURRENT_RCPT"
        Public Const CURRENT_NOTIFY As String = "s_CURRENT_NOTIFY"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property ALERT_ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.ALERT_ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.ALERT_ID, Value)
        End Set
    End Property

    Public Overridable Property ALERT_RCPT_ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.ALERT_RCPT_ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.ALERT_RCPT_ID, Value)
        End Set
    End Property

    Public Overridable Property EMP_CODE() As String
        Get
            Return MyBase.GetString(ColumnNames.EMP_CODE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.EMP_CODE, Value)
        End Set
    End Property

    Public Overridable Property EMAIL_ADDRESS() As String
        Get
            Return MyBase.GetString(ColumnNames.EMAIL_ADDRESS)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.EMAIL_ADDRESS, Value)
        End Set
    End Property

    Public Overridable Property PROCESSED() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.PROCESSED)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.PROCESSED, Value)
        End Set
    End Property

    Public Overridable Property NEW_ALERT() As Short
        Get
            Return MyBase.GetShort(ColumnNames.NEW_ALERT)
        End Get
        Set(ByVal Value As Short)
            MyBase.SetShort(ColumnNames.NEW_ALERT, Value)
        End Set
    End Property

    Public Overridable Property READ_ALERT() As Short
        Get
            Return MyBase.GetShort(ColumnNames.READ_ALERT)
        End Get
        Set(ByVal Value As Short)
            MyBase.SetShort(ColumnNames.READ_ALERT, Value)
        End Set
    End Property

    Public Overridable Property CURRENT_RCPT() As Short
        Get
            Return MyBase.GetShort(ColumnNames.CURRENT_RCPT)
        End Get
        Set(ByVal Value As Short)
            MyBase.SetShort(ColumnNames.CURRENT_RCPT, Value)
        End Set
    End Property

    Public Overridable Property CURRENT_NOTIFY() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.CURRENT_NOTIFY)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.CURRENT_NOTIFY, Value)
        End Set
    End Property



#End Region

#Region "String Properties"

    Public Overridable Property s_ALERT_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.ALERT_ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.ALERT_ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.ALERT_ID)
            Else
                Me.ALERT_ID = MyBase.SetIntegerAsString(ColumnNames.ALERT_ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ALERT_RCPT_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.ALERT_RCPT_ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.ALERT_RCPT_ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.ALERT_RCPT_ID)
            Else
                Me.ALERT_RCPT_ID = MyBase.SetIntegerAsString(ColumnNames.ALERT_RCPT_ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EMP_CODE() As String
        Get
            If Me.IsColumnNull(ColumnNames.EMP_CODE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.EMP_CODE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.EMP_CODE)
            Else
                Me.EMP_CODE = MyBase.SetStringAsString(ColumnNames.EMP_CODE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EMAIL_ADDRESS() As String
        Get
            If Me.IsColumnNull(ColumnNames.EMAIL_ADDRESS) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.EMAIL_ADDRESS)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.EMAIL_ADDRESS)
            Else
                Me.EMAIL_ADDRESS = MyBase.SetStringAsString(ColumnNames.EMAIL_ADDRESS, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_PROCESSED() As String
        Get
            If Me.IsColumnNull(ColumnNames.PROCESSED) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.PROCESSED)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.PROCESSED)
            Else
                Me.PROCESSED = MyBase.SetDateTimeAsString(ColumnNames.PROCESSED, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_NEW_ALERT() As String
        Get
            If Me.IsColumnNull(ColumnNames.NEW_ALERT) Then
                Return String.Empty
            Else
                Return MyBase.GetShortAsString(ColumnNames.NEW_ALERT)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.NEW_ALERT)
            Else
                Me.NEW_ALERT = MyBase.SetShortAsString(ColumnNames.NEW_ALERT, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_READ_ALERT() As String
        Get
            If Me.IsColumnNull(ColumnNames.READ_ALERT) Then
                Return String.Empty
            Else
                Return MyBase.GetShortAsString(ColumnNames.READ_ALERT)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.READ_ALERT)
            Else
                Me.READ_ALERT = MyBase.SetShortAsString(ColumnNames.READ_ALERT, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_CURRENT_RCPT() As String
        Get
            If Me.IsColumnNull(ColumnNames.CURRENT_RCPT) Then
                Return String.Empty
            Else
                Return MyBase.GetShortAsString(ColumnNames.CURRENT_RCPT)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.CURRENT_RCPT)
            Else
                Me.CURRENT_RCPT = MyBase.SetShortAsString(ColumnNames.CURRENT_RCPT, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_CURRENT_NOTIFY() As String
        Get
            If Me.IsColumnNull(ColumnNames.CURRENT_NOTIFY) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.CURRENT_NOTIFY)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.CURRENT_NOTIFY)
            Else
                Me.CURRENT_NOTIFY = MyBase.SetIntegerAsString(ColumnNames.CURRENT_NOTIFY, Value)
            End If
        End Set
    End Property


#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property ALERT_ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ALERT_ID, Parameters.ALERT_ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ALERT_RCPT_ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ALERT_RCPT_ID, Parameters.ALERT_RCPT_ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_CODE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EMP_CODE, Parameters.EMP_CODE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMAIL_ADDRESS() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EMAIL_ADDRESS, Parameters.EMAIL_ADDRESS)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PROCESSED() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.PROCESSED, Parameters.PROCESSED)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property NEW_ALERT() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.NEW_ALERT, Parameters.NEW_ALERT)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property READ_ALERT() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.READ_ALERT, Parameters.READ_ALERT)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CURRENT_RCPT() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.CURRENT_RCPT, Parameters.CURRENT_RCPT)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CURRENT_NOTIFY() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.CURRENT_NOTIFY, Parameters.CURRENT_NOTIFY)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property


            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property ALERT_ID() As WhereParameter
            Get
                If _ALERT_ID_W Is Nothing Then
                    _ALERT_ID_W = TearOff.ALERT_ID
                End If
                Return _ALERT_ID_W
            End Get
        End Property

        Public ReadOnly Property ALERT_RCPT_ID() As WhereParameter
            Get
                If _ALERT_RCPT_ID_W Is Nothing Then
                    _ALERT_RCPT_ID_W = TearOff.ALERT_RCPT_ID
                End If
                Return _ALERT_RCPT_ID_W
            End Get
        End Property

        Public ReadOnly Property EMP_CODE() As WhereParameter
            Get
                If _EMP_CODE_W Is Nothing Then
                    _EMP_CODE_W = TearOff.EMP_CODE
                End If
                Return _EMP_CODE_W
            End Get
        End Property

        Public ReadOnly Property EMAIL_ADDRESS() As WhereParameter
            Get
                If _EMAIL_ADDRESS_W Is Nothing Then
                    _EMAIL_ADDRESS_W = TearOff.EMAIL_ADDRESS
                End If
                Return _EMAIL_ADDRESS_W
            End Get
        End Property

        Public ReadOnly Property PROCESSED() As WhereParameter
            Get
                If _PROCESSED_W Is Nothing Then
                    _PROCESSED_W = TearOff.PROCESSED
                End If
                Return _PROCESSED_W
            End Get
        End Property

        Public ReadOnly Property NEW_ALERT() As WhereParameter
            Get
                If _NEW_ALERT_W Is Nothing Then
                    _NEW_ALERT_W = TearOff.NEW_ALERT
                End If
                Return _NEW_ALERT_W
            End Get
        End Property

        Public ReadOnly Property READ_ALERT() As WhereParameter
            Get
                If _READ_ALERT_W Is Nothing Then
                    _READ_ALERT_W = TearOff.READ_ALERT
                End If
                Return _READ_ALERT_W
            End Get
        End Property

        Public ReadOnly Property CURRENT_RCPT() As WhereParameter
            Get
                If _CURRENT_RCPT_W Is Nothing Then
                    _CURRENT_RCPT_W = TearOff.CURRENT_RCPT
                End If
                Return _CURRENT_RCPT_W
            End Get
        End Property
        Public ReadOnly Property CURRENT_NOTIFY() As WhereParameter
            Get
                If _CURRENT_NOTIFY_W Is Nothing Then
                    _CURRENT_NOTIFY_W = TearOff.CURRENT_NOTIFY
                End If
                Return _CURRENT_NOTIFY_W
            End Get
        End Property


        Private _ALERT_ID_W As WhereParameter = Nothing
        Private _ALERT_RCPT_ID_W As WhereParameter = Nothing
        Private _EMP_CODE_W As WhereParameter = Nothing
        Private _EMAIL_ADDRESS_W As WhereParameter = Nothing
        Private _PROCESSED_W As WhereParameter = Nothing
        Private _NEW_ALERT_W As WhereParameter = Nothing
        Private _READ_ALERT_W As WhereParameter = Nothing
        Private _CURRENT_RCPT_W As WhereParameter = Nothing
        Private _CURRENT_NOTIFY_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _ALERT_ID_W = Nothing
            _ALERT_RCPT_ID_W = Nothing
            _EMP_CODE_W = Nothing
            _EMAIL_ADDRESS_W = Nothing
            _PROCESSED_W = Nothing
            _NEW_ALERT_W = Nothing
            _READ_ALERT_W = Nothing
            _CURRENT_RCPT_W = Nothing
            _CURRENT_NOTIFY_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property ALERT_ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ALERT_ID, Parameters.ALERT_ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ALERT_RCPT_ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ALERT_RCPT_ID, Parameters.ALERT_RCPT_ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_CODE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMP_CODE, Parameters.EMP_CODE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMAIL_ADDRESS() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMAIL_ADDRESS, Parameters.EMAIL_ADDRESS)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PROCESSED() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.PROCESSED, Parameters.PROCESSED)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property NEW_ALERT() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.NEW_ALERT, Parameters.NEW_ALERT)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property READ_ALERT() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.READ_ALERT, Parameters.READ_ALERT)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CURRENT_RCPT() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CURRENT_RCPT, Parameters.CURRENT_RCPT)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CURRENT_NOTIFY() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CURRENT_NOTIFY, Parameters.CURRENT_NOTIFY)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property


            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property ALERT_ID() As AggregateParameter
            Get
                If _ALERT_ID_W Is Nothing Then
                    _ALERT_ID_W = TearOff.ALERT_ID
                End If
                Return _ALERT_ID_W
            End Get
        End Property

        Public ReadOnly Property ALERT_RCPT_ID() As AggregateParameter
            Get
                If _ALERT_RCPT_ID_W Is Nothing Then
                    _ALERT_RCPT_ID_W = TearOff.ALERT_RCPT_ID
                End If
                Return _ALERT_RCPT_ID_W
            End Get
        End Property

        Public ReadOnly Property EMP_CODE() As AggregateParameter
            Get
                If _EMP_CODE_W Is Nothing Then
                    _EMP_CODE_W = TearOff.EMP_CODE
                End If
                Return _EMP_CODE_W
            End Get
        End Property

        Public ReadOnly Property EMAIL_ADDRESS() As AggregateParameter
            Get
                If _EMAIL_ADDRESS_W Is Nothing Then
                    _EMAIL_ADDRESS_W = TearOff.EMAIL_ADDRESS
                End If
                Return _EMAIL_ADDRESS_W
            End Get
        End Property

        Public ReadOnly Property PROCESSED() As AggregateParameter
            Get
                If _PROCESSED_W Is Nothing Then
                    _PROCESSED_W = TearOff.PROCESSED
                End If
                Return _PROCESSED_W
            End Get
        End Property

        Public ReadOnly Property NEW_ALERT() As AggregateParameter
            Get
                If _NEW_ALERT_W Is Nothing Then
                    _NEW_ALERT_W = TearOff.NEW_ALERT
                End If
                Return _NEW_ALERT_W
            End Get
        End Property

        Public ReadOnly Property READ_ALERT() As AggregateParameter
            Get
                If _READ_ALERT_W Is Nothing Then
                    _READ_ALERT_W = TearOff.READ_ALERT
                End If
                Return _READ_ALERT_W
            End Get
        End Property

        Public ReadOnly Property CURRENT_RCPT() As AggregateParameter
            Get
                If _CURRENT_RCPT_W Is Nothing Then
                    _CURRENT_RCPT_W = TearOff.CURRENT_RCPT
                End If
                Return _CURRENT_RCPT_W
            End Get
        End Property

        Public ReadOnly Property CURRENT_NOTIFY() As AggregateParameter
            Get
                If _CURRENT_NOTIFY_W Is Nothing Then
                    _CURRENT_NOTIFY_W = TearOff.CURRENT_NOTIFY
                End If
                Return _CURRENT_NOTIFY_W
            End Get
        End Property


        Private _ALERT_ID_W As AggregateParameter = Nothing
        Private _ALERT_RCPT_ID_W As AggregateParameter = Nothing
        Private _EMP_CODE_W As AggregateParameter = Nothing
        Private _EMAIL_ADDRESS_W As AggregateParameter = Nothing
        Private _PROCESSED_W As AggregateParameter = Nothing
        Private _NEW_ALERT_W As AggregateParameter = Nothing
        Private _READ_ALERT_W As AggregateParameter = Nothing
        Private _CURRENT_RCPT_W As AggregateParameter = Nothing
        Private _CURRENT_NOTIFY_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _ALERT_ID_W = Nothing
            _ALERT_RCPT_ID_W = Nothing
            _EMP_CODE_W = Nothing
            _EMAIL_ADDRESS_W = Nothing
            _PROCESSED_W = Nothing
            _NEW_ALERT_W = Nothing
            _READ_ALERT_W = Nothing
            _CURRENT_RCPT_W = Nothing
            _CURRENT_NOTIFY_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ALERT_RCPTInsert]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ALERT_RCPTUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ALERT_RCPTDelete]"

        Dim p As SqlParameter
        p = cmd.Parameters.Add(Parameters.ALERT_ID)
        p.SourceColumn = ColumnNames.ALERT_ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.ALERT_RCPT_ID)
        p.SourceColumn = ColumnNames.ALERT_RCPT_ID
        p.SourceVersion = DataRowVersion.Current


        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As SqlCommand)

        Dim p As SqlParameter
        p = cmd.Parameters.Add(Parameters.ALERT_ID)
        p.SourceColumn = ColumnNames.ALERT_ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.ALERT_RCPT_ID)
        p.SourceColumn = ColumnNames.ALERT_RCPT_ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.EMP_CODE)
        p.SourceColumn = ColumnNames.EMP_CODE
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.EMAIL_ADDRESS)
        p.SourceColumn = ColumnNames.EMAIL_ADDRESS
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.PROCESSED)
        p.SourceColumn = ColumnNames.PROCESSED
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.NEW_ALERT)
        p.SourceColumn = ColumnNames.NEW_ALERT
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.READ_ALERT)
        p.SourceColumn = ColumnNames.READ_ALERT
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.CURRENT_RCPT)
        p.SourceColumn = ColumnNames.CURRENT_RCPT
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.CURRENT_NOTIFY)
        p.SourceColumn = ColumnNames.CURRENT_NOTIFY
        p.SourceVersion = DataRowVersion.Current

    End Sub

End Class

