
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.3.0.1)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _CDP_CONTACT_HDR
	Inherits SqlClientEntity

		Public Sub New() 
			Me.QuerySource = "CDP_CONTACT_HDR"
			Me.MappingName = "CDP_CONTACT_HDR"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
		
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_CDP_CONTACT_HDRLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
	Public Overridable Function LoadByPrimaryKey(ByVal CDP_CONTACT_ID As Integer) As Boolean

		Dim parameters As ListDictionary = New ListDictionary()
		parameters.Add(_CDP_CONTACT_HDR.Parameters.CDP_CONTACT_ID, CDP_CONTACT_ID)

		
		Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_CDP_CONTACT_HDRLoadByPrimaryKey]", parameters)

	End Function

	#Region "Parameters"
	Protected class Parameters 
		
		Public Shared ReadOnly Property CDP_CONTACT_ID As SqlParameter
			Get
				Return New SqlParameter("@CDP_CONTACT_ID", SqlDbType.Int, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_CODE As SqlParameter
			Get
				Return New SqlParameter("@CONT_CODE", SqlDbType.VarChar, 6)
			End Get
		End Property
		
		Public Shared ReadOnly Property CL_CODE As SqlParameter
			Get
				Return New SqlParameter("@CL_CODE", SqlDbType.VarChar, 6)
			End Get
		End Property
		
		Public Shared ReadOnly Property EMAIL_ADDRESS As SqlParameter
			Get
				Return New SqlParameter("@EMAIL_ADDRESS", SqlDbType.VarChar, 50)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_FNAME As SqlParameter
			Get
				Return New SqlParameter("@CONT_FNAME", SqlDbType.VarChar, 30)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_LNAME As SqlParameter
			Get
				Return New SqlParameter("@CONT_LNAME", SqlDbType.VarChar, 30)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_MI As SqlParameter
			Get
				Return New SqlParameter("@CONT_MI", SqlDbType.VarChar, 1)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_TITLE As SqlParameter
			Get
				Return New SqlParameter("@CONT_TITLE", SqlDbType.VarChar, 40)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_ADDRESS1 As SqlParameter
			Get
				Return New SqlParameter("@CONT_ADDRESS1", SqlDbType.VarChar, 40)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_ADDRESS2 As SqlParameter
			Get
				Return New SqlParameter("@CONT_ADDRESS2", SqlDbType.VarChar, 40)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_CITY As SqlParameter
			Get
				Return New SqlParameter("@CONT_CITY", SqlDbType.VarChar, 20)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_COUNTY As SqlParameter
			Get
				Return New SqlParameter("@CONT_COUNTY", SqlDbType.VarChar, 20)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_STATE As SqlParameter
			Get
				Return New SqlParameter("@CONT_STATE", SqlDbType.VarChar, 10)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_COUNTRY As SqlParameter
			Get
				Return New SqlParameter("@CONT_COUNTRY", SqlDbType.VarChar, 20)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_ZIP As SqlParameter
			Get
				Return New SqlParameter("@CONT_ZIP", SqlDbType.VarChar, 10)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_TELEPHONE As SqlParameter
			Get
				Return New SqlParameter("@CONT_TELEPHONE", SqlDbType.VarChar, 13)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_EXTENTION As SqlParameter
			Get
				Return New SqlParameter("@CONT_EXTENTION", SqlDbType.VarChar, 4)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_FAX As SqlParameter
			Get
				Return New SqlParameter("@CONT_FAX", SqlDbType.VarChar, 13)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_FAX_EXTENTION As SqlParameter
			Get
				Return New SqlParameter("@CONT_FAX_EXTENTION", SqlDbType.VarChar, 4)
			End Get
		End Property
		
		Public Shared ReadOnly Property SCHEDULE_USER As SqlParameter
			Get
				Return New SqlParameter("@SCHEDULE_USER", SqlDbType.SmallInt, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property DEFAULT_TASK As SqlParameter
			Get
				Return New SqlParameter("@DEFAULT_TASK", SqlDbType.VarChar, 10)
			End Get
		End Property
		
		Public Shared ReadOnly Property CP_USER As SqlParameter
			Get
				Return New SqlParameter("@CP_USER", SqlDbType.SmallInt, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property CP_ALERTS As SqlParameter
			Get
				Return New SqlParameter("@CP_ALERTS", SqlDbType.SmallInt, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property EMAIL_RCPT As SqlParameter
			Get
				Return New SqlParameter("@EMAIL_RCPT", SqlDbType.SmallInt, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property TASK_PRIMARY As SqlParameter
			Get
				Return New SqlParameter("@TASK_PRIMARY", SqlDbType.SmallInt, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property INACTIVE_FLAG As SqlParameter
			Get
				Return New SqlParameter("@INACTIVE_FLAG", SqlDbType.SmallInt, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_FML As SqlParameter
			Get
				Return New SqlParameter("@CONT_FML", SqlDbType.VarChar, 64)
			End Get
		End Property
		
		Public Shared ReadOnly Property CONT_LF As SqlParameter
			Get
				Return New SqlParameter("@CONT_LF", SqlDbType.VarChar, 62)
			End Get
		End Property
		
	End Class
	#End Region	

	#Region "ColumnNames"
	Public class ColumnNames
		
        Public Const CDP_CONTACT_ID As String = "CDP_CONTACT_ID"
        Public Const CONT_CODE As String = "CONT_CODE"
        Public Const CL_CODE As String = "CL_CODE"
        Public Const EMAIL_ADDRESS As String = "EMAIL_ADDRESS"
        Public Const CONT_FNAME As String = "CONT_FNAME"
        Public Const CONT_LNAME As String = "CONT_LNAME"
        Public Const CONT_MI As String = "CONT_MI"
        Public Const CONT_TITLE As String = "CONT_TITLE"
        Public Const CONT_ADDRESS1 As String = "CONT_ADDRESS1"
        Public Const CONT_ADDRESS2 As String = "CONT_ADDRESS2"
        Public Const CONT_CITY As String = "CONT_CITY"
        Public Const CONT_COUNTY As String = "CONT_COUNTY"
        Public Const CONT_STATE As String = "CONT_STATE"
        Public Const CONT_COUNTRY As String = "CONT_COUNTRY"
        Public Const CONT_ZIP As String = "CONT_ZIP"
        Public Const CONT_TELEPHONE As String = "CONT_TELEPHONE"
        Public Const CONT_EXTENTION As String = "CONT_EXTENTION"
        Public Const CONT_FAX As String = "CONT_FAX"
        Public Const CONT_FAX_EXTENTION As String = "CONT_FAX_EXTENTION"
        Public Const SCHEDULE_USER As String = "SCHEDULE_USER"
        Public Const DEFAULT_TASK As String = "DEFAULT_TASK"
        Public Const CP_USER As String = "CP_USER"
        Public Const CP_ALERTS As String = "CP_ALERTS"
        Public Const EMAIL_RCPT As String = "EMAIL_RCPT"
        Public Const TASK_PRIMARY As String = "TASK_PRIMARY"
        Public Const INACTIVE_FLAG As String = "INACTIVE_FLAG"
        Public Const CONT_FML As String = "CONT_FML"
        Public Const CONT_LF As String = "CONT_LF"

		Shared Public Function ToPropertyName(ByVal columnName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(CDP_CONTACT_ID) = _CDP_CONTACT_HDR.PropertyNames.CDP_CONTACT_ID
				ht(CONT_CODE) = _CDP_CONTACT_HDR.PropertyNames.CONT_CODE
				ht(CL_CODE) = _CDP_CONTACT_HDR.PropertyNames.CL_CODE
				ht(EMAIL_ADDRESS) = _CDP_CONTACT_HDR.PropertyNames.EMAIL_ADDRESS
				ht(CONT_FNAME) = _CDP_CONTACT_HDR.PropertyNames.CONT_FNAME
				ht(CONT_LNAME) = _CDP_CONTACT_HDR.PropertyNames.CONT_LNAME
				ht(CONT_MI) = _CDP_CONTACT_HDR.PropertyNames.CONT_MI
				ht(CONT_TITLE) = _CDP_CONTACT_HDR.PropertyNames.CONT_TITLE
				ht(CONT_ADDRESS1) = _CDP_CONTACT_HDR.PropertyNames.CONT_ADDRESS1
				ht(CONT_ADDRESS2) = _CDP_CONTACT_HDR.PropertyNames.CONT_ADDRESS2
				ht(CONT_CITY) = _CDP_CONTACT_HDR.PropertyNames.CONT_CITY
				ht(CONT_COUNTY) = _CDP_CONTACT_HDR.PropertyNames.CONT_COUNTY
				ht(CONT_STATE) = _CDP_CONTACT_HDR.PropertyNames.CONT_STATE
				ht(CONT_COUNTRY) = _CDP_CONTACT_HDR.PropertyNames.CONT_COUNTRY
				ht(CONT_ZIP) = _CDP_CONTACT_HDR.PropertyNames.CONT_ZIP
				ht(CONT_TELEPHONE) = _CDP_CONTACT_HDR.PropertyNames.CONT_TELEPHONE
				ht(CONT_EXTENTION) = _CDP_CONTACT_HDR.PropertyNames.CONT_EXTENTION
				ht(CONT_FAX) = _CDP_CONTACT_HDR.PropertyNames.CONT_FAX
				ht(CONT_FAX_EXTENTION) = _CDP_CONTACT_HDR.PropertyNames.CONT_FAX_EXTENTION
				ht(SCHEDULE_USER) = _CDP_CONTACT_HDR.PropertyNames.SCHEDULE_USER
				ht(DEFAULT_TASK) = _CDP_CONTACT_HDR.PropertyNames.DEFAULT_TASK
				ht(CP_USER) = _CDP_CONTACT_HDR.PropertyNames.CP_USER
				ht(CP_ALERTS) = _CDP_CONTACT_HDR.PropertyNames.CP_ALERTS
				ht(EMAIL_RCPT) = _CDP_CONTACT_HDR.PropertyNames.EMAIL_RCPT
				ht(TASK_PRIMARY) = _CDP_CONTACT_HDR.PropertyNames.TASK_PRIMARY
				ht(INACTIVE_FLAG) = _CDP_CONTACT_HDR.PropertyNames.INACTIVE_FLAG
				ht(CONT_FML) = _CDP_CONTACT_HDR.PropertyNames.CONT_FML
				ht(CONT_LF) = _CDP_CONTACT_HDR.PropertyNames.CONT_LF

			End If
			
			Return CType(ht(columnName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing		 
	End Class
	#End Region	
	
	#Region "PropertyNames"
	Public class PropertyNames
		
        Public Const CDP_CONTACT_ID As String = "CDP_CONTACT_ID"
        Public Const CONT_CODE As String = "CONT_CODE"
        Public Const CL_CODE As String = "CL_CODE"
        Public Const EMAIL_ADDRESS As String = "EMAIL_ADDRESS"
        Public Const CONT_FNAME As String = "CONT_FNAME"
        Public Const CONT_LNAME As String = "CONT_LNAME"
        Public Const CONT_MI As String = "CONT_MI"
        Public Const CONT_TITLE As String = "CONT_TITLE"
        Public Const CONT_ADDRESS1 As String = "CONT_ADDRESS1"
        Public Const CONT_ADDRESS2 As String = "CONT_ADDRESS2"
        Public Const CONT_CITY As String = "CONT_CITY"
        Public Const CONT_COUNTY As String = "CONT_COUNTY"
        Public Const CONT_STATE As String = "CONT_STATE"
        Public Const CONT_COUNTRY As String = "CONT_COUNTRY"
        Public Const CONT_ZIP As String = "CONT_ZIP"
        Public Const CONT_TELEPHONE As String = "CONT_TELEPHONE"
        Public Const CONT_EXTENTION As String = "CONT_EXTENTION"
        Public Const CONT_FAX As String = "CONT_FAX"
        Public Const CONT_FAX_EXTENTION As String = "CONT_FAX_EXTENTION"
        Public Const SCHEDULE_USER As String = "SCHEDULE_USER"
        Public Const DEFAULT_TASK As String = "DEFAULT_TASK"
        Public Const CP_USER As String = "CP_USER"
        Public Const CP_ALERTS As String = "CP_ALERTS"
        Public Const EMAIL_RCPT As String = "EMAIL_RCPT"
        Public Const TASK_PRIMARY As String = "TASK_PRIMARY"
        Public Const INACTIVE_FLAG As String = "INACTIVE_FLAG"
        Public Const CONT_FML As String = "CONT_FML"
        Public Const CONT_LF As String = "CONT_LF"

		Shared Public Function ToColumnName(ByVal propertyName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(CDP_CONTACT_ID) = _CDP_CONTACT_HDR.ColumnNames.CDP_CONTACT_ID
				ht(CONT_CODE) = _CDP_CONTACT_HDR.ColumnNames.CONT_CODE
				ht(CL_CODE) = _CDP_CONTACT_HDR.ColumnNames.CL_CODE
				ht(EMAIL_ADDRESS) = _CDP_CONTACT_HDR.ColumnNames.EMAIL_ADDRESS
				ht(CONT_FNAME) = _CDP_CONTACT_HDR.ColumnNames.CONT_FNAME
				ht(CONT_LNAME) = _CDP_CONTACT_HDR.ColumnNames.CONT_LNAME
				ht(CONT_MI) = _CDP_CONTACT_HDR.ColumnNames.CONT_MI
				ht(CONT_TITLE) = _CDP_CONTACT_HDR.ColumnNames.CONT_TITLE
				ht(CONT_ADDRESS1) = _CDP_CONTACT_HDR.ColumnNames.CONT_ADDRESS1
				ht(CONT_ADDRESS2) = _CDP_CONTACT_HDR.ColumnNames.CONT_ADDRESS2
				ht(CONT_CITY) = _CDP_CONTACT_HDR.ColumnNames.CONT_CITY
				ht(CONT_COUNTY) = _CDP_CONTACT_HDR.ColumnNames.CONT_COUNTY
				ht(CONT_STATE) = _CDP_CONTACT_HDR.ColumnNames.CONT_STATE
				ht(CONT_COUNTRY) = _CDP_CONTACT_HDR.ColumnNames.CONT_COUNTRY
				ht(CONT_ZIP) = _CDP_CONTACT_HDR.ColumnNames.CONT_ZIP
				ht(CONT_TELEPHONE) = _CDP_CONTACT_HDR.ColumnNames.CONT_TELEPHONE
				ht(CONT_EXTENTION) = _CDP_CONTACT_HDR.ColumnNames.CONT_EXTENTION
				ht(CONT_FAX) = _CDP_CONTACT_HDR.ColumnNames.CONT_FAX
				ht(CONT_FAX_EXTENTION) = _CDP_CONTACT_HDR.ColumnNames.CONT_FAX_EXTENTION
				ht(SCHEDULE_USER) = _CDP_CONTACT_HDR.ColumnNames.SCHEDULE_USER
				ht(DEFAULT_TASK) = _CDP_CONTACT_HDR.ColumnNames.DEFAULT_TASK
				ht(CP_USER) = _CDP_CONTACT_HDR.ColumnNames.CP_USER
				ht(CP_ALERTS) = _CDP_CONTACT_HDR.ColumnNames.CP_ALERTS
				ht(EMAIL_RCPT) = _CDP_CONTACT_HDR.ColumnNames.EMAIL_RCPT
				ht(TASK_PRIMARY) = _CDP_CONTACT_HDR.ColumnNames.TASK_PRIMARY
				ht(INACTIVE_FLAG) = _CDP_CONTACT_HDR.ColumnNames.INACTIVE_FLAG
				ht(CONT_FML) = _CDP_CONTACT_HDR.ColumnNames.CONT_FML
				ht(CONT_LF) = _CDP_CONTACT_HDR.ColumnNames.CONT_LF

			End If
			
			Return CType(ht(propertyName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing
		
	End Class
	#End Region	
	
	#Region "StringPropertyNames"
	Public class StringPropertyNames
		
        Public Const CDP_CONTACT_ID As String = "s_CDP_CONTACT_ID"
        Public Const CONT_CODE As String = "s_CONT_CODE"
        Public Const CL_CODE As String = "s_CL_CODE"
        Public Const EMAIL_ADDRESS As String = "s_EMAIL_ADDRESS"
        Public Const CONT_FNAME As String = "s_CONT_FNAME"
        Public Const CONT_LNAME As String = "s_CONT_LNAME"
        Public Const CONT_MI As String = "s_CONT_MI"
        Public Const CONT_TITLE As String = "s_CONT_TITLE"
        Public Const CONT_ADDRESS1 As String = "s_CONT_ADDRESS1"
        Public Const CONT_ADDRESS2 As String = "s_CONT_ADDRESS2"
        Public Const CONT_CITY As String = "s_CONT_CITY"
        Public Const CONT_COUNTY As String = "s_CONT_COUNTY"
        Public Const CONT_STATE As String = "s_CONT_STATE"
        Public Const CONT_COUNTRY As String = "s_CONT_COUNTRY"
        Public Const CONT_ZIP As String = "s_CONT_ZIP"
        Public Const CONT_TELEPHONE As String = "s_CONT_TELEPHONE"
        Public Const CONT_EXTENTION As String = "s_CONT_EXTENTION"
        Public Const CONT_FAX As String = "s_CONT_FAX"
        Public Const CONT_FAX_EXTENTION As String = "s_CONT_FAX_EXTENTION"
        Public Const SCHEDULE_USER As String = "s_SCHEDULE_USER"
        Public Const DEFAULT_TASK As String = "s_DEFAULT_TASK"
        Public Const CP_USER As String = "s_CP_USER"
        Public Const CP_ALERTS As String = "s_CP_ALERTS"
        Public Const EMAIL_RCPT As String = "s_EMAIL_RCPT"
        Public Const TASK_PRIMARY As String = "s_TASK_PRIMARY"
        Public Const INACTIVE_FLAG As String = "s_INACTIVE_FLAG"
        Public Const CONT_FML As String = "s_CONT_FML"
        Public Const CONT_LF As String = "s_CONT_LF"

	End Class
	#End Region		
	
	#Region "Properties" 
		Public Overridable Property CDP_CONTACT_ID As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.CDP_CONTACT_ID)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.CDP_CONTACT_ID, Value)
			End Set
		End Property

		Public Overridable Property CONT_CODE As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_CODE)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_CODE, Value)
			End Set
		End Property

		Public Overridable Property CL_CODE As String
			Get
				Return MyBase.GetString(ColumnNames.CL_CODE)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CL_CODE, Value)
			End Set
		End Property

		Public Overridable Property EMAIL_ADDRESS As String
			Get
				Return MyBase.GetString(ColumnNames.EMAIL_ADDRESS)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.EMAIL_ADDRESS, Value)
			End Set
		End Property

		Public Overridable Property CONT_FNAME As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_FNAME)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_FNAME, Value)
			End Set
		End Property

		Public Overridable Property CONT_LNAME As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_LNAME)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_LNAME, Value)
			End Set
		End Property

		Public Overridable Property CONT_MI As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_MI)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_MI, Value)
			End Set
		End Property

		Public Overridable Property CONT_TITLE As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_TITLE)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_TITLE, Value)
			End Set
		End Property

		Public Overridable Property CONT_ADDRESS1 As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_ADDRESS1)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_ADDRESS1, Value)
			End Set
		End Property

		Public Overridable Property CONT_ADDRESS2 As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_ADDRESS2)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_ADDRESS2, Value)
			End Set
		End Property

		Public Overridable Property CONT_CITY As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_CITY)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_CITY, Value)
			End Set
		End Property

		Public Overridable Property CONT_COUNTY As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_COUNTY)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_COUNTY, Value)
			End Set
		End Property

		Public Overridable Property CONT_STATE As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_STATE)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_STATE, Value)
			End Set
		End Property

		Public Overridable Property CONT_COUNTRY As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_COUNTRY)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_COUNTRY, Value)
			End Set
		End Property

		Public Overridable Property CONT_ZIP As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_ZIP)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_ZIP, Value)
			End Set
		End Property

		Public Overridable Property CONT_TELEPHONE As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_TELEPHONE)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_TELEPHONE, Value)
			End Set
		End Property

		Public Overridable Property CONT_EXTENTION As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_EXTENTION)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_EXTENTION, Value)
			End Set
		End Property

		Public Overridable Property CONT_FAX As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_FAX)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_FAX, Value)
			End Set
		End Property

		Public Overridable Property CONT_FAX_EXTENTION As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_FAX_EXTENTION)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.CONT_FAX_EXTENTION, Value)
			End Set
		End Property

		Public Overridable Property SCHEDULE_USER As Short
			Get
				Return MyBase.GetShort(ColumnNames.SCHEDULE_USER)
			End Get
			Set(ByVal Value As Short)
				MyBase.SetShort(ColumnNames.SCHEDULE_USER, Value)
			End Set
		End Property

		Public Overridable Property DEFAULT_TASK As String
			Get
				Return MyBase.GetString(ColumnNames.DEFAULT_TASK)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.DEFAULT_TASK, Value)
			End Set
		End Property

		Public Overridable Property CP_USER As Short
			Get
				Return MyBase.GetShort(ColumnNames.CP_USER)
			End Get
			Set(ByVal Value As Short)
				MyBase.SetShort(ColumnNames.CP_USER, Value)
			End Set
		End Property

		Public Overridable Property CP_ALERTS As Short
			Get
				Return MyBase.GetShort(ColumnNames.CP_ALERTS)
			End Get
			Set(ByVal Value As Short)
				MyBase.SetShort(ColumnNames.CP_ALERTS, Value)
			End Set
		End Property

		Public Overridable Property EMAIL_RCPT As Short
			Get
				Return MyBase.GetShort(ColumnNames.EMAIL_RCPT)
			End Get
			Set(ByVal Value As Short)
				MyBase.SetShort(ColumnNames.EMAIL_RCPT, Value)
			End Set
		End Property

		Public Overridable Property TASK_PRIMARY As Short
			Get
				Return MyBase.GetShort(ColumnNames.TASK_PRIMARY)
			End Get
			Set(ByVal Value As Short)
				MyBase.SetShort(ColumnNames.TASK_PRIMARY, Value)
			End Set
		End Property

		Public Overridable Property INACTIVE_FLAG As Short
			Get
				Return MyBase.GetShort(ColumnNames.INACTIVE_FLAG)
			End Get
			Set(ByVal Value As Short)
				MyBase.SetShort(ColumnNames.INACTIVE_FLAG, Value)
			End Set
		End Property

		Public Overridable ReadOnly Property CONT_FML As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_FML)
			End Get
		End Property

		Public Overridable ReadOnly Property CONT_LF As String
			Get
				Return MyBase.GetString(ColumnNames.CONT_LF)
			End Get
		End Property


	#End Region  
	
	#Region "String Properties" 

		Public Overridable Property s_CDP_CONTACT_ID As String
			Get
				If Me.IsColumnNull(ColumnNames.CDP_CONTACT_ID) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.CDP_CONTACT_ID)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CDP_CONTACT_ID)
				Else
					Me.CDP_CONTACT_ID = MyBase.SetIntegerAsString(ColumnNames.CDP_CONTACT_ID, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_CODE As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_CODE) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_CODE)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_CODE)
				Else
					Me.CONT_CODE = MyBase.SetStringAsString(ColumnNames.CONT_CODE, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CL_CODE As String
			Get
				If Me.IsColumnNull(ColumnNames.CL_CODE) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CL_CODE)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CL_CODE)
				Else
					Me.CL_CODE = MyBase.SetStringAsString(ColumnNames.CL_CODE, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_EMAIL_ADDRESS As String
			Get
				If Me.IsColumnNull(ColumnNames.EMAIL_ADDRESS) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.EMAIL_ADDRESS)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.EMAIL_ADDRESS)
				Else
					Me.EMAIL_ADDRESS = MyBase.SetStringAsString(ColumnNames.EMAIL_ADDRESS, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_FNAME As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_FNAME) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_FNAME)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_FNAME)
				Else
					Me.CONT_FNAME = MyBase.SetStringAsString(ColumnNames.CONT_FNAME, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_LNAME As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_LNAME) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_LNAME)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_LNAME)
				Else
					Me.CONT_LNAME = MyBase.SetStringAsString(ColumnNames.CONT_LNAME, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_MI As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_MI) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_MI)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_MI)
				Else
					Me.CONT_MI = MyBase.SetStringAsString(ColumnNames.CONT_MI, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_TITLE As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_TITLE) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_TITLE)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_TITLE)
				Else
					Me.CONT_TITLE = MyBase.SetStringAsString(ColumnNames.CONT_TITLE, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_ADDRESS1 As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_ADDRESS1) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_ADDRESS1)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_ADDRESS1)
				Else
					Me.CONT_ADDRESS1 = MyBase.SetStringAsString(ColumnNames.CONT_ADDRESS1, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_ADDRESS2 As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_ADDRESS2) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_ADDRESS2)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_ADDRESS2)
				Else
					Me.CONT_ADDRESS2 = MyBase.SetStringAsString(ColumnNames.CONT_ADDRESS2, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_CITY As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_CITY) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_CITY)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_CITY)
				Else
					Me.CONT_CITY = MyBase.SetStringAsString(ColumnNames.CONT_CITY, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_COUNTY As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_COUNTY) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_COUNTY)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_COUNTY)
				Else
					Me.CONT_COUNTY = MyBase.SetStringAsString(ColumnNames.CONT_COUNTY, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_STATE As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_STATE) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_STATE)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_STATE)
				Else
					Me.CONT_STATE = MyBase.SetStringAsString(ColumnNames.CONT_STATE, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_COUNTRY As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_COUNTRY) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_COUNTRY)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_COUNTRY)
				Else
					Me.CONT_COUNTRY = MyBase.SetStringAsString(ColumnNames.CONT_COUNTRY, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_ZIP As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_ZIP) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_ZIP)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_ZIP)
				Else
					Me.CONT_ZIP = MyBase.SetStringAsString(ColumnNames.CONT_ZIP, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_TELEPHONE As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_TELEPHONE) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_TELEPHONE)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_TELEPHONE)
				Else
					Me.CONT_TELEPHONE = MyBase.SetStringAsString(ColumnNames.CONT_TELEPHONE, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_EXTENTION As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_EXTENTION) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_EXTENTION)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_EXTENTION)
				Else
					Me.CONT_EXTENTION = MyBase.SetStringAsString(ColumnNames.CONT_EXTENTION, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_FAX As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_FAX) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_FAX)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_FAX)
				Else
					Me.CONT_FAX = MyBase.SetStringAsString(ColumnNames.CONT_FAX, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CONT_FAX_EXTENTION As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_FAX_EXTENTION) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_FAX_EXTENTION)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CONT_FAX_EXTENTION)
				Else
					Me.CONT_FAX_EXTENTION = MyBase.SetStringAsString(ColumnNames.CONT_FAX_EXTENTION, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_SCHEDULE_USER As String
			Get
				If Me.IsColumnNull(ColumnNames.SCHEDULE_USER) Then
					Return String.Empty
				Else
					Return MyBase.GetShortAsString(ColumnNames.SCHEDULE_USER)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.SCHEDULE_USER)
				Else
					Me.SCHEDULE_USER = MyBase.SetShortAsString(ColumnNames.SCHEDULE_USER, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_DEFAULT_TASK As String
			Get
				If Me.IsColumnNull(ColumnNames.DEFAULT_TASK) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.DEFAULT_TASK)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.DEFAULT_TASK)
				Else
					Me.DEFAULT_TASK = MyBase.SetStringAsString(ColumnNames.DEFAULT_TASK, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CP_USER As String
			Get
				If Me.IsColumnNull(ColumnNames.CP_USER) Then
					Return String.Empty
				Else
					Return MyBase.GetShortAsString(ColumnNames.CP_USER)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CP_USER)
				Else
					Me.CP_USER = MyBase.SetShortAsString(ColumnNames.CP_USER, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_CP_ALERTS As String
			Get
				If Me.IsColumnNull(ColumnNames.CP_ALERTS) Then
					Return String.Empty
				Else
					Return MyBase.GetShortAsString(ColumnNames.CP_ALERTS)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.CP_ALERTS)
				Else
					Me.CP_ALERTS = MyBase.SetShortAsString(ColumnNames.CP_ALERTS, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_EMAIL_RCPT As String
			Get
				If Me.IsColumnNull(ColumnNames.EMAIL_RCPT) Then
					Return String.Empty
				Else
					Return MyBase.GetShortAsString(ColumnNames.EMAIL_RCPT)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.EMAIL_RCPT)
				Else
					Me.EMAIL_RCPT = MyBase.SetShortAsString(ColumnNames.EMAIL_RCPT, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_TASK_PRIMARY As String
			Get
				If Me.IsColumnNull(ColumnNames.TASK_PRIMARY) Then
					Return String.Empty
				Else
					Return MyBase.GetShortAsString(ColumnNames.TASK_PRIMARY)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.TASK_PRIMARY)
				Else
					Me.TASK_PRIMARY = MyBase.SetShortAsString(ColumnNames.TASK_PRIMARY, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_INACTIVE_FLAG As String
			Get
				If Me.IsColumnNull(ColumnNames.INACTIVE_FLAG) Then
					Return String.Empty
				Else
					Return MyBase.GetShortAsString(ColumnNames.INACTIVE_FLAG)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.INACTIVE_FLAG)
				Else
					Me.INACTIVE_FLAG = MyBase.SetShortAsString(ColumnNames.INACTIVE_FLAG, Value)
				End If
			End Set
		End Property

		Public Overridable ReadOnly Property s_CONT_FML As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_FML) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_FML)
				End If
			End Get
		End Property

		Public Overridable ReadOnly Property s_CONT_LF As String
			Get
				If Me.IsColumnNull(ColumnNames.CONT_LF) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.CONT_LF)
				End If
			End Get
		End Property


	#End Region  	

	#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "TearOff's"
		Public class TearOffWhereParameter

			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub
		
	
			Public ReadOnly Property CDP_CONTACT_ID() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CDP_CONTACT_ID, Parameters.CDP_CONTACT_ID)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_CODE() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_CODE, Parameters.CONT_CODE)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CL_CODE() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CL_CODE, Parameters.CL_CODE)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property EMAIL_ADDRESS() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.EMAIL_ADDRESS, Parameters.EMAIL_ADDRESS)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_FNAME() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_FNAME, Parameters.CONT_FNAME)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_LNAME() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_LNAME, Parameters.CONT_LNAME)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_MI() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_MI, Parameters.CONT_MI)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_TITLE() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_TITLE, Parameters.CONT_TITLE)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_ADDRESS1() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_ADDRESS1, Parameters.CONT_ADDRESS1)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_ADDRESS2() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_ADDRESS2, Parameters.CONT_ADDRESS2)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_CITY() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_CITY, Parameters.CONT_CITY)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_COUNTY() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_COUNTY, Parameters.CONT_COUNTY)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_STATE() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_STATE, Parameters.CONT_STATE)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_COUNTRY() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_COUNTRY, Parameters.CONT_COUNTRY)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_ZIP() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_ZIP, Parameters.CONT_ZIP)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_TELEPHONE() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_TELEPHONE, Parameters.CONT_TELEPHONE)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_EXTENTION() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_EXTENTION, Parameters.CONT_EXTENTION)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_FAX() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_FAX, Parameters.CONT_FAX)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_FAX_EXTENTION() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_FAX_EXTENTION, Parameters.CONT_FAX_EXTENTION)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property SCHEDULE_USER() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.SCHEDULE_USER, Parameters.SCHEDULE_USER)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property DEFAULT_TASK() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.DEFAULT_TASK, Parameters.DEFAULT_TASK)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CP_USER() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CP_USER, Parameters.CP_USER)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CP_ALERTS() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CP_ALERTS, Parameters.CP_ALERTS)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property EMAIL_RCPT() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.EMAIL_RCPT, Parameters.EMAIL_RCPT)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property TASK_PRIMARY() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.TASK_PRIMARY, Parameters.TASK_PRIMARY)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property INACTIVE_FLAG() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.INACTIVE_FLAG, Parameters.INACTIVE_FLAG)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_FML() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_FML, Parameters.CONT_FML)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property CONT_LF() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.CONT_LF, Parameters.CONT_LF)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property


			Private _clause as WhereClause
		End Class
		#End Region	

		Public ReadOnly Property CDP_CONTACT_ID() As WhereParameter 
			Get
				If _CDP_CONTACT_ID_W Is Nothing Then
					_CDP_CONTACT_ID_W = TearOff.CDP_CONTACT_ID
				End If
				Return _CDP_CONTACT_ID_W
			End Get
		End Property

		Public ReadOnly Property CONT_CODE() As WhereParameter 
			Get
				If _CONT_CODE_W Is Nothing Then
					_CONT_CODE_W = TearOff.CONT_CODE
				End If
				Return _CONT_CODE_W
			End Get
		End Property

		Public ReadOnly Property CL_CODE() As WhereParameter 
			Get
				If _CL_CODE_W Is Nothing Then
					_CL_CODE_W = TearOff.CL_CODE
				End If
				Return _CL_CODE_W
			End Get
		End Property

		Public ReadOnly Property EMAIL_ADDRESS() As WhereParameter 
			Get
				If _EMAIL_ADDRESS_W Is Nothing Then
					_EMAIL_ADDRESS_W = TearOff.EMAIL_ADDRESS
				End If
				Return _EMAIL_ADDRESS_W
			End Get
		End Property

		Public ReadOnly Property CONT_FNAME() As WhereParameter 
			Get
				If _CONT_FNAME_W Is Nothing Then
					_CONT_FNAME_W = TearOff.CONT_FNAME
				End If
				Return _CONT_FNAME_W
			End Get
		End Property

		Public ReadOnly Property CONT_LNAME() As WhereParameter 
			Get
				If _CONT_LNAME_W Is Nothing Then
					_CONT_LNAME_W = TearOff.CONT_LNAME
				End If
				Return _CONT_LNAME_W
			End Get
		End Property

		Public ReadOnly Property CONT_MI() As WhereParameter 
			Get
				If _CONT_MI_W Is Nothing Then
					_CONT_MI_W = TearOff.CONT_MI
				End If
				Return _CONT_MI_W
			End Get
		End Property

		Public ReadOnly Property CONT_TITLE() As WhereParameter 
			Get
				If _CONT_TITLE_W Is Nothing Then
					_CONT_TITLE_W = TearOff.CONT_TITLE
				End If
				Return _CONT_TITLE_W
			End Get
		End Property

		Public ReadOnly Property CONT_ADDRESS1() As WhereParameter 
			Get
				If _CONT_ADDRESS1_W Is Nothing Then
					_CONT_ADDRESS1_W = TearOff.CONT_ADDRESS1
				End If
				Return _CONT_ADDRESS1_W
			End Get
		End Property

		Public ReadOnly Property CONT_ADDRESS2() As WhereParameter 
			Get
				If _CONT_ADDRESS2_W Is Nothing Then
					_CONT_ADDRESS2_W = TearOff.CONT_ADDRESS2
				End If
				Return _CONT_ADDRESS2_W
			End Get
		End Property

		Public ReadOnly Property CONT_CITY() As WhereParameter 
			Get
				If _CONT_CITY_W Is Nothing Then
					_CONT_CITY_W = TearOff.CONT_CITY
				End If
				Return _CONT_CITY_W
			End Get
		End Property

		Public ReadOnly Property CONT_COUNTY() As WhereParameter 
			Get
				If _CONT_COUNTY_W Is Nothing Then
					_CONT_COUNTY_W = TearOff.CONT_COUNTY
				End If
				Return _CONT_COUNTY_W
			End Get
		End Property

		Public ReadOnly Property CONT_STATE() As WhereParameter 
			Get
				If _CONT_STATE_W Is Nothing Then
					_CONT_STATE_W = TearOff.CONT_STATE
				End If
				Return _CONT_STATE_W
			End Get
		End Property

		Public ReadOnly Property CONT_COUNTRY() As WhereParameter 
			Get
				If _CONT_COUNTRY_W Is Nothing Then
					_CONT_COUNTRY_W = TearOff.CONT_COUNTRY
				End If
				Return _CONT_COUNTRY_W
			End Get
		End Property

		Public ReadOnly Property CONT_ZIP() As WhereParameter 
			Get
				If _CONT_ZIP_W Is Nothing Then
					_CONT_ZIP_W = TearOff.CONT_ZIP
				End If
				Return _CONT_ZIP_W
			End Get
		End Property

		Public ReadOnly Property CONT_TELEPHONE() As WhereParameter 
			Get
				If _CONT_TELEPHONE_W Is Nothing Then
					_CONT_TELEPHONE_W = TearOff.CONT_TELEPHONE
				End If
				Return _CONT_TELEPHONE_W
			End Get
		End Property

		Public ReadOnly Property CONT_EXTENTION() As WhereParameter 
			Get
				If _CONT_EXTENTION_W Is Nothing Then
					_CONT_EXTENTION_W = TearOff.CONT_EXTENTION
				End If
				Return _CONT_EXTENTION_W
			End Get
		End Property

		Public ReadOnly Property CONT_FAX() As WhereParameter 
			Get
				If _CONT_FAX_W Is Nothing Then
					_CONT_FAX_W = TearOff.CONT_FAX
				End If
				Return _CONT_FAX_W
			End Get
		End Property

		Public ReadOnly Property CONT_FAX_EXTENTION() As WhereParameter 
			Get
				If _CONT_FAX_EXTENTION_W Is Nothing Then
					_CONT_FAX_EXTENTION_W = TearOff.CONT_FAX_EXTENTION
				End If
				Return _CONT_FAX_EXTENTION_W
			End Get
		End Property

		Public ReadOnly Property SCHEDULE_USER() As WhereParameter 
			Get
				If _SCHEDULE_USER_W Is Nothing Then
					_SCHEDULE_USER_W = TearOff.SCHEDULE_USER
				End If
				Return _SCHEDULE_USER_W
			End Get
		End Property

		Public ReadOnly Property DEFAULT_TASK() As WhereParameter 
			Get
				If _DEFAULT_TASK_W Is Nothing Then
					_DEFAULT_TASK_W = TearOff.DEFAULT_TASK
				End If
				Return _DEFAULT_TASK_W
			End Get
		End Property

		Public ReadOnly Property CP_USER() As WhereParameter 
			Get
				If _CP_USER_W Is Nothing Then
					_CP_USER_W = TearOff.CP_USER
				End If
				Return _CP_USER_W
			End Get
		End Property

		Public ReadOnly Property CP_ALERTS() As WhereParameter 
			Get
				If _CP_ALERTS_W Is Nothing Then
					_CP_ALERTS_W = TearOff.CP_ALERTS
				End If
				Return _CP_ALERTS_W
			End Get
		End Property

		Public ReadOnly Property EMAIL_RCPT() As WhereParameter 
			Get
				If _EMAIL_RCPT_W Is Nothing Then
					_EMAIL_RCPT_W = TearOff.EMAIL_RCPT
				End If
				Return _EMAIL_RCPT_W
			End Get
		End Property

		Public ReadOnly Property TASK_PRIMARY() As WhereParameter 
			Get
				If _TASK_PRIMARY_W Is Nothing Then
					_TASK_PRIMARY_W = TearOff.TASK_PRIMARY
				End If
				Return _TASK_PRIMARY_W
			End Get
		End Property

		Public ReadOnly Property INACTIVE_FLAG() As WhereParameter 
			Get
				If _INACTIVE_FLAG_W Is Nothing Then
					_INACTIVE_FLAG_W = TearOff.INACTIVE_FLAG
				End If
				Return _INACTIVE_FLAG_W
			End Get
		End Property

		Public ReadOnly Property CONT_FML() As WhereParameter 
			Get
				If _CONT_FML_W Is Nothing Then
					_CONT_FML_W = TearOff.CONT_FML
				End If
				Return _CONT_FML_W
			End Get
		End Property

		Public ReadOnly Property CONT_LF() As WhereParameter 
			Get
				If _CONT_LF_W Is Nothing Then
					_CONT_LF_W = TearOff.CONT_LF
				End If
				Return _CONT_LF_W
			End Get
		End Property

		Private _CDP_CONTACT_ID_W As WhereParameter = Nothing
		Private _CONT_CODE_W As WhereParameter = Nothing
		Private _CL_CODE_W As WhereParameter = Nothing
		Private _EMAIL_ADDRESS_W As WhereParameter = Nothing
		Private _CONT_FNAME_W As WhereParameter = Nothing
		Private _CONT_LNAME_W As WhereParameter = Nothing
		Private _CONT_MI_W As WhereParameter = Nothing
		Private _CONT_TITLE_W As WhereParameter = Nothing
		Private _CONT_ADDRESS1_W As WhereParameter = Nothing
		Private _CONT_ADDRESS2_W As WhereParameter = Nothing
		Private _CONT_CITY_W As WhereParameter = Nothing
		Private _CONT_COUNTY_W As WhereParameter = Nothing
		Private _CONT_STATE_W As WhereParameter = Nothing
		Private _CONT_COUNTRY_W As WhereParameter = Nothing
		Private _CONT_ZIP_W As WhereParameter = Nothing
		Private _CONT_TELEPHONE_W As WhereParameter = Nothing
		Private _CONT_EXTENTION_W As WhereParameter = Nothing
		Private _CONT_FAX_W As WhereParameter = Nothing
		Private _CONT_FAX_EXTENTION_W As WhereParameter = Nothing
		Private _SCHEDULE_USER_W As WhereParameter = Nothing
		Private _DEFAULT_TASK_W As WhereParameter = Nothing
		Private _CP_USER_W As WhereParameter = Nothing
		Private _CP_ALERTS_W As WhereParameter = Nothing
		Private _EMAIL_RCPT_W As WhereParameter = Nothing
		Private _TASK_PRIMARY_W As WhereParameter = Nothing
		Private _INACTIVE_FLAG_W As WhereParameter = Nothing
		Private _CONT_FML_W As WhereParameter = Nothing
		Private _CONT_LF_W As WhereParameter = Nothing

			Public Sub WhereClauseReset()

			_CDP_CONTACT_ID_W = Nothing
			_CONT_CODE_W = Nothing
			_CL_CODE_W = Nothing
			_EMAIL_ADDRESS_W = Nothing
			_CONT_FNAME_W = Nothing
			_CONT_LNAME_W = Nothing
			_CONT_MI_W = Nothing
			_CONT_TITLE_W = Nothing
			_CONT_ADDRESS1_W = Nothing
			_CONT_ADDRESS2_W = Nothing
			_CONT_CITY_W = Nothing
			_CONT_COUNTY_W = Nothing
			_CONT_STATE_W = Nothing
			_CONT_COUNTRY_W = Nothing
			_CONT_ZIP_W = Nothing
			_CONT_TELEPHONE_W = Nothing
			_CONT_EXTENTION_W = Nothing
			_CONT_FAX_W = Nothing
			_CONT_FAX_EXTENTION_W = Nothing
			_SCHEDULE_USER_W = Nothing
			_DEFAULT_TASK_W = Nothing
			_CP_USER_W = Nothing
			_CP_ALERTS_W = Nothing
			_EMAIL_RCPT_W = Nothing
			_TASK_PRIMARY_W = Nothing
			_INACTIVE_FLAG_W = Nothing
			_CONT_FML_W = Nothing
			_CONT_LF_W = Nothing
				Me._entity.Query.FlushWhereParameters()

			End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "AggregateParameter TearOff's"
		Public class TearOffAggregateParameter

			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub
		
	
		Public ReadOnly Property CDP_CONTACT_ID() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CDP_CONTACT_ID, Parameters.CDP_CONTACT_ID)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_CODE() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_CODE, Parameters.CONT_CODE)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CL_CODE() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CL_CODE, Parameters.CL_CODE)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property EMAIL_ADDRESS() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMAIL_ADDRESS, Parameters.EMAIL_ADDRESS)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_FNAME() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_FNAME, Parameters.CONT_FNAME)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_LNAME() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_LNAME, Parameters.CONT_LNAME)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_MI() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_MI, Parameters.CONT_MI)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_TITLE() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_TITLE, Parameters.CONT_TITLE)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_ADDRESS1() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_ADDRESS1, Parameters.CONT_ADDRESS1)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_ADDRESS2() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_ADDRESS2, Parameters.CONT_ADDRESS2)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_CITY() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_CITY, Parameters.CONT_CITY)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_COUNTY() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_COUNTY, Parameters.CONT_COUNTY)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_STATE() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_STATE, Parameters.CONT_STATE)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_COUNTRY() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_COUNTRY, Parameters.CONT_COUNTRY)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_ZIP() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_ZIP, Parameters.CONT_ZIP)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_TELEPHONE() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_TELEPHONE, Parameters.CONT_TELEPHONE)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_EXTENTION() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_EXTENTION, Parameters.CONT_EXTENTION)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_FAX() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_FAX, Parameters.CONT_FAX)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_FAX_EXTENTION() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_FAX_EXTENTION, Parameters.CONT_FAX_EXTENTION)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property SCHEDULE_USER() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.SCHEDULE_USER, Parameters.SCHEDULE_USER)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property DEFAULT_TASK() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DEFAULT_TASK, Parameters.DEFAULT_TASK)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CP_USER() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CP_USER, Parameters.CP_USER)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CP_ALERTS() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CP_ALERTS, Parameters.CP_ALERTS)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property EMAIL_RCPT() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMAIL_RCPT, Parameters.EMAIL_RCPT)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property TASK_PRIMARY() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.TASK_PRIMARY, Parameters.TASK_PRIMARY)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property INACTIVE_FLAG() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.INACTIVE_FLAG, Parameters.INACTIVE_FLAG)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_FML() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_FML, Parameters.CONT_FML)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property CONT_LF() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CONT_LF, Parameters.CONT_LF)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property


			Private _clause as AggregateClause
		End Class
		#End Region	

		Public ReadOnly Property CDP_CONTACT_ID() As AggregateParameter 
			Get
				If _CDP_CONTACT_ID_W Is Nothing Then
					_CDP_CONTACT_ID_W = TearOff.CDP_CONTACT_ID
				End If
				Return _CDP_CONTACT_ID_W
			End Get
		End Property

		Public ReadOnly Property CONT_CODE() As AggregateParameter 
			Get
				If _CONT_CODE_W Is Nothing Then
					_CONT_CODE_W = TearOff.CONT_CODE
				End If
				Return _CONT_CODE_W
			End Get
		End Property

		Public ReadOnly Property CL_CODE() As AggregateParameter 
			Get
				If _CL_CODE_W Is Nothing Then
					_CL_CODE_W = TearOff.CL_CODE
				End If
				Return _CL_CODE_W
			End Get
		End Property

		Public ReadOnly Property EMAIL_ADDRESS() As AggregateParameter 
			Get
				If _EMAIL_ADDRESS_W Is Nothing Then
					_EMAIL_ADDRESS_W = TearOff.EMAIL_ADDRESS
				End If
				Return _EMAIL_ADDRESS_W
			End Get
		End Property

		Public ReadOnly Property CONT_FNAME() As AggregateParameter 
			Get
				If _CONT_FNAME_W Is Nothing Then
					_CONT_FNAME_W = TearOff.CONT_FNAME
				End If
				Return _CONT_FNAME_W
			End Get
		End Property

		Public ReadOnly Property CONT_LNAME() As AggregateParameter 
			Get
				If _CONT_LNAME_W Is Nothing Then
					_CONT_LNAME_W = TearOff.CONT_LNAME
				End If
				Return _CONT_LNAME_W
			End Get
		End Property

		Public ReadOnly Property CONT_MI() As AggregateParameter 
			Get
				If _CONT_MI_W Is Nothing Then
					_CONT_MI_W = TearOff.CONT_MI
				End If
				Return _CONT_MI_W
			End Get
		End Property

		Public ReadOnly Property CONT_TITLE() As AggregateParameter 
			Get
				If _CONT_TITLE_W Is Nothing Then
					_CONT_TITLE_W = TearOff.CONT_TITLE
				End If
				Return _CONT_TITLE_W
			End Get
		End Property

		Public ReadOnly Property CONT_ADDRESS1() As AggregateParameter 
			Get
				If _CONT_ADDRESS1_W Is Nothing Then
					_CONT_ADDRESS1_W = TearOff.CONT_ADDRESS1
				End If
				Return _CONT_ADDRESS1_W
			End Get
		End Property

		Public ReadOnly Property CONT_ADDRESS2() As AggregateParameter 
			Get
				If _CONT_ADDRESS2_W Is Nothing Then
					_CONT_ADDRESS2_W = TearOff.CONT_ADDRESS2
				End If
				Return _CONT_ADDRESS2_W
			End Get
		End Property

		Public ReadOnly Property CONT_CITY() As AggregateParameter 
			Get
				If _CONT_CITY_W Is Nothing Then
					_CONT_CITY_W = TearOff.CONT_CITY
				End If
				Return _CONT_CITY_W
			End Get
		End Property

		Public ReadOnly Property CONT_COUNTY() As AggregateParameter 
			Get
				If _CONT_COUNTY_W Is Nothing Then
					_CONT_COUNTY_W = TearOff.CONT_COUNTY
				End If
				Return _CONT_COUNTY_W
			End Get
		End Property

		Public ReadOnly Property CONT_STATE() As AggregateParameter 
			Get
				If _CONT_STATE_W Is Nothing Then
					_CONT_STATE_W = TearOff.CONT_STATE
				End If
				Return _CONT_STATE_W
			End Get
		End Property

		Public ReadOnly Property CONT_COUNTRY() As AggregateParameter 
			Get
				If _CONT_COUNTRY_W Is Nothing Then
					_CONT_COUNTRY_W = TearOff.CONT_COUNTRY
				End If
				Return _CONT_COUNTRY_W
			End Get
		End Property

		Public ReadOnly Property CONT_ZIP() As AggregateParameter 
			Get
				If _CONT_ZIP_W Is Nothing Then
					_CONT_ZIP_W = TearOff.CONT_ZIP
				End If
				Return _CONT_ZIP_W
			End Get
		End Property

		Public ReadOnly Property CONT_TELEPHONE() As AggregateParameter 
			Get
				If _CONT_TELEPHONE_W Is Nothing Then
					_CONT_TELEPHONE_W = TearOff.CONT_TELEPHONE
				End If
				Return _CONT_TELEPHONE_W
			End Get
		End Property

		Public ReadOnly Property CONT_EXTENTION() As AggregateParameter 
			Get
				If _CONT_EXTENTION_W Is Nothing Then
					_CONT_EXTENTION_W = TearOff.CONT_EXTENTION
				End If
				Return _CONT_EXTENTION_W
			End Get
		End Property

		Public ReadOnly Property CONT_FAX() As AggregateParameter 
			Get
				If _CONT_FAX_W Is Nothing Then
					_CONT_FAX_W = TearOff.CONT_FAX
				End If
				Return _CONT_FAX_W
			End Get
		End Property

		Public ReadOnly Property CONT_FAX_EXTENTION() As AggregateParameter 
			Get
				If _CONT_FAX_EXTENTION_W Is Nothing Then
					_CONT_FAX_EXTENTION_W = TearOff.CONT_FAX_EXTENTION
				End If
				Return _CONT_FAX_EXTENTION_W
			End Get
		End Property

		Public ReadOnly Property SCHEDULE_USER() As AggregateParameter 
			Get
				If _SCHEDULE_USER_W Is Nothing Then
					_SCHEDULE_USER_W = TearOff.SCHEDULE_USER
				End If
				Return _SCHEDULE_USER_W
			End Get
		End Property

		Public ReadOnly Property DEFAULT_TASK() As AggregateParameter 
			Get
				If _DEFAULT_TASK_W Is Nothing Then
					_DEFAULT_TASK_W = TearOff.DEFAULT_TASK
				End If
				Return _DEFAULT_TASK_W
			End Get
		End Property

		Public ReadOnly Property CP_USER() As AggregateParameter 
			Get
				If _CP_USER_W Is Nothing Then
					_CP_USER_W = TearOff.CP_USER
				End If
				Return _CP_USER_W
			End Get
		End Property

		Public ReadOnly Property CP_ALERTS() As AggregateParameter 
			Get
				If _CP_ALERTS_W Is Nothing Then
					_CP_ALERTS_W = TearOff.CP_ALERTS
				End If
				Return _CP_ALERTS_W
			End Get
		End Property

		Public ReadOnly Property EMAIL_RCPT() As AggregateParameter 
			Get
				If _EMAIL_RCPT_W Is Nothing Then
					_EMAIL_RCPT_W = TearOff.EMAIL_RCPT
				End If
				Return _EMAIL_RCPT_W
			End Get
		End Property

		Public ReadOnly Property TASK_PRIMARY() As AggregateParameter 
			Get
				If _TASK_PRIMARY_W Is Nothing Then
					_TASK_PRIMARY_W = TearOff.TASK_PRIMARY
				End If
				Return _TASK_PRIMARY_W
			End Get
		End Property

		Public ReadOnly Property INACTIVE_FLAG() As AggregateParameter 
			Get
				If _INACTIVE_FLAG_W Is Nothing Then
					_INACTIVE_FLAG_W = TearOff.INACTIVE_FLAG
				End If
				Return _INACTIVE_FLAG_W
			End Get
		End Property

		Public ReadOnly Property CONT_FML() As AggregateParameter 
			Get
				If _CONT_FML_W Is Nothing Then
					_CONT_FML_W = TearOff.CONT_FML
				End If
				Return _CONT_FML_W
			End Get
		End Property

		Public ReadOnly Property CONT_LF() As AggregateParameter 
			Get
				If _CONT_LF_W Is Nothing Then
					_CONT_LF_W = TearOff.CONT_LF
				End If
				Return _CONT_LF_W
			End Get
		End Property

		Private _CDP_CONTACT_ID_W As AggregateParameter = Nothing
		Private _CONT_CODE_W As AggregateParameter = Nothing
		Private _CL_CODE_W As AggregateParameter = Nothing
		Private _EMAIL_ADDRESS_W As AggregateParameter = Nothing
		Private _CONT_FNAME_W As AggregateParameter = Nothing
		Private _CONT_LNAME_W As AggregateParameter = Nothing
		Private _CONT_MI_W As AggregateParameter = Nothing
		Private _CONT_TITLE_W As AggregateParameter = Nothing
		Private _CONT_ADDRESS1_W As AggregateParameter = Nothing
		Private _CONT_ADDRESS2_W As AggregateParameter = Nothing
		Private _CONT_CITY_W As AggregateParameter = Nothing
		Private _CONT_COUNTY_W As AggregateParameter = Nothing
		Private _CONT_STATE_W As AggregateParameter = Nothing
		Private _CONT_COUNTRY_W As AggregateParameter = Nothing
		Private _CONT_ZIP_W As AggregateParameter = Nothing
		Private _CONT_TELEPHONE_W As AggregateParameter = Nothing
		Private _CONT_EXTENTION_W As AggregateParameter = Nothing
		Private _CONT_FAX_W As AggregateParameter = Nothing
		Private _CONT_FAX_EXTENTION_W As AggregateParameter = Nothing
		Private _SCHEDULE_USER_W As AggregateParameter = Nothing
		Private _DEFAULT_TASK_W As AggregateParameter = Nothing
		Private _CP_USER_W As AggregateParameter = Nothing
		Private _CP_ALERTS_W As AggregateParameter = Nothing
		Private _EMAIL_RCPT_W As AggregateParameter = Nothing
		Private _TASK_PRIMARY_W As AggregateParameter = Nothing
		Private _INACTIVE_FLAG_W As AggregateParameter = Nothing
		Private _CONT_FML_W As AggregateParameter = Nothing
		Private _CONT_LF_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_CDP_CONTACT_ID_W = Nothing
		_CONT_CODE_W = Nothing
		_CL_CODE_W = Nothing
		_EMAIL_ADDRESS_W = Nothing
		_CONT_FNAME_W = Nothing
		_CONT_LNAME_W = Nothing
		_CONT_MI_W = Nothing
		_CONT_TITLE_W = Nothing
		_CONT_ADDRESS1_W = Nothing
		_CONT_ADDRESS2_W = Nothing
		_CONT_CITY_W = Nothing
		_CONT_COUNTY_W = Nothing
		_CONT_STATE_W = Nothing
		_CONT_COUNTRY_W = Nothing
		_CONT_ZIP_W = Nothing
		_CONT_TELEPHONE_W = Nothing
		_CONT_EXTENTION_W = Nothing
		_CONT_FAX_W = Nothing
		_CONT_FAX_EXTENTION_W = Nothing
		_SCHEDULE_USER_W = Nothing
		_DEFAULT_TASK_W = Nothing
		_CP_USER_W = Nothing
		_CP_ALERTS_W = Nothing
		_EMAIL_RCPT_W = Nothing
		_TASK_PRIMARY_W = Nothing
		_INACTIVE_FLAG_W = Nothing
		_CONT_FML_W = Nothing
		_CONT_LF_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

	Protected Overrides Function GetInsertCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_CDP_CONTACT_HDRInsert]" 
	    
		CreateParameters(cmd)
		
		Dim p As SqlParameter
		p = cmd.Parameters(Parameters.CDP_CONTACT_ID.ParameterName)
		p.Direction = ParameterDirection.Output
		p = cmd.Parameters(Parameters.CONT_FML.ParameterName)
		p.Direction = ParameterDirection.Output
		p = cmd.Parameters(Parameters.CONT_LF.ParameterName)
		p.Direction = ParameterDirection.Output
    
		Return cmd 

  	End Function
	
	Protected Overrides Function GetUpdateCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_CDP_CONTACT_HDRUpdate]" 
		
		CreateParameters(cmd) 
		
		Dim p As SqlParameter
		p = cmd.Parameters(Parameters.CONT_FML.ParameterName)
		p.Direction = ParameterDirection.Output
		p = cmd.Parameters(Parameters.CONT_LF.ParameterName)
		p.Direction = ParameterDirection.Output
    
		Return cmd
	
	End Function	
	
	Protected Overrides Function GetDeleteCommand() As IDbCommand
	
		Dim cmd As SqlCommand = New SqlCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_CDP_CONTACT_HDRDelete]" 
		
		Dim p As SqlParameter
		p = cmd.Parameters.Add(Parameters.CDP_CONTACT_ID)
		p.SourceColumn = ColumnNames.CDP_CONTACT_ID
		p.SourceVersion = DataRowVersion.Current

  
		Return cmd
	
	End Function	
	
	Private Sub CreateParameters(ByVal cmd As SqlCommand)
	
		Dim p As SqlParameter
		p = cmd.Parameters.Add(Parameters.CDP_CONTACT_ID)
		p.SourceColumn = ColumnNames.CDP_CONTACT_ID
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_CODE)
		p.SourceColumn = ColumnNames.CONT_CODE
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CL_CODE)
		p.SourceColumn = ColumnNames.CL_CODE
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.EMAIL_ADDRESS)
		p.SourceColumn = ColumnNames.EMAIL_ADDRESS
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_FNAME)
		p.SourceColumn = ColumnNames.CONT_FNAME
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_LNAME)
		p.SourceColumn = ColumnNames.CONT_LNAME
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_MI)
		p.SourceColumn = ColumnNames.CONT_MI
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_TITLE)
		p.SourceColumn = ColumnNames.CONT_TITLE
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_ADDRESS1)
		p.SourceColumn = ColumnNames.CONT_ADDRESS1
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_ADDRESS2)
		p.SourceColumn = ColumnNames.CONT_ADDRESS2
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_CITY)
		p.SourceColumn = ColumnNames.CONT_CITY
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_COUNTY)
		p.SourceColumn = ColumnNames.CONT_COUNTY
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_STATE)
		p.SourceColumn = ColumnNames.CONT_STATE
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_COUNTRY)
		p.SourceColumn = ColumnNames.CONT_COUNTRY
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_ZIP)
		p.SourceColumn = ColumnNames.CONT_ZIP
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_TELEPHONE)
		p.SourceColumn = ColumnNames.CONT_TELEPHONE
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_EXTENTION)
		p.SourceColumn = ColumnNames.CONT_EXTENTION
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_FAX)
		p.SourceColumn = ColumnNames.CONT_FAX
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_FAX_EXTENTION)
		p.SourceColumn = ColumnNames.CONT_FAX_EXTENTION
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.SCHEDULE_USER)
		p.SourceColumn = ColumnNames.SCHEDULE_USER
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.DEFAULT_TASK)
		p.SourceColumn = ColumnNames.DEFAULT_TASK
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CP_USER)
		p.SourceColumn = ColumnNames.CP_USER
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CP_ALERTS)
		p.SourceColumn = ColumnNames.CP_ALERTS
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.EMAIL_RCPT)
		p.SourceColumn = ColumnNames.EMAIL_RCPT
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.TASK_PRIMARY)
		p.SourceColumn = ColumnNames.TASK_PRIMARY
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.INACTIVE_FLAG)
		p.SourceColumn = ColumnNames.INACTIVE_FLAG
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_FML)
		p.SourceColumn = ColumnNames.CONT_FML
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.CONT_LF)
		p.SourceColumn = ColumnNames.CONT_LF
		p.SourceVersion = DataRowVersion.Current


	End Sub	

End Class

