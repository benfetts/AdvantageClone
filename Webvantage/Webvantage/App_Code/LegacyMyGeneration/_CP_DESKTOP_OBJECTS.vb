
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _CP_DESKTOP_OBJECTS
    Inherits SqlClientEntity

    Public Sub New()
        Me.QuerySource = "CP_DESKTOP_OBJECTS"
        Me.MappingName = "CP_DESKTOP_OBJECTS"
    End Sub

    '=================================================================
    '  Public Overrides Sub AddNew()
    '=================================================================
    '
    '=================================================================
    Public Overrides Sub AddNew()
        MyBase.AddNew()

    End Sub

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub


    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean

        Dim parameters As ListDictionary = Nothing


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_CP_DESKTOP_OBJECTSLoadAll]", parameters)

    End Function

    '=================================================================
    ' Public Overridable Function LoadByPrimaryKey()  As Boolean
    '=================================================================
    '  Loads a single row of via the primary key
    '=================================================================
    Public Overridable Function LoadByPrimaryKey(ByVal ID As Integer) As Boolean

        Dim parameters As ListDictionary = New ListDictionary()
        parameters.Add(_CP_DESKTOP_OBJECTS.Parameters.ID, ID)


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_CP_DESKTOP_OBJECTSLoadByPrimaryKey]", parameters)

    End Function

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property ID() As SqlParameter
            Get
                Return New SqlParameter("@ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property CATEGORY_ID() As SqlParameter
            Get
                Return New SqlParameter("@CATEGORY_ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property NAME() As SqlParameter
            Get
                Return New SqlParameter("@NAME", SqlDbType.VarChar, 50)
            End Get
        End Property

        Public Shared ReadOnly Property DESCRIPTION() As SqlParameter
            Get
                Return New SqlParameter("@DESCRIPTION", SqlDbType.VarChar, 100)
            End Get
        End Property

        Public Shared ReadOnly Property SECURITY_LEVEL() As SqlParameter
            Get
                Return New SqlParameter("@SECURITY_LEVEL", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property ACTIVE() As SqlParameter
            Get
                Return New SqlParameter("@ACTIVE", SqlDbType.Bit, 0)
            End Get
        End Property

        Public Shared ReadOnly Property ASCX_FILENAME() As SqlParameter
            Get
                Return New SqlParameter("@ASCX_FILENAME", SqlDbType.VarChar, 50)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const ID As String = "ID"
        Public Const CATEGORY_ID As String = "CATEGORY_ID"
        Public Const NAME As String = "NAME"
        Public Const DESCRIPTION As String = "DESCRIPTION"
        Public Const SECURITY_LEVEL As String = "SECURITY_LEVEL"
        Public Const ACTIVE As String = "ACTIVE"
        Public Const ASCX_FILENAME As String = "ASCX_FILENAME"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ID) = _CP_DESKTOP_OBJECTS.PropertyNames.ID
                ht(CATEGORY_ID) = _CP_DESKTOP_OBJECTS.PropertyNames.CATEGORY_ID
                ht(NAME) = _CP_DESKTOP_OBJECTS.PropertyNames.NAME
                ht(DESCRIPTION) = _CP_DESKTOP_OBJECTS.PropertyNames.DESCRIPTION
                ht(SECURITY_LEVEL) = _CP_DESKTOP_OBJECTS.PropertyNames.SECURITY_LEVEL
                ht(ACTIVE) = _CP_DESKTOP_OBJECTS.PropertyNames.ACTIVE
                ht(ASCX_FILENAME) = _CP_DESKTOP_OBJECTS.PropertyNames.ASCX_FILENAME

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const ID As String = "ID"
        Public Const CATEGORY_ID As String = "CATEGORY_ID"
        Public Const NAME As String = "NAME"
        Public Const DESCRIPTION As String = "DESCRIPTION"
        Public Const SECURITY_LEVEL As String = "SECURITY_LEVEL"
        Public Const ACTIVE As String = "ACTIVE"
        Public Const ASCX_FILENAME As String = "ASCX_FILENAME"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ID) = _CP_DESKTOP_OBJECTS.ColumnNames.ID
                ht(CATEGORY_ID) = _CP_DESKTOP_OBJECTS.ColumnNames.CATEGORY_ID
                ht(NAME) = _CP_DESKTOP_OBJECTS.ColumnNames.NAME
                ht(DESCRIPTION) = _CP_DESKTOP_OBJECTS.ColumnNames.DESCRIPTION
                ht(SECURITY_LEVEL) = _CP_DESKTOP_OBJECTS.ColumnNames.SECURITY_LEVEL
                ht(ACTIVE) = _CP_DESKTOP_OBJECTS.ColumnNames.ACTIVE
                ht(ASCX_FILENAME) = _CP_DESKTOP_OBJECTS.ColumnNames.ASCX_FILENAME

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const ID As String = "s_ID"
        Public Const CATEGORY_ID As String = "s_CATEGORY_ID"
        Public Const NAME As String = "s_NAME"
        Public Const DESCRIPTION As String = "s_DESCRIPTION"
        Public Const SECURITY_LEVEL As String = "s_SECURITY_LEVEL"
        Public Const ACTIVE As String = "s_ACTIVE"
        Public Const ASCX_FILENAME As String = "s_ASCX_FILENAME"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.ID, Value)
        End Set
    End Property

    Public Overridable Property CATEGORY_ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.CATEGORY_ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.CATEGORY_ID, Value)
        End Set
    End Property

    Public Overridable Property NAME() As String
        Get
            Return MyBase.GetString(ColumnNames.NAME)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.NAME, Value)
        End Set
    End Property

    Public Overridable Property DESCRIPTION() As String
        Get
            Return MyBase.GetString(ColumnNames.DESCRIPTION)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.DESCRIPTION, Value)
        End Set
    End Property

    Public Overridable Property SECURITY_LEVEL() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.SECURITY_LEVEL)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.SECURITY_LEVEL, Value)
        End Set
    End Property

    Public Overridable Property ACTIVE() As Boolean
        Get
            Return MyBase.GetBoolean(ColumnNames.ACTIVE)
        End Get
        Set(ByVal Value As Boolean)
            MyBase.SetBoolean(ColumnNames.ACTIVE, Value)
        End Set
    End Property

    Public Overridable Property ASCX_FILENAME() As String
        Get
            Return MyBase.GetString(ColumnNames.ASCX_FILENAME)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.ASCX_FILENAME, Value)
        End Set
    End Property


#End Region

#Region "String Properties"

    Public Overridable Property s_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.ID)
            Else
                Me.ID = MyBase.SetIntegerAsString(ColumnNames.ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_CATEGORY_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.CATEGORY_ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.CATEGORY_ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.CATEGORY_ID)
            Else
                Me.CATEGORY_ID = MyBase.SetIntegerAsString(ColumnNames.CATEGORY_ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_NAME() As String
        Get
            If Me.IsColumnNull(ColumnNames.NAME) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.NAME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.NAME)
            Else
                Me.NAME = MyBase.SetStringAsString(ColumnNames.NAME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_DESCRIPTION() As String
        Get
            If Me.IsColumnNull(ColumnNames.DESCRIPTION) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.DESCRIPTION)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.DESCRIPTION)
            Else
                Me.DESCRIPTION = MyBase.SetStringAsString(ColumnNames.DESCRIPTION, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_SECURITY_LEVEL() As String
        Get
            If Me.IsColumnNull(ColumnNames.SECURITY_LEVEL) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.SECURITY_LEVEL)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.SECURITY_LEVEL)
            Else
                Me.SECURITY_LEVEL = MyBase.SetIntegerAsString(ColumnNames.SECURITY_LEVEL, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ACTIVE() As String
        Get
            If Me.IsColumnNull(ColumnNames.ACTIVE) Then
                Return String.Empty
            Else
                Return MyBase.GetBooleanAsString(ColumnNames.ACTIVE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.ACTIVE)
            Else
                Me.ACTIVE = MyBase.SetBooleanAsString(ColumnNames.ACTIVE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ASCX_FILENAME() As String
        Get
            If Me.IsColumnNull(ColumnNames.ASCX_FILENAME) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.ASCX_FILENAME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.ASCX_FILENAME)
            Else
                Me.ASCX_FILENAME = MyBase.SetStringAsString(ColumnNames.ASCX_FILENAME, Value)
            End If
        End Set
    End Property


#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ID, Parameters.ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CATEGORY_ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.CATEGORY_ID, Parameters.CATEGORY_ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property NAME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.NAME, Parameters.NAME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property SECURITY_LEVEL() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.SECURITY_LEVEL, Parameters.SECURITY_LEVEL)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ACTIVE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ACTIVE, Parameters.ACTIVE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ASCX_FILENAME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ASCX_FILENAME, Parameters.ASCX_FILENAME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property


            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property ID() As WhereParameter
            Get
                If _ID_W Is Nothing Then
                    _ID_W = TearOff.ID
                End If
                Return _ID_W
            End Get
        End Property

        Public ReadOnly Property CATEGORY_ID() As WhereParameter
            Get
                If _CATEGORY_ID_W Is Nothing Then
                    _CATEGORY_ID_W = TearOff.CATEGORY_ID
                End If
                Return _CATEGORY_ID_W
            End Get
        End Property

        Public ReadOnly Property NAME() As WhereParameter
            Get
                If _NAME_W Is Nothing Then
                    _NAME_W = TearOff.NAME
                End If
                Return _NAME_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As WhereParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Public ReadOnly Property SECURITY_LEVEL() As WhereParameter
            Get
                If _SECURITY_LEVEL_W Is Nothing Then
                    _SECURITY_LEVEL_W = TearOff.SECURITY_LEVEL
                End If
                Return _SECURITY_LEVEL_W
            End Get
        End Property

        Public ReadOnly Property ACTIVE() As WhereParameter
            Get
                If _ACTIVE_W Is Nothing Then
                    _ACTIVE_W = TearOff.ACTIVE
                End If
                Return _ACTIVE_W
            End Get
        End Property

        Public ReadOnly Property ASCX_FILENAME() As WhereParameter
            Get
                If _ASCX_FILENAME_W Is Nothing Then
                    _ASCX_FILENAME_W = TearOff.ASCX_FILENAME
                End If
                Return _ASCX_FILENAME_W
            End Get
        End Property

        Private _ID_W As WhereParameter = Nothing
        Private _CATEGORY_ID_W As WhereParameter = Nothing
        Private _NAME_W As WhereParameter = Nothing
        Private _DESCRIPTION_W As WhereParameter = Nothing
        Private _SECURITY_LEVEL_W As WhereParameter = Nothing
        Private _ACTIVE_W As WhereParameter = Nothing
        Private _ASCX_FILENAME_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _ID_W = Nothing
            _CATEGORY_ID_W = Nothing
            _NAME_W = Nothing
            _DESCRIPTION_W = Nothing
            _SECURITY_LEVEL_W = Nothing
            _ACTIVE_W = Nothing
            _ASCX_FILENAME_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ID, Parameters.ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CATEGORY_ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CATEGORY_ID, Parameters.CATEGORY_ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property NAME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.NAME, Parameters.NAME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property SECURITY_LEVEL() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.SECURITY_LEVEL, Parameters.SECURITY_LEVEL)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ACTIVE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ACTIVE, Parameters.ACTIVE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ASCX_FILENAME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ASCX_FILENAME, Parameters.ASCX_FILENAME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property


            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property ID() As AggregateParameter
            Get
                If _ID_W Is Nothing Then
                    _ID_W = TearOff.ID
                End If
                Return _ID_W
            End Get
        End Property

        Public ReadOnly Property CATEGORY_ID() As AggregateParameter
            Get
                If _CATEGORY_ID_W Is Nothing Then
                    _CATEGORY_ID_W = TearOff.CATEGORY_ID
                End If
                Return _CATEGORY_ID_W
            End Get
        End Property

        Public ReadOnly Property NAME() As AggregateParameter
            Get
                If _NAME_W Is Nothing Then
                    _NAME_W = TearOff.NAME
                End If
                Return _NAME_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As AggregateParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Public ReadOnly Property SECURITY_LEVEL() As AggregateParameter
            Get
                If _SECURITY_LEVEL_W Is Nothing Then
                    _SECURITY_LEVEL_W = TearOff.SECURITY_LEVEL
                End If
                Return _SECURITY_LEVEL_W
            End Get
        End Property

        Public ReadOnly Property ACTIVE() As AggregateParameter
            Get
                If _ACTIVE_W Is Nothing Then
                    _ACTIVE_W = TearOff.ACTIVE
                End If
                Return _ACTIVE_W
            End Get
        End Property

        Public ReadOnly Property ASCX_FILENAME() As AggregateParameter
            Get
                If _ASCX_FILENAME_W Is Nothing Then
                    _ASCX_FILENAME_W = TearOff.ASCX_FILENAME
                End If
                Return _ASCX_FILENAME_W
            End Get
        End Property

        Private _ID_W As AggregateParameter = Nothing
        Private _CATEGORY_ID_W As AggregateParameter = Nothing
        Private _NAME_W As AggregateParameter = Nothing
        Private _DESCRIPTION_W As AggregateParameter = Nothing
        Private _SECURITY_LEVEL_W As AggregateParameter = Nothing
        Private _ACTIVE_W As AggregateParameter = Nothing
        Private _ASCX_FILENAME_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _ID_W = Nothing
            _CATEGORY_ID_W = Nothing
            _NAME_W = Nothing
            _DESCRIPTION_W = Nothing
            _SECURITY_LEVEL_W = Nothing
            _ACTIVE_W = Nothing
            _ASCX_FILENAME_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_CP_DESKTOP_OBJECTSInsert]"

        CreateParameters(cmd)

        Dim p As SqlParameter
        p = cmd.Parameters(Parameters.ID.ParameterName)
        p.Direction = ParameterDirection.Output

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_CP_DESKTOP_OBJECTSUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_CP_DESKTOP_OBJECTSDelete]"

        Dim p As SqlParameter
        p = cmd.Parameters.Add(Parameters.ID)
        p.SourceColumn = ColumnNames.ID
        p.SourceVersion = DataRowVersion.Current


        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As SqlCommand)

        Dim p As SqlParameter
        p = cmd.Parameters.Add(Parameters.ID)
        p.SourceColumn = ColumnNames.ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.CATEGORY_ID)
        p.SourceColumn = ColumnNames.CATEGORY_ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.NAME)
        p.SourceColumn = ColumnNames.NAME
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.DESCRIPTION)
        p.SourceColumn = ColumnNames.DESCRIPTION
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.SECURITY_LEVEL)
        p.SourceColumn = ColumnNames.SECURITY_LEVEL
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.ACTIVE)
        p.SourceColumn = ColumnNames.ACTIVE
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.ASCX_FILENAME)
        p.SourceColumn = ColumnNames.ASCX_FILENAME
        p.SourceVersion = DataRowVersion.Current


    End Sub

End Class


