
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _CP_USER_TAB_DESKTOP_OBJECT
    Inherits SqlClientEntity

    Public Sub New()
        Me.QuerySource = "CP_USER_TAB_DESKTOP_OBJECT"
        Me.MappingName = "CP_USER_TAB_DESKTOP_OBJECT"
    End Sub

    '=================================================================
    '  Public Overrides Sub AddNew()
    '=================================================================
    '
    '=================================================================
    Public Overrides Sub AddNew()
        MyBase.AddNew()

    End Sub

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub


    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean

        Dim parameters As ListDictionary = Nothing


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_CP_USER_TAB_DESKTOP_OBJECTLoadAll]", parameters)

    End Function

    '=================================================================
    ' Public Overridable Function LoadByPrimaryKey()  As Boolean
    '=================================================================
    '  Loads a single row of via the primary key
    '=================================================================
    Public Overridable Function LoadByPrimaryKey(ByVal CDP_CONTACT_ID As Integer, ByVal DESKTOP_OBJECT_ID As Integer, ByVal TAB_ID As Integer) As Boolean

        Dim parameters As ListDictionary = New ListDictionary()
        parameters.Add(_CP_USER_TAB_DESKTOP_OBJECT.Parameters.CDP_CONTACT_ID, CDP_CONTACT_ID)

        parameters.Add(_CP_USER_TAB_DESKTOP_OBJECT.Parameters.DESKTOP_OBJECT_ID, DESKTOP_OBJECT_ID)

        parameters.Add(_CP_USER_TAB_DESKTOP_OBJECT.Parameters.TAB_ID, TAB_ID)


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_CP_USER_TAB_DESKTOP_OBJECTLoadByPrimaryKey]", parameters)

    End Function

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property CDP_CONTACT_ID() As SqlParameter
            Get
                Return New SqlParameter("@CDP_CONTACT_ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property TAB_ID() As SqlParameter
            Get
                Return New SqlParameter("@TAB_ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property DESKTOP_OBJECT_ID() As SqlParameter
            Get
                Return New SqlParameter("@DESKTOP_OBJECT_ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property PARENT_ZONE() As SqlParameter
            Get
                Return New SqlParameter("@PARENT_ZONE", SqlDbType.VarChar, 50)
            End Get
        End Property

        Public Shared ReadOnly Property LOAD_INDEX() As SqlParameter
            Get
                Return New SqlParameter("@LOAD_INDEX", SqlDbType.Int, 0)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const CDP_CONTACT_ID As String = "CDP_CONTACT_ID"
        Public Const TAB_ID As String = "TAB_ID"
        Public Const DESKTOP_OBJECT_ID As String = "DESKTOP_OBJECT_ID"
        Public Const PARENT_ZONE As String = "PARENT_ZONE"
        Public Const LOAD_INDEX As String = "LOAD_INDEX"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(CDP_CONTACT_ID) = _CP_USER_TAB_DESKTOP_OBJECT.PropertyNames.CDP_CONTACT_ID
                ht(TAB_ID) = _CP_USER_TAB_DESKTOP_OBJECT.PropertyNames.TAB_ID
                ht(DESKTOP_OBJECT_ID) = _CP_USER_TAB_DESKTOP_OBJECT.PropertyNames.DESKTOP_OBJECT_ID
                ht(PARENT_ZONE) = _CP_USER_TAB_DESKTOP_OBJECT.PropertyNames.PARENT_ZONE
                ht(LOAD_INDEX) = _CP_USER_TAB_DESKTOP_OBJECT.PropertyNames.LOAD_INDEX

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const CDP_CONTACT_ID As String = "CDP_CONTACT_ID"
        Public Const TAB_ID As String = "TAB_ID"
        Public Const DESKTOP_OBJECT_ID As String = "DESKTOP_OBJECT_ID"
        Public Const PARENT_ZONE As String = "PARENT_ZONE"
        Public Const LOAD_INDEX As String = "LOAD_INDEX"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(CDP_CONTACT_ID) = _CP_USER_TAB_DESKTOP_OBJECT.ColumnNames.CDP_CONTACT_ID
                ht(TAB_ID) = _CP_USER_TAB_DESKTOP_OBJECT.ColumnNames.TAB_ID
                ht(DESKTOP_OBJECT_ID) = _CP_USER_TAB_DESKTOP_OBJECT.ColumnNames.DESKTOP_OBJECT_ID
                ht(PARENT_ZONE) = _CP_USER_TAB_DESKTOP_OBJECT.ColumnNames.PARENT_ZONE
                ht(LOAD_INDEX) = _CP_USER_TAB_DESKTOP_OBJECT.ColumnNames.LOAD_INDEX

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const CDP_CONTACT_ID As String = "s_CDP_CONTACT_ID"
        Public Const TAB_ID As String = "s_TAB_ID"
        Public Const DESKTOP_OBJECT_ID As String = "s_DESKTOP_OBJECT_ID"
        Public Const PARENT_ZONE As String = "s_PARENT_ZONE"
        Public Const LOAD_INDEX As String = "s_LOAD_INDEX"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property CDP_CONTACT_ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.CDP_CONTACT_ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.CDP_CONTACT_ID, Value)
        End Set
    End Property

    Public Overridable Property TAB_ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.TAB_ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.TAB_ID, Value)
        End Set
    End Property

    Public Overridable Property DESKTOP_OBJECT_ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.DESKTOP_OBJECT_ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.DESKTOP_OBJECT_ID, Value)
        End Set
    End Property

    Public Overridable Property PARENT_ZONE() As String
        Get
            Return MyBase.GetString(ColumnNames.PARENT_ZONE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.PARENT_ZONE, Value)
        End Set
    End Property

    Public Overridable Property LOAD_INDEX() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.LOAD_INDEX)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.LOAD_INDEX, Value)
        End Set
    End Property


#End Region

#Region "String Properties"

    Public Overridable Property s_CDP_CONTACT_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.CDP_CONTACT_ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.CDP_CONTACT_ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.CDP_CONTACT_ID)
            Else
                Me.CDP_CONTACT_ID = MyBase.SetIntegerAsString(ColumnNames.CDP_CONTACT_ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_TAB_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.TAB_ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.TAB_ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.TAB_ID)
            Else
                Me.TAB_ID = MyBase.SetIntegerAsString(ColumnNames.TAB_ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_DESKTOP_OBJECT_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.DESKTOP_OBJECT_ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.DESKTOP_OBJECT_ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.DESKTOP_OBJECT_ID)
            Else
                Me.DESKTOP_OBJECT_ID = MyBase.SetIntegerAsString(ColumnNames.DESKTOP_OBJECT_ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_PARENT_ZONE() As String
        Get
            If Me.IsColumnNull(ColumnNames.PARENT_ZONE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.PARENT_ZONE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.PARENT_ZONE)
            Else
                Me.PARENT_ZONE = MyBase.SetStringAsString(ColumnNames.PARENT_ZONE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_LOAD_INDEX() As String
        Get
            If Me.IsColumnNull(ColumnNames.LOAD_INDEX) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.LOAD_INDEX)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.LOAD_INDEX)
            Else
                Me.LOAD_INDEX = MyBase.SetIntegerAsString(ColumnNames.LOAD_INDEX, Value)
            End If
        End Set
    End Property


#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property CDP_CONTACT_ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.CDP_CONTACT_ID, Parameters.CDP_CONTACT_ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property TAB_ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.TAB_ID, Parameters.TAB_ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESKTOP_OBJECT_ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.DESKTOP_OBJECT_ID, Parameters.DESKTOP_OBJECT_ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PARENT_ZONE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.PARENT_ZONE, Parameters.PARENT_ZONE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property LOAD_INDEX() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.LOAD_INDEX, Parameters.LOAD_INDEX)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property


            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property CDP_CONTACT_ID() As WhereParameter
            Get
                If _CDP_CONTACT_ID_W Is Nothing Then
                    _CDP_CONTACT_ID_W = TearOff.CDP_CONTACT_ID
                End If
                Return _CDP_CONTACT_ID_W
            End Get
        End Property

        Public ReadOnly Property TAB_ID() As WhereParameter
            Get
                If _TAB_ID_W Is Nothing Then
                    _TAB_ID_W = TearOff.TAB_ID
                End If
                Return _TAB_ID_W
            End Get
        End Property

        Public ReadOnly Property DESKTOP_OBJECT_ID() As WhereParameter
            Get
                If _DESKTOP_OBJECT_ID_W Is Nothing Then
                    _DESKTOP_OBJECT_ID_W = TearOff.DESKTOP_OBJECT_ID
                End If
                Return _DESKTOP_OBJECT_ID_W
            End Get
        End Property

        Public ReadOnly Property PARENT_ZONE() As WhereParameter
            Get
                If _PARENT_ZONE_W Is Nothing Then
                    _PARENT_ZONE_W = TearOff.PARENT_ZONE
                End If
                Return _PARENT_ZONE_W
            End Get
        End Property

        Public ReadOnly Property LOAD_INDEX() As WhereParameter
            Get
                If _LOAD_INDEX_W Is Nothing Then
                    _LOAD_INDEX_W = TearOff.LOAD_INDEX
                End If
                Return _LOAD_INDEX_W
            End Get
        End Property

        Private _CDP_CONTACT_ID_W As WhereParameter = Nothing
        Private _TAB_ID_W As WhereParameter = Nothing
        Private _DESKTOP_OBJECT_ID_W As WhereParameter = Nothing
        Private _PARENT_ZONE_W As WhereParameter = Nothing
        Private _LOAD_INDEX_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _CDP_CONTACT_ID_W = Nothing
            _TAB_ID_W = Nothing
            _DESKTOP_OBJECT_ID_W = Nothing
            _PARENT_ZONE_W = Nothing
            _LOAD_INDEX_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property CDP_CONTACT_ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CDP_CONTACT_ID, Parameters.CDP_CONTACT_ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property TAB_ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.TAB_ID, Parameters.TAB_ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESKTOP_OBJECT_ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DESKTOP_OBJECT_ID, Parameters.DESKTOP_OBJECT_ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PARENT_ZONE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.PARENT_ZONE, Parameters.PARENT_ZONE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property LOAD_INDEX() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.LOAD_INDEX, Parameters.LOAD_INDEX)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property


            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property CDP_CONTACT_ID() As AggregateParameter
            Get
                If _CDP_CONTACT_ID_W Is Nothing Then
                    _CDP_CONTACT_ID_W = TearOff.CDP_CONTACT_ID
                End If
                Return _CDP_CONTACT_ID_W
            End Get
        End Property

        Public ReadOnly Property TAB_ID() As AggregateParameter
            Get
                If _TAB_ID_W Is Nothing Then
                    _TAB_ID_W = TearOff.TAB_ID
                End If
                Return _TAB_ID_W
            End Get
        End Property

        Public ReadOnly Property DESKTOP_OBJECT_ID() As AggregateParameter
            Get
                If _DESKTOP_OBJECT_ID_W Is Nothing Then
                    _DESKTOP_OBJECT_ID_W = TearOff.DESKTOP_OBJECT_ID
                End If
                Return _DESKTOP_OBJECT_ID_W
            End Get
        End Property

        Public ReadOnly Property PARENT_ZONE() As AggregateParameter
            Get
                If _PARENT_ZONE_W Is Nothing Then
                    _PARENT_ZONE_W = TearOff.PARENT_ZONE
                End If
                Return _PARENT_ZONE_W
            End Get
        End Property

        Public ReadOnly Property LOAD_INDEX() As AggregateParameter
            Get
                If _LOAD_INDEX_W Is Nothing Then
                    _LOAD_INDEX_W = TearOff.LOAD_INDEX
                End If
                Return _LOAD_INDEX_W
            End Get
        End Property

        Private _CDP_CONTACT_ID_W As AggregateParameter = Nothing
        Private _TAB_ID_W As AggregateParameter = Nothing
        Private _DESKTOP_OBJECT_ID_W As AggregateParameter = Nothing
        Private _PARENT_ZONE_W As AggregateParameter = Nothing
        Private _LOAD_INDEX_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _CDP_CONTACT_ID_W = Nothing
            _TAB_ID_W = Nothing
            _DESKTOP_OBJECT_ID_W = Nothing
            _PARENT_ZONE_W = Nothing
            _LOAD_INDEX_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_CP_USER_TAB_DESKTOP_OBJECTInsert]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_CP_USER_TAB_DESKTOP_OBJECTUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_CP_USER_TAB_DESKTOP_OBJECTDelete]"

        Dim p As SqlParameter
        p = cmd.Parameters.Add(Parameters.CDP_CONTACT_ID)
        p.SourceColumn = ColumnNames.CDP_CONTACT_ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.DESKTOP_OBJECT_ID)
        p.SourceColumn = ColumnNames.DESKTOP_OBJECT_ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.TAB_ID)
        p.SourceColumn = ColumnNames.TAB_ID
        p.SourceVersion = DataRowVersion.Current


        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As SqlCommand)

        Dim p As SqlParameter
        p = cmd.Parameters.Add(Parameters.CDP_CONTACT_ID)
        p.SourceColumn = ColumnNames.CDP_CONTACT_ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.TAB_ID)
        p.SourceColumn = ColumnNames.TAB_ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.DESKTOP_OBJECT_ID)
        p.SourceColumn = ColumnNames.DESKTOP_OBJECT_ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.PARENT_ZONE)
        p.SourceColumn = ColumnNames.PARENT_ZONE
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.LOAD_INDEX)
        p.SourceColumn = ColumnNames.LOAD_INDEX
        p.SourceVersion = DataRowVersion.Current


    End Sub

End Class

