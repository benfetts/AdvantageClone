
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.1.5.1)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _JOB_TRAFFIC_DET_EMPS
    Inherits SqlClientEntity

    Public Sub New()
        Me.QuerySource = "JOB_TRAFFIC_DET_EMPS"
        Me.MappingName = "JOB_TRAFFIC_DET_EMPS"
    End Sub

    '=================================================================
    '  Public Overrides Sub AddNew()
    '=================================================================
    '
    '=================================================================
    Public Overrides Sub AddNew()
        MyBase.AddNew()

    End Sub

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub


    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean

        Dim parameters As ListDictionary = Nothing


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_JOB_TRAFFIC_DET_EMPSLoadAll]", parameters)

    End Function

    '=================================================================
    ' Public Overridable Function LoadByPrimaryKey()  As Boolean
    '=================================================================
    '  Loads a single row of via the primary key
    '=================================================================
    Public Overridable Function LoadByPrimaryKey(ByVal ID As Integer) As Boolean

        Dim parameters As ListDictionary = New ListDictionary()
        parameters.Add(_JOB_TRAFFIC_DET_EMPS.Parameters.ID, ID)


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_JOB_TRAFFIC_DET_EMPSLoadByPrimaryKey]", parameters)

    End Function

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property ID() As SqlParameter
            Get
                Return New SqlParameter("@ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property JOB_NUMBER() As SqlParameter
            Get
                Return New SqlParameter("@JOB_NUMBER", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property JOB_COMPONENT_NBR() As SqlParameter
            Get
                Return New SqlParameter("@JOB_COMPONENT_NBR", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property SEQ_NBR() As SqlParameter
            Get
                Return New SqlParameter("@SEQ_NBR", SqlDbType.SmallInt, 0)
            End Get
        End Property

        Public Shared ReadOnly Property EMP_CODE() As SqlParameter
            Get
                Return New SqlParameter("@EMP_CODE", SqlDbType.VarChar, 6)
            End Get
        End Property

        Public Shared ReadOnly Property HOURS_ALLOWED() As SqlParameter
            Get
                Return New SqlParameter("@HOURS_ALLOWED", SqlDbType.Decimal, 0)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const ID As String = "ID"
        Public Const JOB_NUMBER As String = "JOB_NUMBER"
        Public Const JOB_COMPONENT_NBR As String = "JOB_COMPONENT_NBR"
        Public Const SEQ_NBR As String = "SEQ_NBR"
        Public Const EMP_CODE As String = "EMP_CODE"
        Public Const HOURS_ALLOWED As String = "HOURS_ALLOWED"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ID) = _JOB_TRAFFIC_DET_EMPS.PropertyNames.ID
                ht(JOB_NUMBER) = _JOB_TRAFFIC_DET_EMPS.PropertyNames.JOB_NUMBER
                ht(JOB_COMPONENT_NBR) = _JOB_TRAFFIC_DET_EMPS.PropertyNames.JOB_COMPONENT_NBR
                ht(SEQ_NBR) = _JOB_TRAFFIC_DET_EMPS.PropertyNames.SEQ_NBR
                ht(EMP_CODE) = _JOB_TRAFFIC_DET_EMPS.PropertyNames.EMP_CODE
                ht(HOURS_ALLOWED) = _JOB_TRAFFIC_DET_EMPS.PropertyNames.HOURS_ALLOWED

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const ID As String = "ID"
        Public Const JOB_NUMBER As String = "JOB_NUMBER"
        Public Const JOB_COMPONENT_NBR As String = "JOB_COMPONENT_NBR"
        Public Const SEQ_NBR As String = "SEQ_NBR"
        Public Const EMP_CODE As String = "EMP_CODE"
        Public Const HOURS_ALLOWED As String = "HOURS_ALLOWED"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ID) = _JOB_TRAFFIC_DET_EMPS.ColumnNames.ID
                ht(JOB_NUMBER) = _JOB_TRAFFIC_DET_EMPS.ColumnNames.JOB_NUMBER
                ht(JOB_COMPONENT_NBR) = _JOB_TRAFFIC_DET_EMPS.ColumnNames.JOB_COMPONENT_NBR
                ht(SEQ_NBR) = _JOB_TRAFFIC_DET_EMPS.ColumnNames.SEQ_NBR
                ht(EMP_CODE) = _JOB_TRAFFIC_DET_EMPS.ColumnNames.EMP_CODE
                ht(HOURS_ALLOWED) = _JOB_TRAFFIC_DET_EMPS.ColumnNames.HOURS_ALLOWED

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const ID As String = "s_ID"
        Public Const JOB_NUMBER As String = "s_JOB_NUMBER"
        Public Const JOB_COMPONENT_NBR As String = "s_JOB_COMPONENT_NBR"
        Public Const SEQ_NBR As String = "s_SEQ_NBR"
        Public Const EMP_CODE As String = "s_EMP_CODE"
        Public Const HOURS_ALLOWED As String = "s_HOURS_ALLOWED"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.ID, Value)
        End Set
    End Property

    Public Overridable Property JOB_NUMBER() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.JOB_NUMBER)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.JOB_NUMBER, Value)
        End Set
    End Property

    Public Overridable Property JOB_COMPONENT_NBR() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.JOB_COMPONENT_NBR)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.JOB_COMPONENT_NBR, Value)
        End Set
    End Property

    Public Overridable Property SEQ_NBR() As Short
        Get
            Return MyBase.GetShort(ColumnNames.SEQ_NBR)
        End Get
        Set(ByVal Value As Short)
            MyBase.SetShort(ColumnNames.SEQ_NBR, Value)
        End Set
    End Property

    Public Overridable Property EMP_CODE() As String
        Get
            Return MyBase.GetString(ColumnNames.EMP_CODE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.EMP_CODE, Value)
        End Set
    End Property

    Public Overridable Property HOURS_ALLOWED() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.HOURS_ALLOWED)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.HOURS_ALLOWED, Value)
        End Set
    End Property


#End Region

#Region "String Properties"

    Public Overridable Property s_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.ID)
            Else
                Me.ID = MyBase.SetIntegerAsString(ColumnNames.ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_JOB_NUMBER() As String
        Get
            If Me.IsColumnNull(ColumnNames.JOB_NUMBER) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.JOB_NUMBER)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.JOB_NUMBER)
            Else
                Me.JOB_NUMBER = MyBase.SetIntegerAsString(ColumnNames.JOB_NUMBER, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_JOB_COMPONENT_NBR() As String
        Get
            If Me.IsColumnNull(ColumnNames.JOB_COMPONENT_NBR) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.JOB_COMPONENT_NBR)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.JOB_COMPONENT_NBR)
            Else
                Me.JOB_COMPONENT_NBR = MyBase.SetIntegerAsString(ColumnNames.JOB_COMPONENT_NBR, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_SEQ_NBR() As String
        Get
            If Me.IsColumnNull(ColumnNames.SEQ_NBR) Then
                Return String.Empty
            Else
                Return MyBase.GetShortAsString(ColumnNames.SEQ_NBR)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.SEQ_NBR)
            Else
                Me.SEQ_NBR = MyBase.SetShortAsString(ColumnNames.SEQ_NBR, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EMP_CODE() As String
        Get
            If Me.IsColumnNull(ColumnNames.EMP_CODE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.EMP_CODE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.EMP_CODE)
            Else
                Me.EMP_CODE = MyBase.SetStringAsString(ColumnNames.EMP_CODE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_HOURS_ALLOWED() As String
        Get
            If Me.IsColumnNull(ColumnNames.HOURS_ALLOWED) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.HOURS_ALLOWED)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.HOURS_ALLOWED)
            Else
                Me.HOURS_ALLOWED = MyBase.SetDecimalAsString(ColumnNames.HOURS_ALLOWED, Value)
            End If
        End Set
    End Property


#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ID, Parameters.ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property JOB_NUMBER() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.JOB_NUMBER, Parameters.JOB_NUMBER)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property JOB_COMPONENT_NBR() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.JOB_COMPONENT_NBR, Parameters.JOB_COMPONENT_NBR)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property SEQ_NBR() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.SEQ_NBR, Parameters.SEQ_NBR)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_CODE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EMP_CODE, Parameters.EMP_CODE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property HOURS_ALLOWED() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.HOURS_ALLOWED, Parameters.HOURS_ALLOWED)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property


            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property ID() As WhereParameter
            Get
                If _ID_W Is Nothing Then
                    _ID_W = TearOff.ID
                End If
                Return _ID_W
            End Get
        End Property

        Public ReadOnly Property JOB_NUMBER() As WhereParameter
            Get
                If _JOB_NUMBER_W Is Nothing Then
                    _JOB_NUMBER_W = TearOff.JOB_NUMBER
                End If
                Return _JOB_NUMBER_W
            End Get
        End Property

        Public ReadOnly Property JOB_COMPONENT_NBR() As WhereParameter
            Get
                If _JOB_COMPONENT_NBR_W Is Nothing Then
                    _JOB_COMPONENT_NBR_W = TearOff.JOB_COMPONENT_NBR
                End If
                Return _JOB_COMPONENT_NBR_W
            End Get
        End Property

        Public ReadOnly Property SEQ_NBR() As WhereParameter
            Get
                If _SEQ_NBR_W Is Nothing Then
                    _SEQ_NBR_W = TearOff.SEQ_NBR
                End If
                Return _SEQ_NBR_W
            End Get
        End Property

        Public ReadOnly Property EMP_CODE() As WhereParameter
            Get
                If _EMP_CODE_W Is Nothing Then
                    _EMP_CODE_W = TearOff.EMP_CODE
                End If
                Return _EMP_CODE_W
            End Get
        End Property

        Public ReadOnly Property HOURS_ALLOWED() As WhereParameter
            Get
                If _HOURS_ALLOWED_W Is Nothing Then
                    _HOURS_ALLOWED_W = TearOff.HOURS_ALLOWED
                End If
                Return _HOURS_ALLOWED_W
            End Get
        End Property

        Private _ID_W As WhereParameter = Nothing
        Private _JOB_NUMBER_W As WhereParameter = Nothing
        Private _JOB_COMPONENT_NBR_W As WhereParameter = Nothing
        Private _SEQ_NBR_W As WhereParameter = Nothing
        Private _EMP_CODE_W As WhereParameter = Nothing
        Private _HOURS_ALLOWED_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _ID_W = Nothing
            _JOB_NUMBER_W = Nothing
            _JOB_COMPONENT_NBR_W = Nothing
            _SEQ_NBR_W = Nothing
            _EMP_CODE_W = Nothing
            _HOURS_ALLOWED_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ID, Parameters.ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property JOB_NUMBER() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.JOB_NUMBER, Parameters.JOB_NUMBER)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property JOB_COMPONENT_NBR() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.JOB_COMPONENT_NBR, Parameters.JOB_COMPONENT_NBR)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property SEQ_NBR() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.SEQ_NBR, Parameters.SEQ_NBR)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_CODE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMP_CODE, Parameters.EMP_CODE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property HOURS_ALLOWED() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.HOURS_ALLOWED, Parameters.HOURS_ALLOWED)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property


            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property ID() As AggregateParameter
            Get
                If _ID_W Is Nothing Then
                    _ID_W = TearOff.ID
                End If
                Return _ID_W
            End Get
        End Property

        Public ReadOnly Property JOB_NUMBER() As AggregateParameter
            Get
                If _JOB_NUMBER_W Is Nothing Then
                    _JOB_NUMBER_W = TearOff.JOB_NUMBER
                End If
                Return _JOB_NUMBER_W
            End Get
        End Property

        Public ReadOnly Property JOB_COMPONENT_NBR() As AggregateParameter
            Get
                If _JOB_COMPONENT_NBR_W Is Nothing Then
                    _JOB_COMPONENT_NBR_W = TearOff.JOB_COMPONENT_NBR
                End If
                Return _JOB_COMPONENT_NBR_W
            End Get
        End Property

        Public ReadOnly Property SEQ_NBR() As AggregateParameter
            Get
                If _SEQ_NBR_W Is Nothing Then
                    _SEQ_NBR_W = TearOff.SEQ_NBR
                End If
                Return _SEQ_NBR_W
            End Get
        End Property

        Public ReadOnly Property EMP_CODE() As AggregateParameter
            Get
                If _EMP_CODE_W Is Nothing Then
                    _EMP_CODE_W = TearOff.EMP_CODE
                End If
                Return _EMP_CODE_W
            End Get
        End Property

        Public ReadOnly Property HOURS_ALLOWED() As AggregateParameter
            Get
                If _HOURS_ALLOWED_W Is Nothing Then
                    _HOURS_ALLOWED_W = TearOff.HOURS_ALLOWED
                End If
                Return _HOURS_ALLOWED_W
            End Get
        End Property

        Private _ID_W As AggregateParameter = Nothing
        Private _JOB_NUMBER_W As AggregateParameter = Nothing
        Private _JOB_COMPONENT_NBR_W As AggregateParameter = Nothing
        Private _SEQ_NBR_W As AggregateParameter = Nothing
        Private _EMP_CODE_W As AggregateParameter = Nothing
        Private _HOURS_ALLOWED_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _ID_W = Nothing
            _JOB_NUMBER_W = Nothing
            _JOB_COMPONENT_NBR_W = Nothing
            _SEQ_NBR_W = Nothing
            _EMP_CODE_W = Nothing
            _HOURS_ALLOWED_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_JOB_TRAFFIC_DET_EMPSInsert]"

        CreateParameters(cmd)

        Dim p As SqlParameter
        p = cmd.Parameters(Parameters.ID.ParameterName)
        p.Direction = ParameterDirection.Output

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_JOB_TRAFFIC_DET_EMPSUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_JOB_TRAFFIC_DET_EMPSDelete]"

        Dim p As SqlParameter
        p = cmd.Parameters.Add(Parameters.ID)
        p.SourceColumn = ColumnNames.ID
        p.SourceVersion = DataRowVersion.Current


        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As SqlCommand)

        Dim p As SqlParameter
        p = cmd.Parameters.Add(Parameters.ID)
        p.SourceColumn = ColumnNames.ID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.JOB_NUMBER)
        p.SourceColumn = ColumnNames.JOB_NUMBER
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.JOB_COMPONENT_NBR)
        p.SourceColumn = ColumnNames.JOB_COMPONENT_NBR
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.SEQ_NBR)
        p.SourceColumn = ColumnNames.SEQ_NBR
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.EMP_CODE)
        p.SourceColumn = ColumnNames.EMP_CODE
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.HOURS_ALLOWED)
        p.SourceColumn = ColumnNames.HOURS_ALLOWED
        p.SourceVersion = DataRowVersion.Current


    End Sub

End Class



