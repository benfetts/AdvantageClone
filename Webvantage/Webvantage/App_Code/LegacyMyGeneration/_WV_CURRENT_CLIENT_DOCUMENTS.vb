
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _WV_CURRENT_CLIENT_DOCUMENTS
    Inherits SqlClientEntity

    Public Sub New()
        Me.QuerySource = "WV_CURRENT_CLIENT_DOCUMENTS"
        Me.MappingName = "WV_CURRENT_CLIENT_DOCUMENTS"
    End Sub

    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean
        Return MyBase.Query.Load()
    End Function

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property CL_CODE() As SqlParameter
            Get
                Return New SqlParameter("CL_CODE", SqlDbType.VarChar, 6)
            End Get
        End Property

        Public Shared ReadOnly Property DOCUMENT_ID() As SqlParameter
            Get
                Return New SqlParameter("DOCUMENT_ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property FILENAME() As SqlParameter
            Get
                Return New SqlParameter("FILENAME", SqlDbType.VarChar, 100)
            End Get
        End Property

        Public Shared ReadOnly Property MIME_TYPE() As SqlParameter
            Get
                Return New SqlParameter("MIME_TYPE", SqlDbType.VarChar, 50)
            End Get
        End Property

        Public Shared ReadOnly Property DESCRIPTION() As SqlParameter
            Get
                Return New SqlParameter("DESCRIPTION", SqlDbType.VarChar, 200)
            End Get
        End Property

        Public Shared ReadOnly Property KEYWORDS() As SqlParameter
            Get
                Return New SqlParameter("KEYWORDS", SqlDbType.VarChar, 255)
            End Get
        End Property

        Public Shared ReadOnly Property UPLOADED_DATE() As SqlParameter
            Get
                Return New SqlParameter("UPLOADED_DATE", SqlDbType.DateTime, 0)
            End Get
        End Property

        Public Shared ReadOnly Property USER_CODE() As SqlParameter
            Get
                Return New SqlParameter("USER_CODE", SqlDbType.VarChar, 100)
            End Get
        End Property

        Public Shared ReadOnly Property FILE_SIZE() As SqlParameter
            Get
                Return New SqlParameter("FILE_SIZE", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property USER_NAME() As SqlParameter
            Get
                Return New SqlParameter("USER_NAME", SqlDbType.VarChar, 30)
            End Get
        End Property

        Public Shared ReadOnly Property REPOSITORY_FILENAME() As SqlParameter
            Get
                Return New SqlParameter("REPOSITORY_FILENAME", SqlDbType.VarChar, 200)
            End Get
        End Property

        Public Shared ReadOnly Property DOCUMENT_TYPE_DESC() As SqlParameter
            Get
                Return New SqlParameter("DOCUMENT_TYPE_DESC", SqlDbType.VarChar, 20)
            End Get
        End Property

        Public Shared ReadOnly Property PRIVATE_FLAG() As SqlParameter
            Get
                Return New SqlParameter("PRIVATE_FLAG", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property LEVEL() As SqlParameter
            Get
                Return New SqlParameter("LEVEL", SqlDbType.VarChar, 20)
            End Get
        End Property

        Public Shared ReadOnly Property PROOFHQ_URL() As SqlParameter
            Get
                Return New SqlParameter("PROOFHQ_URL", SqlDbType.VarChar, 8000)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const CL_CODE As String = "CL_CODE"
        Public Const DOCUMENT_ID As String = "DOCUMENT_ID"
        Public Const FILENAME As String = "FILENAME"
        Public Const MIME_TYPE As String = "MIME_TYPE"
        Public Const DESCRIPTION As String = "DESCRIPTION"
        Public Const KEYWORDS As String = "KEYWORDS"
        Public Const UPLOADED_DATE As String = "UPLOADED_DATE"
        Public Const USER_CODE As String = "USER_CODE"
        Public Const FILE_SIZE As String = "FILE_SIZE"
        Public Const USER_NAME As String = "USER_NAME"
        Public Const REPOSITORY_FILENAME As String = "REPOSITORY_FILENAME"
        Public Const DOCUMENT_TYPE_DESC As String = "DOCUMENT_TYPE_DESC"
        Public Const PRIVATE_FLAG As String = "PRIVATE_FLAG"
        Public Const LEVEL As String = "LEVEL"
        Public Const PROOFHQ_URL As String = "PROOFHQ_URL"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(CL_CODE) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.CL_CODE
                ht(DOCUMENT_ID) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.DOCUMENT_ID
                ht(FILENAME) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.FILENAME
                ht(MIME_TYPE) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.MIME_TYPE
                ht(DESCRIPTION) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.DESCRIPTION
                ht(KEYWORDS) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.KEYWORDS
                ht(UPLOADED_DATE) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.UPLOADED_DATE
                ht(USER_CODE) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.USER_CODE
                ht(FILE_SIZE) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.FILE_SIZE
                ht(USER_NAME) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.USER_NAME
                ht(REPOSITORY_FILENAME) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.REPOSITORY_FILENAME
                ht(DOCUMENT_TYPE_DESC) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.DOCUMENT_TYPE_DESC
                ht(PRIVATE_FLAG) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.PRIVATE_FLAG
                ht(LEVEL) = _WV_CURRENT_CLIENT_DOCUMENTS.PropertyNames.LEVEL
                ht(PROOFHQ_URL) = PropertyNames.PROOFHQ_URL

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const CL_CODE As String = "CL_CODE"
        Public Const DOCUMENT_ID As String = "DOCUMENT_ID"
        Public Const FILENAME As String = "FILENAME"
        Public Const MIME_TYPE As String = "MIME_TYPE"
        Public Const DESCRIPTION As String = "DESCRIPTION"
        Public Const KEYWORDS As String = "KEYWORDS"
        Public Const UPLOADED_DATE As String = "UPLOADED_DATE"
        Public Const USER_CODE As String = "USER_CODE"
        Public Const FILE_SIZE As String = "FILE_SIZE"
        Public Const USER_NAME As String = "USER_NAME"
        Public Const REPOSITORY_FILENAME As String = "REPOSITORY_FILENAME"
        Public Const DOCUMENT_TYPE_DESC As String = "DOCUMENT_TYPE_DESC"
        Public Const PRIVATE_FLAG As String = "PRIVATE_FLAG"
        Public Const LEVEL As String = "LEVEL"
        Public Const PROOFHQ_URL As String = "PROOFHQ_URL"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(CL_CODE) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.CL_CODE
                ht(DOCUMENT_ID) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.DOCUMENT_ID
                ht(FILENAME) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.FILENAME
                ht(MIME_TYPE) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.MIME_TYPE
                ht(DESCRIPTION) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.DESCRIPTION
                ht(KEYWORDS) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.KEYWORDS
                ht(UPLOADED_DATE) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.UPLOADED_DATE
                ht(USER_CODE) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.USER_CODE
                ht(FILE_SIZE) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.FILE_SIZE
                ht(USER_NAME) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.USER_NAME
                ht(REPOSITORY_FILENAME) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.REPOSITORY_FILENAME
                ht(DOCUMENT_TYPE_DESC) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.DOCUMENT_TYPE_DESC
                ht(PRIVATE_FLAG) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.PRIVATE_FLAG
                ht(LEVEL) = _WV_CURRENT_CLIENT_DOCUMENTS.ColumnNames.LEVEL
                ht(PROOFHQ_URL) = ColumnNames.PROOFHQ_URL

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const CL_CODE As String = "s_CL_CODE"
        Public Const DOCUMENT_ID As String = "s_DOCUMENT_ID"
        Public Const FILENAME As String = "s_FILENAME"
        Public Const MIME_TYPE As String = "s_MIME_TYPE"
        Public Const DESCRIPTION As String = "s_DESCRIPTION"
        Public Const KEYWORDS As String = "s_KEYWORDS"
        Public Const UPLOADED_DATE As String = "s_UPLOADED_DATE"
        Public Const USER_CODE As String = "s_USER_CODE"
        Public Const FILE_SIZE As String = "s_FILE_SIZE"
        Public Const USER_NAME As String = "s_USER_NAME"
        Public Const REPOSITORY_FILENAME As String = "s_REPOSITORY_FILENAME"
        Public Const DOCUMENT_TYPE_DESC As String = "s_DOCUMENT_TYPE_DESC"
        Public Const PRIVATE_FLAG As String = "s_PRIVATE_FLAG"
        Public Const LEVEL As String = "s_LEVEL_FLAG"
    End Class
#End Region

#Region "Properties"
    Public Overridable Property CL_CODE() As String
        Get
            Return MyBase.GetString(ColumnNames.CL_CODE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.CL_CODE, Value)
        End Set
    End Property

    Public Overridable Property DOCUMENT_ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.DOCUMENT_ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.DOCUMENT_ID, Value)
        End Set
    End Property

    Public Overridable Property FILENAME() As String
        Get
            Return MyBase.GetString(ColumnNames.FILENAME)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.FILENAME, Value)
        End Set
    End Property

    Public Overridable Property MIME_TYPE() As String
        Get
            Return MyBase.GetString(ColumnNames.MIME_TYPE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.MIME_TYPE, Value)
        End Set
    End Property

    Public Overridable Property DESCRIPTION() As String
        Get
            Return MyBase.GetString(ColumnNames.DESCRIPTION)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.DESCRIPTION, Value)
        End Set
    End Property

    Public Overridable Property KEYWORDS() As String
        Get
            Return MyBase.GetString(ColumnNames.KEYWORDS)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.KEYWORDS, Value)
        End Set
    End Property

    Public Overridable Property UPLOADED_DATE() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.UPLOADED_DATE)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.UPLOADED_DATE, Value)
        End Set
    End Property

    Public Overridable Property USER_CODE() As String
        Get
            Return MyBase.GetString(ColumnNames.USER_CODE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.USER_CODE, Value)
        End Set
    End Property

    Public Overridable Property FILE_SIZE() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.FILE_SIZE)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.FILE_SIZE, Value)
        End Set
    End Property

    Public Overridable Property USER_NAME() As String
        Get
            Return MyBase.GetString(ColumnNames.USER_NAME)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.USER_NAME, Value)
        End Set
    End Property

    Public Overridable Property REPOSITORY_FILENAME() As String
        Get
            Return MyBase.GetString(ColumnNames.REPOSITORY_FILENAME)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.REPOSITORY_FILENAME, Value)
        End Set
    End Property

    Public Overridable Property DOCUMENT_TYPE_DESC() As String
        Get
            Return MyBase.GetString(ColumnNames.DOCUMENT_TYPE_DESC)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.DOCUMENT_TYPE_DESC, Value)
        End Set
    End Property

    Public Overridable Property PRIVATE_FLAG() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.PRIVATE_FLAG)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.PRIVATE_FLAG, Value)
        End Set
    End Property

    Public Overridable Property LEVEL() As String
        Get
            Return MyBase.GetString(ColumnNames.LEVEL)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.LEVEL, Value)
        End Set
    End Property

    Public Overridable Property PROOFHQ_URL() As String
        Get
            Return MyBase.GetString(ColumnNames.PROOFHQ_URL)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.PROOFHQ_URL, Value)
        End Set
    End Property

#End Region

#Region "String Properties"

    Public Overridable Property s_CL_CODE() As String
        Get
            If Me.IsColumnNull(ColumnNames.CL_CODE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.CL_CODE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.CL_CODE)
            Else
                Me.CL_CODE = MyBase.SetStringAsString(ColumnNames.CL_CODE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_DOCUMENT_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.DOCUMENT_ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.DOCUMENT_ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.DOCUMENT_ID)
            Else
                Me.DOCUMENT_ID = MyBase.SetIntegerAsString(ColumnNames.DOCUMENT_ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_FILENAME() As String
        Get
            If Me.IsColumnNull(ColumnNames.FILENAME) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.FILENAME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.FILENAME)
            Else
                Me.FILENAME = MyBase.SetStringAsString(ColumnNames.FILENAME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_MIME_TYPE() As String
        Get
            If Me.IsColumnNull(ColumnNames.MIME_TYPE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.MIME_TYPE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.MIME_TYPE)
            Else
                Me.MIME_TYPE = MyBase.SetStringAsString(ColumnNames.MIME_TYPE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_DESCRIPTION() As String
        Get
            If Me.IsColumnNull(ColumnNames.DESCRIPTION) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.DESCRIPTION)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.DESCRIPTION)
            Else
                Me.DESCRIPTION = MyBase.SetStringAsString(ColumnNames.DESCRIPTION, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_KEYWORDS() As String
        Get
            If Me.IsColumnNull(ColumnNames.KEYWORDS) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.KEYWORDS)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.KEYWORDS)
            Else
                Me.KEYWORDS = MyBase.SetStringAsString(ColumnNames.KEYWORDS, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_UPLOADED_DATE() As String
        Get
            If Me.IsColumnNull(ColumnNames.UPLOADED_DATE) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.UPLOADED_DATE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.UPLOADED_DATE)
            Else
                Me.UPLOADED_DATE = MyBase.SetDateTimeAsString(ColumnNames.UPLOADED_DATE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_USER_CODE() As String
        Get
            If Me.IsColumnNull(ColumnNames.USER_CODE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.USER_CODE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.USER_CODE)
            Else
                Me.USER_CODE = MyBase.SetStringAsString(ColumnNames.USER_CODE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_FILE_SIZE() As String
        Get
            If Me.IsColumnNull(ColumnNames.FILE_SIZE) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.FILE_SIZE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.FILE_SIZE)
            Else
                Me.FILE_SIZE = MyBase.SetIntegerAsString(ColumnNames.FILE_SIZE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_USER_NAME() As String
        Get
            If Me.IsColumnNull(ColumnNames.USER_NAME) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.USER_NAME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.USER_NAME)
            Else
                Me.USER_NAME = MyBase.SetStringAsString(ColumnNames.USER_NAME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_REPOSITORY_FILENAME() As String
        Get
            If Me.IsColumnNull(ColumnNames.REPOSITORY_FILENAME) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.REPOSITORY_FILENAME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.REPOSITORY_FILENAME)
            Else
                Me.REPOSITORY_FILENAME = MyBase.SetStringAsString(ColumnNames.REPOSITORY_FILENAME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_DOCUMENT_TYPE_DESC() As String
        Get
            If Me.IsColumnNull(ColumnNames.DOCUMENT_TYPE_DESC) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.DOCUMENT_TYPE_DESC)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.DOCUMENT_TYPE_DESC)
            Else
                Me.DOCUMENT_TYPE_DESC = MyBase.SetStringAsString(ColumnNames.DOCUMENT_TYPE_DESC, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_PRIVATE_FLAG() As String
        Get
            If Me.IsColumnNull(ColumnNames.PRIVATE_FLAG) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.PRIVATE_FLAG)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.PRIVATE_FLAG)
            Else
                Me.PRIVATE_FLAG = MyBase.SetIntegerAsString(ColumnNames.PRIVATE_FLAG, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_LEVEL() As String
        Get
            If Me.IsColumnNull(ColumnNames.LEVEL) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.LEVEL)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.LEVEL)
            Else
                Me.LEVEL = MyBase.SetStringAsString(ColumnNames.LEVEL, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_PROOFHQ_URL() As String
        Get
            If Me.IsColumnNull(ColumnNames.PROOFHQ_URL) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.PROOFHQ_URL)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.PROOFHQ_URL)
            Else
                Me.LEVEL = MyBase.SetStringAsString(ColumnNames.PROOFHQ_URL, Value)
            End If
        End Set
    End Property

#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property CL_CODE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.CL_CODE, Parameters.CL_CODE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DOCUMENT_ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.DOCUMENT_ID, Parameters.DOCUMENT_ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property FILENAME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.FILENAME, Parameters.FILENAME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property MIME_TYPE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.MIME_TYPE, Parameters.MIME_TYPE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property KEYWORDS() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.KEYWORDS, Parameters.KEYWORDS)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property UPLOADED_DATE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.UPLOADED_DATE, Parameters.UPLOADED_DATE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property USER_CODE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.USER_CODE, Parameters.USER_CODE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property FILE_SIZE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.FILE_SIZE, Parameters.FILE_SIZE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property USER_NAME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.USER_NAME, Parameters.USER_NAME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property REPOSITORY_FILENAME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.REPOSITORY_FILENAME, Parameters.REPOSITORY_FILENAME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DOCUMENT_TYPE_DESC() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.DOCUMENT_TYPE_DESC, Parameters.DOCUMENT_TYPE_DESC)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PRIVATE_FLAG() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.PRIVATE_FLAG, Parameters.PRIVATE_FLAG)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property LEVEL() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.LEVEL, Parameters.LEVEL)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property CL_CODE() As WhereParameter
            Get
                If _CL_CODE_W Is Nothing Then
                    _CL_CODE_W = TearOff.CL_CODE
                End If
                Return _CL_CODE_W
            End Get
        End Property

        Public ReadOnly Property DOCUMENT_ID() As WhereParameter
            Get
                If _DOCUMENT_ID_W Is Nothing Then
                    _DOCUMENT_ID_W = TearOff.DOCUMENT_ID
                End If
                Return _DOCUMENT_ID_W
            End Get
        End Property

        Public ReadOnly Property FILENAME() As WhereParameter
            Get
                If _FILENAME_W Is Nothing Then
                    _FILENAME_W = TearOff.FILENAME
                End If
                Return _FILENAME_W
            End Get
        End Property

        Public ReadOnly Property MIME_TYPE() As WhereParameter
            Get
                If _MIME_TYPE_W Is Nothing Then
                    _MIME_TYPE_W = TearOff.MIME_TYPE
                End If
                Return _MIME_TYPE_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As WhereParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Public ReadOnly Property KEYWORDS() As WhereParameter
            Get
                If _KEYWORDS_W Is Nothing Then
                    _KEYWORDS_W = TearOff.KEYWORDS
                End If
                Return _KEYWORDS_W
            End Get
        End Property

        Public ReadOnly Property UPLOADED_DATE() As WhereParameter
            Get
                If _UPLOADED_DATE_W Is Nothing Then
                    _UPLOADED_DATE_W = TearOff.UPLOADED_DATE
                End If
                Return _UPLOADED_DATE_W
            End Get
        End Property

        Public ReadOnly Property USER_CODE() As WhereParameter
            Get
                If _USER_CODE_W Is Nothing Then
                    _USER_CODE_W = TearOff.USER_CODE
                End If
                Return _USER_CODE_W
            End Get
        End Property

        Public ReadOnly Property FILE_SIZE() As WhereParameter
            Get
                If _FILE_SIZE_W Is Nothing Then
                    _FILE_SIZE_W = TearOff.FILE_SIZE
                End If
                Return _FILE_SIZE_W
            End Get
        End Property

        Public ReadOnly Property USER_NAME() As WhereParameter
            Get
                If _USER_NAME_W Is Nothing Then
                    _USER_NAME_W = TearOff.USER_NAME
                End If
                Return _USER_NAME_W
            End Get
        End Property

        Public ReadOnly Property REPOSITORY_FILENAME() As WhereParameter
            Get
                If _REPOSITORY_FILENAME_W Is Nothing Then
                    _REPOSITORY_FILENAME_W = TearOff.REPOSITORY_FILENAME
                End If
                Return _REPOSITORY_FILENAME_W
            End Get
        End Property

        Public ReadOnly Property DOCUMENT_TYPE_DESC() As WhereParameter
            Get
                If _DOCUMENT_TYPE_DESC_W Is Nothing Then
                    _DOCUMENT_TYPE_DESC_W = TearOff.DOCUMENT_TYPE_DESC
                End If
                Return _DOCUMENT_TYPE_DESC_W
            End Get
        End Property

        Public ReadOnly Property PRIVATE_FLAG() As WhereParameter
            Get
                If _PRIVATE_FLAG_W Is Nothing Then
                    _PRIVATE_FLAG_W = TearOff.PRIVATE_FLAG
                End If
                Return _PRIVATE_FLAG_W
            End Get
        End Property

        Public ReadOnly Property LEVEL() As WhereParameter
            Get
                If _LEVEL_W Is Nothing Then
                    _LEVEL_W = TearOff.LEVEL
                End If
                Return _LEVEL_W
            End Get
        End Property

        Private _CL_CODE_W As WhereParameter = Nothing
        Private _DOCUMENT_ID_W As WhereParameter = Nothing
        Private _FILENAME_W As WhereParameter = Nothing
        Private _MIME_TYPE_W As WhereParameter = Nothing
        Private _DESCRIPTION_W As WhereParameter = Nothing
        Private _KEYWORDS_W As WhereParameter = Nothing
        Private _UPLOADED_DATE_W As WhereParameter = Nothing
        Private _USER_CODE_W As WhereParameter = Nothing
        Private _FILE_SIZE_W As WhereParameter = Nothing
        Private _USER_NAME_W As WhereParameter = Nothing
        Private _REPOSITORY_FILENAME_W As WhereParameter = Nothing
        Private _DOCUMENT_TYPE_DESC_W As WhereParameter = Nothing
        Private _PRIVATE_FLAG_W As WhereParameter = Nothing
        Private _LEVEL_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _CL_CODE_W = Nothing
            _DOCUMENT_ID_W = Nothing
            _FILENAME_W = Nothing
            _MIME_TYPE_W = Nothing
            _DESCRIPTION_W = Nothing
            _KEYWORDS_W = Nothing
            _UPLOADED_DATE_W = Nothing
            _USER_CODE_W = Nothing
            _FILE_SIZE_W = Nothing
            _USER_NAME_W = Nothing
            _REPOSITORY_FILENAME_W = Nothing
            _DOCUMENT_TYPE_DESC_W = Nothing
            _PRIVATE_FLAG_W = Nothing
            _LEVEL_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property CL_CODE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CL_CODE, Parameters.CL_CODE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DOCUMENT_ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DOCUMENT_ID, Parameters.DOCUMENT_ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property FILENAME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.FILENAME, Parameters.FILENAME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property MIME_TYPE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.MIME_TYPE, Parameters.MIME_TYPE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property KEYWORDS() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.KEYWORDS, Parameters.KEYWORDS)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property UPLOADED_DATE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.UPLOADED_DATE, Parameters.UPLOADED_DATE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property USER_CODE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.USER_CODE, Parameters.USER_CODE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property FILE_SIZE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.FILE_SIZE, Parameters.FILE_SIZE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property USER_NAME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.USER_NAME, Parameters.USER_NAME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property REPOSITORY_FILENAME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.REPOSITORY_FILENAME, Parameters.REPOSITORY_FILENAME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DOCUMENT_TYPE_DESC() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DOCUMENT_TYPE_DESC, Parameters.DOCUMENT_TYPE_DESC)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PRIVATE_FLAG() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.PRIVATE_FLAG, Parameters.PRIVATE_FLAG)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property LEVEL() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.LEVEL, Parameters.LEVEL)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property CL_CODE() As AggregateParameter
            Get
                If _CL_CODE_W Is Nothing Then
                    _CL_CODE_W = TearOff.CL_CODE
                End If
                Return _CL_CODE_W
            End Get
        End Property

        Public ReadOnly Property DOCUMENT_ID() As AggregateParameter
            Get
                If _DOCUMENT_ID_W Is Nothing Then
                    _DOCUMENT_ID_W = TearOff.DOCUMENT_ID
                End If
                Return _DOCUMENT_ID_W
            End Get
        End Property

        Public ReadOnly Property FILENAME() As AggregateParameter
            Get
                If _FILENAME_W Is Nothing Then
                    _FILENAME_W = TearOff.FILENAME
                End If
                Return _FILENAME_W
            End Get
        End Property

        Public ReadOnly Property MIME_TYPE() As AggregateParameter
            Get
                If _MIME_TYPE_W Is Nothing Then
                    _MIME_TYPE_W = TearOff.MIME_TYPE
                End If
                Return _MIME_TYPE_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As AggregateParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Public ReadOnly Property KEYWORDS() As AggregateParameter
            Get
                If _KEYWORDS_W Is Nothing Then
                    _KEYWORDS_W = TearOff.KEYWORDS
                End If
                Return _KEYWORDS_W
            End Get
        End Property

        Public ReadOnly Property UPLOADED_DATE() As AggregateParameter
            Get
                If _UPLOADED_DATE_W Is Nothing Then
                    _UPLOADED_DATE_W = TearOff.UPLOADED_DATE
                End If
                Return _UPLOADED_DATE_W
            End Get
        End Property

        Public ReadOnly Property USER_CODE() As AggregateParameter
            Get
                If _USER_CODE_W Is Nothing Then
                    _USER_CODE_W = TearOff.USER_CODE
                End If
                Return _USER_CODE_W
            End Get
        End Property

        Public ReadOnly Property FILE_SIZE() As AggregateParameter
            Get
                If _FILE_SIZE_W Is Nothing Then
                    _FILE_SIZE_W = TearOff.FILE_SIZE
                End If
                Return _FILE_SIZE_W
            End Get
        End Property

        Public ReadOnly Property USER_NAME() As AggregateParameter
            Get
                If _USER_NAME_W Is Nothing Then
                    _USER_NAME_W = TearOff.USER_NAME
                End If
                Return _USER_NAME_W
            End Get
        End Property

        Public ReadOnly Property REPOSITORY_FILENAME() As AggregateParameter
            Get
                If _REPOSITORY_FILENAME_W Is Nothing Then
                    _REPOSITORY_FILENAME_W = TearOff.REPOSITORY_FILENAME
                End If
                Return _REPOSITORY_FILENAME_W
            End Get
        End Property

        Public ReadOnly Property DOCUMENT_TYPE_DESC() As AggregateParameter
            Get
                If _DOCUMENT_TYPE_DESC_W Is Nothing Then
                    _DOCUMENT_TYPE_DESC_W = TearOff.DOCUMENT_TYPE_DESC
                End If
                Return _DOCUMENT_TYPE_DESC_W
            End Get
        End Property

        Public ReadOnly Property PRIVATE_FLAG() As AggregateParameter
            Get
                If _PRIVATE_FLAG_W Is Nothing Then
                    _PRIVATE_FLAG_W = TearOff.PRIVATE_FLAG
                End If
                Return _PRIVATE_FLAG_W
            End Get
        End Property

        Public ReadOnly Property LEVEL() As AggregateParameter
            Get
                If _LEVEL_W Is Nothing Then
                    _LEVEL_W = TearOff.LEVEL
                End If
                Return _LEVEL_W
            End Get
        End Property

        Private _CL_CODE_W As AggregateParameter = Nothing
        Private _DOCUMENT_ID_W As AggregateParameter = Nothing
        Private _FILENAME_W As AggregateParameter = Nothing
        Private _MIME_TYPE_W As AggregateParameter = Nothing
        Private _DESCRIPTION_W As AggregateParameter = Nothing
        Private _KEYWORDS_W As AggregateParameter = Nothing
        Private _UPLOADED_DATE_W As AggregateParameter = Nothing
        Private _USER_CODE_W As AggregateParameter = Nothing
        Private _FILE_SIZE_W As AggregateParameter = Nothing
        Private _USER_NAME_W As AggregateParameter = Nothing
        Private _REPOSITORY_FILENAME_W As AggregateParameter = Nothing
        Private _DOCUMENT_TYPE_DESC_W As AggregateParameter = Nothing
        Private _PRIVATE_FLAG_W As AggregateParameter = Nothing
        Private _LEVEL_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _CL_CODE_W = Nothing
            _DOCUMENT_ID_W = Nothing
            _FILENAME_W = Nothing
            _MIME_TYPE_W = Nothing
            _DESCRIPTION_W = Nothing
            _KEYWORDS_W = Nothing
            _UPLOADED_DATE_W = Nothing
            _USER_CODE_W = Nothing
            _FILE_SIZE_W = Nothing
            _USER_NAME_W = Nothing
            _REPOSITORY_FILENAME_W = Nothing
            _DOCUMENT_TYPE_DESC_W = Nothing
            _PRIVATE_FLAG_W = Nothing
            _LEVEL_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand
        Return Nothing
    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand
        Return Nothing
    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand
        Return Nothing
    End Function

End Class

