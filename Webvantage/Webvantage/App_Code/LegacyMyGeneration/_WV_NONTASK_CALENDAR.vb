
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _WV_NONTASK_CALENDAR
    Inherits SqlClientEntity

    Public Sub New()
        Me.QuerySource = "WV_NONTASK_CALENDAR"
        Me.MappingName = "WV_NONTASK_CALENDAR"
    End Sub

    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean
        Return MyBase.Query.Load()
    End Function

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property NON_TASK_ID() As SqlParameter
            Get
                Return New SqlParameter("NON_TASK_ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property EMP_CODE() As SqlParameter
            Get
                Return New SqlParameter("EMP_CODE", SqlDbType.VarChar, 1)
            End Get
        End Property

        Public Shared ReadOnly Property EMP_FNAME() As SqlParameter
            Get
                Return New SqlParameter("EMP_FNAME", SqlDbType.VarChar, 1)
            End Get
        End Property

        Public Shared ReadOnly Property EMP_MI() As SqlParameter
            Get
                Return New SqlParameter("EMP_MI", SqlDbType.VarChar, 1)
            End Get
        End Property

        Public Shared ReadOnly Property EMP_LNAME() As SqlParameter
            Get
                Return New SqlParameter("EMP_LNAME", SqlDbType.VarChar, 1)
            End Get
        End Property

        Public Shared ReadOnly Property TYPE() As SqlParameter
            Get
                Return New SqlParameter("TYPE", SqlDbType.VarChar, 1)
            End Get
        End Property

        Public Shared ReadOnly Property NON_TASK_DESC() As SqlParameter
            Get
                Return New SqlParameter("NON_TASK_DESC", SqlDbType.VarChar, 1)
            End Get
        End Property

        Public Shared ReadOnly Property START_TIME() As SqlParameter
            Get
                Return New SqlParameter("START_TIME", SqlDbType.DateTime, 0)
            End Get
        End Property

        Public Shared ReadOnly Property END_TIME() As SqlParameter
            Get
                Return New SqlParameter("END_TIME", SqlDbType.DateTime, 0)
            End Get
        End Property

        Public Shared ReadOnly Property TempCompDate() As SqlParameter
            Get
                Return New SqlParameter("TempCompDate", SqlDbType.DateTime, 0)
            End Get
        End Property

        Public Shared ReadOnly Property HOURS() As SqlParameter
            Get
                Return New SqlParameter("HOURS", SqlDbType.Decimal, 0)
            End Get
        End Property

        Public Shared ReadOnly Property CATEGORY() As SqlParameter
            Get
                Return New SqlParameter("CATEGORY", SqlDbType.VarChar, 1)
            End Get
        End Property

        Public Shared ReadOnly Property ThisStartDay() As SqlParameter
            Get
                Return New SqlParameter("ThisStartDay", SqlDbType.VarChar, 1)
            End Get
        End Property

        Public Shared ReadOnly Property ThisEndDay() As SqlParameter
            Get
                Return New SqlParameter("ThisEndDay", SqlDbType.VarChar, 1)
            End Get
        End Property

        Public Shared ReadOnly Property ALL_DAY() As SqlParameter
            Get
                Return New SqlParameter("ALL_DAY", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property START_DATE() As SqlParameter
            Get
                Return New SqlParameter("START_DATE", SqlDbType.DateTime, 0)
            End Get
        End Property

        Public Shared ReadOnly Property END_DATE() As SqlParameter
            Get
                Return New SqlParameter("END_DATE", SqlDbType.DateTime, 0)
            End Get
        End Property

        Public Shared ReadOnly Property DESCRIPTION() As SqlParameter
            Get
                Return New SqlParameter("DESCRIPTION", SqlDbType.VarChar, 1)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const NON_TASK_ID As String = "NON_TASK_ID"
        Public Const EMP_CODE As String = "EMP_CODE"
        Public Const EMP_FNAME As String = "EMP_FNAME"
        Public Const EMP_MI As String = "EMP_MI"
        Public Const EMP_LNAME As String = "EMP_LNAME"
        Public Const TYPE As String = "TYPE"
        Public Const NON_TASK_DESC As String = "NON_TASK_DESC"
        Public Const START_TIME As String = "START_TIME"
        Public Const END_TIME As String = "END_TIME"
        Public Const TempCompDate As String = "TempCompDate"
        Public Const HOURS As String = "HOURS"
        Public Const CATEGORY As String = "CATEGORY"
        Public Const ThisStartDay As String = "ThisStartDay"
        Public Const ThisEndDay As String = "ThisEndDay"
        Public Const ALL_DAY As String = "ALL_DAY"
        Public Const START_DATE As String = "START_DATE"
        Public Const END_DATE As String = "END_DATE"
        Public Const DESCRIPTION As String = "DESCRIPTION"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(NON_TASK_ID) = _WV_NONTASK_CALENDAR.PropertyNames.NON_TASK_ID
                ht(EMP_CODE) = _WV_NONTASK_CALENDAR.PropertyNames.EMP_CODE
                ht(EMP_FNAME) = _WV_NONTASK_CALENDAR.PropertyNames.EMP_FNAME
                ht(EMP_MI) = _WV_NONTASK_CALENDAR.PropertyNames.EMP_MI
                ht(EMP_LNAME) = _WV_NONTASK_CALENDAR.PropertyNames.EMP_LNAME
                ht(TYPE) = _WV_NONTASK_CALENDAR.PropertyNames.TYPE
                ht(NON_TASK_DESC) = _WV_NONTASK_CALENDAR.PropertyNames.NON_TASK_DESC
                ht(START_TIME) = _WV_NONTASK_CALENDAR.PropertyNames.START_TIME
                ht(END_TIME) = _WV_NONTASK_CALENDAR.PropertyNames.END_TIME
                ht(TempCompDate) = _WV_NONTASK_CALENDAR.PropertyNames.TempCompDate
                ht(HOURS) = _WV_NONTASK_CALENDAR.PropertyNames.HOURS
                ht(CATEGORY) = _WV_NONTASK_CALENDAR.PropertyNames.CATEGORY
                ht(ThisStartDay) = _WV_NONTASK_CALENDAR.PropertyNames.ThisStartDay
                ht(ThisEndDay) = _WV_NONTASK_CALENDAR.PropertyNames.ThisEndDay
                ht(ALL_DAY) = _WV_NONTASK_CALENDAR.PropertyNames.ALL_DAY
                ht(START_DATE) = _WV_NONTASK_CALENDAR.PropertyNames.START_DATE
                ht(END_DATE) = _WV_NONTASK_CALENDAR.PropertyNames.END_DATE
                ht(DESCRIPTION) = _WV_NONTASK_CALENDAR.PropertyNames.DESCRIPTION

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const NON_TASK_ID As String = "NON_TASK_ID"
        Public Const EMP_CODE As String = "EMP_CODE"
        Public Const EMP_FNAME As String = "EMP_FNAME"
        Public Const EMP_MI As String = "EMP_MI"
        Public Const EMP_LNAME As String = "EMP_LNAME"
        Public Const TYPE As String = "TYPE"
        Public Const NON_TASK_DESC As String = "NON_TASK_DESC"
        Public Const START_TIME As String = "START_TIME"
        Public Const END_TIME As String = "END_TIME"
        Public Const TempCompDate As String = "TempCompDate"
        Public Const HOURS As String = "HOURS"
        Public Const CATEGORY As String = "CATEGORY"
        Public Const ThisStartDay As String = "ThisStartDay"
        Public Const ThisEndDay As String = "ThisEndDay"
        Public Const ALL_DAY As String = "ALL_DAY"
        Public Const START_DATE As String = "START_DATE"
        Public Const END_DATE As String = "END_DATE"
        Public Const DESCRIPTION As String = "DESCRIPTION"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(NON_TASK_ID) = _WV_NONTASK_CALENDAR.ColumnNames.NON_TASK_ID
                ht(EMP_CODE) = _WV_NONTASK_CALENDAR.ColumnNames.EMP_CODE
                ht(EMP_FNAME) = _WV_NONTASK_CALENDAR.ColumnNames.EMP_FNAME
                ht(EMP_MI) = _WV_NONTASK_CALENDAR.ColumnNames.EMP_MI
                ht(EMP_LNAME) = _WV_NONTASK_CALENDAR.ColumnNames.EMP_LNAME
                ht(TYPE) = _WV_NONTASK_CALENDAR.ColumnNames.TYPE
                ht(NON_TASK_DESC) = _WV_NONTASK_CALENDAR.ColumnNames.NON_TASK_DESC
                ht(START_TIME) = _WV_NONTASK_CALENDAR.ColumnNames.START_TIME
                ht(END_TIME) = _WV_NONTASK_CALENDAR.ColumnNames.END_TIME
                ht(TempCompDate) = _WV_NONTASK_CALENDAR.ColumnNames.TempCompDate
                ht(HOURS) = _WV_NONTASK_CALENDAR.ColumnNames.HOURS
                ht(CATEGORY) = _WV_NONTASK_CALENDAR.ColumnNames.CATEGORY
                ht(ThisStartDay) = _WV_NONTASK_CALENDAR.ColumnNames.ThisStartDay
                ht(ThisEndDay) = _WV_NONTASK_CALENDAR.ColumnNames.ThisEndDay
                ht(ALL_DAY) = _WV_NONTASK_CALENDAR.ColumnNames.ALL_DAY
                ht(START_DATE) = _WV_NONTASK_CALENDAR.ColumnNames.START_DATE
                ht(END_DATE) = _WV_NONTASK_CALENDAR.ColumnNames.END_DATE
                ht(DESCRIPTION) = _WV_NONTASK_CALENDAR.ColumnNames.DESCRIPTION

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const NON_TASK_ID As String = "s_NON_TASK_ID"
        Public Const EMP_CODE As String = "s_EMP_CODE"
        Public Const EMP_FNAME As String = "s_EMP_FNAME"
        Public Const EMP_MI As String = "s_EMP_MI"
        Public Const EMP_LNAME As String = "s_EMP_LNAME"
        Public Const TYPE As String = "s_TYPE"
        Public Const NON_TASK_DESC As String = "s_NON_TASK_DESC"
        Public Const START_TIME As String = "s_START_TIME"
        Public Const END_TIME As String = "s_END_TIME"
        Public Const TempCompDate As String = "s_TempCompDate"
        Public Const HOURS As String = "s_HOURS"
        Public Const CATEGORY As String = "s_CATEGORY"
        Public Const ThisStartDay As String = "s_ThisStartDay"
        Public Const ThisEndDay As String = "s_ThisEndDay"
        Public Const ALL_DAY As String = "s_ALL_DAY"
        Public Const START_DATE As String = "s_START_DATE"
        Public Const END_DATE As String = "s_END_DATE"
        Public Const DESCRIPTION As String = "s_DESCRIPTION"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property NON_TASK_ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.NON_TASK_ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.NON_TASK_ID, Value)
        End Set
    End Property

    Public Overridable Property EMP_CODE() As String
        Get
            Return MyBase.GetString(ColumnNames.EMP_CODE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.EMP_CODE, Value)
        End Set
    End Property

    Public Overridable Property EMP_FNAME() As String
        Get
            Return MyBase.GetString(ColumnNames.EMP_FNAME)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.EMP_FNAME, Value)
        End Set
    End Property

    Public Overridable Property EMP_MI() As String
        Get
            Return MyBase.GetString(ColumnNames.EMP_MI)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.EMP_MI, Value)
        End Set
    End Property

    Public Overridable Property EMP_LNAME() As String
        Get
            Return MyBase.GetString(ColumnNames.EMP_LNAME)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.EMP_LNAME, Value)
        End Set
    End Property

    Public Overridable Property TYPE() As String
        Get
            Return MyBase.GetString(ColumnNames.TYPE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.TYPE, Value)
        End Set
    End Property

    Public Overridable Property NON_TASK_DESC() As String
        Get
            Return MyBase.GetString(ColumnNames.NON_TASK_DESC)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.NON_TASK_DESC, Value)
        End Set
    End Property

    Public Overridable Property START_TIME() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.START_TIME)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.START_TIME, Value)
        End Set
    End Property

    Public Overridable Property END_TIME() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.END_TIME)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.END_TIME, Value)
        End Set
    End Property

    Public Overridable Property TempCompDate() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.TempCompDate)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.TempCompDate, Value)
        End Set
    End Property

    Public Overridable Property HOURS() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.HOURS)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.HOURS, Value)
        End Set
    End Property

    Public Overridable Property CATEGORY() As String
        Get
            Return MyBase.GetString(ColumnNames.CATEGORY)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.CATEGORY, Value)
        End Set
    End Property

    Public Overridable Property ThisStartDay() As String
        Get
            Return MyBase.GetString(ColumnNames.ThisStartDay)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.ThisStartDay, Value)
        End Set
    End Property

    Public Overridable Property ThisEndDay() As String
        Get
            Return MyBase.GetString(ColumnNames.ThisEndDay)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.ThisEndDay, Value)
        End Set
    End Property

    Public Overridable Property ALL_DAY() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.ALL_DAY)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.ALL_DAY, Value)
        End Set
    End Property

    Public Overridable Property START_DATE() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.START_DATE)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.START_DATE, Value)
        End Set
    End Property

    Public Overridable Property END_DATE() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.END_DATE)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.END_DATE, Value)
        End Set
    End Property

    Public Overridable Property DESCRIPTION() As String
        Get
            Return MyBase.GetString(ColumnNames.DESCRIPTION)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.DESCRIPTION, Value)
        End Set
    End Property


#End Region

#Region "String Properties"

    Public Overridable Property s_NON_TASK_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.NON_TASK_ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.NON_TASK_ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.NON_TASK_ID)
            Else
                Me.NON_TASK_ID = MyBase.SetIntegerAsString(ColumnNames.NON_TASK_ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EMP_CODE() As String
        Get
            If Me.IsColumnNull(ColumnNames.EMP_CODE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.EMP_CODE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.EMP_CODE)
            Else
                Me.EMP_CODE = MyBase.SetStringAsString(ColumnNames.EMP_CODE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EMP_FNAME() As String
        Get
            If Me.IsColumnNull(ColumnNames.EMP_FNAME) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.EMP_FNAME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.EMP_FNAME)
            Else
                Me.EMP_FNAME = MyBase.SetStringAsString(ColumnNames.EMP_FNAME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EMP_MI() As String
        Get
            If Me.IsColumnNull(ColumnNames.EMP_MI) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.EMP_MI)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.EMP_MI)
            Else
                Me.EMP_MI = MyBase.SetStringAsString(ColumnNames.EMP_MI, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EMP_LNAME() As String
        Get
            If Me.IsColumnNull(ColumnNames.EMP_LNAME) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.EMP_LNAME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.EMP_LNAME)
            Else
                Me.EMP_LNAME = MyBase.SetStringAsString(ColumnNames.EMP_LNAME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_TYPE() As String
        Get
            If Me.IsColumnNull(ColumnNames.TYPE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.TYPE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.TYPE)
            Else
                Me.TYPE = MyBase.SetStringAsString(ColumnNames.TYPE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_NON_TASK_DESC() As String
        Get
            If Me.IsColumnNull(ColumnNames.NON_TASK_DESC) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.NON_TASK_DESC)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.NON_TASK_DESC)
            Else
                Me.NON_TASK_DESC = MyBase.SetStringAsString(ColumnNames.NON_TASK_DESC, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_START_TIME() As String
        Get
            If Me.IsColumnNull(ColumnNames.START_TIME) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.START_TIME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.START_TIME)
            Else
                Me.START_TIME = MyBase.SetDateTimeAsString(ColumnNames.START_TIME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_END_TIME() As String
        Get
            If Me.IsColumnNull(ColumnNames.END_TIME) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.END_TIME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.END_TIME)
            Else
                Me.END_TIME = MyBase.SetDateTimeAsString(ColumnNames.END_TIME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_TempCompDate() As String
        Get
            If Me.IsColumnNull(ColumnNames.TempCompDate) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.TempCompDate)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.TempCompDate)
            Else
                Me.TempCompDate = MyBase.SetDateTimeAsString(ColumnNames.TempCompDate, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_HOURS() As String
        Get
            If Me.IsColumnNull(ColumnNames.HOURS) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.HOURS)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.HOURS)
            Else
                Me.HOURS = MyBase.SetDecimalAsString(ColumnNames.HOURS, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_CATEGORY() As String
        Get
            If Me.IsColumnNull(ColumnNames.CATEGORY) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.CATEGORY)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.CATEGORY)
            Else
                Me.CATEGORY = MyBase.SetStringAsString(ColumnNames.CATEGORY, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ThisStartDay() As String
        Get
            If Me.IsColumnNull(ColumnNames.ThisStartDay) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.ThisStartDay)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.ThisStartDay)
            Else
                Me.ThisStartDay = MyBase.SetStringAsString(ColumnNames.ThisStartDay, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ThisEndDay() As String
        Get
            If Me.IsColumnNull(ColumnNames.ThisEndDay) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.ThisEndDay)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.ThisEndDay)
            Else
                Me.ThisEndDay = MyBase.SetStringAsString(ColumnNames.ThisEndDay, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ALL_DAY() As String
        Get
            If Me.IsColumnNull(ColumnNames.ALL_DAY) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.ALL_DAY)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.ALL_DAY)
            Else
                Me.ALL_DAY = MyBase.SetIntegerAsString(ColumnNames.ALL_DAY, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_START_DATE() As String
        Get
            If Me.IsColumnNull(ColumnNames.START_DATE) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.START_DATE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.START_DATE)
            Else
                Me.START_DATE = MyBase.SetDateTimeAsString(ColumnNames.START_DATE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_END_DATE() As String
        Get
            If Me.IsColumnNull(ColumnNames.END_DATE) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.END_DATE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.END_DATE)
            Else
                Me.END_DATE = MyBase.SetDateTimeAsString(ColumnNames.END_DATE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_DESCRIPTION() As String
        Get
            If Me.IsColumnNull(ColumnNames.DESCRIPTION) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.DESCRIPTION)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.DESCRIPTION)
            Else
                Me.DESCRIPTION = MyBase.SetStringAsString(ColumnNames.DESCRIPTION, Value)
            End If
        End Set
    End Property


#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property NON_TASK_ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.NON_TASK_ID, Parameters.NON_TASK_ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_CODE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EMP_CODE, Parameters.EMP_CODE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_FNAME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EMP_FNAME, Parameters.EMP_FNAME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_MI() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EMP_MI, Parameters.EMP_MI)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_LNAME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EMP_LNAME, Parameters.EMP_LNAME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property TYPE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.TYPE, Parameters.TYPE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property NON_TASK_DESC() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.NON_TASK_DESC, Parameters.NON_TASK_DESC)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property START_TIME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.START_TIME, Parameters.START_TIME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property END_TIME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.END_TIME, Parameters.END_TIME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property TempCompDate() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.TempCompDate, Parameters.TempCompDate)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property HOURS() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.HOURS, Parameters.HOURS)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CATEGORY() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.CATEGORY, Parameters.CATEGORY)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ThisStartDay() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ThisStartDay, Parameters.ThisStartDay)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ThisEndDay() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ThisEndDay, Parameters.ThisEndDay)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ALL_DAY() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ALL_DAY, Parameters.ALL_DAY)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property START_DATE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.START_DATE, Parameters.START_DATE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property END_DATE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.END_DATE, Parameters.END_DATE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property


            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property NON_TASK_ID() As WhereParameter
            Get
                If _NON_TASK_ID_W Is Nothing Then
                    _NON_TASK_ID_W = TearOff.NON_TASK_ID
                End If
                Return _NON_TASK_ID_W
            End Get
        End Property

        Public ReadOnly Property EMP_CODE() As WhereParameter
            Get
                If _EMP_CODE_W Is Nothing Then
                    _EMP_CODE_W = TearOff.EMP_CODE
                End If
                Return _EMP_CODE_W
            End Get
        End Property

        Public ReadOnly Property EMP_FNAME() As WhereParameter
            Get
                If _EMP_FNAME_W Is Nothing Then
                    _EMP_FNAME_W = TearOff.EMP_FNAME
                End If
                Return _EMP_FNAME_W
            End Get
        End Property

        Public ReadOnly Property EMP_MI() As WhereParameter
            Get
                If _EMP_MI_W Is Nothing Then
                    _EMP_MI_W = TearOff.EMP_MI
                End If
                Return _EMP_MI_W
            End Get
        End Property

        Public ReadOnly Property EMP_LNAME() As WhereParameter
            Get
                If _EMP_LNAME_W Is Nothing Then
                    _EMP_LNAME_W = TearOff.EMP_LNAME
                End If
                Return _EMP_LNAME_W
            End Get
        End Property

        Public ReadOnly Property TYPE() As WhereParameter
            Get
                If _TYPE_W Is Nothing Then
                    _TYPE_W = TearOff.TYPE
                End If
                Return _TYPE_W
            End Get
        End Property

        Public ReadOnly Property NON_TASK_DESC() As WhereParameter
            Get
                If _NON_TASK_DESC_W Is Nothing Then
                    _NON_TASK_DESC_W = TearOff.NON_TASK_DESC
                End If
                Return _NON_TASK_DESC_W
            End Get
        End Property

        Public ReadOnly Property START_TIME() As WhereParameter
            Get
                If _START_TIME_W Is Nothing Then
                    _START_TIME_W = TearOff.START_TIME
                End If
                Return _START_TIME_W
            End Get
        End Property

        Public ReadOnly Property END_TIME() As WhereParameter
            Get
                If _END_TIME_W Is Nothing Then
                    _END_TIME_W = TearOff.END_TIME
                End If
                Return _END_TIME_W
            End Get
        End Property

        Public ReadOnly Property TempCompDate() As WhereParameter
            Get
                If _TempCompDate_W Is Nothing Then
                    _TempCompDate_W = TearOff.TempCompDate
                End If
                Return _TempCompDate_W
            End Get
        End Property

        Public ReadOnly Property HOURS() As WhereParameter
            Get
                If _HOURS_W Is Nothing Then
                    _HOURS_W = TearOff.HOURS
                End If
                Return _HOURS_W
            End Get
        End Property

        Public ReadOnly Property CATEGORY() As WhereParameter
            Get
                If _CATEGORY_W Is Nothing Then
                    _CATEGORY_W = TearOff.CATEGORY
                End If
                Return _CATEGORY_W
            End Get
        End Property

        Public ReadOnly Property ThisStartDay() As WhereParameter
            Get
                If _ThisStartDay_W Is Nothing Then
                    _ThisStartDay_W = TearOff.ThisStartDay
                End If
                Return _ThisStartDay_W
            End Get
        End Property

        Public ReadOnly Property ThisEndDay() As WhereParameter
            Get
                If _ThisEndDay_W Is Nothing Then
                    _ThisEndDay_W = TearOff.ThisEndDay
                End If
                Return _ThisEndDay_W
            End Get
        End Property

        Public ReadOnly Property ALL_DAY() As WhereParameter
            Get
                If _ALL_DAY_W Is Nothing Then
                    _ALL_DAY_W = TearOff.ALL_DAY
                End If
                Return _ALL_DAY_W
            End Get
        End Property

        Public ReadOnly Property START_DATE() As WhereParameter
            Get
                If _START_DATE_W Is Nothing Then
                    _START_DATE_W = TearOff.START_DATE
                End If
                Return _START_DATE_W
            End Get
        End Property

        Public ReadOnly Property END_DATE() As WhereParameter
            Get
                If _END_DATE_W Is Nothing Then
                    _END_DATE_W = TearOff.END_DATE
                End If
                Return _END_DATE_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As WhereParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Private _NON_TASK_ID_W As WhereParameter = Nothing
        Private _EMP_CODE_W As WhereParameter = Nothing
        Private _EMP_FNAME_W As WhereParameter = Nothing
        Private _EMP_MI_W As WhereParameter = Nothing
        Private _EMP_LNAME_W As WhereParameter = Nothing
        Private _TYPE_W As WhereParameter = Nothing
        Private _NON_TASK_DESC_W As WhereParameter = Nothing
        Private _START_TIME_W As WhereParameter = Nothing
        Private _END_TIME_W As WhereParameter = Nothing
        Private _TempCompDate_W As WhereParameter = Nothing
        Private _HOURS_W As WhereParameter = Nothing
        Private _CATEGORY_W As WhereParameter = Nothing
        Private _ThisStartDay_W As WhereParameter = Nothing
        Private _ThisEndDay_W As WhereParameter = Nothing
        Private _ALL_DAY_W As WhereParameter = Nothing
        Private _START_DATE_W As WhereParameter = Nothing
        Private _END_DATE_W As WhereParameter = Nothing
        Private _DESCRIPTION_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _NON_TASK_ID_W = Nothing
            _EMP_CODE_W = Nothing
            _EMP_FNAME_W = Nothing
            _EMP_MI_W = Nothing
            _EMP_LNAME_W = Nothing
            _TYPE_W = Nothing
            _NON_TASK_DESC_W = Nothing
            _START_TIME_W = Nothing
            _END_TIME_W = Nothing
            _TempCompDate_W = Nothing
            _HOURS_W = Nothing
            _CATEGORY_W = Nothing
            _ThisStartDay_W = Nothing
            _ThisEndDay_W = Nothing
            _ALL_DAY_W = Nothing
            _START_DATE_W = Nothing
            _END_DATE_W = Nothing
            _DESCRIPTION_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property NON_TASK_ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.NON_TASK_ID, Parameters.NON_TASK_ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_CODE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMP_CODE, Parameters.EMP_CODE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_FNAME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMP_FNAME, Parameters.EMP_FNAME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_MI() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMP_MI, Parameters.EMP_MI)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMP_LNAME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMP_LNAME, Parameters.EMP_LNAME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property TYPE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.TYPE, Parameters.TYPE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property NON_TASK_DESC() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.NON_TASK_DESC, Parameters.NON_TASK_DESC)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property START_TIME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.START_TIME, Parameters.START_TIME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property END_TIME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.END_TIME, Parameters.END_TIME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property TempCompDate() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.TempCompDate, Parameters.TempCompDate)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property HOURS() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.HOURS, Parameters.HOURS)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CATEGORY() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CATEGORY, Parameters.CATEGORY)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ThisStartDay() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ThisStartDay, Parameters.ThisStartDay)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ThisEndDay() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ThisEndDay, Parameters.ThisEndDay)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ALL_DAY() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ALL_DAY, Parameters.ALL_DAY)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property START_DATE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.START_DATE, Parameters.START_DATE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property END_DATE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.END_DATE, Parameters.END_DATE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property


            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property NON_TASK_ID() As AggregateParameter
            Get
                If _NON_TASK_ID_W Is Nothing Then
                    _NON_TASK_ID_W = TearOff.NON_TASK_ID
                End If
                Return _NON_TASK_ID_W
            End Get
        End Property

        Public ReadOnly Property EMP_CODE() As AggregateParameter
            Get
                If _EMP_CODE_W Is Nothing Then
                    _EMP_CODE_W = TearOff.EMP_CODE
                End If
                Return _EMP_CODE_W
            End Get
        End Property

        Public ReadOnly Property EMP_FNAME() As AggregateParameter
            Get
                If _EMP_FNAME_W Is Nothing Then
                    _EMP_FNAME_W = TearOff.EMP_FNAME
                End If
                Return _EMP_FNAME_W
            End Get
        End Property

        Public ReadOnly Property EMP_MI() As AggregateParameter
            Get
                If _EMP_MI_W Is Nothing Then
                    _EMP_MI_W = TearOff.EMP_MI
                End If
                Return _EMP_MI_W
            End Get
        End Property

        Public ReadOnly Property EMP_LNAME() As AggregateParameter
            Get
                If _EMP_LNAME_W Is Nothing Then
                    _EMP_LNAME_W = TearOff.EMP_LNAME
                End If
                Return _EMP_LNAME_W
            End Get
        End Property

        Public ReadOnly Property TYPE() As AggregateParameter
            Get
                If _TYPE_W Is Nothing Then
                    _TYPE_W = TearOff.TYPE
                End If
                Return _TYPE_W
            End Get
        End Property

        Public ReadOnly Property NON_TASK_DESC() As AggregateParameter
            Get
                If _NON_TASK_DESC_W Is Nothing Then
                    _NON_TASK_DESC_W = TearOff.NON_TASK_DESC
                End If
                Return _NON_TASK_DESC_W
            End Get
        End Property

        Public ReadOnly Property START_TIME() As AggregateParameter
            Get
                If _START_TIME_W Is Nothing Then
                    _START_TIME_W = TearOff.START_TIME
                End If
                Return _START_TIME_W
            End Get
        End Property

        Public ReadOnly Property END_TIME() As AggregateParameter
            Get
                If _END_TIME_W Is Nothing Then
                    _END_TIME_W = TearOff.END_TIME
                End If
                Return _END_TIME_W
            End Get
        End Property

        Public ReadOnly Property TempCompDate() As AggregateParameter
            Get
                If _TempCompDate_W Is Nothing Then
                    _TempCompDate_W = TearOff.TempCompDate
                End If
                Return _TempCompDate_W
            End Get
        End Property

        Public ReadOnly Property HOURS() As AggregateParameter
            Get
                If _HOURS_W Is Nothing Then
                    _HOURS_W = TearOff.HOURS
                End If
                Return _HOURS_W
            End Get
        End Property

        Public ReadOnly Property CATEGORY() As AggregateParameter
            Get
                If _CATEGORY_W Is Nothing Then
                    _CATEGORY_W = TearOff.CATEGORY
                End If
                Return _CATEGORY_W
            End Get
        End Property

        Public ReadOnly Property ThisStartDay() As AggregateParameter
            Get
                If _ThisStartDay_W Is Nothing Then
                    _ThisStartDay_W = TearOff.ThisStartDay
                End If
                Return _ThisStartDay_W
            End Get
        End Property

        Public ReadOnly Property ThisEndDay() As AggregateParameter
            Get
                If _ThisEndDay_W Is Nothing Then
                    _ThisEndDay_W = TearOff.ThisEndDay
                End If
                Return _ThisEndDay_W
            End Get
        End Property

        Public ReadOnly Property ALL_DAY() As AggregateParameter
            Get
                If _ALL_DAY_W Is Nothing Then
                    _ALL_DAY_W = TearOff.ALL_DAY
                End If
                Return _ALL_DAY_W
            End Get
        End Property

        Public ReadOnly Property START_DATE() As AggregateParameter
            Get
                If _START_DATE_W Is Nothing Then
                    _START_DATE_W = TearOff.START_DATE
                End If
                Return _START_DATE_W
            End Get
        End Property

        Public ReadOnly Property END_DATE() As AggregateParameter
            Get
                If _END_DATE_W Is Nothing Then
                    _END_DATE_W = TearOff.END_DATE
                End If
                Return _END_DATE_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As AggregateParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Private _NON_TASK_ID_W As AggregateParameter = Nothing
        Private _EMP_CODE_W As AggregateParameter = Nothing
        Private _EMP_FNAME_W As AggregateParameter = Nothing
        Private _EMP_MI_W As AggregateParameter = Nothing
        Private _EMP_LNAME_W As AggregateParameter = Nothing
        Private _TYPE_W As AggregateParameter = Nothing
        Private _NON_TASK_DESC_W As AggregateParameter = Nothing
        Private _START_TIME_W As AggregateParameter = Nothing
        Private _END_TIME_W As AggregateParameter = Nothing
        Private _TempCompDate_W As AggregateParameter = Nothing
        Private _HOURS_W As AggregateParameter = Nothing
        Private _CATEGORY_W As AggregateParameter = Nothing
        Private _ThisStartDay_W As AggregateParameter = Nothing
        Private _ThisEndDay_W As AggregateParameter = Nothing
        Private _ALL_DAY_W As AggregateParameter = Nothing
        Private _START_DATE_W As AggregateParameter = Nothing
        Private _END_DATE_W As AggregateParameter = Nothing
        Private _DESCRIPTION_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _NON_TASK_ID_W = Nothing
            _EMP_CODE_W = Nothing
            _EMP_FNAME_W = Nothing
            _EMP_MI_W = Nothing
            _EMP_LNAME_W = Nothing
            _TYPE_W = Nothing
            _NON_TASK_DESC_W = Nothing
            _START_TIME_W = Nothing
            _END_TIME_W = Nothing
            _TempCompDate_W = Nothing
            _HOURS_W = Nothing
            _CATEGORY_W = Nothing
            _ThisStartDay_W = Nothing
            _ThisEndDay_W = Nothing
            _ALL_DAY_W = Nothing
            _START_DATE_W = Nothing
            _END_DATE_W = Nothing
            _DESCRIPTION_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand
        Return Nothing
    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand
        Return Nothing
    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand
        Return Nothing
    End Function

End Class

