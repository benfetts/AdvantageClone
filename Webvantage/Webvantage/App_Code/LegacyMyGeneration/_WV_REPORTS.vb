
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _WV_REPORTS
    Inherits SqlClientEntity

    Public Sub New()
        Me.QuerySource = "WV_REPORTS"
        Me.MappingName = "WV_REPORTS"
    End Sub

    '=================================================================
    '  Public Overrides Sub AddNew()
    '=================================================================
    '
    '=================================================================
    Public Overrides Sub AddNew()
        MyBase.AddNew()

    End Sub

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub


    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean

        Dim parameters As ListDictionary = Nothing


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_WV_REPORTSLoadAll]", parameters)

    End Function

    '=================================================================
    ' Public Overridable Function LoadByPrimaryKey()  As Boolean
    '=================================================================
    '  Loads a single row of via the primary key
    '=================================================================
    Public Overridable Function LoadByPrimaryKey() As Boolean

        Dim parameters As ListDictionary = New ListDictionary()

        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_WV_REPORTSLoadByPrimaryKey]", parameters)

    End Function

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property REPORTID() As SqlParameter
            Get
                Return New SqlParameter("@REPORTID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property CATID() As SqlParameter
            Get
                Return New SqlParameter("@CATID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property REPORTNAME() As SqlParameter
            Get
                Return New SqlParameter("@REPORTNAME", SqlDbType.VarChar, 50)
            End Get
        End Property

        Public Shared ReadOnly Property URL() As SqlParameter
            Get
                Return New SqlParameter("@URL", SqlDbType.VarChar, 50)
            End Get
        End Property

        Public Shared ReadOnly Property IMAGEPATHACTIVE() As SqlParameter
            Get
                Return New SqlParameter("@IMAGEPATHACTIVE", SqlDbType.VarChar, 50)
            End Get
        End Property

        Public Shared ReadOnly Property IMAGEPATH() As SqlParameter
            Get
                Return New SqlParameter("@IMAGEPATH", SqlDbType.VarChar, 50)
            End Get
        End Property

        Public Shared ReadOnly Property DESCRIPTION() As SqlParameter
            Get
                Return New SqlParameter("@DESCRIPTION", SqlDbType.VarChar, 2000)
            End Get
        End Property

        Public Shared ReadOnly Property PREVIEWLOCATION() As SqlParameter
            Get
                Return New SqlParameter("@PREVIEWLOCATION", SqlDbType.VarChar, 255)
            End Get
        End Property

        Public Shared ReadOnly Property LOCKED() As SqlParameter
            Get
                Return New SqlParameter("@LOCKED", SqlDbType.Bit, 0)
            End Get
        End Property

        Public Shared ReadOnly Property [NEW]() As SqlParameter
            Get
                Return New SqlParameter("@NEW", SqlDbType.Bit, 0)
            End Get
        End Property

        Public Shared ReadOnly Property SORTORDER() As SqlParameter
            Get
                Return New SqlParameter("@SORTORDER", SqlDbType.Int, 0)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const REPORTID As String = "REPORTID"
        Public Const CATID As String = "CATID"
        Public Const REPORTNAME As String = "REPORTNAME"
        Public Const URL As String = "URL"
        Public Const IMAGEPATHACTIVE As String = "IMAGEPATHACTIVE"
        Public Const IMAGEPATH As String = "IMAGEPATH"
        Public Const DESCRIPTION As String = "DESCRIPTION"
        Public Const PREVIEWLOCATION As String = "PREVIEWLOCATION"
        Public Const LOCKED As String = "LOCKED"
        Public Const [NEW] As String = "NEW"
        Public Const SORTORDER As String = "SORTORDER"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(REPORTID) = _WV_REPORTS.PropertyNames.REPORTID
                ht(CATID) = _WV_REPORTS.PropertyNames.CATID
                ht(REPORTNAME) = _WV_REPORTS.PropertyNames.REPORTNAME
                ht(URL) = _WV_REPORTS.PropertyNames.URL
                ht(IMAGEPATHACTIVE) = _WV_REPORTS.PropertyNames.IMAGEPATHACTIVE
                ht(IMAGEPATH) = _WV_REPORTS.PropertyNames.IMAGEPATH
                ht(DESCRIPTION) = _WV_REPORTS.PropertyNames.DESCRIPTION
                ht(PREVIEWLOCATION) = _WV_REPORTS.PropertyNames.PREVIEWLOCATION
                ht(LOCKED) = _WV_REPORTS.PropertyNames.LOCKED
                ht([NEW]) = _WV_REPORTS.PropertyNames.[NEW]
                ht(SORTORDER) = _WV_REPORTS.PropertyNames.SORTORDER

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const REPORTID As String = "REPORTID"
        Public Const CATID As String = "CATID"
        Public Const REPORTNAME As String = "REPORTNAME"
        Public Const URL As String = "URL"
        Public Const IMAGEPATHACTIVE As String = "IMAGEPATHACTIVE"
        Public Const IMAGEPATH As String = "IMAGEPATH"
        Public Const DESCRIPTION As String = "DESCRIPTION"
        Public Const PREVIEWLOCATION As String = "PREVIEWLOCATION"
        Public Const LOCKED As String = "LOCKED"
        Public Const [NEW] As String = "NEW"
        Public Const SORTORDER As String = "SORTORDER"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(REPORTID) = _WV_REPORTS.ColumnNames.REPORTID
                ht(CATID) = _WV_REPORTS.ColumnNames.CATID
                ht(REPORTNAME) = _WV_REPORTS.ColumnNames.REPORTNAME
                ht(URL) = _WV_REPORTS.ColumnNames.URL
                ht(IMAGEPATHACTIVE) = _WV_REPORTS.ColumnNames.IMAGEPATHACTIVE
                ht(IMAGEPATH) = _WV_REPORTS.ColumnNames.IMAGEPATH
                ht(DESCRIPTION) = _WV_REPORTS.ColumnNames.DESCRIPTION
                ht(PREVIEWLOCATION) = _WV_REPORTS.ColumnNames.PREVIEWLOCATION
                ht(LOCKED) = _WV_REPORTS.ColumnNames.LOCKED
                ht([NEW]) = _WV_REPORTS.ColumnNames.[NEW]
                ht(SORTORDER) = _WV_REPORTS.ColumnNames.SORTORDER

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const REPORTID As String = "s_REPORTID"
        Public Const CATID As String = "s_CATID"
        Public Const REPORTNAME As String = "s_REPORTNAME"
        Public Const URL As String = "s_URL"
        Public Const IMAGEPATHACTIVE As String = "s_IMAGEPATHACTIVE"
        Public Const IMAGEPATH As String = "s_IMAGEPATH"
        Public Const DESCRIPTION As String = "s_DESCRIPTION"
        Public Const PREVIEWLOCATION As String = "s_PREVIEWLOCATION"
        Public Const LOCKED As String = "s_LOCKED"
        Public Const [NEW] As String = "s_NEW"
        Public Const SORTORDER As String = "s_SORTORDER"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property REPORTID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.REPORTID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.REPORTID, Value)
        End Set
    End Property

    Public Overridable Property CATID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.CATID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.CATID, Value)
        End Set
    End Property

    Public Overridable Property REPORTNAME() As String
        Get
            Return MyBase.GetString(ColumnNames.REPORTNAME)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.REPORTNAME, Value)
        End Set
    End Property

    Public Overridable Property URL() As String
        Get
            Return MyBase.GetString(ColumnNames.URL)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.URL, Value)
        End Set
    End Property

    Public Overridable Property IMAGEPATHACTIVE() As String
        Get
            Return MyBase.GetString(ColumnNames.IMAGEPATHACTIVE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.IMAGEPATHACTIVE, Value)
        End Set
    End Property

    Public Overridable Property IMAGEPATH() As String
        Get
            Return MyBase.GetString(ColumnNames.IMAGEPATH)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.IMAGEPATH, Value)
        End Set
    End Property

    Public Overridable Property DESCRIPTION() As String
        Get
            Return MyBase.GetString(ColumnNames.DESCRIPTION)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.DESCRIPTION, Value)
        End Set
    End Property

    Public Overridable Property PREVIEWLOCATION() As String
        Get
            Return MyBase.GetString(ColumnNames.PREVIEWLOCATION)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.PREVIEWLOCATION, Value)
        End Set
    End Property

    Public Overridable Property LOCKED() As Boolean
        Get
            Return MyBase.GetBoolean(ColumnNames.LOCKED)
        End Get
        Set(ByVal Value As Boolean)
            MyBase.SetBoolean(ColumnNames.LOCKED, Value)
        End Set
    End Property

    Public Overridable Property [NEW]() As Boolean
        Get
            Return MyBase.GetBoolean(ColumnNames.[NEW])
        End Get
        Set(ByVal Value As Boolean)
            MyBase.SetBoolean(ColumnNames.[NEW], Value)
        End Set
    End Property

    Public Overridable Property SORTORDER() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.SORTORDER)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.SORTORDER, Value)
        End Set
    End Property


#End Region

#Region "String Properties"

    Public Overridable Property s_REPORTID() As String
        Get
            If Me.IsColumnNull(ColumnNames.REPORTID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.REPORTID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.REPORTID)
            Else
                Me.REPORTID = MyBase.SetIntegerAsString(ColumnNames.REPORTID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_CATID() As String
        Get
            If Me.IsColumnNull(ColumnNames.CATID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.CATID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.CATID)
            Else
                Me.CATID = MyBase.SetIntegerAsString(ColumnNames.CATID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_REPORTNAME() As String
        Get
            If Me.IsColumnNull(ColumnNames.REPORTNAME) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.REPORTNAME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.REPORTNAME)
            Else
                Me.REPORTNAME = MyBase.SetStringAsString(ColumnNames.REPORTNAME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_URL() As String
        Get
            If Me.IsColumnNull(ColumnNames.URL) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.URL)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.URL)
            Else
                Me.URL = MyBase.SetStringAsString(ColumnNames.URL, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_IMAGEPATHACTIVE() As String
        Get
            If Me.IsColumnNull(ColumnNames.IMAGEPATHACTIVE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.IMAGEPATHACTIVE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.IMAGEPATHACTIVE)
            Else
                Me.IMAGEPATHACTIVE = MyBase.SetStringAsString(ColumnNames.IMAGEPATHACTIVE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_IMAGEPATH() As String
        Get
            If Me.IsColumnNull(ColumnNames.IMAGEPATH) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.IMAGEPATH)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.IMAGEPATH)
            Else
                Me.IMAGEPATH = MyBase.SetStringAsString(ColumnNames.IMAGEPATH, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_DESCRIPTION() As String
        Get
            If Me.IsColumnNull(ColumnNames.DESCRIPTION) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.DESCRIPTION)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.DESCRIPTION)
            Else
                Me.DESCRIPTION = MyBase.SetStringAsString(ColumnNames.DESCRIPTION, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_PREVIEWLOCATION() As String
        Get
            If Me.IsColumnNull(ColumnNames.PREVIEWLOCATION) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.PREVIEWLOCATION)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.PREVIEWLOCATION)
            Else
                Me.PREVIEWLOCATION = MyBase.SetStringAsString(ColumnNames.PREVIEWLOCATION, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_LOCKED() As String
        Get
            If Me.IsColumnNull(ColumnNames.LOCKED) Then
                Return String.Empty
            Else
                Return MyBase.GetBooleanAsString(ColumnNames.LOCKED)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.LOCKED)
            Else
                Me.LOCKED = MyBase.SetBooleanAsString(ColumnNames.LOCKED, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_NEW() As String
        Get
            If Me.IsColumnNull(ColumnNames.[NEW]) Then
                Return String.Empty
            Else
                Return MyBase.GetBooleanAsString(ColumnNames.[NEW])
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.[NEW])
            Else
                Me.[NEW] = MyBase.SetBooleanAsString(ColumnNames.[NEW], Value)
            End If
        End Set
    End Property

    Public Overridable Property s_SORTORDER() As String
        Get
            If Me.IsColumnNull(ColumnNames.SORTORDER) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.SORTORDER)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.SORTORDER)
            Else
                Me.SORTORDER = MyBase.SetIntegerAsString(ColumnNames.SORTORDER, Value)
            End If
        End Set
    End Property


#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property REPORTID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.REPORTID, Parameters.REPORTID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CATID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.CATID, Parameters.CATID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property REPORTNAME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.REPORTNAME, Parameters.REPORTNAME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property URL() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.URL, Parameters.URL)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property IMAGEPATHACTIVE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.IMAGEPATHACTIVE, Parameters.IMAGEPATHACTIVE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property IMAGEPATH() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.IMAGEPATH, Parameters.IMAGEPATH)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PREVIEWLOCATION() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.PREVIEWLOCATION, Parameters.PREVIEWLOCATION)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property LOCKED() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.LOCKED, Parameters.LOCKED)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property [NEW]() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.[NEW], Parameters.[NEW])
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property SORTORDER() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.SORTORDER, Parameters.SORTORDER)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property


            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property REPORTID() As WhereParameter
            Get
                If _REPORTID_W Is Nothing Then
                    _REPORTID_W = TearOff.REPORTID
                End If
                Return _REPORTID_W
            End Get
        End Property

        Public ReadOnly Property CATID() As WhereParameter
            Get
                If _CATID_W Is Nothing Then
                    _CATID_W = TearOff.CATID
                End If
                Return _CATID_W
            End Get
        End Property

        Public ReadOnly Property REPORTNAME() As WhereParameter
            Get
                If _REPORTNAME_W Is Nothing Then
                    _REPORTNAME_W = TearOff.REPORTNAME
                End If
                Return _REPORTNAME_W
            End Get
        End Property

        Public ReadOnly Property URL() As WhereParameter
            Get
                If _URL_W Is Nothing Then
                    _URL_W = TearOff.URL
                End If
                Return _URL_W
            End Get
        End Property

        Public ReadOnly Property IMAGEPATHACTIVE() As WhereParameter
            Get
                If _IMAGEPATHACTIVE_W Is Nothing Then
                    _IMAGEPATHACTIVE_W = TearOff.IMAGEPATHACTIVE
                End If
                Return _IMAGEPATHACTIVE_W
            End Get
        End Property

        Public ReadOnly Property IMAGEPATH() As WhereParameter
            Get
                If _IMAGEPATH_W Is Nothing Then
                    _IMAGEPATH_W = TearOff.IMAGEPATH
                End If
                Return _IMAGEPATH_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As WhereParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Public ReadOnly Property PREVIEWLOCATION() As WhereParameter
            Get
                If _PREVIEWLOCATION_W Is Nothing Then
                    _PREVIEWLOCATION_W = TearOff.PREVIEWLOCATION
                End If
                Return _PREVIEWLOCATION_W
            End Get
        End Property

        Public ReadOnly Property LOCKED() As WhereParameter
            Get
                If _LOCKED_W Is Nothing Then
                    _LOCKED_W = TearOff.LOCKED
                End If
                Return _LOCKED_W
            End Get
        End Property

        Public ReadOnly Property [NEW]() As WhereParameter
            Get
                If _NEW_W Is Nothing Then
                    _NEW_W = TearOff.[NEW]
                End If
                Return _NEW_W
            End Get
        End Property

        Public ReadOnly Property SORTORDER() As WhereParameter
            Get
                If _SORTORDER_W Is Nothing Then
                    _SORTORDER_W = TearOff.SORTORDER
                End If
                Return _SORTORDER_W
            End Get
        End Property

        Private _REPORTID_W As WhereParameter = Nothing
        Private _CATID_W As WhereParameter = Nothing
        Private _REPORTNAME_W As WhereParameter = Nothing
        Private _URL_W As WhereParameter = Nothing
        Private _IMAGEPATHACTIVE_W As WhereParameter = Nothing
        Private _IMAGEPATH_W As WhereParameter = Nothing
        Private _DESCRIPTION_W As WhereParameter = Nothing
        Private _PREVIEWLOCATION_W As WhereParameter = Nothing
        Private _LOCKED_W As WhereParameter = Nothing
        Private _NEW_W As WhereParameter = Nothing
        Private _SORTORDER_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _REPORTID_W = Nothing
            _CATID_W = Nothing
            _REPORTNAME_W = Nothing
            _URL_W = Nothing
            _IMAGEPATHACTIVE_W = Nothing
            _IMAGEPATH_W = Nothing
            _DESCRIPTION_W = Nothing
            _PREVIEWLOCATION_W = Nothing
            _LOCKED_W = Nothing
            _NEW_W = Nothing
            _SORTORDER_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property REPORTID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.REPORTID, Parameters.REPORTID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CATID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CATID, Parameters.CATID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property REPORTNAME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.REPORTNAME, Parameters.REPORTNAME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property URL() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.URL, Parameters.URL)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property IMAGEPATHACTIVE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.IMAGEPATHACTIVE, Parameters.IMAGEPATHACTIVE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property IMAGEPATH() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.IMAGEPATH, Parameters.IMAGEPATH)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PREVIEWLOCATION() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.PREVIEWLOCATION, Parameters.PREVIEWLOCATION)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property LOCKED() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.LOCKED, Parameters.LOCKED)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property [NEW]() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.[NEW], Parameters.[NEW])
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property SORTORDER() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.SORTORDER, Parameters.SORTORDER)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property


            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property REPORTID() As AggregateParameter
            Get
                If _REPORTID_W Is Nothing Then
                    _REPORTID_W = TearOff.REPORTID
                End If
                Return _REPORTID_W
            End Get
        End Property

        Public ReadOnly Property CATID() As AggregateParameter
            Get
                If _CATID_W Is Nothing Then
                    _CATID_W = TearOff.CATID
                End If
                Return _CATID_W
            End Get
        End Property

        Public ReadOnly Property REPORTNAME() As AggregateParameter
            Get
                If _REPORTNAME_W Is Nothing Then
                    _REPORTNAME_W = TearOff.REPORTNAME
                End If
                Return _REPORTNAME_W
            End Get
        End Property

        Public ReadOnly Property URL() As AggregateParameter
            Get
                If _URL_W Is Nothing Then
                    _URL_W = TearOff.URL
                End If
                Return _URL_W
            End Get
        End Property

        Public ReadOnly Property IMAGEPATHACTIVE() As AggregateParameter
            Get
                If _IMAGEPATHACTIVE_W Is Nothing Then
                    _IMAGEPATHACTIVE_W = TearOff.IMAGEPATHACTIVE
                End If
                Return _IMAGEPATHACTIVE_W
            End Get
        End Property

        Public ReadOnly Property IMAGEPATH() As AggregateParameter
            Get
                If _IMAGEPATH_W Is Nothing Then
                    _IMAGEPATH_W = TearOff.IMAGEPATH
                End If
                Return _IMAGEPATH_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As AggregateParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Public ReadOnly Property PREVIEWLOCATION() As AggregateParameter
            Get
                If _PREVIEWLOCATION_W Is Nothing Then
                    _PREVIEWLOCATION_W = TearOff.PREVIEWLOCATION
                End If
                Return _PREVIEWLOCATION_W
            End Get
        End Property

        Public ReadOnly Property LOCKED() As AggregateParameter
            Get
                If _LOCKED_W Is Nothing Then
                    _LOCKED_W = TearOff.LOCKED
                End If
                Return _LOCKED_W
            End Get
        End Property

        Public ReadOnly Property [NEW]() As AggregateParameter
            Get
                If _NEW_W Is Nothing Then
                    _NEW_W = TearOff.[NEW]
                End If
                Return _NEW_W
            End Get
        End Property

        Public ReadOnly Property SORTORDER() As AggregateParameter
            Get
                If _SORTORDER_W Is Nothing Then
                    _SORTORDER_W = TearOff.SORTORDER
                End If
                Return _SORTORDER_W
            End Get
        End Property

        Private _REPORTID_W As AggregateParameter = Nothing
        Private _CATID_W As AggregateParameter = Nothing
        Private _REPORTNAME_W As AggregateParameter = Nothing
        Private _URL_W As AggregateParameter = Nothing
        Private _IMAGEPATHACTIVE_W As AggregateParameter = Nothing
        Private _IMAGEPATH_W As AggregateParameter = Nothing
        Private _DESCRIPTION_W As AggregateParameter = Nothing
        Private _PREVIEWLOCATION_W As AggregateParameter = Nothing
        Private _LOCKED_W As AggregateParameter = Nothing
        Private _NEW_W As AggregateParameter = Nothing
        Private _SORTORDER_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _REPORTID_W = Nothing
            _CATID_W = Nothing
            _REPORTNAME_W = Nothing
            _URL_W = Nothing
            _IMAGEPATHACTIVE_W = Nothing
            _IMAGEPATH_W = Nothing
            _DESCRIPTION_W = Nothing
            _PREVIEWLOCATION_W = Nothing
            _LOCKED_W = Nothing
            _NEW_W = Nothing
            _SORTORDER_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_WV_REPORTSInsert]"

        CreateParameters(cmd)

        Dim p As SqlParameter
        p = cmd.Parameters(Parameters.REPORTID.ParameterName)
        p.Direction = ParameterDirection.Output

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_WV_REPORTSUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As SqlCommand = New SqlCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_WV_REPORTSDelete]"

        Dim p As SqlParameter

        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As SqlCommand)

        Dim p As SqlParameter
        p = cmd.Parameters.Add(Parameters.REPORTID)
        p.SourceColumn = ColumnNames.REPORTID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.CATID)
        p.SourceColumn = ColumnNames.CATID
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.REPORTNAME)
        p.SourceColumn = ColumnNames.REPORTNAME
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.URL)
        p.SourceColumn = ColumnNames.URL
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.IMAGEPATHACTIVE)
        p.SourceColumn = ColumnNames.IMAGEPATHACTIVE
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.IMAGEPATH)
        p.SourceColumn = ColumnNames.IMAGEPATH
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.DESCRIPTION)
        p.SourceColumn = ColumnNames.DESCRIPTION
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.PREVIEWLOCATION)
        p.SourceColumn = ColumnNames.PREVIEWLOCATION
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.LOCKED)
        p.SourceColumn = ColumnNames.LOCKED
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.[NEW])
        p.SourceColumn = ColumnNames.[NEW]
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.SORTORDER)
        p.SourceColumn = ColumnNames.SORTORDER
        p.SourceVersion = DataRowVersion.Current


    End Sub

End Class



