
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _WV_ALERTATTACHMENTLIST
    Inherits SqlClientEntity

    Public Sub New()
        Me.QuerySource = "WV_ALERTATTACHMENTLIST"
        Me.MappingName = "WV_ALERTATTACHMENTLIST"
    End Sub

    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean
        Return MyBase.Query.Load()
    End Function

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property AttachmentID() As SqlParameter
            Get
                Return New SqlParameter("AttachmentID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property AlertID() As SqlParameter
            Get
                Return New SqlParameter("AlertID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property RealFileName() As SqlParameter
            Get
                Return New SqlParameter("RealFileName", SqlDbType.VarChar, 100)
            End Get
        End Property

        Public Shared ReadOnly Property AddedDate() As SqlParameter
            Get
                Return New SqlParameter("AddedDate", SqlDbType.SmallDateTime, 0)
            End Get
        End Property

        Public Shared ReadOnly Property UserName() As SqlParameter
            Get
                Return New SqlParameter("UserName", SqlDbType.VarChar, 30)
            End Get
        End Property

        Public Shared ReadOnly Property MimeType() As SqlParameter
            Get
                Return New SqlParameter("MimeType", SqlDbType.VarChar, 50)
            End Get
        End Property

        Public Shared ReadOnly Property EMAILSENT() As SqlParameter
            Get
                Return New SqlParameter("EMAILSENT", SqlDbType.Bit, 0)
            End Get
        End Property

        Public Shared ReadOnly Property REPOSITORY_FILENAME() As SqlParameter
            Get
                Return New SqlParameter("REPOSITORY_FILENAME", SqlDbType.VarChar, 200)
            End Get
        End Property

        Public Shared ReadOnly Property DOCUMENT_ID() As SqlParameter
            Get
                Return New SqlParameter("DOCUMENT_ID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property FILE_SIZE() As SqlParameter
            Get
                Return New SqlParameter("FILE_SIZE", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property DESCRIPTION() As SqlParameter
            Get
                Return New SqlParameter("DESCRIPTION", SqlDbType.VarChar, 200)
            End Get
        End Property

        Public Shared ReadOnly Property USER_CODE() As SqlParameter
            Get
                Return New SqlParameter("USER_CODE", SqlDbType.VarChar, 100)
            End Get
        End Property

        Public Shared ReadOnly Property PRIVATE_FLAG() As SqlParameter
            Get
                Return New SqlParameter("PRIVATE_FLAG", SqlDbType.Int, 0)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const AttachmentID As String = "AttachmentID"
        Public Const AlertID As String = "AlertID"
        Public Const RealFileName As String = "RealFileName"
        Public Const AddedDate As String = "AddedDate"
        Public Const UserName As String = "UserName"
        Public Const MimeType As String = "MimeType"
        Public Const EMAILSENT As String = "EMAILSENT"
        Public Const REPOSITORY_FILENAME As String = "REPOSITORY_FILENAME"
        Public Const DOCUMENT_ID As String = "DOCUMENT_ID"
        Public Const FILE_SIZE As String = "FILE_SIZE"
        Public Const DESCRIPTION As String = "DESCRIPTION"
        Public Const USER_CODE As String = "USER_CODE"
        Public Const PRIVATE_FLAG As String = "PRIVATE_FLAG"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(AttachmentID) = _WV_ALERTATTACHMENTLIST.PropertyNames.AttachmentID
                ht(AlertID) = _WV_ALERTATTACHMENTLIST.PropertyNames.AlertID
                ht(RealFileName) = _WV_ALERTATTACHMENTLIST.PropertyNames.RealFileName
                ht(AddedDate) = _WV_ALERTATTACHMENTLIST.PropertyNames.AddedDate
                ht(UserName) = _WV_ALERTATTACHMENTLIST.PropertyNames.UserName
                ht(MimeType) = _WV_ALERTATTACHMENTLIST.PropertyNames.MimeType
                ht(EMAILSENT) = _WV_ALERTATTACHMENTLIST.PropertyNames.EMAILSENT
                ht(REPOSITORY_FILENAME) = _WV_ALERTATTACHMENTLIST.PropertyNames.REPOSITORY_FILENAME
                ht(DOCUMENT_ID) = _WV_ALERTATTACHMENTLIST.PropertyNames.DOCUMENT_ID
                ht(FILE_SIZE) = _WV_ALERTATTACHMENTLIST.PropertyNames.FILE_SIZE
                ht(DESCRIPTION) = _WV_ALERTATTACHMENTLIST.PropertyNames.DESCRIPTION
                ht(USER_CODE) = _WV_ALERTATTACHMENTLIST.PropertyNames.USER_CODE
                ht(PRIVATE_FLAG) = _WV_ALERTATTACHMENTLIST.PropertyNames.PRIVATE_FLAG

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const AttachmentID As String = "AttachmentID"
        Public Const AlertID As String = "AlertID"
        Public Const RealFileName As String = "RealFileName"
        Public Const AddedDate As String = "AddedDate"
        Public Const UserName As String = "UserName"
        Public Const MimeType As String = "MimeType"
        Public Const EMAILSENT As String = "EMAILSENT"
        Public Const REPOSITORY_FILENAME As String = "REPOSITORY_FILENAME"
        Public Const DOCUMENT_ID As String = "DOCUMENT_ID"
        Public Const FILE_SIZE As String = "FILE_SIZE"
        Public Const DESCRIPTION As String = "DESCRIPTION"
        Public Const USER_CODE As String = "USER_CODE"
        Public Const PRIVATE_FLAG As String = "PRIVATE_FLAG"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(AttachmentID) = _WV_ALERTATTACHMENTLIST.ColumnNames.AttachmentID
                ht(AlertID) = _WV_ALERTATTACHMENTLIST.ColumnNames.AlertID
                ht(RealFileName) = _WV_ALERTATTACHMENTLIST.ColumnNames.RealFileName
                ht(AddedDate) = _WV_ALERTATTACHMENTLIST.ColumnNames.AddedDate
                ht(UserName) = _WV_ALERTATTACHMENTLIST.ColumnNames.UserName
                ht(MimeType) = _WV_ALERTATTACHMENTLIST.ColumnNames.MimeType
                ht(EMAILSENT) = _WV_ALERTATTACHMENTLIST.ColumnNames.EMAILSENT
                ht(REPOSITORY_FILENAME) = _WV_ALERTATTACHMENTLIST.ColumnNames.REPOSITORY_FILENAME
                ht(DOCUMENT_ID) = _WV_ALERTATTACHMENTLIST.ColumnNames.DOCUMENT_ID
                ht(FILE_SIZE) = _WV_ALERTATTACHMENTLIST.ColumnNames.FILE_SIZE
                ht(DESCRIPTION) = _WV_ALERTATTACHMENTLIST.ColumnNames.DESCRIPTION
                ht(USER_CODE) = _WV_ALERTATTACHMENTLIST.ColumnNames.USER_CODE
                ht(PRIVATE_FLAG) = _WV_ALERTATTACHMENTLIST.ColumnNames.PRIVATE_FLAG

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const AttachmentID As String = "s_AttachmentID"
        Public Const AlertID As String = "s_AlertID"
        Public Const RealFileName As String = "s_RealFileName"
        Public Const AddedDate As String = "s_AddedDate"
        Public Const UserName As String = "s_UserName"
        Public Const MimeType As String = "s_MimeType"
        Public Const EMAILSENT As String = "s_EMAILSENT"
        Public Const REPOSITORY_FILENAME As String = "s_REPOSITORY_FILENAME"
        Public Const DOCUMENT_ID As String = "s_DOCUMENT_ID"
        Public Const FILE_SIZE As String = "s_FILE_SIZE"
        Public Const DESCRIPTION As String = "s_DESCRIPTION"
        Public Const USER_CODE As String = "s_USER_CODE"
        Public Const PRIVATE_FLAG As String = "s_PRIVATE_FLAG"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property AttachmentID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.AttachmentID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.AttachmentID, Value)
        End Set
    End Property

    Public Overridable Property AlertID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.AlertID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.AlertID, Value)
        End Set
    End Property

    Public Overridable Property RealFileName() As String
        Get
            Return MyBase.GetString(ColumnNames.RealFileName)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.RealFileName, Value)
        End Set
    End Property

    Public Overridable Property AddedDate() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.AddedDate)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.AddedDate, Value)
        End Set
    End Property

    Public Overridable Property UserName() As String
        Get
            Return MyBase.GetString(ColumnNames.UserName)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.UserName, Value)
        End Set
    End Property

    Public Overridable Property MimeType() As String
        Get
            Return MyBase.GetString(ColumnNames.MimeType)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.MimeType, Value)
        End Set
    End Property

    Public Overridable Property EMAILSENT() As Boolean
        Get
            Return MyBase.GetBoolean(ColumnNames.EMAILSENT)
        End Get
        Set(ByVal Value As Boolean)
            MyBase.SetBoolean(ColumnNames.EMAILSENT, Value)
        End Set
    End Property

    Public Overridable Property REPOSITORY_FILENAME() As String
        Get
            Return MyBase.GetString(ColumnNames.REPOSITORY_FILENAME)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.REPOSITORY_FILENAME, Value)
        End Set
    End Property

    Public Overridable Property DOCUMENT_ID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.DOCUMENT_ID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.DOCUMENT_ID, Value)
        End Set
    End Property

    Public Overridable Property FILE_SIZE() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.FILE_SIZE)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.FILE_SIZE, Value)
        End Set
    End Property

    Public Overridable Property DESCRIPTION() As String
        Get
            Return MyBase.GetString(ColumnNames.DESCRIPTION)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.DESCRIPTION, Value)
        End Set
    End Property

    Public Overridable Property USER_CODE() As String
        Get
            Return MyBase.GetString(ColumnNames.USER_CODE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.USER_CODE, Value)
        End Set
    End Property

    Public Overridable Property PRIVATE_FLAG() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.PRIVATE_FLAG)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.PRIVATE_FLAG, Value)
        End Set
    End Property


#End Region

#Region "String Properties"

    Public Overridable Property s_AttachmentID() As String
        Get
            If Me.IsColumnNull(ColumnNames.AttachmentID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.AttachmentID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.AttachmentID)
            Else
                Me.AttachmentID = MyBase.SetIntegerAsString(ColumnNames.AttachmentID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_AlertID() As String
        Get
            If Me.IsColumnNull(ColumnNames.AlertID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.AlertID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.AlertID)
            Else
                Me.AlertID = MyBase.SetIntegerAsString(ColumnNames.AlertID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_RealFileName() As String
        Get
            If Me.IsColumnNull(ColumnNames.RealFileName) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.RealFileName)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.RealFileName)
            Else
                Me.RealFileName = MyBase.SetStringAsString(ColumnNames.RealFileName, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_AddedDate() As String
        Get
            If Me.IsColumnNull(ColumnNames.AddedDate) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.AddedDate)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.AddedDate)
            Else
                Me.AddedDate = MyBase.SetDateTimeAsString(ColumnNames.AddedDate, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_UserName() As String
        Get
            If Me.IsColumnNull(ColumnNames.UserName) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.UserName)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.UserName)
            Else
                Me.UserName = MyBase.SetStringAsString(ColumnNames.UserName, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_MimeType() As String
        Get
            If Me.IsColumnNull(ColumnNames.MimeType) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.MimeType)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.MimeType)
            Else
                Me.MimeType = MyBase.SetStringAsString(ColumnNames.MimeType, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EMAILSENT() As String
        Get
            If Me.IsColumnNull(ColumnNames.EMAILSENT) Then
                Return String.Empty
            Else
                Return MyBase.GetBooleanAsString(ColumnNames.EMAILSENT)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.EMAILSENT)
            Else
                Me.EMAILSENT = MyBase.SetBooleanAsString(ColumnNames.EMAILSENT, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_REPOSITORY_FILENAME() As String
        Get
            If Me.IsColumnNull(ColumnNames.REPOSITORY_FILENAME) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.REPOSITORY_FILENAME)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.REPOSITORY_FILENAME)
            Else
                Me.REPOSITORY_FILENAME = MyBase.SetStringAsString(ColumnNames.REPOSITORY_FILENAME, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_DOCUMENT_ID() As String
        Get
            If Me.IsColumnNull(ColumnNames.DOCUMENT_ID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.DOCUMENT_ID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.DOCUMENT_ID)
            Else
                Me.DOCUMENT_ID = MyBase.SetIntegerAsString(ColumnNames.DOCUMENT_ID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_FILE_SIZE() As String
        Get
            If Me.IsColumnNull(ColumnNames.FILE_SIZE) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.FILE_SIZE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.FILE_SIZE)
            Else
                Me.FILE_SIZE = MyBase.SetIntegerAsString(ColumnNames.FILE_SIZE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_DESCRIPTION() As String
        Get
            If Me.IsColumnNull(ColumnNames.DESCRIPTION) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.DESCRIPTION)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.DESCRIPTION)
            Else
                Me.DESCRIPTION = MyBase.SetStringAsString(ColumnNames.DESCRIPTION, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_USER_CODE() As String
        Get
            If Me.IsColumnNull(ColumnNames.USER_CODE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.USER_CODE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.USER_CODE)
            Else
                Me.USER_CODE = MyBase.SetStringAsString(ColumnNames.USER_CODE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_PRIVATE_FLAG() As String
        Get
            If Me.IsColumnNull(ColumnNames.PRIVATE_FLAG) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.PRIVATE_FLAG)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.PRIVATE_FLAG)
            Else
                Me.PRIVATE_FLAG = MyBase.SetIntegerAsString(ColumnNames.PRIVATE_FLAG, Value)
            End If
        End Set
    End Property


#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property AttachmentID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.AttachmentID, Parameters.AttachmentID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property AlertID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.AlertID, Parameters.AlertID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property RealFileName() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.RealFileName, Parameters.RealFileName)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property AddedDate() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.AddedDate, Parameters.AddedDate)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property UserName() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.UserName, Parameters.UserName)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property MimeType() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.MimeType, Parameters.MimeType)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMAILSENT() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EMAILSENT, Parameters.EMAILSENT)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property REPOSITORY_FILENAME() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.REPOSITORY_FILENAME, Parameters.REPOSITORY_FILENAME)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DOCUMENT_ID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.DOCUMENT_ID, Parameters.DOCUMENT_ID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property FILE_SIZE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.FILE_SIZE, Parameters.FILE_SIZE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property USER_CODE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.USER_CODE, Parameters.USER_CODE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PRIVATE_FLAG() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.PRIVATE_FLAG, Parameters.PRIVATE_FLAG)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property


            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property AttachmentID() As WhereParameter
            Get
                If _AttachmentID_W Is Nothing Then
                    _AttachmentID_W = TearOff.AttachmentID
                End If
                Return _AttachmentID_W
            End Get
        End Property

        Public ReadOnly Property AlertID() As WhereParameter
            Get
                If _AlertID_W Is Nothing Then
                    _AlertID_W = TearOff.AlertID
                End If
                Return _AlertID_W
            End Get
        End Property

        Public ReadOnly Property RealFileName() As WhereParameter
            Get
                If _RealFileName_W Is Nothing Then
                    _RealFileName_W = TearOff.RealFileName
                End If
                Return _RealFileName_W
            End Get
        End Property

        Public ReadOnly Property AddedDate() As WhereParameter
            Get
                If _AddedDate_W Is Nothing Then
                    _AddedDate_W = TearOff.AddedDate
                End If
                Return _AddedDate_W
            End Get
        End Property

        Public ReadOnly Property UserName() As WhereParameter
            Get
                If _UserName_W Is Nothing Then
                    _UserName_W = TearOff.UserName
                End If
                Return _UserName_W
            End Get
        End Property

        Public ReadOnly Property MimeType() As WhereParameter
            Get
                If _MimeType_W Is Nothing Then
                    _MimeType_W = TearOff.MimeType
                End If
                Return _MimeType_W
            End Get
        End Property

        Public ReadOnly Property EMAILSENT() As WhereParameter
            Get
                If _EMAILSENT_W Is Nothing Then
                    _EMAILSENT_W = TearOff.EMAILSENT
                End If
                Return _EMAILSENT_W
            End Get
        End Property

        Public ReadOnly Property REPOSITORY_FILENAME() As WhereParameter
            Get
                If _REPOSITORY_FILENAME_W Is Nothing Then
                    _REPOSITORY_FILENAME_W = TearOff.REPOSITORY_FILENAME
                End If
                Return _REPOSITORY_FILENAME_W
            End Get
        End Property

        Public ReadOnly Property DOCUMENT_ID() As WhereParameter
            Get
                If _DOCUMENT_ID_W Is Nothing Then
                    _DOCUMENT_ID_W = TearOff.DOCUMENT_ID
                End If
                Return _DOCUMENT_ID_W
            End Get
        End Property

        Public ReadOnly Property FILE_SIZE() As WhereParameter
            Get
                If _FILE_SIZE_W Is Nothing Then
                    _FILE_SIZE_W = TearOff.FILE_SIZE
                End If
                Return _FILE_SIZE_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As WhereParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Public ReadOnly Property USER_CODE() As WhereParameter
            Get
                If _USER_CODE_W Is Nothing Then
                    _USER_CODE_W = TearOff.USER_CODE
                End If
                Return _USER_CODE_W
            End Get
        End Property

        Public ReadOnly Property PRIVATE_FLAG() As WhereParameter
            Get
                If _PRIVATE_FLAG_W Is Nothing Then
                    _PRIVATE_FLAG_W = TearOff.PRIVATE_FLAG
                End If
                Return _PRIVATE_FLAG_W
            End Get
        End Property

        Private _AttachmentID_W As WhereParameter = Nothing
        Private _AlertID_W As WhereParameter = Nothing
        Private _RealFileName_W As WhereParameter = Nothing
        Private _AddedDate_W As WhereParameter = Nothing
        Private _UserName_W As WhereParameter = Nothing
        Private _MimeType_W As WhereParameter = Nothing
        Private _EMAILSENT_W As WhereParameter = Nothing
        Private _REPOSITORY_FILENAME_W As WhereParameter = Nothing
        Private _DOCUMENT_ID_W As WhereParameter = Nothing
        Private _FILE_SIZE_W As WhereParameter = Nothing
        Private _DESCRIPTION_W As WhereParameter = Nothing
        Private _USER_CODE_W As WhereParameter = Nothing
        Private _PRIVATE_FLAG_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _AttachmentID_W = Nothing
            _AlertID_W = Nothing
            _RealFileName_W = Nothing
            _AddedDate_W = Nothing
            _UserName_W = Nothing
            _MimeType_W = Nothing
            _EMAILSENT_W = Nothing
            _REPOSITORY_FILENAME_W = Nothing
            _DOCUMENT_ID_W = Nothing
            _FILE_SIZE_W = Nothing
            _DESCRIPTION_W = Nothing
            _USER_CODE_W = Nothing
            _PRIVATE_FLAG_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property AttachmentID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.AttachmentID, Parameters.AttachmentID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property AlertID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.AlertID, Parameters.AlertID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property RealFileName() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.RealFileName, Parameters.RealFileName)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property AddedDate() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.AddedDate, Parameters.AddedDate)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property UserName() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.UserName, Parameters.UserName)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property MimeType() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.MimeType, Parameters.MimeType)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMAILSENT() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMAILSENT, Parameters.EMAILSENT)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property REPOSITORY_FILENAME() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.REPOSITORY_FILENAME, Parameters.REPOSITORY_FILENAME)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DOCUMENT_ID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DOCUMENT_ID, Parameters.DOCUMENT_ID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property FILE_SIZE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.FILE_SIZE, Parameters.FILE_SIZE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property DESCRIPTION() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DESCRIPTION, Parameters.DESCRIPTION)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property USER_CODE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.USER_CODE, Parameters.USER_CODE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property PRIVATE_FLAG() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.PRIVATE_FLAG, Parameters.PRIVATE_FLAG)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property


            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property AttachmentID() As AggregateParameter
            Get
                If _AttachmentID_W Is Nothing Then
                    _AttachmentID_W = TearOff.AttachmentID
                End If
                Return _AttachmentID_W
            End Get
        End Property

        Public ReadOnly Property AlertID() As AggregateParameter
            Get
                If _AlertID_W Is Nothing Then
                    _AlertID_W = TearOff.AlertID
                End If
                Return _AlertID_W
            End Get
        End Property

        Public ReadOnly Property RealFileName() As AggregateParameter
            Get
                If _RealFileName_W Is Nothing Then
                    _RealFileName_W = TearOff.RealFileName
                End If
                Return _RealFileName_W
            End Get
        End Property

        Public ReadOnly Property AddedDate() As AggregateParameter
            Get
                If _AddedDate_W Is Nothing Then
                    _AddedDate_W = TearOff.AddedDate
                End If
                Return _AddedDate_W
            End Get
        End Property

        Public ReadOnly Property UserName() As AggregateParameter
            Get
                If _UserName_W Is Nothing Then
                    _UserName_W = TearOff.UserName
                End If
                Return _UserName_W
            End Get
        End Property

        Public ReadOnly Property MimeType() As AggregateParameter
            Get
                If _MimeType_W Is Nothing Then
                    _MimeType_W = TearOff.MimeType
                End If
                Return _MimeType_W
            End Get
        End Property

        Public ReadOnly Property EMAILSENT() As AggregateParameter
            Get
                If _EMAILSENT_W Is Nothing Then
                    _EMAILSENT_W = TearOff.EMAILSENT
                End If
                Return _EMAILSENT_W
            End Get
        End Property

        Public ReadOnly Property REPOSITORY_FILENAME() As AggregateParameter
            Get
                If _REPOSITORY_FILENAME_W Is Nothing Then
                    _REPOSITORY_FILENAME_W = TearOff.REPOSITORY_FILENAME
                End If
                Return _REPOSITORY_FILENAME_W
            End Get
        End Property

        Public ReadOnly Property DOCUMENT_ID() As AggregateParameter
            Get
                If _DOCUMENT_ID_W Is Nothing Then
                    _DOCUMENT_ID_W = TearOff.DOCUMENT_ID
                End If
                Return _DOCUMENT_ID_W
            End Get
        End Property

        Public ReadOnly Property FILE_SIZE() As AggregateParameter
            Get
                If _FILE_SIZE_W Is Nothing Then
                    _FILE_SIZE_W = TearOff.FILE_SIZE
                End If
                Return _FILE_SIZE_W
            End Get
        End Property

        Public ReadOnly Property DESCRIPTION() As AggregateParameter
            Get
                If _DESCRIPTION_W Is Nothing Then
                    _DESCRIPTION_W = TearOff.DESCRIPTION
                End If
                Return _DESCRIPTION_W
            End Get
        End Property

        Public ReadOnly Property USER_CODE() As AggregateParameter
            Get
                If _USER_CODE_W Is Nothing Then
                    _USER_CODE_W = TearOff.USER_CODE
                End If
                Return _USER_CODE_W
            End Get
        End Property

        Public ReadOnly Property PRIVATE_FLAG() As AggregateParameter
            Get
                If _PRIVATE_FLAG_W Is Nothing Then
                    _PRIVATE_FLAG_W = TearOff.PRIVATE_FLAG
                End If
                Return _PRIVATE_FLAG_W
            End Get
        End Property

        Private _AttachmentID_W As AggregateParameter = Nothing
        Private _AlertID_W As AggregateParameter = Nothing
        Private _RealFileName_W As AggregateParameter = Nothing
        Private _AddedDate_W As AggregateParameter = Nothing
        Private _UserName_W As AggregateParameter = Nothing
        Private _MimeType_W As AggregateParameter = Nothing
        Private _EMAILSENT_W As AggregateParameter = Nothing
        Private _REPOSITORY_FILENAME_W As AggregateParameter = Nothing
        Private _DOCUMENT_ID_W As AggregateParameter = Nothing
        Private _FILE_SIZE_W As AggregateParameter = Nothing
        Private _DESCRIPTION_W As AggregateParameter = Nothing
        Private _USER_CODE_W As AggregateParameter = Nothing
        Private _PRIVATE_FLAG_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _AttachmentID_W = Nothing
            _AlertID_W = Nothing
            _RealFileName_W = Nothing
            _AddedDate_W = Nothing
            _UserName_W = Nothing
            _MimeType_W = Nothing
            _EMAILSENT_W = Nothing
            _REPOSITORY_FILENAME_W = Nothing
            _DOCUMENT_ID_W = Nothing
            _FILE_SIZE_W = Nothing
            _DESCRIPTION_W = Nothing
            _USER_CODE_W = Nothing
            _PRIVATE_FLAG_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand
        Return Nothing
    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand
        Return Nothing
    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand
        Return Nothing
    End Function

End Class

