
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _WV_ALERTCOMMENTS
    Inherits SqlClientEntity

    Public Sub New()
        Me.QuerySource = "WV_ALERTCOMMENTS"
        Me.MappingName = "WV_ALERTCOMMENTS"
    End Sub

    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean
        Return MyBase.Query.Load()
    End Function

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property Generated() As SqlParameter
            Get
                Return New SqlParameter("Generated", SqlDbType.SmallDateTime, 0)
            End Get
        End Property

        Public Shared ReadOnly Property AlertID() As SqlParameter
            Get
                Return New SqlParameter("AlertID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property CommentID() As SqlParameter
            Get
                Return New SqlParameter("CommentID", SqlDbType.Int, 0)
            End Get
        End Property

        Public Shared ReadOnly Property EmployeeName() As SqlParameter
            Get
                Return New SqlParameter("EmployeeName", SqlDbType.VarChar, 30)
            End Get
        End Property

        Public Shared ReadOnly Property COMMENT() As SqlParameter
            Get
                Return New SqlParameter("COMMENT", SqlDbType.Text, 2147483647)
            End Get
        End Property

        Public Shared ReadOnly Property EMAILSENT() As SqlParameter
            Get
                Return New SqlParameter("EMAILSENT", SqlDbType.Bit, 0)
            End Get
        End Property

        Public Shared ReadOnly Property USER_CODE() As SqlParameter
            Get
                Return New SqlParameter("USER_CODE", SqlDbType.VarChar, 100)
            End Get
        End Property
        Public Shared ReadOnly Property SUBJECT() As SqlParameter
            Get
                Return New SqlParameter("SUBJECT", SqlDbType.VarChar, 254)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const Generated As String = "Generated"
        Public Const AlertID As String = "AlertID"
        Public Const CommentID As String = "CommentID"
        Public Const EmployeeName As String = "EmployeeName"
        Public Const COMMENT As String = "COMMENT"
        Public Const EMAILSENT As String = "EMAILSENT"
        Public Const USER_CODE As String = "USER_CODE"
        Public Const SUBJECT As String = "SUBJECT"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(Generated) = _WV_ALERTCOMMENTS.PropertyNames.Generated
                ht(AlertID) = _WV_ALERTCOMMENTS.PropertyNames.AlertID
                ht(CommentID) = _WV_ALERTCOMMENTS.PropertyNames.CommentID
                ht(EmployeeName) = _WV_ALERTCOMMENTS.PropertyNames.EmployeeName
                ht(COMMENT) = _WV_ALERTCOMMENTS.PropertyNames.COMMENT
                ht(EMAILSENT) = _WV_ALERTCOMMENTS.PropertyNames.EMAILSENT
                ht(USER_CODE) = _WV_ALERTCOMMENTS.PropertyNames.USER_CODE
                ht(SUBJECT) = _WV_MYALERTSLIST.PropertyNames.SUBJECT

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const Generated As String = "Generated"
        Public Const AlertID As String = "AlertID"
        Public Const CommentID As String = "CommentID"
        Public Const EmployeeName As String = "EmployeeName"
        Public Const COMMENT As String = "COMMENT"
        Public Const EMAILSENT As String = "EMAILSENT"
        Public Const USER_CODE As String = "USER_CODE"
        Public Const SUBJECT As String = "SUBJECT"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(Generated) = _WV_ALERTCOMMENTS.ColumnNames.Generated
                ht(AlertID) = _WV_ALERTCOMMENTS.ColumnNames.AlertID
                ht(CommentID) = _WV_ALERTCOMMENTS.ColumnNames.CommentID
                ht(EmployeeName) = _WV_ALERTCOMMENTS.ColumnNames.EmployeeName
                ht(COMMENT) = _WV_ALERTCOMMENTS.ColumnNames.COMMENT
                ht(EMAILSENT) = _WV_ALERTCOMMENTS.ColumnNames.EMAILSENT
                ht(USER_CODE) = _WV_ALERTCOMMENTS.ColumnNames.USER_CODE
                ht(SUBJECT) = _WV_MYALERTSLIST.ColumnNames.SUBJECT

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const Generated As String = "s_Generated"
        Public Const AlertID As String = "s_AlertID"
        Public Const CommentID As String = "s_CommentID"
        Public Const EmployeeName As String = "s_EmployeeName"
        Public Const COMMENT As String = "s_COMMENT"
        Public Const EMAILSENT As String = "s_EMAILSENT"
        Public Const USER_CODE As String = "s_USER_CODE"
        Public Const SUBJECT As String = "s_SUBJECT"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property Generated() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.Generated)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.Generated, Value)
        End Set
    End Property

    Public Overridable Property AlertID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.AlertID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.AlertID, Value)
        End Set
    End Property

    Public Overridable Property CommentID() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.CommentID)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.CommentID, Value)
        End Set
    End Property

    Public Overridable Property EmployeeName() As String
        Get
            Return MyBase.GetString(ColumnNames.EmployeeName)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.EmployeeName, Value)
        End Set
    End Property

    Public Overridable Property COMMENT() As String
        Get
            Return MyBase.GetString(ColumnNames.COMMENT)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.COMMENT, Value)
        End Set
    End Property

    Public Overridable Property EMAILSENT() As Boolean
        Get
            Return MyBase.GetBoolean(ColumnNames.EMAILSENT)
        End Get
        Set(ByVal Value As Boolean)
            MyBase.SetBoolean(ColumnNames.EMAILSENT, Value)
        End Set
    End Property

    Public Overridable Property USER_CODE() As String
        Get
            Return MyBase.GetString(ColumnNames.USER_CODE)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.USER_CODE, Value)
        End Set
    End Property

    Public Overridable Property SUBJECT() As String
        Get
            Return MyBase.GetString(ColumnNames.SUBJECT)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.SUBJECT, Value)
        End Set
    End Property


#End Region

#Region "String Properties"

    Public Overridable Property s_Generated() As String
        Get
            If Me.IsColumnNull(ColumnNames.Generated) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.Generated)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.Generated)
            Else
                Me.Generated = MyBase.SetDateTimeAsString(ColumnNames.Generated, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_AlertID() As String
        Get
            If Me.IsColumnNull(ColumnNames.AlertID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.AlertID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.AlertID)
            Else
                Me.AlertID = MyBase.SetIntegerAsString(ColumnNames.AlertID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_CommentID() As String
        Get
            If Me.IsColumnNull(ColumnNames.CommentID) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.CommentID)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.CommentID)
            Else
                Me.CommentID = MyBase.SetIntegerAsString(ColumnNames.CommentID, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EmployeeName() As String
        Get
            If Me.IsColumnNull(ColumnNames.EmployeeName) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.EmployeeName)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.EmployeeName)
            Else
                Me.EmployeeName = MyBase.SetStringAsString(ColumnNames.EmployeeName, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_COMMENT() As String
        Get
            If Me.IsColumnNull(ColumnNames.COMMENT) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.COMMENT)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.COMMENT)
            Else
                Me.COMMENT = MyBase.SetStringAsString(ColumnNames.COMMENT, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_EMAILSENT() As String
        Get
            If Me.IsColumnNull(ColumnNames.EMAILSENT) Then
                Return String.Empty
            Else
                Return MyBase.GetBooleanAsString(ColumnNames.EMAILSENT)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.EMAILSENT)
            Else
                Me.EMAILSENT = MyBase.SetBooleanAsString(ColumnNames.EMAILSENT, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_USER_CODE() As String
        Get
            If Me.IsColumnNull(ColumnNames.USER_CODE) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.USER_CODE)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.USER_CODE)
            Else
                Me.USER_CODE = MyBase.SetStringAsString(ColumnNames.USER_CODE, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_SUBJECT() As String
        Get
            If Me.IsColumnNull(ColumnNames.SUBJECT) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.SUBJECT)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.SUBJECT)
            Else
                Me.SUBJECT = MyBase.SetStringAsString(ColumnNames.SUBJECT, Value)
            End If
        End Set
    End Property



#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property Generated() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.Generated, Parameters.Generated)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property AlertID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.AlertID, Parameters.AlertID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CommentID() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.CommentID, Parameters.CommentID)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EmployeeName() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EmployeeName, Parameters.EmployeeName)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property COMMENT() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.COMMENT, Parameters.COMMENT)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMAILSENT() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.EMAILSENT, Parameters.EMAILSENT)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property USER_CODE() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.USER_CODE, Parameters.USER_CODE)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property SUBJECT() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.SUBJECT, Parameters.SUBJECT)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property Generated() As WhereParameter
            Get
                If _Generated_W Is Nothing Then
                    _Generated_W = TearOff.Generated
                End If
                Return _Generated_W
            End Get
        End Property

        Public ReadOnly Property AlertID() As WhereParameter
            Get
                If _AlertID_W Is Nothing Then
                    _AlertID_W = TearOff.AlertID
                End If
                Return _AlertID_W
            End Get
        End Property

        Public ReadOnly Property CommentID() As WhereParameter
            Get
                If _CommentID_W Is Nothing Then
                    _CommentID_W = TearOff.CommentID
                End If
                Return _CommentID_W
            End Get
        End Property

        Public ReadOnly Property EmployeeName() As WhereParameter
            Get
                If _EmployeeName_W Is Nothing Then
                    _EmployeeName_W = TearOff.EmployeeName
                End If
                Return _EmployeeName_W
            End Get
        End Property

        Public ReadOnly Property COMMENT() As WhereParameter
            Get
                If _COMMENT_W Is Nothing Then
                    _COMMENT_W = TearOff.COMMENT
                End If
                Return _COMMENT_W
            End Get
        End Property

        Public ReadOnly Property EMAILSENT() As WhereParameter
            Get
                If _EMAILSENT_W Is Nothing Then
                    _EMAILSENT_W = TearOff.EMAILSENT
                End If
                Return _EMAILSENT_W
            End Get
        End Property

        Public ReadOnly Property USER_CODE() As WhereParameter
            Get
                If _USER_CODE_W Is Nothing Then
                    _USER_CODE_W = TearOff.USER_CODE
                End If
                Return _USER_CODE_W
            End Get
        End Property
        Public ReadOnly Property SUBJECT() As WhereParameter
            Get
                If _SUBJECT_W Is Nothing Then
                    _SUBJECT_W = TearOff.SUBJECT
                End If
                Return _SUBJECT_W
            End Get
        End Property


        Private _Generated_W As WhereParameter = Nothing
        Private _AlertID_W As WhereParameter = Nothing
        Private _CommentID_W As WhereParameter = Nothing
        Private _EmployeeName_W As WhereParameter = Nothing
        Private _COMMENT_W As WhereParameter = Nothing
        Private _EMAILSENT_W As WhereParameter = Nothing
        Private _USER_CODE_W As WhereParameter = Nothing
        Private _SUBJECT_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _Generated_W = Nothing
            _AlertID_W = Nothing
            _CommentID_W = Nothing
            _EmployeeName_W = Nothing
            _COMMENT_W = Nothing
            _EMAILSENT_W = Nothing
            _USER_CODE_W = Nothing
            _SUBJECT_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property Generated() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Generated, Parameters.Generated)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property AlertID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.AlertID, Parameters.AlertID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property CommentID() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.CommentID, Parameters.CommentID)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EmployeeName() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EmployeeName, Parameters.EmployeeName)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property COMMENT() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.COMMENT, Parameters.COMMENT)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property EMAILSENT() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.EMAILSENT, Parameters.EMAILSENT)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property USER_CODE() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.USER_CODE, Parameters.USER_CODE)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property SUBJECT() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.SUBJECT, Parameters.SUBJECT)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property Generated() As AggregateParameter
            Get
                If _Generated_W Is Nothing Then
                    _Generated_W = TearOff.Generated
                End If
                Return _Generated_W
            End Get
        End Property

        Public ReadOnly Property AlertID() As AggregateParameter
            Get
                If _AlertID_W Is Nothing Then
                    _AlertID_W = TearOff.AlertID
                End If
                Return _AlertID_W
            End Get
        End Property

        Public ReadOnly Property CommentID() As AggregateParameter
            Get
                If _CommentID_W Is Nothing Then
                    _CommentID_W = TearOff.CommentID
                End If
                Return _CommentID_W
            End Get
        End Property

        Public ReadOnly Property EmployeeName() As AggregateParameter
            Get
                If _EmployeeName_W Is Nothing Then
                    _EmployeeName_W = TearOff.EmployeeName
                End If
                Return _EmployeeName_W
            End Get
        End Property

        Public ReadOnly Property COMMENT() As AggregateParameter
            Get
                If _COMMENT_W Is Nothing Then
                    _COMMENT_W = TearOff.COMMENT
                End If
                Return _COMMENT_W
            End Get
        End Property

        Public ReadOnly Property EMAILSENT() As AggregateParameter
            Get
                If _EMAILSENT_W Is Nothing Then
                    _EMAILSENT_W = TearOff.EMAILSENT
                End If
                Return _EMAILSENT_W
            End Get
        End Property

        Public ReadOnly Property USER_CODE() As AggregateParameter
            Get
                If _USER_CODE_W Is Nothing Then
                    _USER_CODE_W = TearOff.USER_CODE
                End If
                Return _USER_CODE_W
            End Get
        End Property

        Public ReadOnly Property SUBJECT() As AggregateParameter
            Get
                If _SUBJECT_W Is Nothing Then
                    _SUBJECT_W = TearOff.SUBJECT
                End If
                Return _SUBJECT_W
            End Get
        End Property


        Private _Generated_W As AggregateParameter = Nothing
        Private _AlertID_W As AggregateParameter = Nothing
        Private _CommentID_W As AggregateParameter = Nothing
        Private _EmployeeName_W As AggregateParameter = Nothing
        Private _COMMENT_W As AggregateParameter = Nothing
        Private _EMAILSENT_W As AggregateParameter = Nothing
        Private _USER_CODE_W As AggregateParameter = Nothing
        Private _SUBJECT_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _Generated_W = Nothing
            _AlertID_W = Nothing
            _CommentID_W = Nothing
            _EmployeeName_W = Nothing
            _COMMENT_W = Nothing
            _EMAILSENT_W = Nothing
            _USER_CODE_W = Nothing
            _SUBJECT_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand
        Return Nothing
    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand
        Return Nothing
    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand
        Return Nothing
    End Function

End Class

