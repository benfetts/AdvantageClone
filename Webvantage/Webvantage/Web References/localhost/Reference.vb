'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace localhost
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="GetRepositoryDocSoap", [Namespace]:="http://Webvantage.net/GetRepositoryDoc")>  _
    Partial Public Class GetRepositoryDoc
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private EncryptPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private savefileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Webvantage.My.MySettings.Default.Webvantage_localhost_GetRepositoryDoc
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event EncryptPasswordCompleted As EncryptPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event savefileCompleted As savefileCompletedEventHandler
        
        '''<remarks/>
        Public Event AddDocumentCompleted As AddDocumentCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Webvantage.net/GetRepositoryDoc/EncryptPassword", RequestNamespace:="http://Webvantage.net/GetRepositoryDoc", ResponseNamespace:="http://Webvantage.net/GetRepositoryDoc", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EncryptPassword(ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("EncryptPassword", New Object() {Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginEncryptPassword(ByVal Password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EncryptPassword", New Object() {Password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndEncryptPassword(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EncryptPasswordAsync(ByVal Password As String)
            Me.EncryptPasswordAsync(Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EncryptPasswordAsync(ByVal Password As String, ByVal userState As Object)
            If (Me.EncryptPasswordOperationCompleted Is Nothing) Then
                Me.EncryptPasswordOperationCompleted = AddressOf Me.OnEncryptPasswordOperationCompleted
            End If
            Me.InvokeAsync("EncryptPassword", New Object() {Password}, Me.EncryptPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnEncryptPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.EncryptPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EncryptPasswordCompleted(Me, New EncryptPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Webvantage.net/GetRepositoryDoc/savefile", RequestNamespace:="http://Webvantage.net/GetRepositoryDoc", ResponseNamespace:="http://Webvantage.net/GetRepositoryDoc", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function savefile(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal filebytes() As Byte, ByVal filename As String, ByVal UserDomain As String, ByVal UserName As String, ByVal UserPassword As String, ByVal DocRepPath As String) As Integer
            Dim results() As Object = Me.Invoke("savefile", New Object() {filebytes, filename, UserDomain, UserName, UserPassword, DocRepPath})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function Beginsavefile(ByVal filebytes() As Byte, ByVal filename As String, ByVal UserDomain As String, ByVal UserName As String, ByVal UserPassword As String, ByVal DocRepPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("savefile", New Object() {filebytes, filename, UserDomain, UserName, UserPassword, DocRepPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function Endsavefile(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub savefileAsync(ByVal filebytes() As Byte, ByVal filename As String, ByVal UserDomain As String, ByVal UserName As String, ByVal UserPassword As String, ByVal DocRepPath As String)
            Me.savefileAsync(filebytes, filename, UserDomain, UserName, UserPassword, DocRepPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub savefileAsync(ByVal filebytes() As Byte, ByVal filename As String, ByVal UserDomain As String, ByVal UserName As String, ByVal UserPassword As String, ByVal DocRepPath As String, ByVal userState As Object)
            If (Me.savefileOperationCompleted Is Nothing) Then
                Me.savefileOperationCompleted = AddressOf Me.OnsavefileOperationCompleted
            End If
            Me.InvokeAsync("savefile", New Object() {filebytes, filename, UserDomain, UserName, UserPassword, DocRepPath}, Me.savefileOperationCompleted, userState)
        End Sub
        
        Private Sub OnsavefileOperationCompleted(ByVal arg As Object)
            If (Not (Me.savefileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent savefileCompleted(Me, New savefileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Webvantage.net/GetRepositoryDoc/AddDocument", RequestNamespace:="http://Webvantage.net/GetRepositoryDoc", ResponseNamespace:="http://Webvantage.net/GetRepositoryDoc", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddDocument(ByVal filename As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal bytes() As Byte, ByVal UserDomain As String, ByVal UserName As String, ByVal UserPassword As String, ByVal description As String, ByVal keywords As String, ByVal authorName As String, ByVal DocRepPath As String) As String
            Dim results() As Object = Me.Invoke("AddDocument", New Object() {filename, bytes, UserDomain, UserName, UserPassword, description, keywords, authorName, DocRepPath})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAddDocument(ByVal filename As String, ByVal bytes() As Byte, ByVal UserDomain As String, ByVal UserName As String, ByVal UserPassword As String, ByVal description As String, ByVal keywords As String, ByVal authorName As String, ByVal DocRepPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddDocument", New Object() {filename, bytes, UserDomain, UserName, UserPassword, description, keywords, authorName, DocRepPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddDocument(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddDocumentAsync(ByVal filename As String, ByVal bytes() As Byte, ByVal UserDomain As String, ByVal UserName As String, ByVal UserPassword As String, ByVal description As String, ByVal keywords As String, ByVal authorName As String, ByVal DocRepPath As String)
            Me.AddDocumentAsync(filename, bytes, UserDomain, UserName, UserPassword, description, keywords, authorName, DocRepPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddDocumentAsync(ByVal filename As String, ByVal bytes() As Byte, ByVal UserDomain As String, ByVal UserName As String, ByVal UserPassword As String, ByVal description As String, ByVal keywords As String, ByVal authorName As String, ByVal DocRepPath As String, ByVal userState As Object)
            If (Me.AddDocumentOperationCompleted Is Nothing) Then
                Me.AddDocumentOperationCompleted = AddressOf Me.OnAddDocumentOperationCompleted
            End If
            Me.InvokeAsync("AddDocument", New Object() {filename, bytes, UserDomain, UserName, UserPassword, description, keywords, authorName, DocRepPath}, Me.AddDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddDocumentCompleted(Me, New AddDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub EncryptPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As EncryptPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EncryptPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub savefileCompletedEventHandler(ByVal sender As Object, ByVal e As savefileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class savefileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub AddDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As AddDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
